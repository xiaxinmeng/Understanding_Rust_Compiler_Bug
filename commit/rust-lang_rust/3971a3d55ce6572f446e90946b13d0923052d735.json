{"sha": "3971a3d55ce6572f446e90946b13d0923052d735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NzFhM2Q1NWNlNjU3MmY0NDZlOTA5NDZiMTNkMDkyMzA1MmQ3MzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-11T16:55:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-11T16:55:13Z"}, "message": "Merge remote-tracking branch 'origin/master' into gen", "tree": {"sha": "137e3bdf715c224575b083949d138eae58c4173e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137e3bdf715c224575b083949d138eae58c4173e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3971a3d55ce6572f446e90946b13d0923052d735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3971a3d55ce6572f446e90946b13d0923052d735", "html_url": "https://github.com/rust-lang/rust/commit/3971a3d55ce6572f446e90946b13d0923052d735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3971a3d55ce6572f446e90946b13d0923052d735/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b04afba632711eb205574ad03d086efdd4d11e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b04afba632711eb205574ad03d086efdd4d11e0", "html_url": "https://github.com/rust-lang/rust/commit/2b04afba632711eb205574ad03d086efdd4d11e0"}, {"sha": "38bdbb7cf9bebcc4b6331644f52f9d6e52754782", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bdbb7cf9bebcc4b6331644f52f9d6e52754782", "html_url": "https://github.com/rust-lang/rust/commit/38bdbb7cf9bebcc4b6331644f52f9d6e52754782"}], "stats": {"total": 709, "additions": 543, "deletions": 166}, "files": [{"sha": "daf556795fa6b2b9bdb71d7b9193cc36ba769f9d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -95,7 +95,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// # Cloning references\n ///\n /// Creating a new reference from an existing reference counted pointer is done using the\n-/// `Clone` trait implemented for [`Arc<T>`][`arc`] and [`Weak<T>`][`weak`].\n+/// `Clone` trait implemented for [`Arc<T>`][arc] and [`Weak<T>`][weak].\n ///\n /// ```\n /// use std::sync::Arc;"}, {"sha": "322b137e99f0e9b6856d5171384aab0b3f482a87", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -144,7 +144,7 @@ use boxed::Box;\n /// # Deref\n ///\n /// `String`s implement [`Deref`]`<Target=str>`, and so inherit all of [`str`]'s\n-/// methods. In addition, this means that you can pass a `String` to any\n+/// methods. In addition, this means that you can pass a `String` to a\n /// function which takes a [`&str`] by using an ampersand (`&`):\n ///\n /// ```\n@@ -160,8 +160,38 @@ use boxed::Box;\n ///\n /// This will create a [`&str`] from the `String` and pass it in. This\n /// conversion is very inexpensive, and so generally, functions will accept\n-/// [`&str`]s as arguments unless they need a `String` for some specific reason.\n+/// [`&str`]s as arguments unless they need a `String` for some specific\n+/// reason.\n ///\n+/// In certain cases Rust doesn't have enough information to make this\n+/// conversion, known as `Deref` coercion. In the following example a string\n+/// slice `&'a str` implements the trait `TraitExample`, and the function\n+/// `example_func` takes anything that implements the trait. In this case Rust\n+/// would need to make two implicit conversions, which Rust doesn't have the\n+/// means to do. For that reason, the following example will not compile.\n+///\n+/// ```compile_fail,E0277\n+/// trait TraitExample {}\n+///\n+/// impl<'a> TraitExample for &'a str {}\n+///\n+/// fn example_func<A: TraitExample>(example_arg: A) {}\n+///\n+/// fn main() {\n+///     let example_string = String::from(\"example_string\");\n+///     example_func(&example_string);\n+/// }\n+/// ```\n+///\n+/// There are two options that would work instead. The first would be to\n+/// change the line `example_func(&example_string);` to\n+/// `example_func(example_string.as_str());`, using the method `as_str()`\n+/// to explicitly extract the string slice containing the string. The second\n+/// way changes `example_func(&example_string);` to\n+/// `example_func(&*example_string);`. In this case we are dereferencing a\n+/// `String` to a `str`, then referencing the `str` back to `&str`. The\n+/// second way is more idiomatic, however both work to do the conversion\n+/// explicitly rather than relying on the implicit conversion.\n ///\n /// # Representation\n ///"}, {"sha": "7ee2cc3b650c5c59a9bc069b9c40ba390e23c803", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -34,7 +34,7 @@ impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref });\n impl_stable_hash_for!(struct mir::BasicBlockData<'tcx> { statements, terminator, is_cleanup });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::Terminator<'tcx> {\n+for mir::Terminator<'gcx> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::P\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::TerminatorKind<'tcx> {\n+for mir::TerminatorKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -197,7 +197,7 @@ for mir::TerminatorKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::AssertMessage<'tcx> {\n+for mir::AssertMessage<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -220,7 +220,7 @@ for mir::AssertMessage<'tcx> {\n impl_stable_hash_for!(struct mir::Statement<'tcx> { source_info, kind });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::StatementKind<'tcx> {\n+for mir::StatementKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -257,7 +257,7 @@ for mir::StatementKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-    for mir::ValidationOperand<'tcx, T>\n+    for mir::ValidationOperand<'gcx, T>\n     where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -273,7 +273,7 @@ impl<'a, 'gcx, 'tcx, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n \n impl_stable_hash_for!(enum mir::ValidationOp { Acquire, Release, Suspend(extent) });\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Lvalue<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Lvalue<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::L\n }\n \n impl<'a, 'gcx, 'tcx, B, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::Projection<'tcx, B, V, T>\n+for mir::Projection<'gcx, B, V, T>\n     where B: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n           V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n           T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n@@ -312,7 +312,7 @@ for mir::Projection<'tcx, B, V, T>\n }\n \n impl<'a, 'gcx, 'tcx, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::ProjectionElem<'tcx, V, T>\n+for mir::ProjectionElem<'gcx, V, T>\n     where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n           T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n@@ -348,7 +348,7 @@ for mir::ProjectionElem<'tcx, V, T>\n \n impl_stable_hash_for!(struct mir::VisibilityScopeData { span, parent_scope });\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Operand<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Operand<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -365,7 +365,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::O\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Rvalue<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Rvalue<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -426,7 +426,7 @@ impl_stable_hash_for!(enum mir::CastKind {\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::AggregateKind<'tcx> {\n+for mir::AggregateKind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -487,7 +487,7 @@ impl_stable_hash_for!(enum mir::NullOp {\n \n impl_stable_hash_for!(struct mir::Constant<'tcx> { span, ty, literal });\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Literal<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::Literal<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {"}, {"sha": "22364c2c43a366812dfffac7511afbfe205ba2a2", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -20,7 +20,7 @@ use syntax_pos::symbol::InternedString;\n use ty;\n \n impl<'a, 'gcx, 'tcx, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for &'tcx ty::Slice<T>\n+for &'gcx ty::Slice<T>\n     where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -30,7 +30,7 @@ for &'tcx ty::Slice<T>\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::subst::Kind<'tcx> {\n+for ty::subst::Kind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -55,6 +55,11 @@ for ty::RegionKind {\n                 db.depth.hash_stable(hcx, hasher);\n                 i.hash_stable(hcx, hasher);\n             }\n+            ty::ReLateBound(db, ty::BrNamed(def_id, name)) => {\n+                db.depth.hash_stable(hcx, hasher);\n+                def_id.hash_stable(hcx, hasher);\n+                name.hash_stable(hcx, hasher);\n+            }\n             ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, index, name }) => {\n                 def_id.hash_stable(hcx, hasher);\n                 index.hash_stable(hcx, hasher);\n@@ -76,7 +81,7 @@ for ty::RegionKind {\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::adjustment::AutoBorrow<'tcx> {\n+for ty::adjustment::AutoBorrow<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -94,7 +99,7 @@ for ty::adjustment::AutoBorrow<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::adjustment::Adjust<'tcx> {\n+for ty::adjustment::Adjust<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -128,7 +133,7 @@ impl_stable_hash_for!(enum ty::BorrowKind {\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::UpvarCapture<'tcx> {\n+for ty::UpvarCapture<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -155,12 +160,13 @@ impl_stable_hash_for!(struct ty::FnSig<'tcx> {\n });\n \n impl<'a, 'gcx, 'tcx, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Binder<T>\n-    where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> + ty::fold::TypeFoldable<'tcx>\n+    where T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        hcx.tcx().anonymize_late_bound_regions(self).0.hash_stable(hcx, hasher);\n+        let ty::Binder(ref inner) = *self;\n+        inner.hash_stable(hcx, hasher);\n     }\n }\n \n@@ -195,7 +201,7 @@ impl_stable_hash_for!(struct ty::ProjectionPredicate<'tcx> { projection_ty, ty }\n impl_stable_hash_for!(struct ty::ProjectionTy<'tcx> { substs, item_def_id });\n \n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Predicate<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Predicate<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -261,7 +267,7 @@ impl_stable_hash_for!(struct ty::FieldDef {\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ::middle::const_val::ConstVal<'tcx> {\n+for ::middle::const_val::ConstVal<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -490,7 +496,7 @@ impl_stable_hash_for!(enum ty::BoundRegion {\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::TypeVariants<'tcx>\n+for ty::TypeVariants<'gcx>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -587,7 +593,7 @@ impl_stable_hash_for!(struct ty::TypeAndMut<'tcx> {\n });\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::ExistentialPredicate<'tcx>\n+for ty::ExistentialPredicate<'gcx>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -620,7 +626,7 @@ impl_stable_hash_for!(struct ty::ExistentialProjection<'tcx> {\n \n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::TypeckTables<'tcx> {\n+for ty::TypeckTables<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -705,7 +711,7 @@ impl_stable_hash_for!(struct ty::Instance<'tcx> {\n     substs\n });\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::InstanceDef<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::InstanceDef<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {"}, {"sha": "f3d66b49de5a89000c00ec4597a4e68bebd9313b", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -73,10 +73,10 @@ macro_rules! __impl_stable_hash_field {\n #[macro_export]\n macro_rules! impl_stable_hash_for {\n     (enum $enum_name:path { $( $variant:ident $( ( $($arg:ident),* ) )* ),* }) => {\n-        impl<'a, 'gcx, 'tcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'gcx, 'tcx>> for $enum_name {\n+        impl<'a, 'tcx, 'lcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'tcx, 'lcx>> for $enum_name {\n             #[inline]\n             fn hash_stable<W: ::rustc_data_structures::stable_hasher::StableHasherResult>(&self,\n-                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'gcx, 'tcx>,\n+                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'tcx, 'lcx>,\n                                                   __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher<W>) {\n                 use $enum_name::*;\n                 ::std::mem::discriminant(self).hash_stable(__ctx, __hasher);\n@@ -92,10 +92,10 @@ macro_rules! impl_stable_hash_for {\n         }\n     };\n     (struct $struct_name:path { $($field:ident),* }) => {\n-        impl<'a, 'gcx, 'tcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'gcx, 'tcx>> for $struct_name {\n+        impl<'a, 'tcx, 'lcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'tcx, 'lcx>> for $struct_name {\n             #[inline]\n             fn hash_stable<W: ::rustc_data_structures::stable_hasher::StableHasherResult>(&self,\n-                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'gcx, 'tcx>,\n+                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'tcx, 'lcx>,\n                                                   __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher<W>) {\n                 let $struct_name {\n                     $(ref $field),*\n@@ -106,10 +106,10 @@ macro_rules! impl_stable_hash_for {\n         }\n     };\n     (tuple_struct $struct_name:path { $($field:ident),* }) => {\n-        impl<'a, 'gcx, 'tcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'gcx, 'tcx>> for $struct_name {\n+        impl<'a, 'tcx, 'lcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a, 'tcx, 'lcx>> for $struct_name {\n             #[inline]\n             fn hash_stable<W: ::rustc_data_structures::stable_hasher::StableHasherResult>(&self,\n-                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'gcx, 'tcx>,\n+                                                  __ctx: &mut $crate::ich::StableHashingContext<'a, 'tcx, 'lcx>,\n                                                   __hasher: &mut ::rustc_data_structures::stable_hasher::StableHasher<W>) {\n                 let $struct_name (\n                     $(ref $field),*\n@@ -125,11 +125,11 @@ macro_rules! impl_stable_hash_for {\n macro_rules! impl_stable_hash_for_spanned {\n     ($T:path) => (\n \n-        impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ::syntax::codemap::Spanned<$T>\n+        impl<'a, 'tcx, 'lcx> HashStable<StableHashingContext<'a, 'tcx, 'lcx>> for ::syntax::codemap::Spanned<$T>\n         {\n             #[inline]\n             fn hash_stable<W: StableHasherResult>(&self,\n-                                                  hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n+                                                  hcx: &mut StableHashingContext<'a, 'tcx, 'lcx>,\n                                                   hasher: &mut StableHasher<W>) {\n                 self.node.hash_stable(hcx, hasher);\n                 self.span.hash_stable(hcx, hasher);"}, {"sha": "6589e824187fd5b730c11b12166d249ef5aae044", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -788,6 +788,7 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n+#[derive(Copy, Clone, Debug)]\n pub enum Lookup {\n     Loc(Location),\n     Src(SourceInfo),"}, {"sha": "cf21a66d51538f9d66147b9185783030d17e7cfe", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -2207,8 +2207,8 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         let tcx = cx.tcx();\n \n         let ptr_field_type = |pointee: Ty<'tcx>| {\n+            assert!(i < 2);\n             let slice = |element: Ty<'tcx>| {\n-                assert!(i < 2);\n                 if i == 0 {\n                     tcx.mk_mut_ptr(element)\n                 } else {"}, {"sha": "0a3c4d5d8fa5a4114fc345e3204545dfcf1d6494", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -501,7 +501,7 @@ impl<'tcx> TyS<'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::TyS<'tcx> {\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::TyS<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {"}, {"sha": "82810b7aae1bb1a70b93af6f6c5399ed8c6929be", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -215,6 +215,11 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         let mut hasher = StableHasher::new();\n         let mut hcx = StableHashingContext::new(self);\n \n+        // We want the type_id be independent of the types free regions, so we\n+        // erase them. The erase_regions() call will also anonymize bound\n+        // regions, which is desirable too.\n+        let ty = self.erase_regions(&ty);\n+\n         hcx.while_hashing_spans(false, |hcx| {\n             hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                 ty.hash_stable(hcx, &mut hasher);"}, {"sha": "da22f1e411dba5a2cf2cdefead97c30a5d69ae83", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -949,15 +949,16 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     // These next passes must be executed together\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::elaborate_drops::ElaborateDrops);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n+    // AddValidation needs to run after ElaborateDrops and before EraseRegions, and it needs\n+    // an AllCallEdges pass right before it.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AllCallEdges);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_validation::AddValidation);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n     // No lifetime analysis based on borrowing can be done from here on out.\n \n-    // AddValidation needs to run after ElaborateDrops and before EraseRegions.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_validation::AddValidation);\n-\n     // From here on out, regions are gone.\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n \n@@ -969,9 +970,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyLocals);\n \n     passes.push_pass(MIR_OPTIMIZED, mir::transform::generator::StateTransform);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n-\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::CriticalCallEdges);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::dump_mir::Marker(\"PreTrans\"));\n \n     TyCtxt::create_and_enter(sess,"}, {"sha": "7f14b2bc1056723fb867035d9ad7016b42138a9e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -563,7 +563,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         Entry {\n             kind: EntryKind::Mod(self.lazy(&data)),\n             visibility: self.lazy(&ty::Visibility::from_hir(vis, id, tcx)),\n-            span: self.lazy(&md.inner),\n+            span: self.lazy(&tcx.def_span(def_id)),\n             attributes: self.encode_attributes(attrs),\n             children: self.lazy_seq(md.item_ids.iter().map(|item_id| {\n                 tcx.hir.local_def_id(item_id.id).index"}, {"sha": "177211e9372595343d92b4155246b05909b22b18", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -105,7 +105,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n         no_landing_pads::no_landing_pads(tcx, &mut result);\n         simplify::simplify_cfg(&mut result);\n-        add_call_guards::add_call_guards(&mut result);\n+        add_call_guards::CriticalCallEdges.add_call_guards(&mut result);\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     tcx.alloc_mir(result)"}, {"sha": "23a9c4c57ca6a39b107b2fef139c8540e3145457", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -13,7 +13,12 @@ use rustc::mir::*;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n-pub struct AddCallGuards;\n+#[derive(PartialEq)]\n+pub enum AddCallGuards {\n+    AllCallEdges,\n+    CriticalCallEdges,\n+}\n+pub use self::AddCallGuards::*;\n \n /**\n  * Breaks outgoing critical edges for call terminators in the MIR.\n@@ -40,48 +45,52 @@ impl MirPass for AddCallGuards {\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _src: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        add_call_guards(mir);\n+        self.add_call_guards(mir);\n     }\n }\n \n-pub fn add_call_guards(mir: &mut Mir) {\n-    let pred_count: IndexVec<_, _> =\n-        mir.predecessors().iter().map(|ps| ps.len()).collect();\n+impl AddCallGuards {\n+    pub fn add_call_guards(&self, mir: &mut Mir) {\n+        let pred_count: IndexVec<_, _> =\n+            mir.predecessors().iter().map(|ps| ps.len()).collect();\n \n-    // We need a place to store the new blocks generated\n-    let mut new_blocks = Vec::new();\n+        // We need a place to store the new blocks generated\n+        let mut new_blocks = Vec::new();\n \n-    let cur_len = mir.basic_blocks().len();\n+        let cur_len = mir.basic_blocks().len();\n \n-    for block in mir.basic_blocks_mut() {\n-        match block.terminator {\n-            Some(Terminator {\n-                kind: TerminatorKind::Call {\n-                    destination: Some((_, ref mut destination)),\n-                    cleanup: Some(_),\n-                    ..\n-                }, source_info\n-            }) if pred_count[*destination] > 1 => {\n-                // It's a critical edge, break it\n-                let call_guard = BasicBlockData {\n-                    statements: vec![],\n-                    is_cleanup: block.is_cleanup,\n-                    terminator: Some(Terminator {\n-                        source_info: source_info,\n-                        kind: TerminatorKind::Goto { target: *destination }\n-                    })\n-                };\n+        for block in mir.basic_blocks_mut() {\n+            match block.terminator {\n+                Some(Terminator {\n+                    kind: TerminatorKind::Call {\n+                        destination: Some((_, ref mut destination)),\n+                        cleanup,\n+                        ..\n+                    }, source_info\n+                }) if pred_count[*destination] > 1 &&\n+                      (cleanup.is_some() || self == &AllCallEdges) =>\n+                {\n+                    // It's a critical edge, break it\n+                    let call_guard = BasicBlockData {\n+                        statements: vec![],\n+                        is_cleanup: block.is_cleanup,\n+                        terminator: Some(Terminator {\n+                            source_info: source_info,\n+                            kind: TerminatorKind::Goto { target: *destination }\n+                        })\n+                    };\n \n-                // Get the index it will be when inserted into the MIR\n-                let idx = cur_len + new_blocks.len();\n-                new_blocks.push(call_guard);\n-                *destination = BasicBlock::new(idx);\n+                    // Get the index it will be when inserted into the MIR\n+                    let idx = cur_len + new_blocks.len();\n+                    new_blocks.push(call_guard);\n+                    *destination = BasicBlock::new(idx);\n+                }\n+                _ => {}\n             }\n-            _ => {}\n         }\n-    }\n \n-    debug!(\"Broke {} N edges\", new_blocks.len());\n+        debug!(\"Broke {} N edges\", new_blocks.len());\n \n-    mir.basic_blocks_mut().extend(new_blocks);\n+        mir.basic_blocks_mut().extend(new_blocks);\n+    }\n }"}, {"sha": "fb4764c4962682bef62e135f33050ff536f09465", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 113, "deletions": 14, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -8,26 +8,119 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::TyCtxt;\n-use rustc::mir::Mir;\n-use rustc::mir::visit::MutVisitor;\n+use rustc::ty::TypeFoldable;\n+use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::{Ty, TyCtxt, ClosureSubsts, RegionVid, RegionKind};\n+use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n+use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::infer::{self, InferCtxt};\n+use syntax_pos::DUMMY_SP;\n+use std::collections::HashMap;\n \n #[allow(dead_code)]\n-struct NLLVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    lookup_map: HashMap<RegionVid, Lookup>,\n+    infcx: InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n-impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n+    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n         NLLVisitor {\n-            tcx: tcx\n+            infcx: infcx,\n+            lookup_map: HashMap::new(),\n+        }\n+    }\n+\n+    pub fn into_results(self) -> HashMap<RegionVid, Lookup> {\n+        self.lookup_map\n+    }\n+\n+    fn renumber_regions<T>(&self, value: &T) -> T where T: TypeFoldable<'tcx> {\n+        self.infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+            self.infcx.next_region_var(infer::MiscVariable(DUMMY_SP))\n+        })\n+    }\n+\n+    fn store_region(&mut self, region: &RegionKind, lookup: Lookup) {\n+        if let RegionKind::ReVar(rid) = *region {\n+            self.lookup_map.entry(rid).or_insert(lookup);\n+        }\n+    }\n+\n+    fn store_ty_regions(&mut self, ty: &Ty<'tcx>, lookup: Lookup) {\n+        for region in ty.regions() {\n+            self.store_region(region, lookup);\n+        }\n+    }\n+\n+    fn store_kind_regions(&mut self, kind: &'tcx Kind, lookup: Lookup) {\n+        if let Some(ty) = kind.as_type() {\n+            self.store_ty_regions(&ty, lookup);\n+        } else if let Some(region) = kind.as_region() {\n+            self.store_region(region, lookup);\n         }\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n-    // FIXME: Nashenas88: implement me!\n+impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, lookup: Lookup) {\n+        let old_ty = *ty;\n+        *ty = self.renumber_regions(&old_ty);\n+        self.store_ty_regions(ty, lookup);\n+    }\n+\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n+        *substs = self.renumber_regions(&{*substs});\n+        let lookup = Lookup::Loc(location);\n+        for kind in *substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n+        match *rvalue {\n+            Rvalue::Ref(ref mut r, _, _) => {\n+                let old_r = *r;\n+                *r = self.renumber_regions(&old_r);\n+                let lookup = Lookup::Loc(location);\n+                self.store_region(r, lookup);\n+            }\n+            Rvalue::Use(..) |\n+            Rvalue::Repeat(..) |\n+            Rvalue::Len(..) |\n+            Rvalue::Cast(..) |\n+            Rvalue::BinaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::UnaryOp(..) |\n+            Rvalue::Discriminant(..) |\n+            Rvalue::NullaryOp(..) |\n+            Rvalue::Aggregate(..) => {\n+                // These variants don't contain regions.\n+            }\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+\n+    fn visit_closure_substs(&mut self,\n+                            substs: &mut ClosureSubsts<'tcx>,\n+                            location: Location) {\n+        *substs = self.renumber_regions(substs);\n+        let lookup = Lookup::Loc(location);\n+        for kind in substs.substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n+    }\n+\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::EndRegion(_) = statement.kind {\n+            statement.kind = StatementKind::Nop;\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n }\n \n // MIR Pass for non-lexical lifetimes\n@@ -38,10 +131,16 @@ impl MirPass for NLL {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.nll {\n-            // Clone mir so we can mutate it without disturbing the rest\n-            // of the compiler\n-            NLLVisitor::new(tcx).visit_mir(&mut mir.clone());\n+        if !tcx.sess.opts.debugging_opts.nll {\n+            return;\n         }\n+\n+        tcx.infer_ctxt().enter(|infcx| {\n+            // Clone mir so we can mutate it without disturbing the rest of the compiler\n+            let mut renumbered_mir = mir.clone();\n+            let mut visitor = NLLVisitor::new(infcx);\n+            visitor.visit_mir(&mut renumbered_mir);\n+            let _results = visitor.into_results();\n+        })\n     }\n }\n\\ No newline at end of file"}, {"sha": "971483e91b6f341d13743ffd901e87385775d549", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -13,6 +13,7 @@ use rustc::util::nodemap::{FxHashMap, NodeSet};\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE, INVALID_CRATE, CRATE_DEF_INDEX};\n use rustc::session::config;\n use rustc::ty::TyCtxt;\n+use rustc_allocator::ALLOCATOR_METHODS;\n use syntax::attr;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n@@ -83,6 +84,14 @@ impl ExportedSymbols {\n                               SymbolExportLevel::C));\n         }\n \n+        if tcx.sess.allocator_kind.get().is_some() {\n+            for method in ALLOCATOR_METHODS {\n+                local_crate.push((format!(\"__rust_{}\", method.name),\n+                                  INVALID_DEF_ID,\n+                                  SymbolExportLevel::Rust));\n+            }\n+        }\n+\n         if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n             let def_id = tcx.hir.local_def_id(id);\n             let idx = def_id.index;"}, {"sha": "b22cb0bafe824e32a2b2b27313e797423208869b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -3700,6 +3700,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   // inside a loop at all, which is caught by the\n                   // loop-checking pass.\n                   assert!(self.tcx.sess.err_count() > 0);\n+\n+                  // We still need to assign a type to the inner expression to\n+                  // prevent the ICE in #43162.\n+                  if let Some(ref e) = *expr_opt {\n+                      self.check_expr_with_hint(e, tcx.types.err);\n+\n+                      // ... except when we try to 'break rust;'.\n+                      // ICE this expression in particular (see #43162).\n+                      if let hir::ExprPath(hir::QPath::Resolved(_, ref path)) = e.node {\n+                          if path.segments.len() == 1 && path.segments[0].name == \"rust\" {\n+                              fatally_break_rust(self.tcx.sess);\n+                          }\n+                      }\n+                  }\n               }\n \n               // the type of a `break` is always `!`, since it diverges\n@@ -4937,3 +4951,20 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n }\n+\n+fn fatally_break_rust(sess: &Session) {\n+    let handler = sess.diagnostic();\n+    handler.span_bug_no_panic(\n+        MultiSpan::new(),\n+        \"It looks like you're trying to break rust; would you like some ICE?\",\n+    );\n+    handler.note_without_error(\"the compiler expectedly panicked. this is a feature.\");\n+    handler.note_without_error(\n+        \"we would appreciate a joke overview: \\\n+        https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\"\n+    );\n+    handler.note_without_error(&format!(\"rustc {} running on {}\",\n+        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+        ::session::config::host_triple(),\n+    ));\n+}"}, {"sha": "f5ecedcebb49389738486d44631be6abaf63010c", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1525,9 +1525,9 @@ static BAR: _ = \"test\"; // error, explicitly write out the type instead\n \"##,\n \n E0122: r##\"\n-An attempt was made to add a generic constraint to a type alias. While Rust will\n-allow this with a warning, it will not currently enforce the constraint.\n-Consider the example below:\n+An attempt was made to add a generic constraint to a type alias. This constraint\n+is entirely ignored. For backwards compatibility, Rust still allows this with a\n+warning. Consider the example below:\n \n ```\n trait Foo{}"}, {"sha": "563c5618759b721a11fa64c2975764d0acd8f194", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -2141,8 +2141,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     if !types.is_empty() {\n         write!(w, \"\n-            <h2 id='associated-types' class='section-header'>\n-              <a href='#associated-types'>Associated Types</a>\n+            <h2 id='associated-types' class='small-section-header'>\n+              Associated Types<a href='#associated-types' class='anchor'></a>\n             </h2>\n             <div class='methods'>\n         \")?;\n@@ -2154,8 +2154,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     if !consts.is_empty() {\n         write!(w, \"\n-            <h2 id='associated-const' class='section-header'>\n-              <a href='#associated-const'>Associated Constants</a>\n+            <h2 id='associated-const' class='small-section-header'>\n+              Associated Constants<a href='#associated-const' class='anchor'></a>\n             </h2>\n             <div class='methods'>\n         \")?;\n@@ -2168,8 +2168,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     // Output the documentation for each function individually\n     if !required.is_empty() {\n         write!(w, \"\n-            <h2 id='required-methods' class='section-header'>\n-              <a href='#required-methods'>Required Methods</a>\n+            <h2 id='required-methods' class='small-section-header'>\n+              Required Methods<a href='#required-methods' class='anchor'></a>\n             </h2>\n             <div class='methods'>\n         \")?;\n@@ -2180,8 +2180,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n     if !provided.is_empty() {\n         write!(w, \"\n-            <h2 id='provided-methods' class='section-header'>\n-              <a href='#provided-methods'>Provided Methods</a>\n+            <h2 id='provided-methods' class='small-section-header'>\n+              Provided Methods<a href='#provided-methods' class='anchor'></a>\n             </h2>\n             <div class='methods'>\n         \")?;\n@@ -2196,8 +2196,8 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     let cache = cache();\n     write!(w, \"\n-        <h2 id='implementors' class='section-header'>\n-          <a href='#implementors'>Implementors</a>\n+        <h2 id='implementors' class='small-section-header'>\n+          Implementors<a href='#implementors' class='anchor'></a>\n         </h2>\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n@@ -2436,8 +2436,8 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }).peekable();\n     if let doctree::Plain = s.struct_type {\n         if fields.peek().is_some() {\n-            write!(w, \"<h2 id='fields' class='fields section-header'>\n-                       <a href='#fields'>Fields</a></h2>\")?;\n+            write!(w, \"<h2 id='fields' class='fields small-section-header'>\n+                       Fields<a href='#fields' class='anchor'></a></h2>\")?;\n             for (field, ty) in fields {\n                 let id = derive_id(format!(\"{}.{}\",\n                                            ItemType::StructField,\n@@ -2485,8 +2485,8 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         }\n     }).peekable();\n     if fields.peek().is_some() {\n-        write!(w, \"<h2 id='fields' class='fields section-header'>\n-                   <a href='#fields'>Fields</a></h2>\")?;\n+        write!(w, \"<h2 id='fields' class='fields small-section-header'>\n+                   Fields<a href='#fields' class='anchor'></a></h2>\")?;\n         for (field, ty) in fields {\n             write!(w, \"<span id='{shortty}.{name}' class=\\\"{shortty}\\\"><code>{name}: {ty}</code>\n                        </span>\",\n@@ -2558,8 +2558,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     document(w, cx, it)?;\n     if !e.variants.is_empty() {\n-        write!(w, \"<h2 id='variants' class='variants section-header'>\n-                   <a href='#variants'>Variants</a></h2>\\n\")?;\n+        write!(w, \"<h2 id='variants' class='variants small-section-header'>\n+                   Variants<a href='#variants' class='anchor'></a></h2>\\n\")?;\n         for variant in &e.variants {\n             let id = derive_id(format!(\"{}.{}\",\n                                        ItemType::Variant,\n@@ -2831,16 +2831,16 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         let render_mode = match what {\n             AssocItemRender::All => {\n                 write!(w, \"\n-                    <h2 id='methods' class='section-header'>\n-                      <a href='#methods'>Methods</a>\n+                    <h2 id='methods' class='small-section-header'>\n+                      Methods<a href='#methods' class='anchor'></a>\n                     </h2>\n                 \")?;\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 write!(w, \"\n-                    <h2 id='deref-methods' class='section-header'>\n-                      <a href='#deref-methods'>Methods from {}&lt;Target = {}&gt;</a>\n+                    <h2 id='deref-methods' class='small-section-header'>\n+                      Methods from {}&lt;Target = {}&gt;<a href='#deref-methods' class='anchor'></a>\n                     </h2>\n                 \", trait_, type_)?;\n                 RenderMode::ForDeref { mut_: deref_mut_ }\n@@ -2865,8 +2865,8 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut)?;\n         }\n         write!(w, \"\n-            <h2 id='implementations' class='section-header'>\n-              <a href='#implementations'>Trait Implementations</a>\n+            <h2 id='implementations' class='small-section-header'>\n+              Trait Implementations<a href='#implementations' class='anchor'></a>\n             </h2>\n         \")?;\n         for i in &traits {"}, {"sha": "ee94f0baeb9a39bdf9cf590adc1b4c88878ab00b", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -438,6 +438,16 @@ a {\n \tbackground: transparent;\n }\n \n+.small-section-header:hover > .anchor {\n+\tdisplay: initial;\n+}\n+.anchor {\n+\tdisplay: none;\n+}\n+.anchor:after {\n+\tcontent: '\\2002\\00a7\\2002';\n+}\n+\n .docblock a:hover, .docblock-short a:hover, .stability a {\n \ttext-decoration: underline;\n }\n@@ -677,6 +687,10 @@ span.since {\n \tleft: 0;\n }\n \n+.variant + .toggle-wrapper + .docblock > p {\n+\tmargin-top: 5px;\n+}\n+\n .variant + .toggle-wrapper > a {\n \tmargin-top: 5px;\n }\n@@ -695,7 +709,7 @@ span.since {\n \tmargin-bottom: 25px;\n }\n \n-.enum .variant, .struct .structfield, .union .structfield {\n+#main > .variant, #main > .structfield {\n \tdisplay: block;\n }\n "}, {"sha": "062186ef70866fec67ef4d4676950b5bc3dc02e1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -28,7 +28,7 @@ use time::SystemTime;\n /// A reference to an open file on the filesystem.\n ///\n /// An instance of a `File` can be read and/or written depending on what options\n-/// it was opened with. Files also implement `Seek` to alter the logical cursor\n+/// it was opened with. Files also implement [`Seek`] to alter the logical cursor\n /// that the file contains internally.\n ///\n /// Files are automatically closed when they go out of scope.\n@@ -48,7 +48,7 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n-/// Read the contents of a file into a `String`:\n+/// Read the contents of a file into a [`String`]:\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -81,6 +81,8 @@ use time::SystemTime;\n /// # }\n /// ```\n ///\n+/// [`Seek`]: ../io/trait.Seek.html\n+/// [`String`]: ../string/struct.String.html\n /// [`Read`]: ../io/trait.Read.html\n /// [`BufReader<R>`]: ../io/struct.BufReader.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -104,19 +106,19 @@ pub struct Metadata(fs_imp::FileAttr);\n /// Iterator over the entries in a directory.\n ///\n /// This iterator is returned from the [`read_dir`] function of this module and\n-/// will yield instances of `io::Result<DirEntry>`. Through a [`DirEntry`]\n+/// will yield instances of [`io::Result`]`<`[`DirEntry`]`>`. Through a [`DirEntry`]\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n-/// [`read_dir`]: fn.read_dir.html\n-/// [`DirEntry`]: struct.DirEntry.html\n-///\n /// # Errors\n ///\n-/// This [`io::Result`] will be an `Err` if there's some sort of intermittent\n+/// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n /// IO error during iteration.\n ///\n+/// [`read_dir`]: fn.read_dir.html\n+/// [`DirEntry`]: struct.DirEntry.html\n /// [`io::Result`]: ../io/type.Result.html\n+/// [`Err`]: ../result/enum.Result.html#variant.Err\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct ReadDir(fs_imp::ReadDir);"}, {"sha": "68f55221a6c985f1fb7ee84718afcd9e9d97c52b", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -17,17 +17,21 @@ use convert::From;\n /// A specialized [`Result`](../result/enum.Result.html) type for I/O\n /// operations.\n ///\n-/// This type is broadly used across `std::io` for any operation which may\n+/// This type is broadly used across [`std::io`] for any operation which may\n /// produce an error.\n ///\n-/// This typedef is generally used to avoid writing out `io::Error` directly and\n-/// is otherwise a direct mapping to `Result`.\n+/// This typedef is generally used to avoid writing out [`io::Error`] directly and\n+/// is otherwise a direct mapping to [`Result`].\n ///\n-/// While usual Rust style is to import types directly, aliases of `Result`\n-/// often are not, to make it easier to distinguish between them. `Result` is\n-/// generally assumed to be `std::result::Result`, and so users of this alias\n+/// While usual Rust style is to import types directly, aliases of [`Result`]\n+/// often are not, to make it easier to distinguish between them. [`Result`] is\n+/// generally assumed to be [`std::result::Result`][`Result`], and so users of this alias\n /// will generally use `io::Result` instead of shadowing the prelude's import\n-/// of `std::result::Result`.\n+/// of [`std::result::Result`][`Result`].\n+///\n+/// [`std::io`]: ../io/index.html\n+/// [`io::Error`]: ../io/struct.Error.html\n+/// [`Result`]: ../result/enum.Result.html\n ///\n /// # Examples\n ///\n@@ -47,13 +51,16 @@ use convert::From;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result<T> = result::Result<T, Error>;\n \n-/// The error type for I/O operations of the `Read`, `Write`, `Seek`, and\n+/// The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and\n /// associated traits.\n ///\n /// Errors mostly originate from the underlying OS, but custom instances of\n /// `Error` can be created with crafted error messages and a particular value of\n /// [`ErrorKind`].\n ///\n+/// [`Read`]: ../io/trait.Read.html\n+/// [`Write`]: ../io/trait.Write.html\n+/// [`Seek`]: ../io/trait.Seek.html\n /// [`ErrorKind`]: enum.ErrorKind.html\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f486493f98b4c275f6ac3d37ebe612c494f703db", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -22,7 +22,7 @@\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n //! example, [`Read`] adds a [`read`][`Read::read`] method, which we can use on\n-//! `File`s:\n+//! [`File`]s:\n //!\n //! ```\n //! use std::io;\n@@ -146,9 +146,9 @@\n //! # }\n //! ```\n //!\n-//! Note that you cannot use the `?` operator in functions that do not return\n-//! a `Result<T, E>` (e.g. `main`). Instead, you can call `.unwrap()` or `match`\n-//! on the return value to catch any possible errors:\n+//! Note that you cannot use the [`?` operator] in functions that do not return\n+//! a [`Result<T, E>`][`Result`] (e.g. `main`). Instead, you can call [`.unwrap()`]\n+//! or `match` on the return value to catch any possible errors:\n //!\n //! ```\n //! use std::io;\n@@ -265,6 +265,8 @@\n //! [`io::Result`]: type.Result.html\n //! [`?` operator]: ../../book/first-edition/syntax-index.html\n //! [`Read::read`]: trait.Read.html#tymethod.read\n+//! [`Result`]: ../result/enum.Result.html\n+//! [`.unwrap()`]: ../result/enum.Result.html#method.unwrap\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "f7748aa3f041f43a51a0f20002e331b00626b71e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -318,6 +318,22 @@\n \n #![default_lib_allocator]\n \n+// Always use alloc_system during stage0 since we don't know if the alloc_*\n+// crate the stage0 compiler will pick by default is enabled (e.g.\n+// if the user has disabled jemalloc in `./configure`).\n+// `force_alloc_system` is *only* intended as a workaround for local rebuilds\n+// with a rustc without jemalloc.\n+// The not(stage0+msvc) gates will only last until the next stage0 bump\n+#![cfg_attr(all(\n+        not(all(stage0, target_env = \"msvc\")),\n+        any(stage0, feature = \"force_alloc_system\")),\n+    feature(global_allocator))]\n+#[cfg(all(\n+    not(all(stage0, target_env = \"msvc\")),\n+    any(stage0, feature = \"force_alloc_system\")))]\n+#[global_allocator]\n+static ALLOC: alloc_system::System = alloc_system::System;\n+\n // Explicitly import the prelude. The compiler uses this same unstable attribute\n // to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]"}, {"sha": "0abf8179cc971ff1fdc9092636c87e0a72fa00e5", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -466,7 +466,7 @@ impl Ipv4Addr {\n     /// - test addresses used for documentation (192.0.2.0/24, 198.51.100.0/24 and 203.0.113.0/24)\n     /// - the unspecified address (0.0.0.0)\n     ///\n-    /// [ipv4-sr]: http://goo.gl/RaZ7lg\n+    /// [ipv4-sr]: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml\n     /// [`true`]: ../../std/primitive.bool.html\n     ///\n     /// # Examples"}, {"sha": "7701ae25b418f792bd1e124891927931c967db25", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -655,7 +655,7 @@ impl UnixListener {\n     /// Accepts a new incoming connection to this listener.\n     ///\n     /// This function will block the calling thread until a new Unix connection\n-    /// is established. When established, the corersponding [`UnixStream`] and\n+    /// is established. When established, the corresponding [`UnixStream`] and\n     /// the remote peer's address will be returned.\n     ///\n     /// [`UnixStream`]: ../../../../std/os/unix/net/struct.UnixStream.html"}, {"sha": "194d30e25d41082e9f8bf5dc12c88b694af38d68", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::SyntaxExtension::{MultiDecorator, MultiModifier, NormalTT, IdentTT};\n+pub use self::SyntaxExtension::*;\n \n use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;"}, {"sha": "4843a66a750fab71473d1f297eb8fb2a9bb231a4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -294,7 +294,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         let item = match self.cx.resolver.resolve_macro(\n                                 Mark::root(), path, MacroKind::Derive, false) {\n                             Ok(ext) => match *ext {\n-                                SyntaxExtension::BuiltinDerive(..) => item_with_markers.clone(),\n+                                BuiltinDerive(..) => item_with_markers.clone(),\n                                 _ => item.clone(),\n                             },\n                             _ => item.clone(),\n@@ -427,7 +427,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 items.push(item);\n                 kind.expect_from_annotatables(items)\n             }\n-            SyntaxExtension::AttrProcMacro(ref mac) => {\n+            AttrProcMacro(ref mac) => {\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.unwrap()),\n@@ -436,7 +436,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n             }\n-            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", attr.path));\n                 kind.dummy(attr.span)\n             }\n@@ -474,7 +474,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         let opt_expanded = match *ext {\n-            SyntaxExtension::DeclMacro(ref expand, def_span) => {\n+            DeclMacro(ref expand, def_span) => {\n                 if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n                                                              false) {\n                     self.cx.span_err(path.span, &msg);\n@@ -512,18 +512,18 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.make_from(expander.expand(self.cx, span, ident, input))\n             }\n \n-            MultiDecorator(..) | MultiModifier(..) | SyntaxExtension::AttrProcMacro(..) => {\n+            MultiDecorator(..) | MultiModifier(..) | AttrProcMacro(..) => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n+            ProcMacroDerive(..) | BuiltinDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive mode\", path));\n                 return kind.dummy(span);\n             }\n \n-            SyntaxExtension::ProcMacro(ref expandfun) => {\n+            ProcMacro(ref expandfun) => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -582,7 +582,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         match *ext {\n-            SyntaxExtension::ProcMacroDerive(ref ext, _) => {\n+            ProcMacroDerive(ref ext, _) => {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = Span { ctxt: self.cx.backtrace(), ..span };\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this\n@@ -592,7 +592,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 };\n                 kind.expect_from_annotatables(ext.expand(self.cx, span, &dummy, item))\n             }\n-            SyntaxExtension::BuiltinDerive(func) => {\n+            BuiltinDerive(func) => {\n                 expn_info.callee.allow_internal_unstable = true;\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = Span { ctxt: self.cx.backtrace(), ..span };"}, {"sha": "c36fdef2d4c1dd9f9117a11f560654eb2b1a1b45", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -82,7 +82,7 @@ const UNICODE_ARRAY: &'static [(char, &'static str, char)] = &[\n     ('\u0589', \"Armenian Full Stop\", ':'),\n     ('\u0703', \"Syriac Supralinear Colon\", ':'),\n     ('\u0704', \"Syriac Sublinear Colon\", ':'),\n-    ('\u16ec', \"Runic Multiple Ponctuation\", ':'),\n+    ('\u16ec', \"Runic Multiple Punctuation\", ':'),\n     ('\ufe30', \"Presentation Form For Vertical Two Dot Leader\", ':'),\n     ('\u1803', \"Mongolian Full Stop\", ':'),\n     ('\u1809', \"Mongolian Manchu Full Stop\", ':'),\n@@ -264,7 +264,7 @@ const UNICODE_ARRAY: &'static [(char, &'static str, char)] = &[\n     ('\ua778', \"Latin Small Letter Um\", '&'),\n     ('\uff06', \"Fullwidth Ampersand\", '&'),\n \n-    ('\u16ed', \"Runic Cros Punctuation\", '+'),\n+    ('\u16ed', \"Runic Cross Punctuation\", '+'),\n     ('\u2795', \"Heavy Plus Sign\", '+'),\n     ('\ud800\ude9b', \"Lycian Letter H\", '+'),\n     ('\ufb29', \"Hebrew Letter Alternative Plus Sign\", '+'),"}, {"sha": "00a27818327f6692afb55eb9f74003319ecdba99", "filename": "src/test/compile-fail-fulldeps/proc-macro/attribute-with-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattribute-with-error.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:attribute-with-error.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}, {"sha": "2adbee1d3fbd5b7c23bf58667d33f00e893c1c54", "filename": "src/test/compile-fail-fulldeps/proc-macro/attributes-included.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattributes-included.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:attributes-included.rs\n+// ignore-stage1\n \n #![feature(proc_macro, rustc_attrs)]\n #![warn(unused)]"}, {"sha": "b03409c9c285e69b1b34db4e5c594a86e695bec7", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-bad.rs\n+// ignore-stage1\n \n #[macro_use]\n extern crate derive_bad;"}, {"sha": "6f254dcbdb11a361f602bbc989ac3f38e645aa03", "filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-unstable-2.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n "}, {"sha": "ca0f0e382ed0c2af76d303ca4eef7fefb0cf7e48", "filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fexpand-to-unstable.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-unstable.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n "}, {"sha": "1d645a7ec510fe420509ea39d600d30c06544218", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-38586.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-38586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-38586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-38586.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:issue_38586.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}, {"sha": "c0d4d71a6ec8be6356729db5b5dee4c835b7f398", "filename": "src/test/compile-fail-fulldeps/proc-macro/item-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fitem-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fitem-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fitem-error.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-b.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n "}, {"sha": "b1fb7d42d8683b064f1b88bafa85fa093fc70a5e", "filename": "src/test/compile-fail-fulldeps/proc-macro/lints_in_proc_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Flints_in_proc_macros.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:bang_proc_macro2.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n #![allow(unused_macros)]"}, {"sha": "153e4dd05717a42f6ae0933ccc31ec88a938af7c", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-b.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n "}, {"sha": "8f4661299e9d052540bdc90875849e07fa89131b", "filename": "src/test/compile-fail/issue-43162.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail%2Fissue-43162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fcompile-fail%2Fissue-43162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43162.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() -> bool {\n+    break true; //~ ERROR E0268\n+}\n+\n+fn main() {\n+    break {}; //~ ERROR E0268\n+}"}, {"sha": "677c92ea71b7a78a64241da9c9fe7cd7afe13c39", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n+// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n \n struct Test(i32);\n \n@@ -20,16 +20,13 @@ impl Test {\n \n fn main() {\n     let mut x = 0;\n-    Test(0).foo(&mut x);\n+    Test(0).foo(&mut x); // just making sure we do not panic when there is a tuple struct ctor\n \n     // Also test closures\n     let c = |x: &mut i32| { let y = &*x; *y };\n     c(&mut x);\n }\n \n-// FIXME: Also test code generated inside the closure, make sure it has validation.  Unfortunately,\n-// the interesting lines of code also contain name of the source file, so we cannot test for it.\n-\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n@@ -57,3 +54,24 @@ fn main() {\n //     }\n // }\n // END rustc.node23.EraseRegions.after.mir\n+// START rustc.node50.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         StorageLive(_4);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 }))), [(*_3): i32]);\n+//         _4 = &ReErased (*_3);\n+//         Validate(Acquire, [(*_4): i32/ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 })) (imm)]);\n+//         StorageLive(_5);\n+//         _5 = (*_4);\n+//         _0 = _5;\n+//         StorageDead(_5);\n+//         StorageDead(_4);\n+//         EndRegion(ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 })));\n+//         StorageDead(_3);\n+//         return;\n+//     }\n+// }\n+// END rustc.node50.EraseRegions.after.mir"}, {"sha": "2ee459d6809c55d771eccf02872a0631b5f5286f", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n+// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n \n // Make sure unsafe fns and fns with an unsafe block only get restricted validation.\n \n@@ -45,6 +45,19 @@ fn main() {\n //     }\n // }\n // END rustc.node4.EraseRegions.after.mir\n+// START rustc.node22.EraseRegions.after.mir\n+// fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         (*_3) = const 23i32;\n+//         StorageDead(_3);\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.EraseRegions.after.mir\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n@@ -58,3 +71,13 @@ fn main() {\n //     }\n // }\n // END rustc.node31.EraseRegions.after.mir\n+// START rustc.node60.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _0 = const write_42(_4) -> bb1;\n+//     }\n+// }\n+// END rustc.node60.EraseRegions.after.mir"}, {"sha": "0182e6e2964452c5627f49503ace6d7b5eff7498", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=2\n+// compile-flags: -Z verbose -Z mir-emit-validate=2 -Z span_free_formats\n \n-// Make sure unsafe fns and fns with an unsafe block only get full validation.\n+// Make sure unsafe fns and fns with an unsafe block still get full validation.\n \n unsafe fn write_42(x: *mut i32) -> bool {\n     *x = 42;\n@@ -26,12 +26,12 @@ fn main() {\n     test(&mut 0);\n \n     let test_closure = unsafe { |x: &mut i32| write_42(x) };\n+    // Note that validation will fail if this is executed: The closure keeps the lock on\n+    // x, so the write in write_42 fails.  This test just checks code generation,\n+    // so the UB doesn't matter.\n     test_closure(&mut 0);\n }\n \n-// FIXME: Also test code generated inside the closure, make sure it has validation.  Unfortunately,\n-// the interesting lines of code also contain name of the source file, so we cannot test for it.\n-\n // END RUST SOURCE\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n@@ -42,3 +42,22 @@ fn main() {\n //     }\n // }\n // END rustc.node17.EraseRegions.after.mir\n+// START rustc.node46.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         Validate(Suspend(ReScope(Misc(NodeId(44)))), [(*_3): i32]);\n+//         _5 = &ReErased mut (*_3);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Misc(NodeId(44)))]);\n+//         _4 = _5 as *mut i32 (Misc);\n+//         StorageDead(_5);\n+//         EndRegion(ReScope(Misc(NodeId(44))));\n+//         Validate(Release, [_0: bool, _4: *mut i32]);\n+//         _0 = const write_42(_4) -> bb1;\n+//     }\n+// }\n+// END rustc.node46.EraseRegions.after.mir"}, {"sha": "8b3355b96226aa8e5d1f9fbf550cf00f9c365b81", "filename": "src/test/run-make/issue-37839/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-37839%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-37839%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-37839%2FMakefile?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1,6 +1,12 @@\n -include ../tools.mk\n \n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs\n \t$(BARE_RUSTC) c.rs -L dependency=$(TMPDIR) --extern b=$(TMPDIR)/libb.rlib \\\n \t\t--out-dir=$(TMPDIR)\n+endif"}, {"sha": "c7732cc2682b1a044ee1cdd247f1aeb08b85e59f", "filename": "src/test/run-make/issue-37893/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-37893%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-37893%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-37893%2FMakefile?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1,4 +1,10 @@\n -include ../tools.mk\n \n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs && $(RUSTC) c.rs\n+endif"}, {"sha": "855d958b344a9531a3aa998ff1e89a04bd869e0a", "filename": "src/test/run-make/issue-38237/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-38237%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fissue-38237%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-38237%2FMakefile?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1,5 +1,11 @@\n -include ../tools.mk\n \n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n all:\n \t$(RUSTC) foo.rs; $(RUSTC) bar.rs\n \t$(RUSTDOC) baz.rs -L $(TMPDIR) -o $(TMPDIR)\n+endif"}, {"sha": "0d31d2c823500ab64d6d9412b77de4300d71db1d", "filename": "src/test/run-make/llvm-pass/Makefile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fllvm-pass%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Fllvm-pass%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fllvm-pass%2FMakefile?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1,5 +1,10 @@\n -include ../tools.mk\n \n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n # Windows doesn't correctly handle include statements with escaping paths,\n # so this test will not get run on Windows.\n ifdef IS_WINDOWS\n@@ -15,3 +20,5 @@ $(TMPDIR)/libllvm-function-pass.o:\n $(TMPDIR)/libllvm-module-pass.o:\n \t$(CXX) $(CFLAGS) $(LLVM_CXXFLAGS) -c llvm-module-pass.so.cc -o $(TMPDIR)/libllvm-module-pass.o\n endif\n+\n+endif"}, {"sha": "1ab27397e3146bbafa134862eca203a4763c2a35", "filename": "src/test/run-make/rustc-macro-dep-files/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -1,6 +1,12 @@\n -include ../tools.mk\n \n+ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n+# ignore stage1\n+all:\n+\n+else\n all:\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs --emit dep-info\n \tgrep \"proc-macro source\" $(TMPDIR)/bar.d && exit 1 || exit 0\n+endif"}, {"sha": "8cb9dc4a1b6ec5ca2aab7dc2c9cb1c1a781874c4", "filename": "src/test/run-pass-fulldeps/issue-40663.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40663.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:custom_derive_plugin.rs\n+// ignore-stage1\n \n #![feature(plugin, custom_derive)]\n #![plugin(custom_derive_plugin)]"}, {"sha": "5175fe174a9e743230b9b4bb887a91b9da128c88", "filename": "src/test/run-pass-fulldeps/proc-macro/add-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fadd-impl.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:add-impl.rs\n+// ignore-stage1\n \n #[macro_use]\n extern crate add_impl;"}, {"sha": "37aef7ef1318c4dd6b6f520e205070e7d6348d65", "filename": "src/test/run-pass-fulldeps/proc-macro/append-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fappend-impl.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:append-impl.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n "}, {"sha": "2968cc7871d7e1ac04691b19e98401ec3772ada4", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-args.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:attr-args.rs\n+// ignore-stage1\n \n #![allow(warnings)]\n #![feature(proc_macro)]"}, {"sha": "ffa4731f1e6371b0153a9929298a8aebc8cdab89", "filename": "src/test/run-pass-fulldeps/proc-macro/bang-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:bang-macro.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}, {"sha": "00ad0e76ed014c10c2bf8bcf2f1bf9b538d2fcfe", "filename": "src/test/run-pass-fulldeps/proc-macro/count_compound_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcount_compound_ops.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:count_compound_ops.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}, {"sha": "b6acb0faab2a531d1aef4faef0bbf434f173a38d", "filename": "src/test/run-pass-fulldeps/proc-macro/crate-var.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:double.rs\n+// ignore-stage1\n \n #![allow(unused)]\n "}, {"sha": "ba5a639a759cb826f156524c92730897f7420119", "filename": "src/test/run-pass-fulldeps/proc-macro/derive-same-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fderive-same-struct.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:derive-same-struct.rs\n+// ignore-stage1\n \n #[macro_use]\n extern crate derive_same_struct;"}, {"sha": "4cac7d19b4de8f2472d9fd78d4359bfbce414d61", "filename": "src/test/run-pass-fulldeps/proc-macro/hygiene_example.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fhygiene_example.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -10,6 +10,7 @@\n \n // aux-build:hygiene_example_codegen.rs\n // aux-build:hygiene_example.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n "}, {"sha": "87130242c0f04035331fda007066e1f0ee9af507", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-39889.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-39889.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:issue-39889.rs\n+// ignore-stage1\n \n #![feature(proc_macro)]\n #![allow(unused)]"}, {"sha": "b7826edd8b4e5215c82aba9325d639a82cf2935e", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-40001.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // aux-build:issue-40001-plugin.rs\n+// ignore-stage1\n \n #![feature(proc_macro, plugin)]\n #![plugin(issue_40001_plugin)]"}, {"sha": "67c12377814704d84d2abcc32464ab60d8e2996a", "filename": "src/test/run-pass-fulldeps/proc-macro/load-two.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fload-two.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -10,6 +10,7 @@\n \n // aux-build:derive-atob.rs\n // aux-build:derive-ctod.rs\n+// ignore-stage1\n \n #[macro_use]\n extern crate derive_atob;"}, {"sha": "03dfeb1f5c9a5ce99edcd0f506352d5df154bd97", "filename": "src/test/run-pass-fulldeps/proc-macro/use-reexport.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fuse-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fuse-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fuse-reexport.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -10,6 +10,7 @@\n \n // aux-build:derive-a.rs\n // aux-build:derive-reexport.rs\n+// ignore-stage1\n \n #[macro_use]\n extern crate derive_reexport;"}, {"sha": "39053769b24b59d9aff3ffb37128675726c760f0", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -137,4 +137,10 @@ pub fn main() {\n         panic!(\"from outer\");\n     };\n     assert_eq!(break_from_while_to_outer, 567);\n+\n+    let rust = true;\n+    let value = loop {\n+        break rust;\n+    };\n+    assert!(value);\n }"}, {"sha": "2865b5d04e5be61d4bdaf6ca522d5dac1c7be7ea", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -45,6 +45,11 @@ fn main() {\n         assert!(g != h);\n         assert!(g != i);\n         assert!(h != i);\n+\n+        // Make sure lifetime anonymization handles nesting correctly\n+        let j = TypeId::of::<fn(for<'a> fn(&'a isize) -> &'a usize)>();\n+        let k = TypeId::of::<fn(for<'b> fn(&'b isize) -> &'b usize)>();\n+        assert_eq!(j, k);\n     }\n     // Boxed unboxed closures\n     {"}, {"sha": "64fd9e0a7721b833de1877fd4abb12964d6b01f2", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -107,6 +107,10 @@ fn fishy() {\n                String::<>::from::<>(\"><>\").chars::<>().rev::<>().collect::<String>());\n }\n \n+fn union() {\n+    union union<'union> { union: &'union union<'union>, }\n+}\n+\n pub fn main() {\n     strange();\n     funny();\n@@ -119,4 +123,5 @@ pub fn main() {\n     dots();\n     you_eight();\n     fishy();\n+    union();\n }"}, {"sha": "10c99713820460eb869c88688b6ee7196849e3e4", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -69,6 +69,7 @@ const EXCEPTION_PATHS: &'static [&'static str] = &[\n     \"src/libstd/path.rs\",\n     \"src/libstd/f32.rs\",\n     \"src/libstd/f64.rs\",\n+    \"src/libstd/lib.rs\", // Until next stage0 snapshot bump\n     \"src/libstd/sys_common/mod.rs\",\n     \"src/libstd/sys_common/net.rs\",\n     \"src/libterm\", // Not sure how to make this crate portable, but test needs it"}, {"sha": "a689d8a8be4119d2808ed086b6a83cc81cfb4aa1", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3971a3d55ce6572f446e90946b13d0923052d735/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=3971a3d55ce6572f446e90946b13d0923052d735", "patch": "@@ -83,7 +83,7 @@ fn line_is_url(line: &str) -> bool {\n                 => state = EXP_END,\n \n             (EXP_URL, w)\n-                if w.starts_with(\"http://\") || w.starts_with(\"https://\")\n+                if w.starts_with(\"http://\") || w.starts_with(\"https://\") || w.starts_with(\"../\")\n                 => state = EXP_END,\n \n             (_, _) => return false,"}]}