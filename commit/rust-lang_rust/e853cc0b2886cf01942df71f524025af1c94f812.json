{"sha": "e853cc0b2886cf01942df71f524025af1c94f812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTNjYzBiMjg4NmNmMDE5NDJkZjcxZjUyNDAyNWFmMWM5NGY4MTI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-11T18:58:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-22T20:57:19Z"}, "message": "Retire rustc_dep_node_force.", "tree": {"sha": "46df4659016485ddf34434eacfafaebd3d815746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46df4659016485ddf34434eacfafaebd3d815746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e853cc0b2886cf01942df71f524025af1c94f812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e853cc0b2886cf01942df71f524025af1c94f812", "html_url": "https://github.com/rust-lang/rust/commit/e853cc0b2886cf01942df71f524025af1c94f812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e853cc0b2886cf01942df71f524025af1c94f812/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de7da7fd3db58e5f58f82635c794bb8bdf9b269f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de7da7fd3db58e5f58f82635c794bb8bdf9b269f", "html_url": "https://github.com/rust-lang/rust/commit/de7da7fd3db58e5f58f82635c794bb8bdf9b269f"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "3b27b68b8549ce426785530bc901354970fa95dc", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e853cc0b2886cf01942df71f524025af1c94f812/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e853cc0b2886cf01942df71f524025af1c94f812/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=e853cc0b2886cf01942df71f524025af1c94f812", "patch": "@@ -421,7 +421,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     let mut query_stream = quote! {};\n     let mut query_description_stream = quote! {};\n     let mut dep_node_def_stream = quote! {};\n-    let mut dep_node_force_stream = quote! {};\n     let mut try_load_from_on_disk_cache_stream = quote! {};\n     let mut cached_queries = quote! {};\n \n@@ -498,33 +497,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 [#attribute_stream] #name(#arg),\n             });\n \n-            // Add a match arm to force the query given the dep node\n-            dep_node_force_stream.extend(quote! {\n-                ::rustc_middle::dep_graph::DepKind::#name => {\n-                    if <#arg as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key() {\n-                        if let Some(key) = <#arg as DepNodeParams<TyCtxt<'_>>>::recover($tcx, $dep_node) {\n-                            force_query::<crate::ty::query::queries::#name<'_>, _>(\n-                                $tcx,\n-                                key,\n-                                DUMMY_SP,\n-                                *$dep_node\n-                            );\n-                            return true;\n-                        }\n-                    }\n-                }\n-            });\n-\n             add_query_description_impl(&query, modifiers, &mut query_description_stream);\n         }\n     }\n \n-    dep_node_force_stream.extend(quote! {\n-        ::rustc_middle::dep_graph::DepKind::Null => {\n-            bug!(\"Cannot force dep node: {:?}\", $dep_node)\n-        }\n-    });\n-\n     TokenStream::from(quote! {\n         macro_rules! rustc_query_append {\n             ([$($macro:tt)*][$($other:tt)*]) => {\n@@ -545,15 +521,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 );\n             }\n         }\n-        macro_rules! rustc_dep_node_force {\n-            ([$dep_node:expr, $tcx:expr] $($other:tt)*) => {\n-                match $dep_node.kind {\n-                    $($other)*\n-\n-                    #dep_node_force_stream\n-                }\n-            }\n-        }\n         macro_rules! rustc_cached_queries {\n             ($($macro:tt)*) => {\n                 $($macro)*(#cached_queries);"}, {"sha": "858a7c8b8a05cf9d957ac7f8c92d3be57d851576", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e853cc0b2886cf01942df71f524025af1c94f812/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e853cc0b2886cf01942df71f524025af1c94f812/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=e853cc0b2886cf01942df71f524025af1c94f812", "patch": "@@ -168,20 +168,43 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n         return false;\n     }\n \n-    rustc_dep_node_force!([dep_node, tcx]\n-        // These are inputs that are expected to be pre-allocated and that\n-        // should therefore always be red or green already.\n-        DepKind::CrateMetadata |\n-\n-        // These are anonymous nodes.\n-        DepKind::TraitSelect |\n-\n-        // We don't have enough information to reconstruct the query key of\n-        // these.\n-        DepKind::CompileCodegenUnit => {\n-            bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n+    macro_rules! force_from_dep_node {\n+        ($($(#[$attr:meta])* [$($modifiers:tt)*] $name:ident($K:ty),)*) => {\n+            match dep_node.kind {\n+                // These are inputs that are expected to be pre-allocated and that\n+                // should therefore always be red or green already.\n+                DepKind::CrateMetadata |\n+\n+                // These are anonymous nodes.\n+                DepKind::TraitSelect |\n+\n+                // We don't have enough information to reconstruct the query key of\n+                // these.\n+                DepKind::CompileCodegenUnit |\n+\n+                // Forcing this makes no sense.\n+                DepKind::Null => {\n+                    bug!(\"force_from_dep_node: encountered {:?}\", dep_node)\n+                }\n+\n+                $(DepKind::$name => {\n+                    debug_assert!(<$K as DepNodeParams<TyCtxt<'_>>>::can_reconstruct_query_key());\n+\n+                    if let Some(key) = <$K as DepNodeParams<TyCtxt<'_>>>::recover(tcx, dep_node) {\n+                        force_query::<queries::$name<'_>, _>(\n+                            tcx,\n+                            key,\n+                            DUMMY_SP,\n+                            *dep_node\n+                        );\n+                        return true;\n+                    }\n+                })*\n+            }\n         }\n-    );\n+    }\n+\n+    rustc_dep_node_append! { [force_from_dep_node!][] }\n \n     false\n }"}]}