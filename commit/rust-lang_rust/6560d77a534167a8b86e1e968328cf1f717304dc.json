{"sha": "6560d77a534167a8b86e1e968328cf1f717304dc", "node_id": "C_kwDOAAsO6NoAKDY1NjBkNzdhNTM0MTY3YThiODZlMWU5NjgzMjhjZjFmNzE3MzA0ZGM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-28T16:42:29Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:12Z"}, "message": "Bail out early if there already were errors", "tree": {"sha": "955d5292190bd641069b48377432b24486a7fe1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955d5292190bd641069b48377432b24486a7fe1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6560d77a534167a8b86e1e968328cf1f717304dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6560d77a534167a8b86e1e968328cf1f717304dc", "html_url": "https://github.com/rust-lang/rust/commit/6560d77a534167a8b86e1e968328cf1f717304dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6560d77a534167a8b86e1e968328cf1f717304dc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c873243688ed06488cdbb2c693712dafe80156", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c873243688ed06488cdbb2c693712dafe80156", "html_url": "https://github.com/rust-lang/rust/commit/29c873243688ed06488cdbb2c693712dafe80156"}], "stats": {"total": 52, "additions": 7, "deletions": 45}, "files": [{"sha": "cd12430a2a249c5e0579a6c20b2fc2f67701c91a", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6560d77a534167a8b86e1e968328cf1f717304dc/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6560d77a534167a8b86e1e968328cf1f717304dc/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=6560d77a534167a8b86e1e968328cf1f717304dc", "patch": "@@ -48,6 +48,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         instantiated_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Ty<'tcx> {\n+        if self.is_tainted_by_errors() {\n+            return self.tcx.ty_error();\n+        }\n+\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n         // Use substs to build up a reverse map from regions to their\n@@ -67,7 +71,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // after producing an error for each of them.\n         let definition_ty = instantiated_ty.fold_with(&mut ReverseMapper::new(\n             self.tcx,\n-            self.is_tainted_by_errors(),\n             def_id,\n             map,\n             instantiated_ty,\n@@ -82,10 +85,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n-    /// If errors have already been reported in this fn, we suppress\n-    /// our own errors because they are sometimes derivative.\n-    tainted_by_errors: bool,\n-\n     opaque_type_def_id: DefId,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n     map_missing_regions_to_empty: bool,\n@@ -100,15 +99,13 @@ struct ReverseMapper<'tcx> {\n impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        tainted_by_errors: bool,\n         opaque_type_def_id: DefId,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n         hidden_ty: Ty<'tcx>,\n         span: Span,\n     ) -> Self {\n         Self {\n             tcx,\n-            tainted_by_errors,\n             opaque_type_def_id,\n             map,\n             map_missing_regions_to_empty: false,\n@@ -167,9 +164,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n         match self.map.get(&r.into()).map(|k| k.unpack()) {\n             Some(GenericArgKind::Lifetime(r1)) => r1,\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n-            None if self.map_missing_regions_to_empty || self.tainted_by_errors => {\n-                self.tcx.lifetimes.re_root_empty\n-            }\n+            None if self.map_missing_regions_to_empty => self.tcx.lifetimes.re_root_empty,\n             None if generics.parent.is_some() => {\n                 if let Some(hidden_ty) = self.hidden_ty.take() {\n                     unexpected_hidden_region_diagnostic("}, {"sha": "dc85db66d32ba4d9adad945b9a9c4ef848712567", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6560d77a534167a8b86e1e968328cf1f717304dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6560d77a534167a8b86e1e968328cf1f717304dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=6560d77a534167a8b86e1e968328cf1f717304dc", "patch": "@@ -24,15 +24,6 @@ LL |     t\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "1538274d45cb22a5c3b9db37c3f9b5c06ac23a82", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6560d77a534167a8b86e1e968328cf1f717304dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6560d77a534167a8b86e1e968328cf1f717304dc/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=6560d77a534167a8b86e1e968328cf1f717304dc", "patch": "@@ -10,29 +10,5 @@ error: higher-ranked subtype error\n LL |         |x| x\n    |         ^^^^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:20:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}]}