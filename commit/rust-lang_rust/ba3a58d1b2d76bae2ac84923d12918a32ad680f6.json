{"sha": "ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhM2E1OGQxYjJkNzZiYWUyYWM4NDkyM2QxMjkxOGEzMmFkNjgwZjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T12:13:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T12:13:17Z"}, "message": "Snippetify fix_visibility", "tree": {"sha": "0eb3b895a9f37fea9d056151a4ec63fab120ada3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb3b895a9f37fea9d056151a4ec63fab120ada3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "html_url": "https://github.com/rust-lang/rust/commit/ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c446fd76a2a6191adce87b20707a37bd46cb85a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c446fd76a2a6191adce87b20707a37bd46cb85a9", "html_url": "https://github.com/rust-lang/rust/commit/c446fd76a2a6191adce87b20707a37bd46cb85a9"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "9ec42f568c5957ca17ba21992a03fab4f522f5f6", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "patch": "@@ -25,7 +25,7 @@ use crate::{AssistContext, AssistId, Assists};\n // ->\n // ```\n // mod m {\n-//     pub(crate) fn frobnicate() {}\n+//     $0pub(crate) fn frobnicate() {}\n // }\n // fn main() {\n //     m::frobnicate() {}\n@@ -62,10 +62,12 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         Some(name) => format!(\"Change visibility of {} to {}\", name, missing_visibility),\n     };\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |edit| {\n-        edit.set_file(target_file);\n-        edit.insert(offset, format!(\"{} \", missing_visibility));\n-        edit.set_cursor(offset);\n+    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+        builder.set_file(target_file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+        }\n     })\n }\n \n@@ -103,10 +105,12 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |edit| {\n-        edit.set_file(target_file);\n-        edit.insert(offset, format!(\"{} \", missing_visibility));\n-        edit.set_cursor(offset)\n+    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+        builder.set_file(target_file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+        }\n     })\n }\n \n@@ -196,7 +200,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { fn foo() {} }\n               fn main() { foo::foo<|>() } \",\n-            r\"mod foo { <|>pub(crate) fn foo() {} }\n+            r\"mod foo { $0pub(crate) fn foo() {} }\n               fn main() { foo::foo() } \",\n         );\n         check_assist_not_applicable(\n@@ -212,7 +216,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { struct Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) struct Foo; }\n+            r\"mod foo { $0pub(crate) struct Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -224,7 +228,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { enum Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) enum Foo; }\n+            r\"mod foo { $0pub(crate) enum Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -236,7 +240,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { union Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) union Foo; }\n+            r\"mod foo { $0pub(crate) union Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -258,7 +262,7 @@ mod tests {\n               //- /foo.rs\n               struct Foo;\n               \",\n-            r\"<|>pub(crate) struct Foo;\n+            r\"$0pub(crate) struct Foo;\n \n \",\n         );\n@@ -270,7 +274,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub struct Foo { bar: (), } }\n               fn main() { foo::Foo { <|>bar: () }; } \",\n-            r\"mod foo { pub struct Foo { <|>pub(crate) bar: (), } }\n+            r\"mod foo { pub struct Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n         check_assist(\n@@ -281,7 +285,7 @@ mod tests {\n               //- /foo.rs\n               pub struct Foo { bar: () }\n               \",\n-            r\"pub struct Foo { <|>pub(crate) bar: () }\n+            r\"pub struct Foo { $0pub(crate) bar: () }\n \n \",\n         );\n@@ -307,7 +311,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub enum Foo { Bar { bar: () } } }\n               fn main() { foo::Foo::Bar { <|>bar: () }; } \",\n-            r\"mod foo { pub enum Foo { Bar { <|>pub(crate) bar: () } } }\n+            r\"mod foo { pub enum Foo { Bar { $0pub(crate) bar: () } } }\n               fn main() { foo::Foo::Bar { bar: () }; } \",\n         );\n         check_assist(\n@@ -318,7 +322,7 @@ mod tests {\n               //- /foo.rs\n               pub enum Foo { Bar { bar: () } }\n               \",\n-            r\"pub enum Foo { Bar { <|>pub(crate) bar: () } }\n+            r\"pub enum Foo { Bar { $0pub(crate) bar: () } }\n \n \",\n         );\n@@ -346,7 +350,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub union Foo { bar: (), } }\n               fn main() { foo::Foo { <|>bar: () }; } \",\n-            r\"mod foo { pub union Foo { <|>pub(crate) bar: (), } }\n+            r\"mod foo { pub union Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n         check_assist(\n@@ -357,7 +361,7 @@ mod tests {\n               //- /foo.rs\n               pub union Foo { bar: () }\n               \",\n-            r\"pub union Foo { <|>pub(crate) bar: () }\n+            r\"pub union Foo { $0pub(crate) bar: () }\n \n \",\n         );\n@@ -383,7 +387,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { const FOO: () = (); }\n               fn main() { foo::FOO<|> } \",\n-            r\"mod foo { <|>pub(crate) const FOO: () = (); }\n+            r\"mod foo { $0pub(crate) const FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n@@ -399,7 +403,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { static FOO: () = (); }\n               fn main() { foo::FOO<|> } \",\n-            r\"mod foo { <|>pub(crate) static FOO: () = (); }\n+            r\"mod foo { $0pub(crate) static FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n@@ -415,7 +419,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { trait Foo { fn foo(&self) {} } }\n               fn main() { let x: &dyn foo::<|>Foo; } \",\n-            r\"mod foo { <|>pub(crate) trait Foo { fn foo(&self) {} } }\n+            r\"mod foo { $0pub(crate) trait Foo { fn foo(&self) {} } }\n               fn main() { let x: &dyn foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n@@ -431,7 +435,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { type Foo = (); }\n               fn main() { let x: foo::Foo<|>; } \",\n-            r\"mod foo { <|>pub(crate) type Foo = (); }\n+            r\"mod foo { $0pub(crate) type Foo = (); }\n               fn main() { let x: foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n@@ -447,7 +451,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { mod bar { fn bar() {} } }\n               fn main() { foo::bar<|>::bar(); } \",\n-            r\"mod foo { <|>pub(crate) mod bar { fn bar() {} } }\n+            r\"mod foo { $0pub(crate) mod bar { fn bar() {} } }\n               fn main() { foo::bar::bar(); } \",\n         );\n \n@@ -463,7 +467,7 @@ mod tests {\n                 pub fn baz() {}\n             }\n             \",\n-            r\"<|>pub(crate) mod bar {\n+            r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n \n@@ -493,7 +497,7 @@ mod tests {\n             pub fn baz() {}\n             }\n             \",\n-            r\"<|>pub(crate) mod bar;\n+            r\"$0pub(crate) mod bar;\n \",\n         );\n     }\n@@ -510,7 +514,7 @@ mod tests {\n               mod bar {\n                   pub fn baz() {}\n               }\",\n-            r\"<|>pub(crate) mod bar {\n+            r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n \",\n@@ -525,7 +529,7 @@ mod tests {\n               foo::Bar<|>\n               //- /lib.rs crate:foo\n               struct Bar;\",\n-            r\"<|>pub struct Bar;\n+            r\"$0pub struct Bar;\n \",\n         )\n     }\n@@ -545,7 +549,7 @@ mod tests {\n             \",\n             r\"\n             mod foo {\n-                <|>pub(crate) use bar::Baz;\n+                $0pub(crate) use bar::Baz;\n                 mod bar { pub(super) struct Baz; }\n             }\n             foo::Baz"}, {"sha": "3e6654c17588ab4412750ae9ba0334dfd2115251", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "patch": "@@ -358,7 +358,7 @@ fn main() {\n \"#####,\n         r#####\"\n mod m {\n-    pub(crate) fn frobnicate() {}\n+    $0pub(crate) fn frobnicate() {}\n }\n fn main() {\n     m::frobnicate() {}"}, {"sha": "51807ffdac583565d1074f91543991605c21ba21", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba3a58d1b2d76bae2ac84923d12918a32ad680f6/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "patch": "@@ -346,7 +346,7 @@ fn main() {\n \n // AFTER\n mod m {\n-    pub(crate) fn frobnicate() {}\n+    $0pub(crate) fn frobnicate() {}\n }\n fn main() {\n     m::frobnicate() {}"}]}