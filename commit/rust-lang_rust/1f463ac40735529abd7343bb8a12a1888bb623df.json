{"sha": "1f463ac40735529abd7343bb8a12a1888bb623df", "node_id": "C_kwDOAAsO6NoAKDFmNDYzYWM0MDczNTUyOWFiZDczNDNiYjhhMTJhMTg4OGJiNjIzZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T03:05:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T03:05:57Z"}, "message": "Resolve vars before emitting coerce error", "tree": {"sha": "6cab261abee3cf75ce93db9cbe091e442b231a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cab261abee3cf75ce93db9cbe091e442b231a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f463ac40735529abd7343bb8a12a1888bb623df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f463ac40735529abd7343bb8a12a1888bb623df", "html_url": "https://github.com/rust-lang/rust/commit/1f463ac40735529abd7343bb8a12a1888bb623df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f463ac40735529abd7343bb8a12a1888bb623df/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e", "html_url": "https://github.com/rust-lang/rust/commit/c62a8ea9df90a14c8c48ccbaffa959ed6ca2a97e"}], "stats": {"total": 114, "additions": 102, "deletions": 12}, "files": [{"sha": "b659eab5ca4c0865801b6c1bee39930ccbf667f4", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -1478,6 +1478,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     // type)\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n+                let (expected, found) = fcx.resolve_vars_if_possible((expected, found));\n \n                 let mut err;\n                 let mut unsized_return = false;\n@@ -1663,7 +1664,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 sp,\n                 &format!(\n                     \"return type inferred to be `{}` here\",\n-                    fcx.resolve_vars_if_possible(expected)\n+                    expected\n                 ),\n             );\n         }"}, {"sha": "d2bba88211ea8c455c7915eb975c7c9fffc698a1", "filename": "src/test/ui/expr/if/if-branch-types.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-branch-types.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -5,6 +5,11 @@ LL |     let x = if true { 10i32 } else { 10u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     let x = if true { 10i32 } else { 10i32 };\n+   |                                        ~~~\n \n error: aborting due to previous error\n "}, {"sha": "f1fffdb1e7ef8d6443b84aef1cc8e73d1c7be692", "filename": "src/test/ui/expr/if/if-else-type-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-else-type-mismatch.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -10,6 +10,11 @@ LL | |         2u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         2i32\n+   |          ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n@@ -18,6 +23,11 @@ LL |     let _ = if true { 42i32 } else { 42u32 };\n    |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     let _ = if true { 42i32 } else { 42i32 };\n+   |                                        ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9"}, {"sha": "b98da1ed8be6e50b6999bf36ab44742706b8fdbe", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -11,6 +11,12 @@ note: return type inferred to be `Result<{integer}, _>` here\n    |\n LL |             return Ok(6);\n    |                    ^^^^^\n+help: try wrapping the expression in a variant of `Result`\n+   |\n+LL |         Ok(5)\n+   |         +++ +\n+LL |         Err(5)\n+   |         ++++ +\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:7:5: 7:7] as Generator>::Return == i32`\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13"}, {"sha": "d4a3495515cf14516f1dce084cd539001e450ead", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -12,10 +12,15 @@ error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n LL | fn two(x: bool) -> impl Foo {\n-   |                    -------- expected `_` because of return type\n+   |                    -------- expected `i32` because of return type\n ...\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     0_i32\n+   |       ~~~\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "d6f5a1ac25b641e5cc653d68404c694976c92bd2", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:36:5\n    |\n LL | fn can() -> impl NotObjectSafe {\n-   |             ------------------ expected `_` because of return type\n+   |             ------------------ expected `A` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n    |\n LL | fn cat() -> impl ObjectSafe {\n-   |             --------------- expected `_` because of return type\n+   |             --------------- expected `A` because of return type\n ...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`"}, {"sha": "11c1072f02ccc2c85d18dd00359d05f853fd48bd", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -2,28 +2,43 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n    |\n LL | fn foo() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |     1i32\n+   |      ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n    |\n LL | fn bar() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         return 1i32;\n+   |                 ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n    |\n LL | fn baz() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         1u32\n    |         ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -36,36 +51,56 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:35:14\n    |\n LL | fn bat() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |         _ => 1u32,\n    |              ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n    |\n LL |   fn can() -> impl std::fmt::Display {\n-   |               ---------------------- expected `_` because of return type\n+   |               ---------------------- expected `i32` because of return type\n LL | /     match 13 {\n LL | |         0 => return 0i32,\n LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n    |\n LL | fn cat() -> impl std::fmt::Display {\n-   |             ---------------------- expected `_` because of return type\n+   |             ---------------------- expected `i32` because of return type\n ...\n LL |             1u32\n    |             ^^^^ expected `i32`, found `u32`\n+   |\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n+   |\n+LL |     }.try_into().unwrap()\n+   |      ++++++++++++++++++++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14\n@@ -78,6 +113,11 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1 => 1i32,\n+   |               ~~~\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:97:9\n@@ -90,6 +130,11 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:66:13\n@@ -125,6 +170,11 @@ LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____- `match` arms have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1 => 1i32,\n+   |               ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:77:13\n@@ -164,6 +214,11 @@ LL | |         1u32\n    | |         ^^^^ expected `i32`, found `u32`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n+   |\n+help: change the type of the numeric literal from `u32` to `i32`\n+   |\n+LL |         1i32\n+   |          ~~~\n \n error[E0746]: return type cannot have an unboxed trait object\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:85:13"}, {"sha": "13942682d289c23842e4229ad77df791d3206917", "filename": "src/test/ui/mismatched_types/dont-point-return-on-E0308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fdont-point-return-on-E0308.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-point-return-on-E0308.rs:10:11\n+  --> $DIR/dont-point-return-on-E0308.rs:11:11\n    |\n LL |         f(());\n    |         - ^^"}, {"sha": "9157566e3a79bfa7e150a2ac1e88db723a39b2b3", "filename": "src/test/ui/mismatched_types/issue-84976.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL |     length = { foo(&length) };\n    |                ^^^^^^^^^^^^ expected `u32`, found `i32`\n+   |\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n+   |\n+LL |     length = { foo(&length).try_into().unwrap() };\n+   |                            ++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-84976.rs:17:14"}, {"sha": "f78f1d822bf608849b0343cfa8189c53ea035888", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -23,6 +23,9 @@ LL |         std::intrinsics::unlikely,\n    |\n    = note: expected fn item `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n               found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n+   = note: different `fn` items always have unique types, even if their signatures are the same\n+   = help: change the expected type to be function pointer `extern \"rust-intrinsic\" fn(bool) -> bool`\n+   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `likely as extern \"rust-intrinsic\" fn(bool) -> bool`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "66886db6eb9465762b89014697cee1bafcd6cc95", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f463ac40735529abd7343bb8a12a1888bb623df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=1f463ac40735529abd7343bb8a12a1888bb623df", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-74280.rs:9:5\n    |\n LL | fn test() -> Test {\n-   |              ---- expected `_` because of return type\n+   |              ---- expected `()` because of return type\n LL |     let y = || -> Test { () };\n LL |     7\n    |     ^ expected `()`, found integer"}]}