{"sha": "bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "node_id": "C_kwDOAAsO6NoAKGJmN2MzMmE0NDc3YTc2YmZkMThmZGNkOGY0NWE5MzljYmVkODJkMzQ", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-16T22:12:22Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-10-16T22:12:22Z"}, "message": "Fix ICE with `let...else` and `ref mut`", "tree": {"sha": "cc3d1787d30be96608a1faa86a070cd3387d3252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3d1787d30be96608a1faa86a070cd3387d3252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmFrTkYACgkQ2rpbBylh\nwYqoWw//SkMP/hO+B9v+ag1XJNKqYwsSjWtrKb7pXBlByxlPOmgtiueY9vt0G88g\nYN1a3hp98ece2cKiaJ0685n7hR3pyBl+wz7L+HR9+TfULUhF1ZAm5m7i3ne0Pm/k\nV3+lUT5PajdORH4ujQHA6mte8gE73lAcqLNetEmAE/8oSjy8UGXwjrPu7u/DtQAl\nttTEleosOfooPvp5t+UTCUnN0jByoueMv41CQTDGbIBsY0ebpzQz4Zja+d5iYYpn\nW8ueJEk/cPNWSNn0AfA9aQnIkVkYwsQ0+Kex4fH742UG9vABAfyo9KcZXNDCoa2Z\n0XCHjAGZ+4/pYv7T1WOliIlcmQMvTlRuG5OOhvg4p/QS7ZPkR98X5HyHrsiRFIqg\np8wGRGTUOpabWUh3md2f6JiDZTwjhAGXrFAhyCVQHBLMPa7vWSdI8eVOi6k4THWe\nQs91t/LaZ/6jY8nmtRY9ujfZN6p6jdfU4Ud7Vp0w4liiL18vHK3vMOOuOO1swQaj\nOB0JEFj7ps420rFwJT85lOqN4AMm+y8NwbaOTqiecykXKDOZxZ13ZYkX3KtxvLYg\nAVDfe7BZ+yhtSTUBogg2Tg6/TdfvDD4VfuzW4Ubq3rsCSWUYbIexIazA64QG7mCy\nYhnOgqDriCBz+AX46fwfyy9XQLISIpOfjodQHxGZsHCg55Hdykk=\n=+9lK\n-----END PGP SIGNATURE-----", "payload": "tree cc3d1787d30be96608a1faa86a070cd3387d3252\nparent 7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1634422342 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1634422342 +0900\n\nFix ICE with `let...else` and `ref mut`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "html_url": "https://github.com/rust-lang/rust/commit/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc", "html_url": "https://github.com/rust-lang/rust/commit/7fbd4ce2768744b3bd2ddf8453b73f4f18dbe5bc"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "d5ff4c6766f0fd2c9ee48ccf3c60515c83107872", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "patch": "@@ -45,12 +45,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place.as_ref());\n+        let access_place_desc = self.describe_any_place(access_place.as_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n             PlaceRef { local, projection: [] } => {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 if access_place.as_local().is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     // If we deref an immutable ref then the suggestion here doesn't help.\n                     return;\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                         reason = \", as it is not declared as mutable\".to_string();\n                     } else {\n@@ -96,17 +96,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_for_guard() =>\n             {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 reason = \", as it is immutable for the pattern guard\".to_string();\n             }\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_to_static() =>\n             {\n                 if access_place.projection.len() == 1 {\n-                    item_msg = format!(\"immutable static item `{}`\", access_place_desc.unwrap());\n+                    item_msg = format!(\"immutable static item {}\", access_place_desc);\n                     reason = String::new();\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     let local_info = &self.body.local_decls[local].local_info;\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n                         let static_name = &self.infcx.tcx.item_name(def_id);\n@@ -121,7 +121,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && proj_base.is_empty()\n                     && !self.upvars.is_empty()\n                 {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     debug_assert!(\n                         self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n                     );\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     });\n                     let pointer_type = source.describe_for_immutable_place(self.infcx.tcx);\n                     opt_source = Some(source);\n-                    if let Some(desc) = access_place_desc {\n+                    if let Some(desc) = self.describe_place(access_place.as_ref()) {\n                         item_msg = format!(\"`{}`\", desc);\n                         reason = match error_access {\n                             AccessKind::Mutate => format!(\", which is behind {}\", pointer_type),"}, {"sha": "8fd55adbfd428d9c67d244267b71b924a0ff87ae", "filename": "src/test/ui/let-else/issue-89960.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs?ref=bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "patch": "@@ -0,0 +1,7 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    // FIXME: more precise diagnostics\n+    let Some(ref mut meow) = Some(()) else { return };\n+    //~^ ERROR: cannot borrow value as mutable, as `val` is not declared as mutable\n+}"}, {"sha": "697f04d6d2735c1b38409781dba25862251a72e4", "filename": "src/test/ui/let-else/issue-89960.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf7c32a4477a76bfd18fdcd8f45a939cbed82d34/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr?ref=bf7c32a4477a76bfd18fdcd8f45a939cbed82d34", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow value as mutable, as `val` is not declared as mutable\n+  --> $DIR/issue-89960.rs:5:14\n+   |\n+LL |     let Some(ref mut meow) = Some(()) else { return };\n+   |     ---------^^^^^^^^^^^^-----------------------------\n+   |     |        |\n+   |     |        cannot borrow as mutable\n+   |     help: consider changing this to be mutable: `mut val`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}