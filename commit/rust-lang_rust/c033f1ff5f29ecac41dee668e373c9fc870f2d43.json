{"sha": "c033f1ff5f29ecac41dee668e373c9fc870f2d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMzNmMWZmNWYyOWVjYWM0MWRlZTY2OGUzNzNjOWZjODcwZjJkNDM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T16:43:28Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:14Z"}, "message": "Move platform-specific OOM handling to functions", "tree": {"sha": "ae3664c9a4cd8e67dbc8016cc3df83b7770134b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae3664c9a4cd8e67dbc8016cc3df83b7770134b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c033f1ff5f29ecac41dee668e373c9fc870f2d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c033f1ff5f29ecac41dee668e373c9fc870f2d43", "html_url": "https://github.com/rust-lang/rust/commit/c033f1ff5f29ecac41dee668e373c9fc870f2d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c033f1ff5f29ecac41dee668e373c9fc870f2d43/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/747cc749430d66bd2fca8e81fd8a1c994e36dcf1", "html_url": "https://github.com/rust-lang/rust/commit/747cc749430d66bd2fca8e81fd8a1c994e36dcf1"}], "stats": {"total": 131, "additions": 58, "deletions": 73}, "files": [{"sha": "8cb5c5d5be9f84297b99a529bf35cde2eb575bea", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 58, "deletions": 73, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c033f1ff5f29ecac41dee668e373c9fc870f2d43/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c033f1ff5f29ecac41dee668e373c9fc870f2d43/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=c033f1ff5f29ecac41dee668e373c9fc870f2d43", "patch": "@@ -224,40 +224,7 @@ mod platform {\n         alloc_methods_based_on_global_alloc!();\n \n         fn oom(&mut self) -> ! {\n-            use core::fmt::{self, Write};\n-\n-            // Print a message to stderr before aborting to assist with\n-            // debugging. It is critical that this code does not allocate any\n-            // memory since we are in an OOM situation. Any errors are ignored\n-            // while printing since there's nothing we can do about them and we\n-            // are about to exit anyways.\n-            drop(writeln!(Stderr, \"fatal runtime error: {}\", AllocErr));\n-            unsafe {\n-                ::core::intrinsics::abort();\n-            }\n-\n-            struct Stderr;\n-\n-            impl Write for Stderr {\n-                #[cfg(target_os = \"cloudabi\")]\n-                fn write_str(&mut self, _: &str) -> fmt::Result {\n-                    // CloudABI does not have any reserved file descriptor\n-                    // numbers. We should not attempt to write to file\n-                    // descriptor #2, as it may be associated with any kind of\n-                    // resource.\n-                    Ok(())\n-                }\n-\n-                #[cfg(not(target_os = \"cloudabi\"))]\n-                fn write_str(&mut self, s: &str) -> fmt::Result {\n-                    unsafe {\n-                        libc::write(libc::STDERR_FILENO,\n-                                    s.as_ptr() as *const libc::c_void,\n-                                    s.len());\n-                    }\n-                    Ok(())\n-                }\n-            }\n+            ::oom()\n         }\n     }\n \n@@ -301,8 +268,6 @@ mod platform {\n #[cfg(windows)]\n #[allow(bad_style)]\n mod platform {\n-    use core::ptr;\n-\n     use MIN_ALIGN;\n     use System;\n     use core::alloc::{GlobalAlloc, Alloc, Void, AllocErr, Layout, CannotReallocInPlace};\n@@ -312,31 +277,19 @@ mod platform {\n     type SIZE_T = usize;\n     type DWORD = u32;\n     type BOOL = i32;\n-    type LPDWORD = *mut DWORD;\n-    type LPOVERLAPPED = *mut u8;\n-\n-    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n \n     extern \"system\" {\n         fn GetProcessHeap() -> HANDLE;\n         fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n         fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID;\n         fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n         fn GetLastError() -> DWORD;\n-        fn WriteFile(hFile: HANDLE,\n-                     lpBuffer: LPVOID,\n-                     nNumberOfBytesToWrite: DWORD,\n-                     lpNumberOfBytesWritten: LPDWORD,\n-                     lpOverlapped: LPOVERLAPPED)\n-                     -> BOOL;\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n     }\n \n     #[repr(C)]\n     struct Header(*mut u8);\n \n     const HEAP_ZERO_MEMORY: DWORD = 0x00000008;\n-    const HEAP_REALLOC_IN_PLACE_ONLY: DWORD = 0x00000010;\n \n     unsafe fn get_header<'a>(ptr: *mut u8) -> &'a mut Header {\n         &mut *(ptr as *mut Header).offset(-1)\n@@ -438,31 +391,7 @@ mod platform {\n         }\n \n         fn oom(&mut self) -> ! {\n-            use core::fmt::{self, Write};\n-\n-            // Same as with unix we ignore all errors here\n-            drop(writeln!(Stderr, \"fatal runtime error: {}\", AllocErr));\n-            unsafe {\n-                ::core::intrinsics::abort();\n-            }\n-\n-            struct Stderr;\n-\n-            impl Write for Stderr {\n-                fn write_str(&mut self, s: &str) -> fmt::Result {\n-                    unsafe {\n-                        // WriteFile silently fails if it is passed an invalid\n-                        // handle, so there is no need to check the result of\n-                        // GetStdHandle.\n-                        WriteFile(GetStdHandle(STD_ERROR_HANDLE),\n-                                  s.as_ptr() as LPVOID,\n-                                  s.len() as DWORD,\n-                                  ptr::null_mut(),\n-                                  ptr::null_mut());\n-                    }\n-                    Ok(())\n-                }\n-            }\n+            ::oom()\n         }\n     }\n }\n@@ -522,3 +451,59 @@ mod platform {\n         alloc_methods_based_on_global_alloc!();\n     }\n }\n+\n+fn oom() -> ! {\n+    write_to_stderr(\"fatal runtime error: memory allocation failed\");\n+    unsafe {\n+        ::core::intrinsics::abort();\n+    }\n+}\n+\n+#[cfg(any(unix, target_os = \"redox\"))]\n+fn write_to_stderr(s: &str) {\n+    extern crate libc;\n+\n+    unsafe {\n+        libc::write(libc::STDERR_FILENO,\n+                    s.as_ptr() as *const libc::c_void,\n+                    s.len());\n+    }\n+}\n+\n+#[cfg(windows)]\n+fn write_to_stderr(s: &str) {\n+    use core::ptr;\n+\n+    type LPVOID = *mut u8;\n+    type HANDLE = LPVOID;\n+    type DWORD = u32;\n+    type BOOL = i32;\n+    type LPDWORD = *mut DWORD;\n+    type LPOVERLAPPED = *mut u8;\n+\n+    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n+\n+    extern \"system\" {\n+        fn WriteFile(hFile: HANDLE,\n+                     lpBuffer: LPVOID,\n+                     nNumberOfBytesToWrite: DWORD,\n+                     lpNumberOfBytesWritten: LPDWORD,\n+                     lpOverlapped: LPOVERLAPPED)\n+                     -> BOOL;\n+        fn GetStdHandle(which: DWORD) -> HANDLE;\n+    }\n+\n+    unsafe {\n+        // WriteFile silently fails if it is passed an invalid\n+        // handle, so there is no need to check the result of\n+        // GetStdHandle.\n+        WriteFile(GetStdHandle(STD_ERROR_HANDLE),\n+                  s.as_ptr() as LPVOID,\n+                  s.len() as DWORD,\n+                  ptr::null_mut(),\n+                  ptr::null_mut());\n+    }\n+}\n+\n+#[cfg(not(any(windows, unix, target_os = \"redox\")))]\n+fn write_to_stderr(_: &str) {}"}]}