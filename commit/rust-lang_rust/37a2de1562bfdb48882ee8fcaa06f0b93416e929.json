{"sha": "37a2de1562bfdb48882ee8fcaa06f0b93416e929", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTJkZTE1NjJiZmRiNDg4ODJlZThmY2FhMDZmMGI5MzQxNmU5Mjk=", "commit": {"author": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-10T08:57:12Z"}, "committer": {"name": "Matthias Seiffert", "email": "matthias-seiffert@hotmail.de", "date": "2019-10-10T08:57:12Z"}, "message": "Move match_function_call to utils", "tree": {"sha": "d7f4235fcc8dc344a24d331ab1b8dc78bae325ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f4235fcc8dc344a24d331ab1b8dc78bae325ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a2de1562bfdb48882ee8fcaa06f0b93416e929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a2de1562bfdb48882ee8fcaa06f0b93416e929", "html_url": "https://github.com/rust-lang/rust/commit/37a2de1562bfdb48882ee8fcaa06f0b93416e929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a2de1562bfdb48882ee8fcaa06f0b93416e929/comments", "author": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lythenas", "id": 32217236, "node_id": "MDQ6VXNlcjMyMjE3MjM2", "avatar_url": "https://avatars.githubusercontent.com/u/32217236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lythenas", "html_url": "https://github.com/Lythenas", "followers_url": "https://api.github.com/users/Lythenas/followers", "following_url": "https://api.github.com/users/Lythenas/following{/other_user}", "gists_url": "https://api.github.com/users/Lythenas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lythenas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lythenas/subscriptions", "organizations_url": "https://api.github.com/users/Lythenas/orgs", "repos_url": "https://api.github.com/users/Lythenas/repos", "events_url": "https://api.github.com/users/Lythenas/events{/privacy}", "received_events_url": "https://api.github.com/users/Lythenas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5317efb8b5fb24a01bbb1c2f61833792dd751182", "url": "https://api.github.com/repos/rust-lang/rust/commits/5317efb8b5fb24a01bbb1c2f61833792dd751182", "html_url": "https://github.com/rust-lang/rust/commit/5317efb8b5fb24a01bbb1c2f61833792dd751182"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "853c3100674ba7cddaf20adb8c10b2b1fea8fd8c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37a2de1562bfdb48882ee8fcaa06f0b93416e929/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a2de1562bfdb48882ee8fcaa06f0b93416e929/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=37a2de1562bfdb48882ee8fcaa06f0b93416e929", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, snippet_opt, span_help_and_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, snippet_opt, span_help_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -145,23 +145,3 @@ fn match_assert_with_message<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx E\n     }\n     None\n }\n-\n-/// Matches a function call with the given path and returns the arguments.\n-///\n-/// Usage:\n-///\n-/// ```rust,ignore\n-/// if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n-/// ```\n-fn match_function_call<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, path: &[&str]) -> Option<&'a [Expr]> {\n-    if_chain! {\n-        if let ExprKind::Call(ref fun, ref args) = expr.kind;\n-        if let ExprKind::Path(ref qpath) = fun.kind;\n-        if let Some(fun_def_id) = cx.tables.qpath_res(qpath, fun.hir_id).opt_def_id();\n-        if match_def_path(cx, fun_def_id, path);\n-        then {\n-            return Some(&args)\n-        }\n-    };\n-    None\n-}"}, {"sha": "225b9603b3d6bb858b96e663110910142afb70f2", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37a2de1562bfdb48882ee8fcaa06f0b93416e929/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a2de1562bfdb48882ee8fcaa06f0b93416e929/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=37a2de1562bfdb48882ee8fcaa06f0b93416e929", "patch": "@@ -1085,6 +1085,30 @@ pub fn has_iter_method(cx: &LateContext<'_, '_>, probably_ref_ty: Ty<'_>) -> Opt\n     None\n }\n \n+/// Matches a function call with the given path and returns the arguments.\n+///\n+/// Usage:\n+///\n+/// ```rust,ignore\n+/// if let Some(args) = match_function_call(cx, begin_panic_call, &paths::BEGIN_PANIC);\n+/// ```\n+pub fn match_function_call<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    path: &[&str],\n+) -> Option<&'a [Expr]> {\n+    if_chain! {\n+        if let ExprKind::Call(ref fun, ref args) = expr.kind;\n+        if let ExprKind::Path(ref qpath) = fun.kind;\n+        if let Some(fun_def_id) = cx.tables.qpath_res(qpath, fun.hir_id).opt_def_id();\n+        if match_def_path(cx, fun_def_id, path);\n+        then {\n+            return Some(&args)\n+        }\n+    };\n+    None\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}]}