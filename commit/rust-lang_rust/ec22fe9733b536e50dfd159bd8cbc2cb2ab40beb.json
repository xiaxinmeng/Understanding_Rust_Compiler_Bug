{"sha": "ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMjJmZTk3MzNiNTM2ZTUwZGZkMTU5YmQ4Y2JjMmNiMmFiNDBiZWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-09T11:28:18Z"}, "committer": {"name": "unknown", "email": "graydon@.(none)", "date": "2011-03-10T00:15:58Z"}, "message": "Add ty_obj case to pretty printer", "tree": {"sha": "be93230912bd06b85d0e9fd475015ff09da5b813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be93230912bd06b85d0e9fd475015ff09da5b813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb", "html_url": "https://github.com/rust-lang/rust/commit/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aed40fbcd8e81cc1ef7a51b40b76b4631cba299e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed40fbcd8e81cc1ef7a51b40b76b4631cba299e", "html_url": "https://github.com/rust-lang/rust/commit/aed40fbcd8e81cc1ef7a51b40b76b4631cba299e"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "9ef9bb1614127bb6ebf3695ea908f85f048841ca", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=ec22fe9733b536e50dfd159bd8cbc2cb2ab40beb", "patch": "@@ -91,24 +91,21 @@ impure fn print_type(ps s, @ast.ty ty) {\n       commasep[ast.ty_field](s, fields, f);\n       pclose(s);\n     }\n-    case (ast.ty_fn(?proto,?inputs,?output)) {\n-      if (proto == ast.proto_fn) {wrd(s, \"fn\");}\n-      else {wrd(s, \"iter\");}\n-      popen(s);\n-      impure fn print_arg(ps s, ast.ty_arg input) {\n-        if (middle.ty.mode_is_alias(input.mode)) {wrd(s, \"&\");}\n-        print_type(s, input.ty);\n-      }\n-      auto f = print_arg;\n-      commasep[ast.ty_arg](s, inputs, f);\n-      pclose(s);\n-      if (output.node != ast.ty_nil) {\n-        space(s);\n+    case (ast.ty_obj(?methods)) {\n+      wrd1(s, \"obj\");\n+      bopen(s);\n+      for (ast.ty_method m in methods) {\n         hbox(s);\n-        wrd1(s, \"->\");\n-        print_type(s, output);\n+        print_ty_fn(s, m.proto, option.some[str](m.ident),\n+                    m.inputs, m.output);\n+        wrd(s, \";\");\n         end(s);\n+        line(s);\n       }\n+      bclose(s);\n+    }\n+    case (ast.ty_fn(?proto,?inputs,?output)) {\n+      print_ty_fn(s, proto, option.none[str], inputs, output);\n     }\n     case (ast.ty_path(?path,_)) {\n       print_path(s, path);\n@@ -528,7 +525,6 @@ impure fn print_expr(ps s, @ast.expr expr) {\n       }\n       // TODO: extension 'body'\n     }\n-    case (_) {wrd(s, \"X\");}\n   }\n   end(s);\n }\n@@ -730,3 +726,28 @@ fn escape_str(str st, char to_escape) -> str {\n impure fn print_string(ps s, str st) {\n   wrd(s, \"\\\"\"); wrd(s, escape_str(st, '\"')); wrd(s, \"\\\"\");\n }\n+\n+impure fn print_ty_fn(ps s, ast.proto proto, option.t[str] id,\n+                      vec[ast.ty_arg] inputs, @ast.ty output) {\n+  if (proto == ast.proto_fn) {wrd(s, \"fn\");}\n+  else {wrd(s, \"iter\");}\n+  alt (id) {\n+    case (option.some[str](?id)) {space(s); wrd(s, id);}\n+    case (_) {}\n+  }\n+  popen(s);\n+  impure fn print_arg(ps s, ast.ty_arg input) {\n+    if (middle.ty.mode_is_alias(input.mode)) {wrd(s, \"&\");}\n+    print_type(s, input.ty);\n+  }\n+  auto f = print_arg;\n+  commasep[ast.ty_arg](s, inputs, f);\n+  pclose(s);\n+  if (output.node != ast.ty_nil) {\n+    space(s);\n+    hbox(s);\n+    wrd1(s, \"->\");\n+    print_type(s, output);\n+    end(s);\n+  }\n+}"}]}