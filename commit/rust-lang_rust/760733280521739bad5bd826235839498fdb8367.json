{"sha": "760733280521739bad5bd826235839498fdb8367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MDczMzI4MDUyMTczOWJhZDViZDgyNjIzNTgzOTQ5OGZkYjgzNjc=", "commit": {"author": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-02-21T20:04:03Z"}, "committer": {"name": "Edward Wang", "email": "edward.yu.wang@gmail.com", "date": "2014-02-21T20:05:33Z"}, "message": "Represent lifetimes as Names instead of Idents\n\nCloses #7743.", "tree": {"sha": "4699e672ca25b4b06ece30bae8fc87899f0013dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4699e672ca25b4b06ece30bae8fc87899f0013dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760733280521739bad5bd826235839498fdb8367", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760733280521739bad5bd826235839498fdb8367", "html_url": "https://github.com/rust-lang/rust/commit/760733280521739bad5bd826235839498fdb8367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760733280521739bad5bd826235839498fdb8367/comments", "author": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwardw", "id": 454049, "node_id": "MDQ6VXNlcjQ1NDA0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/454049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwardw", "html_url": "https://github.com/edwardw", "followers_url": "https://api.github.com/users/edwardw/followers", "following_url": "https://api.github.com/users/edwardw/following{/other_user}", "gists_url": "https://api.github.com/users/edwardw/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwardw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwardw/subscriptions", "organizations_url": "https://api.github.com/users/edwardw/orgs", "repos_url": "https://api.github.com/users/edwardw/repos", "events_url": "https://api.github.com/users/edwardw/events{/privacy}", "received_events_url": "https://api.github.com/users/edwardw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76", "html_url": "https://github.com/rust-lang/rust/commit/2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "e45d7ad31a4106c526c8413cc8ffadfa4709092c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -270,7 +270,7 @@ fn item_region_param_defs(item_doc: ebml::Doc, cdata: Cmd)\n                                              tag_region_param_def_def_id);\n             let def_id = reader::with_doc_data(def_id_doc, parse_def_id);\n             let def_id = translate_def_id(cdata, def_id);\n-            v.push(ty::RegionParameterDef { ident: ident,\n+            v.push(ty::RegionParameterDef { ident: ident.name,\n                                             def_id: def_id });\n             true\n         });"}, {"sha": "ee65f7ddf499b2937f68ce714a111859f6c820f8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -111,8 +111,8 @@ pub fn reachable(ecx: &EncodeContext, id: NodeId) -> bool {\n     reachable.get().contains(&id)\n }\n \n-fn encode_name(ebml_w: &mut writer::Encoder, name: Ident) {\n-    ebml_w.wr_tagged_str(tag_paths_data_name, token::get_ident(name).get());\n+fn encode_name(ebml_w: &mut writer::Encoder, name: Name) {\n+    ebml_w.wr_tagged_str(tag_paths_data_name, token::get_name(name).get());\n }\n \n fn encode_impl_type_basename(ebml_w: &mut writer::Encoder, name: Ident) {\n@@ -312,7 +312,7 @@ fn encode_struct_fields(ebml_w: &mut writer::Encoder,\n             NamedField(ident, vis) => {\n                ebml_w.start_tag(tag_item_field);\n                encode_struct_field_family(ebml_w, vis);\n-               encode_name(ebml_w, ident);\n+               encode_name(ebml_w, ident.name);\n                encode_def_id(ebml_w, local_def(f.node.id));\n                ebml_w.end_tag();\n             }\n@@ -352,7 +352,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n             ast::TupleVariantKind(_) => encode_family(ebml_w, 'v'),\n             ast::StructVariantKind(_) => encode_family(ebml_w, 'V')\n         }\n-        encode_name(ebml_w, variant.node.name);\n+        encode_name(ebml_w, variant.node.name.name);\n         encode_parent_item(ebml_w, local_def(id));\n         encode_visibility(ebml_w, variant.node.vis);\n         encode_attributes(ebml_w, variant.node.attrs);\n@@ -579,7 +579,7 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n     ebml_w.start_tag(tag_items_data_item);\n     encode_def_id(ebml_w, local_def(id));\n     encode_family(ebml_w, 'm');\n-    encode_name(ebml_w, name);\n+    encode_name(ebml_w, name.name);\n     debug!(\"(encoding info for module) encoding info for module ID {}\", id);\n \n     // Encode info about all the module children.\n@@ -716,7 +716,7 @@ fn encode_info_for_struct(ecx: &EncodeContext,\n         debug!(\"encode_info_for_struct: doing {} {}\",\n                token::get_ident(nm), id);\n         encode_struct_field_family(ebml_w, vis);\n-        encode_name(ebml_w, nm);\n+        encode_name(ebml_w, nm.name);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n         encode_def_id(ebml_w, local_def(id));\n         ebml_w.end_tag();\n@@ -743,7 +743,7 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n     encode_family(ebml_w, 'f');\n     encode_bounds_and_type(ebml_w, ecx,\n                            &lookup_item_type(ecx.tcx, local_def(ctor_id)));\n-    encode_name(ebml_w, name);\n+    encode_name(ebml_w, name.name);\n     encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, ctor_id));\n     ecx.tcx.map.with_path(ctor_id, |path| encode_path(ebml_w, path));\n     encode_parent_item(ebml_w, local_def(struct_id));\n@@ -766,7 +766,7 @@ fn encode_method_ty_fields(ecx: &EncodeContext,\n                            ebml_w: &mut writer::Encoder,\n                            method_ty: &ty::Method) {\n     encode_def_id(ebml_w, method_ty.def_id);\n-    encode_name(ebml_w, method_ty.ident);\n+    encode_name(ebml_w, method_ty.ident.name);\n     encode_ty_type_param_defs(ebml_w, ecx,\n                               method_ty.generics.type_param_defs(),\n                               tag_item_method_tps);\n@@ -916,7 +916,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         }\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_path(ebml_w, path);\n \n         let inlineable = !ecx.non_inlineable_statics.borrow().get().contains(&item.id);\n@@ -934,7 +934,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_family(ebml_w, purity_fn_family(purity));\n         let tps_len = generics.ty_params.len();\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_path(ebml_w, path);\n         encode_attributes(ebml_w, item.attrs);\n         if tps_len > 0u || should_inline(item.attrs) {\n@@ -960,7 +960,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'n');\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_path(ebml_w, path);\n \n         // Encode all the items in this module.\n@@ -978,7 +978,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'y');\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_path(ebml_w, path);\n         encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n@@ -991,7 +991,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_family(ebml_w, 't');\n         encode_item_variances(ebml_w, ecx, item.id);\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs);\n         for v in (*enum_definition).variants.iter() {\n             encode_variant_id(ebml_w, local_def(v.node.id));\n@@ -1030,7 +1030,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n \n         encode_item_variances(ebml_w, ecx, item.id);\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs);\n         encode_path(ebml_w, path.clone());\n         encode_visibility(ebml_w, vis);\n@@ -1070,7 +1070,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_def_id(ebml_w, def_id);\n         encode_family(ebml_w, 'i');\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs);\n         match ty.node {\n             ast::TyPath(ref path, ref bounds, _) if path.segments\n@@ -1134,7 +1134,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                   tag_items_data_item_ty_param_bounds);\n         encode_region_param_defs(ebml_w, trait_def.generics.region_param_defs());\n         encode_trait_ref(ebml_w, ecx, trait_def.trait_ref, tag_item_trait_ref);\n-        encode_name(ebml_w, item.ident);\n+        encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs);\n         encode_visibility(ebml_w, vis);\n         for &method_def_id in ty::trait_method_def_ids(tcx, def_id).iter() {\n@@ -1255,7 +1255,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         encode_family(ebml_w, purity_fn_family(ImpureFn));\n         encode_bounds_and_type(ebml_w, ecx,\n                                &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n-        encode_name(ebml_w, nitem.ident);\n+        encode_name(ebml_w, nitem.ident.name);\n         if abi.is_intrinsic() {\n             (ecx.encode_inlined_item)(ecx, ebml_w, IIForeignRef(nitem));\n         } else {\n@@ -1270,7 +1270,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         }\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));\n         encode_symbol(ecx, ebml_w, nitem.id);\n-        encode_name(ebml_w, nitem.ident);\n+        encode_name(ebml_w, nitem.ident.name);\n       }\n     }\n     encode_path(ebml_w, path);"}, {"sha": "21fe0e7539438c9e7050264a52cc3d4e346c1d77", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -214,7 +214,7 @@ fn parse_bound_region(st: &mut PState, conv: conv_did) -> ty::BoundRegion {\n         '[' => {\n             let def = parse_def(st, RegionParameter, |x,y| conv(x,y));\n             let ident = token::str_to_ident(parse_str(st, ']'));\n-            ty::BrNamed(def, ident)\n+            ty::BrNamed(def, ident.name)\n         }\n         'f' => {\n             let id = parse_uint(st);\n@@ -242,7 +242,7 @@ fn parse_region(st: &mut PState, conv: conv_did) -> ty::Region {\n         let index = parse_uint(st);\n         assert_eq!(next(st), '|');\n         let nm = token::str_to_ident(parse_str(st, ']'));\n-        ty::ReEarlyBound(node_id, index, nm)\n+        ty::ReEarlyBound(node_id, index, nm.name)\n       }\n       'f' => {\n         assert_eq!(next(st), '[');"}, {"sha": "db0bcf7d029a8e31fa4958788595a60dce0ab3ba", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -179,7 +179,7 @@ fn enc_region(w: &mut MemWriter, cx: @ctxt, r: ty::Region) {\n             mywrite!(w, \"B[{}|{}|{}]\",\n                      node_id,\n                      index,\n-                     token::get_ident(ident));\n+                     token::get_name(ident));\n         }\n         ty::ReFree(ref fr) => {\n             mywrite!(w, \"f[{}|\", fr.scope_id);\n@@ -210,7 +210,7 @@ fn enc_bound_region(w: &mut MemWriter, cx: @ctxt, br: ty::BoundRegion) {\n         ty::BrNamed(d, s) => {\n             mywrite!(w, \"[{}|{}]\",\n                      (cx.ds)(d),\n-                     token::get_ident(s));\n+                     token::get_name(s));\n         }\n         ty::BrFresh(id) => {\n             mywrite!(w, \"f{}|\", id);"}, {"sha": "b3a975a13e4af3268205eac5efd5f4f550b40a18", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -145,7 +145,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n     fn visit_lifetime_ref(&mut self,\n                           lifetime_ref: &ast::Lifetime,\n                           scope: &'a ScopeChain<'a>) {\n-        if lifetime_ref.ident == special_idents::statik {\n+        if lifetime_ref.ident == special_idents::statik.name {\n             self.insert_lifetime(lifetime_ref, ast::DefStaticRegion);\n             return;\n         }\n@@ -262,7 +262,7 @@ impl LifetimeContext {\n         self.sess.span_err(\n             lifetime_ref.span,\n             format!(\"use of undeclared lifetime name `'{}`\",\n-                    token::get_ident(lifetime_ref.ident)));\n+                    token::get_name(lifetime_ref.ident)));\n     }\n \n     fn check_lifetime_names(&self, lifetimes: &OptVec<ast::Lifetime>) {\n@@ -271,11 +271,11 @@ impl LifetimeContext {\n \n             let special_idents = [special_idents::statik];\n             for lifetime in lifetimes.iter() {\n-                if special_idents.iter().any(|&i| i == lifetime.ident) {\n+                if special_idents.iter().any(|&i| i.name == lifetime.ident) {\n                     self.sess.span_err(\n                         lifetime.span,\n                         format!(\"illegal lifetime parameter name: `{}`\",\n-                                token::get_ident(lifetime.ident)));\n+                                token::get_name(lifetime.ident)));\n                 }\n             }\n \n@@ -287,7 +287,7 @@ impl LifetimeContext {\n                         lifetime_j.span,\n                         format!(\"lifetime name `'{}` declared twice in \\\n                                 the same scope\",\n-                                token::get_ident(lifetime_j.ident)));\n+                                token::get_name(lifetime_j.ident)));\n                 }\n             }\n         }"}, {"sha": "1fa2dbc16528119091da643c640c753079b8040d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -465,7 +465,7 @@ pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n     // parameters are substituted.\n-    ReEarlyBound(/* param id */ ast::NodeId, /*index*/ uint, ast::Ident),\n+    ReEarlyBound(/* param id */ ast::NodeId, /*index*/ uint, ast::Name),\n \n     // Region bound in a function scope, which will be substituted when the\n     // function is called. The first argument must be the `binder_id` of\n@@ -635,7 +635,7 @@ pub enum BoundRegion {\n     ///\n     /// The def-id is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(ast::DefId, ast::Ident),\n+    BrNamed(ast::DefId, ast::Name),\n \n     /// Fresh bound identifiers created during GLB computations.\n     BrFresh(uint),\n@@ -976,7 +976,7 @@ pub struct TypeParameterDef {\n \n #[deriving(Encodable, Decodable, Clone)]\n pub struct RegionParameterDef {\n-    ident: ast::Ident,\n+    ident: ast::Name,\n     def_id: ast::DefId,\n }\n "}, {"sha": "e430015b221461bca5e0b75f358a11d6cf4f0f99", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -163,7 +163,7 @@ pub fn bound_region_to_str(cx: ctxt,\n \n     match br {\n         BrNamed(_, ident)   => format!(\"{}'{}{}\", prefix,\n-                                       token::get_ident(ident), space_str),\n+                                       token::get_name(ident), space_str),\n         BrAnon(_)           => prefix.to_str(),\n         BrFresh(_)          => prefix.to_str(),\n     }\n@@ -225,7 +225,7 @@ pub fn region_to_str(cx: ctxt, prefix: &str, space: bool, region: Region) -> ~st\n     // `explain_region()` or `note_and_explain_region()`.\n     match region {\n         ty::ReScope(_) => prefix.to_str(),\n-        ty::ReEarlyBound(_, _, ident) => token::get_ident(ident).get().to_str(),\n+        ty::ReEarlyBound(_, _, ident) => token::get_name(ident).get().to_str(),\n         ty::ReLateBound(_, br) => bound_region_to_str(cx, prefix, space, br),\n         ty::ReFree(ref fr) => bound_region_to_str(cx, prefix, space, fr.bound_region),\n         ty::ReInfer(ReSkolemized(_, br)) => {\n@@ -630,7 +630,7 @@ impl Repr for ty::TypeParameterDef {\n impl Repr for ty::RegionParameterDef {\n     fn repr(&self, _tcx: ctxt) -> ~str {\n         format!(\"RegionParameterDef({}, {:?})\",\n-                token::get_ident(self.ident),\n+                token::get_name(self.ident),\n                 self.def_id)\n     }\n }\n@@ -718,7 +718,7 @@ impl Repr for ty::BoundRegion {\n             ty::BrAnon(id) => format!(\"BrAnon({})\", id),\n             ty::BrNamed(id, ident) => format!(\"BrNamed({}, {})\",\n                                                id.repr(tcx),\n-                                               ident.repr(tcx)),\n+                                               token::get_name(ident)),\n             ty::BrFresh(id) => format!(\"BrFresh({})\", id),\n         }\n     }\n@@ -729,7 +729,7 @@ impl Repr for ty::Region {\n         match *self {\n             ty::ReEarlyBound(id, index, ident) => {\n                 format!(\"ReEarlyBound({}, {}, {})\",\n-                        id, index, ident.repr(tcx))\n+                        id, index, token::get_name(ident))\n             }\n \n             ty::ReLateBound(binder_id, ref bound_region) => {"}, {"sha": "6e6276e0457b7bdef6bb2a069bcc0d4a8be5ef1f", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -307,7 +307,7 @@ impl Lifetime {\n \n impl Clean<Lifetime> for ast::Lifetime {\n     fn clean(&self) -> Lifetime {\n-        Lifetime(self.ident.clean())\n+        Lifetime(token::get_name(self.ident).get().to_owned())\n     }\n }\n "}, {"sha": "8f3f1787a58744a90ff516dd37217435640e46f9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -144,8 +144,7 @@ pub type FnIdent = Option<Ident>;\n pub struct Lifetime {\n     id: NodeId,\n     span: Span,\n-    // FIXME #7743 : change this to Name!\n-    ident: Ident\n+    ident: Name\n }\n \n // a \"Path\" is essentially Rust's notion of a name;"}, {"sha": "2265e42af4df24a64e589cd51c25da9a617f283a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -73,7 +73,7 @@ pub trait AstBuilder {\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n-    fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime;\n+    fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime;\n \n     // statements\n     fn stmt_expr(&self, expr: @ast::Expr) -> @ast::Stmt;\n@@ -408,7 +408,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::TraitTyParamBound(self.trait_ref(path))\n     }\n \n-    fn lifetime(&self, span: Span, ident: ast::Ident) -> ast::Lifetime {\n+    fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime {\n         ast::Lifetime { id: ast::DUMMY_NODE_ID, span: span, ident: ident }\n     }\n "}, {"sha": "1d3dd9185caae8bf6db17be80390ed9717c40078", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -111,14 +111,14 @@ pub fn nil_ty() -> Ty<'static> {\n \n fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> {\n     match *lt {\n-        Some(ref s) => Some(cx.lifetime(span, cx.ident_of(*s))),\n+        Some(ref s) => Some(cx.lifetime(span, cx.ident_of(*s).name)),\n         None => None\n     }\n }\n \n fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> OptVec<ast::Lifetime> {\n     match *lt {\n-        Some(ref s) => opt_vec::with(cx.lifetime(span, cx.ident_of(*s))),\n+        Some(ref s) => opt_vec::with(cx.lifetime(span, cx.ident_of(*s).name)),\n         None => opt_vec::Empty\n     }\n }\n@@ -221,7 +221,7 @@ impl<'a> LifetimeBounds<'a> {\n                        self_generics: &Generics)\n                        -> Generics {\n         let lifetimes = self.lifetimes.map(|lt| {\n-            cx.lifetime(span, cx.ident_of(*lt))\n+            cx.lifetime(span, cx.ident_of(*lt).name)\n         });\n         let ty_params = self.bounds.map(|t| {\n             match t {\n@@ -248,7 +248,7 @@ pub fn get_explicit_self(cx: &ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n                 match *ptr {\n                     Send => ast::SelfUniq,\n                     Borrowed(ref lt, mutbl) => {\n-                        let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s)));\n+                        let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s).name));\n                         ast::SelfRegion(lt, mutbl)\n                     }\n                 });"}, {"sha": "16a12661e9dbb580f087e30a98d90fda12061389", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -497,7 +497,7 @@ impl<'a> Context<'a> {\n                         ])\n             }\n         };\n-        let life = self.ecx.lifetime(sp, self.ecx.ident_of(\"static\"));\n+        let life = self.ecx.lifetime(sp, self.ecx.ident_of(\"static\").name);\n         let ty = self.ecx.ty_path(self.ecx.path_all(\n                 sp,\n                 true,\n@@ -629,7 +629,7 @@ impl<'a> Context<'a> {\n                     self.ecx.ident_of(\"Piece\"),\n                 ],\n                 opt_vec::with(\n-                    self.ecx.lifetime(self.fmtsp, self.ecx.ident_of(\"static\"))),\n+                    self.ecx.lifetime(self.fmtsp, self.ecx.ident_of(\"static\").name)),\n                 ~[]\n             ), None);\n         let ty = ast::TyFixedLengthVec("}, {"sha": "30e77c8c1cb7b2a3b9b3c62c7215493894d0929a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -1596,7 +1596,7 @@ impl Parser {\n                 return ast::Lifetime {\n                     id: ast::DUMMY_NODE_ID,\n                     span: span,\n-                    ident: i\n+                    ident: i.name\n                 };\n             }\n             _ => {"}, {"sha": "fb061bbc0a69676e14ca5335c688cd6bfde3e6a7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760733280521739bad5bd826235839498fdb8367/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=760733280521739bad5bd826235839498fdb8367", "patch": "@@ -1951,7 +1951,7 @@ pub fn print_bounds(s: &mut State, bounds: &OptVec<ast::TyParamBound>,\n pub fn print_lifetime(s: &mut State,\n                       lifetime: &ast::Lifetime) -> io::IoResult<()> {\n     try!(word(&mut s.s, \"'\"));\n-    print_ident(s, lifetime.ident)\n+    print_name(s, lifetime.ident)\n }\n \n pub fn print_generics(s: &mut State,"}]}