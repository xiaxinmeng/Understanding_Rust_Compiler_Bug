{"sha": "1d658d9b97434a391a7e202a033080555a2bc69e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjU4ZDliOTc0MzRhMzkxYTdlMjAyYTAzMzA4MDU1NWEyYmM2OWU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-04-02T01:03:54Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-04-02T01:03:54Z"}, "message": "Improve docs for Core::ReaderUtil.\n\nI filled out better descriptions for all of the neccesary\nfunctions.", "tree": {"sha": "9da66ec7835064595453e944c24fb770a3aba601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da66ec7835064595453e944c24fb770a3aba601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d658d9b97434a391a7e202a033080555a2bc69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d658d9b97434a391a7e202a033080555a2bc69e", "html_url": "https://github.com/rust-lang/rust/commit/1d658d9b97434a391a7e202a033080555a2bc69e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d658d9b97434a391a7e202a033080555a2bc69e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc60788215afc61b3f5b5e57cf786478218b919e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc60788215afc61b3f5b5e57cf786478218b919e", "html_url": "https://github.com/rust-lang/rust/commit/dc60788215afc61b3f5b5e57cf786478218b919e"}], "stats": {"total": 375, "additions": 335, "deletions": 40}, "files": [{"sha": "1a15a9f5d809c299427b24e78ca6b1405c9c953d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 335, "deletions": 40, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/1d658d9b97434a391a7e202a033080555a2bc69e/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d658d9b97434a391a7e202a033080555a2bc69e/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=1d658d9b97434a391a7e202a033080555a2bc69e", "patch": "@@ -93,120 +93,415 @@ impl Reader for @Reader {\n     }\n }\n \n-/// Generic utility functions defined on readers.\n+/**\n+* The `ReaderUtil` trait is a home for many of the utility functions\n+* a particular Reader should implement.\n+* \n+* The default `Reader` trait is focused entirely on bytes. `ReaderUtil` is based\n+* on higher-level concepts like 'chars' and 'lines.'\n+* \n+* # Examples:\n+*\n+* None right now.\n+*/\n pub trait ReaderUtil {\n \n-    /// Read len bytes into a new vec.\n+    /**\n+    * Reads `len` number of bytes, and gives you a new vector back.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_bytes(&self, len: uint) -> ~[u8];\n \n-    /// Read up until a specified character (which is optionally included) or EOF.\n+    /**\n+    * Reads up until a specific character or EOF.\n+    * \n+    * The `include` parameter specifies if the character should be included\n+    * in the returned string.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_until(&self, c: char, include: bool) -> ~str;\n \n-    /// Read up until the first '\\n' char (which is not returned), or EOF.\n+    /**\n+    * Reads up until the first '\\n' or EOF.\n+    * \n+    * The '\\n' is not included in the result.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_line(&self) -> ~str;\n \n-    /// Read n utf-8 encoded chars.\n+    /**\n+    * Reads `n` chars.\n+    * \n+    * Assumes that those chars are UTF-8 encoded.\n+    * \n+    * The '\\n' is not included in the result.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_chars(&self, n: uint) -> ~[char];\n \n-    /// Read a single utf-8 encoded char.\n+    /**\n+    * Reads a single UTF-8 encoded char.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_char(&self) -> char;\n \n-    /// Read up until the first null byte (which is not returned), or EOF.\n+    /**\n+    * Reads up until the first null byte or EOF.\n+    *\n+    * The null byte is not returned.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_c_str(&self) -> ~str;\n \n-    /// Read all the data remaining in the stream in one go.\n+    /**\n+    * Reads all remaining data in the stream.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_whole_stream(&self) -> ~[u8];\n \n-    /// Iterate over every byte until the iterator breaks or EOF.\n+    /**\n+    * Iterate over every byte until EOF or the iterator breaks.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn each_byte(&self, it: &fn(int) -> bool);\n \n-    /// Iterate over every char until the iterator breaks or EOF.\n+    /**\n+    * Iterate over every char until EOF or the iterator breaks.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn each_char(&self, it: &fn(char) -> bool);\n \n-    /// Iterate over every line until the iterator breaks or EOF.\n+    /**\n+    * Iterate over every line until EOF or the iterator breaks.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn each_line(&self, it: &fn(&str) -> bool);\n \n-    /// Read all the lines of the file into a vector.\n+    /**\n+    * Reads all of the lines in the stream.\n+    * \n+    * Returns a vector of those lines.\n+    *\n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_lines(&self) -> ~[~str];\n \n-    /// Read n (between 1 and 8) little-endian unsigned integer bytes.\n+    /**\n+    * Reads `n` little-endian unsigned integer bytes.\n+    * \n+    * `n` must be between 1 and 8, inclusive.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_uint_n(&self, nbytes: uint) -> u64;\n \n-    /// Read n (between 1 and 8) little-endian signed integer bytes.\n+    /**\n+    * Reads `n` little-endian signed integer bytes.\n+    * \n+    * `n` must be between 1 and 8, inclusive.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_int_n(&self, nbytes: uint) -> i64;\n \n-    /// Read n (between 1 and 8) big-endian unsigned integer bytes.\n+    /**\n+    * Reads `n` big-endian unsigned integer bytes.\n+    * \n+    * `n` must be between 1 and 8, inclusive.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_uint_n(&self, nbytes: uint) -> u64;\n \n-    /// Read n (between 1 and 8) big-endian signed integer bytes.\n+    /**\n+    * Reads `n` big-endian signed integer bytes.\n+    * \n+    * `n` must be between 1 and 8, inclusive.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_int_n(&self, nbytes: uint) -> i64;\n \n-    /// Read a little-endian uint (number of bytes depends on system).\n+    /**\n+    * Reads a little-endian unsigned integer.\n+    * \n+    * The number of bytes returned is system-dependant.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_uint(&self) -> uint;\n \n-    /// Read a little-endian int (number of bytes depends on system).\n+    /**\n+    * Reads a little-endian integer.\n+    * \n+    * The number of bytes returned is system-dependant.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_int(&self) -> int;\n \n-    /// Read a big-endian uint (number of bytes depends on system).\n+    /**\n+    * Reads a big-endian unsigned integer.\n+    * \n+    * The number of bytes returned is system-dependant.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_uint(&self) -> uint;\n \n-    /// Read a big-endian int (number of bytes depends on system).\n+    /**\n+    * Reads a big-endian integer.\n+    * \n+    * The number of bytes returned is system-dependant.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_int(&self) -> int;\n \n-    /// Read a big-endian u64 (8 bytes).\n+    /**\n+    * Reads a big-endian `u64`.\n+    * \n+    * `u64`s are 8 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_u64(&self) -> u64;\n \n-    /// Read a big-endian u32 (4 bytes).\n+    /**\n+    * Reads a big-endian `u32`.\n+    * \n+    * `u32`s are 4 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_u32(&self) -> u32;\n \n-    /// Read a big-endian u16 (2 bytes).\n+    /**\n+    * Reads a big-endian `u16`.\n+    * \n+    * `u16`s are 2 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_u16(&self) -> u16;\n \n-    /// Read a big-endian i64 (8 bytes).\n+    /**\n+    * Reads a big-endian `i64`.\n+    * \n+    * `i64`s are 8 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_i64(&self) -> i64;\n \n-    /// Read a big-endian i32 (4 bytes).\n+    /**\n+    * Reads a big-endian `i32`.\n+    * \n+    * `i32`s are 4 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_i32(&self) -> i32;\n \n-    /// Read a big-endian i16 (2 bytes).\n+    /**\n+    * Reads a big-endian `i16`.\n+    * \n+    * `i16`s are 2 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_i16(&self) -> i16;\n \n-    /// Read a big-endian IEEE754 double-precision floating-point (8 bytes).\n+    /**\n+    * Reads a big-endian `f64`.\n+    * \n+    * `f64`s are 8 byte, IEEE754 double-precision floating point numbers.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_f64(&self) -> f64;\n \n-    /// Read a big-endian IEEE754 single-precision floating-point (4 bytes).\n+    /**\n+    * Reads a big-endian `f32`.\n+    * \n+    * `f32`s are 4 byte, IEEE754 single-precision floating point numbers.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_be_f32(&self) -> f32;\n \n-    /// Read a little-endian u64 (8 bytes).\n+    /**\n+    * Reads a little-endian `u64`.\n+    * \n+    * `u64`s are 8 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_u64(&self) -> u64;\n \n-    /// Read a little-endian u32 (4 bytes).\n+    /**\n+    * Reads a little-endian `u32`.\n+    * \n+    * `u32`s are 4 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_u32(&self) -> u32;\n \n-    /// Read a little-endian u16 (2 bytes).\n+    /**\n+    * Reads a little-endian `u16`.\n+    * \n+    * `u16`s are 2 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_u16(&self) -> u16;\n \n-    /// Read a litle-endian i64 (8 bytes).\n+    /**\n+    * Reads a little-endian `i64`.\n+    * \n+    * `i64`s are 8 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_i64(&self) -> i64;\n \n-    /// Read a litle-endian i32 (4 bytes).\n+    /**\n+    * Reads a little-endian `i32`.\n+    * \n+    * `i32`s are 4 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_i32(&self) -> i32;\n \n-    /// Read a litle-endian i16 (2 bytes).\n+    /**\n+    * Reads a little-endian `i16`.\n+    * \n+    * `i16`s are 2 bytes long.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_i16(&self) -> i16;\n \n-    /// Read a litten-endian IEEE754 double-precision floating-point\n-    /// (8 bytes).\n+    /**\n+    * Reads a little-endian `f64`.\n+    * \n+    * `f64`s are 8 byte, IEEE754 double-precision floating point numbers.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_f64(&self) -> f64;\n \n-    /// Read a litten-endian IEEE754 single-precision floating-point\n-    /// (4 bytes).\n+    /**\n+    * Reads a little-endian `f32`.\n+    * \n+    * `f32`s are 4 byte, IEEE754 single-precision floating point numbers.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_le_f32(&self) -> f32;\n \n-    /// Read a u8 (1 byte).\n+    /**\n+    * Read a u8. \n+    * \n+    * `u8`s are 1 byte.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_u8(&self) -> u8;\n \n-    /// Read a i8 (1 byte).\n+    /**\n+    * Read an i8. \n+    * \n+    * `u8`s are 1 byte.\n+    * \n+    * # Examples\n+    *\n+    * None right now.\n+    */\n     fn read_i8(&self) -> i8;\n }\n "}]}