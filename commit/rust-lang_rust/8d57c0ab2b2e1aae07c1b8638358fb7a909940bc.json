{"sha": "8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTdjMGFiMmIyZTFhYWUwN2MxYjg2MzgzNThmYjdhOTA5OTQwYmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-01T11:56:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-01T11:56:02Z"}, "message": "Auto merge of #87546 - rusticstuff:issue87450-take-two, r=davidtwco\n\nBail on any found recursion when expanding opaque types\n\nFixes #87450. More of a bandaid because it does not fix the exponential complexity of the type folding used for opaque type expansion.", "tree": {"sha": "e78262bf28d13755e97f8905f9819261deeed976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78262bf28d13755e97f8905f9819261deeed976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "html_url": "https://github.com/rust-lang/rust/commit/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aadd6189ad5c81f50d942c584ed1c1b49892765f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aadd6189ad5c81f50d942c584ed1c1b49892765f", "html_url": "https://github.com/rust-lang/rust/commit/aadd6189ad5c81f50d942c584ed1c1b49892765f"}, {"sha": "2aa199632917dc1afa4b80d60d291a278e0bfb24", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa199632917dc1afa4b80d60d291a278e0bfb24", "html_url": "https://github.com/rust-lang/rust/commit/2aa199632917dc1afa4b80d60d291a278e0bfb24"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "9ba85e58018aafaa1744596a3da607f28c315a95", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "patch": "@@ -540,6 +540,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             expanded_cache: FxHashMap::default(),\n             primary_def_id: Some(def_id),\n             found_recursion: false,\n+            found_any_recursion: false,\n             check_recursion: true,\n             tcx: self,\n         };\n@@ -560,6 +561,7 @@ struct OpaqueTypeExpander<'tcx> {\n     expanded_cache: FxHashMap<(DefId, SubstsRef<'tcx>), Ty<'tcx>>,\n     primary_def_id: Option<DefId>,\n     found_recursion: bool,\n+    found_any_recursion: bool,\n     /// Whether or not to check for recursive opaque types.\n     /// This is `true` when we're explicitly checking for opaque type\n     /// recursion, and 'false' otherwise to avoid unnecessary work.\n@@ -569,7 +571,7 @@ struct OpaqueTypeExpander<'tcx> {\n \n impl<'tcx> OpaqueTypeExpander<'tcx> {\n     fn expand_opaque_ty(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> Option<Ty<'tcx>> {\n-        if self.found_recursion {\n+        if self.found_any_recursion {\n             return None;\n         }\n         let substs = substs.fold_with(self);\n@@ -591,6 +593,7 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n         } else {\n             // If another opaque type that we contain is recursive, then it\n             // will report the error, so we don't have to.\n+            self.found_any_recursion = true;\n             self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();\n             None\n         }\n@@ -1078,6 +1081,7 @@ pub fn normalize_opaque_types(\n         expanded_cache: FxHashMap::default(),\n         primary_def_id: None,\n         found_recursion: false,\n+        found_any_recursion: false,\n         check_recursion: false,\n         tcx,\n     };"}, {"sha": "983ef7cfbe0af83f21bc90abddd69de5cc6b74ab", "filename": "src/test/ui/impl-trait/issue-87450.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.rs?ref=8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "patch": "@@ -0,0 +1,16 @@\n+fn bar() -> impl Fn() {\n+    wrap(wrap(wrap(wrap(foo()))))\n+}\n+\n+fn foo() -> impl Fn() {\n+    //~^ WARNING 5:1: 5:22: function cannot return without recursing [unconditional_recursion]\n+    //~| ERROR 5:13: 5:22: cannot resolve opaque type [E0720]\n+    wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n+}\n+\n+fn wrap(f: impl Fn()) -> impl Fn() {\n+    move || f()\n+}\n+\n+fn main() {\n+}"}, {"sha": "83eb33efc6b6a23b1c446196e404d5aa3f7e2412", "filename": "src/test/ui/impl-trait/issue-87450.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d57c0ab2b2e1aae07c1b8638358fb7a909940bc/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr?ref=8d57c0ab2b2e1aae07c1b8638358fb7a909940bc", "patch": "@@ -0,0 +1,27 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-87450.rs:5:1\n+   |\n+LL | fn foo() -> impl Fn() {\n+   | ^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+...\n+LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n+   |                                        ----- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/issue-87450.rs:5:13\n+   |\n+LL | fn foo() -> impl Fn() {\n+   |             ^^^^^^^^^ recursive opaque type\n+...\n+LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n+   |     ----------------------------------------------- returning here with type `impl Fn<()>`\n+...\n+LL | fn wrap(f: impl Fn()) -> impl Fn() {\n+   |                          --------- returning this opaque type `impl Fn<()>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0720`."}]}