{"sha": "cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiODVmNGJjZTA2NDg1MTFiN2Y4Mzc1MTVjNTU2YWI0ZThkZDZjN2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-22T12:53:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-22T12:53:54Z"}, "message": "Rollup merge of #73582 - RalfJung:miri-span-bug, r=oli-obk\n\nMiri: replace many bug! by span_bug!\n\nr? @oli-obk", "tree": {"sha": "bd2dfef7755bd6eda3f4d9af2c9d906f09d475f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2dfef7755bd6eda3f4d9af2c9d906f09d475f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8KniCRBK7hj4Ov3rIwAAdHIIAJN8+9CHLJZSULk0UTVN0jrl\nfH73pBtw1KwmQeaGvxX5Od5PdV96P4tUI49xSaVrfvh6Sz371L/4nvNq0Z4wyEmP\nmxUOrOgGXURq3dYeyVUZqyMYr4KbNbj2sGJWJdU/Cw8FOSahP1++xeO/x/wtnT86\nthg9t11NPBvQWdVDq+4OVCc93x5J+Qj+q+vlo+o8aZEdPHRgmGhlO2U7KR5eSXJ3\n6OI9m7Z9w0DfN4SXrleXx5eIGLJO44pqNXv1Y+kMoUIbpP2Po4uZOrmfJU1iel/K\nVTh8rYMsXHhKYe4P+9gW5AfoqDOpbXO/11iHjanHyUXfGkG/fIrBdD/K3tnSPpQ=\n=Ldra\n-----END PGP SIGNATURE-----\n", "payload": "tree bd2dfef7755bd6eda3f4d9af2c9d906f09d475f4\nparent 35ecb2629783d413d8b840bca3512ad861b7cbfe\nparent 726b6f4a69a129ebf97d55f8cde1b3735b6df6aa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1592830434 +0200\ncommitter GitHub <noreply@github.com> 1592830434 +0200\n\nRollup merge of #73582 - RalfJung:miri-span-bug, r=oli-obk\n\nMiri: replace many bug! by span_bug!\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "html_url": "https://github.com/rust-lang/rust/commit/cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ecb2629783d413d8b840bca3512ad861b7cbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ecb2629783d413d8b840bca3512ad861b7cbfe", "html_url": "https://github.com/rust-lang/rust/commit/35ecb2629783d413d8b840bca3512ad861b7cbfe"}, {"sha": "726b6f4a69a129ebf97d55f8cde1b3735b6df6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/726b6f4a69a129ebf97d55f8cde1b3735b6df6aa", "html_url": "https://github.com/rust-lang/rust/commit/726b6f4a69a129ebf97d55f8cde1b3735b6df6aa"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "60cf21552e9e91102bbd368bd6aa3511dd5bf95f", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -52,7 +52,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         }\n \n                         if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n-                            bug!(\"reifying a fn ptr that requires const arguments\");\n+                            span_bug!(\n+                                self.cur_span(),\n+                                \"reifying a fn ptr that requires const arguments\"\n+                            );\n                         }\n \n                         let instance = ty::Instance::resolve_for_fn_ptr(\n@@ -66,7 +69,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(fn_ptr, dest)?;\n                     }\n-                    _ => bug!(\"reify fn pointer on {:?}\", src.layout.ty),\n+                    _ => span_bug!(self.cur_span(), \"reify fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n \n@@ -77,7 +80,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // No change to value\n                         self.write_immediate(*src, dest)?;\n                     }\n-                    _ => bug!(\"fn to unsafe fn cast on {:?}\", cast_ty),\n+                    _ => span_bug!(self.cur_span(), \"fn to unsafe fn cast on {:?}\", cast_ty),\n                 }\n             }\n \n@@ -99,7 +102,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(fn_ptr, dest)?;\n                     }\n-                    _ => bug!(\"closure fn pointer on {:?}\", src.layout.ty),\n+                    _ => span_bug!(self.cur_span(), \"closure fn pointer on {:?}\", src.layout.ty),\n                 }\n             }\n         }\n@@ -162,7 +165,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(src.layout.ty.is_unsafe_ptr());\n                 return match *src {\n                     Immediate::ScalarPair(data, _) => Ok(data.into()),\n-                    Immediate::Scalar(..) => bug!(\n+                    Immediate::Scalar(..) => span_bug!(\n+                        self.cur_span(),\n                         \"{:?} input to a fat-to-thin cast ({:?} -> {:?})\",\n                         *src,\n                         src.layout.ty,\n@@ -216,7 +220,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            _ => bug!(\"invalid int to {:?} cast\", cast_ty),\n+            _ => span_bug!(self.cur_span(), \"invalid int to {:?} cast\", cast_ty),\n         }\n     }\n \n@@ -248,7 +252,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // float -> f64\n             Float(FloatTy::F64) => Scalar::from_f64(f.convert(&mut false).value),\n             // That's it.\n-            _ => bug!(\"invalid float to {:?} cast\", dest_ty),\n+            _ => span_bug!(self.cur_span(), \"invalid float to {:?} cast\", dest_ty),\n         }\n     }\n \n@@ -287,7 +291,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(val, dest)\n             }\n \n-            _ => bug!(\"invalid unsizing {:?} -> {:?}\", src.layout.ty, cast_ty),\n+            _ => {\n+                span_bug!(self.cur_span(), \"invalid unsizing {:?} -> {:?}\", src.layout.ty, cast_ty)\n+            }\n         }\n     }\n \n@@ -307,7 +313,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert_eq!(def_a, def_b);\n                 if def_a.is_box() || def_b.is_box() {\n                     if !def_a.is_box() || !def_b.is_box() {\n-                        bug!(\"invalid unsizing between {:?} -> {:?}\", src.layout.ty, cast_ty.ty);\n+                        span_bug!(\n+                            self.cur_span(),\n+                            \"invalid unsizing between {:?} -> {:?}\",\n+                            src.layout.ty,\n+                            cast_ty.ty\n+                        );\n                     }\n                     return self.unsize_into_ptr(\n                         src,\n@@ -335,7 +346,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            _ => bug!(\"unsize_into: invalid conversion: {:?} -> {:?}\", src.layout, dest.layout),\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                src.layout,\n+                dest.layout\n+            ),\n         }\n     }\n }"}, {"sha": "ceacbbe5139bf3508587b2f9493896961923c1e8", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -536,7 +536,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if sized_size == Size::ZERO {\n                             return Ok(None);\n                         } else {\n-                            bug!(\"Fields cannot be extern types, unless they are at offset 0\")\n+                            span_bug!(\n+                                self.cur_span(),\n+                                \"Fields cannot be extern types, unless they are at offset 0\"\n+                            )\n                         }\n                     }\n                 };\n@@ -584,7 +587,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             ty::Foreign(_) => Ok(None),\n \n-            _ => bug!(\"size_and_align_of::<{:?}> not supported\", layout.ty),\n+            _ => span_bug!(self.cur_span(), \"size_and_align_of::<{:?}> not supported\", layout.ty),\n         }\n     }\n     #[inline]"}, {"sha": "31bdc45a2eab9432a901bec4cd87382355e5ed22", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -135,7 +135,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.force_bits(val, layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => bug!(\"{} called on invalid type {:?}\", intrinsic_name, ty),\n+                    _ => span_bug!(\n+                        self.cur_span(),\n+                        \"{} called on invalid type {:?}\",\n+                        intrinsic_name,\n+                        ty\n+                    ),\n                 };\n                 let (nonzero, intrinsic_name) = match intrinsic_name {\n                     sym::cttz_nonzero => (true, sym::cttz),"}, {"sha": "38948ee53846ae119bc4de38bf37612e1880d41d", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -311,7 +311,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Ok(imm) = self.try_read_immediate(op)? {\n             Ok(imm)\n         } else {\n-            bug!(\"primitive read failed for type: {:?}\", op.layout.ty);\n+            span_bug!(self.cur_span(), \"primitive read failed for type: {:?}\", op.layout.ty);\n         }\n     }\n \n@@ -360,9 +360,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = if offset.bytes() == 0 { a } else { b };\n                 Immediate::from(val)\n             }\n-            Immediate::Scalar(val) => {\n-                bug!(\"field access on non aggregate {:#?}, {:#?}\", val, op.layout)\n-            }\n+            Immediate::Scalar(val) => span_bug!(\n+                self.cur_span(),\n+                \"field access on non aggregate {:#?}, {:#?}\",\n+                val,\n+                op.layout\n+            ),\n         };\n         Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })\n     }\n@@ -545,7 +548,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..) => {\n-                bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n+                span_bug!(self.cur_span(), \"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n             ty::ConstKind::Value(val_val) => val_val,\n         };\n@@ -656,7 +659,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             .discriminants(def_id, *self.tcx)\n                             .find(|(_, var)| var.val == discr_bits)\n                     }\n-                    _ => bug!(\"tagged layout for non-adt non-generator\"),\n+                    _ => span_bug!(self.cur_span(), \"tagged layout for non-adt non-generator\"),\n                 }\n                 .ok_or_else(|| err_ub!(InvalidTag(tag_val.erase_tag())))?;\n                 // Return the cast value, and the index."}, {"sha": "607122935347e127537b59185385f0d7c44513cd", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -61,7 +61,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Le => l <= r,\n             Gt => l > r,\n             Ge => l >= r,\n-            _ => bug!(\"Invalid operation on char: {:?}\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"Invalid operation on char: {:?}\", bin_op),\n         };\n         (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n@@ -84,7 +84,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitAnd => l & r,\n             BitOr => l | r,\n             BitXor => l ^ r,\n-            _ => bug!(\"Invalid operation on bool: {:?}\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"Invalid operation on bool: {:?}\", bin_op),\n         };\n         (Scalar::from_bool(res), false, self.tcx.types.bool)\n     }\n@@ -110,7 +110,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Mul => ((l * r).value.into(), ty),\n             Div => ((l / r).value.into(), ty),\n             Rem => ((l % r).value.into(), ty),\n-            _ => bug!(\"invalid float op: `{:?}`\", bin_op),\n+            _ => span_bug!(self.cur_span(), \"invalid float op: `{:?}`\", bin_op),\n         };\n         (val, false, ty)\n     }\n@@ -154,7 +154,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // For the remaining ops, the types must be the same on both sides\n         if left_layout.ty != right_layout.ty {\n-            bug!(\n+            span_bug!(\n+                self.cur_span(),\n                 \"invalid asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n                 bin_op,\n                 l,\n@@ -251,7 +252,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ));\n             }\n \n-            _ => bug!(\n+            _ => span_bug!(\n+                self.cur_span(),\n                 \"invalid binary op {:?}: {:?}, {:?} (both {:?})\",\n                 bin_op,\n                 l,\n@@ -333,7 +335,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 M::binary_ptr_op(self, bin_op, left, right)\n             }\n-            _ => bug!(\"Invalid MIR: bad LHS type for binop: {:?}\", left.layout.ty),\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"Invalid MIR: bad LHS type for binop: {:?}\",\n+                left.layout.ty\n+            ),\n         }\n     }\n \n@@ -367,15 +373,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = val.to_bool()?;\n                 let res = match un_op {\n                     Not => !val,\n-                    _ => bug!(\"Invalid bool op {:?}\", un_op),\n+                    _ => span_bug!(self.cur_span(), \"Invalid bool op {:?}\", un_op),\n                 };\n                 Ok((Scalar::from_bool(res), false, self.tcx.types.bool))\n             }\n             ty::Float(fty) => {\n                 let res = match (un_op, fty) {\n                     (Neg, FloatTy::F32) => Scalar::from_f32(-val.to_f32()?),\n                     (Neg, FloatTy::F64) => Scalar::from_f64(-val.to_f64()?),\n-                    _ => bug!(\"Invalid float op {:?}\", un_op),\n+                    _ => span_bug!(self.cur_span(), \"Invalid float op {:?}\", un_op),\n                 };\n                 Ok((res, false, layout.ty))\n             }"}, {"sha": "0f3fbcf8195748e20ee222fe5f8ae850ccbdfb6d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb85f4bce0648511b7f837515c556ab4e8dd6c7a/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=cb85f4bce0648511b7f837515c556ab4e8dd6c7a", "patch": "@@ -232,7 +232,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n                     ty::Closure(..) => Abi::RustCall,\n                     ty::Generator(..) => Abi::Rust,\n-                    _ => bug!(\"unexpected callee ty: {:?}\", instance_ty),\n+                    _ => span_bug!(self.cur_span(), \"unexpected callee ty: {:?}\", instance_ty),\n                 }\n             };\n             let normalize_abi = |abi| match abi {"}]}