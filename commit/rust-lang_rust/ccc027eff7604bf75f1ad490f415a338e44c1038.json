{"sha": "ccc027eff7604bf75f1ad490f415a338e44c1038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYzAyN2VmZjc2MDRiZjc1ZjFhZDQ5MGY0MTVhMzM4ZTQ0YzEwMzg=", "commit": {"author": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2018-10-14T00:26:57Z"}, "committer": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2019-01-18T06:34:43Z"}, "message": "Improve documentation and slice impl", "tree": {"sha": "65dd686d50e4af2d3fe5ad56cdcee76832ef2184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65dd686d50e4af2d3fe5ad56cdcee76832ef2184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc027eff7604bf75f1ad490f415a338e44c1038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc027eff7604bf75f1ad490f415a338e44c1038", "html_url": "https://github.com/rust-lang/rust/commit/ccc027eff7604bf75f1ad490f415a338e44c1038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc027eff7604bf75f1ad490f415a338e44c1038/comments", "author": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce47dde59f45d55fa27dce9a614d1a972f9d8a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce47dde59f45d55fa27dce9a614d1a972f9d8a4f", "html_url": "https://github.com/rust-lang/rust/commit/ce47dde59f45d55fa27dce9a614d1a972f9d8a4f"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "4035ad6b77ca5bc815e0ce4c03b6afc48ad34670", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ccc027eff7604bf75f1ad490f415a338e44c1038/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc027eff7604bf75f1ad490f415a338e44c1038/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=ccc027eff7604bf75f1ad490f415a338e44c1038", "patch": "@@ -2640,7 +2640,9 @@ pub trait Iterator {\n     ///\n     /// Instead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\n     /// function to determine the ordering of two elements. Apart from that, it's equivalent to\n-    /// `is_sorted`; see its documentation for more information.\n+    /// [`is_sorted`]; see its documentation for more information.\n+    ///\n+    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n     where\n@@ -2666,9 +2668,11 @@ pub trait Iterator {\n     /// function.\n     ///\n     /// Instead of comparing the iterator's elements directly, this function compares the keys of\n-    /// the elements, as determined by `f`. Apart from that, it's equivalent to `is_sorted`; see\n+    /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n     /// its documentation for more information.\n     ///\n+    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "9c82aca9ab230db5a8fc1ef10fa8f4ccb292f69b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ccc027eff7604bf75f1ad490f415a338e44c1038/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc027eff7604bf75f1ad490f415a338e44c1038/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=ccc027eff7604bf75f1ad490f415a338e44c1038", "patch": "@@ -2285,22 +2285,23 @@ impl<T> [T] {\n     ///\n     /// Instead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\n     /// function to determine the ordering of two elements. Apart from that, it's equivalent to\n-    /// `is_sorted`; see its documentation for more information.\n+    /// [`is_sorted`]; see its documentation for more information.\n+    ///\n+    /// [`is_sorted`]: #method.is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     pub fn is_sorted_by<F>(&self, mut compare: F) -> bool\n     where\n         F: FnMut(&T, &T) -> Option<Ordering>\n     {\n-        let mut last = match self.first() {\n-            Some(e) => e,\n-            None => return true,\n-        };\n+        let len = self.len();\n+        if len <= 1 {\n+            return true;\n+        }\n \n-        for curr in &self[1..] {\n-            if compare(&last, &curr).map(|o| o == Ordering::Greater).unwrap_or(true) {\n+        for i in 1..len {\n+            if compare(&self[i - 1], &self[i]).map(|o| o == Ordering::Greater).unwrap_or(true) {\n                 return false;\n             }\n-            last = &curr;\n         }\n \n         true\n@@ -2309,9 +2310,11 @@ impl<T> [T] {\n     /// Checks if the elements of this slice are sorted using the given key extraction function.\n     ///\n     /// Instead of comparing the slice's elements directly, this function compares the keys of the\n-    /// elements, as determined by `f`. Apart from that, it's equivalent to `is_sorted`; see its\n+    /// elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see its\n     /// documentation for more information.\n     ///\n+    /// [`is_sorted`]: #method.is_sorted\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}