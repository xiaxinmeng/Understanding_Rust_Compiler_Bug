{"sha": "4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTMyZTFiZmMxZTNlNzhjMjAyYzc0ZmU5N2FhYjBkZjFlMTZiOGY=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-10-29T07:56:16Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2013-10-29T07:56:16Z"}, "message": "rewrite shootout-binarytrees.rs to match shootout directives\n\nThe old version didn't follow shootout's directives: no memory were\ndeallocated.  At the same time, parallelisation of the computation.\n\nfix #2913", "tree": {"sha": "ddc6f6b0b5518249a201b60cb1f3499693315f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc6f6b0b5518249a201b60cb1f3499693315f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f", "html_url": "https://github.com/rust-lang/rust/commit/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "671ab42a3b86addf7b90ff126554a092579e589a", "url": "https://api.github.com/repos/rust-lang/rust/commits/671ab42a3b86addf7b90ff126554a092579e589a", "html_url": "https://github.com/rust-lang/rust/commit/671ab42a3b86addf7b90ff126554a092579e589a"}], "stats": {"total": 96, "additions": 46, "deletions": 50}, "files": [{"sha": "1be66efb203550084aaed10067927ecf5092aa99", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=4ca32e1bfc1e3e78c202c74fe97aab0df1e16b8f", "patch": "@@ -9,81 +9,77 @@\n // except according to those terms.\n \n extern mod extra;\n+\n+use std::iter::range_step;\n use extra::arena::Arena;\n+use extra::future::Future;\n \n enum Tree<'self> {\n     Nil,\n-    Node(&'self Tree<'self>, &'self Tree<'self>, int),\n+    Node(&'self Tree<'self>, &'self Tree<'self>, int)\n }\n \n fn item_check(t: &Tree) -> int {\n     match *t {\n-      Nil => { return 0; }\n-      Node(left, right, item) => {\n-        return item + item_check(left) - item_check(right);\n-      }\n+        Nil => 0,\n+        Node(l, r, i) => i + item_check(l) - item_check(r)\n     }\n }\n \n-fn bottom_up_tree<'r>(arena: &'r Arena, item: int, depth: int)\n-                   -> &'r Tree<'r> {\n+fn bottom_up_tree<'r>(arena: &'r Arena, item: int, depth: int) -> &'r Tree<'r> {\n     if depth > 0 {\n-        return arena.alloc(\n-            || Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n-                    bottom_up_tree(arena, 2 * item, depth - 1),\n-                    item));\n-    }\n-    return arena.alloc(|| Nil);\n+        do arena.alloc {\n+            Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+                 bottom_up_tree(arena, 2 * item, depth - 1),\n+                 item)\n+        }\n+    } else {arena.alloc(|| Nil)}\n }\n \n fn main() {\n-    use std::os;\n-    use std::int;\n     let args = std::os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"17\"]\n+    let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+        17\n     } else if args.len() <= 1u {\n-        ~[~\"\", ~\"8\"]\n+        8\n     } else {\n-        args\n+        from_str(args[1]).unwrap()\n     };\n-\n-    let n = from_str::<int>(args[1]).unwrap();\n     let min_depth = 4;\n-    let mut max_depth;\n-    if min_depth + 2 > n {\n-        max_depth = min_depth + 2;\n-    } else {\n-        max_depth = n;\n-    }\n+    let max_depth = if min_depth + 2 > n {min_depth + 2} else {n};\n \n-    let stretch_arena = Arena::new();\n-    let stretch_depth = max_depth + 1;\n-    let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n+    {\n+        let arena = Arena::new();\n+        let depth = max_depth + 1;\n+        let tree = bottom_up_tree(&arena, 0, depth);\n \n-    println!(\"stretch tree of depth {}\\t check: {}\",\n-              stretch_depth,\n-              item_check(stretch_tree));\n+        println!(\"stretch tree of depth {}\\t check: {}\",\n+                 depth, item_check(tree));\n+    }\n \n     let long_lived_arena = Arena::new();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n-    let mut depth = min_depth;\n-    while depth <= max_depth {\n-        let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n-        let mut chk = 0;\n-        let mut i = 1;\n-        while i <= iterations {\n-            let mut temp_tree = bottom_up_tree(&long_lived_arena, i, depth);\n-            chk += item_check(temp_tree);\n-            temp_tree = bottom_up_tree(&long_lived_arena, -i, depth);\n-            chk += item_check(temp_tree);\n-            i += 1;\n-        }\n-        println!(\"{}\\t trees of depth {}\\t check: {}\",\n-                  iterations * 2, depth, chk);\n-        depth += 2;\n+\n+    let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n+            use std::int::pow;\n+            let iterations = pow(2, (max_depth - depth + min_depth) as uint);\n+            do Future::spawn {\n+                let mut chk = 0;\n+                for i in range(1, iterations + 1) {\n+                    let arena = Arena::new();\n+                    let a = bottom_up_tree(&arena, i, depth);\n+                    let b = bottom_up_tree(&arena, -i, depth);\n+                    chk += item_check(a) + item_check(b);\n+                }\n+                format!(\"{}\\t trees of depth {}\\t check: {}\",\n+                        iterations * 2, depth, chk)\n+            }\n+        }).to_owned_vec();\n+\n+    for message in messages.mut_iter() {\n+        println(*message.get_ref());\n     }\n+\n     println!(\"long lived tree of depth {}\\t check: {}\",\n-              max_depth,\n-              item_check(long_lived_tree));\n+             max_depth, item_check(long_lived_tree));\n }"}]}