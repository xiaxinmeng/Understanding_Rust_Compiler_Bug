{"sha": "5dea5d404c389417e960c52ed5f386699a13d904", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWE1ZDQwNGMzODk0MTdlOTYwYzUyZWQ1ZjM4NjY5OWExM2Q5MDQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-05-14T13:08:29Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-05-14T13:08:29Z"}, "message": "Fix dogfood errors", "tree": {"sha": "253824b75a49eb0ede5f245e9d0e75254a78215e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253824b75a49eb0ede5f245e9d0e75254a78215e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dea5d404c389417e960c52ed5f386699a13d904", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAlzavc0ACgkQAcg2tkD/\n37EWLBAAt6x8Vu6PMz+8jXLKXvad4NRXi//2P7lKcbkqhQe0169kgSWaWYRYbl+8\nav0y/yLNcWPQDvwrqAoGe8xFVow0kj7jpaR4U8qRhLBaNomS6owQI/+wwSCwhxmW\nkLLM7tY1PWvOMtcIJiwFusASqNd5Ya91vlXjk0hz+nvvvH8UsZx1s9EFCirqmmv0\n8jF3ec5gzRwLVl7sTZWeKGuzXKgdm5CpInSa8S38f4W0GiZtqfEQT/FbQknVhulN\nBb9IB/FkzBZOor/IeZcF4FJSA1dPS/vHy3e6vn99mvBoc+YP2TKSYbKaH1r5qLgx\n45E6m97Om/kaiy2rwkEN0qePrME1eOD0qrb4U7f13b/ldf5SWpXxz2V/AIDJ15E1\n93/hJ6uBblwHmrN7xbiKnGzSS6QfiCnqWQixMdKvFC+/OIuIFB8nAJxaJx5rdVgM\nfYii+loeS0/ew5MRSbk3om1+l5yChhvu896M3c0R0DEnwteRJs2EbZpsRIbBZxmb\n7VPrDREnwS8FMeHYqQFU1IS61oAQDoWWSF1G+FKWhwLuINC1pHa2XYpGiSgnMv5l\nQa0qxGymuTJ99yaotAfRpra1DCJ56RzYTeI57wm+U7XOHJOTUUxBz4lLrnuLJMUz\n4IdKZVHNHuFwsilru+qwzBMF/nalT25GkKJRSiZE+ZfSFJnL0Dw=\n=3r+n\n-----END PGP SIGNATURE-----", "payload": "tree 253824b75a49eb0ede5f245e9d0e75254a78215e\nparent 4b4d73475808c1e4c1cdf03f9cfda7338ca878f5\nauthor flip1995 <hello@philkrones.com> 1557839309 +0200\ncommitter flip1995 <hello@philkrones.com> 1557839309 +0200\n\nFix dogfood errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dea5d404c389417e960c52ed5f386699a13d904", "html_url": "https://github.com/rust-lang/rust/commit/5dea5d404c389417e960c52ed5f386699a13d904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dea5d404c389417e960c52ed5f386699a13d904/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4d73475808c1e4c1cdf03f9cfda7338ca878f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4d73475808c1e4c1cdf03f9cfda7338ca878f5", "html_url": "https://github.com/rust-lang/rust/commit/4b4d73475808c1e4c1cdf03f9cfda7338ca878f5"}], "stats": {"total": 33, "additions": 8, "deletions": 25}, "files": [{"sha": "702738b6696cc18a0ac269ab3277c01fbb470cf2", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5dea5d404c389417e960c52ed5f386699a13d904/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dea5d404c389417e960c52ed5f386699a13d904/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=5dea5d404c389417e960c52ed5f386699a13d904", "patch": "@@ -411,9 +411,6 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n             },\n-            ExprKind::Yield(ref e) => {\n-                self.hash_expr(e);\n-            },\n             ExprKind::Assign(ref l, ref r) => {\n                 self.hash_expr(l);\n                 self.hash_expr(r);\n@@ -439,14 +436,14 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(&*j);\n                 }\n             },\n-            ExprKind::Box(ref e) => {\n+            ExprKind::Box(ref e) | ExprKind::DropTemps(ref e) | ExprKind::Yield(ref e) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(ref fun, ref args) => {\n                 self.hash_expr(fun);\n                 self.hash_exprs(args);\n             },\n-            ExprKind::Cast(ref e, ref _ty) => {\n+            ExprKind::Cast(ref e, ref _ty) | ExprKind::Type(ref e, ref _ty) => {\n                 self.hash_expr(e);\n                 // TODO: _ty\n             },\n@@ -466,7 +463,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(a);\n                 self.hash_expr(i);\n             },\n-            ExprKind::InlineAsm(..) => {},\n+            ExprKind::InlineAsm(..) | ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.hash(&mut self.s);\n             },\n@@ -520,31 +517,20 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(e);\n                 }\n             },\n-            ExprKind::Tup(ref tup) => {\n-                self.hash_exprs(tup);\n-            },\n-            ExprKind::Type(ref e, ref _ty) => {\n-                self.hash_expr(e);\n-                // TODO: _ty\n+            ExprKind::Tup(ref v) | ExprKind::Array(ref v) => {\n+                self.hash_exprs(v);\n             },\n             ExprKind::Unary(lop, ref le) => {\n                 lop.hash(&mut self.s);\n                 self.hash_expr(le);\n             },\n-            ExprKind::Array(ref v) => {\n-                self.hash_exprs(v);\n-            },\n             ExprKind::While(ref cond, ref b, l) => {\n                 self.hash_expr(cond);\n                 self.hash_block(b);\n                 if let Some(l) = l {\n                     self.hash_name(l.ident.name);\n                 }\n             },\n-            ExprKind::Err => {},\n-            ExprKind::DropTemps(ref e) => {\n-                self.hash_expr(e);\n-            },\n         }\n     }\n \n@@ -580,17 +566,14 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n     pub fn hash_stmt(&mut self, b: &Stmt) {\n         std::mem::discriminant(&b.node).hash(&mut self.s);\n \n-        match b.node {\n-            StmtKind::Local(ref local) => {\n+        match &b.node {\n+            StmtKind::Local(local) => {\n                 if let Some(ref init) = local.init {\n                     self.hash_expr(init);\n                 }\n             },\n             StmtKind::Item(..) => {},\n-            StmtKind::Expr(ref expr) => {\n-                self.hash_expr(expr);\n-            },\n-            StmtKind::Semi(ref expr) => {\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n                 self.hash_expr(expr);\n             },\n         }"}]}