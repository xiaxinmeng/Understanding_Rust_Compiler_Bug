{"sha": "aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMWQ0ZWY1NWExZjU0NGMyNDVmMGVmMTYzYTMyOTJkYmJiOTM5M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-07T16:31:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-07T16:31:12Z"}, "message": "auto merge of #9032 : alexcrichton/rust/inline-repr, r=thestinger\n\nThis allows cross-crate inlining which is *very* good because this is called a\r\nlot throughout libstd (even when libstd is inlined across crates).\r\n\r\nIn one of my projects, I have a test case with the following performance characteristics\r\n\r\ncommit | optimization level | runtime (seconds)\r\n----|------|----\r\nbefore | O2  | 22s\r\nbefore | O3  | 107s\r\nafter | O2  | 13s\r\nafter | O3  | 12s\r\n\r\nI'm a bit disturbed by the 107s runtime from O3 before this commit. The performance characteristics of this test involve doing an absurd amount of small operations. A huge portion of this is creating hashmaps which involves allocating vectors.\r\n\r\nThe worst portions of the profile are:\r\n![screen shot 2013-09-06 at 10 32 15 pm](https://f.cloud.github.com/assets/64996/1100723/e5e8744c-177e-11e3-83fc-ddc5f18c60f9.png)\r\n\r\nWhich as you can see looks like some *serious* problems with inlining. I would expect the hash map methods to be high up in the profile, but the top 9 callers of `cast::transmute_copy` were `Repr::repr`'s various monomorphized instances.\r\n\r\nI wish there we a better way to detect things like this in the future, and it's unfortunate that this is required for performance in the first place. I suppose I'm not entirely sure why this is needed because all of the methods should have been generated in-crate (monomorphized versions of library functions), so they should have gotten inlined? It also could just be that by modifying LLVM's idea of the inline cost of this function it was able to inline it in many more locations.", "tree": {"sha": "f4a52aa062f267fba0b7be72055fe238d4b7ae07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4a52aa062f267fba0b7be72055fe238d4b7ae07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "html_url": "https://github.com/rust-lang/rust/commit/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124eb2119c78651cfaaa7a046a101fa2e20f83ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/124eb2119c78651cfaaa7a046a101fa2e20f83ca", "html_url": "https://github.com/rust-lang/rust/commit/124eb2119c78651cfaaa7a046a101fa2e20f83ca"}, {"sha": "739df232fee368727f9dab5638937935981f666d", "url": "https://api.github.com/repos/rust-lang/rust/commits/739df232fee368727f9dab5638937935981f666d", "html_url": "https://github.com/rust-lang/rust/commit/739df232fee368727f9dab5638937935981f666d"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "ac0e83df7ef56839bdfdcbb55cb621ac5d9fbc1a", "filename": "src/libstd/unstable/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a/src%2Flibstd%2Funstable%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a/src%2Flibstd%2Funstable%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fraw.rs?ref=aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "patch": "@@ -49,6 +49,7 @@ pub trait Repr<T> {\n     /// struct representation. This can be used to read/write different values\n     /// for the struct. This is a safe method because by default it does not\n     /// give write-access to the struct returned.\n+    #[inline]\n     fn repr(&self) -> T { unsafe { cast::transmute_copy(self) } }\n }\n "}]}