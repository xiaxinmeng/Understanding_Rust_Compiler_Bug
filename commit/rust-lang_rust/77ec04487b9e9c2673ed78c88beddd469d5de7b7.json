{"sha": "77ec04487b9e9c2673ed78c88beddd469d5de7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWMwNDQ4N2I5ZTljMjY3M2VkNzhjODhiZWRkZDQ2OWQ1ZGU3Yjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-07T20:16:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-01-08T01:01:07Z"}, "message": "mk: Start testing the cheatsheet", "tree": {"sha": "6b9ef1ae9a7f51306e95a6eae06a44325219e89d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9ef1ae9a7f51306e95a6eae06a44325219e89d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77ec04487b9e9c2673ed78c88beddd469d5de7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77ec04487b9e9c2673ed78c88beddd469d5de7b7", "html_url": "https://github.com/rust-lang/rust/commit/77ec04487b9e9c2673ed78c88beddd469d5de7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77ec04487b9e9c2673ed78c88beddd469d5de7b7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ef4e53722476afab906b7720fd5434ea929717", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ef4e53722476afab906b7720fd5434ea929717", "html_url": "https://github.com/rust-lang/rust/commit/c2ef4e53722476afab906b7720fd5434ea929717"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "54473d82285216aeee8118c503bfb3fa498d2d01", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77ec04487b9e9c2673ed78c88beddd469d5de7b7/configure", "raw_url": "https://github.com/rust-lang/rust/raw/77ec04487b9e9c2673ed78c88beddd469d5de7b7/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=77ec04487b9e9c2673ed78c88beddd469d5de7b7", "patch": "@@ -806,6 +806,7 @@ do\n     make_dir $h/test/doc-guide-container\n     make_dir $h/test/doc-guide-tasks\n     make_dir $h/test/doc-guide-conditions\n+    make_dir $h/test/doc-complement-cheatsheet\n     make_dir $h/test/doc-rust\n done\n "}, {"sha": "d9dc527caeee51a60db77aeb3707318b08653180", "filename": "doc/complement-cheatsheet.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77ec04487b9e9c2673ed78c88beddd469d5de7b7/doc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/77ec04487b9e9c2673ed78c88beddd469d5de7b7/doc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-cheatsheet.md?ref=77ec04487b9e9c2673ed78c88beddd469d5de7b7", "patch": "@@ -48,7 +48,7 @@ let y: int = x.unwrap();\n \n Use [`File::open`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html#method.open) to create a [`File`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html) struct, which implements the [`Reader`](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html) trait.\n \n-~~~\n+~~~ {.xfail-test}\n use std::path::Path;\n use std::io::fs::File;\n \n@@ -63,6 +63,9 @@ Use the [`lines`](http://static.rust-lang.org/doc/master/std/io/trait.Buffer.htm\n \n ~~~\n use std::io::buffered::BufferedReader;\n+# use std::io::mem::MemReader;\n+\n+# let reader = MemReader::new(~[]);\n \n let mut reader = BufferedReader::new(reader);\n for line in reader.lines() {\n@@ -149,6 +152,9 @@ Phantom types are useful for enforcing state at compile time. For example:\n ~~~\n struct Door<State>(~str);\n \n+struct Open;\n+struct Closed;\n+\n fn close(Door(name): Door<Open>) -> Door<Closed> {\n     Door::<Closed>(name)\n }\n@@ -157,7 +163,12 @@ fn open(Door(name): Door<Closed>) -> Door<Open> {\n     Door::<Open>(name)\n }\n \n-let _ = close(Door::<Open>(~\"front\"));   // ok\n+let _ = close(Door::<Open>(~\"front\"));\n+~~~\n+\n+Attempting to close a closed door is prevented statically:\n+\n+~~~ {.xfail-test}\n let _ = close(Door::<Closed>(~\"front\")); // error: mismatched types: expected `main::Door<main::Open>` but found `main::Door<main::Closed>`\n ~~~\n \n@@ -185,7 +196,7 @@ Window* createWindow(int width, int height);\n \n You can use a zero-element `enum` ([phantom type](#how-do-i-express-phantom-types)) to represent the opaque object handle. The FFI would look like this:\n \n-~~~\n+~~~ {.xfail-test}\n enum Window {}\n extern \"C\" {\n     fn createWindow(width: c_int, height: c_int) -> *Window;"}, {"sha": "d50f9878bd162d05d942b6ba40fd504487738074", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77ec04487b9e9c2673ed78c88beddd469d5de7b7/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/77ec04487b9e9c2673ed78c88beddd469d5de7b7/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=77ec04487b9e9c2673ed78c88beddd469d5de7b7", "patch": "@@ -22,6 +22,7 @@ TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n # Markdown files under doc/ that should have their code extracted and run\n DOC_TEST_NAMES = tutorial guide-ffi guide-macros guide-lifetimes \\\n                  guide-tasks guide-conditions guide-container guide-pointers \\\n+                 complement-cheatsheet \\\n                  rust\n \n ######################################################################"}]}