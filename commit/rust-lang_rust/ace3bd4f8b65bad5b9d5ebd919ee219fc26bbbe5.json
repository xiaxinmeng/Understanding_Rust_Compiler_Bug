{"sha": "ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTNiZDRmOGI2NWJhZDViOWQ1ZWJkOTE5ZWUyMTlmYzI2YmJiZTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-23T18:44:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-23T18:44:09Z"}, "message": "Rollup merge of #84387 - CDirkx:poison, r=m-ou-se\n\nMove `sys_common::poison` to `sync::poison`\n\n`sys_common` should not contain publicly exported types, only platform-independent abstractions on top of `sys`, which `sys_common::poison` is not. There is thus no reason for the module to not live under `sync`.\n\nPart of #84187.", "tree": {"sha": "2095b58e8b04e971677d0eb905ac0972781979a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2095b58e8b04e971677d0eb905ac0972781979a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggxV5CRBK7hj4Ov3rIwAA7HgIAFe2h1NAQC2b61B4pABmlvx0\nL2E00thVQSUZq+bDsd4zD1fzWe+oF81Dzp+es7F2zaT4j3dqQdfPTlMlQbEtWjIR\nLEP4l9x/mzRvX3cdIc9puiFeRUsfaO9bizNsX8LPhJjubnTmWdFsmvOq9eECWomw\nO64I3Nk++caAOnuGroQDVp09ETe3LP1eM/GHDaIMSntXLF8VAKbqULHFZw9vOtDV\n8N9aaFhAnq40Ab88+xRbWArKwHtDHKJ1PrnGdmRohmdS87KKoA/i38KcYnKNsp6g\nI0/7DpEglrvDe5QC/5P5sFtNzx+xo8GCiAdOZypt6VGUB0vYe3+gbFE5gEOWKrg=\n=6ZSC\n-----END PGP SIGNATURE-----\n", "payload": "tree 2095b58e8b04e971677d0eb905ac0972781979a4\nparent 8de00b3cbfd053ed4d65e521b29ccc1dd7150034\nparent 9cabbd0afcfd8aa5724501bea96fb98688913d0b\nauthor Yuki Okushi <jtitor@2k36.org> 1619203449 +0900\ncommitter GitHub <noreply@github.com> 1619203449 +0900\n\nRollup merge of #84387 - CDirkx:poison, r=m-ou-se\n\nMove `sys_common::poison` to `sync::poison`\n\n`sys_common` should not contain publicly exported types, only platform-independent abstractions on top of `sys`, which `sys_common::poison` is not. There is thus no reason for the module to not live under `sync`.\n\nPart of #84187.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "html_url": "https://github.com/rust-lang/rust/commit/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8de00b3cbfd053ed4d65e521b29ccc1dd7150034", "url": "https://api.github.com/repos/rust-lang/rust/commits/8de00b3cbfd053ed4d65e521b29ccc1dd7150034", "html_url": "https://github.com/rust-lang/rust/commit/8de00b3cbfd053ed4d65e521b29ccc1dd7150034"}, {"sha": "9cabbd0afcfd8aa5724501bea96fb98688913d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cabbd0afcfd8aa5724501bea96fb98688913d0b", "html_url": "https://github.com/rust-lang/rust/commit/9cabbd0afcfd8aa5724501bea96fb98688913d0b"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "2f0b32c90d0ee0a585190e264a452997dce0b903", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -2,9 +2,8 @@\n mod tests;\n \n use crate::fmt;\n-use crate::sync::{mutex, MutexGuard, PoisonError};\n+use crate::sync::{mutex, poison, LockResult, MutexGuard, PoisonError};\n use crate::sys_common::condvar as sys;\n-use crate::sys_common::poison::{self, LockResult};\n use crate::time::{Duration, Instant};\n \n /// A type indicating whether a timed wait on a condition variable returned"}, {"sha": "ee35598bab5fe1fb99b38155d4e770ffedf9a3bc", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -166,14 +166,15 @@ pub use self::mutex::{Mutex, MutexGuard};\n #[allow(deprecated)]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n+pub use self::poison::{LockResult, PoisonError, TryLockError, TryLockResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys_common::poison::{LockResult, PoisonError, TryLockError, TryLockResult};\n+pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n \n pub mod mpsc;\n \n mod barrier;\n mod condvar;\n mod mutex;\n mod once;\n+mod poison;\n mod rwlock;"}, {"sha": "2615bea659253aaa7842e0b0fe207e00ca160304", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -6,8 +6,8 @@ use crate::fmt;\n use crate::mem;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n+use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::mutex as sys;\n-use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///"}, {"sha": "05e1833c3e5677609c85ed25ced6cb8bfec9dc2d", "filename": "library/std/src/sync/poison.rs", "status": "renamed", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -3,9 +3,6 @@ use crate::fmt;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::thread;\n \n-#[allow(unused_imports)] // for intra-doc links\n-use crate::sync::{Mutex, RwLock};\n-\n pub struct Flag {\n     failed: AtomicBool,\n }\n@@ -80,6 +77,8 @@ pub struct Guard {\n ///     }\n /// };\n /// ```\n+/// [`Mutex`]: crate::sync::Mutex\n+/// [`RwLock`]: crate::sync::RwLock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PoisonError<T> {\n     guard: T,\n@@ -89,9 +88,11 @@ pub struct PoisonError<T> {\n /// can occur while trying to acquire a lock, from the [`try_lock`] method on a\n /// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n-/// [`try_lock`]: Mutex::try_lock\n-/// [`try_read`]: RwLock::try_read\n-/// [`try_write`]: RwLock::try_write\n+/// [`try_lock`]: crate::sync::Mutex::try_lock\n+/// [`try_read`]: crate::sync::RwLock::try_read\n+/// [`try_write`]: crate::sync::RwLock::try_write\n+/// [`Mutex`]: crate::sync::Mutex\n+/// [`RwLock`]: crate::sync::RwLock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n@@ -149,7 +150,8 @@ impl<T> Error for PoisonError<T> {\n impl<T> PoisonError<T> {\n     /// Creates a `PoisonError`.\n     ///\n-    /// This is generally created by methods like [`Mutex::lock`] or [`RwLock::read`].\n+    /// This is generally created by methods like [`Mutex::lock`](crate::sync::Mutex::lock)\n+    /// or [`RwLock::read`](crate::sync::RwLock::read).\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n         PoisonError { guard }", "previous_filename": "library/std/src/sys_common/poison.rs"}, {"sha": "b01bcec1361d7c7986f94be9e856c5ad1ece88ed", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -6,7 +6,7 @@ use crate::fmt;\n use crate::mem;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n-use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n+use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::rwlock as sys;\n \n /// A reader-writer lock"}, {"sha": "4979bc0b5af77b7179174051529398b3a0312dab", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=ace3bd4f8b65bad5b9d5ebd919ee219fc26bbbe5", "patch": "@@ -59,7 +59,6 @@ pub mod mutex;\n // when generating documentation.\n #[cfg(any(doc, not(windows)))]\n pub mod os_str_bytes;\n-pub mod poison;\n pub mod process;\n pub mod remutex;\n pub mod rwlock;"}]}