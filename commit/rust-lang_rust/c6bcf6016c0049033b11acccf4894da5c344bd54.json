{"sha": "c6bcf6016c0049033b11acccf4894da5c344bd54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YmNmNjAxNmMwMDQ5MDMzYjExYWNjY2Y0ODk0ZGE1YzM0NGJkNTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T11:17:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T17:12:50Z"}, "message": "rustc_metadata: `locator::Context` -> `CrateLocator`", "tree": {"sha": "7a1fc0cddb049d242862f3b17a0e1aeef2e67ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1fc0cddb049d242862f3b17a0e1aeef2e67ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6bcf6016c0049033b11acccf4894da5c344bd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6bcf6016c0049033b11acccf4894da5c344bd54", "html_url": "https://github.com/rust-lang/rust/commit/c6bcf6016c0049033b11acccf4894da5c344bd54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6bcf6016c0049033b11acccf4894da5c344bd54/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68985c761386e114ac9a99eeec3e2ed7af2877b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/68985c761386e114ac9a99eeec3e2ed7af2877b5", "html_url": "https://github.com/rust-lang/rust/commit/68985c761386e114ac9a99eeec3e2ed7af2877b5"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "7bf9ddb5637e63fac833e6d360a0f84d0317b368", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6bcf6016c0049033b11acccf4894da5c344bd54/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bcf6016c0049033b11acccf4894da5c344bd54/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c6bcf6016c0049033b11acccf4894da5c344bd54", "patch": "@@ -1,7 +1,7 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use crate::cstore::{self, CStore};\n-use crate::locator::{self, CratePaths};\n+use crate::locator::{CrateLocator, CratePaths};\n use crate::rmeta::{CrateRoot, CrateDep, MetadataBlob};\n use rustc_data_structures::sync::{Lock, Once, AtomicCell};\n \n@@ -68,13 +68,13 @@ enum LoadResult {\n }\n \n enum LoadError<'a> {\n-    LocatorError(locator::Context<'a>),\n+    LocatorError(CrateLocator<'a>),\n }\n \n impl<'a> LoadError<'a> {\n     fn report(self) -> ! {\n         match self {\n-            LoadError::LocatorError(locate_ctxt) => locate_ctxt.report_errs(),\n+            LoadError::LocatorError(locator) => locator.report_errs(),\n         }\n     }\n }\n@@ -267,15 +267,15 @@ impl<'a> CrateLoader<'a> {\n \n     fn load_proc_macro<'b>(\n         &self,\n-        locate_ctxt: &mut locator::Context<'b>,\n+        locator: &mut CrateLocator<'b>,\n         path_kind: PathKind,\n     ) -> Option<(LoadResult, Option<Library>)>\n     where\n         'a: 'b,\n     {\n-        // Use a new locator Context so trying to load a proc macro doesn't affect the error\n+        // Use a new crate locator so trying to load a proc macro doesn't affect the error\n         // message we emit\n-        let mut proc_macro_locator = locate_ctxt.clone();\n+        let mut proc_macro_locator = locator.clone();\n \n         // Try to load a proc macro\n         proc_macro_locator.is_proc_macro = Some(true);\n@@ -287,10 +287,10 @@ impl<'a> CrateLoader<'a> {\n                 LoadResult::Previous(cnum) => return Some((LoadResult::Previous(cnum), None)),\n                 LoadResult::Loaded(library) => Some(LoadResult::Loaded(library))\n             };\n-            locate_ctxt.hash = locate_ctxt.host_hash;\n-            // Use the locate_ctxt when looking for the host proc macro crate, as that is required\n+            locator.hash = locator.host_hash;\n+            // Use the locator when looking for the host proc macro crate, as that is required\n             // so we want it to affect the error message\n-            (locate_ctxt, result)\n+            (locator, result)\n         } else {\n             (&mut proc_macro_locator, None)\n         };\n@@ -350,7 +350,7 @@ impl<'a> CrateLoader<'a> {\n             (LoadResult::Previous(cnum), None)\n         } else {\n             info!(\"falling back to a load\");\n-            let mut locate_ctxt = locator::Context {\n+            let mut locator = CrateLocator {\n                 sess: self.sess,\n                 span,\n                 crate_name: name,\n@@ -371,10 +371,10 @@ impl<'a> CrateLoader<'a> {\n                 metadata_loader: self.metadata_loader,\n             };\n \n-            self.load(&mut locate_ctxt).map(|r| (r, None)).or_else(|| {\n+            self.load(&mut locator).map(|r| (r, None)).or_else(|| {\n                 dep_kind = DepKind::UnexportedMacrosOnly;\n-                self.load_proc_macro(&mut locate_ctxt, path_kind)\n-            }).ok_or_else(move || LoadError::LocatorError(locate_ctxt))?\n+                self.load_proc_macro(&mut locator, path_kind)\n+            }).ok_or_else(move || LoadError::LocatorError(locator))?\n         };\n \n         match result {\n@@ -395,8 +395,8 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn load(&self, locate_ctxt: &mut locator::Context<'_>) -> Option<LoadResult> {\n-        let library = locate_ctxt.maybe_load_library_crate()?;\n+    fn load(&self, locator: &mut CrateLocator<'_>) -> Option<LoadResult> {\n+        let library = locator.maybe_load_library_crate()?;\n \n         // In the case that we're loading a crate, but not matching\n         // against a hash, we could load a crate which has the same hash\n@@ -407,11 +407,11 @@ impl<'a> CrateLoader<'a> {\n         // don't want to match a host crate against an equivalent target one\n         // already loaded.\n         let root = library.metadata.get_root();\n-        if locate_ctxt.triple == self.sess.opts.target_triple {\n+        if locator.triple == self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n                 if data.root.name == root.name && root.hash == data.root.hash {\n-                    assert!(locate_ctxt.hash.is_none());\n+                    assert!(locator.hash.is_none());\n                     info!(\"load success, going to previous cnum: {}\", cnum);\n                     result = LoadResult::Previous(cnum);\n                 }"}, {"sha": "631bdd6f3a5f01b1bce50b7f288f2ba8c0e644a0", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6bcf6016c0049033b11acccf4894da5c344bd54/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6bcf6016c0049033b11acccf4894da5c344bd54/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=c6bcf6016c0049033b11acccf4894da5c344bd54", "patch": "@@ -254,7 +254,7 @@ crate struct CrateMismatch {\n }\n \n #[derive(Clone)]\n-crate struct Context<'a> {\n+crate struct CrateLocator<'a> {\n     pub sess: &'a Session,\n     pub span: Span,\n     pub crate_name: Symbol,\n@@ -298,7 +298,7 @@ impl fmt::Display for CrateFlavor {\n     }\n }\n \n-impl<'a> Context<'a> {\n+impl<'a> CrateLocator<'a> {\n     crate fn reset(&mut self) {\n         self.rejected_via_hash.clear();\n         self.rejected_via_triple.clear();\n@@ -926,7 +926,7 @@ pub fn find_plugin_registrar(\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let is_cross = target_triple != host_triple;\n     let mut target_only = false;\n-    let mut locate_ctxt = Context {\n+    let mut locator = CrateLocator {\n         sess,\n         span,\n         crate_name: name,\n@@ -947,23 +947,23 @@ pub fn find_plugin_registrar(\n         metadata_loader,\n     };\n \n-    let library = locate_ctxt.maybe_load_library_crate().or_else(|| {\n+    let library = locator.maybe_load_library_crate().or_else(|| {\n         if !is_cross {\n             return None\n         }\n         // Try loading from target crates. This will abort later if we\n         // try to load a plugin registrar function,\n         target_only = true;\n \n-        locate_ctxt.target = &sess.target.target;\n-        locate_ctxt.triple = target_triple;\n-        locate_ctxt.filesearch = sess.target_filesearch(PathKind::Crate);\n+        locator.target = &sess.target.target;\n+        locator.triple = target_triple;\n+        locator.filesearch = sess.target_filesearch(PathKind::Crate);\n \n-        locate_ctxt.maybe_load_library_crate()\n+        locator.maybe_load_library_crate()\n     });\n     let library = match library {\n         Some(l) => l,\n-        None => locate_ctxt.report_errs(),\n+        None => locator.report_errs(),\n     };\n \n     if target_only {"}]}