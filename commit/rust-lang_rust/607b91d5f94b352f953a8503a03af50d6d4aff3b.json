{"sha": "607b91d5f94b352f953a8503a03af50d6d4aff3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwN2I5MWQ1Zjk0YjM1MmY5NTNhODUwM2EwM2FmNTBkNmQ0YWZmM2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-05T18:33:14Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:07Z"}, "message": "librustc: Rename Owned to Send in the compiler", "tree": {"sha": "67f2094cdc53a76b8a87f9bf7ea3cef10c4dd327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f2094cdc53a76b8a87f9bf7ea3cef10c4dd327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607b91d5f94b352f953a8503a03af50d6d4aff3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607b91d5f94b352f953a8503a03af50d6d4aff3b", "html_url": "https://github.com/rust-lang/rust/commit/607b91d5f94b352f953a8503a03af50d6d4aff3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607b91d5f94b352f953a8503a03af50d6d4aff3b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "811e045c609f8f6bc53faeec817e9ba7aeadf056", "url": "https://api.github.com/repos/rust-lang/rust/commits/811e045c609f8f6bc53faeec817e9ba7aeadf056", "html_url": "https://github.com/rust-lang/rust/commit/811e045c609f8f6bc53faeec817e9ba7aeadf056"}], "stats": {"total": 119, "additions": 65, "deletions": 54}, "files": [{"sha": "8bd42eae24061762d73aff8f28cbbab6c8c7c3d8", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -35,8 +35,8 @@ struct RcBox<T> {\n }\n \n /// Immutable reference counted pointer type\n-#[non_owned]\n #[unsafe_no_drop_flag]\n+#[non_sendable]\n pub struct Rc<T> {\n     priv ptr: *mut RcBox<T>,\n }\n@@ -168,6 +168,7 @@ struct RcMutBox<T> {\n \n /// Mutable reference counted pointer type\n #[non_owned]\n+#[non_sendable]\n #[mutable]\n #[unsafe_no_drop_flag]\n pub struct RcMut<T> {"}, {"sha": "0aae22b40ef49fd8a917d4ebe79fa740d2637248", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -554,7 +554,7 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n     loop {\n         match next(st) {\n             'S' => {\n-                param_bounds.builtin_bounds.add(ty::BoundOwned);\n+                param_bounds.builtin_bounds.add(ty::BoundSend);\n             }\n             'C' => {\n                 param_bounds.builtin_bounds.add(ty::BoundCopy);"}, {"sha": "7c8741b41d985814d31f192d0ac73101b278933b", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -401,7 +401,7 @@ fn enc_fn_sig(w: @io::Writer, cx: @ctxt, fsig: &ty::FnSig) {\n fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n     for bs.builtin_bounds.each |bound| {\n         match bound {\n-            ty::BoundOwned => w.write_char('S'),\n+            ty::BoundSend => w.write_char('S'),\n             ty::BoundCopy => w.write_char('C'),\n             ty::BoundConst => w.write_char('K'),\n             ty::BoundStatic => w.write_char('O'),"}, {"sha": "7a615601b1e893d8f75b17da1fe526d6ee4c256e", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -33,7 +33,7 @@ use syntax::{visit, ast_util};\n //  copy: Things that can be copied.\n //  const: Things thare are deeply immutable. They are guaranteed never to\n //    change, and can be safely shared without copying between tasks.\n-//  owned: Things that do not contain borrowed pointers.\n+//  'static: Things that do not contain borrowed pointers.\n //\n // Send includes scalar types as well as classes and unique types containing\n // only sendable types.\n@@ -90,18 +90,18 @@ fn check_struct_safe_for_destructor(cx: Context,\n             self_ty: None,\n             tps: ~[]\n         });\n-        if !ty::type_is_owned(cx.tcx, struct_ty) {\n+        if !ty::type_is_sendable(cx.tcx, struct_ty) {\n             cx.tcx.sess.span_err(span,\n-                                 \"cannot implement a destructor on a struct \\\n-                                  that is not Owned\");\n+                                 \"cannot implement a destructor on a \\\n+                                  structure that does not satisfy Send\");\n             cx.tcx.sess.span_note(span,\n                                   \"use \\\"#[unsafe_destructor]\\\" on the \\\n                                    implementation to force the compiler to \\\n                                    allow this\");\n         }\n     } else {\n         cx.tcx.sess.span_err(span,\n-                             \"cannot implement a destructor on a struct \\\n+                             \"cannot implement a destructor on a structure \\\n                               with type parameters\");\n         cx.tcx.sess.span_note(span,\n                               \"use \\\"#[unsafe_destructor]\\\" on the \\\n@@ -438,10 +438,10 @@ fn check_copy(cx: Context, ty: ty::t, sp: span, reason: &str) {\n     }\n }\n \n-pub fn check_owned(cx: Context, ty: ty::t, sp: span) -> bool {\n-    if !ty::type_is_owned(cx.tcx, ty) {\n+pub fn check_send(cx: Context, ty: ty::t, sp: span) -> bool {\n+    if !ty::type_is_sendable(cx.tcx, ty) {\n         cx.tcx.sess.span_err(\n-            sp, fmt!(\"value has non-owned type `%s`\",\n+            sp, fmt!(\"value has non-sendable type `%s`\",\n                      ty_to_str(cx.tcx, ty)));\n         false\n     } else {\n@@ -489,7 +489,7 @@ pub fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n /// `deque<T>`, then whatever borrowed ptrs may appear in `T` also\n /// appear in `deque<T>`.\n ///\n-/// (3) The type parameter is owned (and therefore does not contain\n+/// (3) The type parameter is sendable (and therefore does not contain\n /// borrowed ptrs).\n ///\n /// FIXME(#5723)---This code should probably move into regionck.\n@@ -528,7 +528,7 @@ pub fn check_cast_for_escaping_regions(\n     }\n \n     // Assuming the trait instance can escape, then ensure that each parameter\n-    // either appears in the trait type or is owned.\n+    // either appears in the trait type or is sendable.\n     let target_params = ty::param_tys_in_type(target_ty);\n     let source_ty = ty::expr_ty(cx.tcx, source);\n     ty::walk_regions_and_ty(\n@@ -574,3 +574,4 @@ pub fn check_cast_for_escaping_regions(\n         cx.tcx.region_maps.is_subregion_of(r_sub, r_sup)\n     }\n }\n+"}, {"sha": "8b9a3c6bdae85fcc040f843c1b00ef9937b40a59", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -13,7 +13,7 @@\n // Language items are items that represent concepts intrinsic to the language\n // itself. Examples are:\n //\n-// * Traits that specify \"kinds\"; e.g. \"const\", \"copy\", \"owned\".\n+// * Traits that specify \"kinds\"; e.g. \"const\", \"copy\", \"send\".\n //\n // * Traits that represent operators; e.g. \"add\", \"sub\", \"index\".\n //\n@@ -33,9 +33,9 @@ use syntax::visit::visit_crate;\n use core::hashmap::HashMap;\n \n pub enum LangItem {\n-    ConstTraitLangItem,         // 0\n+    FreezeTraitLangItem,        // 0\n     CopyTraitLangItem,          // 1\n-    OwnedTraitLangItem,         // 2\n+    SendTraitLangItem,          // 2\n     SizedTraitLangItem,         // 3\n \n     DropTraitLangItem,          // 4\n@@ -101,7 +101,7 @@ impl LanguageItems {\n         match index {\n             0  => \"const\",\n             1  => \"copy\",\n-            2  => \"owned\",\n+            2  => \"send\",\n             3  => \"sized\",\n \n             4  => \"drop\",\n@@ -152,14 +152,14 @@ impl LanguageItems {\n \n     // FIXME #4621: Method macros sure would be nice here.\n \n-    pub fn const_trait(&const self) -> def_id {\n-        self.items[ConstTraitLangItem as uint].get()\n+    pub fn freeze_trait(&const self) -> def_id {\n+        self.items[FreezeTraitLangItem as uint].get()\n     }\n     pub fn copy_trait(&const self) -> def_id {\n         self.items[CopyTraitLangItem as uint].get()\n     }\n-    pub fn owned_trait(&const self) -> def_id {\n-        self.items[OwnedTraitLangItem as uint].get()\n+    pub fn send_trait(&const self) -> def_id {\n+        self.items[SendTraitLangItem as uint].get()\n     }\n     pub fn sized_trait(&const self) -> def_id {\n         self.items[SizedTraitLangItem as uint].get()\n@@ -291,13 +291,13 @@ struct LanguageItemCollector<'self> {\n }\n \n impl<'self> LanguageItemCollector<'self> {\n-\n-    pub fn new<'a>(crate: &'a crate, session: Session) -> LanguageItemCollector<'a> {\n+    pub fn new<'a>(crate: &'a crate, session: Session)\n+                   -> LanguageItemCollector<'a> {\n         let mut item_refs = HashMap::new();\n \n-        item_refs.insert(@\"const\", ConstTraitLangItem as uint);\n+        item_refs.insert(@\"const\", FreezeTraitLangItem as uint);\n         item_refs.insert(@\"copy\", CopyTraitLangItem as uint);\n-        item_refs.insert(@\"owned\", OwnedTraitLangItem as uint);\n+        item_refs.insert(@\"owned\", SendTraitLangItem as uint);\n         item_refs.insert(@\"sized\", SizedTraitLangItem as uint);\n \n         item_refs.insert(@\"drop\", DropTraitLangItem as uint);"}, {"sha": "001ace4e7dbe146dfe2a7273592536a52f4aeb57", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -686,7 +686,7 @@ pub type BuiltinBounds = EnumSet<BuiltinBound>;\n pub enum BuiltinBound {\n     BoundCopy,\n     BoundStatic,\n-    BoundOwned,\n+    BoundSend,\n     BoundConst,\n     BoundSized,\n }\n@@ -699,7 +699,7 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n     let mut set = EnumSet::empty();\n     set.add(BoundCopy);\n     set.add(BoundStatic);\n-    set.add(BoundOwned);\n+    set.add(BoundSend);\n     set.add(BoundConst);\n     set.add(BoundSized);\n     set\n@@ -1839,7 +1839,7 @@ impl TypeContents {\n             BoundCopy => self.is_copy(cx),\n             BoundStatic => self.is_static(cx),\n             BoundConst => self.is_const(cx),\n-            BoundOwned => self.is_owned(cx),\n+            BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n         }\n     }\n@@ -1865,12 +1865,12 @@ impl TypeContents {\n         TC_BORROWED_POINTER\n     }\n \n-    pub fn is_owned(&self, cx: ctxt) -> bool {\n-        !self.intersects(TypeContents::nonowned(cx))\n+    pub fn is_sendable(&self, cx: ctxt) -> bool {\n+        !self.intersects(TypeContents::nonsendable(cx))\n     }\n \n-    pub fn nonowned(_cx: ctxt) -> TypeContents {\n-        TC_MANAGED + TC_BORROWED_POINTER + TC_NON_OWNED\n+    pub fn nonsendable(_cx: ctxt) -> TypeContents {\n+        TC_MANAGED + TC_BORROWED_POINTER + TC_NON_SENDABLE\n     }\n \n     pub fn contains_managed(&self) -> bool {\n@@ -1912,8 +1912,8 @@ impl TypeContents {\n         self.intersects(tc)\n     }\n \n-    pub fn owned(_cx: ctxt) -> TypeContents {\n-        //! Any kind of owned contents.\n+    pub fn sendable(_cx: ctxt) -> TypeContents {\n+        //! Any kind of sendable contents.\n         TC_OWNED_POINTER + TC_OWNED_VEC\n     }\n }\n@@ -1969,8 +1969,8 @@ static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits: 0b0001_0000_0000};\n /// An enum with no variants.\n static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits: 0b0010_0000_0000};\n \n-/// Contains a type marked with `#[non_owned]`\n-static TC_NON_OWNED: TypeContents =        TypeContents{bits: 0b0100_0000_0000};\n+/// Contains a type marked with `#[non_sendable]`\n+static TC_NON_SENDABLE: TypeContents =     TypeContents{bits: 0b0100_0000_0000};\n \n /// Is a bare vector, str, function, trait, etc (only relevant at top level).\n static TC_DYNAMIC_SIZE: TypeContents =     TypeContents{bits: 0b1000_0000_0000};\n@@ -1986,8 +1986,8 @@ pub fn type_is_static(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_static(cx)\n }\n \n-pub fn type_is_owned(cx: ctxt, t: ty::t) -> bool {\n-    type_contents(cx, t).is_owned(cx)\n+pub fn type_is_sendable(cx: ctxt, t: ty::t) -> bool {\n+    type_contents(cx, t).is_sendable(cx)\n }\n \n pub fn type_is_const(cx: ctxt, t: ty::t) -> bool {\n@@ -2045,7 +2045,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let _i = indenter();\n \n         let result = match get(ty).sty {\n-            // Scalar and unique types are sendable, constant, and owned\n+            // Scalar and unique types are sendable, constant, and durable\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n             ty_bare_fn(_) | ty_ptr(_) => {\n                 TC_NONE\n@@ -2060,7 +2060,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_box(mt) => {\n-                TC_MANAGED + statically_sized(nonowned(tc_mt(cx, mt, cache)))\n+                TC_MANAGED +\n+                    statically_sized(nonsendable(tc_mt(cx, mt, cache)))\n             }\n \n             ty_trait(_, _, store, mutbl, bounds) => {\n@@ -2069,7 +2070,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_rptr(r, mt) => {\n                 borrowed_contents(r, mt.mutbl) +\n-                    statically_sized(nonowned(tc_mt(cx, mt, cache)))\n+                    statically_sized(nonsendable(tc_mt(cx, mt, cache)))\n             }\n \n             ty_uniq(mt) => {\n@@ -2081,12 +2082,13 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_evec(mt, vstore_box) => {\n-                TC_MANAGED + statically_sized(nonowned(tc_mt(cx, mt, cache)))\n+                TC_MANAGED +\n+                    statically_sized(nonsendable(tc_mt(cx, mt, cache)))\n             }\n \n             ty_evec(mt, vstore_slice(r)) => {\n                 borrowed_contents(r, mt.mutbl) +\n-                    statically_sized(nonowned(tc_mt(cx, mt, cache)))\n+                    statically_sized(nonsendable(tc_mt(cx, mt, cache)))\n             }\n \n             ty_evec(mt, vstore_fixed(_)) => {\n@@ -2205,8 +2207,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         if has_attr(cx, did, \"mutable\") {\n             tc += TC_MUTABLE;\n         }\n-        if has_attr(cx, did, \"non_owned\") {\n-            tc += TC_NON_OWNED;\n+        if has_attr(cx, did, \"non_sendable\") {\n+            tc += TC_NON_SENDABLE;\n         }\n         tc\n     }\n@@ -2227,7 +2229,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         mc + rc\n     }\n \n-    fn nonowned(pointee: TypeContents) -> TypeContents {\n+    fn nonsendable(pointee: TypeContents) -> TypeContents {\n         /*!\n          *\n          * Given a non-owning pointer to some type `T` with\n@@ -2314,7 +2316,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             tc = tc - match bound {\n                 BoundCopy => TypeContents::noncopyable(cx),\n                 BoundStatic => TypeContents::nonstatic(cx),\n-                BoundOwned => TypeContents::nonowned(cx),\n+                BoundSend => TypeContents::nonsendable(cx),\n                 BoundConst => TypeContents::nonconst(cx),\n                 // The dynamic-size bit can be removed at pointer-level, etc.\n                 BoundSized => TypeContents::dynamically_sized(cx),"}, {"sha": "0608d27cf6ce134311ca2a4315503b67e78acb73", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -753,7 +753,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt, ast_bounds: &Option<OptVec<ast::TyParamBou\n     //! Converts a list of bounds from the AST into a `BuiltinBounds`\n     //! struct. Reports an error if any of the bounds that appear\n     //! in the AST refer to general traits and not the built-in traits\n-    //! like `Copy` or `Owned`. Used to translate the bounds that\n+    //! like `Copy` or `Send`. Used to translate the bounds that\n     //! appear in closure and trait types, where only builtin bounds are\n     //! legal.\n     //! If no bounds were specified, we choose a \"default\" bound based on\n@@ -807,13 +807,13 @@ pub fn try_add_builtin_trait(tcx: ty::ctxt,\n                              trait_def_id: ast::def_id,\n                              builtin_bounds: &mut ty::BuiltinBounds) -> bool {\n     //! Checks whether `trait_ref` refers to one of the builtin\n-    //! traits, like `Copy` or `Owned`, and adds the corresponding\n+    //! traits, like `Copy` or `Send`, and adds the corresponding\n     //! bound to the set `builtin_bounds` if so. Returns true if `trait_ref`\n     //! is a builtin trait.\n \n     let li = &tcx.lang_items;\n-    if trait_def_id == li.owned_trait() {\n-        builtin_bounds.add(ty::BoundOwned);\n+    if trait_def_id == li.send_trait() {\n+        builtin_bounds.add(ty::BoundSend);\n         true\n     } else if trait_def_id == li.copy_trait() {\n         builtin_bounds.add(ty::BoundCopy);"}, {"sha": "559d478e7638eb610f3e9c7e94a4a97aa3f3e11e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -575,7 +575,7 @@ impl Repr for ty::ParamBounds {\n             res.push(match b {\n                 ty::BoundCopy => ~\"Copy\",\n                 ty::BoundStatic => ~\"'static\",\n-                ty::BoundOwned => ~\"Owned\",\n+                ty::BoundSend => ~\"Send\",\n                 ty::BoundConst => ~\"Const\",\n                 ty::BoundSized => ~\"Sized\",\n             });\n@@ -781,7 +781,7 @@ impl UserString for ty::BuiltinBound {\n         match *self {\n             ty::BoundCopy => ~\"Copy\",\n             ty::BoundStatic => ~\"'static\",\n-            ty::BoundOwned => ~\"Owned\",\n+            ty::BoundSend => ~\"Send\",\n             ty::BoundConst => ~\"Const\",\n             ty::BoundSized => ~\"Sized\",\n         }"}, {"sha": "123468cad88e18c6cb60f49c310d1d5b437a4594", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b91d5f94b352f953a8503a03af50d6d4aff3b/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=607b91d5f94b352f953a8503a03af50d6d4aff3b", "patch": "@@ -44,9 +44,16 @@ pub trait Copy {\n     // Empty.\n }\n \n+#[cfg(stage0)]\n #[lang=\"owned\"]\n pub trait Owned {\n-    // Empty.\n+    // empty.\n+}\n+\n+#[cfg(not(stage0))]\n+#[lang=\"send\"]\n+pub trait Owned {\n+    // empty.\n }\n \n #[lang=\"const\"]"}]}