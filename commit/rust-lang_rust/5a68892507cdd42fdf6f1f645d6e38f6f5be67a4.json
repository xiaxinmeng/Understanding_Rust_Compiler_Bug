{"sha": "5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjg4OTI1MDdjZGQ0MmZkZjZmMWY2NDVkNmUzOGY2ZjViZTY3YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T06:11:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-28T06:11:54Z"}, "message": "auto merge of #13108 : pongad/rust/lintraw, r=huonw\n\nFixes #13032", "tree": {"sha": "d0bd582228882eb843da9f656e705ba0f17de92f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bd582228882eb843da9f656e705ba0f17de92f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "html_url": "https://github.com/rust-lang/rust/commit/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a04ce286d782997bae35d6830cb6286fce3e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a04ce286d782997bae35d6830cb6286fce3e0e", "html_url": "https://github.com/rust-lang/rust/commit/22a04ce286d782997bae35d6830cb6286fce3e0e"}, {"sha": "5744556782d072076ba426627fd5594c3c9db174", "url": "https://api.github.com/repos/rust-lang/rust/commits/5744556782d072076ba426627fd5594c3c9db174", "html_url": "https://github.com/rust-lang/rust/commit/5744556782d072076ba426627fd5594c3c9db174"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "a0f52021b6e4a8c4339663038ca03d2235019b95", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "patch": "@@ -115,6 +115,8 @@ pub enum Lint {\n     DeprecatedOwnedVector,\n \n     Warnings,\n+\n+    RawPointerDeriving,\n }\n \n pub fn level_to_str(lv: level) -> &'static str {\n@@ -406,6 +408,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"use of a `~[T]` vector\",\n         default: allow,\n     }),\n+\n+    (\"raw_pointer_deriving\",\n+     LintSpec {\n+        lint: RawPointerDeriving,\n+        desc: \"uses of #[deriving] with raw pointers are rarely correct\",\n+        default: warn,\n+    }),\n ];\n \n /*\n@@ -959,6 +968,37 @@ fn check_heap_item(cx: &Context, it: &ast::Item) {\n     }\n }\n \n+struct RawPtrDerivingVisitor<'a> {\n+    cx: &'a Context<'a>\n+}\n+\n+impl<'a> Visitor<()> for RawPtrDerivingVisitor<'a> {\n+    fn visit_ty(&mut self, ty: &ast::Ty, _: ()) {\n+        static MSG: &'static str = \"use of `#[deriving]` with a raw pointer\";\n+        match ty.node {\n+            ast::TyPtr(..) => self.cx.span_lint(RawPointerDeriving, ty.span, MSG),\n+            _ => {}\n+        }\n+        visit::walk_ty(self, ty, ());\n+    }\n+    // explicit override to a no-op to reduce code bloat\n+    fn visit_expr(&mut self, _: &ast::Expr, _: ()) {}\n+    fn visit_block(&mut self, _: &ast::Block, _: ()) {}\n+}\n+\n+fn check_raw_ptr_deriving(cx: &Context, item: &ast::Item) {\n+    if !attr::contains_name(item.attrs.as_slice(), \"deriving\") {\n+        return\n+    }\n+    match item.node {\n+        ast::ItemStruct(..) | ast::ItemEnum(..) => {\n+            let mut visitor = RawPtrDerivingVisitor { cx: cx };\n+            visit::walk_item(&mut visitor, item, ());\n+        }\n+        _ => {}\n+    }\n+}\n+\n static crate_attrs: &'static [&'static str] = &[\n     \"crate_type\", \"feature\", \"no_start\", \"no_main\", \"no_std\", \"crate_id\",\n     \"desc\", \"comment\", \"license\", \"copyright\", // not used in rustc now\n@@ -1585,6 +1625,7 @@ impl<'a> Visitor<()> for Context<'a> {\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n             check_attrs_usage(cx, it.attrs.as_slice());\n+            check_raw_ptr_deriving(cx, it);\n \n             cx.visit_ids(|v| v.visit_item(it, ()));\n "}, {"sha": "7d6f44494cb13aa930e4ede04389b0ffb53693f1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "patch": "@@ -384,6 +384,7 @@ pub struct t_box_ {\n // alive, and using ty::get is unsafe when the ctxt is no longer alive.\n enum t_opaque {}\n \n+#[allow(raw_pointer_deriving)]\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct t { priv inner: *t_opaque }\n "}, {"sha": "f58ccf2d498a2243f3747aa6e1b0027aed568734", "filename": "src/test/compile-fail/lint-raw-ptr-deriving.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a68892507cdd42fdf6f1f645d6e38f6f5be67a4/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs?ref=5a68892507cdd42fdf6f1f645d6e38f6f5be67a4", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(struct_variant)];\n+#[allow(dead_code)];\n+#[deny(raw_pointer_deriving)];\n+\n+#[deriving(Clone)]\n+struct Foo {\n+    x: *int //~ ERROR use of `#[deriving]` with a raw pointer\n+}\n+\n+#[deriving(Clone)]\n+struct Bar(*mut int); //~ ERROR use of `#[deriving]` with a raw pointer\n+\n+#[deriving(Clone)]\n+enum Baz {\n+    A(*int), //~ ERROR use of `#[deriving]` with a raw pointer\n+    B { x: *mut int } //~ ERROR use of `#[deriving]` with a raw pointer\n+}\n+\n+#[deriving(Clone)]\n+struct Buzz {\n+    x: (*int, //~ ERROR use of `#[deriving]` with a raw pointer\n+        *uint) //~ ERROR use of `#[deriving]` with a raw pointer\n+}\n+\n+fn main() {}"}]}