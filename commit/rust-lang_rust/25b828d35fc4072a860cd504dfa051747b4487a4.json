{"sha": "25b828d35fc4072a860cd504dfa051747b4487a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YjgyOGQzNWZjNDA3MmE4NjBjZDUwNGRmYTA1MTc0N2I0NDg3YTQ=", "commit": {"author": {"name": "Kevin Stenerson", "email": "kstenerson@developers.wyyerd.com", "date": "2018-11-06T04:12:40Z"}, "committer": {"name": "Kevin Stenerson", "email": "kstenerson@developers.wyyerd.com", "date": "2018-11-06T04:12:40Z"}, "message": "Add config option to more aggressively allow overflow", "tree": {"sha": "5fea3443eea16f379e622d50dc72fc10f8866158", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fea3443eea16f379e622d50dc72fc10f8866158"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b828d35fc4072a860cd504dfa051747b4487a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b828d35fc4072a860cd504dfa051747b4487a4", "html_url": "https://github.com/rust-lang/rust/commit/25b828d35fc4072a860cd504dfa051747b4487a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b828d35fc4072a860cd504dfa051747b4487a4/comments", "author": {"login": "kestred", "id": 2653498, "node_id": "MDQ6VXNlcjI2NTM0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2653498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kestred", "html_url": "https://github.com/kestred", "followers_url": "https://api.github.com/users/kestred/followers", "following_url": "https://api.github.com/users/kestred/following{/other_user}", "gists_url": "https://api.github.com/users/kestred/gists{/gist_id}", "starred_url": "https://api.github.com/users/kestred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kestred/subscriptions", "organizations_url": "https://api.github.com/users/kestred/orgs", "repos_url": "https://api.github.com/users/kestred/repos", "events_url": "https://api.github.com/users/kestred/events{/privacy}", "received_events_url": "https://api.github.com/users/kestred/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kestred", "id": 2653498, "node_id": "MDQ6VXNlcjI2NTM0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2653498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kestred", "html_url": "https://github.com/kestred", "followers_url": "https://api.github.com/users/kestred/followers", "following_url": "https://api.github.com/users/kestred/following{/other_user}", "gists_url": "https://api.github.com/users/kestred/gists{/gist_id}", "starred_url": "https://api.github.com/users/kestred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kestred/subscriptions", "organizations_url": "https://api.github.com/users/kestred/orgs", "repos_url": "https://api.github.com/users/kestred/repos", "events_url": "https://api.github.com/users/kestred/events{/privacy}", "received_events_url": "https://api.github.com/users/kestred/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d5f507b63da32783bc920a33e39580d35e492a", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d5f507b63da32783bc920a33e39580d35e492a", "html_url": "https://github.com/rust-lang/rust/commit/16d5f507b63da32783bc920a33e39580d35e492a"}], "stats": {"total": 230, "additions": 222, "deletions": 8}, "files": [{"sha": "84d94fada7768523c3ff7eabb32107e44e15e183", "filename": "src/config/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=25b828d35fc4072a860cd504dfa051747b4487a4", "patch": "@@ -88,8 +88,10 @@ create_config! {\n     // Misc.\n     remove_nested_parens: bool, true, true, \"Remove nested parens\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n-    struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n-                                             threshold\";\n+    overflow_delimited_expr: bool, false, false,\n+        \"Allow trailing bracket/brace delimited expressions to overflow\";\n+    struct_field_align_threshold: usize, 0, false,\n+        \"Align struct fields if their diffs fits within threshold\";\n     enum_discrim_align_threshold: usize, 0, false,\n         \"Align enum variants discrims, if their diffs fit within threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\"}, {"sha": "502c42ff213fa27895de0d709aaebc78a8dc7e7c", "filename": "src/expr.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=25b828d35fc4072a860cd504dfa051747b4487a4", "patch": "@@ -1343,12 +1343,31 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n         ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n             context.use_block_indent() || context.config.indent_style() == IndentStyle::Visual\n         }\n-        ast::ExprKind::Array(..)\n-        | ast::ExprKind::Call(..)\n-        | ast::ExprKind::Mac(..)\n-        | ast::ExprKind::MethodCall(..)\n-        | ast::ExprKind::Struct(..)\n-        | ast::ExprKind::Tup(..) => context.use_block_indent() && args_len == 1,\n+\n+        // Handle `[]` and `{}`-like expressions\n+        ast::ExprKind::Array(..) | ast::ExprKind::Struct(..) => {\n+            if context.config.overflow_delimited_expr() {\n+                context.use_block_indent() || context.config.indent_style() == IndentStyle::Visual\n+            } else {\n+                context.use_block_indent() && args_len == 1\n+            }\n+        }\n+        ast::ExprKind::Mac(ref macro_) => {\n+            match (macro_.node.delim, context.config.overflow_delimited_expr()) {\n+                (ast::MacDelimiter::Bracket, true) | (ast::MacDelimiter::Brace, true) => {\n+                    context.use_block_indent()\n+                        || context.config.indent_style() == IndentStyle::Visual\n+                }\n+                _ => context.use_block_indent() && args_len == 1,\n+            }\n+        }\n+\n+        // Handle parenthetical expressions\n+        ast::ExprKind::Call(..) | ast::ExprKind::MethodCall(..) | ast::ExprKind::Tup(..) => {\n+            context.use_block_indent() && args_len == 1\n+        }\n+\n+        // Handle unary-like expressions\n         ast::ExprKind::AddrOf(_, ref expr)\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)"}, {"sha": "4a583fc1de838773582e434dbe6b292cb1e3ffcd", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b828d35fc4072a860cd504dfa051747b4487a4/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=25b828d35fc4072a860cd504dfa051747b4487a4", "patch": "@@ -404,6 +404,7 @@ impl<'a> Context<'a> {\n                             closures::rewrite_last_closure(self.context, expr, shape)\n                         }\n                     }\n+\n                     // When overflowing the expressions which consists of a control flow\n                     // expression, avoid condition to use multi line.\n                     ast::ExprKind::If(..)\n@@ -422,6 +423,7 @@ impl<'a> Context<'a> {\n                             expr.rewrite(self.context, shape)\n                         }\n                     }\n+\n                     _ => expr.rewrite(self.context, shape),\n                 }\n             }"}, {"sha": "5a3d1671f2c2b12fd4ccfaf53ba3893efb5242e0", "filename": "tests/source/expr-overflow-delimited.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/25b828d35fc4072a860cd504dfa051747b4487a4/tests%2Fsource%2Fexpr-overflow-delimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b828d35fc4072a860cd504dfa051747b4487a4/tests%2Fsource%2Fexpr-overflow-delimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-overflow-delimited.rs?ref=25b828d35fc4072a860cd504dfa051747b4487a4", "patch": "@@ -0,0 +1,111 @@\n+// rustfmt-overflow_delimited_expr: true\n+\n+fn combine_blocklike() {\n+    do_thing(\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    do_thing(\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        &[\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        vec![\n+            value_with_longer_name,\n+            value2_with_longer_name,\n+            value3_with_longer_name,\n+            value4_with_longer_name,\n+        ],\n+    );\n+\n+    do_thing(\n+        x,\n+        (\n+            1,\n+            2,\n+            3,\n+            |param| {\n+                action();\n+                foo(param)\n+            },\n+        ),\n+    );\n+}\n+\n+fn combine_struct_sample() {\n+    let identity = verify(\n+        &ctx,\n+        VerifyLogin {\n+            type_: LoginType::Username,\n+            username: args.username.clone(),\n+            password: Some(args.password.clone()),\n+            domain: None,\n+        },\n+    )?;\n+}\n+\n+fn combine_macro_sample() {\n+    rocket::ignite()\n+        .mount(\n+            \"/\",\n+            routes![\n+                http::auth::login,\n+                http::auth::logout,\n+                http::cors::options,\n+                http::action::dance,\n+                http::action::sleep,\n+            ],\n+        )\n+        .launch();\n+}"}, {"sha": "440b149997eaea63bdf4d22bda465569b2fc12a9", "filename": "tests/target/expr-overflow-delimited.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/25b828d35fc4072a860cd504dfa051747b4487a4/tests%2Ftarget%2Fexpr-overflow-delimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b828d35fc4072a860cd504dfa051747b4487a4/tests%2Ftarget%2Fexpr-overflow-delimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-overflow-delimited.rs?ref=25b828d35fc4072a860cd504dfa051747b4487a4", "patch": "@@ -0,0 +1,80 @@\n+// rustfmt-overflow_delimited_expr: true\n+\n+fn combine_blocklike() {\n+    do_thing(|param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    do_thing(x, |param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    do_thing(Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    do_thing(x, Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    do_thing(&[\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(x, &[\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(vec![\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(x, vec![\n+        value_with_longer_name,\n+        value2_with_longer_name,\n+        value3_with_longer_name,\n+        value4_with_longer_name,\n+    ]);\n+\n+    do_thing(\n+        x,\n+        (1, 2, 3, |param| {\n+            action();\n+            foo(param)\n+        }),\n+    );\n+}\n+\n+fn combine_struct_sample() {\n+    let identity = verify(&ctx, VerifyLogin {\n+        type_: LoginType::Username,\n+        username: args.username.clone(),\n+        password: Some(args.password.clone()),\n+        domain: None,\n+    })?;\n+}\n+\n+fn combine_macro_sample() {\n+    rocket::ignite()\n+        .mount(\"/\", routes![\n+            http::auth::login,\n+            http::auth::logout,\n+            http::cors::options,\n+            http::action::dance,\n+            http::action::sleep,\n+        ])\n+        .launch();\n+}"}]}