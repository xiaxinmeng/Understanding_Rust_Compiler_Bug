{"sha": "eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViM2ZmZTZlZDI5OTllOWQzMzg1YmUwZmY5ODFlMzAwODJlYTBkMmM=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-23T06:51:05Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "make use of macros in operator overloading", "tree": {"sha": "58d3e229f534a24d5400f5537b7b51d16927a449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d3e229f534a24d5400f5537b7b51d16927a449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c", "html_url": "https://github.com/rust-lang/rust/commit/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ea4a972500a8ddecfc737d51eec960324dcb02f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea4a972500a8ddecfc737d51eec960324dcb02f", "html_url": "https://github.com/rust-lang/rust/commit/4ea4a972500a8ddecfc737d51eec960324dcb02f"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "aada4122e78a40d68f639b17170008902ab25217", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=eb3ffe6ed2999e9d3385be0ff981e30082ea0d2c", "patch": "@@ -13,6 +13,7 @@ use rustc_span::{BytePos, Pos};\n use std::borrow::Cow;\n use std::convert::TryInto;\n use std::fmt::Display;\n+use std::ops::{Add, Sub, Not};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -307,49 +308,53 @@ impl<'a> Sugg<'a> {\n     }\n }\n \n-impl std::ops::Add for Sugg<'_> {\n-    type Output = Sugg<'static>;\n-    fn add(self, rhs: Sugg<'_>) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::Add, &self, &rhs)\n-    }\n-}\n+// Copied from the rust standart library, and then edited\n+macro_rules! forward_binop_impls_to_ref {\n+    (impl $imp:ident, $method:ident for $t:ty, type Output = $o:ty) => {\n+        impl $imp<$t> for &$t {\n+            type Output = $o;\n \n-impl std::ops::Sub for Sugg<'_> {\n-    type Output = Sugg<'static>;\n-    fn sub(self, rhs: Sugg<'_>) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::Sub, &self, &rhs)\n-    }\n-}\n+            fn $method(self, other: $t) -> $o {\n+                $imp::$method(self, &other)\n+            }\n+        }\n \n-impl std::ops::Add<&Sugg<'_>> for Sugg<'_> {\n-    type Output = Sugg<'static>;\n-    fn add(self, rhs: &Sugg<'_>) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::Add, &self, rhs)\n-    }\n-}\n+        impl $imp<&$t> for $t {\n+            type Output = $o;\n \n-impl std::ops::Sub<&Sugg<'_>> for Sugg<'_> {\n-    type Output = Sugg<'static>;\n-    fn sub(self, rhs: &Sugg<'_>) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::Sub, &self, rhs)\n+            fn $method(self, other: &$t) -> $o {\n+                $imp::$method(&self, other)\n+            }\n+        }\n+\n+        impl $imp for $t {\n+            type Output = $o;\n+\n+            fn $method(self, other: $t) -> $o {\n+                $imp::$method(&self, &other)\n+            }\n+        }\n     }\n }\n \n-impl std::ops::Add for &Sugg<'_> {\n+impl Add for &Sugg<'_> {\n     type Output = Sugg<'static>;\n     fn add(self, rhs: &Sugg<'_>) -> Sugg<'static> {\n         make_binop(ast::BinOpKind::Add, self, rhs)\n     }\n }\n \n-impl std::ops::Sub for &Sugg<'_> {\n+impl Sub for &Sugg<'_> {\n     type Output = Sugg<'static>;\n     fn sub(self, rhs: &Sugg<'_>) -> Sugg<'static> {\n         make_binop(ast::BinOpKind::Sub, self, rhs)\n     }\n }\n \n-impl std::ops::Not for Sugg<'_> {\n+forward_binop_impls_to_ref!(impl Add, add for Sugg<'_>, type Output = Sugg<'static>);\n+forward_binop_impls_to_ref!(impl Sub, sub for Sugg<'_>, type Output = Sugg<'static>);\n+\n+impl Not for Sugg<'_> {\n     type Output = Sugg<'static>;\n     fn not(self) -> Sugg<'static> {\n         make_unop(\"!\", self)"}]}