{"sha": "9521551b4710805674ad6c1755bef4e76784db02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjE1NTFiNDcxMDgwNTY3NGFkNmMxNzU1YmVmNGU3Njc4NGRiMDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-24T19:44:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T19:04:39Z"}, "message": "librustc: Fix merge fallout.", "tree": {"sha": "26dc6ae8869940156bb98878eb5d1787d4b8f251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26dc6ae8869940156bb98878eb5d1787d4b8f251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9521551b4710805674ad6c1755bef4e76784db02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9521551b4710805674ad6c1755bef4e76784db02", "html_url": "https://github.com/rust-lang/rust/commit/9521551b4710805674ad6c1755bef4e76784db02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9521551b4710805674ad6c1755bef4e76784db02/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "151b7ed52d76a11a39888931056f1bcc9c45807a", "url": "https://api.github.com/repos/rust-lang/rust/commits/151b7ed52d76a11a39888931056f1bcc9c45807a", "html_url": "https://github.com/rust-lang/rust/commit/151b7ed52d76a11a39888931056f1bcc9c45807a"}], "stats": {"total": 102, "additions": 43, "deletions": 59}, "files": [{"sha": "8dcf0a919d37fc87d780a7b881de8d3a7e895810", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1983,7 +1983,7 @@ mod tests {\n     }\n     fn check_err<T: Decodable<Decoder>>(to_parse: &'static str, expected_error: &str) {\n         use std::task;\n-        let res = task::try(|| {\n+        let res = do task::try {\n             // either fails in `decode` (which is what we want), or\n             // returns Some(error_message)/None if the string was\n             // invalid or valid JSON.\n@@ -1994,7 +1994,7 @@ mod tests {\n                     None\n                 }\n             }\n-        });\n+        };\n         match res {\n             Ok(Some(parse_error)) => fail!(\"`{}` is not valid json: {}\",\n                                            to_parse, parse_error),"}, {"sha": "6167a4293806f8c8fa3ec94c8162fd47d61386e8", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -230,12 +230,8 @@ impl<'self> Condvar<'self> {\n             }).finally(|| {\n                 // Reacquire the condvar.\n                 match self.order {\n-                    Just(lock) => do lock.access {\n-                        self.sem.acquire();\n-                    },\n-                    Nothing => {\n-                        self.sem.acquire();\n-                    },\n+                    Just(lock) => lock.access(|| self.sem.acquire()),\n+                    Nothing => self.sem.acquire(),\n                 }\n             })\n         })"}, {"sha": "1352bfd424f680e3c79277c947324e6bbbc28cb9", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -969,9 +969,9 @@ mod tests {\n             // Windows does not understand \"America/Los_Angeles\".\n             // PST+08 may look wrong, but not! \"PST\" indicates\n             // the name of timezone. \"+08\" means UTC = local + 08.\n-            do \"TZ=PST+08\".with_c_str |env| {\n+            \"TZ=PST+08\".with_c_str(|env| {\n                 _putenv(env);\n-            }\n+            })\n         }\n         tzset();\n     }"}, {"sha": "38b7bc0875bfc82653abd4c35c752fd6540fee37", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1204,17 +1204,17 @@ impl<'self> Visitor<()> for Context<'self> {\n     }\n \n     fn visit_foreign_item(&mut self, it: @ast::foreign_item, _: ()) {\n-        do self.with_lint_attrs(it.attrs) |cx| {\n+        self.with_lint_attrs(it.attrs, |cx| {\n             check_attrs_usage(cx, it.attrs);\n             visit::walk_foreign_item(cx, it, ());\n-        }\n+        })\n     }\n \n     fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n-        do self.with_lint_attrs(i.attrs) |cx| {\n+        self.with_lint_attrs(i.attrs, |cx| {\n             check_attrs_usage(cx, i.attrs);\n             visit::walk_view_item(cx, i, ());\n-        }\n+        })\n     }\n \n     fn visit_pat(&mut self, p: &ast::Pat, _: ()) {"}, {"sha": "c2a21905be6d54c0a82c0fea2e6f9c93b040ac3b", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -232,10 +232,10 @@ impl<'self> Visitor<()> for EmbargoVisitor<'self> {\n                     _ => true,\n                 };\n                 let tr = ty::impl_trait_ref(self.tcx, local_def(item.id));\n-                let public_trait = do tr.map_default(false) |tr| {\n+                let public_trait = tr.map_default(false, |tr| {\n                     !is_local(tr.def_id) ||\n                      self.exported_items.contains(&tr.def_id.node)\n-                };\n+                });\n \n                 if public_ty || public_trait {\n                     for method in methods.iter() {"}, {"sha": "122f80a52f1cad06af724b56b178e709859d7853", "filename": "src/librustpkg/testsuite/pass/src/c-dependencies/pkg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftestsuite%2Fpass%2Fsrc%2Fc-dependencies%2Fpkg.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -50,7 +50,7 @@ pub fn main() {\n         prep.declare_input(\"file\",\n                            foo_c_name.as_str().unwrap().to_owned(),\n                            digest_file_with_date(&foo_c_name));\n-        let out_path = prep.exec(|exec| {\n+        let out_path = do prep.exec |exec| {\n             let out_path = api::build_library_in_workspace(exec,\n                                                            &mut sub_cx.clone(),\n                                                            \"cdep\",\n@@ -60,7 +60,7 @@ pub fn main() {\n                                                            \"foo\");\n             let out_p = Path::new(out_path);\n             out_p.as_str().unwrap().to_owned()\n-        });\n+        };\n         out_path\n     });\n     let out_lib_path = Path::new(out_lib_path);"}, {"sha": "7fb665b858fd77f6d1b435a90b4569941a871e73", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -186,9 +186,9 @@ impl TcpWatcher {\n                 0 => {\n                     req.defuse(); // uv callback now owns this request\n                     let mut cx = Ctx { status: 0, task: None };\n-                    do wait_until_woken_after(&mut cx.task) {\n+                    wait_until_woken_after(&mut cx.task, || {\n                         req.set_data(&cx);\n-                    }\n+                    });\n                     match cx.status {\n                         0 => Ok(()),\n                         n => Err(UvError(n)),"}, {"sha": "f2beea992c67a13d430c90ec41eaf3668ce00c26", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -168,28 +168,6 @@ impl<T> Drop for Rc<T> {\n     }\n }\n \n-impl<T> Clone for RcMut<T> {\n-    /// Return a shallow copy of the reference counted pointer.\n-    #[inline]\n-    fn clone(&self) -> RcMut<T> {\n-        unsafe {\n-            (*self.ptr).count += 1;\n-            RcMut{ptr: self.ptr}\n-        }\n-    }\n-}\n-\n-impl<T: DeepClone> DeepClone for RcMut<T> {\n-    /// Return a deep copy of the reference counted pointer.\n-    #[inline]\n-    fn deep_clone(&self) -> RcMut<T> {\n-        self.with_borrow(|x| {\n-            // FIXME: #6497: should avoid freeze (slow)\n-            unsafe { RcMut::new_unchecked(x.deep_clone()) }\n-        })\n-    }\n-}\n-\n #[cfg(test)]\n mod test_rc {\n     use super::*;"}, {"sha": "43e8096a8b113a6aa34640e3591865178fc39f9f", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -150,14 +150,14 @@ mod imp {\n             assert!(take() == Some(expected.clone()));\n             assert!(take() == None);\n \n-            do (|| {\n-            }).finally {\n+            (|| {\n+            }).finally(|| {\n                 // Restore the actual global state.\n                 match saved_value {\n                     Some(ref args) => put(args.clone()),\n                     None => ()\n                 }\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "06743bce9bf49a3293ac5ac46876a9cf910dcb31", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -990,11 +990,11 @@ mod test {\n     #[test]\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n-        run_in_newsched_task(|| {\n+        do run_in_newsched_task {\n             let (port, chan) = stream();\n             10000.times(|| { chan.send(()) });\n             10000.times(|| { port.recv() });\n-        })\n+        }\n     }\n \n     #[test]"}, {"sha": "43f1c3c529671281f0c8bba088589365d024b935", "filename": "src/libstd/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -76,7 +76,7 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n \n             let c = Cell::new(c.take());\n             do sched.event_loop.callback { c.take().send_deferred(()) }\n-        }\n+        })\n     }).finally(|| {\n         // Unkillable is necessary not because getting killed is dangerous here,\n         // but to force the recv not to use the same kill-flag that we used for"}, {"sha": "03745c2c3485bdf00bda9d100e1109dcb4542d42", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -135,7 +135,7 @@ impl<T: Send> UnsafeArc<T> {\n     /// block; otherwise, an unwrapping task can be killed by linked failure.\n     pub fn unwrap(self) -> T {\n         unsafe {\n-            let mut this = this;\n+            let mut this = self;\n             // The ~ dtor needs to run if this code succeeds.\n             let mut data: ~ArcData<T> = cast::transmute(this.data);\n             // Set up the unwrap protocol.\n@@ -192,7 +192,7 @@ impl<T: Send> UnsafeArc<T> {\n                 cast::forget(data);\n                 fail!(\"Another task is already unwrapping this Arc!\");\n             }\n-        })\n+        }\n     }\n \n     /// As unwrap above, but without blocking. Returns 'UnsafeArcSelf(self)' if this is"}, {"sha": "1d562d648499c4e66da2adde15bdadcf1e2dc174", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -863,11 +863,11 @@ pub trait ImmutableVector<'self, T> {\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`, limited to splitting\n     /// at most `n` times.\n-    fn splitn(self, n: uint, pred: |&T| -> bool) -> SplitIterator<'self, T>;\n+    fn splitn(self, n: uint, pred: 'self |&T| -> bool) -> SplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`. This starts at the\n     /// end of the vector and works backwards.\n-    fn rsplit(self, pred: |&T| -> bool) -> RSplitIterator<'self, T>;\n+    fn rsplit(self, pred: 'self |&T| -> bool) -> RSplitIterator<'self, T>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred` limited to splitting\n     /// at most `n` times. This starts at the end of the vector and"}, {"sha": "57205ca2c583df7324fd77bc11cd7eff169f546c", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "da25f1e82eebb77c310afd6221cec7b7f8a2ee3e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -37,9 +37,9 @@ fn fib(n: int) -> int {\n             let (pp, cc) = stream();\n             let cc = SharedChan::new(cc);\n             let ch = cc.clone();\n-            task::spawn(|| pfib(&ch, n - 1) );\n+            task::spawn(proc() pfib(&ch, n - 1));\n             let ch = cc.clone();\n-            task::spawn(|| pfib(&ch, n - 2) );\n+            task::spawn(proc() pfib(&ch, n - 2));\n             c.send(pp.recv() + pp.recv());\n         }\n     }"}, {"sha": "e322aceb5e6619d6163f650da1be5af334f7370c", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -15,7 +15,7 @@ use std::uint;\n fn f(n: uint) {\n     let mut i = 0u;\n     while i < n {\n-        task::try(|| g() );\n+        task::try(proc() g());\n         i += 1u;\n     }\n }"}, {"sha": "2c732f9f8501f96606bba8c679b4f67f5aeb6d7c", "filename": "src/test/debug-info/lexical-scope-in-unique-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-unique-closure.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -51,7 +51,7 @@ fn main() {\n     zzz();\n     sentinel();\n \n-    let unique_closure: proc(int) = |x| {\n+    let unique_closure: proc(int) = proc(x) {\n         zzz();\n         sentinel();\n "}, {"sha": "82618aa1f137c7bf23637793b751c7b793e40099", "filename": "src/test/debug-info/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvar-captured-in-sendable-closure.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -39,7 +39,7 @@ fn main() {\n \n     let owned = ~5;\n \n-    let closure: proc() = || {\n+    let closure: proc() = proc() {\n         zzz();\n         do_something(&constant, &a_struct.a, owned);\n     };"}, {"sha": "78658a4c12169db5709fcdefc9dd14c3c5ed4f97", "filename": "src/test/pretty/disamb-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -16,5 +16,5 @@\n \n fn id(f: || -> int) -> int { f() }\n \n-fn wsucc(_n: int) -> int { (do id || { 1 }) - 0 }\n+fn wsucc(_n: int) -> int { id(|| { 1 }) - 0 }\n fn main() { }"}, {"sha": "cd7a5b29a8af1eef189c8604220e33efad5a995e", "filename": "src/test/pretty/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fpretty%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Fpretty%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdo1.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -12,4 +12,4 @@\n \n fn f(f: |int|) { f(10) }\n \n-fn main() { do f |i| { assert!(i == 10) } }\n+fn main() { f(|i| { assert!(i == 10) }) }"}, {"sha": "1caf5c033763f510d7a155641e10ba551c668556", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "2b8180be00e2edd1466a387e3e7442b6aad73eab", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "2acaf54f05f437584a216752a459e0b861d69a1c", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "4400b03e31324ccc4ac7eae96435cefbbd81c025", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9521551b4710805674ad6c1755bef4e76784db02/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=9521551b4710805674ad6c1755bef4e76784db02", "patch": "@@ -1,3 +1,5 @@\n+// xfail-pretty\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}