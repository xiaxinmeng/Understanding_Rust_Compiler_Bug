{"sha": "f5a4837df0885368352d118e1e71f4853bf55bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTQ4MzdkZjA4ODUzNjgzNTJkMTE4ZTFlNzFmNDg1M2JmNTViZjg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-03T11:28:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-03T20:42:32Z"}, "message": "std: override clone_from for Vec.\n\nA vector can reuse its allocation (and the allocations/resources of any\ncontained values) when cloning into an already-instantiated vector, so\nwe might as well do so.", "tree": {"sha": "782fff3828b54a74c2ec885379414b350e951c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/782fff3828b54a74c2ec885379414b350e951c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a4837df0885368352d118e1e71f4853bf55bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a4837df0885368352d118e1e71f4853bf55bf8", "html_url": "https://github.com/rust-lang/rust/commit/f5a4837df0885368352d118e1e71f4853bf55bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a4837df0885368352d118e1e71f4853bf55bf8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd6f2ce0b650ebcb1d2b05dc501a9ed4907b6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd6f2ce0b650ebcb1d2b05dc501a9ed4907b6d2", "html_url": "https://github.com/rust-lang/rust/commit/0bd6f2ce0b650ebcb1d2b05dc501a9ed4907b6d2"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "7971c332b273dae5af2efc89a859fe76f03c9c6f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a4837df0885368352d118e1e71f4853bf55bf8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a4837df0885368352d118e1e71f4853bf55bf8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f5a4837df0885368352d118e1e71f4853bf55bf8", "patch": "@@ -232,4 +232,5 @@ mod std {\n     pub use to_str;\n     pub use ty;\n     pub use unstable;\n+    pub use vec;\n }"}, {"sha": "e414ff25d433539eb419d3e556883f17d3e3c71e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f5a4837df0885368352d118e1e71f4853bf55bf8/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a4837df0885368352d118e1e71f4853bf55bf8/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f5a4837df0885368352d118e1e71f4853bf55bf8", "patch": "@@ -310,11 +310,24 @@ impl<T: Clone> Vec<T> {\n \n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n-        let mut vector = Vec::with_capacity(self.len());\n-        for element in self.iter() {\n-            vector.push((*element).clone())\n+        self.iter().map(|x| x.clone()).collect()\n+    }\n+\n+    fn clone_from(&mut self, other: &Vec<T>) {\n+        // drop anything in self that will not be overwritten\n+        if self.len() > other.len() {\n+            self.truncate(other.len())\n         }\n-        vector\n+\n+        // reuse the contained values' allocations/resources.\n+        for (place, thing) in self.mut_iter().zip(other.iter()) {\n+            place.clone_from(thing)\n+        }\n+\n+        // self.len <= other.len due to the truncate above, so the\n+        // slice here is always in-bounds.\n+        let len = self.len();\n+        self.extend(other.slice_from(len).iter().map(|x| x.clone()));\n     }\n }\n \n@@ -1475,4 +1488,39 @@ mod tests {\n \n         assert!(values == Vec::from_slice([2u8, 3, 5, 6, 7]));\n     }\n+\n+    #[test]\n+    fn test_clone() {\n+        let v: Vec<int> = vec!();\n+        let w = vec!(1, 2, 3);\n+\n+        assert_eq!(v, v.clone());\n+\n+        let z = w.clone();\n+        assert_eq!(w, z);\n+        // they should be disjoint in memory.\n+        assert!(w.as_ptr() != z.as_ptr())\n+    }\n+\n+    #[test]\n+    fn test_clone_from() {\n+        let mut v = vec!();\n+        let three = vec!(~1, ~2, ~3);\n+        let two = vec!(~4, ~5);\n+        // zero, long\n+        v.clone_from(&three);\n+        assert_eq!(v, three);\n+\n+        // equal\n+        v.clone_from(&three);\n+        assert_eq!(v, three);\n+\n+        // long, short\n+        v.clone_from(&two);\n+        assert_eq!(v, two);\n+\n+        // short, long\n+        v.clone_from(&three);\n+        assert_eq!(v, three)\n+    }\n }"}]}