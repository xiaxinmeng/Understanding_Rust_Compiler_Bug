{"sha": "ff1cb7d9f7fc213666814c7299505e181dcdddbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMWNiN2Q5ZjdmYzIxMzY2NjgxNGM3Mjk5NTA1ZTE4MWRjZGRkYmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-07T02:53:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-07T02:53:26Z"}, "message": "Merge pull request #2901 from topecongiro/issue-2760\n\nUse custom path value if one exists when searching modules", "tree": {"sha": "7901e031dd2105e86188ffed6423d5bd1634da2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7901e031dd2105e86188ffed6423d5bd1634da2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff1cb7d9f7fc213666814c7299505e181dcdddbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbaQmnCRBK7hj4Ov3rIwAAdHIIAIhujRUxV2FXxrXZovETKr42\nu/CdX3stoapNsH9YRkkO+XksWXkrsL0/FZo4UAAhyTGofr+ShlvjZ1M7ADwJxVQp\nRZLu6RylSlYkG2WWKdx2D/SYlz82nWQZYx0ux5qtkSS2SXCnYTjMymahdQUBeNSc\n7v/vGzgL+qX7yxFtA9VZ3JIGKwkNnitq6j3/7/r1TXW6lbWPTtA8f/RxnJbiFjIM\nKOXQ49HzgSX/wYtRnGa4UaYw4llPpdOQhkaiaDxIWbJt6Pr7Jzx/C2kaf3L/jHJw\nnoilGWMyHwlr1qOabJz/YmDGZJu/PrBiOWCkdaElA8v29ql9cD3zz/2n+4+wsSQ=\n=5HnC\n-----END PGP SIGNATURE-----\n", "payload": "tree 7901e031dd2105e86188ffed6423d5bd1634da2f\nparent 5c9a2b6c13d3b6f8d3f9c02b130bb4b54fd489fb\nparent a201d856d10913b887f259c5302d4f5dfcebf6a9\nauthor Nick Cameron <nrc@ncameron.org> 1533610406 +1200\ncommitter GitHub <noreply@github.com> 1533610406 +1200\n\nMerge pull request #2901 from topecongiro/issue-2760\n\nUse custom path value if one exists when searching modules"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1cb7d9f7fc213666814c7299505e181dcdddbf", "html_url": "https://github.com/rust-lang/rust/commit/ff1cb7d9f7fc213666814c7299505e181dcdddbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff1cb7d9f7fc213666814c7299505e181dcdddbf/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9a2b6c13d3b6f8d3f9c02b130bb4b54fd489fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9a2b6c13d3b6f8d3f9c02b130bb4b54fd489fb", "html_url": "https://github.com/rust-lang/rust/commit/5c9a2b6c13d3b6f8d3f9c02b130bb4b54fd489fb"}, {"sha": "a201d856d10913b887f259c5302d4f5dfcebf6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a201d856d10913b887f259c5302d4f5dfcebf6a9", "html_url": "https://github.com/rust-lang/rust/commit/a201d856d10913b887f259c5302d4f5dfcebf6a9"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "7619c0afa57a4f69fd8d7ff80014d8039eecd906", "filename": "src/modules.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff1cb7d9f7fc213666814c7299505e181dcdddbf/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1cb7d9f7fc213666814c7299505e181dcdddbf/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=ff1cb7d9f7fc213666814c7299505e181dcdddbf", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::codemap;\n use syntax::parse::{parser, DirectoryOwnership};\n+use syntax_pos::symbol::Symbol;\n \n use config::FileName;\n use utils::contains_skip;\n@@ -38,6 +39,21 @@ pub fn list_files<'a>(\n     Ok(result)\n }\n \n+fn path_value(attr: &ast::Attribute) -> Option<Symbol> {\n+    if attr.name() == \"path\" {\n+        attr.value_str()\n+    } else {\n+        None\n+    }\n+}\n+\n+// N.B. Even when there are multiple `#[path = ...]` attributes, we just need to\n+// examine the first one, since rustc ignores the second and the subsequent ones\n+// as unused attributes.\n+fn find_path_value(attrs: &[ast::Attribute]) -> Option<Symbol> {\n+    attrs.iter().flat_map(path_value).next()\n+}\n+\n /// Recursively list all external modules included in a module.\n fn list_submodules<'a>(\n     module: &'a ast::Mod,\n@@ -53,7 +69,11 @@ fn list_submodules<'a>(\n                 let is_internal =\n                     codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n                 let (dir_path, relative) = if is_internal {\n-                    (search_dir.join(&item.ident.to_string()), None)\n+                    if let Some(path) = find_path_value(&item.attrs) {\n+                        (search_dir.join(&path.as_str()), None)\n+                    } else {\n+                        (search_dir.join(&item.ident.to_string()), None)\n+                    }\n                 } else {\n                     let (mod_path, relative) =\n                         module_file(item.ident, &item.attrs, search_dir, relative, codemap)?;"}]}