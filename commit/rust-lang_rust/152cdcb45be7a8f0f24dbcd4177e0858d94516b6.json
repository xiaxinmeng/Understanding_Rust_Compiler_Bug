{"sha": "152cdcb45be7a8f0f24dbcd4177e0858d94516b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MmNkY2I0NWJlN2E4ZjBmMjRkYmNkNDE3N2UwODU4ZDk0NTE2YjY=", "commit": {"author": {"name": "Glenn Hope", "email": "glenn.alexander.hope@gmail.com", "date": "2020-05-09T01:22:27Z"}, "committer": {"name": "Glenn Hope", "email": "glenn.alexander.hope@gmail.com", "date": "2020-05-09T18:09:38Z"}, "message": "Remove unnecessary field, check for Mod/Fn ItemKind", "tree": {"sha": "3e1e69074d3f5fe8517e16433e0dcd9e743a6959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1e69074d3f5fe8517e16433e0dcd9e743a6959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152cdcb45be7a8f0f24dbcd4177e0858d94516b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152cdcb45be7a8f0f24dbcd4177e0858d94516b6", "html_url": "https://github.com/rust-lang/rust/commit/152cdcb45be7a8f0f24dbcd4177e0858d94516b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152cdcb45be7a8f0f24dbcd4177e0858d94516b6/comments", "author": {"login": "MrAwesome", "id": 145945, "node_id": "MDQ6VXNlcjE0NTk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/145945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAwesome", "html_url": "https://github.com/MrAwesome", "followers_url": "https://api.github.com/users/MrAwesome/followers", "following_url": "https://api.github.com/users/MrAwesome/following{/other_user}", "gists_url": "https://api.github.com/users/MrAwesome/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAwesome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAwesome/subscriptions", "organizations_url": "https://api.github.com/users/MrAwesome/orgs", "repos_url": "https://api.github.com/users/MrAwesome/repos", "events_url": "https://api.github.com/users/MrAwesome/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAwesome/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MrAwesome", "id": 145945, "node_id": "MDQ6VXNlcjE0NTk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/145945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAwesome", "html_url": "https://github.com/MrAwesome", "followers_url": "https://api.github.com/users/MrAwesome/followers", "following_url": "https://api.github.com/users/MrAwesome/following{/other_user}", "gists_url": "https://api.github.com/users/MrAwesome/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAwesome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAwesome/subscriptions", "organizations_url": "https://api.github.com/users/MrAwesome/orgs", "repos_url": "https://api.github.com/users/MrAwesome/repos", "events_url": "https://api.github.com/users/MrAwesome/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAwesome/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a42a2bdac2a6c881f85ebdbce66e84d977c74cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42a2bdac2a6c881f85ebdbce66e84d977c74cfa", "html_url": "https://github.com/rust-lang/rust/commit/a42a2bdac2a6c881f85ebdbce66e84d977c74cfa"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "48405a00d5541dae3c57ef129e9b4b6d492a268c", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/152cdcb45be7a8f0f24dbcd4177e0858d94516b6/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152cdcb45be7a8f0f24dbcd4177e0858d94516b6/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=152cdcb45be7a8f0f24dbcd4177e0858d94516b6", "patch": "@@ -76,15 +76,13 @@ declare_clippy_lint! {\n #[derive(Default)]\n pub struct WildcardImports {\n     warn_on_all: bool,\n-    is_test_module: bool,\n     test_modules_deep: u32,\n }\n \n impl WildcardImports {\n     pub fn new(warn_on_all: bool) -> Self {\n         Self {\n             warn_on_all,\n-            is_test_module: false,\n             test_modules_deep: 0,\n         }\n     }\n@@ -97,8 +95,7 @@ impl LateLintPass<'_, '_> for WildcardImports {\n         if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n             return;\n         }\n-        if is_test_module(item) {\n-            self.is_test_module = true;\n+        if is_test_module_or_function(item) {\n             self.test_modules_deep += 1;\n         }\n         if_chain! {\n@@ -173,9 +170,8 @@ impl LateLintPass<'_, '_> for WildcardImports {\n         }\n     }\n \n-    fn check_item_post(&mut self, _: &LateContext<'_, '_>, _: &Item<'_>) {\n-        if self.is_test_module {\n-            self.is_test_module = false;\n+    fn check_item_post(&mut self, _: &LateContext<'_, '_>, item: &Item<'_>) {\n+        if is_test_module_or_function(item) {\n             self.test_modules_deep -= 1;\n         }\n     }\n@@ -201,6 +197,6 @@ fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n     segments.len() == 1 && segments[0].ident.as_str() == \"super\"\n }\n \n-fn is_test_module(item: &Item<'_>) -> bool {\n-    item.ident.name.as_str().contains(\"test\")\n+fn is_test_module_or_function(item: &Item<'_>) -> bool {\n+    matches!(item.kind, ItemKind::Fn(..) | ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n }"}]}