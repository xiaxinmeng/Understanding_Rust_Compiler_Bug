{"sha": "865216b3ad4158e31d583f5f3cae12afe91c52d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTIxNmIzYWQ0MTU4ZTMxZDU4M2Y1ZjNjYWUxMmFmZTkxYzUyZDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T20:51:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T21:45:41Z"}, "message": "Point at reason in object unsafe trait with `Self` in supertraits or `where`-clause", "tree": {"sha": "75e07b93317dcc40b3b3062ecad8abbaf9ff3c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75e07b93317dcc40b3b3062ecad8abbaf9ff3c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/865216b3ad4158e31d583f5f3cae12afe91c52d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/865216b3ad4158e31d583f5f3cae12afe91c52d0", "html_url": "https://github.com/rust-lang/rust/commit/865216b3ad4158e31d583f5f3cae12afe91c52d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/865216b3ad4158e31d583f5f3cae12afe91c52d0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d935e72582ad833aed735022cdf3808b229e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d935e72582ad833aed735022cdf3808b229e79", "html_url": "https://github.com/rust-lang/rust/commit/16d935e72582ad833aed735022cdf3808b229e79"}], "stats": {"total": 108, "additions": 78, "deletions": 30}, "files": [{"sha": "2745d3205dec0b1787ee8efcab770ad4f5e50f29", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -32,7 +32,7 @@ pub enum ObjectSafetyViolation {\n \n     /// Supertrait reference references `Self` an in illegal location\n     /// (e.g., `trait Foo : Bar<Self>`).\n-    SupertraitSelf,\n+    SupertraitSelf(SmallVec<[Span; 1]>),\n \n     /// Method has something illegal.\n     Method(ast::Name, MethodViolationCode, Span),\n@@ -45,9 +45,13 @@ impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n         match *self {\n             ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n-            ObjectSafetyViolation::SupertraitSelf => {\n-                \"it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\"\n-                    .into()\n+            ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n+                if spans.iter().any(|sp| *sp != DUMMY_SP) {\n+                    \"it uses `Self` as a type parameter in this\".into()\n+                } else {\n+                    \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n+                        .into()\n+                }\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n@@ -87,7 +91,7 @@ impl ObjectSafetyViolation {\n \n     pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n         Some(match *self {\n-            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf => {\n+            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {\n                 return None;\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n@@ -118,7 +122,8 @@ impl ObjectSafetyViolation {\n         // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n         // diagnostics use a `note` instead of a `span_label`.\n         match self {\n-            ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n+            ObjectSafetyViolation::SupertraitSelf(spans)\n+            | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n             ObjectSafetyViolation::AssocConst(_, span)\n             | ObjectSafetyViolation::Method(_, _, span)\n                 if *span != DUMMY_SP =>\n@@ -162,8 +167,9 @@ pub fn astconv_object_safety_violations(\n ) -> Vec<ObjectSafetyViolation> {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     let violations = traits::supertrait_def_ids(tcx, trait_def_id)\n-        .filter(|&def_id| predicates_reference_self(tcx, def_id, true))\n-        .map(|_| ObjectSafetyViolation::SupertraitSelf)\n+        .map(|def_id| predicates_reference_self(tcx, def_id, true))\n+        .filter(|spans| !spans.is_empty())\n+        .map(|spans| ObjectSafetyViolation::SupertraitSelf(spans))\n         .collect();\n \n     debug!(\"astconv_object_safety_violations(trait_def_id={:?}) = {:?}\", trait_def_id, violations);\n@@ -266,8 +272,9 @@ fn object_safety_violations_for_trait(\n         let spans = get_sized_bounds(tcx, trait_def_id);\n         violations.push(ObjectSafetyViolation::SizedSelf(spans));\n     }\n-    if predicates_reference_self(tcx, trait_def_id, false) {\n-        violations.push(ObjectSafetyViolation::SupertraitSelf);\n+    let spans = predicates_reference_self(tcx, trait_def_id, false);\n+    if !spans.is_empty() {\n+        violations.push(ObjectSafetyViolation::SupertraitSelf(spans));\n     }\n \n     violations.extend(\n@@ -337,7 +344,11 @@ fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]>\n         .unwrap_or_else(SmallVec::new)\n }\n \n-fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_only: bool) -> bool {\n+fn predicates_reference_self(\n+    tcx: TyCtxt<'_>,\n+    trait_def_id: DefId,\n+    supertraits_only: bool,\n+) -> SmallVec<[Span; 1]> {\n     let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n@@ -349,12 +360,16 @@ fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_o\n     predicates\n         .predicates\n         .iter()\n-        .map(|(predicate, _)| predicate.subst_supertrait(tcx, &trait_ref))\n-        .any(|predicate| {\n+        .map(|(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n+        .filter_map(|(predicate, &sp)| {\n             match predicate {\n                 ty::Predicate::Trait(ref data, _) => {\n                     // In the case of a trait predicate, we can skip the \"self\" type.\n-                    data.skip_binder().input_types().skip(1).any(has_self_ty)\n+                    if data.skip_binder().input_types().skip(1).any(has_self_ty) {\n+                        Some(sp)\n+                    } else {\n+                        None\n+                    }\n                 }\n                 ty::Predicate::Projection(ref data) => {\n                     // And similarly for projections. This should be redundant with\n@@ -369,22 +384,29 @@ fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_o\n                     //\n                     // This is ALT2 in issue #56288, see that for discussion of the\n                     // possible alternatives.\n-                    data.skip_binder()\n+                    if data\n+                        .skip_binder()\n                         .projection_ty\n                         .trait_ref(tcx)\n                         .input_types()\n                         .skip(1)\n                         .any(has_self_ty)\n+                    {\n+                        Some(sp)\n+                    } else {\n+                        None\n+                    }\n                 }\n                 ty::Predicate::WellFormed(..)\n                 | ty::Predicate::ObjectSafe(..)\n                 | ty::Predicate::TypeOutlives(..)\n                 | ty::Predicate::RegionOutlives(..)\n                 | ty::Predicate::ClosureKind(..)\n                 | ty::Predicate::Subtype(..)\n-                | ty::Predicate::ConstEvaluatable(..) => false,\n+                | ty::Predicate::ConstEvaluatable(..) => None,\n             }\n         })\n+        .collect()\n }\n \n fn trait_has_sized_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {"}, {"sha": "be438ef9ac7bacb0f03f1a5e9666da7facb9da6e", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Map` cannot be made into an object\n   --> $DIR/issue-26056.rs:20:13\n    |\n+LL | trait Map: MapLookup<<Self as Map>::Key> {\n+   |       ---  ----------------------------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |         as &dyn Map<Key=u32,MapValue=u32>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "658199003c18d472a0cf20c5976207a355902069", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,11 +1,16 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-28576.rs:7:12\n    |\n+LL |   pub trait Bar: Foo<Assoc=()> {\n+   |             ---  -------------\n+   |             |    |   |\n+   |             |    |   ...because it uses `Self` as a type parameter in this\n+   |             |    ...because it uses `Self` as a type parameter in this\n+   |             this trait cannot be made into an object...\n+LL |       fn new(&self, b: &\n LL | /            dyn Bar\n LL | |               <Assoc=()>\n    | |________________________^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "50c5195dc93b08613db2acfb63653706f5b878c2", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,10 +1,12 @@\n error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/issue-38404.rs:3:15\n    |\n+LL | trait A<T>: std::ops::Add<Self> + Sized {}\n+   |             ------------------- ...because it uses `Self` as a type parameter in this\n+LL | trait B<T>: A<T> {}\n+   |       - this trait cannot be made into an object...\n LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "2bba50e1f41c8c90ca9e2c2252e263863ab17121", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,18 +1,25 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:14:13\n    |\n+LL | trait Foo where u32: Q<Self> {\n+   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     let _f: Box<dyn Foo> =\n    |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:15:9\n    |\n+LL | trait Foo where u32: Q<Self> {\n+   |       ---            ------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |         Box::new(());\n    |         ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<()>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n "}, {"sha": "fe9ca5b6fa4b7d2076c6e73b4e082e62f3d72155", "filename": "src/test/ui/object-safety/object-safety-issue-22040.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Expr` cannot be made into an object\n   --> $DIR/object-safety-issue-22040.rs:12:23\n    |\n+LL | trait Expr: Debug + PartialEq {\n+   |       ----          --------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL |     elements: Vec<Box<dyn Expr + 'x>>,\n    |                       ^^^^^^^^^^^^^ the trait `Expr` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "ef7f6bacd1233793eecaa510d0821bf2e2e6302e", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-Self.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -1,10 +1,13 @@\n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-supertrait-mentions-Self.rs:15:31\n    |\n+LL | trait Baz : Bar<Self> {\n+   |       ---   --------- ...because it uses `Self` as a type parameter in this\n+   |       |\n+   |       this trait cannot be made into an object...\n+...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                               ^^^^^^^ the trait `Baz` cannot be made into an object\n-   |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n \n error: aborting due to previous error\n "}, {"sha": "56ecb7256f8cde343effcbf6909f2b09a901f338", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/865216b3ad4158e31d583f5f3cae12afe91c52d0/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=865216b3ad4158e31d583f5f3cae12afe91c52d0", "patch": "@@ -3,8 +3,11 @@ error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n    |\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n    |\n-   = note: the trait cannot be made into an object because it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\n+LL | pub trait Eq: PartialEq<Self> {\n+   |               --------------- the trait cannot be made into an object because it uses `Self` as a type parameter in this\n \n error[E0191]: the value of the associated type `Item` (from trait `std::iter::Iterator`) must be specified\n   --> $DIR/trait-alias-object-fail.rs:9:17"}]}