{"sha": "4eb7362c2c8e614b25aa7daa286805ce1382c6af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjczNjJjMmM4ZTYxNGIyNWFhN2RhYTI4NjgwNWNlMTM4MmM2YWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-08T13:40:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-31T19:23:50Z"}, "message": "simplify DepNode for trait selection", "tree": {"sha": "b49e42512e2931d760bcb9180a72064af7394376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49e42512e2931d760bcb9180a72064af7394376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb7362c2c8e614b25aa7daa286805ce1382c6af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb7362c2c8e614b25aa7daa286805ce1382c6af", "html_url": "https://github.com/rust-lang/rust/commit/4eb7362c2c8e614b25aa7daa286805ce1382c6af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb7362c2c8e614b25aa7daa286805ce1382c6af/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44d94a5162ee4b2e20f4ae82328f3e7f6a152b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44d94a5162ee4b2e20f4ae82328f3e7f6a152b8", "html_url": "https://github.com/rust-lang/rust/commit/b44d94a5162ee4b2e20f4ae82328f3e7f6a152b8"}], "stats": {"total": 72, "additions": 33, "deletions": 39}, "files": [{"sha": "18179027c25de9a6ef68d5746e73d6b8dace658a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4eb7362c2c8e614b25aa7daa286805ce1382c6af", "patch": "@@ -132,7 +132,7 @@ pub enum DepNode<D: Clone + Debug> {\n     // which would yield an overly conservative dep-graph.\n     TraitItems(D),\n     ReprHints(D),\n-    TraitSelect(D, Vec<D>),\n+    TraitSelect(Vec<D>),\n }\n \n impl<D: Clone + Debug> DepNode<D> {\n@@ -237,10 +237,9 @@ impl<D: Clone + Debug> DepNode<D> {\n             TraitImpls(ref d) => op(d).map(TraitImpls),\n             TraitItems(ref d) => op(d).map(TraitItems),\n             ReprHints(ref d) => op(d).map(ReprHints),\n-            TraitSelect(ref d, ref type_ds) => {\n-                let d = try_opt!(op(d));\n+            TraitSelect(ref type_ds) => {\n                 let type_ds = try_opt!(type_ds.iter().map(|d| op(d)).collect());\n-                Some(TraitSelect(d, type_ds))\n+                Some(TraitSelect(type_ds))\n             }\n         }\n     }"}, {"sha": "836e52ea45a59b3bdb06ac2d4056dc569153a4cd", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=4eb7362c2c8e614b25aa7daa286805ce1382c6af", "patch": "@@ -670,6 +670,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &result)\n     }\n \n+    /// Finishes processes any obligations that remain in the\n+    /// fulfillment context, and then returns the result with all type\n+    /// variables removed and regions erased. Because this is intended\n+    /// for use after type-check has completed, if any errors occur,\n+    /// it will panic. It is used during normalization and other cases\n+    /// where processing the obligations in `fulfill_cx` may cause\n+    /// type inference variables that appear in `result` to be\n+    /// unified, and hence we need to process those obligations to get\n+    /// the complete picture of the type.\n     pub fn drain_fulfillment_cx_or_panic<T>(&self,\n                                             span: Span,\n                                             fulfill_cx: &mut traits::FulfillmentContext<'tcx>,\n@@ -679,47 +688,28 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"drain_fulfillment_cx_or_panic()\");\n \n-        let when = \"resolving bounds after type-checking\";\n-        let v = match self.drain_fulfillment_cx(fulfill_cx, result) {\n-            Ok(v) => v,\n+        // In principle, we only need to do this so long as `result`\n+        // contains unbound type parameters. It could be a slight\n+        // optimization to stop iterating early.\n+        match fulfill_cx.select_all_or_error(self) {\n+            Ok(()) => { }\n             Err(errors) => {\n-                span_bug!(span, \"Encountered errors `{:?}` {}\", errors, when);\n+                span_bug!(span, \"Encountered errors `{:?}` resolving bounds after type-checking\",\n+                          errors);\n             }\n-        };\n+        }\n \n-        match self.tcx.lift_to_global(&v) {\n-            Some(v) => v,\n+        let result = self.resolve_type_vars_if_possible(result);\n+        let result = self.tcx.erase_regions(&result);\n+\n+        match self.tcx.lift_to_global(&result) {\n+            Some(result) => result,\n             None => {\n-                span_bug!(span, \"Uninferred types/regions in `{:?}` {}\", v, when);\n+                span_bug!(span, \"Uninferred types/regions in `{:?}`\", result);\n             }\n         }\n     }\n \n-    /// Finishes processes any obligations that remain in the fulfillment\n-    /// context, and then \"freshens\" and returns `result`. This is\n-    /// primarily used during normalization and other cases where\n-    /// processing the obligations in `fulfill_cx` may cause type\n-    /// inference variables that appear in `result` to be unified, and\n-    /// hence we need to process those obligations to get the complete\n-    /// picture of the type.\n-    pub fn drain_fulfillment_cx<T>(&self,\n-                                   fulfill_cx: &mut traits::FulfillmentContext<'tcx>,\n-                                   result: &T)\n-                                   -> Result<T,Vec<traits::FulfillmentError<'tcx>>>\n-        where T : TypeFoldable<'tcx>\n-    {\n-        debug!(\"drain_fulfillment_cx(result={:?})\",\n-               result);\n-\n-        // In principle, we only need to do this so long as `result`\n-        // contains unbound type parameters. It could be a slight\n-        // optimization to stop iterating early.\n-        fulfill_cx.select_all_or_error(self)?;\n-\n-        let result = self.resolve_type_vars_if_possible(result);\n-        Ok(self.tcx.erase_regions(&result))\n-    }\n-\n     pub fn projection_mode(&self) -> Reveal {\n         self.projection_mode\n     }"}, {"sha": "a00ea8de7e71d30b50f19d5a643ffdc2dfa09c87", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4eb7362c2c8e614b25aa7daa286805ce1382c6af", "patch": "@@ -958,8 +958,9 @@ impl<'tcx> TraitPredicate<'tcx> {\n                     _ =>\n                         None\n                 })\n+                .chain(iter::once(self.def_id()))\n                 .collect();\n-        DepNode::TraitSelect(self.def_id(), def_ids)\n+        DepNode::TraitSelect(def_ids)\n     }\n \n     pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a {"}, {"sha": "9758fc074464efa0a51fe696608d0b268e78d83a", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=4eb7362c2c8e614b25aa7daa286805ce1382c6af", "patch": "@@ -1028,7 +1028,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             fulfill_cx.register_predicate_obligation(&infcx, obligation);\n         }\n \n-        fulfill_cx.select_all_or_error(infcx).is_ok()\n+        fulfill_cx.select_all_or_error(&infcx).is_ok()\n     })\n }\n "}, {"sha": "4dd5797a318278ff132bf8a5a5a1f093691a62bf", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb7362c2c8e614b25aa7daa286805ce1382c6af/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=4eb7362c2c8e614b25aa7daa286805ce1382c6af", "patch": "@@ -48,7 +48,11 @@ pub fn apply_param_substs<'a, 'tcx, T>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        -> T\n     where T: TransNormalize<'tcx>\n {\n+    debug!(\"apply_param_substs(param_substs={:?}, value={:?})\", param_substs, value);\n     let substituted = value.subst(tcx, param_substs);\n+    debug!(\"apply_param_substs: substituted={:?}{}\",\n+           substituted,\n+           if substituted.has_projection_types() { \" [needs projection]\" } else { \"\" });\n     tcx.normalize_associated_type(&substituted)\n }\n "}]}