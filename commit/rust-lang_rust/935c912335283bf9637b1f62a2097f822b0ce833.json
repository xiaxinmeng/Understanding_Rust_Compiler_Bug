{"sha": "935c912335283bf9637b1f62a2097f822b0ce833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNWM5MTIzMzUyODNiZjk2MzdiMWY2MmEyMDk3ZjgyMmIwY2U4MzM=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-15T21:15:19Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-03-05T02:23:37Z"}, "message": "Add lint for variable names that contain uppercase characters", "tree": {"sha": "6aa98c9f24cdd5daa119f5e98bbbdc429045d816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa98c9f24cdd5daa119f5e98bbbdc429045d816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/935c912335283bf9637b1f62a2097f822b0ce833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/935c912335283bf9637b1f62a2097f822b0ce833", "html_url": "https://github.com/rust-lang/rust/commit/935c912335283bf9637b1f62a2097f822b0ce833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/935c912335283bf9637b1f62a2097f822b0ce833/comments", "author": null, "committer": null, "parents": [{"sha": "6d9bdf975aba3cd2f571f4e3695136f2ee85f37f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9bdf975aba3cd2f571f4e3695136f2ee85f37f", "html_url": "https://github.com/rust-lang/rust/commit/6d9bdf975aba3cd2f571f4e3695136f2ee85f37f"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "17a02770378087be2f5e0c061500cb74ee5da598", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/935c912335283bf9637b1f62a2097f822b0ce833/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935c912335283bf9637b1f62a2097f822b0ce833/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=935c912335283bf9637b1f62a2097f822b0ce833", "patch": "@@ -80,6 +80,7 @@ pub enum Lint {\n     NonCamelCaseTypes,\n     NonUppercaseStatics,\n     NonUppercasePatternStatics,\n+    UppercaseVariables,\n     UnnecessaryParens,\n     TypeLimits,\n     TypeOverflow,\n@@ -208,7 +209,14 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n          default: warn\n      }),\n \n-    (\"unnecessary_parens\",\n+    (\"uppercase_variables\",\n+     LintSpec {\n+         lint: UppercaseVariables,\n+         desc: \"variable names should start with a lowercase character\",\n+         default: warn\n+     }),\n+\n+     (\"unnecessary_parens\",\n      LintSpec {\n         lint: UnnecessaryParens,\n         desc: \"`if`, `match`, `while` and `return` do not need parentheses\",\n@@ -1169,6 +1177,30 @@ fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n     }\n }\n \n+fn check_pat_uppercase_variable(cx: &Context, p: &ast::Pat) {\n+    let def_map = cx.tcx.def_map.borrow();\n+    match &p.node {\n+        &ast::PatIdent(_, ref path, _) => {\n+            match def_map.get().find(&p.id) {\n+                Some(&ast::DefLocal(_, _)) | Some(&ast::DefBinding(_, _)) |\n+                        Some(&ast::DefArg(_, _)) => {\n+                    // last identifier alone is right choice for this lint.\n+                    let ident = path.segments.last().unwrap().identifier;\n+                    let s = token::get_ident(ident);\n+                    if s.get().char_at(0).is_uppercase() {\n+                        cx.span_lint(\n+                            UppercaseVariables,\n+                            path.span,\n+                            \"variable names should start with a lowercase character\");\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_unnecessary_parens_core(cx: &Context, value: &ast::Expr, msg: &str) {\n     match value.node {\n         ast::ExprParen(_) => {\n@@ -1553,6 +1585,7 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_pat(&mut self, p: &ast::Pat, _: ()) {\n         check_pat_non_uppercase_statics(self, p);\n+        check_pat_uppercase_variable(self, p);\n         check_unused_mut_pat(self, p);\n \n         visit::walk_pat(self, p, ());"}, {"sha": "a9e9fdbbfc90759a3fcd0505c79cea83c26281c8", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/935c912335283bf9637b1f62a2097f822b0ce833/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935c912335283bf9637b1f62a2097f822b0ce833/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=935c912335283bf9637b1f62a2097f822b0ce833", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(uppercase_variables)];\n+\n+use std::io::File;\n+use std::io::IoError;\n+\n+fn test(Xx: uint) { //~ ERROR variable names should start with a lowercase character\n+    println!(\"{}\", Xx);\n+}\n+\n+fn main() {\n+    let Test: uint = 0; //~ ERROR variable names should start with a lowercase character\n+    println!(\"{}\", Test);\n+\n+    let mut f = File::open(&Path::new(\"something.txt\"));\n+    let mut buff = [0u8, ..16];\n+    match f.read(buff) {\n+        Ok(cnt) => println!(\"read this many bytes: {}\", cnt),\n+        Err(IoError{ kind: EndOfFile, .. }) => println!(\"Got end of file: {}\", EndOfFile.to_str()),\n+                        //~^ ERROR variable names should start with a lowercase character\n+    }\n+\n+    test(1);\n+}\n+"}]}