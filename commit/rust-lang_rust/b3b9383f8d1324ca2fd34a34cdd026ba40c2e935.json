{"sha": "b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "node_id": "C_kwDOAAsO6NoAKGIzYjkzODNmOGQxMzI0Y2EyZmQzNGEzNGNkZDAyNmJhNDBjMmU5MzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-30T16:50:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-30T16:50:10Z"}, "message": "Rollup merge of #107424 - bpeel:clone-into-from-share-code, r=scottmcm\n\nMake Vec::clone_from and slice::clone_into share the same code\n\nIn the past, `Vec::clone_from` was implemented using `slice::clone_into`. The code from `clone_into` was later duplicated into `clone_from` in 8725e4c337, which is the commit that adds custom allocator support to Vec. Presumably this was done because the `slice::clone_into` method only works for vecs with the default allocator so it would have the wrong type to clone into `Vec<T, A>`.\n\nLater on in 361398009be6 the code for the two methods diverged because the `Vec::clone_from` version gained a specialization to optimize the case when T is Copy. In order to reduce code duplication and make them both be able to take advantage of this specialization, this PR moves the specialization into the slice module and makes vec use it again.", "tree": {"sha": "7dae9c877d82bd85cdd6278693ce7581e67fad7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dae9c877d82bd85cdd6278693ce7581e67fad7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1/VCCRBK7hj4Ov3rIwAAfCkIAJXZWZS3YEhlPJC4vmK7c2C/\n21Xs2Kq63BluR58TMNFQwHrmwuHckx5GqkYP9lHeI9851Lv9/2OH6BfP1zHJTp7c\neLO0t4UJaluaXD/mA+7IlLaLAegELPorTsDEGpMTstmyON/0clceQj1FU2y7ww4l\nno0FY9qlbh/7KB7UgIsBt0P5IVMW3MKUKjZMbe0SPqMnxEqvKAcI7+M6DduhkTTC\nhf7PYaHQM5xpIEyFjXePU3OnoyjQ+PlHVVKZc5TMNnqvF2WtJC5UAhE+bV/oWwX0\nOCuMsL7+kIb5EYPl2E8PBkT98k0q9MqK113OE/hDzfTzk1wwLjnKjriZV6n0m4M=\n=eSd+\n-----END PGP SIGNATURE-----\n", "payload": "tree 7dae9c877d82bd85cdd6278693ce7581e67fad7a\nparent d1320a542f0b27e060d19a87571e2e499b2d304a\nparent a34f11c006936f0935c0f3484f9a292901d0eade\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675097410 +0100\ncommitter GitHub <noreply@github.com> 1675097410 +0100\n\nRollup merge of #107424 - bpeel:clone-into-from-share-code, r=scottmcm\n\nMake Vec::clone_from and slice::clone_into share the same code\n\nIn the past, `Vec::clone_from` was implemented using `slice::clone_into`. The code from `clone_into` was later duplicated into `clone_from` in 8725e4c337, which is the commit that adds custom allocator support to Vec. Presumably this was done because the `slice::clone_into` method only works for vecs with the default allocator so it would have the wrong type to clone into `Vec<T, A>`.\n\nLater on in 361398009be6 the code for the two methods diverged because the `Vec::clone_from` version gained a specialization to optimize the case when T is Copy. In order to reduce code duplication and make them both be able to take advantage of this specialization, this PR moves the specialization into the slice module and makes vec use it again.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "html_url": "https://github.com/rust-lang/rust/commit/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1320a542f0b27e060d19a87571e2e499b2d304a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1320a542f0b27e060d19a87571e2e499b2d304a", "html_url": "https://github.com/rust-lang/rust/commit/d1320a542f0b27e060d19a87571e2e499b2d304a"}, {"sha": "a34f11c006936f0935c0f3484f9a292901d0eade", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34f11c006936f0935c0f3484f9a292901d0eade", "html_url": "https://github.com/rust-lang/rust/commit/a34f11c006936f0935c0f3484f9a292901d0eade"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "093dcbbe8bf775c3b437ee7329527ca7ed5d6da7", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "patch": "@@ -782,6 +782,38 @@ impl<T, A: Allocator> BorrowMut<[T]> for Vec<T, A> {\n     }\n }\n \n+// Specializable trait for implementing ToOwned::clone_into. This is\n+// public in the crate and has the Allocator parameter so that\n+// vec::clone_from use it too.\n+#[cfg(not(no_global_oom_handling))]\n+pub(crate) trait SpecCloneIntoVec<T, A: Allocator> {\n+    fn clone_into(&self, target: &mut Vec<T, A>);\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Clone, A: Allocator> SpecCloneIntoVec<T, A> for [T] {\n+    default fn clone_into(&self, target: &mut Vec<T, A>) {\n+        // drop anything in target that will not be overwritten\n+        target.truncate(self.len());\n+\n+        // target.len <= self.len due to the truncate above, so the\n+        // slices here are always in-bounds.\n+        let (init, tail) = self.split_at(target.len());\n+\n+        // reuse the contained values' allocations/resources.\n+        target.clone_from_slice(init);\n+        target.extend_from_slice(tail);\n+    }\n+}\n+\n+#[cfg(not(no_global_oom_handling))]\n+impl<T: Copy, A: Allocator> SpecCloneIntoVec<T, A> for [T] {\n+    fn clone_into(&self, target: &mut Vec<T, A>) {\n+        target.clear();\n+        target.extend_from_slice(self);\n+    }\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> ToOwned for [T] {\n@@ -797,16 +829,7 @@ impl<T: Clone> ToOwned for [T] {\n     }\n \n     fn clone_into(&self, target: &mut Vec<T>) {\n-        // drop anything in target that will not be overwritten\n-        target.truncate(self.len());\n-\n-        // target.len <= self.len due to the truncate above, so the\n-        // slices here are always in-bounds.\n-        let (init, tail) = self.split_at(target.len());\n-\n-        // reuse the contained values' allocations/resources.\n-        target.clone_from_slice(init);\n-        target.extend_from_slice(tail);\n+        SpecCloneIntoVec::clone_into(self, target);\n     }\n }\n "}, {"sha": "a07f3da78d33e58c4ec92954130d6816c1e6a8ee", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b9383f8d1324ca2fd34a34cdd026ba40c2e935/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=b3b9383f8d1324ca2fd34a34cdd026ba40c2e935", "patch": "@@ -2646,35 +2646,6 @@ impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {\n     }\n }\n \n-#[cfg(not(no_global_oom_handling))]\n-trait SpecCloneFrom {\n-    fn clone_from(this: &mut Self, other: &Self);\n-}\n-\n-#[cfg(not(no_global_oom_handling))]\n-impl<T: Clone, A: Allocator> SpecCloneFrom for Vec<T, A> {\n-    default fn clone_from(this: &mut Self, other: &Self) {\n-        // drop anything that will not be overwritten\n-        this.truncate(other.len());\n-\n-        // self.len <= other.len due to the truncate above, so the\n-        // slices here are always in-bounds.\n-        let (init, tail) = other.split_at(this.len());\n-\n-        // reuse the contained values' allocations/resources.\n-        this.clone_from_slice(init);\n-        this.extend_from_slice(tail);\n-    }\n-}\n-\n-#[cfg(not(no_global_oom_handling))]\n-impl<T: Copy, A: Allocator> SpecCloneFrom for Vec<T, A> {\n-    fn clone_from(this: &mut Self, other: &Self) {\n-        this.clear();\n-        this.extend_from_slice(other);\n-    }\n-}\n-\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n@@ -2695,7 +2666,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n     }\n \n     fn clone_from(&mut self, other: &Self) {\n-        SpecCloneFrom::clone_from(self, other)\n+        crate::slice::SpecCloneIntoVec::clone_into(other.as_slice(), self);\n     }\n }\n "}]}