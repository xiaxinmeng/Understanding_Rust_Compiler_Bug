{"sha": "fddc815adaabb87c23e74c2bce41cddb5d433326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZGM4MTVhZGFhYmI4N2MyM2U3NGMyYmNlNDFjZGRiNWQ0MzMzMjY=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-07-14T19:25:04Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:13Z"}, "message": "WIP: adding mark-cancelling for macro_rules", "tree": {"sha": "2013886da8d094647f302aaf93038a21da4791c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2013886da8d094647f302aaf93038a21da4791c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fddc815adaabb87c23e74c2bce41cddb5d433326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fddc815adaabb87c23e74c2bce41cddb5d433326", "html_url": "https://github.com/rust-lang/rust/commit/fddc815adaabb87c23e74c2bce41cddb5d433326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fddc815adaabb87c23e74c2bce41cddb5d433326/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e681e7843e6da4348648dcbdf11a633828c1b1a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e681e7843e6da4348648dcbdf11a633828c1b1a9", "html_url": "https://github.com/rust-lang/rust/commit/e681e7843e6da4348648dcbdf11a633828c1b1a9"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "253bed4e3b86e7d65135d4df7d3abda2d7ea9144", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=fddc815adaabb87c23e74c2bce41cddb5d433326", "patch": "@@ -1010,6 +1010,16 @@ pub fn marksof(ctxt: SyntaxContext, stopname: Name, table: &SCTable) -> ~[Mrk] {\n     }\n }\n \n+/// Return the outer mark for a context with a mark at the outside.\n+/// FAILS when outside is not a mark.\n+pub fn mtwt_outer_mark(ctxt: SyntaxContext) -> Mrk {\n+    let sctable = get_sctable();\n+    match sctable.table[ctxt] {\n+        ast::Mark(mrk,_) => mrk,\n+        _ => fail!(\"can't retrieve outer mark when outside is not a mark\")\n+    }\n+}\n+\n /// Push a name... unless it matches the one on top, in which\n /// case pop and discard (so two of the same marks cancel)\n pub fn xorPush(marks: &mut ~[uint], mark: uint) {"}, {"sha": "7590125a189ade11a31e8e9be11699481572e8e1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fddc815adaabb87c23e74c2bce41cddb5d433326", "patch": "@@ -152,8 +152,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n                                 pending_renames : @mut ~[]\n                             }));\n     syntax_expanders.insert(intern(&\"macro_rules\"),\n-                            builtin_item_tt_no_ctxt(\n-                                ext::tt::macro_rules::add_new_extension));\n+                            @SE(IdentTT(ext::tt::macro_rules::add_new_extension, None)));\n     syntax_expanders.insert(intern(&\"fmt\"),\n                             builtin_normal_tt_no_ctxt(ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"format\"),"}, {"sha": "ad07d166f4545415ec7540367e4202c669137d5a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fddc815adaabb87c23e74c2bce41cddb5d433326", "patch": "@@ -13,7 +13,8 @@ use ast::{Local, Ident, mac_invoc_tt};\n use ast::{item_mac, Mrk, Stmt_, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::{token_tree};\n use ast;\n-use ast_util::{new_rename, new_mark};\n+use ast_util::{mtwt_outer_mark, new_rename, new_mark};\n+use ast_util;\n use attr;\n use attr::AttrMetaMethods;\n use codemap;\n@@ -1507,7 +1508,10 @@ pub fn renames_to_fold(renames : @mut ~[(ast::Ident,ast::Name)]) -> @AstFoldFns\n }\n \n // just a convenience:\n-pub fn new_mark_folder(m : Mrk) -> @AstFoldFns { fun_to_ctxt_folder(@Marker{mark:m}) }\n+pub fn new_mark_folder(m : Mrk) -> @AstFoldFns {\n+    fun_to_ctxt_folder(@Marker{mark:m})\n+}\n+\n pub fn new_rename_folder(from : ast::Ident, to : ast::Name) -> @AstFoldFns {\n     fun_to_ctxt_folder(@Renamer{from:from,to:to})\n }\n@@ -1538,6 +1542,16 @@ pub fn replace_ctxts(expr : @ast::Expr, ctxt : SyntaxContext) -> @ast::Expr {\n     fun_to_ctxt_folder(@Repainter{ctxt:ctxt}).fold_expr(expr)\n }\n \n+// take the mark from the given ctxt (that has a mark at the outside),\n+// and apply it to everything in the token trees, thereby cancelling\n+// that mark.\n+pub fn mtwt_cancel_outer_mark(tts: &[ast::token_tree], ctxt: ast::SyntaxContext)\n+    -> ~[ast::token_tree] {\n+    let outer_mark = mtwt_outer_mark(ctxt);\n+    mark_tts(tts,outer_mark)\n+}\n+\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -1546,13 +1560,15 @@ mod test {\n     use ast_util::{get_sctable, mtwt_marksof, mtwt_resolve, new_rename};\n     use codemap;\n     use codemap::Spanned;\n+    use fold;\n     use parse;\n-    use parse::token::{gensym, intern, get_ident_interner, ident_to_str};\n+    use parse::token::{fresh_mark, gensym, intern, get_ident_interner, ident_to_str};\n+    use parse::token;\n     use print::pprust;\n     use std;\n     use std::vec;\n     use util::parser_testing::{string_to_crate, string_to_crate_and_sess, string_to_item};\n-    use util::parser_testing::{string_to_pat, strs_to_idents};\n+    use util::parser_testing::{string_to_pat, string_to_tts, strs_to_idents};\n     use visit;\n \n     // make sure that fail! is present\n@@ -1651,6 +1667,28 @@ mod test {\n         }\n     }\n \n+    #[test] fn cancel_outer_mark_test(){\n+        let invalid_name = token::special_idents::invalid.name;\n+        let ident_str = @\"x\";\n+        let tts = string_to_tts(ident_str);\n+        let fm = fresh_mark();\n+        let marked_once = fold::fold_tts(tts,new_mark_folder(fm) as @fold::ast_fold);\n+        assert_eq!(marked_once.len(),1);\n+        let marked_once_ctxt =\n+            match marked_once[0] {\n+                ast::tt_tok(_,token::IDENT(id,_)) => id.ctxt,\n+                _ => fail!(fmt!(\"unexpected shape for marked tts: %?\",marked_once[0]))\n+            };\n+        assert_eq!(mtwt_marksof(marked_once_ctxt,invalid_name),~[fm]);\n+        let remarked = mtwt_cancel_outer_mark(marked_once,marked_once_ctxt);\n+        assert_eq!(remarked.len(),1);\n+        match remarked[0] {\n+            ast::tt_tok(_,token::IDENT(id,_)) =>\n+            assert_eq!(mtwt_marksof(id.ctxt,invalid_name),~[]),\n+            _ => fail!(fmt!(\"unexpected shape for marked tts: %?\",remarked[0]))\n+        }\n+    }\n+\n     #[test]\n     fn renaming () {\n         let item_ast = string_to_crate(@\"fn f() -> int { a }\");"}, {"sha": "74de8eaa09e0676ceb8d3613f293c7ded9eeb78c", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fddc815adaabb87c23e74c2bce41cddb5d433326/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=fddc815adaabb87c23e74c2bce41cddb5d433326", "patch": "@@ -14,6 +14,7 @@ use ast;\n use codemap::{Span, Spanned, dummy_sp};\n use ext::base::{ExtCtxt, MacResult, MRAny, MRDef, MacroDef, NormalTT};\n use ext::base;\n+use ext::expand;\n use ext::tt::macro_parser::{error};\n use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n use ext::tt::macro_parser::{parse, parse_or_else, success, failure};\n@@ -29,8 +30,10 @@ use print;\n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: Span,\n                          name: Ident,\n-                         arg: ~[ast::token_tree])\n+                         arg: ~[ast::token_tree],\n+                         stx_ctxt: ast::SyntaxContext)\n                       -> base::MacResult {\n+    let arg = expand::mtwt_cancel_outer_mark(arg,stx_ctxt);\n     // Wrap a matcher_ in a spanned to produce a matcher.\n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {"}]}