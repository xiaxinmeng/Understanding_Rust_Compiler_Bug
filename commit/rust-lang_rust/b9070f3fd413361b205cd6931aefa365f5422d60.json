{"sha": "b9070f3fd413361b205cd6931aefa365f5422d60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDcwZjNmZDQxMzM2MWIyMDVjZDY5MzFhZWZhMzY1ZjU0MjJkNjA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-02T14:15:05Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-02T14:15:05Z"}, "message": "ci: stop running macOS builds on Azure Pipelines", "tree": {"sha": "1d4764abc7cbccc3daa0b92bf3ce267f12995576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d4764abc7cbccc3daa0b92bf3ce267f12995576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9070f3fd413361b205cd6931aefa365f5422d60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl93NfcACgkQPgar6Auq\n8ZztYg/8Chv2Mn57aKMpUzVhRvbAHWutn2d+NDHop8wIx5vMLLgv7mDkPnZcf0as\nOWK40c/cnGTu0fi4OBSdCzko2Cu1gYYno9LhpKYn9+Oo85SXHNMTl/ahIuGY9r4E\n6UXftB8LhtUFoJGIT9j405MPTPQZlC3siyy/EoMiv8NAG554LgLqJcEC2p8/FMyJ\nMjBBl0kG9T47TeLxpDV/hAVi6TR23F+rblZLV0OXd3w7R1fc+nTyWWAZlu8VTz/N\nOLiuvQFaXH9r8RSwrZSOPl7UIf1wxyVAO6FYQrnRIR5AMde5laCzdCTncYCd9De4\n/BrmqCkG5LOdl0Me4HkZ/nDra6NQEyIryjKmeZZIO9XG8mvBG/339kiUNzKsA2xQ\nfC2uc/eXQKDdjSur6UrdrZTnDG2Hxyub253kcIFxTx0aBKgXOmDaUCloFCb78ECh\nGuzZx95H+qXTAp6M3mQcvb5HehcH9ARbFxk+UHVhVetK146CNtL3+bjbDQGIIFhI\nFUh8HXYEmlmQVLZxhFvxdZBFOm9ZaZnZVGalUkuPObJksYEs1F3YqbxTwRf/u0Xt\nnr7LEni9ub/UUadQufLpGmHmOcezZogXc0eQNaLU4/gRHdfbEiOF7b5W26eNk0J3\nuXN2nzPXYH/8pLscS6QcffcqZbdaGHKD5SduyqSgsRKNurpHbtc=\n=ljBp\n-----END PGP SIGNATURE-----", "payload": "tree 1d4764abc7cbccc3daa0b92bf3ce267f12995576\nparent 782013564efc06ef02614ba35a4e67dee4fcb8e7\nauthor Pietro Albini <pietro@pietroalbini.org> 1601648105 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1601648105 +0200\n\nci: stop running macOS builds on Azure Pipelines\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9070f3fd413361b205cd6931aefa365f5422d60", "html_url": "https://github.com/rust-lang/rust/commit/b9070f3fd413361b205cd6931aefa365f5422d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9070f3fd413361b205cd6931aefa365f5422d60/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782013564efc06ef02614ba35a4e67dee4fcb8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/782013564efc06ef02614ba35a4e67dee4fcb8e7", "html_url": "https://github.com/rust-lang/rust/commit/782013564efc06ef02614ba35a4e67dee4fcb8e7"}], "stats": {"total": 184, "additions": 3, "deletions": 181}, "files": [{"sha": "37c2e9bc35a0db9ba3efc3b679453db8a7089237", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b9070f3fd413361b205cd6931aefa365f5422d60/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b9070f3fd413361b205cd6931aefa365f5422d60/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=b9070f3fd413361b205cd6931aefa365f5422d60", "patch": "@@ -18,45 +18,9 @@ trigger:\n   - auto\n \n jobs:\n-- job: macOS\n+- job: Dummy\n   timeoutInMinutes: 600\n   pool:\n-    vmImage: macos-10.15\n+    vmImage: ubuntu-16.04\n   steps:\n-  - template: steps/run.yml\n-  variables:\n-    # We're still uploading macOS builds from Azure Pipelines.\n-    - group: prod-credentials\n-  strategy:\n-    matrix:\n-      # OSX builders running tests, these run the full test suite.\n-      # NO_DEBUG_ASSERTIONS=1 to make them go faster, but also do have some\n-      # runners that run `//ignore-debug` tests.\n-      #\n-      # Note that the compiler is compiled to target 10.8 here because the Xcode\n-      # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n-      x86_64-apple:\n-        SCRIPT: ./x.py --stage 2 test\n-        INITIAL_RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.8\n-        MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-\n-      dist-x86_64-apple:\n-        SCRIPT: ./x.py dist\n-        INITIAL_RUST_CONFIGURE_ARGS: --host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n-        DIST_REQUIRE_ALL_TOOLS: 1\n-\n-      dist-x86_64-apple-alt:\n-        SCRIPT: ./x.py dist\n-        INITIAL_RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n-        RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-        MACOSX_DEPLOYMENT_TARGET: 10.7\n-        NO_LLVM_ASSERTIONS: 1\n-        NO_DEBUG_ASSERTIONS: 1\n+  - bash: echo \"We're running this job since bors is still gating on Azure\""}, {"sha": "34fc4d76fa207d7cc572ef02c24ffcda40001993", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "removed", "additions": 0, "deletions": 142, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/782013564efc06ef02614ba35a4e67dee4fcb8e7/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/782013564efc06ef02614ba35a4e67dee4fcb8e7/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=782013564efc06ef02614ba35a4e67dee4fcb8e7", "patch": "@@ -1,142 +0,0 @@\n-#####################################\n-##    READ BEFORE CHANGING THIS    ##\n-#####################################\n-\n-# We're in the process of evaluating GitHub Actions as a possible replacement\n-# for Azure Pipelines, and at the moment the configuration is duplicated\n-# between the two CI providers. Be sure to also change the configuration in\n-# src/ci/github-actions when changing this file.\n-\n-#####################################\n-\n-# FIXME(linux): need to configure core dumps, enable them, and then dump\n-# backtraces on failure from all core dumps:\n-#\n-# - bash: sudo apt install gdb\n-# - bash: sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern'\n-#\n-# Check travis config for `gdb --batch` command to print all crash logs\n-\n-steps:\n-\n-# Configure our CI_JOB_NAME variable which log analyzers can use for the main\n-# step to see what's going on.\n-- bash: |\n-    builder=$(echo $AGENT_JOBNAME | cut -d ' ' -f 2)\n-    echo \"##vso[task.setvariable variable=CI_JOB_NAME]$builder\"\n-  displayName: Configure Job Name\n-\n-# Disable automatic line ending conversion, which is enabled by default on\n-# Azure's Windows image. Having the conversion enabled caused regressions both\n-# in our test suite (it broke miri tests) and in the ecosystem, since we\n-# started shipping install scripts with CRLF endings instead of the old LF.\n-#\n-# Note that we do this a couple times during the build as the PATH and current\n-# user/directory change, e.g. when mingw is enabled.\n-- bash: git config --global core.autocrlf false\n-  displayName: \"Disable git automatic line ending conversion\"\n-\n-- checkout: self\n-  fetchDepth: 2\n-\n-- bash: src/ci/scripts/setup-environment.sh\n-  displayName: Setup environment\n-\n-- bash: src/ci/scripts/clean-disk.sh\n-  displayName: Clean disk\n-\n-- bash: src/ci/scripts/should-skip-this.sh\n-  displayName: Decide whether to run this job\n-\n-- bash: src/ci/scripts/collect-cpu-stats.sh\n-  displayName: Collect CPU-usage statistics in the background\n-\n-- bash: src/ci/scripts/dump-environment.sh\n-  displayName: Show the current environment\n-\n-- bash: src/ci/scripts/install-sccache.sh\n-  displayName: Install sccache\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-clang.sh\n-  displayName: Install clang\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-wix.sh\n-  displayName: Install wix\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/symlink-build-dir.sh\n-  displayName: Ensure the build happens on a partition with enough space\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n-  displayName: \"Disable git automatic line ending conversion (on C:/)\"\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-msys2.sh\n-  displayName: Install msys2\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-mingw.sh\n-  displayName: Install MinGW\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/install-ninja.sh\n-  displayName: Install ninja\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/enable-docker-ipv6.sh\n-  displayName: Enable IPv6 on Docker\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-# Disable automatic line ending conversion (again). On Windows, when we're\n-# installing dependencies, something switches the git configuration directory or\n-# re-enables autocrlf. We've not tracked down the exact cause -- and there may\n-# be multiple -- but this should ensure submodules are checked out with the\n-# appropriate line endings.\n-- bash: src/ci/scripts/disable-git-crlf-conversion.sh\n-  displayName: Disable git automatic line ending conversion\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/checkout-submodules.sh\n-  displayName: Checkout submodules\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-- bash: src/ci/scripts/verify-line-endings.sh\n-  displayName: Verify line endings\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-\n-# Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n-# images, etc.\n-- bash: src/ci/scripts/install-awscli.sh\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-  displayName: Install awscli\n-\n-- bash: src/ci/scripts/run-build-from-ci.sh\n-  timeoutInMinutes: 600\n-  env:\n-    AWS_ACCESS_KEY_ID: $(SCCACHE_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(SCCACHE_AWS_SECRET_ACCESS_KEY)\n-    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)\n-  condition: and(succeeded(), not(variables.SKIP_JOB))\n-  displayName: Run build\n-\n-- bash: src/ci/scripts/upload-artifacts.sh\n-  env:\n-    AWS_ACCESS_KEY_ID: $(UPLOAD_AWS_ACCESS_KEY_ID)\n-    AWS_SECRET_ACCESS_KEY: $(UPLOAD_AWS_SECRET_ACCESS_KEY)\n-  displayName: Upload artifacts\n-  # Adding a condition on DEPLOY=1 or DEPLOY_ALT=1 is not needed as all deploy\n-  # builders *should* have the AWS credentials available. Still, explicitly\n-  # adding the condition is helpful as this way CI will not silently skip\n-  # deploying artifacts from a dist builder if the variables are misconfigured,\n-  # erroring about invalid credentials instead.\n-  condition: |\n-    and(\n-      succeeded(), not(variables.SKIP_JOB),\n-      or(\n-        variables.UPLOAD_AWS_SECRET_ACCESS_KEY,\n-        eq(variables.DEPLOY, '1'), eq(variables.DEPLOY_ALT, '1')\n-      )\n-    )"}]}