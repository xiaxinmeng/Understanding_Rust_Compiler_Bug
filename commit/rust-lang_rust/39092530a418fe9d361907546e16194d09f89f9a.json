{"sha": "39092530a418fe9d361907546e16194d09f89f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDkyNTMwYTQxOGZlOWQzNjE5MDc1NDZlMTYxOTRkMDlmODlmOWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-25T12:03:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-28T04:34:00Z"}, "message": "Update docs for rustc_lint crateification.", "tree": {"sha": "4f1d77ee0052965836f9ca7c4391d186f2964693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f1d77ee0052965836f9ca7c4391d186f2964693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39092530a418fe9d361907546e16194d09f89f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39092530a418fe9d361907546e16194d09f89f9a", "html_url": "https://github.com/rust-lang/rust/commit/39092530a418fe9d361907546e16194d09f89f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39092530a418fe9d361907546e16194d09f89f9a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532cd5f85a93921f74f5991db2e419c6da58b188", "url": "https://api.github.com/repos/rust-lang/rust/commits/532cd5f85a93921f74f5991db2e419c6da58b188", "html_url": "https://github.com/rust-lang/rust/commit/532cd5f85a93921f74f5991db2e419c6da58b188"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "44718d1c5251dbfff6cfe42f55d9e7ee67d31df4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=39092530a418fe9d361907546e16194d09f89f9a", "patch": "@@ -8,22 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Lints built in to rustc.\n+//! Some lints that are built in to the compiler.\n //!\n-//! This is a sibling of `lint::context` in order to ensure that\n-//! lints implemented here use the same public API as lint plugins.\n-//!\n-//! To add a new lint to rustc, declare it here using `declare_lint!()`.\n-//! Then add code to emit the new lint in the appropriate circumstances.\n-//! You can do that in an existing `LintPass` if it makes sense, or in\n-//! a new `LintPass`, or using `Session::add_lint` elsewhere in the\n-//! compiler. Only do the latter if the check can't be written cleanly\n-//! as a `LintPass`.\n-//!\n-//! If you define a new `LintPass`, you will also need to add it to the\n-//! `add_builtin!` or `add_builtin_with_new!` invocation in `context.rs`.\n-//! Use the former for unit-like structs and the latter for structs with\n-//! a `pub fn new()`.\n+//! These are the built-in lints that are emitted direct in the main\n+//! compiler code, rather than using their own custom pass. Those\n+//! lints are all available in `rustc_lint::builtin`.\n \n use lint::{LintPass, LintArray};\n "}, {"sha": "d0fccf6495a0a47d9b83d39ac637cc60819a7308", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=39092530a418fe9d361907546e16194d09f89f9a", "patch": "@@ -8,20 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Lints built in to rustc.\n+//! Lints in the Rust compiler.\n //!\n-//! This is a sibling of `lint::context` in order to ensure that\n-//! lints implemented here use the same public API as lint plugins.\n+//! This contains lints which can feasibly be implemented as their own\n+//! AST visitor. Also see `rustc::lint::builtin`, which contains the\n+//! definitions of lints that are emitted directly inside the main\n+//! compiler.\n //!\n //! To add a new lint to rustc, declare it here using `declare_lint!()`.\n //! Then add code to emit the new lint in the appropriate circumstances.\n-//! You can do that in an existing `LintPass` if it makes sense, or in\n-//! a new `LintPass`, or using `Session::add_lint` elsewhere in the\n-//! compiler. Only do the latter if the check can't be written cleanly\n-//! as a `LintPass`.\n+//! You can do that in an existing `LintPass` if it makes sense, or in a\n+//! new `LintPass`, or using `Session::add_lint` elsewhere in the\n+//! compiler. Only do the latter if the check can't be written cleanly as a\n+//! `LintPass` (also, note that such lints will need to be defined in\n+//! `rustc::lint::builtin`, not here).\n //!\n //! If you define a new `LintPass`, you will also need to add it to the\n-//! `add_builtin!` or `add_builtin_with_new!` invocation in `context.rs`.\n+//! `add_builtin!` or `add_builtin_with_new!` invocation in `lib.rs`.\n //! Use the former for unit-like structs and the latter for structs with\n //! a `pub fn new()`.\n "}, {"sha": "9eef0f1cf8b0ff75c84f50b60b71fcf687de1447", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39092530a418fe9d361907546e16194d09f89f9a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=39092530a418fe9d361907546e16194d09f89f9a", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Many of the lints built into the Rust compiler.\n+//! Lints in the Rust compiler.\n+//!\n+//! This currently only contains the definitions and implementations\n+//! of most of the lints that `rustc` supports directly, it does not\n+//! contain the infrastructure for defining/registering lints. That is\n+//! available in `rustc::lint` and `rustc::plugin` respectively.\n //!\n //! # Note\n //!\n@@ -54,6 +59,9 @@ use lint::{LintPassObject, LintId};\n \n mod builtin;\n \n+/// Tell the `LintStore` about all the built-in lints (the ones\n+/// defined in this crate and the ones defined in\n+/// `rustc::lint::builtin`).\n pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     macro_rules! add_builtin {\n         ($sess:ident, $($name:ident),*,) => ("}]}