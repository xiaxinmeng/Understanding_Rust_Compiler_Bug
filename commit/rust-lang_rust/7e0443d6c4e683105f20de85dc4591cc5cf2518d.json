{"sha": "7e0443d6c4e683105f20de85dc4591cc5cf2518d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDQ0M2Q2YzRlNjgzMTA1ZjIwZGU4NWRjNDU5MWNjNWNmMjUxOGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-07T00:48:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-08T07:51:38Z"}, "message": "std: Fill in all missing imports\n\nFallout from the previous commits", "tree": {"sha": "631c8a852acedabef00ba3e371e785e90a581c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631c8a852acedabef00ba3e371e785e90a581c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0443d6c4e683105f20de85dc4591cc5cf2518d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0443d6c4e683105f20de85dc4591cc5cf2518d", "html_url": "https://github.com/rust-lang/rust/commit/7e0443d6c4e683105f20de85dc4591cc5cf2518d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0443d6c4e683105f20de85dc4591cc5cf2518d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5350ee740e66a73161eb4cdf5b95d55fe570fc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/5350ee740e66a73161eb4cdf5b95d55fe570fc26", "html_url": "https://github.com/rust-lang/rust/commit/5350ee740e66a73161eb4cdf5b95d55fe570fc26"}], "stats": {"total": 89, "additions": 65, "deletions": 24}, "files": [{"sha": "aedda59bbac1bd9ce5fe03603dc1702f4f11ab03", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -169,6 +169,7 @@ pub mod raw {\n     use at_vec::capacity;\n     use cast;\n     use cast::{transmute, transmute_copy};\n+    use container::Container;\n     use option::None;\n     use ptr;\n     use mem;"}, {"sha": "bf37e5fca6a5f3061452edf0f50fdc8a6ab6962f", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -238,7 +238,7 @@ use rt::local::Local;\n use rt::task::{Task, BlockedTask};\n use rt::thread::Thread;\n use sync::atomics::{AtomicInt, AtomicBool, SeqCst, Relaxed};\n-use vec::{ImmutableVector, OwnedVector};\n+use vec::OwnedVector;\n \n use spsc = sync::spsc_queue;\n use mpsc = sync::mpsc_queue;"}, {"sha": "5fed9d74527d686a6a58025c5663edec155df63c", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -16,6 +16,7 @@\n use iter::Iterator;\n use option::Option;\n use io::Reader;\n+use vec::OwnedVector;\n \n /// An iterator that reads a single byte on each iteration,\n /// until `.read_byte()` returns `None`."}, {"sha": "00f66f1e9c752aeb28b7d7dfe7ef71b09e760092", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,9 +10,11 @@\n \n use container::Container;\n use from_str::FromStr;\n+use iter::Iterator;\n use option::{Option, None, Some};\n+use str::StrSlice;\n use to_str::ToStr;\n-use vec::{MutableCloneableVector, ImmutableVector};\n+use vec::{MutableCloneableVector, ImmutableVector, MutableVector};\n \n pub type Port = u16;\n "}, {"sha": "6e6cdfb25dee7ff63a52bbb7bbc59619316c5c3b", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -26,6 +26,7 @@ out.write(bytes!(\"Hello, world!\"));\n \n */\n \n+use container::Container;\n use fmt;\n use io::buffered::LineBufferedWriter;\n use io::{Reader, Writer, io_error, IoError, OtherIoError,\n@@ -37,7 +38,9 @@ use result::{Ok, Err};\n use rt::local::Local;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n use rt::task::Task;\n+use str::StrSlice;\n use util;\n+use vec::ImmutableVector;\n \n // And so begins the tale of acquiring a uv handle to a stdio stream on all\n // platforms in all situations. Our story begins by splitting the world into two"}, {"sha": "ba51ac3e88d3e91dbb90866858487e2d470224a6", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -21,7 +21,7 @@ use str;\n use vec::{CopyableVector, ImmutableVector, MutableVector};\n use vec::OwnedVector;\n use num::{NumCast, Zero, One, cast, pow_with_uint, Integer};\n-use num::{Round, Float, FPNaN, FPInfinite};\n+use num::{Round, Float, FPNaN, FPInfinite, ToPrimitive};\n \n pub enum ExponentFormat {\n     ExpNone,"}, {"sha": "e0e3e8c790cf83f2b1d6fb2241c1ad1dd96d049b", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -21,7 +21,8 @@ use str;\n use str::Str;\n use to_bytes::IterBytes;\n use vec;\n-use vec::{CopyableVector, RSplitIterator, SplitIterator, Vector, VectorVector};\n+use vec::{CopyableVector, RSplitIterator, SplitIterator, Vector, VectorVector,\n+          ImmutableEqVector, OwnedVector, ImmutableVector, OwnedCopyableVector};\n use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &[u8]"}, {"sha": "be83a519807fa684e5fe228a27adff0f9f1fb1a7", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -13,14 +13,16 @@\n use ascii::AsciiCast;\n use c_str::{CString, ToCStr};\n use cast;\n+use clone::Clone;\n+use container::Container;\n use cmp::Eq;\n use from_str::FromStr;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Invert, Iterator, Map};\n use option::{Option, Some, None};\n use str;\n-use str::{CharSplitIterator, OwnedStr, Str, StrVector};\n+use str::{CharSplitIterator, OwnedStr, Str, StrVector, StrSlice};\n use to_bytes::IterBytes;\n-use vec::Vector;\n+use vec::{Vector, OwnedVector, ImmutableVector};\n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &str"}, {"sha": "fe1d8c505ca5c40643b95dfd537c628a61cf4ac1", "filename": "src/libstd/rand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fexponential.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,6 +10,7 @@\n \n //! The exponential distribution.\n \n+use num::Exponential;\n use rand::{Rng, Rand};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n "}, {"sha": "78b6f5b8c7f675f41840919db4831a4a36049857", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,10 +10,11 @@\n \n //! The Gamma and derived distributions.\n \n+use num::Algebraic;\n+use num;\n use rand::{Rng, Open01};\n-use super::{IndependentSample, Sample, Exp};\n use super::normal::StandardNormal;\n-use num;\n+use super::{IndependentSample, Sample, Exp};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///"}, {"sha": "e29a70aede923406e4a2b78c295f7866aaa1ff52", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -20,11 +20,14 @@ that do not need to record state.\n \n */\n \n-use iter::range;\n+use container::Container;\n+use iter::{range, Iterator};\n use option::{Some, None};\n use num;\n+use num::CheckedAdd;\n use rand::{Rng, Rand};\n use clone::Clone;\n+use vec::MutableVector;\n \n pub use self::range::Range;\n pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};"}, {"sha": "7b24f78bdcf375e9bc4ca61da2bd7956c75ba96a", "filename": "src/libstd/rand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fnormal.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,6 +10,7 @@\n \n //! The normal and derived distributions.\n \n+use num::Exponential;\n use rand::{Rng, Rand, Open01};\n use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n "}, {"sha": "e1845bfeab6262b66b86751743e2fa16b0132978", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -12,8 +12,9 @@\n \n use rand::{Rng, SeedableRng, OSRng};\n use iter::{Iterator, range, range_step, Repeat};\n+use num::Times;\n use option::{None, Some};\n-use vec::raw;\n+use vec::{raw, MutableVector, ImmutableVector};\n use mem;\n \n static RAND_SIZE_LEN: u32 = 8;"}, {"sha": "7045b64eff6987157bd69fb15b7c8f7e384e3a90", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,6 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n+use container::Container;\n use option::{Some, None};\n use io::Reader;\n "}, {"sha": "9e049564a2d3f499944af4ede9dd68f0e09694a8", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -11,8 +11,9 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use rand::{Rng, SeedableRng};\n+use container::Container;\n use default::Default;\n+use rand::{Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded."}, {"sha": "7dcbae995ed7b2be3a278e3d8ed8b13fefde5b4d", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n use c_str::{ToCStr, CString};\n+use container::Container;\n+use iter::Iterator;\n use libc::{c_char, size_t};\n use option::{Option, None, Some};\n use ptr::RawPtr;\n@@ -19,7 +21,7 @@ use str::OwnedStr;\n use str;\n use uint;\n use unstable::raw;\n-use vec::ImmutableVector;\n+use vec::{ImmutableVector, OwnedVector};\n \n pub static FROZEN_BIT: uint = 1 << (uint::bits - 1);\n pub static MUT_BIT: uint = 1 << (uint::bits - 2);"}, {"sha": "16c1ad25448fc315897c680846a780631809442b", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -10,7 +10,9 @@\n \n use container::MutableSet;\n use hashmap::HashSet;\n+use iter::Iterator;\n use option::{Some, None, Option};\n+use ptr::RawPtr;\n use vec::ImmutableVector;\n use rt::rtio::EventLoop;\n "}, {"sha": "7a417990a4c1ac5dce234334bf552d819758f777", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use libc::{c_void, c_char, size_t, uintptr_t, free, malloc, realloc};\n+use ptr::RawPtr;\n use unstable::intrinsics::TyDesc;\n use unstable::raw;\n use mem::size_of;"}, {"sha": "1be942b2db19a9058a9d69cf2b5dd78ba14b4411", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -11,18 +11,21 @@\n //! The local, garbage collected heap\n \n use cast;\n+use iter::Iterator;\n use libc::{c_void, uintptr_t};\n use libc;\n use mem;\n use ops::Drop;\n use option::{Option, None, Some};\n use ptr;\n+use ptr::RawPtr;\n use rt::env;\n use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n use unstable::intrinsics::TyDesc;\n use unstable::raw;\n+use vec::ImmutableVector;\n \n // This has no meaning with out rtdebug also turned on.\n #[cfg(rtdebug)]"}, {"sha": "f4efd8e27d02e57a79047578f83230aed00c8a14", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -19,6 +19,7 @@\n \n use cast;\n use ops::Drop;\n+use ptr::RawPtr;\n \n #[cfg(windows)]               // mingw-w32 doesn't like thread_local things\n #[cfg(target_os = \"android\")] // see #10686\n@@ -79,6 +80,7 @@ pub unsafe fn borrow<T>() -> Borrowed<T> {\n pub mod compiled {\n     use cast;\n     use option::{Option, Some, None};\n+    use ptr::RawPtr;\n     #[cfg(not(test))] use libc::c_void;\n \n     #[cfg(test)]\n@@ -177,6 +179,7 @@ pub mod native {\n     use libc::c_void;\n     use option::{Option, Some, None};\n     use ptr;\n+    use ptr::RawPtr;\n     use tls = rt::thread_local_storage;\n \n     static mut RT_TLS_KEY: tls::Key = -1;"}, {"sha": "2004dac0c7cf6d428ffd7934a1cda02636b5e86f", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n+use fmt;\n use from_str::from_str;\n+use iter::Iterator;\n use libc::exit;\n use option::{Some, None, Option};\n use rt::crate_map::{ModEntry, CrateMap, iter_crate_map, get_crate_map};\n use str::StrSlice;\n-use vec::{ImmutableVector, MutableTotalOrdVector};\n+use vec::{ImmutableVector, MutableTotalOrdVector, OwnedVector};\n #[cfg(test)] use cast::transmute;\n \n struct LogDirective {"}, {"sha": "d839ef62af962528d1ae532160a0f43a10fbfc70", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -58,14 +58,9 @@ Several modules in `core` are clients of `rt`:\n #[allow(missing_doc)];\n \n use any::Any;\n-use clone::Clone;\n-use container::Container;\n-use iter::Iterator;\n use option::Option;\n-use ptr::RawPtr;\n use result::Result;\n use task::TaskOpts;\n-use vec::{OwnedVector, MutableVector, ImmutableVector};\n \n use self::task::{Task, BlockedTask};\n "}, {"sha": "6c94f23778931d358593752f85b6df7e13815f59", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -17,6 +17,7 @@ use any::AnyOwnExt;\n use borrow;\n use cast;\n use cleanup;\n+use clone::Clone;\n use io::Writer;\n use iter::{Iterator, Take};\n use local_data;"}, {"sha": "56dc2288a4085608ded13bdb8d0962032d6b154d", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -62,6 +62,7 @@ use kinds::Send;\n use libc::{c_void, c_char, size_t};\n use option::{Some, None, Option};\n use prelude::drop;\n+use ptr::RawPtr;\n use result::{Err, Ok};\n use rt::local::Local;\n use rt::task::Task;"}, {"sha": "ee336d7d847d5393b10ffaded77b3a1d4dd0896f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -11,11 +11,13 @@\n use container::Container;\n use fmt;\n use from_str::FromStr;\n+use iter::Iterator;\n use libc;\n use option::{Some, None, Option};\n use os;\n use str::StrSlice;\n use unstable::running_on_valgrind;\n+use vec::ImmutableVector;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n // XXX: Once the runtime matures remove the `true` below to turn off rtassert, etc."}, {"sha": "a005549402e06f3de250590fd7d409f5ce71ecb0", "filename": "src/libstd/str.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -977,11 +977,13 @@ static TAG_CONT_U8: u8 = 128u8;\n /// Unsafe operations\n pub mod raw {\n     use cast;\n+    use container::Container;\n     use libc;\n     use ptr;\n-    use str::{is_utf8, OwnedStr};\n+    use ptr::RawPtr;\n+    use str::{is_utf8, OwnedStr, StrSlice};\n     use vec;\n-    use vec::MutableVector;\n+    use vec::{MutableVector, ImmutableVector, OwnedVector};\n     use unstable::raw::Slice;\n \n     /// Create a Rust string from a *u8 buffer of the given length\n@@ -1137,10 +1139,12 @@ Section: Trait implementations\n #[cfg(not(test))]\n #[allow(missing_doc)]\n pub mod traits {\n-    use ops::Add;\n+    use container::Container;\n     use cmp::{TotalOrd, Ordering, Less, Equal, Greater, Eq, Ord, Equiv, TotalEq};\n-    use super::{Str, eq_slice};\n+    use iter::Iterator;\n+    use ops::Add;\n     use option::{Some, None};\n+    use str::{Str, StrSlice, OwnedStr, eq_slice};\n \n     impl<'a> Add<&'a str,~str> for &'a str {\n         #[inline]"}, {"sha": "3f03486d426ebfd47b419fed64f72aefd33a5a57", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -167,6 +167,7 @@ mod imp {\n     use libc::c_void;\n     use libc;\n     use ptr;\n+    use ptr::RawPtr;\n \n     type pthread_mutex_t = libc::c_void;\n     type pthread_mutexattr_t = libc::c_void;"}, {"sha": "5b5eaf9d8d03ca8bd6b05b4accaf14e94acaa0cb", "filename": "src/libstd/unstable/stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Funstable%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Funstable%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fstack.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -24,6 +24,8 @@\n //! detection is not guaranteed to continue in the future. Usage of this module\n //! is discouraged unless absolutely necessary.\n \n+use str::Str;\n+\n static RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented"}, {"sha": "4fa2372c1ab37adec5c17da30ccb7c8852367022", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0443d6c4e683105f20de85dc4591cc5cf2518d/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7e0443d6c4e683105f20de85dc4591cc5cf2518d", "patch": "@@ -611,6 +611,7 @@ impl<'a, T> RandomAccessIterator<&'a [T]> for ChunkIter<'a, T> {\n pub mod traits {\n     use super::*;\n \n+    use container::Container;\n     use clone::Clone;\n     use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equiv};\n     use iter::order;\n@@ -2520,7 +2521,7 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n pub mod raw {\n     use cast;\n     use ptr;\n-    use vec::{with_capacity, MutableVector};\n+    use vec::{with_capacity, MutableVector, OwnedVector};\n     use unstable::raw::Slice;\n \n     /**\n@@ -2599,8 +2600,9 @@ pub mod raw {\n /// Operations on `[u8]`.\n pub mod bytes {\n     use container::Container;\n-    use vec::MutableVector;\n+    use vec::{MutableVector, OwnedVector, ImmutableVector};\n     use ptr;\n+    use ptr::RawPtr;\n \n     /// A trait for operations on mutable `[u8]`s.\n     pub trait MutableByteVector {"}]}