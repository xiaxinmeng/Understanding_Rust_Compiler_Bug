{"sha": "ca25e2868dc2109701367073304857ead72cd202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMjVlMjg2OGRjMjEwOTcwMTM2NzA3MzMwNDg1N2VhZDcyY2QyMDI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-10T17:40:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-11T21:34:01Z"}, "message": "review comments", "tree": {"sha": "38fd57920ff1d2c0b163f24f72c03980af469111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38fd57920ff1d2c0b163f24f72c03980af469111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca25e2868dc2109701367073304857ead72cd202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca25e2868dc2109701367073304857ead72cd202", "html_url": "https://github.com/rust-lang/rust/commit/ca25e2868dc2109701367073304857ead72cd202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca25e2868dc2109701367073304857ead72cd202/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44394707e55ddc5402afbc27853de05a58905002", "url": "https://api.github.com/repos/rust-lang/rust/commits/44394707e55ddc5402afbc27853de05a58905002", "html_url": "https://github.com/rust-lang/rust/commit/44394707e55ddc5402afbc27853de05a58905002"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "14029f2915141dc7cfdd389137c12a855ea52259", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca25e2868dc2109701367073304857ead72cd202/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca25e2868dc2109701367073304857ead72cd202/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ca25e2868dc2109701367073304857ead72cd202", "patch": "@@ -175,7 +175,7 @@ fn suggest_restriction(\n         return;\n     }\n     // Given `fn foo(t: impl Trait)` where `Trait` requires assoc type `A`...\n-    if let Some((name, fn_sig)) =\n+    if let Some((bound_str, fn_sig)) =\n         fn_sig.zip(projection).and_then(|(sig, p)| match p.self_ty().kind {\n             // Shenanigans to get the `Trait` from the `impl Trait`.\n             ty::Param(param) => {\n@@ -194,14 +194,14 @@ fn suggest_restriction(\n         // but instead we choose to suggest replacing all instances of `impl Trait` with `T`\n         // where `T: Trait`.\n         let mut ty_spans = vec![];\n-        let impl_name = format!(\"impl {}\", name);\n+        let impl_trait_str = format!(\"impl {}\", bound_str);\n         for input in fn_sig.decl.inputs {\n             if let hir::TyKind::Path(hir::QPath::Resolved(\n                 None,\n                 hir::Path { segments: [segment], .. },\n             )) = input.kind\n             {\n-                if segment.ident.as_str() == impl_name.as_str() {\n+                if segment.ident.as_str() == impl_trait_str.as_str() {\n                     // `fn foo(t: impl Trait)`\n                     //            ^^^^^^^^^^ get this to suggest `T` instead\n \n@@ -211,14 +211,14 @@ fn suggest_restriction(\n             }\n         }\n \n-        let type_param_name = generics.params.next_type_param_name(Some(&name));\n+        let type_param_name = generics.params.next_type_param_name(Some(&bound_str));\n         // The type param `T: Trait` we will suggest to introduce.\n-        let type_param = format!(\"{}: {}\", type_param_name, name);\n+        let type_param = format!(\"{}: {}\", type_param_name, bound_str);\n \n         // FIXME: modify the `trait_ref` instead of string shenanigans.\n         // Turn `<impl Trait as Foo>::Bar: Qux` into `<T as Foo>::Bar: Qux`.\n         let pred = trait_ref.without_const().to_predicate().to_string();\n-        let pred = pred.replace(&impl_name, &type_param_name);\n+        let pred = pred.replace(&impl_trait_str, &type_param_name);\n         let mut sugg = vec![\n             match generics\n                 .params\n@@ -258,10 +258,10 @@ fn suggest_restriction(\n         );\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n-        let (sp, s) =\n+        let (sp, sugg) =\n             predicate_constraint(generics, trait_ref.without_const().to_predicate().to_string());\n         let appl = Applicability::MachineApplicable;\n-        err.span_suggestion(sp, &format!(\"consider further restricting {}\", msg), s, appl);\n+        err.span_suggestion(sp, &format!(\"consider further restricting {}\", msg), sugg, appl);\n     }\n }\n "}]}