{"sha": "57009caabd2a45a6efa4d36149feec39ab0a0658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDA5Y2FhYmQyYTQ1YTZlZmE0ZDM2MTQ5ZmVlYzM5YWIwYTA2NTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-25T06:00:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-25T06:06:00Z"}, "message": "Identify missing item category in `impl`s\n\n```rust\nstruct S;\nimpl S {\n    pub hello_method(&self) {\n        println!(\"Hello\");\n    }\n}\nfn main() { S.hello_method(); }\n```\n\n```rust\nerror: can't qualify macro invocation with `pub`\n --> file.rs:3:4\n  |\n3 |     pub hello_method(&self) {\n  |     ^^^-            - expected `!` here for a macro invocation\n  |        |\n  |        did you mean to write `fn` here for a method declaration?\n  |\n  = help: try adjusting the macro to put `pub` inside the invocation\n```", "tree": {"sha": "fbf7cad105ada8a7db30f266ce8b6313eeb62174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf7cad105ada8a7db30f266ce8b6313eeb62174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57009caabd2a45a6efa4d36149feec39ab0a0658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57009caabd2a45a6efa4d36149feec39ab0a0658", "html_url": "https://github.com/rust-lang/rust/commit/57009caabd2a45a6efa4d36149feec39ab0a0658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57009caabd2a45a6efa4d36149feec39ab0a0658/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c62e532f3de4c0254b772c36fe629b2042efd107", "url": "https://api.github.com/repos/rust-lang/rust/commits/c62e532f3de4c0254b772c36fe629b2042efd107", "html_url": "https://github.com/rust-lang/rust/commit/c62e532f3de4c0254b772c36fe629b2042efd107"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "a19339f8cc1c124db93a4e5c78e44fba0aa29226", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=57009caabd2a45a6efa4d36149feec39ab0a0658", "patch": "@@ -4660,25 +4660,30 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn complain_if_pub_macro(&mut self, visa: &Visibility, span: Span) {\n-        match *visa {\n-            Visibility::Inherited => (),\n+    fn complain_if_pub_macro(&mut self, vis: &Visibility, sp: Span) {\n+        if let Err(mut err) = self.complain_if_pub_macro_diag(vis, sp) {\n+            err.emit();\n+        }\n+    }\n+\n+    fn complain_if_pub_macro_diag(&mut self, vis: &Visibility, sp: Span) -> PResult<'a, ()> {\n+        match *vis {\n+            Visibility::Inherited => Ok(()),\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid) => sid.name == Symbol::intern(\"macro_rules\"),\n                     _ => false,\n                 };\n                 if is_macro_rules {\n-                    self.diagnostic().struct_span_err(span, \"can't qualify macro_rules \\\n-                                                             invocation with `pub`\")\n-                                     .help(\"did you mean #[macro_export]?\")\n-                                     .emit();\n+                    let mut err = self.diagnostic()\n+                        .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n+                    err.help(\"did you mean #[macro_export]?\");\n+                    Err(err)\n                 } else {\n-                    self.diagnostic().struct_span_err(span, \"can't qualify macro \\\n-                                                             invocation with `pub`\")\n-                                     .help(\"try adjusting the macro to put `pub` \\\n-                                            inside the invocation\")\n-                                     .emit();\n+                    let mut err = self.diagnostic()\n+                        .struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n+                    err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n+                    Err(err)\n                 }\n             }\n         }\n@@ -4689,14 +4694,41 @@ impl<'a> Parser<'a> {\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if self.token.is_path_start() {\n-            // method macro.\n+            // Method macro.\n \n             let prev_span = self.prev_span;\n-            self.complain_if_pub_macro(&vis, prev_span);\n+            // Before complaining about trying to set a macro as `pub`,\n+            // check if `!` comes after the path.\n+            let err = self.complain_if_pub_macro_diag(&vis, prev_span);\n \n             let lo = self.span.lo;\n             let pth = self.parse_path(PathStyle::Mod)?;\n-            self.expect(&token::Not)?;\n+            let bang_err = self.expect(&token::Not);\n+            if let Err(mut err) = err {\n+                if let Err(mut bang_err) = bang_err {\n+                    // Given this code `pub path(`, it seems like this is not setting the\n+                    // visibility of a macro invocation, but rather a mistyped method declaration.\n+                    // Keep the macro diagnostic, but also provide a hint that `fn` might be\n+                    // missing. Don't complain about the missing `!` as a separate diagnostic, add\n+                    // label in the appropriate place as part of one unified diagnostic.\n+                    //\n+                    // x |     pub path(&self) {\n+                    //   |     ^^^-    - expected `!` here for a macro invocation\n+                    //   |        |\n+                    //   |        did you mean to write `fn` here for a method declaration?\n+\n+                    bang_err.cancel();\n+                    err.span_label(self.span, &\"expected `!` here for a macro invocation\");\n+                    //     pub  path(\n+                    //        ^^ `sp` below will point to this\n+                    let sp = mk_sp(prev_span.hi, self.prev_span.lo);\n+                    err.span_label(sp,\n+                                   &\"did you mean to write `fn` here for a method declaration?\");\n+                }\n+                return Err(err);\n+            } else if let Err(bang_err) = bang_err {\n+                return Err(bang_err);\n+            }\n \n             // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;"}, {"sha": "cf75929bae20ca35e53731b22138ad5492910929", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=57009caabd2a45a6efa4d36149feec39ab0a0658", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    pub hello_method(&self) {\n+        println!(\"Hello\");\n+    }\n+}\n+\n+fn main() {\n+    S.hello_method();\n+}"}, {"sha": "93a0c58f91a57c244e7c06e849e0b118149f7d27", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57009caabd2a45a6efa4d36149feec39ab0a0658/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=57009caabd2a45a6efa4d36149feec39ab0a0658", "patch": "@@ -0,0 +1,12 @@\n+error: can't qualify macro invocation with `pub`\n+  --> $DIR/issue-40006.rs:14:5\n+   |\n+14 |     pub hello_method(&self) {\n+   |     ^^^-            - expected `!` here for a macro invocation\n+   |        |\n+   |        did you mean to write `fn` here for a method declaration?\n+   |\n+   = help: try adjusting the macro to put `pub` inside the invocation\n+\n+error: aborting due to previous error\n+"}]}