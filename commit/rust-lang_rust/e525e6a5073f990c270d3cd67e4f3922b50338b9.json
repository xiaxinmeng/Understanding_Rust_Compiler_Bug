{"sha": "e525e6a5073f990c270d3cd67e4f3922b50338b9", "node_id": "C_kwDOAAsO6NoAKGU1MjVlNmE1MDczZjk5MGMyNzBkM2NkNjdlNGYzOTIyYjUwMzM4Yjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T20:23:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T20:23:12Z"}, "message": "Rollup merge of #92551 - RalfJung:stack-pop-cleanup, r=oli-obk\n\nrename StackPopClean::None to Root\n\nWith https://github.com/rust-lang/rust/pull/90102, `StackPopClean::None` is now only used for the \"root\" frame of the stack, so adjust its name accordingly and add an assertion.\n\nr? `@oli-obk`", "tree": {"sha": "9ae84a325218b8c0fe4de65ec4e10b78f3cfd874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae84a325218b8c0fe4de65ec4e10b78f3cfd874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e525e6a5073f990c270d3cd67e4f3922b50338b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1KywCRBK7hj4Ov3rIwAAj1MIAIJ8e/Us9HRQxd2RCero+5i1\n4rrG8f0L3bUjnU2fqEq4/McEOOxbCNReSj4XwPcTDzV2LenGv5wMHoeur9o6wSlM\nsO1Lg5IV0pCjKYQK9mUi0iM9DK5zVm33yxR/RKDDPeeIib3TIAUk2+3wMCtv1Sb1\ny6D2TXXT2jS9xfghHJfimBPX5t6e1ssAXAjj0PRmN4gr9N1RG95wioXtYbKdMhp0\nqA6BXxG/qNWQ0jLHBczkw7LbiAlH2uKF3GxK68Vh3vQ+fdg5Ql8ar+9+zcrL7k1a\nNyO5MsU9dcOCRIRI4grlz7YhxBbC450sddjJwQVJYtccTyQay7cQxYoOkdfdHiA=\n=fZKm\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ae84a325218b8c0fe4de65ec4e10b78f3cfd874\nparent 4b743f882fa3fb617e0344f5ea2d237f83e5d70a\nparent d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641327792 +0100\ncommitter GitHub <noreply@github.com> 1641327792 +0100\n\nRollup merge of #92551 - RalfJung:stack-pop-cleanup, r=oli-obk\n\nrename StackPopClean::None to Root\n\nWith https://github.com/rust-lang/rust/pull/90102, `StackPopClean::None` is now only used for the \"root\" frame of the stack, so adjust its name accordingly and add an assertion.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e525e6a5073f990c270d3cd67e4f3922b50338b9", "html_url": "https://github.com/rust-lang/rust/commit/e525e6a5073f990c270d3cd67e4f3922b50338b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e525e6a5073f990c270d3cd67e4f3922b50338b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b743f882fa3fb617e0344f5ea2d237f83e5d70a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b743f882fa3fb617e0344f5ea2d237f83e5d70a", "html_url": "https://github.com/rust-lang/rust/commit/4b743f882fa3fb617e0344f5ea2d237f83e5d70a"}, {"sha": "d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "html_url": "https://github.com/rust-lang/rust/commit/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "3ec9f3ca3b8c2172277ca75f3758670855df9bd3", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=e525e6a5073f990c270d3cd67e4f3922b50338b9", "patch": "@@ -63,7 +63,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         cid.instance,\n         body,\n         Some(&ret.into()),\n-        StackPopCleanup::None { cleanup: false },\n+        StackPopCleanup::Root { cleanup: false },\n     )?;\n \n     // The main interpreter loop."}, {"sha": "0a8112da2aba8fbe4ccd596e05a14da16e970773", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=e525e6a5073f990c270d3cd67e4f3922b50338b9", "patch": "@@ -156,11 +156,11 @@ pub enum StackPopCleanup {\n     /// `ret` stores the block we jump to on a normal return, while `unwind`\n     /// stores the block used for cleanup during unwinding.\n     Goto { ret: Option<mir::BasicBlock>, unwind: StackPopUnwind },\n-    /// Just do nothing: Used by Main and for TLS hooks in miri.\n+    /// The root frame of the stack: nowhere else to jump to.\n     /// `cleanup` says whether locals are deallocated. Static computation\n     /// wants them leaked to intern what they need (and just throw away\n     /// the entire `ecx` when it is done).\n-    None { cleanup: bool },\n+    Root { cleanup: bool },\n }\n \n /// State of a local variable including a memoized layout\n@@ -849,7 +849,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n         let cleanup = match return_to_block {\n             StackPopCleanup::Goto { .. } => true,\n-            StackPopCleanup::None { cleanup, .. } => cleanup,\n+            StackPopCleanup::Root { cleanup, .. } => cleanup,\n         };\n \n         if !cleanup {\n@@ -874,16 +874,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Follow the unwind edge.\n             let unwind = match return_to_block {\n                 StackPopCleanup::Goto { unwind, .. } => unwind,\n-                StackPopCleanup::None { .. } => {\n-                    panic!(\"Encountered StackPopCleanup::None when unwinding!\")\n+                StackPopCleanup::Root { .. } => {\n+                    panic!(\"encountered StackPopCleanup::Root when unwinding!\")\n                 }\n             };\n             self.unwind_to_block(unwind)\n         } else {\n             // Follow the normal return edge.\n             match return_to_block {\n                 StackPopCleanup::Goto { ret, .. } => self.return_to_block(ret),\n-                StackPopCleanup::None { .. } => Ok(()),\n+                StackPopCleanup::Root { .. } => {\n+                    assert!(\n+                        self.stack().is_empty(),\n+                        \"only the topmost frame can have StackPopCleanup::Root\"\n+                    );\n+                    Ok(())\n+                }\n             }\n         }\n     }"}, {"sha": "e3ff6ad45490d4074f420a721ffc9fb95b8a1b7a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e525e6a5073f990c270d3cd67e4f3922b50338b9/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e525e6a5073f990c270d3cd67e4f3922b50338b9", "patch": "@@ -406,7 +406,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Instance::new(def_id, substs),\n             dummy_body,\n             ret.as_ref(),\n-            StackPopCleanup::None { cleanup: false },\n+            StackPopCleanup::Root { cleanup: false },\n         )\n         .expect(\"failed to push initial stack frame\");\n "}]}