{"sha": "98f18f047482c08f173e757c0521820ba2deea58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjE4ZjA0NzQ4MmMwOGYxNzNlNzU3YzA1MjE4MjBiYTJkZWVhNTg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-30T17:49:34Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:49Z"}, "message": "Move `vec!` unexpanding function to `utils::higher`", "tree": {"sha": "cc8bcbf6e03bcca84a9fb7a9c5a3e46c05ada9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8bcbf6e03bcca84a9fb7a9c5a3e46c05ada9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f18f047482c08f173e757c0521820ba2deea58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohxAAoJEF5CfHlMukXol/kP/A67pMWRS7hksFv7EEBq054U\nW59ok+thgJ3xasQKa2j+3/1l7EpNMxZwbyqG9NE6EDjRHn6RgagDR+UulT/4bRnL\nkcRRFKEmEeHXG60dQFcG/OZ5m3IwNcupiEq6dUdpC+W9RuIWXm3ekOlCk8HViS1m\ndfZt+QPggknltCUBWvMIZy2L9IcfCPuwK7Z80eTm14dx5/lS9jn6uPS0ZYJSWyAl\nKLviMK2A74wAzPhJ+SNLTVf2kgACCAIoPdxmPLxDwkFzMcXLGBgFRxMgIWhxcAs7\nFa4zLNCoxdsPq8DYyBgLu7LZg7MPv7GfRLDfTDJHgw31iefOa4OlUgGc8nm6EOWV\na9aUjyJNhfF+DT3KpcBcxrC2CVayE0IzQvbKFALa/fRFXWEWbA9RmsDeGDSUub5E\nJPB+21J6USa0vEZnwENkc/IXlfUAyk9zo1gCim32tNpjxDLZPdcBRzeDbtZ+zvpu\ndlKPuTRtyvT1CbFJvOJ7TtTI0EfV35Wy0Bg1cpmRLH8Ih5c4Oo3Td+5rHOTtRRAu\naXNrPpfDFcWFseNAFgA7aC1LkeW83f47/XAXESaGOJlHATgm+N4NSUfG4QVHe7+t\nFTDFNeOp39yN3Llt6vpEkf8+dfKjnmq5SG6rAzjHyXi3rSJLLaQQ0Jk9LXXAzQg4\nx4IOCDq/23yvKCdS6Qbt\n=b+kr\n-----END PGP SIGNATURE-----", "payload": "tree cc8bcbf6e03bcca84a9fb7a9c5a3e46c05ada9f6\nparent 4dff4df57711b1da61dcbc361b02c6becdefe035\nauthor mcarton <cartonmartin+git@gmail.com> 1467308974 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385969 +0200\n\nMove `vec!` unexpanding function to `utils::higher`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f18f047482c08f173e757c0521820ba2deea58", "html_url": "https://github.com/rust-lang/rust/commit/98f18f047482c08f173e757c0521820ba2deea58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f18f047482c08f173e757c0521820ba2deea58/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dff4df57711b1da61dcbc361b02c6becdefe035", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dff4df57711b1da61dcbc361b02c6becdefe035", "html_url": "https://github.com/rust-lang/rust/commit/4dff4df57711b1da61dcbc361b02c6becdefe035"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "ab8b7d8b2b8f3b128fd47d42719ea520ce827269", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98f18f047482c08f173e757c0521820ba2deea58/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f18f047482c08f173e757c0521820ba2deea58/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=98f18f047482c08f173e757c0521820ba2deea58", "patch": "@@ -1,8 +1,10 @@\n //! This module contains functions for retrieve the original AST from lowered `hir`.\n \n use rustc::hir;\n+use rustc::lint::LateContext;\n use syntax::ast;\n-use utils::{match_path, paths};\n+use syntax::ptr::P;\n+use utils::{is_expn_of, match_path, paths};\n \n /// Convert a hir binary operator to the corresponding `ast` type.\n pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {\n@@ -148,3 +150,41 @@ pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)>\n     }}\n     None\n }\n+\n+/// Represent the pre-expansion arguments of a `vec!` invocation.\n+pub enum VecArgs<'a> {\n+    /// `vec![elem; len]`\n+    Repeat(&'a P<hir::Expr>, &'a P<hir::Expr>),\n+    /// `vec![a, b, c]`\n+    Vec(&'a [P<hir::Expr>]),\n+}\n+\n+/// Returns the arguments of the `vec!` macro if this expression was expanded from `vec!`.\n+pub fn vec_macro<'e>(cx: &LateContext, expr: &'e hir::Expr) -> Option<VecArgs<'e>> {\n+    if_let_chain!{[\n+        let hir::ExprCall(ref fun, ref args) = expr.node,\n+        let hir::ExprPath(_, ref path) = fun.node,\n+        is_expn_of(cx, fun.span, \"vec\").is_some()\n+    ], {\n+        return if match_path(path, &paths::VEC_FROM_ELEM) && args.len() == 2 {\n+            // `vec![elem; size]` case\n+            Some(VecArgs::Repeat(&args[0], &args[1]))\n+        }\n+        else if match_path(path, &[\"into_vec\"]) && args.len() == 1 {\n+            // `vec![a, b, c]` case\n+            if_let_chain!{[\n+                let hir::ExprBox(ref boxed) = args[0].node,\n+                let hir::ExprVec(ref args) = boxed.node\n+            ], {\n+                return Some(VecArgs::Vec(&*args));\n+            }}\n+\n+            None\n+        }\n+        else {\n+            None\n+        };\n+    }}\n+\n+    None\n+}"}, {"sha": "8e09f9341c2dffb74b6523d0cc367a17e159a8c6", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/98f18f047482c08f173e757c0521820ba2deea58/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f18f047482c08f173e757c0521820ba2deea58/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=98f18f047482c08f173e757c0521820ba2deea58", "patch": "@@ -2,8 +2,7 @@ use rustc::lint::*;\n use rustc::ty::TypeVariants;\n use rustc::hir::*;\n use syntax::codemap::Span;\n-use syntax::ptr::P;\n-use utils::{higher, is_expn_of, match_path, paths, snippet, span_lint_and_then};\n+use utils::{higher, snippet, span_lint_and_then};\n \n /// **What it does:** This lint warns about using `&vec![..]` when using `&[..]` would be possible.\n ///\n@@ -51,12 +50,12 @@ impl LateLintPass for Pass {\n }\n \n fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n-    if let Some(vec_args) = unexpand(cx, vec) {\n+    if let Some(vec_args) = higher::vec_macro(cx, vec) {\n         let snippet = match vec_args {\n-            Args::Repeat(elem, len) => {\n+            higher::VecArgs::Repeat(elem, len) => {\n                 format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n             }\n-            Args::Vec(args) => {\n+            higher::VecArgs::Vec(args) => {\n                 if let Some(last) = args.iter().last() {\n                     let span = Span {\n                         lo: args[0].span.lo,\n@@ -77,40 +76,3 @@ fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n     }\n }\n \n-/// Represent the pre-expansion arguments of a `vec!` invocation.\n-pub enum Args<'a> {\n-    /// `vec![elem; len]`\n-    Repeat(&'a P<Expr>, &'a P<Expr>),\n-    /// `vec![a, b, c]`\n-    Vec(&'a [P<Expr>]),\n-}\n-\n-/// Returns the arguments of the `vec!` macro if this expression was expanded from `vec!`.\n-pub fn unexpand<'e>(cx: &LateContext, expr: &'e Expr) -> Option<Args<'e>> {\n-    if_let_chain!{[\n-        let ExprCall(ref fun, ref args) = expr.node,\n-        let ExprPath(_, ref path) = fun.node,\n-        is_expn_of(cx, fun.span, \"vec\").is_some()\n-    ], {\n-        return if match_path(path, &paths::VEC_FROM_ELEM) && args.len() == 2 {\n-            // `vec![elem; size]` case\n-            Some(Args::Repeat(&args[0], &args[1]))\n-        }\n-        else if match_path(path, &[\"into_vec\"]) && args.len() == 1 {\n-            // `vec![a, b, c]` case\n-            if_let_chain!{[\n-                let ExprBox(ref boxed) = args[0].node,\n-                let ExprVec(ref args) = boxed.node\n-            ], {\n-                return Some(Args::Vec(&*args));\n-            }}\n-\n-            None\n-        }\n-        else {\n-            None\n-        };\n-    }}\n-\n-    None\n-}"}]}