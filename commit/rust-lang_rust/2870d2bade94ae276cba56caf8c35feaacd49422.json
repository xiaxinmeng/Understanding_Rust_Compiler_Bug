{"sha": "2870d2bade94ae276cba56caf8c35feaacd49422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzBkMmJhZGU5NGFlMjc2Y2JhNTZjYWY4YzM1ZmVhYWNkNDk0MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T19:59:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T19:59:51Z"}, "message": "internal: add option to minicore", "tree": {"sha": "4f2e0f2f070d44d408d24a087d9fb9d06d499b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f2e0f2f070d44d408d24a087d9fb9d06d499b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2870d2bade94ae276cba56caf8c35feaacd49422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2870d2bade94ae276cba56caf8c35feaacd49422", "html_url": "https://github.com/rust-lang/rust/commit/2870d2bade94ae276cba56caf8c35feaacd49422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2870d2bade94ae276cba56caf8c35feaacd49422/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3efe5c3426a311b6d617f9718b82e9a598dfa06d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efe5c3426a311b6d617f9718b82e9a598dfa06d", "html_url": "https://github.com/rust-lang/rust/commit/3efe5c3426a311b6d617f9718b82e9a598dfa06d"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "6df8181ed094ce7c3b6d96872e3a81f5ea7fc5e4", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 6, "deletions": 40, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=2870d2bade94ae276cba56caf8c35feaacd49422", "patch": "@@ -26,25 +26,14 @@ fn test() {\n fn infer_async() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n-async fn foo() -> u64 {\n-            128\n-}\n+//- minicore: future\n+async fn foo() -> u64 { 128 }\n \n fn test() {\n     let r = foo();\n     let v = r.await;\n     v;\n } //^ u64\n-\n-//- /core.rs crate:core\n-#[prelude_import] use future::*;\n-mod future {\n-    #[lang = \"future_trait\"]\n-    trait Future {\n-        type Output;\n-    }\n-}\n \"#,\n     );\n }\n@@ -53,24 +42,13 @@ mod future {\n fn infer_desugar_async() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n-async fn foo() -> u64 {\n-            128\n-}\n+//- minicore: future\n+async fn foo() -> u64 { 128 }\n \n fn test() {\n     let r = foo();\n     r;\n } //^ impl Future<Output = u64>\n-\n-//- /core.rs crate:core\n-#[prelude_import] use future::*;\n-mod future {\n-    trait Future {\n-        type Output;\n-    }\n-}\n-\n \"#,\n     );\n }\n@@ -79,7 +57,7 @@ mod future {\n fn infer_async_block() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:core\n+//- minicore: future, option\n async fn test() {\n     let a = async { 42 };\n     a;\n@@ -91,26 +69,14 @@ async fn test() {\n     b;\n //  ^ ()\n     let c = async {\n-        let y = Option::None;\n+        let y = None;\n         y\n     //  ^ Option<u64>\n     };\n     let _: Option<u64> = c.await;\n     c;\n //  ^ impl Future<Output = Option<u64>>\n }\n-\n-enum Option<T> { None, Some(T) }\n-\n-//- /core.rs crate:core\n-#[prelude_import] use future::*;\n-mod future {\n-    #[lang = \"future_trait\"]\n-    trait Future {\n-        type Output;\n-    }\n-}\n-\n \"#,\n     );\n }"}, {"sha": "6ba112de8df265e9321f64cd79fd968725cbdf2a", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=2870d2bade94ae276cba56caf8c35feaacd49422", "patch": "@@ -198,6 +198,7 @@ impl MiniCore {\n         self.activated_flags.iter().any(|it| it == flag)\n     }\n \n+    #[track_caller]\n     fn assert_valid_flag(&self, flag: &str) {\n         if !self.valid_flags.iter().any(|it| it == flag) {\n             panic!(\"invalid flag: {:?}, valid flags: {:?}\", flag, self.valid_flags);\n@@ -299,6 +300,7 @@ impl MiniCore {\n             let skip = if flag == \"\" {\n                 false\n             } else {\n+                assert!(!flag.starts_with(' '), \"region marker starts with a space: {:?}\", flag);\n                 self.assert_valid_flag(flag);\n                 !self.has_flag(flag)\n             };"}, {"sha": "cb18c8796cf2e4143728f5eebb65ed32d18e0e94", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d2bade94ae276cba56caf8c35feaacd49422/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=2870d2bade94ae276cba56caf8c35feaacd49422", "patch": "@@ -16,6 +16,7 @@\n //!     coerce_unsized: unsize\n //!     pin:\n //!     future: pin\n+//!     option:\n \n pub mod marker {\n     // region:sized\n@@ -115,6 +116,17 @@ pub mod slice {\n }\n // endregion:slice\n \n+// region:option\n+pub mod option {\n+    pub enum Option<T> {\n+        #[lang = \"None\"]\n+        None,\n+        #[lang = \"Some\"]\n+        Some(T),\n+    }\n+}\n+// endregion:option\n+\n // region:pin\n pub mod pin {\n     #[lang = \"pin\"]\n@@ -127,7 +139,10 @@ pub mod pin {\n \n // region:future\n pub mod future {\n-    use crate::{pin::Pin, task::{Poll, Context}};\n+    use crate::{\n+        pin::Pin,\n+        task::{Context, Poll},\n+    };\n \n     #[lang = \"future_trait\"]\n     pub trait Future {\n@@ -153,6 +168,7 @@ pub mod task {\n pub mod prelude {\n     pub mod v1 {\n         pub use crate::marker::Sized; // :sized\n+        pub use crate::option::Option::{self, None, Some}; // :option\n     }\n \n     pub mod rust_2015 {"}]}