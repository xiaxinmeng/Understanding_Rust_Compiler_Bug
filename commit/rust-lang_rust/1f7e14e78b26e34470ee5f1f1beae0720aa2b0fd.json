{"sha": "1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "node_id": "C_kwDOAAsO6NoAKDFmN2UxNGU3OGIyNmUzNDQ3MGVlNWYxZjFiZWFlMDcyMGFhMmIwZmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T20:05:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T20:05:30Z"}, "message": "Fix multiple imports acting on files on separately", "tree": {"sha": "2f94ad5c20f5255b1073cd46a96ea571c5ceea61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f94ad5c20f5255b1073cd46a96ea571c5ceea61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "html_url": "https://github.com/rust-lang/rust/commit/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c8777a44001dcf87417abbb814e9977c381935", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c8777a44001dcf87417abbb814e9977c381935", "html_url": "https://github.com/rust-lang/rust/commit/d0c8777a44001dcf87417abbb814e9977c381935"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "647bbc8af542cfeff176d2e880c59cff15a90b2e", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=1f7e14e78b26e34470ee5f1f1beae0720aa2b0fd", "patch": "@@ -15,11 +15,13 @@ use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition,\n     helpers::{\n-        import_assets::{LocatedImport, NameToImport},\n-        insert_use::ImportScope,\n+        import_assets::NameToImport,\n+        insert_use::{self, ImportScope},\n+        mod_path_to_ast,\n     },\n     items_locator, RootDatabase,\n };\n+use syntax::algo;\n use text_edit::TextEdit;\n \n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n@@ -177,41 +179,35 @@ pub fn resolve_completion_edits(\n     position: FilePosition,\n     imports: impl IntoIterator<Item = (String, String)>,\n ) -> Option<Vec<TextEdit>> {\n+    let _p = profile::span(\"resolve_completion_edits\");\n     let ctx = CompletionContext::new(db, position, config)?;\n     let position_for_import = position_for_import(&ctx, None)?;\n     let scope = ImportScope::find_insert_use_container_with_macros(position_for_import, &ctx.sema)?;\n \n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();\n+    let new_ast = scope.clone_for_update();\n+    let mut import_insert = TextEdit::builder();\n \n-    Some(\n-        imports\n-            .into_iter()\n-            .filter_map(|(full_import_path, imported_name)| {\n-                let (import_path, item_to_import) = items_locator::items_with_name(\n-                    &ctx.sema,\n-                    current_crate,\n-                    NameToImport::Exact(imported_name),\n-                    items_locator::AssocItemSearch::Include,\n-                    Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n-                )\n-                .filter_map(|candidate| {\n-                    current_module\n-                        .find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n-                        .zip(Some(candidate))\n-                })\n-                .find(|(mod_path, _)| mod_path.to_string() == full_import_path)?;\n-                let import = LocatedImport::new(\n-                    import_path.clone(),\n-                    item_to_import,\n-                    item_to_import,\n-                    Some(import_path),\n-                );\n-\n-                ImportEdit { import, scope: scope.clone() }\n-                    .to_text_edit(config.insert_use)\n-                    .map(|edit| edit)\n+    // FIXME: lift out and make some tests here, this is ImportEdit::to_text_edit but changed to work with multiple edits\n+    imports.into_iter().for_each(|(full_import_path, imported_name)| {\n+        let items_with_name = items_locator::items_with_name(\n+            &ctx.sema,\n+            current_crate,\n+            NameToImport::Exact(imported_name),\n+            items_locator::AssocItemSearch::Include,\n+            Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT.inner()),\n+        );\n+        let import = items_with_name\n+            .filter_map(|candidate| {\n+                current_module.find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n             })\n-            .collect(),\n-    )\n+            .find(|mod_path| mod_path.to_string() == full_import_path);\n+        if let Some(import_path) = import {\n+            insert_use::insert_use(&new_ast, mod_path_to_ast(&import_path), &config.insert_use);\n+        }\n+    });\n+\n+    algo::diff(scope.as_syntax_node(), new_ast.as_syntax_node()).into_text_edit(&mut import_insert);\n+    Some(vec![import_insert.finish()])\n }"}]}