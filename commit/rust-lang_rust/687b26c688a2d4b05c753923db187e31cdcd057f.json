{"sha": "687b26c688a2d4b05c753923db187e31cdcd057f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4N2IyNmM2ODhhMmQ0YjA1Yzc1MzkyM2RiMTg3ZTMxY2RjZDA1N2Y=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-13T02:06:53Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-13T02:06:53Z"}, "message": "Add BracePos", "tree": {"sha": "3836a950d0166f9035e03242335a9ff33d99abb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3836a950d0166f9035e03242335a9ff33d99abb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/687b26c688a2d4b05c753923db187e31cdcd057f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/687b26c688a2d4b05c753923db187e31cdcd057f", "html_url": "https://github.com/rust-lang/rust/commit/687b26c688a2d4b05c753923db187e31cdcd057f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/687b26c688a2d4b05c753923db187e31cdcd057f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5f9533d0bad95d9293080c9e5ef1c374d3068a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5f9533d0bad95d9293080c9e5ef1c374d3068a", "html_url": "https://github.com/rust-lang/rust/commit/1f5f9533d0bad95d9293080c9e5ef1c374d3068a"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "8aa63261ce57baa11c717d7f895725d9defd7268", "filename": "src/items.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/687b26c688a2d4b05c753923db187e31cdcd057f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687b26c688a2d4b05c753923db187e31cdcd057f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=687b26c688a2d4b05c753923db187e31cdcd057f", "patch": "@@ -441,7 +441,11 @@ impl<'a> FmtVisitor<'a> {\n             &self.get_context(),\n             generics,\n             self.config.item_brace_style(),\n-            enum_def.variants.is_empty(),\n+            if enum_def.variants.is_empty() {\n+                BracePos::ForceSameLine\n+            } else {\n+                BracePos::Auto\n+            },\n             self.block_indent,\n             mk_sp(span.lo(), body_start),\n             last_line_width(&enum_header),\n@@ -1120,7 +1124,11 @@ pub fn format_struct_struct(\n             context,\n             g,\n             context.config.item_brace_style(),\n-            fields.is_empty(),\n+            if fields.is_empty() {\n+                BracePos::ForceSameLine\n+            } else {\n+                BracePos::Auto\n+            },\n             offset,\n             mk_sp(header_hi, body_lo),\n             last_line_width(&result),\n@@ -2778,11 +2786,18 @@ fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> S\n     format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n }\n \n+#[derive(PartialEq, Eq)]\n+enum BracePos {\n+    None,\n+    Auto,\n+    ForceSameLine,\n+}\n+\n fn format_generics(\n     context: &RewriteContext,\n     generics: &ast::Generics,\n     brace_style: BraceStyle,\n-    force_same_line_brace: bool,\n+    brace_pos: BracePos,\n     offset: Indent,\n     span: Span,\n     used_width: usize,\n@@ -2792,7 +2807,10 @@ fn format_generics(\n \n     let same_line_brace = if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = context.budget(last_line_used_width(&result, offset.width()));\n-        let option = WhereClauseOption::snuggled(&result);\n+        let mut option = WhereClauseOption::snuggled(&result);\n+        if brace_pos == BracePos::None {\n+            option.suppress_comma = true;\n+        }\n         // If the generics are not parameterized then generics.span.hi() == 0,\n         // so we use span.lo(), which is the position after `struct Foo`.\n         let span_end_before_where = if generics.is_parameterized() {\n@@ -2813,19 +2831,22 @@ fn format_generics(\n             false,\n         )?;\n         result.push_str(&where_clause_str);\n-        force_same_line_brace || brace_style == BraceStyle::PreferSameLine\n+        brace_pos == BracePos::ForceSameLine || brace_style == BraceStyle::PreferSameLine\n             || (generics.where_clause.predicates.is_empty()\n                 && trimmed_last_line_width(&result) == 1)\n     } else {\n-        force_same_line_brace || trimmed_last_line_width(&result) == 1\n+        brace_pos == BracePos::ForceSameLine || trimmed_last_line_width(&result) == 1\n             || brace_style != BraceStyle::AlwaysNextLine\n     };\n+    if brace_pos == BracePos::None {\n+        return Some(result);\n+    }\n     let total_used_width = last_line_used_width(&result, used_width);\n     let remaining_budget = context.budget(total_used_width);\n     // If the same line brace if forced, it indicates that we are rewriting an item with empty body,\n     // and hence we take the closer into account as well for one line budget.\n     // We assume that the closer has the same length as the opener.\n-    let overhead = if force_same_line_brace {\n+    let overhead = if brace_pos == BracePos::ForceSameLine {\n         // 3 = ` {}`\n         3\n     } else {"}]}