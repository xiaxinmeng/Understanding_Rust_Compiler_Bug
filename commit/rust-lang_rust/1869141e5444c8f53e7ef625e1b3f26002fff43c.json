{"sha": "1869141e5444c8f53e7ef625e1b3f26002fff43c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjkxNDFlNTQ0NGM4ZjUzZTdlZjYyNWUxYjNmMjYwMDJmZmY0M2M=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-28T17:15:53Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Reduce impl trait by using macro in `raw_fd.rs`", "tree": {"sha": "efb654ee3dd17fd63f0c5f4cabbf022b8e2baec4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb654ee3dd17fd63f0c5f4cabbf022b8e2baec4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1869141e5444c8f53e7ef625e1b3f26002fff43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1869141e5444c8f53e7ef625e1b3f26002fff43c", "html_url": "https://github.com/rust-lang/rust/commit/1869141e5444c8f53e7ef625e1b3f26002fff43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1869141e5444c8f53e7ef625e1b3f26002fff43c/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53791b3ff4322aec2a82a84952be91d1be4058b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53791b3ff4322aec2a82a84952be91d1be4058b5", "html_url": "https://github.com/rust-lang/rust/commit/53791b3ff4322aec2a82a84952be91d1be4058b5"}], "stats": {"total": 95, "additions": 34, "deletions": 61}, "files": [{"sha": "c42fee4c73bcde72def7340c9909dac50b1d9032", "filename": "library/std/src/sys/unix/ext/net/raw_fd.rs", "status": "modified", "additions": 34, "deletions": 61, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1869141e5444c8f53e7ef625e1b3f26002fff43c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1869141e5444c8f53e7ef625e1b3f26002fff43c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs?ref=1869141e5444c8f53e7ef625e1b3f26002fff43c", "patch": "@@ -2,66 +2,39 @@ use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n use crate::{net, sys};\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::TcpStream {\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self.as_inner().socket().as_inner()\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::TcpListener {\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self.as_inner().socket().as_inner()\n-    }\n-}\n+macro_rules! impl_as_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl AsRawFd for net::$t {\n+            fn as_raw_fd(&self) -> RawFd {\n+                *self.as_inner().socket().as_inner()\n+            }\n+        }\n+    )*};\n+}\n+impl_as_raw_fd! { TcpStream TcpListener UdpSocket }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::UdpSocket {\n-    fn as_raw_fd(&self) -> RawFd {\n-        *self.as_inner().socket().as_inner()\n-    }\n-}\n+macro_rules! impl_from_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+        impl FromRawFd for net::$t {\n+            unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n+                let socket = sys::net::Socket::from_inner(fd);\n+                net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n+            }\n+        }\n+    )*};\n+}\n+impl_from_raw_fd! { TcpStream TcpListener UdpSocket }\n \n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::TcpStream {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(socket))\n-    }\n-}\n-\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::TcpListener {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(socket))\n-    }\n-}\n-\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::UdpSocket {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n-    }\n-}\n-\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::TcpStream {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::TcpListener {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::UdpSocket {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}\n+macro_rules! impl_into_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+        impl IntoRawFd for net::$t {\n+            fn into_raw_fd(self) -> RawFd {\n+                self.into_inner().into_socket().into_inner()\n+            }\n+        }\n+    )*};\n+}\n+impl_into_raw_fd! { TcpStream TcpListener UdpSocket }"}]}