{"sha": "09a4b78775809677473b39505796785242bcee2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YTRiNzg3NzU4MDk2Nzc0NzNiMzk1MDU3OTY3ODUyNDJiY2VlMmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:46:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:46:00Z"}, "message": "Introduce ActiveParameter", "tree": {"sha": "395be2fc5c5fc6a13fa162121160357d2847cbdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395be2fc5c5fc6a13fa162121160357d2847cbdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a4b78775809677473b39505796785242bcee2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a4b78775809677473b39505796785242bcee2f", "html_url": "https://github.com/rust-lang/rust/commit/09a4b78775809677473b39505796785242bcee2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a4b78775809677473b39505796785242bcee2f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8e9d5483005844e711e2f6191274c3c6ae1c4a", "html_url": "https://github.com/rust-lang/rust/commit/4b8e9d5483005844e711e2f6191274c3c6ae1c4a"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "5da254a6e9a95a1bcf84ef2358069c2a069827d7", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=09a4b78775809677473b39505796785242bcee2f", "patch": "@@ -19,10 +19,24 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     call_info_for_token(&sema, token)\n }\n \n-pub(crate) fn call_info_for_token(\n-    sema: &Semantics<RootDatabase>,\n-    token: SyntaxToken,\n-) -> Option<CallInfo> {\n+#[derive(Debug)]\n+pub(crate) struct ActiveParameter {\n+    /// FIXME: should be `Type` and `Name\n+    pub(crate) ty: String,\n+    pub(crate) name: String,\n+}\n+\n+impl ActiveParameter {\n+    pub(crate) fn at(db: &RootDatabase, position: FilePosition) -> Option<Self> {\n+        call_info(db, position)?.into_active_parameter()\n+    }\n+\n+    pub(crate) fn at_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Self> {\n+        call_info_for_token(sema, token)?.into_active_parameter()\n+    }\n+}\n+\n+fn call_info_for_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<CallInfo> {\n     // Find the calling expression and it's NameRef\n     let calling_node = FnCallNode::with_node(&token.parent())?;\n \n@@ -160,6 +174,14 @@ impl FnCallNode {\n }\n \n impl CallInfo {\n+    fn into_active_parameter(self) -> Option<ActiveParameter> {\n+        let idx = self.active_parameter?;\n+        let ty = self.signature.parameter_types.get(idx)?.clone();\n+        let name = self.signature.parameter_names.get(idx)?.clone();\n+        let res = ActiveParameter { ty, name };\n+        Some(res)\n+    }\n+\n     fn with_fn(db: &RootDatabase, function: hir::Function) -> Self {\n         let signature = FunctionSignature::from_hir(db, function);\n "}, {"sha": "a76d1ce450d2435fbca0140a883a206b15d13f38", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=09a4b78775809677473b39505796785242bcee2f", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::{completion::CompletionConfig, FilePosition};\n+use crate::{call_info::ActiveParameter, completion::CompletionConfig, FilePosition};\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n@@ -21,7 +21,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) db: &'a RootDatabase,\n     pub(super) config: &'a CompletionConfig,\n     pub(super) offset: TextUnit,\n-    pub(super) file_position: FilePosition,\n     /// The token before the cursor, in the original file.\n     pub(super) original_token: SyntaxToken,\n     /// The token before the cursor, in the macro-expanded file.\n@@ -34,6 +33,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordField>,\n     pub(super) impl_def: Option<ast::ImplDef>,\n+    /// FIXME: `ActiveParameter` is string-based, which is very wrong\n+    pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n@@ -90,7 +91,6 @@ impl<'a> CompletionContext<'a> {\n             original_token,\n             token,\n             offset: position.offset,\n-            file_position: position,\n             krate,\n             name_ref_syntax: None,\n             function_syntax: None,\n@@ -99,6 +99,7 @@ impl<'a> CompletionContext<'a> {\n             record_pat_syntax: None,\n             record_field_syntax: None,\n             impl_def: None,\n+            active_parameter: ActiveParameter::at(db, position),\n             is_param: false,\n             is_pat_binding_or_const: false,\n             is_trivial_path: false,"}, {"sha": "6c0e32408dc82062185fc9d54ce6d8d132738422", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=09a4b78775809677473b39505796785242bcee2f", "patch": "@@ -6,7 +6,6 @@ use stdx::SepBy;\n use test_utils::tested_by;\n \n use crate::{\n-    call_info::call_info,\n     completion::{\n         completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n         CompletionKind, Completions,\n@@ -317,8 +316,8 @@ pub(crate) fn compute_score(\n             struct_field.name(ctx.db).to_string(),\n             struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n         )\n-    } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n-        (call_info.active_parameter_name()?, call_info.active_parameter_type()?)\n+    } else if let Some(active_parameter) = &ctx.active_parameter {\n+        (active_parameter.name.clone(), active_parameter.ty.clone())\n     } else {\n         return None;\n     };"}, {"sha": "f692fbaa2eb654cd5a1e7339ed44a2024bb8dc8e", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=09a4b78775809677473b39505796785242bcee2f", "patch": "@@ -129,21 +129,6 @@ pub struct CallInfo {\n     pub active_parameter: Option<usize>,\n }\n \n-impl CallInfo {\n-    pub fn active_parameter_type(&self) -> Option<String> {\n-        if let Some(id) = self.active_parameter {\n-            return self.signature.parameter_types.get(id).map(|param_ty| param_ty.clone());\n-        }\n-        None\n-    }\n-    pub fn active_parameter_name(&self) -> Option<String> {\n-        if let Some(id) = self.active_parameter {\n-            return self.signature.parameter_names.get(id).map(|param_ty| param_ty.clone());\n-        }\n-        None\n-    }\n-}\n-\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug)]\n pub struct AnalysisHost {"}, {"sha": "d9912155b99ccd456e686e8f2f0865a5a13d514d", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a4b78775809677473b39505796785242bcee2f/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=09a4b78775809677473b39505796785242bcee2f", "patch": "@@ -19,7 +19,7 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::{call_info::call_info_for_token, Analysis, FileId};\n+use crate::{call_info::ActiveParameter, Analysis, FileId};\n \n pub(crate) use html::highlight_as_html;\n pub use tags::{Highlight, HighlightModifier, HighlightModifiers, HighlightTag};\n@@ -364,10 +364,8 @@ fn highlight_injection(\n     literal: ast::RawString,\n     expanded: SyntaxToken,\n ) -> Option<()> {\n-    let call_info = call_info_for_token(&sema, expanded)?;\n-    let idx = call_info.active_parameter?;\n-    let name = call_info.signature.parameter_names.get(idx)?;\n-    if !name.starts_with(\"ra_fixture\") {\n+    let active_parameter = ActiveParameter::at_token(&sema, expanded)?;\n+    if !active_parameter.name.starts_with(\"ra_fixture\") {\n         return None;\n     }\n     let value = literal.value()?;"}]}