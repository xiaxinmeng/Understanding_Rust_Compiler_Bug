{"sha": "2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZTA5MGZhYWY2OTQ3NGEyYmFhZGYwNDk0ZWYzYzZlZDRmZGJjYmM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-18T21:11:56Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-18T21:11:56Z"}, "message": "Allow to disable import insertion on single path glob imports", "tree": {"sha": "e67e1f3404fefb2dc3999b94f86bc9cbcca33dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67e1f3404fefb2dc3999b94f86bc9cbcca33dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "html_url": "https://github.com/rust-lang/rust/commit/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "url": "https://api.github.com/repos/rust-lang/rust/commits/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887", "html_url": "https://github.com/rust-lang/rust/commit/84507a0b9c2e8f6e632ad9ec649cd1f21a7e0887"}], "stats": {"total": 116, "additions": 99, "deletions": 17}, "files": [{"sha": "6c73481781be99ffe09304e33449b078530aebbf", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -104,7 +104,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     ImportScope::File(it) => ImportScope::File(builder.make_mut(it)),\n                     ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n                 };\n-                insert_use(&scope, mod_path_to_ast(&import.import_path), ctx.config.insert_use);\n+                insert_use(&scope, mod_path_to_ast(&import.import_path), &ctx.config.insert_use);\n             },\n         );\n     }"}, {"sha": "da6df9106ca118c652d3d83bef9052903d6b5d7d", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -235,7 +235,7 @@ fn apply_references(\n     import: Option<(ImportScope, hir::ModPath)>,\n ) {\n     if let Some((scope, path)) = import {\n-        insert_use(&scope, mod_path_to_ast(&path), insert_use_cfg);\n+        insert_use(&scope, mod_path_to_ast(&path), &insert_use_cfg);\n     }\n     // deep clone to prevent cycle\n     let path = make::path_from_segments(iter::once(segment.clone_subtree()), false);"}, {"sha": "26019c793aab9903b667e9760d58b09894a6946d", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn replace_qualified_name_with_use(\n             let syntax = builder.make_syntax_mut(syntax.clone());\n             if let Some(ref import_scope) = ImportScope::from(syntax.clone()) {\n                 shorten_paths(&syntax, &path.clone_for_update());\n-                insert_use(import_scope, path, ctx.config.insert_use);\n+                insert_use(import_scope, path, &ctx.config.insert_use);\n             }\n         },\n     )"}, {"sha": "b6f224b21f2c6e70f9ef36ee7983116b538324e6", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -28,6 +28,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n         prefix_kind: hir::PrefixKind::Plain,\n         enforce_granularity: true,\n         group: true,\n+        skip_glob_imports: true,\n     },\n };\n "}, {"sha": "ae63d132e004e453fbad8a223462684473a51d63", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -378,7 +378,7 @@ impl ImportEdit {\n         let _p = profile::span(\"ImportEdit::to_text_edit\");\n \n         let new_ast = self.scope.clone_for_update();\n-        insert_use::insert_use(&new_ast, mod_path_to_ast(&self.import.import_path), cfg);\n+        insert_use::insert_use(&new_ast, mod_path_to_ast(&self.import.import_path), &cfg);\n         let mut import_insert = TextEdit::builder();\n         algo::diff(self.scope.as_syntax_node(), new_ast.as_syntax_node())\n             .into_text_edit(&mut import_insert);"}, {"sha": "211c89c40fe70f9a67bce20a6ca0b63404b8cd53", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -36,6 +36,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n         prefix_kind: PrefixKind::Plain,\n         enforce_granularity: true,\n         group: true,\n+        skip_glob_imports: true,\n     },\n };\n "}, {"sha": "4da058cb2d2d301c86d382037716d9e75ae07aef", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -36,6 +36,7 @@ pub struct InsertUseConfig {\n     pub enforce_granularity: bool,\n     pub prefix_kind: PrefixKind,\n     pub group: bool,\n+    pub skip_glob_imports: bool,\n }\n \n #[derive(Debug, Clone)]\n@@ -153,7 +154,7 @@ enum ImportGranularityGuess {\n }\n \n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n-pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig) {\n+pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     let _p = profile::span(\"insert_use\");\n     let mut mb = match cfg.granularity {\n         ImportGranularity::Crate => Some(MergeBehavior::Crate),\n@@ -175,7 +176,10 @@ pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig\n         make::use_(None, make::use_tree(path.clone(), None, None, false)).clone_for_update();\n     // merge into existing imports if possible\n     if let Some(mb) = mb {\n-        for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {\n+        let filter = |it: &_| !(cfg.skip_glob_imports && ast::Use::is_simple_glob(it));\n+        for existing_use in\n+            scope.as_syntax_node().children().filter_map(ast::Use::cast).filter(filter)\n+        {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 ted::replace(existing_use.syntax(), merged.syntax());\n                 return;"}, {"sha": "263edcdc92defdc7550ae60d358097dfb3827243", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -3,6 +3,23 @@ use super::*;\n use hir::PrefixKind;\n use test_utils::assert_eq_text;\n \n+#[test]\n+fn insert_skips_lone_glob_imports() {\n+    check(\n+        \"use foo::baz::A\",\n+        r\"\n+use foo::bar::*;\n+\",\n+        r\"\n+use foo::bar::*;\n+use foo::baz::A;\n+\",\n+        ImportGranularity::Crate,\n+        false,\n+        false,\n+    );\n+}\n+\n #[test]\n fn insert_not_group() {\n     cov_mark::check!(insert_no_grouping_last);\n@@ -534,17 +551,37 @@ fn merge_groups_self() {\n \n #[test]\n fn merge_mod_into_glob() {\n-    check_crate(\n+    check_with_config(\n         \"token::TokenKind\",\n         r\"use token::TokenKind::*;\",\n         r\"use token::TokenKind::{*, self};\",\n+        false,\n+        &InsertUseConfig {\n+            granularity: ImportGranularity::Crate,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group: false,\n+            skip_glob_imports: false,\n+        },\n     )\n     // FIXME: have it emit `use token::TokenKind::{self, *}`?\n }\n \n #[test]\n fn merge_self_glob() {\n-    check_crate(\"self\", r\"use self::*;\", r\"use self::{*, self};\")\n+    check_with_config(\n+        \"self\",\n+        r\"use self::*;\",\n+        r\"use self::{*, self};\",\n+        false,\n+        &InsertUseConfig {\n+            granularity: ImportGranularity::Crate,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group: false,\n+            skip_glob_imports: false,\n+        },\n+    )\n     // FIXME: have it emit `use {self, *}`?\n }\n \n@@ -757,13 +794,12 @@ use foo::bar::qux;\n     );\n }\n \n-fn check(\n+fn check_with_config(\n     path: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    granularity: ImportGranularity,\n     module: bool,\n-    group: bool,\n+    config: &InsertUseConfig,\n ) {\n     let mut syntax = ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone();\n     if module {\n@@ -777,18 +813,32 @@ fn check(\n         .find_map(ast::Path::cast)\n         .unwrap();\n \n-    insert_use(\n-        &file,\n+    insert_use(&file, path, config);\n+    let result = file.as_syntax_node().to_string();\n+    assert_eq_text!(ra_fixture_after, &result);\n+}\n+\n+fn check(\n+    path: &str,\n+    ra_fixture_before: &str,\n+    ra_fixture_after: &str,\n+    granularity: ImportGranularity,\n+    module: bool,\n+    group: bool,\n+) {\n+    check_with_config(\n         path,\n-        InsertUseConfig {\n+        ra_fixture_before,\n+        ra_fixture_after,\n+        module,\n+        &InsertUseConfig {\n             granularity,\n             enforce_granularity: true,\n             prefix_kind: PrefixKind::Plain,\n             group,\n+            skip_glob_imports: true,\n         },\n-    );\n-    let result = file.as_syntax_node().to_string();\n-    assert_eq_text!(ra_fixture_after, &result);\n+    )\n }\n \n fn check_crate(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {"}, {"sha": "16c295639e2e1425762b10f26f42d243461aafa9", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -44,6 +44,9 @@ config_data! {\n         assist_importPrefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n         /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n         assist_importGroup: bool                           = \"true\",\n+        /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n+        assist_allowMergingIntoGlobImports: bool           = \"true\",\n+\n         /// Show function name and docs in parameter hints.\n         callInfo_full: bool                                = \"true\",\n \n@@ -672,6 +675,7 @@ impl Config {\n                 ImportPrefixDef::BySelf => PrefixKind::BySelf,\n             },\n             group: self.data.assist_importGroup,\n+            skip_glob_imports: !self.data.assist_allowMergingIntoGlobImports,\n         }\n     }\n     pub fn completion(&self) -> CompletionConfig {"}, {"sha": "f8afc930aaa7acf6b5ae578e67447d15799ad6b6", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -143,6 +143,7 @@ fn integrated_completion_benchmark() {\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 enforce_granularity: true,\n                 group: true,\n+                skip_glob_imports: true,\n             },\n         };\n         let position =\n@@ -178,6 +179,7 @@ fn integrated_completion_benchmark() {\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 enforce_granularity: true,\n                 group: true,\n+                skip_glob_imports: true,\n             },\n         };\n         let position ="}, {"sha": "310d8c6d22a77097d562b83138d67a3434134593", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -1187,6 +1187,7 @@ mod tests {\n                         prefix_kind: PrefixKind::Plain,\n                         enforce_granularity: true,\n                         group: true,\n+                        skip_glob_imports: true,\n                     },\n                 },\n                 ide_db::base_db::FilePosition { file_id, offset },"}, {"sha": "3c92a486f9b56e7439f6360f1355f4012ba515f9", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -281,6 +281,15 @@ impl ast::Path {\n         successors(self.qualifier(), |p| p.qualifier())\n     }\n }\n+\n+impl ast::Use {\n+    pub fn is_simple_glob(&self) -> bool {\n+        self.use_tree()\n+            .map(|use_tree| use_tree.use_tree_list().is_none() && use_tree.star_token().is_some())\n+            .unwrap_or(false)\n+    }\n+}\n+\n impl ast::UseTree {\n     pub fn is_simple_path(&self) -> bool {\n         self.use_tree_list().is_none() && self.star_token().is_none()"}, {"sha": "18ea772669adefff0057923bb6bedf7760f212da", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -18,6 +18,11 @@ The path structure for newly inserted paths to use.\n --\n Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n --\n+[[rust-analyzer.assist.allowMergingIntoGlobImports]]rust-analyzer.assist.allowMergingIntoGlobImports (default: `true`)::\n++\n+--\n+Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n+--\n [[rust-analyzer.callInfo.full]]rust-analyzer.callInfo.full (default: `true`)::\n +\n --"}, {"sha": "c077bd2c0ad349d92e0cd76bba96e3c605950361", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=2ee090faaf69474a2baadf0494ef3c6ed4fdbcbc", "patch": "@@ -432,6 +432,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.assist.allowMergingIntoGlobImports\": {\n+                    \"markdownDescription\": \"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.callInfo.full\": {\n                     \"markdownDescription\": \"Show function name and docs in parameter hints.\",\n                     \"default\": true,"}]}