{"sha": "a143fb7a11695c45545e6a207f677bd1112032d7", "node_id": "C_kwDOAAsO6NoAKGExNDNmYjdhMTE2OTVjNDU1NDVlNmEyMDdmNjc3YmQxMTEyMDMyZDc", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-02-26T18:17:34Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2023-03-26T21:49:57Z"}, "message": "Avoid breaking exported API", "tree": {"sha": "1b02bc1d435729b4630b0ab7ecb806809c41bcd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b02bc1d435729b4630b0ab7ecb806809c41bcd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a143fb7a11695c45545e6a207f677bd1112032d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmQgvgUACgkQrtlL+hww\nE4kCzw//QY36Ye65vf9xmoxUHQPt1ZrOSdRqNT6rkoKP988/AUmzFJ8MyeHCpkAY\nJeWfT5Gwcy2UiUkBRMpucq/IGxLwK6WOuT23VsBBjH4r4whANQ8K2UVMjQRuqHZv\nF3jpIBwYOC8Lhs9LKuzIUGLkf1iyHu+/bRq3/DfDtd/4kkPFr+IaZOCLEOdYP/Qx\nvqlVzoE52lvWcSJMvRPb7FrP1zQS9YRzdNny2OEjZVT35xZSaPrP7MWzpVVZy4fu\np5uN1cok6VYVRSPOQ/yVykFHfDPXQnZ2h0nGUirfuFR0ZzTIl6om4Evj2BpyXkQh\n0ngok//I1MbhS/WNPYZZBubpTzgpWO0pDQyHDB29Iv0K3FqpNm2bcL9KUKr5sOZ5\niyxqhb4xslQ9Xhp6FPVjc8gNMaKzMuImfTJ+8DNVhtqyVFC29eTNgAhCim6A8Rm8\nQEEoJGixsQ7QCqbZ//yy/fWEzbDN+W448/ECMpcJYfYW1Zpl7avuQSR/TTs85b6V\ndlwD9uKip5YHZET9UJUrFvTKePzDZyaNyC7GP6A4x5U1pVFLXioMXNfA2yw86ewO\neDXnVdEyyzoOQt1SvJsKaubvTN6QctuSw5xfXGFPUArXgDqTjyJhfZC7Iz3kX0wr\nMWBDugZfHBM2mnhk6IDmytdwuQbeqWG0zOd47xfc4vvDkCKYvjc=\n=oYti\n-----END PGP SIGNATURE-----", "payload": "tree 1b02bc1d435729b4630b0ab7ecb806809c41bcd3\nparent 1b55c81db565d8e94146b9e2a7ed54f242e349ec\nauthor Micha White <botahamec@outlook.com> 1677435454 -0500\ncommitter Micha White <botahamec@outlook.com> 1679867397 -0400\n\nAvoid breaking exported API\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a143fb7a11695c45545e6a207f677bd1112032d7", "html_url": "https://github.com/rust-lang/rust/commit/a143fb7a11695c45545e6a207f677bd1112032d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a143fb7a11695c45545e6a207f677bd1112032d7/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b55c81db565d8e94146b9e2a7ed54f242e349ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b55c81db565d8e94146b9e2a7ed54f242e349ec", "html_url": "https://github.com/rust-lang/rust/commit/1b55c81db565d8e94146b9e2a7ed54f242e349ec"}], "stats": {"total": 108, "additions": 68, "deletions": 40}, "files": [{"sha": "dbd1a404150ac6b763947bbd6fa6d393accf13e1", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -130,6 +130,7 @@ Suppress lints whenever the suggested change would cause breakage for other crat\n * [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option)\n * [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist)\n * [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex)\n+* [unnecessary_box_returns](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns)\n \n \n ### msrv"}, {"sha": "117732c6efe90917f74c2767acb1aa6fc2598ff8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -941,7 +941,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n     store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n-    store.register_late_pass(|_| Box::new(unnecessary_box_returns::UnnecessaryBoxReturns));\n+    store.register_late_pass(move |_| {\n+        Box::new(unnecessary_box_returns::UnnecessaryBoxReturns::new(\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "10aee89606ddcac603c606033428d9d320ac4e5f", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::LocalDefId, FnDecl, FnRetTy, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -32,48 +32,66 @@ declare_clippy_lint! {\n     pedantic,\n     \"Needlessly returning a Box\"\n }\n-declare_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n \n-fn check_fn_decl(cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId) {\n-    let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n+pub struct UnnecessaryBoxReturns {\n+    avoid_breaking_exported_api: bool,\n+}\n \n-    let return_ty = cx\n-        .tcx\n-        .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n-        .output();\n+impl_lint_pass!(UnnecessaryBoxReturns => [UNNECESSARY_BOX_RETURNS]);\n \n-    if !return_ty.is_box() {\n-        return;\n+impl UnnecessaryBoxReturns {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n     }\n \n-    let boxed_ty = return_ty.boxed_ty();\n+    fn check_fn_decl(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, def_id: LocalDefId) {\n+        // we don't want to tell someone to break an exported function if they ask us not to\n+        if self.avoid_breaking_exported_api && cx.effective_visibilities.is_exported(def_id) {\n+            return;\n+        }\n+\n+        let FnRetTy::Return(return_ty_hir) = &decl.output else { return };\n+\n+        let return_ty = cx\n+            .tcx\n+            .erase_late_bound_regions(cx.tcx.fn_sig(def_id).skip_binder())\n+            .output();\n \n-    // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n-    if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n-        span_lint_and_then(\n-            cx,\n-            UNNECESSARY_BOX_RETURNS,\n-            return_ty_hir.span,\n-            format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n-            |diagnostic| {\n-                diagnostic.span_suggestion(\n-                    return_ty_hir.span,\n-                    \"try\",\n-                    boxed_ty.to_string(),\n-                    // the return value and function callers also needs to\n-                    // be changed, so this can't be MachineApplicable\n-                    Applicability::Unspecified,\n-                );\n-                diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n-            },\n-        );\n+        if !return_ty.is_box() {\n+            return;\n+        }\n+\n+        let boxed_ty = return_ty.boxed_ty();\n+\n+        // it's sometimes useful to return Box<T> if T is unsized, so don't lint those\n+        if boxed_ty.is_sized(cx.tcx, cx.param_env) {\n+            span_lint_and_then(\n+                cx,\n+                UNNECESSARY_BOX_RETURNS,\n+                return_ty_hir.span,\n+                format!(\"boxed return of the sized type `{boxed_ty}`\").as_str(),\n+                |diagnostic| {\n+                    diagnostic.span_suggestion(\n+                        return_ty_hir.span,\n+                        \"try\",\n+                        boxed_ty.to_string(),\n+                        // the return value and function callers also needs to\n+                        // be changed, so this can't be MachineApplicable\n+                        Applicability::Unspecified,\n+                    );\n+                    diagnostic.help(\"changing this also requires a change to the return expressions in this function\");\n+                },\n+            );\n+        }\n     }\n }\n \n impl LateLintPass<'_> for UnnecessaryBoxReturns {\n     fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n         let TraitItemKind::Fn(signature, _) = &item.kind else { return };\n-        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n@@ -86,11 +104,11 @@ impl LateLintPass<'_> for UnnecessaryBoxReturns {\n         }\n \n         let ImplItemKind::Fn(signature, ..) = &item.kind else { return };\n-        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let ItemKind::Fn(signature, ..) = &item.kind else { return };\n-        check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n+        self.check_fn_decl(cx, signature.decl, item.owner_id.def_id);\n     }\n }"}, {"sha": "5384ae01f926253bc168bf1017af54e22da5876d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -249,7 +249,7 @@ define_Conf! {\n     /// arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n     /// ```\n     (arithmetic_side_effects_allowed_unary: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX, UNNECESSARY_BOX_RETURNS.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}, {"sha": "f2f6aae380e9356b2d0920d22c162c54de75bc3b", "filename": "tests/ui/unnecessary_box_returns.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/tests%2Fui%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/tests%2Fui%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.rs?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -5,7 +5,7 @@ trait Bar {\n     fn baz(&self) -> Box<usize>;\n }\n \n-struct Foo {}\n+pub struct Foo {}\n \n impl Bar for Foo {\n     // don't lint: this is a problem with the trait, not the implementation\n@@ -27,7 +27,12 @@ fn boxed_usize() -> Box<usize> {\n }\n \n // lint\n-fn boxed_foo() -> Box<Foo> {\n+fn _boxed_foo() -> Box<Foo> {\n+    Box::new(Foo {})\n+}\n+\n+// don't lint: this is exported\n+pub fn boxed_foo() -> Box<Foo> {\n     Box::new(Foo {})\n }\n "}, {"sha": "0870af5f28f7b38cbf8c4ec06421c6c7559c44ef", "filename": "tests/ui/unnecessary_box_returns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a143fb7a11695c45545e6a207f677bd1112032d7/tests%2Fui%2Funnecessary_box_returns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a143fb7a11695c45545e6a207f677bd1112032d7/tests%2Fui%2Funnecessary_box_returns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_box_returns.stderr?ref=a143fb7a11695c45545e6a207f677bd1112032d7", "patch": "@@ -24,10 +24,10 @@ LL | fn boxed_usize() -> Box<usize> {\n    = help: changing this also requires a change to the return expressions in this function\n \n error: boxed return of the sized type `Foo`\n-  --> $DIR/unnecessary_box_returns.rs:30:19\n+  --> $DIR/unnecessary_box_returns.rs:30:20\n    |\n-LL | fn boxed_foo() -> Box<Foo> {\n-   |                   ^^^^^^^^ help: try: `Foo`\n+LL | fn _boxed_foo() -> Box<Foo> {\n+   |                    ^^^^^^^^ help: try: `Foo`\n    |\n    = help: changing this also requires a change to the return expressions in this function\n "}]}