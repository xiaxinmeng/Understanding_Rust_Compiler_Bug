{"sha": "40b511a7c591f6174ec2e22aaf68abd874a9b51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYjUxMWE3YzU5MWY2MTc0ZWMyZTIyYWFmNjhhYmQ4NzRhOWI1MWY=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-13T20:09:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-20T01:30:19Z"}, "message": "Revert 106216d67358f13f4be296ee59f711a1f1566bbe.\nThis depends on llvm's 131294.", "tree": {"sha": "1fc826f5be479127ab7eb4bc55f26433a25dd027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc826f5be479127ab7eb4bc55f26433a25dd027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40b511a7c591f6174ec2e22aaf68abd874a9b51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40b511a7c591f6174ec2e22aaf68abd874a9b51f", "html_url": "https://github.com/rust-lang/rust/commit/40b511a7c591f6174ec2e22aaf68abd874a9b51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40b511a7c591f6174ec2e22aaf68abd874a9b51f/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494c0c3b61bdcd3389789495fc91c74d6fcf4a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/494c0c3b61bdcd3389789495fc91c74d6fcf4a10", "html_url": "https://github.com/rust-lang/rust/commit/494c0c3b61bdcd3389789495fc91c74d6fcf4a10"}], "stats": {"total": 53, "additions": 14, "deletions": 39}, "files": [{"sha": "809f52713be89e873b7e8c09d26b799b57840052", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 39, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/40b511a7c591f6174ec2e22aaf68abd874a9b51f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40b511a7c591f6174ec2e22aaf68abd874a9b51f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=40b511a7c591f6174ec2e22aaf68abd874a9b51f", "patch": "@@ -457,7 +457,6 @@ fn T_tydesc(&type_names tn) -> TypeRef {\n }\n \n fn T_array(TypeRef t, uint n) -> TypeRef {\n-    assert (n != 0u);\n     ret llvm::LLVMArrayType(t, n);\n }\n \n@@ -466,7 +465,7 @@ fn T_vec(TypeRef t) -> TypeRef {\n                      T_int(),       // Alloc\n                      T_int(),       // Fill\n                      T_int(),       // Pad\n-                     T_array(t, 1u) // Body elements\n+                     T_array(t, 0u) // Body elements\n                      ]);\n }\n \n@@ -568,13 +567,7 @@ fn T_tag(&type_names tn, uint size) -> TypeRef {\n     if (tn.name_has_type(s)) {\n         ret tn.get_type(s);\n     }\n-\n-    auto t;\n-    if (size == 0u) {\n-        t = T_struct([T_int()]);\n-    } else {\n-        t = T_struct([T_int(), T_array(T_i8(), size)]);\n-    }\n+    auto t = T_struct([T_int(), T_array(T_i8(), size)]);\n \n     tn.associate(s, t);\n     ret t;\n@@ -1648,7 +1641,7 @@ fn linearize_ty_params(&@block_ctxt cx, &ty::t t) ->\n fn trans_stack_local_derived_tydesc(&@block_ctxt cx, ValueRef llsz,\n                                     ValueRef llalign,\n                                     ValueRef llroottydesc,\n-                                    &option::t[ValueRef] llparamtydescs)\n+                                    ValueRef llparamtydescs)\n         -> ValueRef {\n     auto llmyroottydesc = alloca(cx, T_tydesc(cx.fcx.lcx.ccx.tn));\n \n@@ -1657,19 +1650,8 @@ fn trans_stack_local_derived_tydesc(&@block_ctxt cx, ValueRef llsz,\n     cx.build.Store(llroottydesc, llmyroottydesc);\n \n     // Store a pointer to the rest of the descriptors.\n-    auto llrootfirstparam = cx.build.GEP(llmyroottydesc,\n-                                         [C_int(0), C_int(0)]);\n+    auto llfirstparam = cx.build.GEP(llparamtydescs, [C_int(0), C_int(0)]);\n \n-    auto llfirstparam;\n-    alt (llparamtydescs) {\n-        case (none[ValueRef]) {\n-            llfirstparam = C_null(val_ty(llrootfirstparam));\n-        }\n-        case (some[ValueRef](?llparamtydescs)) {\n-            llfirstparam = cx.build.GEP(llparamtydescs,\n-                                        [C_int(0), C_int(0)]);\n-        }\n-    }\n     cx.build.Store(llfirstparam,\n                    cx.build.GEP(llmyroottydesc, [C_int(0), C_int(0)]));\n \n@@ -1739,26 +1721,19 @@ fn get_derived_tydesc(&@block_ctxt cx, &ty::t t, bool escapes,\n                 lltydescsptr]);\n         v = td_val;\n     } else {\n-        auto llparamtydescs_opt;\n-        if (n_params == 0u) {\n-            llparamtydescs_opt = none[ValueRef];\n-        } else {\n-            auto llparamtydescs = alloca(bcx,\n-                T_array(T_ptr(T_tydesc(bcx.fcx.lcx.ccx.tn)), n_params));\n+        auto llparamtydescs = alloca(bcx,\n+              T_array(T_ptr(T_tydesc(bcx.fcx.lcx.ccx.tn)), n_params));\n \n-            auto i = 0;\n-            for (ValueRef td in tys._1) {\n-                auto tdp = bcx.build.GEP(llparamtydescs,\n-                                        [C_int(0), C_int(i)]);\n-                bcx.build.Store(td, tdp);\n-                i += 1;\n-            }\n-\n-            llparamtydescs_opt = some[ValueRef](llparamtydescs);\n+        auto i = 0;\n+        for (ValueRef td in tys._1) {\n+            auto tdp = bcx.build.GEP(llparamtydescs,\n+                                     [C_int(0), C_int(i)]);\n+            bcx.build.Store(td, tdp);\n+            i += 1;\n         }\n \n         v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n-                                             llparamtydescs_opt);\n+                                             llparamtydescs);\n     }\n \n     bcx.fcx.derived_tydescs.insert(t, rec(lltydesc=v, escapes=escapes));\n@@ -4539,7 +4514,7 @@ fn trans_index(&@block_ctxt cx, &ast::span sp, &@ast::expr base,\n     auto body = next_cx.build.GEP(v, [C_int(0), C_int(abi::vec_elt_data)]);\n     auto elt;\n     if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, unit_ty)) {\n-        body = next_cx.build.PointerCast(body, T_ptr(T_array(T_i8(), 1u)));\n+        body = next_cx.build.PointerCast(body, T_ptr(T_array(T_i8(), 0u)));\n         elt = next_cx.build.GEP(body, [C_int(0), scaled_ix]);\n     } else {\n         elt = next_cx.build.GEP(body, [C_int(0), ix_val]);"}]}