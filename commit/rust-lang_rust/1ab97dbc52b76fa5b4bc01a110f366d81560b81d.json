{"sha": "1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "node_id": "C_kwDOAAsO6NoAKDFhYjk3ZGJjNTJiNzZmYTViNGJjMDFhMTEwZjM2NmQ4MTU2MGI4MWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T03:09:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-27T03:09:44Z"}, "message": "add note suggesting that predicate is satisfied but is not const", "tree": {"sha": "6b90a98becd7c224ef22fd56d0618abd3dc95efe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b90a98becd7c224ef22fd56d0618abd3dc95efe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "html_url": "https://github.com/rust-lang/rust/commit/1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009c1d02484dcc18e1596a33b3d8989a90361c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/009c1d02484dcc18e1596a33b3d8989a90361c89", "html_url": "https://github.com/rust-lang/rust/commit/009c1d02484dcc18e1596a33b3d8989a90361c89"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "2d8ee549f48dd1231da910093feac1f782c29ecd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -803,6 +803,10 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n             p\n         });\n     }\n+\n+    pub fn is_const(self) -> bool {\n+        self.skip_binder().constness == BoundConstness::ConstIfConst\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -1388,6 +1392,10 @@ impl<'tcx> ParamEnv<'tcx> {\n         self.packed.tag().constness\n     }\n \n+    pub fn is_const(self) -> bool {\n+        self.packed.tag().constness == hir::Constness::Const\n+    }\n+\n     /// Construct a trait environment with no where-clauses in scope\n     /// where the values of all `impl Trait` and other hidden types\n     /// are revealed. This is suitable for monomorphized, post-typeck\n@@ -1503,6 +1511,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n             polarity: ty::ImplPolarity::Positive,\n         })\n     }\n+\n     #[inline]\n     pub fn without_const(self) -> PolyTraitPredicate<'tcx> {\n         self.with_constness(BoundConstness::NotConst)"}, {"sha": "081f823f851c6d8c4aae2d23120b61ddec92eba1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -439,6 +439,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n+\n+                        if trait_predicate.is_const() && obligation.param_env.is_const() {\n+                            let non_const_predicate = trait_ref.without_const();\n+                            let non_const_obligation = Obligation {\n+                                cause: obligation.cause.clone(),\n+                                param_env: obligation.param_env.without_const(),\n+                                predicate: non_const_predicate.to_predicate(tcx),\n+                                recursion_depth: obligation.recursion_depth,\n+                            };\n+                            if self.predicate_may_hold(&non_const_obligation) {\n+                                err.span_note(\n+                                    span,\n+                                    &format!(\n+                                        \"the trait `{}` is implemented for `{}`, \\\n+                                        but that implementation is not `const`\",\n+                                        non_const_predicate.print_modifiers_and_trait_path(),\n+                                        trait_ref.skip_binder().self_ty(),\n+                                    ),\n+                                );\n+                            }\n+                        }\n+\n                         if let Some((msg, span)) = type_def {\n                             err.span_label(span, &msg);\n                         }"}, {"sha": "06a7a2f63cf5a6408b97b774f617f109403bcd42", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -7,6 +7,11 @@ LL |     const_eval_select((), || {}, || {});\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `~const FnOnce<()>` is not implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`\n+note: the trait `FnOnce<()>` is implemented for `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]`, but that implementation is not `const`\n+  --> $DIR/const-eval-select-bad.rs:6:27\n+   |\n+LL |     const_eval_select((), || {}, || {});\n+   |                           ^^^^^\n    = note: wrap the `[closure@$DIR/const-eval-select-bad.rs:6:27: 6:32]` in a closure with no arguments: `|| { /* code */ }`\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL"}, {"sha": "0788b17a1c0327d53e3dd0730ce01d0d6496963b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -5,6 +5,11 @@ LL |     type Bar = NonConstAdd;\n    |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `~const Add` is not implemented for `NonConstAdd`\n+note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n+  --> $DIR/assoc-type.rs:18:16\n+   |\n+LL |     type Bar = NonConstAdd;\n+   |                ^^^^^^^^^^^\n note: required by a bound in `Foo::Bar`\n   --> $DIR/assoc-type.rs:14:15\n    |"}, {"sha": "35b7fe8e401c3162b674e93169a3c6b9d3566ee5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -7,6 +7,11 @@ LL | pub const EQ: bool = equals_self(&S);\n    |                      required by a bound introduced by this call\n    |\n    = help: the trait `~const PartialEq` is not implemented for `S`\n+note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-nonconst.rs:19:34\n+   |\n+LL | pub const EQ: bool = equals_self(&S);\n+   |                                  ^^\n note: required by a bound in `equals_self`\n   --> $DIR/call-generic-method-nonconst.rs:12:25\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "d280cd2556f06f6c0eeed84d923930f512e3b6a1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -28,6 +28,11 @@ LL |         const _: () = check($exp);\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n+note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:46:5\n+   |\n+LL |     ConstImplWithDropGlue(NonTrivialDrop),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n   --> $DIR/const-drop-fail.rs:17:8\n    |"}, {"sha": "bc807507fd6683fbf8deda4b6db4cc9aea466547", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n+note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+   |\n+LL |         foo::<()>();\n+   |               ^^\n note: required by a bound in `foo`\n   --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n    |"}, {"sha": "f9b5d81c63b85a420c3c591456a1e8cc60fe8655", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ab97dbc52b76fa5b4bc01a110f366d81560b81d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=1ab97dbc52b76fa5b4bc01a110f366d81560b81d", "patch": "@@ -4,6 +4,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::b();\n    |     ^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:14:5\n+   |\n+LL |     T::b();\n+   |     ^^^^\n note: required by a bound in `Foo::b`\n   --> $DIR/trait-where-clause.rs:8:24\n    |\n@@ -20,6 +25,11 @@ error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause.rs:16:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^\n note: required by a bound in `Foo::c`\n   --> $DIR/trait-where-clause.rs:9:13\n    |"}]}