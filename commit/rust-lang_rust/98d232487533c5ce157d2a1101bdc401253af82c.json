{"sha": "98d232487533c5ce157d2a1101bdc401253af82c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDIzMjQ4NzUzM2M1Y2UxNTdkMmExMTAxYmRjNDAxMjUzYWY4MmM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-01T21:30:38Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:38Z"}, "message": "Avoid cloning place in LocalAnalyzer visitor", "tree": {"sha": "f7a8f1f1703bc25e8746ef98aa3731cc62496416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7a8f1f1703bc25e8746ef98aa3731cc62496416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d232487533c5ce157d2a1101bdc401253af82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d232487533c5ce157d2a1101bdc401253af82c", "html_url": "https://github.com/rust-lang/rust/commit/98d232487533c5ce157d2a1101bdc401253af82c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d232487533c5ce157d2a1101bdc401253af82c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0accade3e094d3196dfdda94dee7d4a359fc130", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0accade3e094d3196dfdda94dee7d4a359fc130", "html_url": "https://github.com/rust-lang/rust/commit/d0accade3e094d3196dfdda94dee7d4a359fc130"}], "stats": {"total": 147, "additions": 91, "deletions": 56}, "files": [{"sha": "b569d64e2acd62a7b7f72261b32a3ff0d7bc54d2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98d232487533c5ce157d2a1101bdc401253af82c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d232487533c5ce157d2a1101bdc401253af82c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=98d232487533c5ce157d2a1101bdc401253af82c", "patch": "@@ -1826,6 +1826,12 @@ newtype_index! {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct PlaceRef<'a, 'tcx> {\n+    pub base: &'a PlaceBase<'tcx>,\n+    pub projection: &'a Option<Box<Projection<'tcx>>>,\n+}\n+\n impl<'tcx> Place<'tcx> {\n     pub const RETURN_PLACE: Place<'tcx> = Place {\n         base: PlaceBase::Local(RETURN_PLACE),"}, {"sha": "053b28e003c56983a8f22f970d7e1cd28524f4fd", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 85, "deletions": 56, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/98d232487533c5ce157d2a1101bdc401253af82c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d232487533c5ce157d2a1101bdc401253af82c/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=98d232487533c5ce157d2a1101bdc401253af82c", "patch": "@@ -92,6 +92,86 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             self.first_assignment[local] = location;\n         }\n     }\n+\n+    fn process_place(&mut self,\n+                     place_ref: &mir::PlaceRef<'_, 'tcx>,\n+                     context: PlaceContext,\n+                     location: Location) {\n+        let cx = self.fx.cx;\n+\n+        if let Some(proj) = place_ref.projection {\n+            // Allow uses of projections that are ZSTs or from scalar fields.\n+            let is_consume = match context {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n+                _ => false\n+            };\n+            if is_consume {\n+                let base_ty =\n+                    mir::Place::ty_from(place_ref.base, &proj.base, self.fx.mir, cx.tcx());\n+                let base_ty = self.fx.monomorphize(&base_ty);\n+\n+                // ZSTs don't require any actual memory access.\n+                let elem_ty = base_ty\n+                    .projection_ty(cx.tcx(), &proj.elem)\n+                    .ty;\n+                let elem_ty = self.fx.monomorphize(&elem_ty);\n+                if cx.layout_of(elem_ty).is_zst() {\n+                    return;\n+                }\n+\n+                if let mir::ProjectionElem::Field(..) = proj.elem {\n+                    let layout = cx.layout_of(base_ty.ty);\n+                    if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n+                        // Recurse with the same context, instead of `Projection`,\n+                        // potentially stopping at non-operand projections,\n+                        // which would trigger `not_ssa` on locals.\n+                        self.process_place(\n+                            &mir::PlaceRef {\n+                                base: place_ref.base,\n+                                projection: &proj.base,\n+                            },\n+                            context,\n+                            location,\n+                        );\n+                        return;\n+                    }\n+                }\n+            }\n+\n+            // A deref projection only reads the pointer, never needs the place.\n+            if let mir::ProjectionElem::Deref = proj.elem {\n+                self.process_place(\n+                    &mir::PlaceRef {\n+                        base: place_ref.base,\n+                        projection: &proj.base,\n+                    },\n+                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                    location\n+                );\n+                return;\n+            }\n+        }\n+\n+        // FIXME this is super_place code, is repeated here to avoid cloning place or changing\n+        // visit_place API\n+        let mut context = context;\n+\n+        if place_ref.projection.is_some() {\n+            context = if context.is_mutating_use() {\n+                PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+            } else {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+            };\n+        }\n+\n+        self.visit_place_base(place_ref.base, context, location);\n+\n+        if let Some(box proj) = place_ref.projection {\n+            self.visit_projection(place_ref.base, proj, context, location);\n+        }\n+    }\n+\n }\n \n impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n@@ -158,63 +238,12 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                    context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n-        let cx = self.fx.cx;\n-\n-        if let Some(proj) = &place.projection {\n-            // Allow uses of projections that are ZSTs or from scalar fields.\n-            let is_consume = match context {\n-                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n-                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n-                _ => false\n-            };\n-            if is_consume {\n-                let base_ty = mir::Place::ty_from(&place.base, &proj.base, self.fx.mir, cx.tcx());\n-                let base_ty = self.fx.monomorphize(&base_ty);\n-\n-                // ZSTs don't require any actual memory access.\n-                let elem_ty = base_ty\n-                    .projection_ty(cx.tcx(), &proj.elem)\n-                    .ty;\n-                let elem_ty = self.fx.monomorphize(&elem_ty);\n-                if cx.layout_of(elem_ty).is_zst() {\n-                    return;\n-                }\n-\n-                if let mir::ProjectionElem::Field(..) = proj.elem {\n-                    let layout = cx.layout_of(base_ty.ty);\n-                    if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n-                        // Recurse with the same context, instead of `Projection`,\n-                        // potentially stopping at non-operand projections,\n-                        // which would trigger `not_ssa` on locals.\n-                        self.visit_place(\n-                            // FIXME do not clone\n-                            &mir::Place {\n-                                base: place.base.clone(),\n-                                projection: proj.base.clone(),\n-                            },\n-                            context,\n-                            location,\n-                        );\n-                        return;\n-                    }\n-                }\n-            }\n-\n-            // A deref projection only reads the pointer, never needs the place.\n-            if let mir::ProjectionElem::Deref = proj.elem {\n-                return self.visit_place(\n-                    // FIXME do not clone\n-                    &mir::Place {\n-                        base: place.base.clone(),\n-                        projection: proj.base.clone(),\n-                    },\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                    location\n-                );\n-            }\n-        }\n \n-        self.super_place(place, context, location);\n+        let place_ref = mir::PlaceRef {\n+            base: &place.base,\n+            projection: &place.projection,\n+        };\n+        self.process_place(&place_ref, context, location);\n     }\n \n     fn visit_local(&mut self,"}]}