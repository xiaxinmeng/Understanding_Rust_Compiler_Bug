{"sha": "a332387b87f850fd3ac8474ff3fc9c83fd70167b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzIzODdiODdmODUwZmQzYWM4NDc0ZmYzZmM5YzgzZmQ3MDE2N2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T09:03:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T09:03:58Z"}, "message": "add a macro for static assertions", "tree": {"sha": "1553e3c10dc8ad68da7e69ad1e9c8cff536d79c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1553e3c10dc8ad68da7e69ad1e9c8cff536d79c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a332387b87f850fd3ac8474ff3fc9c83fd70167b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a332387b87f850fd3ac8474ff3fc9c83fd70167b", "html_url": "https://github.com/rust-lang/rust/commit/a332387b87f850fd3ac8474ff3fc9c83fd70167b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a332387b87f850fd3ac8474ff3fc9c83fd70167b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4623d4889373702428251967d9bf6ff6d677ec1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4623d4889373702428251967d9bf6ff6d677ec1a", "html_url": "https://github.com/rust-lang/rust/commit/4623d4889373702428251967d9bf6ff6d677ec1a"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "897e9cc2a381f2305c96a59bc15b3508833637d6", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=a332387b87f850fd3ac8474ff3fc9c83fd70167b", "patch": "@@ -62,6 +62,16 @@ macro_rules! span_bug {\n     })\n }\n \n+#[macro_export]\n+macro_rules! static_assert {\n+    ($name:ident: $test:expr) => {\n+        // Use the bool to access an array such that if the bool is false, the access\n+        // is out-of-bounds.\n+        #[allow(dead_code)]\n+        static $name: () = [()][!$test as usize];\n+    }\n+}\n+\n #[macro_export]\n macro_rules! __impl_stable_hash_field {\n     ($field:ident, $ctx:expr, $hasher:expr) => ($field.hash_stable($ctx, $hasher));"}, {"sha": "a90f03f536ad52d62cb4d7d419a92f14c997e4d7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=a332387b87f850fd3ac8474ff3fc9c83fd70167b", "patch": "@@ -167,8 +167,7 @@ newtype_index! {\n impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n-#[allow(dead_code)]\n-static ASSERT: () = [()][!(mem::size_of::<ScopeData>() == 4) as usize];\n+static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);\n \n impl Scope {\n     /// Returns a item-local id associated with this scope."}, {"sha": "f87e0f2b636a047ba971ac7479bafec644983b50", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a332387b87f850fd3ac8474ff3fc9c83fd70167b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a332387b87f850fd3ac8474ff3fc9c83fd70167b", "patch": "@@ -827,12 +827,9 @@ impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n         #[cfg(target_pointer_width = \"64\")]\n-        #[allow(dead_code)]\n-        static ASSERT_TY_KIND: () =\n-            [()][!(::std::mem::size_of::<ty::TyKind<'_>>() <= 24) as usize];\n+        static_assert!(ASSERT_TY_KIND: ::std::mem::size_of::<ty::TyKind<'_>>() <= 24);\n         #[cfg(target_pointer_width = \"64\")]\n-        #[allow(dead_code)]\n-        static ASSERT_TYS: () = [()][!(::std::mem::size_of::<ty::TyS<'_>>() <= 32) as usize];\n+        static_assert!(ASSERT_TYS: ::std::mem::size_of::<ty::TyS<'_>>() <= 32);\n \n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);\n         let mk_region = |r| {"}]}