{"sha": "6217ee12824574256ca22e848db9421210e0ceed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTdlZTEyODI0NTc0MjU2Y2EyMmU4NDhkYjk0MjEyMTBlMGNlZWQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-14T00:14:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-14T00:14:33Z"}, "message": "Add `EntryKind::TypeParam` and `EntryKind::ConstParam`", "tree": {"sha": "52b4ab175b40fdce8fb2af4bc09b264fe9a447cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b4ab175b40fdce8fb2af4bc09b264fe9a447cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6217ee12824574256ca22e848db9421210e0ceed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6217ee12824574256ca22e848db9421210e0ceed", "html_url": "https://github.com/rust-lang/rust/commit/6217ee12824574256ca22e848db9421210e0ceed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6217ee12824574256ca22e848db9421210e0ceed/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a23725e48617b797779971ca077742a1b984dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a23725e48617b797779971ca077742a1b984dc6", "html_url": "https://github.com/rust-lang/rust/commit/7a23725e48617b797779971ca077742a1b984dc6"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "ca76de613914d6f38c7f5df2d602a3c99446aa38", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=6217ee12824574256ca22e848db9421210e0ceed", "patch": "@@ -413,6 +413,8 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::ForeignFn(_) => Def::Fn(did),\n             EntryKind::Method(_) => Def::Method(did),\n             EntryKind::Type => Def::TyAlias(did),\n+            EntryKind::TypeParam => Def::TyParam(did),\n+            EntryKind::ConstParam => Def::ConstParam(did),\n             EntryKind::Existential => Def::Existential(did),\n             EntryKind::AssociatedType(_) => Def::AssociatedTy(did),\n             EntryKind::AssociatedExistential(_) => Def::AssociatedExistential(did),"}, {"sha": "1edcef8f14c62f553613de465f3d9c955afb1e78", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6217ee12824574256ca22e848db9421210e0ceed", "patch": "@@ -1308,26 +1308,22 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_info_for_ty_in_generic_param(\n+    fn encode_info_for_generic_param(\n         &mut self,\n-        (def_id, Untracked(encode_type)): (DefId, Untracked<bool>),\n+        def_id: DefId,\n+        entry_kind: EntryKind<'tcx>,\n+        encode_type: bool,\n     ) -> Entry<'tcx> {\n-        debug!(\"IsolatedEncoder::encode_info_for_ty_in_generic_param({:?})\", def_id);\n         let tcx = self.tcx;\n         Entry {\n-            kind: EntryKind::Type,\n+            kind: entry_kind,\n             visibility: self.lazy(&ty::Visibility::Public),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),\n             stability: None,\n             deprecation: None,\n-\n-            ty: if encode_type {\n-                Some(self.encode_item_type(def_id))\n-            } else {\n-                None\n-            },\n+            ty: if encode_type { Some(self.encode_item_type(def_id)) } else { None },\n             inherent_impls: LazySeq::empty(),\n             variances: LazySeq::empty(),\n             generics: None,\n@@ -1338,6 +1334,22 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n+    fn encode_info_for_ty_param(\n+        &mut self,\n+        (def_id, Untracked(encode_type)): (DefId, Untracked<bool>),\n+    ) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_ty_param({:?})\", def_id);\n+        self.encode_info_for_generic_param(def_id, EntryKind::TypeParam, encode_type)\n+    }\n+\n+    fn encode_info_for_const_param(\n+        &mut self,\n+        def_id: DefId,\n+    ) -> Entry<'tcx> {\n+        debug!(\"IsolatedEncoder::encode_info_for_const_param({:?})\", def_id);\n+        self.encode_info_for_generic_param(def_id, EntryKind::ConstParam, true)\n+    }\n+\n     fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -1682,17 +1694,20 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n         for param in &generics.params {\n-            let encode_type = match param.kind {\n-                GenericParamKind::Lifetime { .. } => continue,\n-                GenericParamKind::Type { ref default, .. } => default.is_some(),\n-                GenericParamKind::Const { .. } => true,\n-            };\n             let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n-            self.record(\n-                def_id,\n-                IsolatedEncoder::encode_info_for_ty_in_generic_param,\n-                (def_id, Untracked(encode_type)),\n-            );\n+            match param.kind {\n+                GenericParamKind::Lifetime { .. } => continue,\n+                GenericParamKind::Type { ref default, .. } => {\n+                    self.record(\n+                        def_id,\n+                        IsolatedEncoder::encode_info_for_ty_param,\n+                        (def_id, Untracked(default.is_some())),\n+                    );\n+                }\n+                GenericParamKind::Const { .. } => {\n+                    self.record(def_id, IsolatedEncoder::encode_info_for_const_param, def_id);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "ff97134df35fc983d07774ba5841e206edd32349", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6217ee12824574256ca22e848db9421210e0ceed/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=6217ee12824574256ca22e848db9421210e0ceed", "patch": "@@ -299,6 +299,8 @@ pub enum EntryKind<'tcx> {\n     ForeignType,\n     GlobalAsm,\n     Type,\n+    TypeParam,\n+    ConstParam,\n     Existential,\n     Enum(ReprOptions),\n     Field,\n@@ -335,7 +337,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n             EntryKind::ForeignType      |\n             EntryKind::Field |\n             EntryKind::Existential |\n-            EntryKind::Type => {\n+            EntryKind::Type |\n+            EntryKind::TypeParam |\n+            EntryKind::ConstParam => {\n                 // Nothing else to hash here.\n             }\n             EntryKind::Const(qualif, ref const_data) => {"}]}