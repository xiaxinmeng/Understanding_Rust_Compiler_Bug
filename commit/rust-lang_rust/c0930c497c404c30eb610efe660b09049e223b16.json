{"sha": "c0930c497c404c30eb610efe660b09049e223b16", "node_id": "C_kwDOAAsO6NoAKGMwOTMwYzQ5N2M0MDRjMzBlYjYxMGVmZTY2MGIwOTA0OWUyMjNiMTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-25T11:31:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T11:31:40Z"}, "message": "Rollup merge of #105552 - mattjperez:add-incompatible-types-note, r=compiler-errors\n\nAdd help message about function pointers\n\n#102608", "tree": {"sha": "62e3354673b57f35af4ab7092aeadbafe55a2a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e3354673b57f35af4ab7092aeadbafe55a2a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0930c497c404c30eb610efe660b09049e223b16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0RMcCRBK7hj4Ov3rIwAA1xsIAG0FHxXm8SOr5Cme+WryNP4r\ntzMWX9g7HfXh3XCeIRX5jzhnIlbsgBuim90Ze17/bhFzPRtm+u1tdgh16IO44Njv\ncW+LI8O9NA7apcEzZsdRo6OXDzpiCf0OcuWMHyBQXtW5aMjNwYlonH3h+Rl0a+ay\nSs1mTV7N/DIQpZrdbi0rh1haSqFnrEm4voT3x04Bjf2xTuiJJw3TfN/E4/vK3FIq\njMereqY52pDJucfYeIm2ev+ni9NociRUdQgql9Zn8Pm6wjKV1+bLfg11Q3Oew6BO\nAMNpBzshIxPqPl5oM1sC447H6JkyJxZNIUKx39wsN/28FML5QfKYYrdeyZZI+AI=\n=kZ2F\n-----END PGP SIGNATURE-----\n", "payload": "tree 62e3354673b57f35af4ab7092aeadbafe55a2a78\nparent c04832643d70479988a3ad9d92b63d9bc95e9c6d\nparent 1e22280f231e02b9ec8624e16b473b4082d7dfad\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674646300 +0530\ncommitter GitHub <noreply@github.com> 1674646300 +0530\n\nRollup merge of #105552 - mattjperez:add-incompatible-types-note, r=compiler-errors\n\nAdd help message about function pointers\n\n#102608\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0930c497c404c30eb610efe660b09049e223b16", "html_url": "https://github.com/rust-lang/rust/commit/c0930c497c404c30eb610efe660b09049e223b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0930c497c404c30eb610efe660b09049e223b16/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04832643d70479988a3ad9d92b63d9bc95e9c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04832643d70479988a3ad9d92b63d9bc95e9c6d", "html_url": "https://github.com/rust-lang/rust/commit/c04832643d70479988a3ad9d92b63d9bc95e9c6d"}, {"sha": "1e22280f231e02b9ec8624e16b473b4082d7dfad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e22280f231e02b9ec8624e16b473b4082d7dfad", "html_url": "https://github.com/rust-lang/rust/commit/1e22280f231e02b9ec8624e16b473b4082d7dfad"}], "stats": {"total": 369, "additions": 273, "deletions": 96}, "files": [{"sha": "1a0715a91cb0c0e8718401a00987bc54803ae36a", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -1613,12 +1613,14 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {\n                     self.note_unreachable_loop_return(&mut err, &expr, &visitor.ret_exprs);\n                 }\n+\n                 let reported = err.emit_unless(unsized_return);\n \n                 self.final_ty = Some(fcx.tcx.ty_error_with_guaranteed(reported));\n             }\n         }\n     }\n+\n     fn note_unreachable_loop_return(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "d02d77afa0a9fa0ae52bd33cdb40386aa647c7ae", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -81,7 +81,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.emit_type_mismatch_suggestions(err, expr, expr_ty, expected, expected_ty_expr, error);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n-        self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n         self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);"}, {"sha": "e9858aef6d0bf4513ae81fed05775cbac54e353d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -926,43 +926,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub(in super::super) fn note_need_for_fn_pointer(\n-        &self,\n-        err: &mut Diagnostic,\n-        expected: Ty<'tcx>,\n-        found: Ty<'tcx>,\n-    ) {\n-        let (sig, did, substs) = match (&expected.kind(), &found.kind()) {\n-            (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n-                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n-                if sig1 != sig2 {\n-                    return;\n-                }\n-                err.note(\n-                    \"different `fn` items always have unique types, even if their signatures are \\\n-                     the same\",\n-                );\n-                (sig1, *did1, substs1)\n-            }\n-            (ty::FnDef(did, substs), ty::FnPtr(sig2)) => {\n-                let sig1 = self.tcx.bound_fn_sig(*did).subst(self.tcx, substs);\n-                if sig1 != *sig2 {\n-                    return;\n-                }\n-                (sig1, *did, substs)\n-            }\n-            _ => return,\n-        };\n-        err.help(&format!(\"change the expected type to be function pointer `{}`\", sig));\n-        err.help(&format!(\n-            \"if the expected type is due to type inference, cast the expected `fn` to a function \\\n-             pointer: `{} as {}`\",\n-            self.tcx.def_path_str_with_substs(did, substs),\n-            sig\n-        ));\n-    }\n-\n     // Instantiates the given path, which must refer to an item with the given\n     // number of type parameters and type.\n     #[instrument(skip(self, span), level = \"debug\")]"}, {"sha": "212683a5429ed6449987a60cce82f7f2f316e602", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -1841,6 +1841,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                 self.suggest_accessing_field_where_appropriate(cause, &exp_found, diag);\n                 self.suggest_await_on_expect_found(cause, span, &exp_found, diag);\n+                self.suggest_function_pointers(cause, span, &exp_found, diag);\n             }\n         }\n \n@@ -2585,7 +2586,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     /// with the other type. A TyVar inference type is compatible with any type, and an IntVar or\n     /// FloatVar inference type are compatible with themselves or their concrete types (Int and\n     /// Float types, respectively). When comparing two ADTs, these rules apply recursively.\n-    pub fn same_type_modulo_infer(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+    pub fn same_type_modulo_infer<T: relate::Relate<'tcx>>(&self, a: T, b: T) -> bool {\n         let (a, b) = self.resolve_vars_if_possible((a, b));\n         SameTypeModuloInfer(self).relate(a, b).is_ok()\n     }"}, {"sha": "b2ab39630bdaf1a5919669f499380989feb915f5", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::traits::{\n     StatementAsExpression,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self as ty, Ty, TypeVisitable};\n+use rustc_middle::ty::{self as ty, IsSuggestable, Ty, TypeVisitable};\n use rustc_span::{sym, BytePos, Span};\n \n use crate::errors::SuggAddLetForLetChains;\n@@ -351,6 +351,82 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub(super) fn suggest_function_pointers(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        span: Span,\n+        exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n+        diag: &mut Diagnostic,\n+    ) {\n+        debug!(\"suggest_function_pointers(cause={:?}, exp_found={:?})\", cause, exp_found);\n+        let ty::error::ExpectedFound { expected, found } = exp_found;\n+        let expected_inner = expected.peel_refs();\n+        let found_inner = found.peel_refs();\n+        if !expected_inner.is_fn() || !found_inner.is_fn() {\n+            return;\n+        }\n+        match (&expected_inner.kind(), &found_inner.kind()) {\n+            (ty::FnPtr(sig), ty::FnDef(did, substs)) => {\n+                let expected_sig = &(self.normalize_fn_sig)(*sig);\n+                let found_sig =\n+                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+\n+                let fn_name = self.tcx.def_path_str_with_substs(*did, substs);\n+\n+                if !self.same_type_modulo_infer(*found_sig, *expected_sig)\n+                    || !sig.is_suggestable(self.tcx, true)\n+                    || ty::util::is_intrinsic(self.tcx, *did)\n+                {\n+                    return;\n+                }\n+\n+                let (msg, sugg) = match (expected.is_ref(), found.is_ref()) {\n+                    (true, false) => {\n+                        let msg = \"consider using a reference\";\n+                        let sug = format!(\"&{fn_name}\");\n+                        (msg, sug)\n+                    }\n+                    (false, true) => {\n+                        let msg = \"consider removing the reference\";\n+                        let sug = format!(\"{fn_name}\");\n+                        (msg, sug)\n+                    }\n+                    (true, true) => {\n+                        diag.note(\"fn items are distinct from fn pointers\");\n+                        let msg = \"consider casting to a fn pointer\";\n+                        let sug = format!(\"&({fn_name} as {sig})\");\n+                        (msg, sug)\n+                    }\n+                    (false, false) => {\n+                        diag.note(\"fn items are distinct from fn pointers\");\n+                        let msg = \"consider casting to a fn pointer\";\n+                        let sug = format!(\"{fn_name} as {sig}\");\n+                        (msg, sug)\n+                    }\n+                };\n+                diag.span_suggestion(span, msg, &sugg, Applicability::MaybeIncorrect);\n+            }\n+            (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n+                let expected_sig =\n+                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1));\n+                let found_sig =\n+                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2));\n+\n+                if self.same_type_modulo_infer(*found_sig, *expected_sig) {\n+                    diag.note(\n+                    \"different fn items have unique types, even if their signatures are the same\",\n+                    );\n+                }\n+            }\n+            (ty::FnDef(_, _), ty::FnPtr(_)) => {\n+                diag.note(\"fn items are distinct from fn pointers\");\n+            }\n+            _ => {\n+                return;\n+            }\n+        };\n+    }\n+\n     pub fn should_suggest_as_ref(&self, expected: Ty<'tcx>, found: Ty<'tcx>) -> Option<&str> {\n         if let (ty::Adt(exp_def, exp_substs), ty::Ref(_, found_ty, _)) =\n             (expected.kind(), found.kind())"}, {"sha": "f247ff6cf3f559f7be5bc07a5e5efccac9bd2147", "filename": "tests/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -19,6 +19,7 @@ LL |     let x = f == g;\n    |\n    = note: expected fn item `fn() {f}`\n               found fn item `fn() {g}`\n+   = note: different fn items have unique types, even if their signatures are the same\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6ebc867d284be59a383316218a6f644f455540a", "filename": "tests/ui/fn/fn-item-type.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -1,53 +1,52 @@\n // Test that the types of distinct fn items are not compatible by\n // default. See also `run-pass/fn-item-type-*.rs`.\n \n-fn foo<T>(x: isize) -> isize { x * 2 }\n-fn bar<T>(x: isize) -> isize { x * 4 }\n+fn foo<T>(x: isize) -> isize {\n+    x * 2\n+}\n+fn bar<T>(x: isize) -> isize {\n+    x * 4\n+}\n \n-fn eq<T>(x: T, y: T) { }\n+fn eq<T>(x: T, y: T) {}\n \n-trait Foo { fn foo() { /* this is a default fn */ } }\n-impl<T> Foo for T { /* `foo` is still default here */ }\n+trait Foo {\n+    fn foo() { /* this is a default fn */\n+    }\n+}\n+impl<T> Foo for T {\n+    /* `foo` is still default here */\n+}\n \n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n     //~| expected fn item `fn(_) -> _ {foo::<u8>}`\n     //~| found fn item `fn(_) -> _ {bar::<u8>}`\n     //~| expected fn item, found a different fn item\n-    //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expected type to be function pointer\n-    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n+    //~| different fn items have unique types, even if their signatures are the same\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `i8`\n-    //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expected type to be function pointer\n-    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n+    //~| different fn items have unique types, even if their signatures are the same\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n     //~| found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n     //~| expected struct `String`, found struct `Vec`\n-    //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expected type to be function pointer\n-    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n+    //~| different fn items have unique types, even if their signatures are the same\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `u16`\n-    //~| different `fn` items always have unique types, even if their signatures are the same\n-    //~| change the expected type to be function pointer\n-    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n+    //~| different fn items have unique types, even if their signatures are the same\n \n     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n     //~^ ERROR mismatched types\n     //~| found fn pointer `fn(_) -> _`\n     //~| expected fn item, found fn pointer\n-    //~| change the expected type to be function pointer\n-    //~| if the expected type is due to type inference, cast the expected `fn` to a function pointer\n \n     eq(foo::<u8> as fn(isize) -> isize, bar::<u8>); // ok!\n }"}, {"sha": "cb1b88c7ab8f3519352fb4fb715d0f4c0fc95a5b", "filename": "tests/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:13:19\n+  --> $DIR/fn-item-type.rs:22:19\n    |\n LL |     eq(foo::<u8>, bar::<u8>);\n    |     --            ^^^^^^^^^ expected fn item, found a different fn item\n@@ -8,17 +8,15 @@ LL |     eq(foo::<u8>, bar::<u8>);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {bar::<u8>}`\n-   = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expected type to be function pointer `fn(isize) -> isize`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = note: different fn items have unique types, even if their signatures are the same\n note: function defined here\n-  --> $DIR/fn-item-type.rs:7:4\n+  --> $DIR/fn-item-type.rs:11:4\n    |\n-LL | fn eq<T>(x: T, y: T) { }\n+LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:22:19\n+  --> $DIR/fn-item-type.rs:29:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n    |     --            ^^^^^^^^^ expected `u8`, found `i8`\n@@ -27,17 +25,15 @@ LL |     eq(foo::<u8>, foo::<i8>);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n               found fn item `fn(_) -> _ {foo::<i8>}`\n-   = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expected type to be function pointer `fn(isize) -> isize`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = note: different fn items have unique types, even if their signatures are the same\n note: function defined here\n-  --> $DIR/fn-item-type.rs:7:4\n+  --> $DIR/fn-item-type.rs:11:4\n    |\n-LL | fn eq<T>(x: T, y: T) { }\n+LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:29:23\n+  --> $DIR/fn-item-type.rs:34:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |     --                ^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n@@ -46,17 +42,15 @@ LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |\n    = note: expected fn item `fn(_) -> _ {bar::<String>}`\n               found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n-   = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expected type to be function pointer `fn(isize) -> isize`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `bar::<String> as fn(isize) -> isize`\n+   = note: different fn items have unique types, even if their signatures are the same\n note: function defined here\n-  --> $DIR/fn-item-type.rs:7:4\n+  --> $DIR/fn-item-type.rs:11:4\n    |\n-LL | fn eq<T>(x: T, y: T) { }\n+LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:38:26\n+  --> $DIR/fn-item-type.rs:41:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |     --                   ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n@@ -65,17 +59,15 @@ LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |\n    = note: expected fn item `fn() {<u8 as Foo>::foo}`\n               found fn item `fn() {<u16 as Foo>::foo}`\n-   = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expected type to be function pointer `fn()`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `<u8 as Foo>::foo as fn()`\n+   = note: different fn items have unique types, even if their signatures are the same\n note: function defined here\n-  --> $DIR/fn-item-type.rs:7:4\n+  --> $DIR/fn-item-type.rs:11:4\n    |\n-LL | fn eq<T>(x: T, y: T) { }\n+LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:45:19\n+  --> $DIR/fn-item-type.rs:46:19\n    |\n LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |     --            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer\n@@ -84,12 +76,11 @@ LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |\n    = note: expected fn item `fn(_) -> _ {foo::<u8>}`\n            found fn pointer `fn(_) -> _`\n-   = help: change the expected type to be function pointer `fn(isize) -> isize`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `foo::<u8> as fn(isize) -> isize`\n+   = note: fn items are distinct from fn pointers\n note: function defined here\n-  --> $DIR/fn-item-type.rs:7:4\n+  --> $DIR/fn-item-type.rs:11:4\n    |\n-LL | fn eq<T>(x: T, y: T) { }\n+LL | fn eq<T>(x: T, y: T) {}\n    |    ^^          ----\n \n error: aborting due to 5 previous errors"}, {"sha": "0597478cb4292a6a4d1f698bbc05b56d36ff2565", "filename": "tests/ui/fn/fn-pointer-mismatch.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.rs?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -0,0 +1,56 @@\n+fn foo(x: u32) -> u32 {\n+    x * 2\n+}\n+\n+fn bar(x: u32) -> u32 {\n+    x * 3\n+}\n+\n+// original example from Issue #102608\n+fn foobar(n: u32) -> u32 {\n+    let g = if n % 2 == 0 { &foo } else { &bar };\n+    //~^ ERROR `if` and `else` have incompatible types\n+    //~| different fn items have unique types, even if their signatures are the same\n+    g(n)\n+}\n+\n+fn main() {\n+    assert_eq!(foobar(7), 21);\n+    assert_eq!(foobar(8), 16);\n+\n+    // general mismatch of fn item types\n+    let mut a = foo;\n+    a = bar;\n+    //~^ ERROR mismatched types\n+    //~| expected fn item `fn(_) -> _ {foo}`\n+    //~| found fn item `fn(_) -> _ {bar}`\n+    //~| different fn items have unique types, even if their signatures are the same\n+\n+    // display note even when boxed\n+    let mut b = Box::new(foo);\n+    b = Box::new(bar);\n+    //~^ ERROR mismatched types\n+    //~| different fn items have unique types, even if their signatures are the same\n+\n+    // suggest removing reference\n+    let c: fn(u32) -> u32 = &foo;\n+    //~^ ERROR mismatched types\n+    //~| expected fn pointer `fn(u32) -> u32`\n+    //~| found reference `&fn(u32) -> u32 {foo}`\n+\n+    // suggest using reference\n+    let d: &fn(u32) -> u32 = foo;\n+    //~^ ERROR mismatched types\n+    //~| expected reference `&fn(u32) -> u32`\n+    //~| found fn item `fn(u32) -> u32 {foo}`\n+\n+    // suggest casting with reference\n+    let e: &fn(u32) -> u32 = &foo;\n+    //~^ ERROR mismatched types\n+    //~| expected reference `&fn(u32) -> u32`\n+    //~| found reference `&fn(u32) -> u32 {foo}`\n+\n+    // OK\n+    let mut z: fn(u32) -> u32 = foo as fn(u32) -> u32;\n+    z = bar;\n+}"}, {"sha": "2dc0710e27e4660a6f8ce6ee28018d463c1d6b12", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -0,0 +1,81 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/fn-pointer-mismatch.rs:11:43\n+   |\n+LL |     let g = if n % 2 == 0 { &foo } else { &bar };\n+   |                             ----          ^^^^ expected fn item, found a different fn item\n+   |                             |\n+   |                             expected because of this\n+   |\n+   = note: expected reference `&fn(u32) -> u32 {foo}`\n+              found reference `&fn(u32) -> u32 {bar}`\n+   = note: different fn items have unique types, even if their signatures are the same\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-pointer-mismatch.rs:23:9\n+   |\n+LL |     let mut a = foo;\n+   |                 --- expected due to this value\n+LL |     a = bar;\n+   |         ^^^ expected fn item, found a different fn item\n+   |\n+   = note: expected fn item `fn(_) -> _ {foo}`\n+              found fn item `fn(_) -> _ {bar}`\n+   = note: different fn items have unique types, even if their signatures are the same\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-pointer-mismatch.rs:31:18\n+   |\n+LL |     b = Box::new(bar);\n+   |         -------- ^^^ expected fn item, found a different fn item\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected fn item `fn(_) -> _ {foo}`\n+              found fn item `fn(_) -> _ {bar}`\n+   = note: different fn items have unique types, even if their signatures are the same\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-pointer-mismatch.rs:36:29\n+   |\n+LL |     let c: fn(u32) -> u32 = &foo;\n+   |            --------------   ^^^^\n+   |            |                |\n+   |            |                expected fn pointer, found reference\n+   |            |                help: consider removing the reference: `foo`\n+   |            expected due to this\n+   |\n+   = note: expected fn pointer `fn(u32) -> u32`\n+               found reference `&fn(u32) -> u32 {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-pointer-mismatch.rs:42:30\n+   |\n+LL |     let d: &fn(u32) -> u32 = foo;\n+   |            ---------------   ^^^\n+   |            |                 |\n+   |            |                 expected `&fn(u32) -> u32`, found fn item\n+   |            |                 help: consider using a reference: `&foo`\n+   |            expected due to this\n+   |\n+   = note: expected reference `&fn(u32) -> u32`\n+                found fn item `fn(u32) -> u32 {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-pointer-mismatch.rs:48:30\n+   |\n+LL |     let e: &fn(u32) -> u32 = &foo;\n+   |            ---------------   ^^^^\n+   |            |                 |\n+   |            |                 expected fn pointer, found fn item\n+   |            |                 help: consider casting to a fn pointer: `&(foo as fn(u32) -> u32)`\n+   |            expected due to this\n+   |\n+   = note: expected reference `&fn(u32) -> u32`\n+              found reference `&fn(u32) -> u32 {foo}`\n+   = note: fn items are distinct from fn pointers\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "310b6c224e0e77decd21ddab61faa77db891a777", "filename": "tests/ui/reify-intrinsic.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freify-intrinsic.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -23,9 +23,7 @@ LL |         std::intrinsics::unlikely,\n    |\n    = note: expected fn item `extern \"rust-intrinsic\" fn(_) -> _ {likely}`\n               found fn item `extern \"rust-intrinsic\" fn(_) -> _ {unlikely}`\n-   = note: different `fn` items always have unique types, even if their signatures are the same\n-   = help: change the expected type to be function pointer `extern \"rust-intrinsic\" fn(bool) -> bool`\n-   = help: if the expected type is due to type inference, cast the expected `fn` to a function pointer: `likely as extern \"rust-intrinsic\" fn(bool) -> bool`\n+   = note: different fn items have unique types, even if their signatures are the same\n \n error: aborting due to 3 previous errors\n "}, {"sha": "07f6dc906c6bbf9bc56c6231b2c1371768a3c08f", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -5,12 +5,15 @@ LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here\n ...\n LL |     let foo: fn() = foo;\n-   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n-   |              |\n+   |              ----   ^^^\n+   |              |      |\n+   |              |      cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |      help: consider casting to a fn pointer: `foo as fn()`\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `fn() {foo}`\n+   = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n \n error: aborting due to previous error"}, {"sha": "07f6dc906c6bbf9bc56c6231b2c1371768a3c08f", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -5,12 +5,15 @@ LL | #[target_feature(enable = \"sse2\")]\n    | ---------------------------------- `#[target_feature]` added here\n ...\n LL |     let foo: fn() = foo;\n-   |              ----   ^^^ cannot coerce functions with `#[target_feature]` to safe function pointers\n-   |              |\n+   |              ----   ^^^\n+   |              |      |\n+   |              |      cannot coerce functions with `#[target_feature]` to safe function pointers\n+   |              |      help: consider casting to a fn pointer: `foo as fn()`\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `fn() {foo}`\n+   = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n \n error: aborting due to previous error"}, {"sha": "f68939d0ec8c91b56858f119aa88816cf9640af2", "filename": "tests/ui/static/static-reference-to-fn-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0930c497c404c30eb610efe660b09049e223b16/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr?ref=c0930c497c404c30eb610efe660b09049e223b16", "patch": "@@ -2,10 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/static-reference-to-fn-1.rs:17:15\n    |\n LL |         func: &foo,\n-   |               ^^^^ expected fn pointer, found fn item\n+   |               ^^^^\n+   |               |\n+   |               expected fn pointer, found fn item\n+   |               help: consider casting to a fn pointer: `&(foo as fn() -> Option<isize>)`\n    |\n    = note: expected reference `&fn() -> Option<isize>`\n               found reference `&fn() -> Option<isize> {foo}`\n+   = note: fn items are distinct from fn pointers\n \n error: aborting due to previous error\n "}]}