{"sha": "d1310dc6c989e191d85c73c943d4175fbf1dccb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzEwZGM2Yzk4OWUxOTFkODVjNzNjOTQzZDQxNzVmYmYxZGNjYjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-22T15:38:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-03T08:28:06Z"}, "message": "proc_macro: Add `Span::mixed_site` exposing `macro_rules` hygiene", "tree": {"sha": "d0ca6fac9bdb651e328a8a6990c16208ad5dc43a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ca6fac9bdb651e328a8a6990c16208ad5dc43a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1310dc6c989e191d85c73c943d4175fbf1dccb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1310dc6c989e191d85c73c943d4175fbf1dccb8", "html_url": "https://github.com/rust-lang/rust/commit/d1310dc6c989e191d85c73c943d4175fbf1dccb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1310dc6c989e191d85c73c943d4175fbf1dccb8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6293e359848c8c7275330719b33ccd168df04c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6293e359848c8c7275330719b33ccd168df04c3", "html_url": "https://github.com/rust-lang/rust/commit/c6293e359848c8c7275330719b33ccd168df04c3"}], "stats": {"total": 214, "additions": 179, "deletions": 35}, "files": [{"sha": "c26b59f473c36d5ebe13b87e9cd9c51341637ab5", "filename": "src/libproc_macro/bridge/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -148,6 +148,7 @@ macro_rules! with_api {\n                 fn debug($self: $S::Span) -> String;\n                 fn def_site() -> $S::Span;\n                 fn call_site() -> $S::Span;\n+                fn mixed_site() -> $S::Span;\n                 fn source_file($self: $S::Span) -> $S::SourceFile;\n                 fn parent($self: $S::Span) -> Option<$S::Span>;\n                 fn source($self: $S::Span) -> $S::Span;"}, {"sha": "e199670b561c2b9bad94061a7aca42f1e944bea4", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -271,6 +271,15 @@ impl Span {\n         Span(bridge::client::Span::call_site())\n     }\n \n+    /// A span that represents `macro_rules` hygiene, and sometimes resolves at the macro\n+    /// definition site (local variables, labels, `$crate`) and sometimes at the macro\n+    /// call site (everything else).\n+    /// The span location is taken from the call-site.\n+    #[unstable(feature = \"proc_macro_mixed_site\", issue = \"65049\")]\n+    pub fn mixed_site() -> Span {\n+        Span(bridge::client::Span::mixed_site())\n+    }\n+\n     /// The original source file into which this span points.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {"}, {"sha": "583fb3f770183a8b241a60e7431de12f58688d36", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -953,6 +953,12 @@ impl<'a> ExtCtxt<'a> {\n         span.with_call_site_ctxt(self.current_expansion.id)\n     }\n \n+    /// Equivalent of `Span::mixed_site` from the proc macro API,\n+    /// except that the location is taken from the span passed as an argument.\n+    pub fn with_mixed_site_ctxt(&self, span: Span) -> Span {\n+        span.with_mixed_site_ctxt(self.current_expansion.id)\n+    }\n+\n     /// Returns span for the macro which originally caused the current expansion to happen.\n     ///\n     /// Stops backtracing at include! boundary."}, {"sha": "021ec46d987cfc339d78c188753fb2b3bf23cffe", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -355,6 +355,7 @@ pub(crate) struct Rustc<'a> {\n     sess: &'a ParseSess,\n     def_site: Span,\n     call_site: Span,\n+    mixed_site: Span,\n }\n \n impl<'a> Rustc<'a> {\n@@ -364,6 +365,7 @@ impl<'a> Rustc<'a> {\n             sess: cx.parse_sess,\n             def_site: cx.with_def_site_ctxt(expn_data.def_site),\n             call_site: cx.with_call_site_ctxt(expn_data.call_site),\n+            mixed_site: cx.with_mixed_site_ctxt(expn_data.call_site),\n         }\n     }\n \n@@ -664,6 +666,9 @@ impl server::Span for Rustc<'_> {\n     fn call_site(&mut self) -> Self::Span {\n         self.call_site\n     }\n+    fn mixed_site(&mut self) -> Self::Span {\n+        self.mixed_site\n+    }\n     fn source_file(&mut self, span: Self::Span) -> Self::SourceFile {\n         self.sess.source_map().lookup_char_pos(span.lo()).file\n     }"}, {"sha": "30ee9b90515ee4dd7e075255b8f7a54450886999", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -526,6 +526,12 @@ impl Span {\n         self.with_ctxt_from_mark(expn_id, Transparency::Transparent)\n     }\n \n+    /// Equivalent of `Span::mixed_site` from the proc macro API,\n+    /// except that the location is taken from the `self` span.\n+    pub fn with_mixed_site_ctxt(&self, expn_id: ExpnId) -> Span {\n+        self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)\n+    }\n+\n     /// Produces a span with the same location as `self` and context produced by a macro with the\n     /// given ID and transparency, assuming that macro was defined directly and not produced by\n     /// some other macro (which is the case for built-in and procedural macros)."}, {"sha": "dea5ea04aa8505155a5f2138a368782af1ef8698", "filename": "src/test/ui/proc-macro/auxiliary/mixed-site-span.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmixed-site-span.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -0,0 +1,42 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_hygiene)]\n+#![feature(proc_macro_mixed_site)]\n+#![feature(proc_macro_quote)]\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n+    if input.is_empty() {\n+        let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n+        let item_def = id(\"ItemDef\");\n+        let local_def = id(\"local_def\");\n+        let item_use = id(\"ItemUse\");\n+        let local_use = id(\"local_use\");\n+        let mut single_quote = Punct::new('\\'', Spacing::Joint);\n+        single_quote.set_span(Span::mixed_site());\n+        let label_use: TokenStream = [\n+            TokenTree::from(single_quote),\n+            id(\"label_use\"),\n+        ].iter().cloned().collect();\n+        quote!(\n+            struct $item_def;\n+            let $local_def = 0;\n+\n+            $item_use; // OK\n+            $local_use; // ERROR\n+            break $label_use; // ERROR\n+        )\n+    } else {\n+        let mut dollar_crate = input.into_iter().next().unwrap();\n+        dollar_crate.set_span(Span::mixed_site());\n+        quote!(\n+            type A = $dollar_crate::ItemUse;\n+        )\n+    }\n+}"}, {"sha": "619b2fd5321fff0f4026f3cdd0c750383256cd54", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -59,54 +59,54 @@ PRINT-ATTR RE-COLLECTED (DISPLAY): struct B (identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"B\",\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #8 bytes(LO..HI),\n+                        span: #10 bytes(LO..HI),\n                     },\n                 ],\n-                span: #8 bytes(LO..HI),\n+                span: #10 bytes(LO..HI),\n             },\n         ],\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #8 bytes(LO..HI),\n+        span: #10 bytes(LO..HI),\n     },\n ]"}, {"sha": "5fdc6f8ee96ca44d3071b9294b049eaa59b295d2", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -124,121 +124,121 @@ PRINT-BANG INPUT (DISPLAY): struct M ($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #10 bytes(LO..HI),\n+                span: #13 bytes(LO..HI),\n             },\n         ],\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #10 bytes(LO..HI),\n+        span: #13 bytes(LO..HI),\n     },\n ]"}, {"sha": "69c32a96ca055d119245d19f0bc777cf2db105c7", "filename": "src/test/ui/proc-macro/mixed-site-span.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.rs?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -0,0 +1,26 @@\n+// Proc macros using `mixed_site` spans exhibit usual properties of `macro_rules` hygiene.\n+\n+// aux-build:mixed-site-span.rs\n+\n+#![feature(proc_macro_hygiene)]\n+\n+#[macro_use]\n+extern crate mixed_site_span;\n+\n+struct ItemUse;\n+\n+fn main() {\n+    'label_use: loop {\n+        let local_use = 1;\n+        proc_macro_rules!();\n+        //~^ ERROR use of undeclared label `'label_use`\n+        //~| ERROR cannot find value `local_use` in this scope\n+        ItemDef; // OK\n+        local_def; //~ ERROR cannot find value `local_def` in this scope\n+    }\n+}\n+\n+macro_rules! pass_dollar_crate {\n+    () => (proc_macro_rules!($crate);) //~ ERROR cannot find type `ItemUse` in crate `$crate`\n+}\n+pass_dollar_crate!();"}, {"sha": "475e3e0ca359b3ca7776a9ca6deb433906f11b97", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1310dc6c989e191d85c73c943d4175fbf1dccb8/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=d1310dc6c989e191d85c73c943d4175fbf1dccb8", "patch": "@@ -0,0 +1,49 @@\n+error[E0426]: use of undeclared label `'label_use`\n+  --> $DIR/mixed-site-span.rs:15:9\n+   |\n+LL |         proc_macro_rules!();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         undeclared label `'label_use`\n+   |         in this macro invocation\n+\n+error[E0425]: cannot find value `local_use` in this scope\n+  --> $DIR/mixed-site-span.rs:15:9\n+   |\n+LL |         proc_macro_rules!();\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         not found in this scope\n+   |         in this macro invocation\n+\n+error[E0425]: cannot find value `local_def` in this scope\n+  --> $DIR/mixed-site-span.rs:19:9\n+   |\n+LL |         local_def;\n+   |         ^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `ItemUse` in crate `$crate`\n+  --> $DIR/auxiliary/mixed-site-span.rs:14:1\n+   |\n+LL | / pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n+LL | |     if input.is_empty() {\n+LL | |         let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n+LL | |         let item_def = id(\"ItemDef\");\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ not found in `$crate`\n+   | \n+  ::: $DIR/mixed-site-span.rs:26:1\n+   |\n+LL |   pass_dollar_crate!();\n+   |   --------------------- in this macro invocation\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use ItemUse;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425, E0426.\n+For more information about an error, try `rustc --explain E0412`."}]}