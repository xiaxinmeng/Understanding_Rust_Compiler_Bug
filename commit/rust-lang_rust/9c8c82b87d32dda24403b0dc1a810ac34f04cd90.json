{"sha": "9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOGM4MmI4N2QzMmRkYTI0NDAzYjBkYzFhODEwYWMzNGYwNGNkOTA=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-10T22:26:17Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-10T22:26:17Z"}, "message": "hello_world.rs -> main.rs", "tree": {"sha": "16b45cb15dc8cdbf610fd80c4f606bc4e1d93230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b45cb15dc8cdbf610fd80c4f606bc4e1d93230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "html_url": "https://github.com/rust-lang/rust/commit/9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c8c82b87d32dda24403b0dc1a810ac34f04cd90/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85191ae0f9bbef40fea18796d7a134e2f505588", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85191ae0f9bbef40fea18796d7a134e2f505588", "html_url": "https://github.com/rust-lang/rust/commit/b85191ae0f9bbef40fea18796d7a134e2f505588"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "f896d37de93d1605dc9b14e44913498faac1b808", "filename": "src/doc/guide.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9c8c82b87d32dda24403b0dc1a810ac34f04cd90/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c8c82b87d32dda24403b0dc1a810ac34f04cd90/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "patch": "@@ -139,14 +139,15 @@ the documentation for your shell for more details.\n \n Let's make a new source file next. I'm going to use the syntax `editor\n filename` to represent editing a file in these examples, but you should use\n-whatever method you want. We'll call our file `hello_world.rs`:\n+whatever method you want. We'll call our file `main.rs`:\n \n ```{bash}\n-$ editor hello_world.rs\n+$ editor main.rs\n ```\n \n Rust files always end in a `.rs` extension. If you're using more than one word\n-in your file name, use an underscore. `hello_world.rs` versus `goodbye.rs`.\n+in your file name, use an underscore. `hello_world.rs` rather than\n+`helloworld.rs`.\n \n Now that you've got your file open, type this in:\n \n@@ -159,7 +160,7 @@ fn main() {\n Save the file, and then type this into your terminal window:\n \n ```{bash}\n-$ rustc hello_world.rs\n+$ rustc main.rs\n $ ./hello_world # or hello_world.exe on Windows\n Hello, world!\n ```\n@@ -221,22 +222,22 @@ Finally, actually **compiling** and **running** our program. We can compile\n with our compiler, `rustc`, by passing it the name of our source file:\n \n ```{bash}\n-$ rustc hello_world.rs\n+$ rustc main.rs\n ```\n \n This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust\n will output a binary executable. You can see it with `ls`:\n \n ```{bash}\n $ ls\n-hello_world  hello_world.rs\n+main  main.rs\n ```\n \n Or on Windows:\n \n ```{bash}\n $ dir\n-hello_world.exe  hello_world.rs\n+main.exe  main.rs\n ```\n \n There are now two files: our source code, with the `.rs` extension, and the\n@@ -293,7 +294,7 @@ do that part first:\n \n ```{bash}\n $ mkdir src\n-$ mv hello_world.rs src/hello_world.rs\n+$ mv main.rs src/main.rs\n ```\n \n Cargo expects your source files to live inside a `src` directory. That leaves\n@@ -461,9 +462,9 @@ let x;\n ...we'll get an error:\n \n ```{ignore}\n-src/hello_world.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n-src/hello_world.rs:2     let x;\n-                             ^\n+src/main.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n+src/main.rs:2     let x;\n+                      ^\n ```\n \n Giving it a type will compile, though:\n@@ -472,7 +473,7 @@ Giving it a type will compile, though:\n let x: int;\n ```\n \n-Let's try it out. Change your `src/hello_world.rs` file to look like this:\n+Let's try it out. Change your `src/main.rs` file to look like this:\n \n ```{rust}\n fn main() {\n@@ -487,8 +488,8 @@ but it will still print \"Hello, world!\":\n \n ```{ignore,notrust}\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n-src/hello_world.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n-src/hello_world.rs:2     let x: int;\n+src/main.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n+src/main.rs:2     let x: int;\n                              ^\n ```\n \n@@ -509,13 +510,13 @@ And try to build it. You'll get an error:\n ```{bash}\n $ cargo build\n    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)\n-src/hello_world.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`\n-src/hello_world.rs:4     println!(\"The value of x is: {}\", x);\n-                                                           ^\n+src/main.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`\n+src/main.rs:4     println!(\"The value of x is: {}\", x);\n+                                                    ^\n note: in expansion of format_args!\n <std macros>:2:23: 2:77 note: expansion site\n <std macros>:1:1: 3:2 note: in expansion of println!\n-src/hello_world.rs:4:5: 4:42 note: expansion site\n+src/main.rs:4:5: 4:42 note: expansion site\n error: aborting due to previous error\n Could not compile `hello_world`.\n ```"}]}