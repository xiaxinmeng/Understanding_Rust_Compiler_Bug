{"sha": "f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MWU3N2U3NDUyM2NhN2E0YjFiZjhhZGQ5ZWNiNTFkZmUyYTE2NjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-27T22:39:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T20:26:19Z"}, "message": "Reindented things and removed superfluous comments, nothing to see here", "tree": {"sha": "549c46bae4190ea397e68a1fe9221100f55fb3c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549c46bae4190ea397e68a1fe9221100f55fb3c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "html_url": "https://github.com/rust-lang/rust/commit/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844fe207206b6708f2a7e05214857c92c4b7d28b", "url": "https://api.github.com/repos/rust-lang/rust/commits/844fe207206b6708f2a7e05214857c92c4b7d28b", "html_url": "https://github.com/rust-lang/rust/commit/844fe207206b6708f2a7e05214857c92c4b7d28b"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "d08ae82d603d71e1ff8883e4524669fe04989af9", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=f61e77e74523ca7a4b1bf8add9ecb51dfe2a1663", "patch": "@@ -367,8 +367,6 @@ fn mk_fn_info_item_obj(&fn_info_map fi, &span sp, ident i, &ast._obj o,\n     auto all_methods = _vec.clone[@method](o.methods);\n     plus_option[@method](all_methods, o.dtor);\n     for (@method m in all_methods) {\n-        /* FIXME: also need to pass in fields so we can say\n-           they're initialized? */\n         fi.insert(m.node.id, mk_fn_info(m.node.meth));\n         log(m.node.ident + \" has \" +\n             uistr(num_locals(mk_fn_info(m.node.meth))) + \" local vars\");\n@@ -1938,7 +1936,7 @@ fn find_pre_post_state_stmt(&fn_info_map fm, &fn_info enclosing,\n           || changed;\n       changed = extend_poststate(stmt_ann.states.poststate,\n                                  expr_poststate(*e)) || changed;\n-\n+      /*\n                     log(\"Summary: stmt = \");\n               log_stmt(*s);\n               log(\"prestate = \");\n@@ -1949,7 +1947,7 @@ fn find_pre_post_state_stmt(&fn_info_map fm, &fn_info enclosing,\n               log_bitv(enclosing, stmt_ann.states.poststate);\n               log(\"changed =\");\n               log(changed);\n-      \n+      */\n       ret changed;\n     }\n     case (_) { ret false; }\n@@ -2105,12 +2103,12 @@ fn check_states_against_conditions(fn_info enclosing, &ast._fn f) -> () {\n fn check_fn_states(&fn_info_map f_info_map, &fn_info f_info, &ast._fn f)\n     -> () {\n   /* Compute the pre- and post-states for this function */\n-  auto g = find_pre_post_state_fn;\n-  fixed_point_states(f_info_map, f_info, g, f);\n-\n+    auto g = find_pre_post_state_fn;\n+    fixed_point_states(f_info_map, f_info, g, f);\n+    \n   /* Now compare each expr's pre-state to its precondition\n      and post-state to its postcondition */\n-  check_states_against_conditions(f_info, f);\n+    check_states_against_conditions(f_info, f);\n }\n \n fn check_item_fn_state(&fn_info_map f_info_map, &span sp, ident i,\n@@ -2598,13 +2596,8 @@ fn check_crate(@ast.crate crate) -> @ast.crate {\n   auto fm = mk_f_to_fn_info(crate);\n   \n   /* Add a blank ts_ann to every statement (and expression) */\n-  /*\n-  auto fld0 = fold.new_identity_fold[fn_info_map]();\n-  fld0 = @rec(fold_item_fn = bind item_fn_anns(_,_,_,_,_,_,_)\n-              with *fld0);\n-  */\n   auto with_anns = annotate_crate(fm, crate);\n-  \n+\n   /* Compute the pre and postcondition for every subexpression */\n   auto fld = fold.new_identity_fold[fn_info_map]();\n   fld = @rec(fold_item_fn = bind check_item_fn(_,_,_,_,_,_,_) with *fld);"}]}