{"sha": "3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "node_id": "C_kwDOAAsO6NoAKDNjMmY4NjRmZmJmMGUzZDAxZjNmNjg0YWNiZDBlZTYwMjYxOWJmMTk", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-03T03:53:01Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "session: opt for enabling directionality markers\n\nAdd an option for enabling and disabling Fluent's directionality\nisolation markers in output. Disabled by default as these can render in\nsome terminals and applications.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "9a4bd3d308bf6a718e86e31784f1eddb738b8693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a4bd3d308bf6a718e86e31784f1eddb738b8693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "html_url": "https://github.com/rust-lang/rust/commit/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27389b068a3b71c87cf81828d1d878d24a3b867", "url": "https://api.github.com/repos/rust-lang/rust/commits/e27389b068a3b71c87cf81828d1d878d24a3b867", "html_url": "https://github.com/rust-lang/rust/commit/e27389b068a3b71c87cf81828d1d878d24a3b867"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "febdd0ed74675df5d6242d7def6b4c39366f408d", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -1173,7 +1173,7 @@ static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n /// hook.\n pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+        rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "508d419cdb6d6870c9ec913f515c2f43f72759f4", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -101,6 +101,7 @@ pub fn fluent_bundle(\n     sysroot: &Path,\n     requested_locale: Option<LanguageIdentifier>,\n     additional_ftl_path: Option<&Path>,\n+    with_directionality_markers: bool,\n ) -> Result<Option<Lrc<FluentBundle>>, TranslationBundleError> {\n     if requested_locale.is_none() && additional_ftl_path.is_none() {\n         return Ok(None);\n@@ -120,7 +121,7 @@ pub fn fluent_bundle(\n     // vice-versa). These are disabled because they are sometimes visible in the error output, but\n     // may be worth investigating in future (for example: if type names are left-to-right and the\n     // surrounding diagnostic messages are right-to-left, then these might be helpful).\n-    bundle.set_use_isolating(false);\n+    bundle.set_use_isolating(with_directionality_markers);\n \n     // If the user requests the default locale then don't try to load anything.\n     if !requested_fallback_locale && let Some(requested_locale) = requested_locale {\n@@ -169,13 +170,15 @@ pub fn fluent_bundle(\n \n /// Return the default `FluentBundle` with standard \"en-US\" diagnostic messages.\n #[instrument(level = \"trace\")]\n-pub fn fallback_fluent_bundle() -> Result<Lrc<FluentBundle>, TranslationBundleError> {\n+pub fn fallback_fluent_bundle(\n+    with_directionality_markers: bool,\n+) -> Result<Lrc<FluentBundle>, TranslationBundleError> {\n     let fallback_resource = FluentResource::try_new(FALLBACK_FLUENT_RESOURCE.to_string())\n         .map_err(TranslationBundleError::from)?;\n     trace!(?fallback_resource);\n     let mut fallback_bundle = FluentBundle::new(vec![langid!(\"en-US\")]);\n     // See comment in `fluent_bundle`.\n-    fallback_bundle.set_use_isolating(false);\n+    fallback_bundle.set_use_isolating(with_directionality_markers);\n     fallback_bundle.add_resource(fallback_resource).map_err(TranslationBundleError::from)?;\n     let fallback_bundle = Lrc::new(fallback_bundle);\n     Ok(fallback_bundle)"}, {"sha": "0f175c732c19c0a5cf078b5436b5e923400a8929", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -40,7 +40,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n         let fallback_bundle =\n-            crate::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+            crate::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n \n         let output = Arc::new(Mutex::new(Vec::new()));\n         let je = JsonEmitter::new("}, {"sha": "88f3cf9d722a241a2c502257fbe7222e0f601536", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -127,8 +127,8 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n     create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n-        let fallback_bundle =\n-            rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n+            .expect(\"failed to load fallback fluent bundle\");\n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         source_map.new_source_file(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n "}, {"sha": "4994f8eaeb2dcaae287369413334f0710c10c62b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -1482,6 +1482,8 @@ options! {\n         \"language identifier for diagnostic output\"),\n     translate_additional_ftl: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"additional fluent translation to preferentially use (for testing translation)\"),\n+    translate_directionality_markers: bool = (false, parse_bool, [TRACKED],\n+        \"emit directionality isolation markers in translated diagnostics\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "0b9c27c2cd6e387cd849acb9b45a353633aa4928", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -175,7 +175,7 @@ impl ParseSess {\n     /// Used for testing.\n     pub fn new(file_path_mapping: FilePathMapping) -> Self {\n         let fallback_bundle =\n-            fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+            fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n         let sm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n@@ -214,7 +214,7 @@ impl ParseSess {\n \n     pub fn with_silent_emitter(fatal_note: Option<String>) -> Self {\n         let fallback_bundle =\n-            fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+            fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let fatal_handler =\n             Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, None, fallback_bundle);"}, {"sha": "9881046ddfa295afe6822f0ca369f1d37f619e38", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -1218,9 +1218,12 @@ pub fn build_session(\n         &sysroot,\n         sopts.debugging_opts.translate_lang.clone(),\n         sopts.debugging_opts.translate_additional_ftl.as_deref(),\n+        sopts.debugging_opts.translate_directionality_markers,\n     )\n     .expect(\"failed to load fluent bundle\");\n-    let fallback_bundle = fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+    let fallback_bundle =\n+        fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers)\n+            .expect(\"failed to load fallback fluent bundle\");\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n \n@@ -1455,7 +1458,8 @@ pub enum IncrCompSession {\n }\n \n fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n-    let fallback_bundle = fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+    let fallback_bundle =\n+        fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "a32b9caa30fde8e5a8836c2e9a7fad8962253641", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -144,7 +144,7 @@ crate fn new_handler(\n     debugging_opts: &DebuggingOptions,\n ) -> rustc_errors::Handler {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+        rustc_errors::fallback_fluent_bundle(false).expect(\"failed to load fallback fluent bundle\");\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "63b744133a2c8da4b9bf538a7208ecf9194bdbcd", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -537,7 +537,7 @@ crate fn make_test(\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-            let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+            let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n                 .expect(\"failed to load fallback fluent bundle\");\n             supports_color = EmitterWriter::stderr(\n                 ColorConfig::Auto,"}, {"sha": "465dd523ff4521dcee7e27465ddfc97c497313d1", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -32,8 +32,8 @@ struct SyntaxChecker<'a, 'tcx> {\n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n         let buffer = Lrc::new(Lock::new(Buffer::default()));\n-        let fallback_bundle =\n-            rustc_errors::fallback_fluent_bundle().expect(\"failed to load fallback fluent bundle\");\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n+            .expect(\"failed to load fallback fluent bundle\");\n         let emitter = BufferEmitter { buffer: Lrc::clone(&buffer), fallback_bundle };\n \n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "92cf82bcd6a34bf314df7c35824f6c4e8b7189ff", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -621,7 +621,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+                let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n                     .expect(\"failed to load fallback fluent bundle\");\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),"}, {"sha": "bc1b0d7457559da68ddfdf3f964ed6f59018551e", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -165,7 +165,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n         .expect(\"failed to load fallback fluent bundle\");\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,"}, {"sha": "7125b2ee6859bc1d06aaa3ba3e25484461d6082b", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2f864ffbf0e3d01f3f684acbd0ee602619bf19/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=3c2f864ffbf0e3d01f3f684acbd0ee602619bf19", "patch": "@@ -114,7 +114,7 @@ fn default_handler(\n     let emitter = if hide_parse_errors {\n         silent_emitter()\n     } else {\n-        let fallback_bundle = rustc_errors::fallback_fluent_bundle()\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(false)\n             .expect(\"failed to load fallback fluent bundle\");\n         Box::new(EmitterWriter::stderr(\n             color_cfg,"}]}