{"sha": "ad74828b506866a96c6b25501f64b1262a5693f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzQ4MjhiNTA2ODY2YTk2YzZiMjU1MDFmNjRiMTI2MmE1NjkzZjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-03T23:05:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-03T23:05:50Z"}, "message": "Rollup merge of #81797 - yoshuawuyts:stream_from_iter, r=dtolnay\n\nAdd `core::stream::from_iter`\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/81798_\n\nThis_ PR implements `std::stream::from_iter`, as outlined in the _\"Converting an Iterator to a Stream\"_ section of the [Stream RFC](https://github.com/nellshamrell/rfcs/blob/add-async-stream-rfc/text/0000-async-stream.md#converting-an-iterator-to-a-stream). This function enables converting an `Iterator` to a `Stream` by wrapping each item in the iterator with a `Poll::Ready` instance.\n\nr? `@tmandry`\n\ncc/ `@rust-lang/libs` `@rust-lang/wg-async-foundations`\n\n## Example\n\nBeing able to convert from an iterator into a stream is useful when refactoring from iterative loops into a more functional adapter-based style. This is fairly common when using more complex `filter` / `map` / `find` chains. In its basic form this conversion looks like this:\n\n**before**\n```rust\nlet mut output = vec![];\nfor item in my_vec {\n    let out = do_io(item).await?;\n    output.push(out);\n}\n```\n**after**\n```rust\nuse std::stream;\n\nlet output = stream::from_iter(my_vec.iter())\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```\n\nHaving a way to convert an `Iterator` to a `Stream` is essential in enabling this flow.\n\n## Implementation Notes\n\nThis PR makes use of `unsafe {}` to pin an item. Currently we're having conversations on the libs stream in Zulip how to bring `pin-project` in as a dependency to `core` so we can omit the `unsafe {}`.\n\nThis PR also includes a documentation block which references `Stream::next` which currently doesn't exist in the stdlib (originally included in the RFC and PR, but later omitted because of an unresolved issue). `stream::from_iter` can't stabilize before `Stream` does, and there's still a chance we may stabilize `Stream` with a `next` method. So this PR includes documentation referencing that method, which we can remove as part of stabilization if by any chance we don't have `Stream::next`.\n\n## Alternatives Considered\n\n### `impl IntoStream for T: IntoIterator`\n\nAn obvious question would be whether we could make it so every iterator can automatically be converted into a stream by calling `into_stream` on it. The answer is: \"perhaps, but it could cause type issues\". Types like `std::collections` may want to opt to create manual implementations for `IntoStream` and `IntoIter`, which wouldn't be possible if it was implemented through a catch-all trait.\n\nPossibly an alternative such as `impl IntoStream for T: Iterator` could work, but it feels somewhat restrictive. In the end, converting an iterator to a stream is likely to be a bit of a niche case. And even then, **adding a standalone function to convert an `Iterator` into a `Stream` would not be mutually exclusive with a blanket implementation**.\n\n### Naming\n\nThe exact name can be debated in the period before stabilization. But I've chosen `stream::from_iter` rather than `stream::iter` because we are _creating a stream from an iterator_ rather than _iterating a stream_. We also expect to add a stream counterpart to `iter::from_fn` later on (blocked on async closures), and having `stream::from_fn` and `stream::from_iter` would feel like a consistent pair. It also has prior art in `async_std::stream::from_iter`.\n\n## Future Directions\n### Stream conversions for collections\n\nThis is a building block towards implementing `stream/stream_mut/into_stream` methods for `std::collections`, `std::vec`, and more. This would allow even quicker refactorings from using loops to using iterator adapters by omitting the import altogether:\n\n**before**\n```rust\nuse std::stream;\n\nlet output = stream::from_iter(my_vec.iter())\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```\n**after**\n```rust\nlet output = my_vec\n    .stream()\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```", "tree": {"sha": "186269c7539ed53400fbb751a7652b79aed1bd06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186269c7539ed53400fbb751a7652b79aed1bd06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad74828b506866a96c6b25501f64b1262a5693f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCcvOCRBK7hj4Ov3rIwAAMzcIACXT/1CV3NXkiM4qjfGEvFQj\n5ehsEpTiXbxuU6+FPwhM0+/G5HuGd62c77j0onb6ujDgIvxA9/CYRjXu/jYULo87\nVsJ8Aa6lJhQ7c+nnwFqa58GJIqklB5Gr1HAtp0E8m7TlC2EXX+wT+35SR0wapCFI\nw30jl7NA616+9RuGt+WS7QjTrwssMeiKpJ9KdYv9cAEepsuxNI6xHLpHwv+Ro3nk\nTGzgX8sW+VDtQMYbrKCQFvwRIjq2aHcJYAJ31lcD5MYLZN0mb/gCnmXY+AiUTjrJ\n8caZWE0ZmRcZpOITfiNxmB+j3lE00bPen9JLDEsT39SfgNnBwUnwu44CKYOow0M=\n=XQfE\n-----END PGP SIGNATURE-----\n", "payload": "tree 186269c7539ed53400fbb751a7652b79aed1bd06\nparent a6ece56152d8eb11e049e9fcce147b2859e12c92\nparent 660f585413943df8e5026310cc579047ca8d0cb5\nauthor Yuki Okushi <jtitor@2k36.org> 1628031950 +0900\ncommitter GitHub <noreply@github.com> 1628031950 +0900\n\nRollup merge of #81797 - yoshuawuyts:stream_from_iter, r=dtolnay\n\nAdd `core::stream::from_iter`\n\n_Tracking issue: https://github.com/rust-lang/rust/issues/81798_\n\nThis_ PR implements `std::stream::from_iter`, as outlined in the _\"Converting an Iterator to a Stream\"_ section of the [Stream RFC](https://github.com/nellshamrell/rfcs/blob/add-async-stream-rfc/text/0000-async-stream.md#converting-an-iterator-to-a-stream). This function enables converting an `Iterator` to a `Stream` by wrapping each item in the iterator with a `Poll::Ready` instance.\n\nr? `@tmandry`\n\ncc/ `@rust-lang/libs` `@rust-lang/wg-async-foundations`\n\n## Example\n\nBeing able to convert from an iterator into a stream is useful when refactoring from iterative loops into a more functional adapter-based style. This is fairly common when using more complex `filter` / `map` / `find` chains. In its basic form this conversion looks like this:\n\n**before**\n```rust\nlet mut output = vec![];\nfor item in my_vec {\n    let out = do_io(item).await?;\n    output.push(out);\n}\n```\n**after**\n```rust\nuse std::stream;\n\nlet output = stream::from_iter(my_vec.iter())\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```\n\nHaving a way to convert an `Iterator` to a `Stream` is essential in enabling this flow.\n\n## Implementation Notes\n\nThis PR makes use of `unsafe {}` to pin an item. Currently we're having conversations on the libs stream in Zulip how to bring `pin-project` in as a dependency to `core` so we can omit the `unsafe {}`.\n\nThis PR also includes a documentation block which references `Stream::next` which currently doesn't exist in the stdlib (originally included in the RFC and PR, but later omitted because of an unresolved issue). `stream::from_iter` can't stabilize before `Stream` does, and there's still a chance we may stabilize `Stream` with a `next` method. So this PR includes documentation referencing that method, which we can remove as part of stabilization if by any chance we don't have `Stream::next`.\n\n## Alternatives Considered\n\n### `impl IntoStream for T: IntoIterator`\n\nAn obvious question would be whether we could make it so every iterator can automatically be converted into a stream by calling `into_stream` on it. The answer is: \"perhaps, but it could cause type issues\". Types like `std::collections` may want to opt to create manual implementations for `IntoStream` and `IntoIter`, which wouldn't be possible if it was implemented through a catch-all trait.\n\nPossibly an alternative such as `impl IntoStream for T: Iterator` could work, but it feels somewhat restrictive. In the end, converting an iterator to a stream is likely to be a bit of a niche case. And even then, **adding a standalone function to convert an `Iterator` into a `Stream` would not be mutually exclusive with a blanket implementation**.\n\n### Naming\n\nThe exact name can be debated in the period before stabilization. But I've chosen `stream::from_iter` rather than `stream::iter` because we are _creating a stream from an iterator_ rather than _iterating a stream_. We also expect to add a stream counterpart to `iter::from_fn` later on (blocked on async closures), and having `stream::from_fn` and `stream::from_iter` would feel like a consistent pair. It also has prior art in `async_std::stream::from_iter`.\n\n## Future Directions\n### Stream conversions for collections\n\nThis is a building block towards implementing `stream/stream_mut/into_stream` methods for `std::collections`, `std::vec`, and more. This would allow even quicker refactorings from using loops to using iterator adapters by omitting the import altogether:\n\n**before**\n```rust\nuse std::stream;\n\nlet output = stream::from_iter(my_vec.iter())\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```\n**after**\n```rust\nlet output = my_vec\n    .stream()\n    .map(async |item| do_io(item).await)\n    .collect()?;\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad74828b506866a96c6b25501f64b1262a5693f8", "html_url": "https://github.com/rust-lang/rust/commit/ad74828b506866a96c6b25501f64b1262a5693f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad74828b506866a96c6b25501f64b1262a5693f8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ece56152d8eb11e049e9fcce147b2859e12c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ece56152d8eb11e049e9fcce147b2859e12c92", "html_url": "https://github.com/rust-lang/rust/commit/a6ece56152d8eb11e049e9fcce147b2859e12c92"}, {"sha": "660f585413943df8e5026310cc579047ca8d0cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/660f585413943df8e5026310cc579047ca8d0cb5", "html_url": "https://github.com/rust-lang/rust/commit/660f585413943df8e5026310cc579047ca8d0cb5"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "eb9a0fd284257d7abd02c481c7d7a28b5155ee4b", "filename": "library/core/src/stream/from_iter.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ad74828b506866a96c6b25501f64b1262a5693f8/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74828b506866a96c6b25501f64b1262a5693f8/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Ffrom_iter.rs?ref=ad74828b506866a96c6b25501f64b1262a5693f8", "patch": "@@ -0,0 +1,38 @@\n+use crate::pin::Pin;\n+\n+use crate::stream::Stream;\n+use crate::task::{Context, Poll};\n+\n+/// A stream that was created from iterator.\n+///\n+/// This stream is created by the [`from_iter`] function.\n+/// See it documentation for more.\n+///\n+/// [`from_iter`]: fn.from_iter.html\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+#[derive(Clone, Debug)]\n+pub struct FromIter<I> {\n+    iter: I,\n+}\n+\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+impl<I> Unpin for FromIter<I> {}\n+\n+/// Converts an iterator into a stream.\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+pub fn from_iter<I: IntoIterator>(iter: I) -> FromIter<I::IntoIter> {\n+    FromIter { iter: iter.into_iter() }\n+}\n+\n+#[unstable(feature = \"stream_from_iter\", issue = \"81798\")]\n+impl<I: Iterator> Stream for FromIter<I> {\n+    type Item = I::Item;\n+\n+    fn poll_next(mut self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n+        Poll::Ready(self.iter.next())\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}"}, {"sha": "58dc8e1e5e6067b701ed1d0147adda3456f90f03", "filename": "library/core/src/stream/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad74828b506866a96c6b25501f64b1262a5693f8/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74828b506866a96c6b25501f64b1262a5693f8/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs?ref=ad74828b506866a96c6b25501f64b1262a5693f8", "patch": "@@ -122,6 +122,8 @@\n //! warning: unused result that must be used: streams do nothing unless polled\n //! ```\n \n+mod from_iter;\n mod stream;\n \n+pub use from_iter::{from_iter, FromIter};\n pub use stream::Stream;"}]}