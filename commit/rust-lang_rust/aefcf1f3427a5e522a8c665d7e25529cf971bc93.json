{"sha": "aefcf1f3427a5e522a8c665d7e25529cf971bc93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZmNmMWYzNDI3YTVlNTIyYThjNjY1ZDdlMjU1MjljZjk3MWJjOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-26T11:59:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-26T11:59:17Z"}, "message": "Auto merge of #79427 - Aaron1011:fix/const-array-index, r=oli-obk\n\nResolve inference variables before trying to remove overloaded indexing\n\nFixes #79152\n\nThis code was already set up to handle indexing an array. However, it\nappears that we never end up with an inference variable for the slice\ncase, so the missing call to `resolve_vars_if_possible` had no effect\nuntil now.", "tree": {"sha": "4e67189f67632d113fb4ec825d412b4e85e6bdd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e67189f67632d113fb4ec825d412b4e85e6bdd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aefcf1f3427a5e522a8c665d7e25529cf971bc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aefcf1f3427a5e522a8c665d7e25529cf971bc93", "html_url": "https://github.com/rust-lang/rust/commit/aefcf1f3427a5e522a8c665d7e25529cf971bc93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aefcf1f3427a5e522a8c665d7e25529cf971bc93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9651648d3b741e81ba7042e49a07b78a441517", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9651648d3b741e81ba7042e49a07b78a441517", "html_url": "https://github.com/rust-lang/rust/commit/0d9651648d3b741e81ba7042e49a07b78a441517"}, {"sha": "0b64110b10c9ef5f971aab4b05975dee922a7bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b64110b10c9ef5f971aab4b05975dee922a7bc3", "html_url": "https://github.com/rust-lang/rust/commit/0b64110b10c9ef5f971aab4b05975dee922a7bc3"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "d1ada123c0d5adcef36676c7b1bbeefbe4ad7386", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aefcf1f3427a5e522a8c665d7e25529cf971bc93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcf1f3427a5e522a8c665d7e25529cf971bc93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=aefcf1f3427a5e522a8c665d7e25529cf971bc93", "patch": "@@ -194,7 +194,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             let mut typeck_results = self.fcx.typeck_results.borrow_mut();\n \n             // All valid indexing looks like this; might encounter non-valid indexes at this point.\n-            let base_ty = typeck_results.expr_ty_adjusted_opt(&base).map(|t| t.kind());\n+            let base_ty = typeck_results\n+                .expr_ty_adjusted_opt(&base)\n+                .map(|t| self.fcx.resolve_vars_if_possible(t).kind());\n             if base_ty.is_none() {\n                 // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n                 // that isn't in the type table. We assume more relevant errors have already been"}, {"sha": "95518e1bbdbd9354d8fa56c58b1f8caa1a2f1f7c", "filename": "src/test/ui/consts/issue-79152-const-array-index.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aefcf1f3427a5e522a8c665d7e25529cf971bc93/src%2Ftest%2Fui%2Fconsts%2Fissue-79152-const-array-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcf1f3427a5e522a8c665d7e25529cf971bc93/src%2Ftest%2Fui%2Fconsts%2Fissue-79152-const-array-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79152-const-array-index.rs?ref=aefcf1f3427a5e522a8c665d7e25529cf971bc93", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// Regression test for issue #79152\n+//\n+// Tests that we can index an array in a const function\n+\n+const fn foo() {\n+    let mut array = [[0; 1]; 1];\n+    array[0][0] = 1;\n+}\n+\n+fn main() {}"}]}