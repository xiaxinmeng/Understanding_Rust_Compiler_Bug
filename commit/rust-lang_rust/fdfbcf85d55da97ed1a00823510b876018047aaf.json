{"sha": "fdfbcf85d55da97ed1a00823510b876018047aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZmJjZjg1ZDU1ZGE5N2VkMWEwMDgyMzUxMGI4NzYwMTgwNDdhYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T23:02:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T23:02:40Z"}, "message": "Auto merge of #46482 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #45957, #46260, #46432, #46442, #46454, #46462, #46465, #46473\n- Failed merges:", "tree": {"sha": "01d830b5a1019b1db9936cb9084bdfb64164ea4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d830b5a1019b1db9936cb9084bdfb64164ea4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdfbcf85d55da97ed1a00823510b876018047aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfbcf85d55da97ed1a00823510b876018047aaf", "html_url": "https://github.com/rust-lang/rust/commit/fdfbcf85d55da97ed1a00823510b876018047aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdfbcf85d55da97ed1a00823510b876018047aaf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "url": "https://api.github.com/repos/rust-lang/rust/commits/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea", "html_url": "https://github.com/rust-lang/rust/commit/1956d5535ad77ddf46e4b29ba089a8b4a73cfaea"}, {"sha": "48d38555e533649c5cc1634d64a1851d265da979", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d38555e533649c5cc1634d64a1851d265da979", "html_url": "https://github.com/rust-lang/rust/commit/48d38555e533649c5cc1634d64a1851d265da979"}], "stats": {"total": 280, "additions": 160, "deletions": 120}, "files": [{"sha": "1cece930eeaa56bfe65e6dd657fa88d944ff01ce", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -177,7 +177,7 @@ quasiquote as an ordinary plugin library.\n Plugins can extend [Rust's lint\n infrastructure](../reference/attributes.html#lint-check-attributes) with\n additional checks for code style, safety, etc. Now let's write a plugin\n-[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n+[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n \n ```rust,ignore"}, {"sha": "d520c9bd5c30a4f39555f22941aae1d55f5a1e93", "filename": "src/etc/test-float-parse/runtests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Fetc%2Ftest-float-parse%2Fruntests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftest-float-parse%2Fruntests.py?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python2.7\n+#!/usr/bin/env python2.7\n #\n # Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at"}, {"sha": "6e3dbcbec9dc9b04a0b93cf5ccea57a15557da1e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -612,9 +612,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n-        /* compiler built-in */\n-    }) }\n+    macro_rules! format_args {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n+        ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// Inspect an environment variable at compile time.\n     ///\n@@ -624,7 +625,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Optionally inspect an environment variable at compile time.\n     ///\n@@ -645,7 +649,8 @@ mod builtin {\n     #[macro_export]\n     #[cfg(dox)]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ })\n+        ($($e:ident),*) => ({ /* compiler built-in */ });\n+        ($($e:ident,)*) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -656,7 +661,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+    macro_rules! concat {\n+        ($($e:expr),*) => ({ /* compiler built-in */ });\n+        ($($e:expr,)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///"}, {"sha": "7c7562eac5152e6de9a88c907ea40a0ccd37cc96", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -380,7 +380,7 @@ macro_rules! int_impl {\n             if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n         }\n \n-        /// Checked integer addition. Computes `self + other`, returning `None`\n+        /// Checked integer addition. Computes `self + rhs`, returning `None`\n         /// if overflow occurred.\n         ///\n         /// # Examples\n@@ -393,12 +393,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_add(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_add(other);\n+        pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_add(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer subtraction. Computes `self - other`, returning\n+        /// Checked integer subtraction. Computes `self - rhs`, returning\n         /// `None` if underflow occurred.\n         ///\n         /// # Examples\n@@ -411,12 +411,12 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_sub(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_sub(other);\n+        pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_sub(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer multiplication. Computes `self * other`, returning\n+        /// Checked integer multiplication. Computes `self * rhs`, returning\n         /// `None` if underflow or overflow occurred.\n         ///\n         /// # Examples\n@@ -429,13 +429,13 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_mul(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_mul(other);\n+        pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_mul(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer division. Computes `self / other`, returning `None`\n-        /// if `other == 0` or the operation results in underflow or overflow.\n+        /// Checked integer division. Computes `self / rhs`, returning `None`\n+        /// if `rhs == 0` or the operation results in underflow or overflow.\n         ///\n         /// # Examples\n         ///\n@@ -448,16 +448,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_div(self, other: Self) -> Option<Self> {\n-            if other == 0 || (self == Self::min_value() && other == -1) {\n+        pub fn checked_div(self, rhs: Self) -> Option<Self> {\n+            if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                 None\n             } else {\n-                Some(unsafe { intrinsics::unchecked_div(self, other) })\n+                Some(unsafe { intrinsics::unchecked_div(self, rhs) })\n             }\n         }\n \n-        /// Checked integer remainder. Computes `self % other`, returning `None`\n-        /// if `other == 0` or the operation results in underflow or overflow.\n+        /// Checked integer remainder. Computes `self % rhs`, returning `None`\n+        /// if `rhs == 0` or the operation results in underflow or overflow.\n         ///\n         /// # Examples\n         ///\n@@ -472,11 +472,11 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[inline]\n-        pub fn checked_rem(self, other: Self) -> Option<Self> {\n-            if other == 0 || (self == Self::min_value() && other == -1) {\n+        pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n+            if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                 None\n             } else {\n-                Some(unsafe { intrinsics::unchecked_rem(self, other) })\n+                Some(unsafe { intrinsics::unchecked_rem(self, rhs) })\n             }\n         }\n \n@@ -559,7 +559,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Saturating integer addition. Computes `self + other`, saturating at\n+        /// Saturating integer addition. Computes `self + rhs`, saturating at\n         /// the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -572,15 +572,15 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn saturating_add(self, other: Self) -> Self {\n-            match self.checked_add(other) {\n+        pub fn saturating_add(self, rhs: Self) -> Self {\n+            match self.checked_add(rhs) {\n                 Some(x) => x,\n-                None if other >= 0 => Self::max_value(),\n+                None if rhs >= 0 => Self::max_value(),\n                 None => Self::min_value(),\n             }\n         }\n \n-        /// Saturating integer subtraction. Computes `self - other`, saturating\n+        /// Saturating integer subtraction. Computes `self - rhs`, saturating\n         /// at the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -593,15 +593,15 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn saturating_sub(self, other: Self) -> Self {\n-            match self.checked_sub(other) {\n+        pub fn saturating_sub(self, rhs: Self) -> Self {\n+            match self.checked_sub(rhs) {\n                 Some(x) => x,\n-                None if other >= 0 => Self::min_value(),\n+                None if rhs >= 0 => Self::min_value(),\n                 None => Self::max_value(),\n             }\n         }\n \n-        /// Saturating integer multiplication. Computes `self * other`,\n+        /// Saturating integer multiplication. Computes `self * rhs`,\n         /// saturating at the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -617,17 +617,17 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[inline]\n-        pub fn saturating_mul(self, other: Self) -> Self {\n-            self.checked_mul(other).unwrap_or_else(|| {\n-                if (self < 0 && other < 0) || (self > 0 && other > 0) {\n+        pub fn saturating_mul(self, rhs: Self) -> Self {\n+            self.checked_mul(rhs).unwrap_or_else(|| {\n+                if (self < 0 && rhs < 0) || (self > 0 && rhs > 0) {\n                     Self::max_value()\n                 } else {\n                     Self::min_value()\n                 }\n             })\n         }\n \n-        /// Wrapping (modular) addition. Computes `self + other`,\n+        /// Wrapping (modular) addition. Computes `self + rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n@@ -646,7 +646,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Wrapping (modular) subtraction. Computes `self - other`,\n+        /// Wrapping (modular) subtraction. Computes `self - rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n@@ -666,7 +666,7 @@ macro_rules! int_impl {\n         }\n \n         /// Wrapping (modular) multiplication. Computes `self *\n-        /// other`, wrapping around at the boundary of the type.\n+        /// rhs`, wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n         ///\n@@ -684,7 +684,7 @@ macro_rules! int_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `self / other`,\n+        /// Wrapping (modular) division. Computes `self / rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// The only case where such wrapping can occur is when one\n@@ -712,7 +712,7 @@ macro_rules! int_impl {\n             self.overflowing_div(rhs).0\n         }\n \n-        /// Wrapping (modular) remainder. Computes `self % other`,\n+        /// Wrapping (modular) remainder. Computes `self % rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// Such wrap-around never actually occurs mathematically;\n@@ -1573,7 +1573,7 @@ macro_rules! uint_impl {\n             if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n         }\n \n-        /// Checked integer addition. Computes `self + other`, returning `None`\n+        /// Checked integer addition. Computes `self + rhs`, returning `None`\n         /// if overflow occurred.\n         ///\n         /// # Examples\n@@ -1586,12 +1586,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_add(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_add(other);\n+        pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_add(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer subtraction. Computes `self - other`, returning\n+        /// Checked integer subtraction. Computes `self - rhs`, returning\n         /// `None` if underflow occurred.\n         ///\n         /// # Examples\n@@ -1604,12 +1604,12 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_sub(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_sub(other);\n+        pub fn checked_sub(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_sub(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer multiplication. Computes `self * other`, returning\n+        /// Checked integer multiplication. Computes `self * rhs`, returning\n         /// `None` if underflow or overflow occurred.\n         ///\n         /// # Examples\n@@ -1622,13 +1622,13 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_mul(self, other: Self) -> Option<Self> {\n-            let (a, b) = self.overflowing_mul(other);\n+        pub fn checked_mul(self, rhs: Self) -> Option<Self> {\n+            let (a, b) = self.overflowing_mul(rhs);\n             if b {None} else {Some(a)}\n         }\n \n-        /// Checked integer division. Computes `self / other`, returning `None`\n-        /// if `other == 0` or the operation results in underflow or overflow.\n+        /// Checked integer division. Computes `self / rhs`, returning `None`\n+        /// if `rhs == 0` or the operation results in underflow or overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1640,15 +1640,15 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn checked_div(self, other: Self) -> Option<Self> {\n-            match other {\n+        pub fn checked_div(self, rhs: Self) -> Option<Self> {\n+            match rhs {\n                 0 => None,\n-                other => Some(unsafe { intrinsics::unchecked_div(self, other) }),\n+                rhs => Some(unsafe { intrinsics::unchecked_div(self, rhs) }),\n             }\n         }\n \n-        /// Checked integer remainder. Computes `self % other`, returning `None`\n-        /// if `other == 0` or the operation results in underflow or overflow.\n+        /// Checked integer remainder. Computes `self % rhs`, returning `None`\n+        /// if `rhs == 0` or the operation results in underflow or overflow.\n         ///\n         /// # Examples\n         ///\n@@ -1660,11 +1660,11 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[inline]\n-        pub fn checked_rem(self, other: Self) -> Option<Self> {\n-            if other == 0 {\n+        pub fn checked_rem(self, rhs: Self) -> Option<Self> {\n+            if rhs == 0 {\n                 None\n             } else {\n-                Some(unsafe { intrinsics::unchecked_rem(self, other) })\n+                Some(unsafe { intrinsics::unchecked_rem(self, rhs) })\n             }\n         }\n \n@@ -1724,7 +1724,7 @@ macro_rules! uint_impl {\n             if b {None} else {Some(a)}\n         }\n \n-        /// Saturating integer addition. Computes `self + other`, saturating at\n+        /// Saturating integer addition. Computes `self + rhs`, saturating at\n         /// the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -1737,14 +1737,14 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn saturating_add(self, other: Self) -> Self {\n-            match self.checked_add(other) {\n+        pub fn saturating_add(self, rhs: Self) -> Self {\n+            match self.checked_add(rhs) {\n                 Some(x) => x,\n                 None => Self::max_value(),\n             }\n         }\n \n-        /// Saturating integer subtraction. Computes `self - other`, saturating\n+        /// Saturating integer subtraction. Computes `self - rhs`, saturating\n         /// at the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -1757,14 +1757,14 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn saturating_sub(self, other: Self) -> Self {\n-            match self.checked_sub(other) {\n+        pub fn saturating_sub(self, rhs: Self) -> Self {\n+            match self.checked_sub(rhs) {\n                 Some(x) => x,\n                 None => Self::min_value(),\n             }\n         }\n \n-        /// Saturating integer multiplication. Computes `self * other`,\n+        /// Saturating integer multiplication. Computes `self * rhs`,\n         /// saturating at the numeric bounds instead of overflowing.\n         ///\n         /// # Examples\n@@ -1779,11 +1779,11 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n         #[inline]\n-        pub fn saturating_mul(self, other: Self) -> Self {\n-            self.checked_mul(other).unwrap_or(Self::max_value())\n+        pub fn saturating_mul(self, rhs: Self) -> Self {\n+            self.checked_mul(rhs).unwrap_or(Self::max_value())\n         }\n \n-        /// Wrapping (modular) addition. Computes `self + other`,\n+        /// Wrapping (modular) addition. Computes `self + rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n@@ -1802,7 +1802,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Wrapping (modular) subtraction. Computes `self - other`,\n+        /// Wrapping (modular) subtraction. Computes `self - rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n@@ -1822,7 +1822,7 @@ macro_rules! uint_impl {\n         }\n \n         /// Wrapping (modular) multiplication. Computes `self *\n-        /// other`, wrapping around at the boundary of the type.\n+        /// rhs`, wrapping around at the boundary of the type.\n         ///\n         /// # Examples\n         ///\n@@ -1840,7 +1840,7 @@ macro_rules! uint_impl {\n             }\n         }\n \n-        /// Wrapping (modular) division. Computes `self / other`.\n+        /// Wrapping (modular) division. Computes `self / rhs`.\n         /// Wrapped division on unsigned types is just normal division.\n         /// There's no way wrapping could ever happen.\n         /// This function exists, so that all operations\n@@ -1859,7 +1859,7 @@ macro_rules! uint_impl {\n             self / rhs\n         }\n \n-        /// Wrapping (modular) remainder. Computes `self % other`.\n+        /// Wrapping (modular) remainder. Computes `self % rhs`.\n         /// Wrapped remainder calculation on unsigned types is\n         /// just the regular remainder calculation.\n         /// There's no way wrapping could ever happen."}, {"sha": "70b63886084f5ae206435585104dff4bda5d7e4d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1053,8 +1053,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n          addition to normal output\"),\n-    print_move_fragments: bool = (false, parse_bool, [UNTRACKED],\n-        \"print out move-fragment data for every fn\"),\n     flowgraph_print_loans: bool = (false, parse_bool, [UNTRACKED],\n         \"include loan analysis data in --unpretty flowgraph output\"),\n     flowgraph_print_moves: bool = (false, parse_bool, [UNTRACKED],\n@@ -2684,8 +2682,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.save_analysis = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.print_move_fragments = true;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.flowgraph_print_loans = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.flowgraph_print_moves = true;"}, {"sha": "95fe99a1bec9f6998fe210e03b92b12d7f37fca6", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -239,10 +239,13 @@ impl<'tcx> Action<'tcx> {\n         //     USE(SRC);\n         let src_def_count = src_use_info.def_count_not_including_drop();\n         // allow function arguments to be propagated\n-        if src_def_count > 1 ||\n-            (src_def_count == 0 && mir.local_kind(src_local) != LocalKind::Arg) {\n-            debug!(\"  Can't copy-propagate local: {} defs of src\",\n-                   src_use_info.def_count_not_including_drop());\n+        let is_arg = mir.local_kind(src_local) == LocalKind::Arg;\n+        if (is_arg && src_def_count != 0) || (!is_arg && src_def_count != 1) {\n+            debug!(\n+                \"  Can't copy-propagate local: {} defs of src{}\",\n+                src_def_count,\n+                if is_arg { \" (argument)\" } else { \"\" },\n+            );\n             return None\n         }\n "}, {"sha": "679f5f6e3fde9b2fe0fc8c6ad82b69d6d0507c35", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -179,6 +179,7 @@ nav.sub {\n \ttop: 0;\n \theight: 100vh;\n \toverflow: auto;\n+\tz-index: 1;\n }\n \n .sidebar .current {"}, {"sha": "7d62f94056fb26e4b3481c46e9c2874be077a540", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -325,9 +325,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n-        /* compiler built-in */\n-    }) }\n+    macro_rules! format_args {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n+        ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// Inspect an environment variable at compile time.\n     ///\n@@ -348,7 +349,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Optionally inspect an environment variable at compile time.\n     ///\n@@ -400,7 +404,8 @@ pub mod builtin {\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ })\n+        ($($e:ident),*) => ({ /* compiler built-in */ });\n+        ($($e:ident,)*) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -420,7 +425,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+    macro_rules! concat {\n+        ($($e:expr),*) => ({ /* compiler built-in */ });\n+        ($($e:expr,)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///"}, {"sha": "1c0cdfd8435c3350ab61b9d1290b9a6ceb1f7dff", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1461,7 +1461,7 @@ pub struct DecodeUtf16<I>\n     buf: Option<u16>,\n }\n \n-/// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.\n+/// An error that can be returned when decoding UTF-16 code points.\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct DecodeUtf16Error {"}, {"sha": "35bb231df5adfcad15ca8d1e76b77622cdf09c11", "filename": "src/test/mir-opt/copy_propagation_arg.rs", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -30,42 +30,43 @@ fn baz(mut x: i32) {\n     x = x;\n }\n \n+fn arg_src(mut x: i32) -> i32 {\n+    let y = x;\n+    x = 123; // Don't propagate this assignment to `y`\n+    y\n+}\n+\n fn main() {\n     // Make sure the function actually gets instantiated.\n     foo(0);\n     bar(0);\n     baz(0);\n+    arg_src(0);\n }\n \n // END RUST SOURCE\n // START rustc.foo.CopyPropagation.before.mir\n // bb0: {\n-//     StorageLive(_2);\n-//     StorageLive(_3);\n+//     ...\n //     _3 = _1;\n //     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n-//     StorageDead(_3);\n+//     ...\n //     _1 = move _2;\n-//     StorageDead(_2);\n-//     _0 = ();\n-//     return;\n+//     ...\n // }\n // END rustc.foo.CopyPropagation.before.mir\n // START rustc.foo.CopyPropagation.after.mir\n // bb0: {\n-//     StorageLive(_2);\n-//     nop;\n-//     nop;\n-//     _2 = const dummy(move _1) -> bb1;\n+//     ...\n+//     _3 = _1;\n+//     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n-//     nop;\n+//     ...\n //     _1 = move _2;\n-//     StorageDead(_2);\n-//     _0 = ();\n-//     return;\n+//     ...\n // }\n // END rustc.foo.CopyPropagation.after.mir\n // START rustc.bar.CopyPropagation.before.mir\n@@ -83,15 +84,14 @@ fn main() {\n // END rustc.bar.CopyPropagation.before.mir\n // START rustc.bar.CopyPropagation.after.mir\n // bb0: {\n-//     nop;\n-//     nop;\n-//     _2 = const dummy(move _1) -> bb1;\n+//     ...\n+//     _3 = _1;\n+//     _2 = const dummy(move _3) -> bb1;\n // }\n // bb1: {\n-//     nop;\n+//     ...\n //     _1 = const 5u8;\n-//     _0 = ();\n-//     return;\n+//     ...\n // }\n // END rustc.bar.CopyPropagation.after.mir\n // START rustc.baz.CopyPropagation.before.mir\n@@ -106,11 +106,35 @@ fn main() {\n // END rustc.baz.CopyPropagation.before.mir\n // START rustc.baz.CopyPropagation.after.mir\n // bb0: {\n-//     nop;\n-//     nop;\n-//     nop;\n-//     nop;\n-//     _0 = ();\n-//     return;\n+//     ...\n+//     _2 = _1;\n+//     _1 = move _2;\n+//     ...\n // }\n // END rustc.baz.CopyPropagation.after.mir\n+// START rustc.arg_src.CopyPropagation.before.mir\n+// bb0: {\n+//       ...\n+//       _3 = _1;\n+//       _2 = move _3;\n+//       ...\n+//       _1 = const 123i32;\n+//       ...\n+//       _4 = _2;\n+//       _0 = move _4;\n+//       ...\n+//       return;\n+//   }\n+// END rustc.arg_src.CopyPropagation.before.mir\n+// START rustc.arg_src.CopyPropagation.after.mir\n+// bb0: {\n+//     ...\n+//     _3 = _1;\n+//     ...\n+//     _1 = const 123i32;\n+//     ...\n+//     _0 = move _3;\n+//     ...\n+//     return;\n+// }\n+// END rustc.arg_src.CopyPropagation.after.mir"}, {"sha": "bfc6f923f9d2eb0b196ebd6d8c8b52fee321dfa1", "filename": "src/test/ui/update-all-references.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-all-references.sh?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n #\n # Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at"}, {"sha": "b9ded7d1e951cefcda20b1f3c2be8d83167a1986", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n #\n # Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at"}]}