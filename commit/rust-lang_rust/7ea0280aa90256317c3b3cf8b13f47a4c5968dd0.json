{"sha": "7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTAyODBhYTkwMjU2MzE3YzNiM2NmOGIxM2Y0N2E0YzU5NjhkZDA=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-26T06:04:55Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:28:51Z"}, "message": "Moved ui test", "tree": {"sha": "74aa07327cffb0d566190cc0cd1219e9ae4dbffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74aa07327cffb0d566190cc0cd1219e9ae4dbffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWO1MACgkQAn35M4hi\nrd0KbQ/+O9S1ylzLN/Sm18lLhbpDBQm4tcgyahlx7katQcUz9K2eZXJWval8Uz20\ngbEjLecL6si1lh1RzBhh4+847OJybR52Opymu85EeeO0wWpl8F4qrF13HXBxg17S\nV2c79frtZxv1p7kL5qCPQW2HBqQsKptqS1enCp/v2VbuNX7qrOXjcVcYX+EGyxDF\nbNKdKaOSznVvkkSkL/VyjOy2Ea7K9Nh23B8K8O+WHyLLHkPb7KyOy9bUA7bFWiD2\nGSeGotGgoWcOzefMrAyo8c4HpEFyO5RpGoheNz50LPCbdGL0Q2HSpSltHwkrGeGh\nGIYq4c8NVozutLLj4UpcYE80zmV538IOfUSuXq0vkOuJLyGRrewcSjjRwkBJzENM\n52VgwAe3dsMswQj9iR1uDFkt4Oude0nn3LSYhSYT/uoRb3QhO9imOW6Z2yLupWHE\n19dHKkFc6fWw7VqrQLEzK4k12SzUo5FrzlvtJD6eGEHo9R+gQgUGgA8P1t0j/toz\nw2DzRxUJD/P5fwh/BSmWotdz9skuA+C9dMUjxUkJr1rOR7SZBNgD2tYJ8RPRr8Mf\nynNfPkwxExHbp1h7i3jF+oc2TzpgdHWFBhWh6yQndg6xw49M2U8cvUldn4LE3XPc\nhW0aWDrvobUvpF9e5/qY8N/xZCgg+M/bWyyxyzhkWgtQZjxktSE=\n=6B+J\n-----END PGP SIGNATURE-----", "payload": "tree 74aa07327cffb0d566190cc0cd1219e9ae4dbffa\nparent 869daad8fce326a4a6976cbd51964da5efacec28\nauthor Deadbeef <ent3rm4n@gmail.com> 1627279495 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846931 +0000\n\nMoved ui test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "html_url": "https://github.com/rust-lang/rust/commit/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869daad8fce326a4a6976cbd51964da5efacec28", "url": "https://api.github.com/repos/rust-lang/rust/commits/869daad8fce326a4a6976cbd51964da5efacec28", "html_url": "https://github.com/rust-lang/rust/commit/869daad8fce326a4a6976cbd51964da5efacec28"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "17e538483431ca0573317c64f98248920eeb7f7a", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "patch": "@@ -1786,13 +1786,6 @@ fn test_ord_absence() {\n     }\n }\n \n-#[allow(dead_code)]\n-fn test_const() {\n-    const MAP: &'static BTreeMap<(), ()> = &BTreeMap::new();\n-    const LEN: usize = MAP.len();\n-    const IS_EMPTY: bool = MAP.is_empty();\n-}\n-\n #[test]\n fn test_occupied_entry_key() {\n     let mut a = BTreeMap::new();"}, {"sha": "5d590a26281d2b993d38aea9e7e6e1ca0eba46eb", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "patch": "@@ -16,13 +16,6 @@ fn test_clone_eq() {\n     assert_eq!(m.clone(), m);\n }\n \n-#[allow(dead_code)]\n-fn test_const() {\n-    const SET: &'static BTreeSet<()> = &BTreeSet::new();\n-    const LEN: usize = SET.len();\n-    const IS_EMPTY: bool = SET.is_empty();\n-}\n-\n #[test]\n fn test_iter_min_max() {\n     let mut a = BTreeSet::new();"}, {"sha": "02e8f8f40228f3231a420f4b33c1868735990cc3", "filename": "library/alloc/tests/const_fns.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "patch": "@@ -0,0 +1,53 @@\n+// Test several functions can be used for constants\n+// 1. Vec::new()\n+// 2. String::new()\n+// 3. BTreeMap::new()\n+// 4. BTreeSet::new()\n+\n+#[allow(dead_code)]\n+pub const MY_VEC: Vec<usize> = Vec::new();\n+\n+#[allow(dead_code)]\n+pub const MY_STRING: String = String::new();\n+\n+// FIXME remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n+#[derive(PartialEq, Eq, PartialOrd)]\n+pub struct MyType;\n+\n+impl const Ord for MyType {\n+    fn cmp(&self, _: &Self) -> Ordering {\n+        Ordering::Equal\n+    }\n+\n+    fn max(self, _: Self) -> Self {\n+        Self\n+    }\n+\n+    fn min(self, _: Self) -> Self {\n+        Self\n+    }\n+\n+    fn clamp(self, _: Self, _: Self) -> Self {\n+        Self\n+    }\n+}\n+\n+use core::cmp::Ordering;\n+use std::collections::{BTreeMap, BTreeSet};\n+\n+pub const MY_BTREEMAP: BTreeMap<MyType, MyType> = BTreeMap::new();\n+pub const MAP: &'static BTreeMap<MyType, MyType> = &MY_BTREEMAP;\n+pub const MAP_LEN: usize = MAP.len();\n+pub const MAP_IS_EMPTY: bool = MAP.is_empty();\n+\n+pub const MY_BTREESET: BTreeSet<MyType> = BTreeSet::new();\n+pub const SET: &'static BTreeSet<MyType> = &MY_BTREESET;\n+pub const SET_LEN: usize = SET.len();\n+pub const SET_IS_EMPTY: bool = SET.is_empty();\n+\n+#[test]\n+fn test_const() {\n+    assert_eq!(MAP_LEN, 0);\n+    assert_eq!(SET_LEN, 0);\n+    assert!(MAP_IS_EMPTY && SET_IS_EMPTY)\n+}"}, {"sha": "7284c05d5ff166ae00acfbfe0161bb2c2882dd7e", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea0280aa90256317c3b3cf8b13f47a4c5968dd0/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=7ea0280aa90256317c3b3cf8b13f47a4c5968dd0", "patch": "@@ -23,6 +23,8 @@\n #![feature(slice_partition_dedup)]\n #![feature(vec_spare_capacity)]\n #![feature(string_remove_matches)]\n+#![feature(const_btree_new)]\n+#![feature(const_trait_impl)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n@@ -32,6 +34,7 @@ mod binary_heap;\n mod borrow;\n mod boxed;\n mod btree_set_hash;\n+mod const_fns;\n mod cow_str;\n mod fmt;\n mod heap;"}, {"sha": "978f25f9a93449a587300e2b20ddbfe136319116", "filename": "src/test/ui/collections-const-new.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/869daad8fce326a4a6976cbd51964da5efacec28/src%2Ftest%2Fui%2Fcollections-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/869daad8fce326a4a6976cbd51964da5efacec28/src%2Ftest%2Fui%2Fcollections-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcollections-const-new.rs?ref=869daad8fce326a4a6976cbd51964da5efacec28", "patch": "@@ -1,20 +0,0 @@\n-// check-pass\n-\n-// Test several functions can be used for constants\n-// 1. Vec::new()\n-// 2. String::new()\n-// 3. BTreeMap::new()\n-// 4. BTreeSet::new()\n-\n-#![feature(const_btree_new)]\n-\n-const MY_VEC: Vec<usize> = Vec::new();\n-\n-const MY_STRING: String = String::new();\n-\n-use std::collections::{BTreeMap, BTreeSet};\n-const MY_BTREEMAP: BTreeMap<u32, u32> = BTreeMap::new();\n-\n-const MY_BTREESET: BTreeSet<u32> = BTreeSet::new();\n-\n-fn main() {}"}]}