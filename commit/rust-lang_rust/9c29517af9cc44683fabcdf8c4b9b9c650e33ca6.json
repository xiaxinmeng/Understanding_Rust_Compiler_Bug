{"sha": "9c29517af9cc44683fabcdf8c4b9b9c650e33ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMjk1MTdhZjljYzQ0NjgzZmFiY2RmOGM0YjliOWM2NTBlMzNjYTY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-25T11:34:59Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-01-30T15:21:43Z"}, "message": "bootstrap: Make LLD available to run-make tests.", "tree": {"sha": "de0791daea78b86ebda55462850c3129f21885e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0791daea78b86ebda55462850c3129f21885e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6", "html_url": "https://github.com/rust-lang/rust/commit/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4460e7c919921ee0fbfd4804d2df33996f404581", "url": "https://api.github.com/repos/rust-lang/rust/commits/4460e7c919921ee0fbfd4804d2df33996f404581", "html_url": "https://github.com/rust-lang/rust/commit/4460e7c919921ee0fbfd4804d2df33996f404581"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "cd3afc59e560c1390c918b6d4939af7e27e5cb29", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c29517af9cc44683fabcdf8c4b9b9c650e33ca6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9c29517af9cc44683fabcdf8c4b9b9c650e33ca6", "patch": "@@ -1,6 +1,5 @@\n use std::fs;\n use std::env;\n-use std::iter;\n use std::path::PathBuf;\n use std::process::{Command, exit};\n use std::collections::HashSet;\n@@ -666,27 +665,41 @@ impl<'a> Builder<'a> {\n \n         // Add the llvm/bin directory to PATH since it contains lots of\n         // useful, platform-independent tools\n-        if tool.uses_llvm_tools() {\n+        if tool.uses_llvm_tools() && !self.config.dry_run {\n+            let mut additional_paths = vec![];\n+\n             if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-                if host.contains(\"windows\") {\n-                    // On Windows, PATH and the dynamic library path are the same,\n-                    // so we just add the LLVM bin path to lib_path\n-                    lib_paths.push(llvm_bin_path);\n-                } else {\n-                    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                    let new_path = env::join_paths(iter::once(llvm_bin_path)\n-                            .chain(env::split_paths(&old_path)))\n-                        .expect(\"Could not add LLVM bin path to PATH\");\n-                    cmd.env(\"PATH\", new_path);\n-                }\n+                additional_paths.push(llvm_bin_path);\n+            }\n+\n+            // If LLD is available, add that too.\n+            if self.config.lld_enabled {\n+                let lld_install_root = self.ensure(native::Lld {\n+                    target: self.config.build,\n+                });\n+\n+                let lld_bin_path = lld_install_root.join(\"bin\");\n+                additional_paths.push(lld_bin_path);\n+            }\n+\n+            if host.contains(\"windows\") {\n+                // On Windows, PATH and the dynamic library path are the same,\n+                // so we just add the LLVM bin path to lib_path\n+                lib_paths.extend(additional_paths);\n+            } else {\n+                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                let new_path = env::join_paths(additional_paths.into_iter()\n+                        .chain(env::split_paths(&old_path)))\n+                    .expect(\"Could not add LLVM bin path to PATH\");\n+                cmd.env(\"PATH\", new_path);\n             }\n         }\n \n         add_lib_path(lib_paths, cmd);\n     }\n \n     fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled && !self.config.dry_run {\n+        if self.config.llvm_enabled {\n             let llvm_config = self.ensure(native::Llvm {\n                 target: self.config.build,\n                 emscripten: false,"}]}