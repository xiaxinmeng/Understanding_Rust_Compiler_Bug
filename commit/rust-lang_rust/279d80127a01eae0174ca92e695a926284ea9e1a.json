{"sha": "279d80127a01eae0174ca92e695a926284ea9e1a", "node_id": "C_kwDOAAsO6NoAKDI3OWQ4MDEyN2EwMWVhZTAxNzRjYTkyZTY5NWE5MjYyODRlYTllMWE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-03T05:59:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-03T05:59:03Z"}, "message": "Rollup merge of #96646 - estebank:issue-96638, r=jackh726\n\nMitigate impact of subtle invalid call suggestion logic\n\nThere's some subtle interaction between inferred expressions being\npassed as an argument to fn calls with fewer than expected arguments. To\navoid the ICE, I'm changing indexing operations with `.get(idx)`, but\nthe underlying logic still needs to be audited as it was written with\nthe assumption that `final_arg_types` and `provided_args` have the right\nlength.\n\nAddress #96638.", "tree": {"sha": "516b0e6b05e4865256f52689338f5cd43dd14ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/516b0e6b05e4865256f52689338f5cd43dd14ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279d80127a01eae0174ca92e695a926284ea9e1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJicMSnCRBK7hj4Ov3rIwAA4K0IABpvItx6DwxlQO1NHfeM8Tj5\nEG8koDQQRkj3TdzsnUj6XiXjGSXUeaFR3CYasbwQE+Oo1BCRSWrkvvvYmmCRyGaV\n9vGKUhuzDY3R3Ucsyg+5cn8ONAp4DrnRpIzePxeEqGGlmc+xHYxA59HVb0G8a5pK\ni2116nUli6LUCt7gUznjz8FsWRvua85/BDoHf1y6eR3eF0JV0tx4E5bzI0hukr3i\nYp+MTjb0FdKZuchhCnbyd5BboBAQY47c0sXuK8Jbc4b2gHbTTOcwVL/yNW/Est03\n2OYnNcMeT5zL78hFW9Haj/cjft1oAnb5YqWgbEr4irE6+lSuENvqkkCqqQZdgeM=\n=7Z/b\n-----END PGP SIGNATURE-----\n", "payload": "tree 516b0e6b05e4865256f52689338f5cd43dd14ec5\nparent 1e6b880b846251e0ceb75bbb069886d2b641ad01\nparent 7790b6e1c075a29274b4ee1e598b2f21bf363699\nauthor Yuki Okushi <jtitor@2k36.org> 1651557543 +0900\ncommitter GitHub <noreply@github.com> 1651557543 +0900\n\nRollup merge of #96646 - estebank:issue-96638, r=jackh726\n\nMitigate impact of subtle invalid call suggestion logic\n\nThere's some subtle interaction between inferred expressions being\npassed as an argument to fn calls with fewer than expected arguments. To\navoid the ICE, I'm changing indexing operations with `.get(idx)`, but\nthe underlying logic still needs to be audited as it was written with\nthe assumption that `final_arg_types` and `provided_args` have the right\nlength.\n\nAddress #96638.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279d80127a01eae0174ca92e695a926284ea9e1a", "html_url": "https://github.com/rust-lang/rust/commit/279d80127a01eae0174ca92e695a926284ea9e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279d80127a01eae0174ca92e695a926284ea9e1a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6b880b846251e0ceb75bbb069886d2b641ad01", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6b880b846251e0ceb75bbb069886d2b641ad01", "html_url": "https://github.com/rust-lang/rust/commit/1e6b880b846251e0ceb75bbb069886d2b641ad01"}, {"sha": "7790b6e1c075a29274b4ee1e598b2f21bf363699", "url": "https://api.github.com/repos/rust-lang/rust/commits/7790b6e1c075a29274b4ee1e598b2f21bf363699", "html_url": "https://github.com/rust-lang/rust/commit/7790b6e1c075a29274b4ee1e598b2f21bf363699"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "75976ebdf2822b3c6fd8e0f1cccd1fd75c4ac920", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/279d80127a01eae0174ca92e695a926284ea9e1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279d80127a01eae0174ca92e695a926284ea9e1a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=279d80127a01eae0174ca92e695a926284ea9e1a", "patch": "@@ -429,9 +429,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             errors.drain_filter(|error| {\n                 let Error::Invalid(input_idx, Compatibility::Incompatible(error)) = error else { return false };\n                 let expected_ty = expected_input_tys[*input_idx];\n-                let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                let Some(Some((provided_ty, _))) = final_arg_types.get(*input_idx) else { return false };\n                 let cause = &self.misc(provided_args[*input_idx].span);\n-                let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n+                let trace = TypeTrace::types(cause, true, expected_ty, *provided_ty);\n                 if let Some(e) = error {\n                     if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n                         self.report_and_explain_type_error(trace, e).emit();\n@@ -679,8 +679,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Error::Invalid(input_idx, compatibility) => {\n                         let expected_ty = expected_input_tys[input_idx];\n                         if let Compatibility::Incompatible(error) = &compatibility {\n-                            let provided_ty = final_arg_types[input_idx].map(|ty| ty.0).unwrap();\n-                            let cause = &self.misc(provided_args[input_idx].span);\n+                            let provided_ty = final_arg_types\n+                                .get(input_idx)\n+                                .and_then(|x| x.as_ref())\n+                                .map(|ty| ty.0)\n+                                .unwrap_or(tcx.ty_error());\n+                            let cause = &self.misc(\n+                                provided_args.get(input_idx).map(|i| i.span).unwrap_or(call_span),\n+                            );\n                             let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n                             if let Some(e) = error {\n                                 self.note_type_err(\n@@ -695,14 +701,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n \n-                        self.emit_coerce_suggestions(\n-                            &mut err,\n-                            &provided_args[input_idx],\n-                            final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n-                            final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n-                            None,\n-                            None,\n-                        );\n+                        if let Some(expr) = provided_args.get(input_idx) {\n+                            self.emit_coerce_suggestions(\n+                                &mut err,\n+                                &expr,\n+                                final_arg_types[input_idx].map(|ty| ty.0).unwrap(),\n+                                final_arg_types[input_idx].map(|ty| ty.1).unwrap(),\n+                                None,\n+                                None,\n+                            );\n+                        }\n                     }\n                     Error::Extra(arg_idx) => {\n                         let arg_type = if let Some((_, ty)) = final_arg_types[arg_idx] {"}, {"sha": "9c6e81ab8cc75eb5b292c15fc7a7f9bff760bc8e", "filename": "src/test/ui/argument-suggestions/issue-96638.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/279d80127a01eae0174ca92e695a926284ea9e1a/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279d80127a01eae0174ca92e695a926284ea9e1a/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs?ref=279d80127a01eae0174ca92e695a926284ea9e1a", "patch": "@@ -0,0 +1,9 @@\n+fn f(_: usize, _: &usize, _: usize) {}\n+\n+fn arg<T>() -> T { todo!() }\n+\n+fn main() {\n+    let x = arg(); // `x` must be inferred\n+    // The reference on `&x` is important to reproduce the ICE\n+    f(&x, \"\"); //~ ERROR this function takes 3 arguments but 2 arguments were supplied\n+}"}, {"sha": "35190e2ca0d8251e9f915b85069b85f42e6ba738", "filename": "src/test/ui/argument-suggestions/issue-96638.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/279d80127a01eae0174ca92e695a926284ea9e1a/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/279d80127a01eae0174ca92e695a926284ea9e1a/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr?ref=279d80127a01eae0174ca92e695a926284ea9e1a", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n+  --> $DIR/issue-96638.rs:8:5\n+   |\n+LL |     f(&x, \"\");\n+   |     ^ -- an argument of type `usize` is missing\n+   |\n+note: function defined here\n+  --> $DIR/issue-96638.rs:1:4\n+   |\n+LL | fn f(_: usize, _: &usize, _: usize) {}\n+   |    ^ --------  ---------  --------\n+help: provide the argument\n+   |\n+LL |     f({usize}, &x, {usize});\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}]}