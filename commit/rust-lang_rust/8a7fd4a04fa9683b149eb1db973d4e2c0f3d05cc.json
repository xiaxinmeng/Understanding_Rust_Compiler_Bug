{"sha": "8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhN2ZkNGEwNGZhOTY4M2IxNDllYjFkYjk3M2Q0ZTJjMGYzZDA1Y2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-13T00:30:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-13T00:31:49Z"}, "message": "Support general warnings and errors in lint pass via flags and attrs. Close #1543.", "tree": {"sha": "ab41bc0cb3b9d8df784f0ae108a73bcb17328333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab41bc0cb3b9d8df784f0ae108a73bcb17328333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "html_url": "https://github.com/rust-lang/rust/commit/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3cb05311ef7d671b0bf92b041112ef141dc188", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3cb05311ef7d671b0bf92b041112ef141dc188", "html_url": "https://github.com/rust-lang/rust/commit/7b3cb05311ef7d671b0bf92b041112ef141dc188"}], "stats": {"total": 395, "additions": 269, "deletions": 126}, "files": [{"sha": "a4386c50275a70b4c2bc1546a8dbbc88a7232237", "filename": "src/librustsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fexpand.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -76,12 +76,7 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n               ast::meta_list(n, _) { n }\n             };\n             alt exts.find(mname) {\n-              none { items }\n-\n-              some(normal(_)) | some(macro_defining(_)) {\n-                cx.span_err(\n-                    attr.span,\n-                    #fmt[\"%s cannot be used as a decorator\", mname]);\n+              none | some(normal(_)) | some(macro_defining(_)) {\n                 items\n               }\n "}, {"sha": "20cd84d407882e31fefef16dbce47ef621450c5c", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -366,10 +366,16 @@ fn build_session_options(match: getopts::match,\n \n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n-    let mut lint_opts = [];\n-    if opt_present(match, \"no-lint-ctypes\") {\n-        lint_opts += [(lint::ctypes, false)];\n-    }\n+\n+    let lint_flags = (getopts::opt_strs(match, \"W\")\n+                      + getopts::opt_strs(match, \"warn\"));\n+    let lint_dict = lint::get_lint_dict();\n+    let lint_opts = vec::map(lint_flags) {|flag|\n+        alt lint::lookup_lint(lint_dict, flag) {\n+          none { early_error(demitter, #fmt(\"unknown warning: %s\", flag)) }\n+          some(x) { x }\n+        }\n+    };\n \n     let output_type =\n         if parse_only || no_trans {\n@@ -426,7 +432,6 @@ fn build_session_options(match: getopts::match,\n     let addl_lib_search_paths = getopts::opt_strs(match, \"L\");\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n-    let warn_unused_imports = opt_present(match, \"warn-unused-imports\");\n     let sopts: @session::options =\n         @{crate_type: crate_type,\n           static: static,\n@@ -448,8 +453,7 @@ fn build_session_options(match: getopts::match,\n           test: test,\n           parse_only: parse_only,\n           no_trans: no_trans,\n-          no_asm_comments: no_asm_comments,\n-          warn_unused_imports: warn_unused_imports};\n+          no_asm_comments: no_asm_comments};\n     ret sopts;\n }\n \n@@ -521,11 +525,12 @@ fn opts() -> [getopts::opt] {\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"count-llvm-insns\"),\n          optflag(\"no-verify\"),\n-         optflag(\"no-lint-ctypes\"),\n+\n+         optmulti(\"W\"), optmulti(\"warn\"),\n+\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"no-asm-comments\"),\n-         optflag(\"warn-unused-imports\"),\n          optflag(\"enforce-mut-vars\")];\n }\n "}, {"sha": "0654691242aaf47a4f453997c640e5d9b0fb6f32", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -39,7 +39,6 @@ Options:\n     --lib              Compile a library crate\n     --ls               List the symbols defined by a compiled library crate\n     --no-asm-comments  Do not add comments into the assembly source\n-    --no-lint-ctypes   Suppress warnings for possibly incorrect ctype usage\n     --no-trans         Run all passes except translation; no output\n     --no-verify        Suppress LLVM verification step (slight speedup)\n                        (see http://llvm.org/docs/Passes.html for detail)\n@@ -65,13 +64,15 @@ Options:\n                        (see http://sources.redhat.com/autobook/autobook/\n                        autobook_17.html for detail)\n \n+    -W <foo>           enable warning <foo>\n+    -W no-<foo>        disable warning <foo>\n+    -W err-<foo>       enable warning <foo> as an error\n+\n     --time-passes      Time the individual phases of the compiler\n     --time-llvm-passes Time the individual phases of the LLVM backend\n     --count-llvm-insns Count and categorize generated LLVM instructions\n-    -v --version       Print version info and exit\n-    --warn-unused-imports\n-                       Warn about unnecessary imports\n \n+    -v --version       Print version info and exit\n \");\n }\n "}, {"sha": "af978db1a77bc5090b5d9c2fd7a6640ac64f177f", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -31,7 +31,7 @@ type options =\n      debuginfo: bool,\n      extra_debuginfo: bool,\n      verify: bool,\n-     lint_opts: [(lint::option, bool)],\n+     lint_opts: [(lint::lint, lint::level)],\n      save_temps: bool,\n      stats: bool,\n      time_passes: bool,\n@@ -45,8 +45,7 @@ type options =\n      test: bool,\n      parse_only: bool,\n      no_trans: bool,\n-     no_asm_comments: bool,\n-     warn_unused_imports: bool};\n+     no_asm_comments: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n "}, {"sha": "1942ed4f0a4f32736bf875c25b0758898dbcfe56", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 193, "deletions": 98, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -1,117 +1,197 @@\n import driver::session::session;\n-import middle::ty::ctxt;\n+import middle::ty;\n import syntax::{ast, visit};\n import syntax::attr;\n-import std::map::hashmap;\n+import syntax::codemap::span;\n+import std::map::{map,hashmap,hash_from_strs};\n import io::writer_util;\n \n-enum option {\n+export lint, ctypes, unused_imports;\n+export level, ignore, warn, error;\n+export lookup_lint, lint_dict, get_lint_dict, check_crate;\n+\n+#[doc=\"\n+\n+A 'lint' check is a kind of miscallaneous constraint that a user _might_ want\n+to enforce, but might reasonably want to permit as well, on a module-by-module\n+basis. They contrast with static constraints enforced by other phases of the\n+compiler, which are generally required to hold in order to compile the program\n+correctly at all.\n+\n+\"]\n+\n+enum lint {\n     ctypes,\n+    unused_imports,\n }\n \n-impl opt_ for option {\n-    fn desc() -> str {\n-        \"lint: \" + alt self {\n-          ctypes { \"ctypes usage checking\" }\n-        }\n-    }\n-    fn run(tcx: ty::ctxt, crate: @ast::crate, time_pass: bool) {\n-        let checker = alt self {\n-          ctypes {\n-            bind check_ctypes(tcx, crate)\n-          }\n-        };\n-        time(time_pass, self.desc(), checker);\n-    }\n+enum level {\n+    ignore, warn, error\n }\n \n-// FIXME: Copied from driver.rs, to work around a bug(#1566)\n-fn time(do_it: bool, what: str, thunk: fn()) {\n-    if !do_it{ ret thunk(); }\n-    let start = std::time::precise_time_s();\n-    thunk();\n-    let end = std::time::precise_time_s();\n-    io::stdout().write_str(#fmt(\"time: %3.3f s\\t%s\\n\",\n-                                end - start, what));\n+type lint_spec = @{lint: lint,\n+                   desc: str,\n+                   default: level};\n+\n+type lint_dict = hashmap<str,lint_spec>;\n+\n+fn get_lint_dict() -> lint_dict {\n+    let v = [\n+        (\"ctypes\",\n+         @{lint: ctypes,\n+           desc: \"proper use of core::libc types in native modules\",\n+           default: warn}),\n+\n+        (\"unused-imports\",\n+         @{lint: unused_imports,\n+           desc: \"imports that are never used\",\n+           default: ignore})\n+    ];\n+    hash_from_strs(v)\n }\n \n-// Merge lint options specified by crate attributes and rustc command\n-// line. Precedence: cmdline > attribute > default\n-fn merge_opts(attrs: [ast::attribute], cmd_opts: [(option, bool)]) ->\n-    [(option, bool)] {\n-    fn str_to_option(name: str) -> (option, bool) {\n-        ret alt check name {\n-          \"ctypes\" { (ctypes, true) }\n-          \"no_ctypes\" { (ctypes, false) }\n-        }\n-    }\n+type ctxt = @{dict: lint_dict,\n+              curr: hashmap<lint, level>,\n+              tcx: ty::ctxt};\n \n-    fn meta_to_option(meta: @ast::meta_item) -> (option, bool) {\n-        ret alt meta.node {\n-          ast::meta_word(name) {\n-            str_to_option(name)\n-          }\n-          _ { fail \"meta_to_option: meta_list contains a non-meta-word\"; }\n-        };\n+impl methods for ctxt {\n+    fn get_level(lint: lint) -> level {\n+        alt self.curr.find(lint) {\n+          some(c) { c }\n+          none { ignore }\n+        }\n     }\n \n-    fn default() -> [(option, bool)] {\n-        [(ctypes, true)]\n+    fn set_level(lint: lint, level: level) {\n+        if level == ignore {\n+            self.curr.remove(lint);\n+        } else {\n+            self.curr.insert(lint, level);\n+        }\n     }\n \n-    fn contains(xs: [(option, bool)], x: option) -> bool {\n-        for xs.each {|c|\n-            let (o, _) = c;\n-            if o == x { ret true; }\n+    fn span_lint(level: level, span: span, msg: str) {\n+        alt level {\n+          ignore { }\n+          warn { self.tcx.sess.span_warn(span, msg); }\n+          error { self.tcx.sess.span_err(span, msg); }\n         }\n-        ret false;\n     }\n \n-    let mut result = cmd_opts;\n+    #[doc=\"\n+          Merge the warnings specified by any `warn(...)` attributes into the\n+          current lint context, call the provided function, then reset the\n+          warnings in effect to their previous state.\n+    \"]\n+    fn with_warn_attrs(attrs: [ast::attribute], f: fn(ctxt)) {\n \n-    let lint_metas =\n-        attr::attr_metas(attr::find_attrs_by_name(attrs, \"lint\"));\n+        let mut undo = [];\n \n-    vec::iter(lint_metas) {|mi|\n-        alt mi.node {\n-          ast::meta_list(_, list) {\n-            vec::iter(list) {|e|\n-                let (o, v) = meta_to_option(e);\n-                if !contains(cmd_opts, o) {\n-                    result += [(o, v)];\n+        let metas = attr::attr_metas(attr::find_attrs_by_name(attrs, \"warn\"));\n+        for metas.each {|meta|\n+            alt meta.node {\n+              ast::meta_list(_, metas) {\n+                for metas.each {|meta|\n+                    alt meta.node {\n+                      ast::meta_word(lintname) {\n+                        alt lookup_lint(self.dict, lintname) {\n+                          none {\n+                            self.tcx.sess.span_err(\n+                                meta.span,\n+                                #fmt(\"unknown warning: '%s'\", lintname));\n+                          }\n+                          some((lint, new_level)) {\n+                            let old_level = self.get_level(lint);\n+                            self.set_level(lint, new_level);\n+                            undo += [(lint, old_level)]\n+                          }\n+                        }\n+                      }\n+                      _ {\n+                        self.tcx.sess.span_err(\n+                            meta.span,\n+                            \"malformed warning attribute\");\n+                      }\n+                    }\n                 }\n+              }\n+              _ {\n+                self.tcx.sess.span_err(meta.span,\n+                                       \"malformed warning attribute\");\n+              }\n             }\n-          }\n-          _ { }\n         }\n+\n+        f(self);\n+\n+        for undo.each {|pair|\n+            let (lint,old_level) = pair;\n+            self.set_level(lint, old_level);\n+        }\n+    }\n+}\n+\n+\n+fn lookup_lint(dict: lint_dict, s: str)\n+    -> option<(lint, level)> {\n+    let s = str::replace(s, \"-\", \"_\");\n+    let (name, level) = if s.starts_with(\"no_\") {\n+        (s.substr(3u, s.len() - 3u), ignore)\n+    } else if s.starts_with(\"err_\") {\n+        (s.substr(4u, s.len() - 4u), error)\n+    } else {\n+        (s, warn)\n     };\n+    alt dict.find(name) {\n+      none { none }\n+      some(spec) { some((spec.lint, level)) }\n+    }\n+}\n+\n+\n+// FIXME: Copied from driver.rs, to work around a bug(#1566)\n+fn time(do_it: bool, what: str, thunk: fn()) {\n+    if !do_it{ ret thunk(); }\n+    let start = std::time::precise_time_s();\n+    thunk();\n+    let end = std::time::precise_time_s();\n+    io::stdout().write_str(#fmt(\"time: %3.3f s\\t%s\\n\",\n+                                end - start, what));\n+}\n \n-    for default().each {|c|\n-        let (o, v) = c;\n-        if !contains(result, o) {\n-            result += [(o, v)];\n+fn check_item(cx: ctxt, i: @ast::item) {\n+    cx.with_warn_attrs(i.attrs) {|cx|\n+        cx.curr.items {|lint, level|\n+            alt lint {\n+              ctypes { check_item_ctypes(cx, level, i); }\n+              unused_imports { check_item_unused_imports(cx, level, i); }\n+            }\n         }\n     }\n+}\n \n-    ret result;\n+fn check_item_unused_imports(_cx: ctxt, _level: level, _it: @ast::item) {\n+    // FIXME: Don't know how to check this in lint yet, it's currently being\n+    // done over in resolve. When resolve is rewritten, do it here instead.\n }\n \n-fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n-    fn check_native_fn(tcx: ty::ctxt, decl: ast::fn_decl) {\n+fn check_item_ctypes(cx: ctxt, level: level, it: @ast::item) {\n+\n+    fn check_native_fn(cx: ctxt, level: level, decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n         for vec::each(tys + [decl.output]) {|ty|\n             alt ty.node {\n               ast::ty_path(_, id) {\n-                alt tcx.def_map.get(id) {\n+                alt cx.tcx.def_map.get(id) {\n                   ast::def_prim_ty(ast::ty_int(ast::ty_i)) {\n-                    tcx.sess.span_warn(\n-                        ty.span,\n+                    cx.span_lint(\n+                        level, ty.span,\n                         \"found rust type `int` in native module, while \\\n                          libc::c_int or libc::c_long should be used\");\n                   }\n                   ast::def_prim_ty(ast::ty_uint(ast::ty_u)) {\n-                    tcx.sess.span_warn(\n-                        ty.span,\n+                    cx.span_lint(\n+                        level, ty.span,\n                         \"found rust type `uint` in native module, while \\\n                          libc::c_uint or libc::c_ulong should be used\");\n                   }\n@@ -123,40 +203,55 @@ fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n         }\n     }\n \n-    fn check_item(tcx: ty::ctxt, it: @ast::item) {\n-        alt it.node {\n-          ast::item_native_mod(nmod) if attr::native_abi(it.attrs) !=\n-              either::right(ast::native_abi_rust_intrinsic) {\n-            for nmod.items.each {|ni|\n-                alt ni.node {\n-                  ast::native_item_fn(decl, tps) {\n-                    check_native_fn(tcx, decl);\n-                  }\n-                  _ { }\n-                }\n+    alt it.node {\n+      ast::item_native_mod(nmod) if attr::native_abi(it.attrs) !=\n+      either::right(ast::native_abi_rust_intrinsic) {\n+        for nmod.items.each {|ni|\n+            alt ni.node {\n+              ast::native_item_fn(decl, tps) {\n+                check_native_fn(cx, level, decl);\n+              }\n+              _ { }\n             }\n-          }\n-          _ {/* nothing to do */ }\n         }\n+      }\n+      _ {/* nothing to do */ }\n     }\n-\n-    let visit = visit::mk_simple_visitor(@{\n-        visit_item: bind check_item(tcx, _)\n-        with *visit::default_simple_visitor()\n-    });\n-    visit::visit_crate(*crate, (), visit);\n }\n \n+\n fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n-               opts: [(option, bool)], time: bool) {\n-    let lint_opts = lint::merge_opts(crate.node.attrs, opts);\n-    for lint_opts.each {|opt|\n-        let (lopt, switch) = opt;\n-        if switch == true {\n-            lopt.run(tcx, crate, time);\n+               lint_opts: [(lint, level)], time_pass: bool) {\n+\n+    fn hash_lint(&&lint: lint) -> uint { lint as uint }\n+    fn eq_lint(&&a: lint, &&b: lint) -> bool { a == b }\n+\n+    let cx = @{dict: get_lint_dict(),\n+               curr: hashmap(hash_lint, eq_lint),\n+               tcx: tcx};\n+\n+    // Install defaults.\n+    cx.dict.items {|_k, spec| cx.set_level(spec.lint, spec.default); }\n+\n+    // Install command-line options, overriding defaults.\n+    for lint_opts.each {|pair|\n+        let (lint,level) = pair;\n+        cx.set_level(lint, level);\n+    }\n+\n+    time(time_pass, \"lint checking\") {||\n+        cx.with_warn_attrs(crate.node.attrs) {|cx|\n+            let visit = visit::mk_simple_visitor(@{\n+                visit_item: fn@(i: @ast::item) { check_item(cx, i); }\n+                with *visit::default_simple_visitor()\n+            });\n+            visit::visit_crate(*crate, (), visit);\n         }\n     }\n+\n+    tcx.sess.abort_if_errors();\n }\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "26f87c82722ca933607ed46f21727d137cbe930b", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -158,9 +158,16 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n     // check_for_collisions must happen after resolve_names so we\n     // don't complain if a pattern uses the same nullary enum twice\n     check_for_collisions(e, *crate);\n-    if sess.opts.warn_unused_imports {\n-        check_unused_imports(e);\n+\n+    // FIXME: move this to the lint pass when rewriting resolve.\n+    for sess.opts.lint_opts.each {|pair|\n+        let (lint,level) = pair;\n+        if lint == lint::unused_imports && level != lint::ignore {\n+            check_unused_imports(e, level);\n+            break;\n+        }\n     }\n+\n     ret {def_map: e.def_map, exp_map: e.exp_map, impl_map: e.impl_map};\n }\n \n@@ -361,12 +368,24 @@ fn resolve_imports(e: env) {\n     e.sess.abort_if_errors();\n }\n \n-fn check_unused_imports(e: @env) {\n+// FIXME (#1634): move this to the lint pass when rewriting resolve. It's\n+// using lint-specific control flags presently but resolve-specific data\n+// structures. Should use the general lint framework (with scopes, attrs).\n+fn check_unused_imports(e: @env, level: lint::level) {\n     e.imports.items {|k, v|\n         alt v {\n             resolved(_, _, _, _, name, sp) {\n               if !vec::contains(e.used_imports.data, k) {\n-                e.sess.span_warn(sp, \"unused import \" + name);\n+                  alt level {\n+                    lint::warn {\n+                      e.sess.span_warn(sp, \"unused import \" + name);\n+                    }\n+                    lint::error {\n+                      e.sess.span_err(sp, \"unused import \" + name);\n+                    }\n+                    lint::ignore {\n+                    }\n+                  }\n               }\n             }\n             _ { }"}, {"sha": "d02302d5dc53d4d54d3207dc34e4c1aaeb5af0b7", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -148,7 +148,6 @@ fn build_session() -> (session::session, @mut bool) {\n         parse_only: false,\n         no_trans: false,\n         no_asm_comments: false,\n-        warn_unused_imports: false\n     };\n \n     let codemap = codemap::new_codemap();"}, {"sha": "a81b8301a9f7be620fe5ee1236c58edc9ceb3561", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:unused import\n-// compile-flags:--warn-unused-imports\n+// compile-flags:-W unused-imports\n import cal = bar::c::cc;\n \n mod foo {"}, {"sha": "1c6966324fcf12653e5569af766655778443c78a", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:found rust type\n+#[warn(err_ctypes)];\n+\n+#[nolink]\n+native mod libc {\n+    fn malloc(size: int) -> *u8;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "4056f1dbdb4244ff0fe902736e4cf3fa983d8338", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags:-W err-ctypes\n+// error-pattern:found rust type\n+#[nolink]\n+native mod libc {\n+    fn malloc(size: int) -> *u8;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "d0df4228779d11f8b7ad8303d1bc8a7255d82eed", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=8a7fd4a04fa9683b149eb1db973d4e2c0f3d05cc", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags:-W err-ctypes\n+\n+#[warn(no_ctypes)];\n+\n+#[nolink]\n+native mod libc {\n+    fn malloc(size: int) -> *u8;\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}