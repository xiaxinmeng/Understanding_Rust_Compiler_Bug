{"sha": "47143ee24a135ee2a82864c9ff892fafe5cd262d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTQzZWUyNGExMzVlZTJhODI4NjRjOWZmODkyZmFmZTVjZDI2MmQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-07T13:37:10Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-07T13:37:10Z"}, "message": "Stop storing cmp glue in tydescs\n\nThere's no such thing anymore, we can simply call upcalls.cmp_type.", "tree": {"sha": "70a103ed25a5b4f3bc1bc199d4f01b5fae1daf83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a103ed25a5b4f3bc1bc199d4f01b5fae1daf83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47143ee24a135ee2a82864c9ff892fafe5cd262d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47143ee24a135ee2a82864c9ff892fafe5cd262d", "html_url": "https://github.com/rust-lang/rust/commit/47143ee24a135ee2a82864c9ff892fafe5cd262d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47143ee24a135ee2a82864c9ff892fafe5cd262d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28a5552e3e822063499c8fb7c6c0be6bb881863", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28a5552e3e822063499c8fb7c6c0be6bb881863", "html_url": "https://github.com/rust-lang/rust/commit/b28a5552e3e822063499c8fb7c6c0be6bb881863"}], "stats": {"total": 57, "additions": 7, "deletions": 50}, "files": [{"sha": "c02960deb00f465ff2fc8e817de52b05ce6ad046", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=47143ee24a135ee2a82864c9ff892fafe5cd262d", "patch": "@@ -44,7 +44,7 @@ const tydesc_field_unused: int = 6;\n const tydesc_field_sever_glue: int = 7;\n const tydesc_field_mark_glue: int = 8;\n const tydesc_field_unused2: int = 9;\n-const tydesc_field_cmp_glue: int = 10;\n+const tydesc_field_unused_2: int = 10;\n const tydesc_field_shape: int = 11;\n const tydesc_field_shape_tables: int = 12;\n const tydesc_field_n_params: int = 13;"}, {"sha": "16baec360d8e117bf3da9edff7c89f28aa7b6830", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=47143ee24a135ee2a82864c9ff892fafe5cd262d", "patch": "@@ -977,7 +977,6 @@ fn declare_tydesc(ccx: @crate_ctxt, t: ty::t, ty_params: [uint])\n           mutable take_glue: none,\n           mutable drop_glue: none,\n           mutable free_glue: none,\n-          mutable cmp_glue: none,\n           ty_params: ty_params};\n     log(debug, \"--- declare_tydesc \" + ty_to_str(ccx.tcx, t));\n     ret info;\n@@ -1055,7 +1054,6 @@ fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n fn emit_tydescs(ccx: @crate_ctxt) {\n     ccx.tydescs.items {|key, val|\n         let glue_fn_ty = T_ptr(T_glue_fn(ccx));\n-        let cmp_fn_ty = T_ptr(T_cmp_glue_fn(ccx));\n         let ti = val;\n         let take_glue =\n             alt ti.take_glue {\n@@ -1072,11 +1070,6 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n               none { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n-        let cmp_glue =\n-            alt ti.cmp_glue {\n-              none { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n-              some(v) { ccx.stats.n_real_glues += 1u; v }\n-            };\n \n         let shape = shape::shape_of(ccx, key, ti.ty_params);\n         let shape_tables =\n@@ -1095,7 +1088,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n                             C_null(glue_fn_ty), // sever_glue\n                             C_null(glue_fn_ty), // mark_glue\n                             C_null(glue_fn_ty), // unused\n-                            cmp_glue, // cmp_glue\n+                            C_null(T_ptr(T_i8())), // cmp_glue\n                             C_shape(ccx, shape), // shape\n                             shape_tables, // shape_tables\n                             C_int(ccx, 0), // n_params\n@@ -1548,7 +1541,6 @@ fn lazily_emit_all_tydesc_glue(ccx: @crate_ctxt,\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_free_glue, static_ti);\n-    lazily_emit_tydesc_glue(ccx, abi::tydesc_field_cmp_glue, static_ti);\n }\n \n fn lazily_emit_all_generic_info_tydesc_glues(ccx: @crate_ctxt,\n@@ -1611,17 +1603,6 @@ fn lazily_emit_tydesc_glue(ccx: @crate_ctxt, field: int,\n                        ty_to_str(ccx.tcx, ti.ty));\n               }\n             }\n-        } else if field == abi::tydesc_field_cmp_glue {\n-            alt ti.cmp_glue {\n-              some(_) { }\n-              none {\n-                #debug(\"+++ lazily_emit_tydesc_glue CMP %s\",\n-                       ty_to_str(ccx.tcx, ti.ty));\n-                ti.cmp_glue = some(ccx.upcalls.cmp_type);\n-                #debug(\"--- lazily_emit_tydesc_glue CMP %s\",\n-                       ty_to_str(ccx.tcx, ti.ty));\n-              }\n-            }\n         }\n       }\n     }\n@@ -1687,24 +1668,15 @@ fn call_cmp_glue(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n \n     let llrawlhsptr = BitCast(bcx, lllhs, T_ptr(T_i8()));\n     let llrawrhsptr = BitCast(bcx, llrhs, T_ptr(T_i8()));\n-    let ti = none::<@tydesc_info>;\n+    let ti = none;\n     r = get_tydesc(bcx, t, false, ti).result;\n     let lltydesc = r.val;\n     bcx = r.bcx;\n-    lazily_emit_tydesc_glue(bcx_ccx(bcx), abi::tydesc_field_cmp_glue, ti);\n     let lltydescs =\n         GEPi(bcx, lltydesc, [0, abi::tydesc_field_first_param]);\n     lltydescs = Load(bcx, lltydescs);\n \n-    let llfn;\n-    alt ti {\n-      none {\n-        let llfnptr =\n-            GEPi(bcx, lltydesc, [0, abi::tydesc_field_cmp_glue]);\n-        llfn = Load(bcx, llfnptr);\n-      }\n-      some(sti) { llfn = option::get(sti.cmp_glue); }\n-    }\n+    let llfn = bcx_ccx(bcx).upcalls.cmp_type;\n \n     let llcmpresultptr = alloca(bcx, T_i1());\n     Call(bcx, llfn, [llcmpresultptr, lltydesc, lltydescs,"}, {"sha": "fdac4fa165fcf5e20bb9279838789600c1839e1c", "filename": "src/comp/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs?ref=47143ee24a135ee2a82864c9ff892fafe5cd262d", "patch": "@@ -47,7 +47,6 @@ type tydesc_info =\n      mutable take_glue: option<ValueRef>,\n      mutable drop_glue: option<ValueRef>,\n      mutable free_glue: option<ValueRef>,\n-     mutable cmp_glue: option<ValueRef>,\n      ty_params: [uint]};\n \n /*\n@@ -570,30 +569,19 @@ fn T_glue_fn(cx: @crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n-fn T_cmp_glue_fn(cx: @crate_ctxt) -> TypeRef {\n-    let s = \"cmp_glue_fn\";\n-    alt name_has_type(cx.tn, s) { some(t) { ret t; } _ {} }\n-    let t = T_tydesc_field(cx, abi::tydesc_field_cmp_glue);\n-    associate_type(cx.tn, s, t);\n-    ret t;\n-}\n-\n fn T_tydesc(targ_cfg: @session::config) -> TypeRef {\n     let tydesc = T_named_struct(\"tydesc\");\n     let tydescpp = T_ptr(T_ptr(tydesc));\n     let pvoid = T_ptr(T_i8());\n     let glue_fn_ty =\n         T_ptr(T_fn([T_ptr(T_nil()), T_ptr(T_nil()), tydescpp,\n                     pvoid], T_void()));\n-    let cmp_glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_i1()), T_ptr(tydesc), tydescpp,\n-                    pvoid, pvoid, T_i8()], T_void()));\n \n     let int_type = T_int(targ_cfg);\n     let elems =\n         [tydescpp, int_type, int_type,\n          glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         T_ptr(T_i8()), glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n+         T_ptr(T_i8()), glue_fn_ty, glue_fn_ty, glue_fn_ty, T_ptr(T_i8()),\n          T_ptr(T_i8()), T_ptr(T_i8()), int_type, int_type];\n     set_struct_body(tydesc, elems);\n     ret tydesc;"}, {"sha": "beb772edbe249c43e1a6e7b54352aa33656817c7", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/47143ee24a135ee2a82864c9ff892fafe5cd262d/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=47143ee24a135ee2a82864c9ff892fafe5cd262d", "patch": "@@ -221,9 +221,6 @@ template <typename T> class ptr_vec : public task_owned<ptr_vec<T> > {\n \n typedef void CDECL (glue_fn)(void *, void *,\n                              const type_desc **, void *);\n-typedef void CDECL (cmp_glue_fn)(void *, void *,\n-                                 const type_desc **,\n-                                 void *, void *, int8_t);\n \n struct rust_shape_tables {\n     uint8_t *tags;\n@@ -270,11 +267,11 @@ struct type_desc {\n     glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n-    void *unused;\n+    void *UNUSED;\n     glue_fn *sever_glue;    // For GC.\n     glue_fn *mark_glue;     // For GC.\n     uintptr_t unused2;\n-    cmp_glue_fn *cmp_glue;\n+    void *UNUSED_2;\n     const uint8_t *shape;\n     const rust_shape_tables *shape_tables;\n     uintptr_t n_params;"}]}