{"sha": "32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYWM5ZDBlNDVmZTNhOGE2YjM2NjZjYjJlMDY1YjhmOTM1ZWUwYTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T12:14:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "pass attr as param in new methods", "tree": {"sha": "66da4f4aed0140e6b02115c2fa5a17432f53f7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66da4f4aed0140e6b02115c2fa5a17432f53f7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "html_url": "https://github.com/rust-lang/rust/commit/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e01b709640d9760758a19ef0dc3732991c14d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e01b709640d9760758a19ef0dc3732991c14d30", "html_url": "https://github.com/rust-lang/rust/commit/4e01b709640d9760758a19ef0dc3732991c14d30"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "b4d828ff849204ccf35c7f8cfcb5480dbcba1747", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "patch": "@@ -845,20 +845,20 @@ impl<'a> Parser<'a> {\n             // could be removed without changing functionality, but it's faster\n             // to have it here, especially for programs with large constants.\n             token::Literal(_) => parse_lit!(),\n-            token::OpenDelim(token::Paren) => return self.parse_tuple_parens_expr(),\n+            token::OpenDelim(token::Paren) => return self.parse_tuple_parens_expr(attrs),\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs);\n             }\n             token::BinOp(token::Or) | token::OrOr => return self.parse_closure_expr(attrs),\n-            token::OpenDelim(token::Bracket) => return self.parse_array_or_repeat_expr(),\n+            token::OpenDelim(token::Bracket) => return self.parse_array_or_repeat_expr(attrs),\n             _ => {\n                 if self.eat_lt() {\n                     let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n                     let hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n                 if self.token.is_path_start() {\n-                    return self.parse_path_start_expr();\n+                    return self.parse_path_start_expr(attrs);\n                 }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_closure_expr(attrs);\n@@ -979,14 +979,13 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    fn parse_tuple_parens_expr(&mut self) -> PResult<'a, P<Expr>> {\n+    fn parse_tuple_parens_expr(&mut self, mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n         let mut first = true;\n-        let mut attrs = ThinVec::new();\n         let parse_leading_attr_expr = |p: &mut Self| {\n             if first {\n                 // `(#![foo] a, b, ...)` is OK...\n-                attrs = p.parse_inner_attributes()?.into();\n+                attrs.extend(p.parse_inner_attributes()?);\n                 // ...but not `(a, #![foo] b, ...)`.\n                 first = false;\n             }\n@@ -1007,11 +1006,14 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    fn parse_array_or_repeat_expr(&mut self) -> PResult<'a, P<Expr>> {\n+    fn parse_array_or_repeat_expr(\n+        &mut self,\n+        mut attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n         self.bump(); // `[`\n \n-        let attrs = self.parse_inner_attributes()?.into();\n+        attrs.extend(self.parse_inner_attributes()?);\n \n         let kind = if self.eat(&token::CloseDelim(token::Bracket)) {\n             // Empty vector\n@@ -1047,8 +1049,7 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    fn parse_path_start_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        let attrs = ThinVec::new();\n+    fn parse_path_start_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n         let path = self.parse_path(PathStyle::Expr)?;\n "}]}