{"sha": "16788545e7ab81339bcc80c5641efa186fe1da9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Nzg4NTQ1ZTdhYjgxMzM5YmNjODBjNTY0MWVmYTE4NmZlMWRhOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-12T19:09:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-12T19:09:08Z"}, "message": "Auto merge of #77867 - JohnTitor:rollup-0odg1n4, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #77550 (add shims for WithOptConstParam query calls)\n - #77699 (Add word wrap for short descriptions)\n - #77724 (Implement `AsRawFd` for `StdinLock` etc. on WASI.)\n - #77746 (Fix `x.py setup` sets `changelog-seen`)\n - #77784 (Fix intra-docs link in core::ffi::VaList)\n - #77811 (rustdoc: Make some functions private that don't need to be public)\n - #77818 (Mono collector: replace pair of ints with Range)\n - #77831 (Use std methods on char instead of open coding them)\n - #77852 (update url in bootstrap README (gcc-rs -> cc-rs))\n - #77863 (Remove `mark-i-m` from rustc-dev-guide maintainers)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "f3ec161c4434c7b5da9fdf1380261026ab1b8f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ec161c4434c7b5da9fdf1380261026ab1b8f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16788545e7ab81339bcc80c5641efa186fe1da9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16788545e7ab81339bcc80c5641efa186fe1da9c", "html_url": "https://github.com/rust-lang/rust/commit/16788545e7ab81339bcc80c5641efa186fe1da9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16788545e7ab81339bcc80c5641efa186fe1da9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ab6f05846951bed41d4b0661ac0735aebf3687", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab6f05846951bed41d4b0661ac0735aebf3687", "html_url": "https://github.com/rust-lang/rust/commit/f3ab6f05846951bed41d4b0661ac0735aebf3687"}, {"sha": "984f78b7ed49181ee0b6f5beefd52d170906b63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/984f78b7ed49181ee0b6f5beefd52d170906b63c", "html_url": "https://github.com/rust-lang/rust/commit/984f78b7ed49181ee0b6f5beefd52d170906b63c"}], "stats": {"total": 184, "additions": 98, "deletions": 86}, "files": [{"sha": "b69b00d65f2be522633d4e76112b23d059afed02", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -385,7 +385,7 @@ pub mod printf {\n         if let Start = state {\n             match c {\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         // Yes, this *is* the parameter.\n                         Some(('$', end2)) => {\n@@ -427,7 +427,7 @@ pub mod printf {\n                     move_to!(next);\n                 }\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Prec;\n                     width = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -441,7 +441,7 @@ pub mod printf {\n         }\n \n         if let WidthArg = state {\n-            let end = at_next_cp_while(at, is_digit);\n+            let end = at_next_cp_while(at, char::is_ascii_digit);\n             match end.next_cp() {\n                 Some(('$', end2)) => {\n                     state = Prec;\n@@ -473,7 +473,7 @@ pub mod printf {\n         if let PrecInner = state {\n             match c {\n                 '*' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         Some(('$', end2)) => {\n                             state = Length;\n@@ -488,7 +488,7 @@ pub mod printf {\n                     }\n                 }\n                 '0'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Length;\n                     precision = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -563,12 +563,12 @@ pub mod printf {\n \n     fn at_next_cp_while<F>(mut cur: Cur<'_>, mut pred: F) -> Cur<'_>\n     where\n-        F: FnMut(char) -> bool,\n+        F: FnMut(&char) -> bool,\n     {\n         loop {\n             match cur.next_cp() {\n                 Some((c, next)) => {\n-                    if pred(c) {\n+                    if pred(&c) {\n                         cur = next;\n                     } else {\n                         return cur;\n@@ -579,14 +579,7 @@ pub mod printf {\n         }\n     }\n \n-    fn is_digit(c: char) -> bool {\n-        match c {\n-            '0'..='9' => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn is_flag(c: char) -> bool {\n+    fn is_flag(c: &char) -> bool {\n         match c {\n             '0' | '-' | '+' | ' ' | '#' | '\\'' => true,\n             _ => false,\n@@ -723,17 +716,11 @@ pub mod shell {\n     }\n \n     fn is_ident_head(c: char) -> bool {\n-        match c {\n-            'a'..='z' | 'A'..='Z' | '_' => true,\n-            _ => false,\n-        }\n+        c.is_ascii_alphabetic() || c == '_'\n     }\n \n     fn is_ident_tail(c: char) -> bool {\n-        match c {\n-            '0'..='9' => true,\n-            c => is_ident_head(c),\n-        }\n+        c.is_ascii_alphanumeric() || c == '_'\n     }\n \n     #[cfg(test)]"}, {"sha": "b5cdd7edb8dbabfaf10fe9c7452fec58f7f68fb2", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -1,9 +1,10 @@\n //! Values computed by queries that use MIR.\n \n-use crate::mir::{Body, Promoted};\n+use crate::mir::{abstract_const, Body, Promoted};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n@@ -407,7 +408,12 @@ pub struct CoverageInfo {\n     pub num_expressions: u32,\n }\n \n+/// Shims which make dealing with `WithOptConstParam` easier.\n+///\n+/// For more information on why this is needed, consider looking\n+/// at the docs for `WithOptConstParam` itself.\n impl<'tcx> TyCtxt<'tcx> {\n+    #[inline]\n     pub fn mir_borrowck_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -419,6 +425,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mir_const_qualif_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -430,7 +437,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn promoted_mir_of_opt_const_arg(\n+    #[inline]\n+    pub fn promoted_mir_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n@@ -440,4 +448,28 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.promoted_mir(def.did)\n         }\n     }\n+\n+    #[inline]\n+    pub fn optimized_mir_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> &'tcx Body<'tcx> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.optimized_mir_of_const_arg((did, param_did))\n+        } else {\n+            self.optimized_mir(def.did)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn mir_abstract_const_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> Result<Option<&'tcx [abstract_const::Node<'tcx>]>, ErrorReported> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.mir_abstract_const_of_const_arg((did, param_did))\n+        } else {\n+            self.mir_abstract_const(def.did)\n+        }\n+    }\n }"}, {"sha": "cccfc5eced9001071aa348cd5ef677534c664e0d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -2953,13 +2953,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => {\n-                if let Some((did, param_did)) = def.as_const_arg() {\n-                    self.optimized_mir_of_const_arg((did, param_did))\n-                } else {\n-                    self.optimized_mir(def.did)\n-                }\n-            }\n+            ty::InstanceDef::Item(def) => self.optimized_mir_opt_const_arg(def),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "6ef73b04238d4d00cd88587a1c54b9df26b0092e", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -343,7 +343,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                     // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n+                            let span = tcx.promoted_mir_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n                                 Err(err.report_as_error(\n                                     tcx.at(span),"}, {"sha": "ec1195d3703b449586750767eb3b6c49fcce718d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -477,16 +477,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir_of_opt_const_arg(def)[promoted]);\n+            return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n         }\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    if let Some((did, param_did)) = def.as_const_arg() {\n-                        Ok(self.tcx.optimized_mir_of_const_arg((did, param_did)))\n-                    } else {\n-                        Ok(self.tcx.optimized_mir(def.did))\n-                    }\n+                    Ok(self.tcx.optimized_mir_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "417176564b92d877df7eb21ca052fcc164401fda", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -197,6 +197,7 @@ use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n use std::iter;\n+use std::ops::Range;\n use std::path::PathBuf;\n \n #[derive(PartialEq)]\n@@ -210,9 +211,8 @@ pub enum MonoItemCollectionMode {\n pub struct InliningMap<'tcx> {\n     // Maps a source mono item to the range of mono items\n     // accessed by it.\n-    // The two numbers in the tuple are the start (inclusive) and\n-    // end index (exclusive) within the `targets` vecs.\n-    index: FxHashMap<MonoItem<'tcx>, (usize, usize)>,\n+    // The range selects elements within the `targets` vecs.\n+    index: FxHashMap<MonoItem<'tcx>, Range<usize>>,\n     targets: Vec<MonoItem<'tcx>>,\n \n     // Contains one bit per mono item in the `targets` field. That bit\n@@ -245,7 +245,7 @@ impl<'tcx> InliningMap<'tcx> {\n         }\n \n         let end_index = self.targets.len();\n-        assert!(self.index.insert(source, (start_index, end_index)).is_none());\n+        assert!(self.index.insert(source, start_index..end_index).is_none());\n     }\n \n     // Internally iterate over all items referenced by `source` which will be\n@@ -254,9 +254,9 @@ impl<'tcx> InliningMap<'tcx> {\n     where\n         F: FnMut(MonoItem<'tcx>),\n     {\n-        if let Some(&(start_index, end_index)) = self.index.get(&source) {\n-            for (i, candidate) in self.targets[start_index..end_index].iter().enumerate() {\n-                if self.inlines.contains(start_index + i) {\n+        if let Some(range) = self.index.get(&source) {\n+            for (i, candidate) in self.targets[range.clone()].iter().enumerate() {\n+                if self.inlines.contains(range.start + i) {\n                     f(*candidate);\n                 }\n             }\n@@ -268,8 +268,8 @@ impl<'tcx> InliningMap<'tcx> {\n     where\n         F: FnMut(MonoItem<'tcx>, &[MonoItem<'tcx>]),\n     {\n-        for (&accessor, &(start_index, end_index)) in &self.index {\n-            f(accessor, &self.targets[start_index..end_index])\n+        for (&accessor, range) in &self.index {\n+            f(accessor, &self.targets[range.clone()])\n         }\n     }\n }"}, {"sha": "4bafcb2535f0c4070b803f3ca524cbbf8b80289d", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -287,11 +287,7 @@ fn mir_promoted(\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n     let _ = tcx.mir_const_qualif_opt_const_arg(def);\n-    let _ = if let Some(param_did) = def.const_param_did {\n-        tcx.mir_abstract_const_of_const_arg((def.did, param_did))\n-    } else {\n-        tcx.mir_abstract_const(def.did.to_def_id())\n-    };\n+    let _ = tcx.mir_abstract_const_opt_const_arg(def.to_global());\n     let mut body = tcx.mir_const(def).steal();\n \n     let mut required_consts = Vec::new();"}, {"sha": "1e1eb16faf407a8efb1b57aa464b0bfeb3bec572", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -147,11 +147,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = if let Some(def) = def.as_const_arg() {\n-                    infcx.tcx.optimized_mir_of_const_arg(def)\n-                } else {\n-                    infcx.tcx.optimized_mir(def.did)\n-                };\n+                let mir_body = infcx.tcx.optimized_mir_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -212,13 +208,7 @@ impl AbstractConst<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = match (def.did.as_local(), def.const_param_did) {\n-            (Some(did), Some(param_did)) => {\n-                tcx.mir_abstract_const_of_const_arg((did, param_did))?\n-            }\n-            _ => tcx.mir_abstract_const(def.did)?,\n-        };\n-\n+        let inner = tcx.mir_abstract_const_opt_const_arg(def)?;\n         Ok(inner.map(|inner| AbstractConst { inner, substs }))\n     }\n "}, {"sha": "e146a97ae94d1e5b163a14cb4ef1e6f3192f96cc", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'f: 'a> DerefMut for VaList<'a, 'f> {\n // within a private module. Once RFC 2145 has been implemented look into\n // improving this.\n mod sealed_trait {\n-    /// Trait which permits the allowed types to be used with [VaList::arg].\n+    /// Trait which permits the allowed types to be used with [super::VaListImpl::arg].\n     #[unstable(\n         feature = \"c_variadic\",\n         reason = \"the `c_variadic` feature has not been properly tested on \\"}, {"sha": "81413f39dc1cd2ebead6086cf82d2667de856b32", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -160,3 +160,21 @@ impl AsRawFd for io::Stderr {\n         sys::stdio::Stderr.as_raw_fd()\n     }\n }\n+\n+impl<'a> AsRawFd for io::StdinLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd {\n+        sys::stdio::Stdin.as_raw_fd()\n+    }\n+}\n+\n+impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd {\n+        sys::stdio::Stdout.as_raw_fd()\n+    }\n+}\n+\n+impl<'a> AsRawFd for io::StderrLock<'a> {\n+    fn as_raw_fd(&self) -> RawFd {\n+        sys::stdio::Stderr.as_raw_fd()\n+    }\n+}"}, {"sha": "84ed9446ae73fc98799d1fedd7d71abe76d14cb1", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -93,12 +93,12 @@ handled naturally. `./configure` should almost never be used for local\n installations, and is primarily useful for CI. Prefer to customize behavior\n using `config.toml`.\n \n-Finally, rustbuild makes use of the [gcc-rs crate] which has [its own\n+Finally, rustbuild makes use of the [cc-rs crate] which has [its own\n method][env-vars] of configuring C compilers and C flags via environment\n variables.\n \n-[gcc-rs crate]: https://github.com/alexcrichton/gcc-rs\n-[env-vars]: https://github.com/alexcrichton/gcc-rs#external-configuration-via-environment-variables\n+[cc-rs crate]: https://github.com/alexcrichton/cc-rs\n+[env-vars]: https://github.com/alexcrichton/cc-rs#external-configuration-via-environment-variables\n \n ## Build stages\n "}, {"sha": "07e582d4d29412e3b8bac7685c4e03876a798be1", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -7,13 +7,15 @@\n \n use std::env;\n \n-use bootstrap::{Build, Config, Subcommand};\n+use bootstrap::{Build, Config, Subcommand, VERSION};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     let config = Config::parse(&args);\n \n-    let changelog_suggestion = check_version(&config);\n+    // check_version warnings are not printed during setup\n+    let changelog_suggestion =\n+        if matches!(config.cmd, Subcommand::Setup {..}) { None } else { check_version(&config) };\n \n     // NOTE: Since `./configure` generates a `config.toml`, distro maintainers will see the\n     // changelog warning, not the `x.py setup` message.\n@@ -40,8 +42,6 @@ fn main() {\n }\n \n fn check_version(config: &Config) -> Option<String> {\n-    const VERSION: usize = 2;\n-\n     let mut msg = String::new();\n \n     let suggestion = if let Some(seen) = config.changelog_seen {"}, {"sha": "493bfff91815b0d294b763bc1b636257c9318949", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -179,6 +179,8 @@ const LLVM_TOOLS: &[&str] = &[\n     \"llvm-ar\", // used for creating and modifying archive files\n ];\n \n+pub const VERSION: usize = 2;\n+\n /// A structure representing a Rust compiler.\n ///\n /// Each compiler has a `stage` that it is associated with and a `host` that"}, {"sha": "512224156d8572ebf52bea00c7b6f6eeeb593c26", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -1,4 +1,4 @@\n-use crate::t;\n+use crate::{t, VERSION};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{\n@@ -69,8 +69,9 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     let path = cfg_file.unwrap_or_else(|| src_path.join(\"config.toml\"));\n     let settings = format!(\n         \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n-    profile = \\\"{}\\\"\\n\",\n-        profile\n+    profile = \\\"{}\\\"\\n\\\n+    changelog-seen = {}\\n\",\n+        profile, VERSION\n     );\n     t!(fs::write(path, settings));\n "}, {"sha": "cdea5a7af203d3c55619f16c89b7ec4665e7f6aa", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -109,7 +109,7 @@ pub fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation\n     cx.tcx.lookup_deprecation(def_id).clean(cx)\n }\n \n-pub fn external_generic_args(\n+fn external_generic_args(\n     cx: &DocContext<'_>,\n     trait_did: Option<DefId>,\n     has_self: bool,\n@@ -159,7 +159,7 @@ pub fn external_generic_args(\n \n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n-pub fn external_path(\n+pub(super) fn external_path(\n     cx: &DocContext<'_>,\n     name: Symbol,\n     trait_did: Option<DefId>,"}, {"sha": "80aca24da9f7ff94710efcd599f859391cf673a1", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -390,17 +390,13 @@ nav.sub {\n \tcursor: pointer;\n }\n \n+.docblock-short {\n+\toverflow-wrap: anywhere;\n+}\n .docblock-short p {\n \tdisplay: inline;\n }\n \n-.docblock-short.nowrap {\n-\tdisplay: block;\n-\toverflow: hidden;\n-\twhite-space: nowrap;\n-\ttext-overflow: ellipsis;\n-}\n-\n .docblock-short p {\n \toverflow: hidden;\n \ttext-overflow: ellipsis;"}, {"sha": "7586f5aa3b53b7a7c7d52e89257c989f831f1b54", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/16788545e7ab81339bcc80c5641efa186fe1da9c/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=16788545e7ab81339bcc80c5641efa186fe1da9c", "patch": "@@ -33,7 +33,7 @@\n     'rust-by-example': {'steveklabnik', 'marioidival'},\n     'embedded-book': {'adamgreig', 'andre-richter', 'jamesmunns', 'therealprof'},\n     'edition-guide': {'ehuss', 'steveklabnik'},\n-    'rustc-dev-guide': {'mark-i-m', 'spastorino', 'amanjeev', 'JohnTitor'},\n+    'rustc-dev-guide': {'spastorino', 'amanjeev', 'JohnTitor'},\n }\n \n LABELS = {"}]}