{"sha": "2c9c8dc5f46bd2db5a5b81acca72a23de75502ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOWM4ZGM1ZjQ2YmQyZGI1YTViODFhY2NhNzJhMjNkZTc1NTAyZWM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-07-21T11:15:36Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-07-21T12:31:46Z"}, "message": "rustllvm: use LLVMMetadataRef", "tree": {"sha": "afb473f33d86b551d75bc91aad2d432909202caf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb473f33d86b551d75bc91aad2d432909202caf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec", "html_url": "https://github.com/rust-lang/rust/commit/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9787296f8198b50c89a5e655bbd81576c3e1d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9787296f8198b50c89a5e655bbd81576c3e1d06", "html_url": "https://github.com/rust-lang/rust/commit/c9787296f8198b50c89a5e655bbd81576c3e1d06"}], "stats": {"total": 148, "additions": 75, "deletions": 73}, "files": [{"sha": "401bd99f7bcdd1cfb28a63b59e96abbcdaff725b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 75, "deletions": 73, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c9c8dc5f46bd2db5a5b81acca72a23de75502ec/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=2c9c8dc5f46bd2db5a5b81acca72a23de75502ec", "patch": "@@ -318,17 +318,19 @@ extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm)\n \n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n-typedef struct LLVMOpaqueMetadata *LLVMRustMetadataRef;\n+#if LLVM_VERSION_LT(5, 0)\n+typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n \n namespace llvm {\n-DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMRustMetadataRef)\n+DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMMetadataRef)\n \n-inline Metadata **unwrap(LLVMRustMetadataRef *Vals) {\n+inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n   return reinterpret_cast<Metadata **>(Vals);\n }\n }\n+#endif\n \n-template <typename DIT> DIT *unwrapDIPtr(LLVMRustMetadataRef Ref) {\n+template <typename DIT> DIT *unwrapDIPtr(LLVMMetadataRef Ref) {\n   return (DIT *)(Ref ? unwrap<MDNode>(Ref) : nullptr);\n }\n \n@@ -466,7 +468,7 @@ extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);\n }\n \n-extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMRustMetadataRef MD) {\n+extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMMetadataRef MD) {\n   wrap(MetadataAsValue::get(*unwrap(C), unwrap(MD)));\n }\n \n@@ -482,8 +484,8 @@ extern \"C\" void LLVMRustDIBuilderFinalize(LLVMRustDIBuilderRef Builder) {\n   Builder->finalize();\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n-    LLVMRustDIBuilderRef Builder, unsigned Lang, LLVMRustMetadataRef FileRef,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n+    LLVMRustDIBuilderRef Builder, unsigned Lang, LLVMMetadataRef FileRef,\n     const char *Producer, bool isOptimized, const char *Flags,\n     unsigned RuntimeVer, const char *SplitName) {\n   auto *File = unwrapDI<DIFile>(FileRef);\n@@ -498,29 +500,29 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateFile(LLVMRustDIBuilderRef Builder, const char *Filename,\n                             const char *Directory) {\n   return wrap(Builder->createFile(Filename, Directory));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n-                                      LLVMRustMetadataRef File,\n-                                      LLVMRustMetadataRef ParameterTypes) {\n+                                      LLVMMetadataRef File,\n+                                      LLVMMetadataRef ParameterTypes) {\n   return wrap(Builder->createSubroutineType(\n #if LLVM_VERSION_EQ(3, 7)\n       unwrapDI<DIFile>(File),\n #endif\n       DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    const char *LinkageName, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n     unsigned ScopeLine, LLVMRustDIFlags Flags, bool IsOptimized,\n-    LLVMValueRef Fn, LLVMRustMetadataRef TParam, LLVMRustMetadataRef Decl) {\n+    LLVMValueRef Fn, LLVMMetadataRef TParam, LLVMMetadataRef Decl) {\n #if LLVM_VERSION_GE(3, 8)\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n@@ -540,7 +542,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n                                  uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n@@ -551,19 +553,19 @@ LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n                                        Encoding));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef PointeeTy,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n                                          SizeInBits, AlignInBits, Name));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStructType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags,\n-    LLVMRustMetadataRef DerivedFrom, LLVMRustMetadataRef Elements,\n-    unsigned RunTimeLang, LLVMRustMetadataRef VTableHolder,\n+    LLVMMetadataRef DerivedFrom, LLVMMetadataRef Elements,\n+    unsigned RunTimeLang, LLVMMetadataRef VTableHolder,\n     const char *UniqueId) {\n   return wrap(Builder->createStructType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n@@ -572,37 +574,37 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n       unwrapDI<DIType>(VTableHolder), UniqueId));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateMemberType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n     uint32_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n-    LLVMRustMetadataRef Ty) {\n+    LLVMMetadataRef Ty) {\n   return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n                                         unwrapDI<DIFile>(File), LineNo,\n                                         SizeInBits, AlignInBits, OffsetInBits,\n                                         fromRust(Flags), unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope,\n-    LLVMRustMetadataRef File, unsigned Line, unsigned Col) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope,\n+    LLVMMetadataRef File, unsigned Line, unsigned Col) {\n   return wrap(Builder->createLexicalBlock(unwrapDI<DIDescriptor>(Scope),\n                                           unwrapDI<DIFile>(File), Line, Col));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateLexicalBlockFile(LLVMRustDIBuilderRef Builder,\n-                                        LLVMRustMetadataRef Scope,\n-                                        LLVMRustMetadataRef File) {\n+                                        LLVMMetadataRef Scope,\n+                                        LLVMMetadataRef File) {\n   return wrap(Builder->createLexicalBlockFile(unwrapDI<DIDescriptor>(Scope),\n                                               unwrapDI<DIFile>(File)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n-    const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n-    LLVMRustMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Context, const char *Name,\n+    const char *LinkageName, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n+    LLVMMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   llvm::GlobalVariable *InitVal = cast<llvm::GlobalVariable>(unwrap(V));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -632,10 +634,10 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n-    LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMRustMetadataRef Scope,\n-    const char *Name, LLVMRustMetadataRef File, unsigned LineNo,\n-    LLVMRustMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n+    LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMMetadataRef Scope,\n+    const char *Name, LLVMMetadataRef File, unsigned LineNo,\n+    LLVMMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n     unsigned ArgNo, uint32_t AlignInBits) {\n #if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n@@ -659,40 +661,40 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n #endif\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                 uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n-                                 LLVMRustMetadataRef Subscripts) {\n+                                 uint32_t AlignInBits, LLVMMetadataRef Ty,\n+                                 LLVMMetadataRef Subscripts) {\n   return wrap(\n       Builder->createArrayType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n                                DINodeArray(unwrapDI<MDTuple>(Subscripts))));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateVectorType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                  uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n-                                  LLVMRustMetadataRef Subscripts) {\n+                                  uint32_t AlignInBits, LLVMMetadataRef Ty,\n+                                  LLVMMetadataRef Subscripts) {\n   return wrap(\n       Builder->createVectorType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n                                 DINodeArray(unwrapDI<MDTuple>(Subscripts))));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderGetOrCreateSubrange(LLVMRustDIBuilderRef Builder, int64_t Lo,\n                                      int64_t Count) {\n   return wrap(Builder->getOrCreateSubrange(Lo, Count));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderGetOrCreateArray(LLVMRustDIBuilderRef Builder,\n-                                  LLVMRustMetadataRef *Ptr, unsigned Count) {\n+                                  LLVMMetadataRef *Ptr, unsigned Count) {\n   Metadata **DataValue = unwrap(Ptr);\n   return wrap(\n       Builder->getOrCreateArray(ArrayRef<Metadata *>(DataValue, Count)).get());\n }\n \n extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n-    LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMRustMetadataRef VarInfo,\n+    LLVMRustDIBuilderRef Builder, LLVMValueRef V, LLVMMetadataRef VarInfo,\n     int64_t *AddrOps, unsigned AddrOpsCount, LLVMValueRef DL,\n     LLVMBasicBlockRef InsertAtEnd) {\n   return wrap(Builder->insertDeclare(\n@@ -702,46 +704,46 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n       unwrap(InsertAtEnd)));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n                                   const char *Name, uint64_t Val) {\n   return wrap(Builder->createEnumerator(Name, Val));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint32_t AlignInBits, LLVMRustMetadataRef Elements,\n-    LLVMRustMetadataRef ClassTy) {\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+    uint32_t AlignInBits, LLVMMetadataRef Elements,\n+    LLVMMetadataRef ClassTy) {\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n       unwrapDI<DIType>(ClassTy)));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Elements,\n     unsigned RunTimeLang, const char *UniqueId) {\n   return wrap(Builder->createUnionType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags),\n       DINodeArray(unwrapDI<MDTuple>(Elements)), RunTimeLang, UniqueId));\n }\n \n-extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n-    LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n-    LLVMRustMetadataRef Ty, LLVMRustMetadataRef File, unsigned LineNo,\n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n+    LLVMMetadataRef Ty, LLVMMetadataRef File, unsigned LineNo,\n     unsigned ColumnNo) {\n   return wrap(Builder->createTemplateTypeParameter(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMRustMetadataRef\n+extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n-                                 LLVMRustMetadataRef Scope, const char *Name,\n-                                 LLVMRustMetadataRef File, unsigned LineNo) {\n+                                 LLVMMetadataRef Scope, const char *Name,\n+                                 LLVMMetadataRef File, unsigned LineNo) {\n   return wrap(Builder->createNameSpace(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNo\n #if LLVM_VERSION_GE(4, 0)\n@@ -753,16 +755,16 @@ LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n \n extern \"C\" void\n LLVMRustDICompositeTypeSetTypeArray(LLVMRustDIBuilderRef Builder,\n-                                    LLVMRustMetadataRef CompositeTy,\n-                                    LLVMRustMetadataRef TyArray) {\n+                                    LLVMMetadataRef CompositeTy,\n+                                    LLVMMetadataRef TyArray) {\n   DICompositeType *Tmp = unwrapDI<DICompositeType>(CompositeTy);\n   Builder->replaceArrays(Tmp, DINodeArray(unwrap<MDTuple>(TyArray)));\n }\n \n extern \"C\" LLVMValueRef\n LLVMRustDIBuilderCreateDebugLocation(LLVMContextRef ContextRef, unsigned Line,\n-                                     unsigned Column, LLVMRustMetadataRef Scope,\n-                                     LLVMRustMetadataRef InlinedAt) {\n+                                     unsigned Column, LLVMMetadataRef Scope,\n+                                     LLVMMetadataRef InlinedAt) {\n   LLVMContext &Context = *unwrap(ContextRef);\n \n   DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(Scope),"}]}