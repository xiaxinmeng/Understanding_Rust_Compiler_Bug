{"sha": "3d1940d02e2986e161ad31236d67489dfab08ad3", "node_id": "C_kwDOAAsO6NoAKDNkMTk0MGQwMmUyOTg2ZTE2MWFkMzEyMzZkNjc0ODlkZmFiMDhhZDM", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-03-26T14:18:43Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-10T17:36:01Z"}, "message": "Drop uplifted clippy::drop_ref", "tree": {"sha": "6b353687631410556fc6623023ba6d660413c67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b353687631410556fc6623023ba6d660413c67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1940d02e2986e161ad31236d67489dfab08ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1940d02e2986e161ad31236d67489dfab08ad3", "html_url": "https://github.com/rust-lang/rust/commit/3d1940d02e2986e161ad31236d67489dfab08ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1940d02e2986e161ad31236d67489dfab08ad3/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28cdbc2a641737b291de4e54f9c6cf070d7309be", "url": "https://api.github.com/repos/rust-lang/rust/commits/28cdbc2a641737b291de4e54f9c6cf070d7309be", "html_url": "https://github.com/rust-lang/rust/commit/28cdbc2a641737b291de4e54f9c6cf070d7309be"}], "stats": {"total": 376, "additions": 58, "deletions": 318}, "files": [{"sha": "07978d971db53ae4871503ace305045d5cf7d7f1", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -134,7 +134,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::double_parens::DOUBLE_PARENS_INFO,\n     crate::drop_forget_ref::DROP_COPY_INFO,\n     crate::drop_forget_ref::DROP_NON_DROP_INFO,\n-    crate::drop_forget_ref::DROP_REF_INFO,\n     crate::drop_forget_ref::FORGET_COPY_INFO,\n     crate::drop_forget_ref::FORGET_NON_DROP_INFO,\n     crate::drop_forget_ref::FORGET_REF_INFO,"}, {"sha": "55d7c3247cddfca7384b11be51c3d61ceaa0499b", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -7,30 +7,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `std::mem::drop` with a reference\n-    /// instead of an owned value.\n-    ///\n-    /// ### Why is this bad?\n-    /// Calling `drop` on a reference will only drop the\n-    /// reference itself, which is a no-op. It will not call the `drop` method (from\n-    /// the `Drop` trait implementation) on the underlying referenced value, which\n-    /// is likely what was intended.\n-    ///\n-    /// ### Example\n-    /// ```ignore\n-    /// let mut lock_guard = mutex.lock();\n-    /// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex\n-    /// // still locked\n-    /// operation_that_requires_mutex_to_be_unlocked();\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub DROP_REF,\n-    correctness,\n-    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `std::mem::forget` with a reference\n@@ -172,8 +148,6 @@ declare_clippy_lint! {\n     \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n }\n \n-const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference instead of an owned value. \\\n-                                Dropping a reference does nothing\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n                                   Forgetting a reference does nothing\";\n const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n@@ -186,7 +160,6 @@ const FORGET_NON_DROP_SUMMARY: &str = \"call to `std::mem::forget` with a value t\n                                    Forgetting such a type is the same as dropping it\";\n \n declare_lint_pass!(DropForgetRef => [\n-    DROP_REF,\n     FORGET_REF,\n     DROP_COPY,\n     FORGET_COPY,\n@@ -206,7 +179,8 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n+                // early return for uplifted lints: drop_ref\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n                 sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),"}, {"sha": "c55eaa809cf01065e28e1d80507c82a4b1ea7cf1", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -32,6 +32,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::drop_ref\", \"drop_ref\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),"}, {"sha": "04293eb16bb790a939851e6dea2e88fa42a2d1cf", "filename": "src/tools/clippy/tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_forget_copy.rs?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::drop_copy, clippy::forget_copy)]\n-#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n+#![allow(clippy::toplevel_ref_arg, drop_ref, clippy::forget_ref, unused_mut)]\n \n use std::mem::{drop, forget};\n use std::vec::Vec;"}, {"sha": "10044e65f1156bc484ea3de731ed05c0fc97d902", "filename": "src/tools/clippy/tests/ui/drop_ref.rs", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -1,97 +0,0 @@\n-#![warn(clippy::drop_ref)]\n-#![allow(clippy::toplevel_ref_arg)]\n-#![allow(clippy::map_err_ignore)]\n-#![allow(clippy::unnecessary_wraps, clippy::drop_non_drop)]\n-\n-use std::mem::drop;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    drop(&SomeStruct);\n-\n-    let mut owned1 = SomeStruct;\n-    drop(&owned1);\n-    drop(&&owned1);\n-    drop(&mut owned1);\n-    drop(owned1); //OK\n-\n-    let reference1 = &SomeStruct;\n-    drop(reference1);\n-\n-    let reference2 = &mut SomeStruct;\n-    drop(reference2);\n-\n-    let ref reference3 = SomeStruct;\n-    drop(reference3);\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn_drop<T>(val: T) {\n-    drop(&val);\n-    drop(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn drop<T>(_val: T) {}\n-    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct);\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct Error;\n-fn produce_half_owl_error() -> Result<(), Error> {\n-    Ok(())\n-}\n-\n-fn produce_half_owl_ok() -> Result<bool, ()> {\n-    Ok(true)\n-}\n-\n-#[allow(dead_code)]\n-fn test_owl_result() -> Result<(), ()> {\n-    produce_half_owl_error().map_err(|_| ())?;\n-    produce_half_owl_ok().map(|_| ())?;\n-    // the following should not be linted,\n-    // we should not force users to use toilet closures\n-    // to produce owl results when drop is more convenient\n-    produce_half_owl_error().map_err(drop)?;\n-    produce_half_owl_ok().map_err(drop)?;\n-    Ok(())\n-}\n-\n-#[allow(dead_code)]\n-fn test_owl_result_2() -> Result<u8, ()> {\n-    produce_half_owl_error().map_err(|_| ())?;\n-    produce_half_owl_ok().map(|_| ())?;\n-    // the following should not be linted,\n-    // we should not force users to use toilet closures\n-    // to produce owl results when drop is more convenient\n-    produce_half_owl_error().map_err(drop)?;\n-    produce_half_owl_ok().map(drop)?;\n-    Ok(1)\n-}\n-\n-#[allow(unused)]\n-#[allow(clippy::unit_cmp)]\n-fn issue10122(x: u8) {\n-    // This is a function which returns a reference and has a side-effect, which means\n-    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n-    // in a match arm.\n-    fn println_and<T>(t: &T) -> &T {\n-        println!(\"foo\");\n-        t\n-    }\n-\n-    match x {\n-        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n-        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n-        2 => {\n-            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-        },\n-        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-        4 => drop(&2),                           // Lint, not a fn/method call\n-        _ => (),\n-    }\n-}"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "src/tools/clippy/tests/ui/drop_ref.stderr", "status": "removed", "additions": 0, "deletions": 147, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/28cdbc2a641737b291de4e54f9c6cf070d7309be/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28cdbc2a641737b291de4e54f9c6cf070d7309be/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr?ref=28cdbc2a641737b291de4e54f9c6cf070d7309be", "patch": "@@ -1,147 +0,0 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:11:5\n-   |\n-LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:11:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:14:5\n-   |\n-LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:14:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:15:5\n-   |\n-LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_ref.rs:15:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:16:5\n-   |\n-LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:16:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:20:5\n-   |\n-LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:20:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:23:5\n-   |\n-LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_ref.rs:23:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:26:5\n-   |\n-LL |     drop(reference3);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:26:10\n-   |\n-LL |     drop(reference3);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:31:5\n-   |\n-LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_ref.rs:31:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:39:5\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_ref.rs:39:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:91:13\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:91:18\n-   |\n-LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n-   |                  ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:93:14\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:93:19\n-   |\n-LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n-  --> $DIR/drop_ref.rs:94:14\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |              ^^^^^^^^\n-   |\n-note: argument has type `&i32`\n-  --> $DIR/drop_ref.rs:94:19\n-   |\n-LL |         4 => drop(&2),                           // Lint, not a fn/method call\n-   |                   ^^\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "1beb878fc75a71ddf52fe3d5082d56423601fccc", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -29,6 +29,7 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n@@ -71,6 +72,7 @@\n #![warn(clippy::invisible_characters)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n+#![warn(drop_ref)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]"}, {"sha": "7034daffdd6bf02ebfc4d67fdb9a15b855a52edb", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -29,6 +29,7 @@\n #![allow(clippy::invisible_characters)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n+#![allow(drop_ref)]\n #![allow(for_loops_over_fallibles)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n@@ -71,6 +72,7 @@\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::drop_ref)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::for_loops_over_fallibles)]"}, {"sha": "7cf5562a7e3b9e6c0af683d1c504b7725e145de9", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 50, "deletions": 44, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d1940d02e2986e161ad31236d67489dfab08ad3/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=3d1940d02e2986e161ad31236d67489dfab08ad3", "patch": "@@ -1,262 +1,268 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n+error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n+  --> $DIR/rename.rs:75:9\n+   |\n+LL | #![warn(clippy::drop_ref)]\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+\n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 43 previous errors\n+error: aborting due to 44 previous errors\n "}]}