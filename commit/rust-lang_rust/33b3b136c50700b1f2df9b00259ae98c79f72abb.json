{"sha": "33b3b136c50700b1f2df9b00259ae98c79f72abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjNiMTM2YzUwNzAwYjFmMmRmOWIwMDI1OWFlOThjNzlmNzJhYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T23:02:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-20T23:02:17Z"}, "message": "Auto merge of #58897 - Mark-Simulacrum:tool-rework, r=alexcrichton\n\nRework how bootstrap tools are built\n\nThis makes bootstrap tools buildable and testable in stage 0 with the downloaded bootstrap compiler, futhermore, it makes it such that they cannot be built in any other stage.\n\nNotably, this will also mean that compiletest may need to wait a cycle before it can use changes to `libtest`, as it no longer depends on the in-tree libtest.", "tree": {"sha": "62ef2b4513e8ae085a7c2c64b5e0f8980bed8ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ef2b4513e8ae085a7c2c64b5e0f8980bed8ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b3b136c50700b1f2df9b00259ae98c79f72abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b3b136c50700b1f2df9b00259ae98c79f72abb", "html_url": "https://github.com/rust-lang/rust/commit/33b3b136c50700b1f2df9b00259ae98c79f72abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b3b136c50700b1f2df9b00259ae98c79f72abb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e2f3ec25a316c7536c33a6b6704366b14cbf2a", "html_url": "https://github.com/rust-lang/rust/commit/82e2f3ec25a316c7536c33a6b6704366b14cbf2a"}, {"sha": "03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06", "html_url": "https://github.com/rust-lang/rust/commit/03718ed67a7b8fd57fc27316ec57ac3bc0f13d06"}], "stats": {"total": 161, "additions": 99, "deletions": 62}, "files": [{"sha": "f93f3e72f83e7b57642162ce168a6b67b2a4a9a3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=33b3b136c50700b1f2df9b00259ae98c79f72abb", "patch": "@@ -670,28 +670,27 @@ impl<'a> Builder<'a> {\n             .map(|entry| entry.path())\n     }\n \n-    pub fn rustdoc(&self, host: Interned<String>) -> PathBuf {\n-        self.ensure(tool::Rustdoc { host })\n+    pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n+        self.ensure(tool::Rustdoc { compiler })\n     }\n \n-    pub fn rustdoc_cmd(&self, host: Interned<String>) -> Command {\n+    pub fn rustdoc_cmd(&self, compiler: Compiler) -> Command {\n         let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n-        let compiler = self.compiler(self.top_stage, host);\n         cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n             .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n             // Note that this is *not* the sysroot_libdir because rustdoc must be linked\n             // equivalently to rustc.\n             .env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler))\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n-            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n+            .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n         // Remove make-related flags that can cause jobserver problems.\n         cmd.env_remove(\"MAKEFLAGS\");\n         cmd.env_remove(\"MFLAGS\");\n \n-        if let Some(linker) = self.linker(host) {\n+        if let Some(linker) = self.linker(compiler.host) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         cmd\n@@ -753,7 +752,7 @@ impl<'a> Builder<'a> {\n                 // This is the intended out directory for compiler documentation.\n                 my_out = self.compiler_doc_out(target);\n             }\n-            let rustdoc = self.rustdoc(compiler.host);\n+            let rustdoc = self.rustdoc(compiler);\n             self.clear_if_dirty(&my_out, &rustdoc);\n         } else if cmd != \"test\" {\n             match mode {\n@@ -910,7 +909,7 @@ impl<'a> Builder<'a> {\n             .env(\n                 \"RUSTDOC_REAL\",\n                 if cmd == \"doc\" || cmd == \"rustdoc\" || (cmd == \"test\" && want_rustdoc) {\n-                    self.rustdoc(compiler.host)\n+                    self.rustdoc(compiler)\n                 } else {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n                 },"}, {"sha": "d982330a6164019701cf1e75159af8b4eaae449e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=33b3b136c50700b1f2df9b00259ae98c79f72abb", "patch": "@@ -479,7 +479,7 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(image.join(\"bin\")));\n             builder.cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n \n-            builder.install(&builder.rustdoc(compiler.host), &image.join(\"bin\"), 0o755);\n+            builder.install(&builder.rustdoc(compiler), &image.join(\"bin\"), 0o755);\n \n             // Copy runtime DLLs needed by the compiler\n             if libdir != \"bin\" {"}, {"sha": "ae329286486d6d46992f3f54485e1bb88b5b7acb", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=33b3b136c50700b1f2df9b00259ae98c79f72abb", "patch": "@@ -335,7 +335,7 @@ fn invoke_rustdoc(\n     let footer = builder.src.join(\"src/doc/footer.inc\");\n     let version_info = out.join(\"version_info.html\");\n \n-    let mut cmd = builder.rustdoc_cmd(compiler.host);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n \n     let out = out.join(\"book\");\n \n@@ -415,7 +415,7 @@ impl Step for Standalone {\n             }\n \n             let html = out.join(filename).with_extension(\"html\");\n-            let rustdoc = builder.rustdoc(compiler.host);\n+            let rustdoc = builder.rustdoc(compiler);\n             if up_to_date(&path, &html) &&\n                up_to_date(&footer, &html) &&\n                up_to_date(&favicon, &html) &&\n@@ -425,7 +425,7 @@ impl Step for Standalone {\n                 continue\n             }\n \n-            let mut cmd = builder.rustdoc_cmd(compiler.host);\n+            let mut cmd = builder.rustdoc_cmd(compiler);\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n@@ -824,7 +824,7 @@ impl Step for Rustdoc {\n         builder.ensure(Rustc { stage, target });\n \n         // Build rustdoc.\n-        builder.ensure(tool::Rustdoc { host: compiler.host });\n+        builder.ensure(tool::Rustdoc { compiler: compiler });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n         let out_dir = builder.stage_out(compiler, Mode::ToolRustc)\n@@ -883,7 +883,11 @@ impl Step for ErrorIndex {\n         builder.info(&format!(\"Documenting error index ({})\", target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let mut index = builder.tool_cmd(Tool::ErrorIndex);\n+        let compiler = builder.compiler(2, builder.config.build);\n+        let mut index = tool::ErrorIndex::command(\n+            builder,\n+            compiler,\n+        );\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n "}, {"sha": "bbe1872d3958df3fcddee899b76f8d5540627348", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=33b3b136c50700b1f2df9b00259ae98c79f72abb", "patch": "@@ -177,7 +177,7 @@ impl Step for Cargotest {\n             cmd.arg(&builder.initial_cargo)\n                 .arg(&out_dir)\n                 .env(\"RUSTC\", builder.rustc(compiler))\n-                .env(\"RUSTDOC\", builder.rustdoc(compiler.host)),\n+                .env(\"RUSTDOC\", builder.rustdoc(compiler)),\n         );\n     }\n }\n@@ -414,7 +414,6 @@ impl Step for Miri {\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CompiletestTest {\n-    stage: u32,\n     host: Interned<String>,\n }\n \n@@ -427,16 +426,14 @@ impl Step for CompiletestTest {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(CompiletestTest {\n-            stage: run.builder.top_stage,\n             host: run.target,\n         });\n     }\n \n     /// Runs `cargo test` for compiletest.\n     fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n         let host = self.host;\n-        let compiler = builder.compiler(stage, host);\n+        let compiler = builder.compiler(0, host);\n \n         let mut cargo = tool::prepare_tool_cargo(builder,\n                                                  compiler,\n@@ -563,7 +560,7 @@ impl Step for RustdocTheme {\n                 builder.sysroot_libdir(self.compiler, self.compiler.host),\n             )\n             .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n-            .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler.host))\n+            .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", builder.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(linker) = builder.linker(self.compiler.host) {\n@@ -1042,7 +1039,7 @@ impl Step for Compiletest {\n             || mode == \"js-doc-test\"\n         {\n             cmd.arg(\"--rustdoc-path\")\n-                .arg(builder.rustdoc(compiler.host));\n+                .arg(builder.rustdoc(compiler));\n         }\n \n         cmd.arg(\"--src-base\")\n@@ -1464,7 +1461,10 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = builder.tool_cmd(Tool::ErrorIndex);\n+        let mut tool = tool::ErrorIndex::command(\n+            builder,\n+            builder.compiler(compiler.stage, builder.config.build),\n+        );\n         tool.arg(\"markdown\")\n             .arg(&output)\n             .env(\"CFG_BUILD\", &builder.config.build)\n@@ -1489,7 +1489,7 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n     }\n \n     builder.info(&format!(\"doc tests for: {}\", markdown.display()));\n-    let mut cmd = builder.rustdoc_cmd(compiler.host);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n     builder.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);"}, {"sha": "35e0e24014633e906dfc7d4ff565fa8972b74ebe", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 73, "deletions": 39, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b3b136c50700b1f2df9b00259ae98c79f72abb/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=33b3b136c50700b1f2df9b00259ae98c79f72abb", "patch": "@@ -251,9 +251,9 @@ pub fn prepare_tool_cargo(\n     cargo\n }\n \n-macro_rules! tool {\n+macro_rules! bootstrap_tool {\n     ($(\n-        $name:ident, $path:expr, $tool_name:expr, $mode:expr\n+        $name:ident, $path:expr, $tool_name:expr\n         $(,llvm_tools = $llvm:expr)*\n         $(,is_external_tool = $external:expr)*\n         ;\n@@ -267,10 +267,7 @@ macro_rules! tool {\n \n         impl Tool {\n             pub fn get_mode(&self) -> Mode {\n-                let mode = match self {\n-                    $(Tool::$name => $mode,)+\n-                };\n-                mode\n+                Mode::ToolBootstrap\n             }\n \n             /// Whether this tool requires LLVM to run\n@@ -283,27 +280,15 @@ macro_rules! tool {\n \n         impl<'a> Builder<'a> {\n             pub fn tool_exe(&self, tool: Tool) -> PathBuf {\n-                let stage = self.tool_default_stage(tool);\n                 match tool {\n                     $(Tool::$name =>\n                         self.ensure($name {\n-                            compiler: self.compiler(stage, self.config.build),\n+                            compiler: self.compiler(0, self.config.build),\n                             target: self.config.build,\n                         }),\n                     )+\n                 }\n             }\n-\n-            pub fn tool_default_stage(&self, tool: Tool) -> u32 {\n-                // Compile the error-index in the same stage as rustdoc to avoid\n-                // recompiling rustdoc twice if we can. Otherwise compile\n-                // everything else in stage0 as there's no need to rebootstrap\n-                // everything.\n-                match tool {\n-                    Tool::ErrorIndex if self.top_stage >= 2 => self.top_stage,\n-                    _ => 0,\n-                }\n-            }\n         }\n \n         $(\n@@ -322,7 +307,8 @@ macro_rules! tool {\n \n             fn make_run(run: RunConfig<'_>) {\n                 run.builder.ensure($name {\n-                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+                    // snapshot compiler\n+                    compiler: run.builder.compiler(0, run.builder.config.build),\n                     target: run.target,\n                 });\n             }\n@@ -332,7 +318,7 @@ macro_rules! tool {\n                     compiler: self.compiler,\n                     target: self.target,\n                     tool: $tool_name,\n-                    mode: $mode,\n+                    mode: Mode::ToolBootstrap,\n                     path: $path,\n                     is_optional_tool: false,\n                     source_type: if false $(|| $external)* {\n@@ -348,21 +334,67 @@ macro_rules! tool {\n     }\n }\n \n-tool!(\n-    Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolBootstrap;\n-    ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n-    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\", Mode::ToolBootstrap;\n-    Tidy, \"src/tools/tidy\", \"tidy\", Mode::ToolBootstrap;\n-    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\", Mode::ToolBootstrap;\n-    CargoTest, \"src/tools/cargotest\", \"cargotest\", Mode::ToolBootstrap;\n-    Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n-    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n-    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n-        is_external_tool = true;\n-    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n+bootstrap_tool!(\n+    Rustbook, \"src/tools/rustbook\", \"rustbook\";\n+    UnstableBookGen, \"src/tools/unstable-book-gen\", \"unstable-book-gen\";\n+    Tidy, \"src/tools/tidy\", \"tidy\";\n+    Linkchecker, \"src/tools/linkchecker\", \"linkchecker\";\n+    CargoTest, \"src/tools/cargotest\", \"cargotest\";\n+    Compiletest, \"src/tools/compiletest\", \"compiletest\", llvm_tools = true;\n+    BuildManifest, \"src/tools/build-manifest\", \"build-manifest\";\n+    RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", is_external_tool = true;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\";\n );\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct ErrorIndex {\n+    pub compiler: Compiler,\n+}\n+\n+impl ErrorIndex {\n+    pub fn command(builder: &Builder<'_>, compiler: Compiler) -> Command {\n+        let mut cmd = Command::new(builder.ensure(ErrorIndex {\n+            compiler\n+        }));\n+        add_lib_path(\n+            vec![PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host))],\n+            &mut cmd,\n+        );\n+        cmd\n+    }\n+}\n+\n+impl Step for ErrorIndex {\n+    type Output = PathBuf;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/error_index_generator\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        // Compile the error-index in the same stage as rustdoc to avoid\n+        // recompiling rustdoc twice if we can.\n+        let stage = if run.builder.top_stage >= 2 { run.builder.top_stage } else { 0 };\n+        run.builder.ensure(ErrorIndex {\n+            compiler: run.builder.compiler(stage, run.builder.config.build),\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        builder.ensure(ToolBuild {\n+            compiler: self.compiler,\n+            target: self.compiler.host,\n+            tool: \"error_index_generator\",\n+            mode: Mode::ToolRustc,\n+            path: \"src/tools/error_index_generator\",\n+            is_optional_tool: false,\n+            source_type: SourceType::InTree,\n+            extra_features: Vec::new(),\n+        }).expect(\"expected to build -- essential tool\")\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RemoteTestServer {\n     pub compiler: Compiler,\n@@ -399,7 +431,9 @@ impl Step for RemoteTestServer {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustdoc {\n-    pub host: Interned<String>,\n+    /// This should only ever be 0 or 2.\n+    /// We sometimes want to reference the \"bootstrap\" rustdoc, which is why this option is here.\n+    pub compiler: Compiler,\n }\n \n impl Step for Rustdoc {\n@@ -413,12 +447,12 @@ impl Step for Rustdoc {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Rustdoc {\n-            host: run.host,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n         });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        let target_compiler = builder.compiler(builder.top_stage, self.host);\n+        let target_compiler = self.compiler;\n         if target_compiler.stage == 0 {\n             if !target_compiler.is_snapshot(builder) {\n                 panic!(\"rustdoc in stage 0 must be snapshot rustdoc\");\n@@ -626,7 +660,7 @@ impl<'a> Builder<'a> {\n     /// `host`.\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n-        let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n+        let compiler = self.compiler(0, self.config.build);\n         self.prepare_tool_cmd(compiler, tool, &mut cmd);\n         cmd\n     }\n@@ -638,7 +672,7 @@ impl<'a> Builder<'a> {\n     fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n-            if compiler.stage == 0 && tool != Tool::ErrorIndex {\n+            if compiler.stage == 0 {\n                 self.build.rustc_snapshot_libdir()\n             } else {\n                 PathBuf::from(&self.sysroot_libdir(compiler, compiler.host))"}]}