{"sha": "22c1a0acc84e8081bc53e3725e0fc944f932aa56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzFhMGFjYzg0ZTgwODFiYzUzZTM3MjVlMGZjOTQ0ZjkzMmFhNTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-03T06:59:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "For now, accept all data for integer types when not in const mode\n\nWe'll try ruling out undef later", "tree": {"sha": "4677209963c214d8e2bc662c63415f5f90dbdddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4677209963c214d8e2bc662c63415f5f90dbdddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c1a0acc84e8081bc53e3725e0fc944f932aa56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c1a0acc84e8081bc53e3725e0fc944f932aa56", "html_url": "https://github.com/rust-lang/rust/commit/22c1a0acc84e8081bc53e3725e0fc944f932aa56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c1a0acc84e8081bc53e3725e0fc944f932aa56/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb4bcd7703366161be2cab416a04077e164aecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb4bcd7703366161be2cab416a04077e164aecf", "html_url": "https://github.com/rust-lang/rust/commit/9bb4bcd7703366161be2cab416a04077e164aecf"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "219135e3ad833373bce9d80b6fa1f04c5499a8db", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22c1a0acc84e8081bc53e3725e0fc944f932aa56/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c1a0acc84e8081bc53e3725e0fc944f932aa56/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=22c1a0acc84e8081bc53e3725e0fc944f932aa56", "patch": "@@ -162,14 +162,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     scalar_format(value), path, \"a valid unicode codepoint\");\n             },\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) if const_mode => {\n-                // Integers/floats in CTFE: Must be scalar bits\n+                // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n                 try_validation!(value.to_bits(size),\n                     scalar_format(value), path, \"initialized plain bits\");\n             }\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) | ty::RawPtr(_) => {\n-                // Anything but undef goes\n-                try_validation!(value.not_undef(),\n-                    scalar_format(value), path, \"a raw pointer\");\n+                if const_mode {\n+                    // Anything but undef goes\n+                    try_validation!(value.not_undef(),\n+                        scalar_format(value), path, \"a raw pointer\");\n+                } else {\n+                    // At run-time, for now, we accept *anything* for these types.\n+                }\n             },\n             ty::Ref(..) => {\n                 // This is checked by the recursive reference handling, nothing to do here.\n@@ -182,10 +186,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     scalar_format(value), path, \"a function pointer\");\n                 // FIXME: Check if the signature matches\n             }\n-            ty::FnDef(..) => {\n-                // This is a zero-sized type with all relevant data sitting in the type.\n-                // There is nothing to validate.\n-            }\n+            // This should be all\n+            ty::Never => bug!(\"Uninhabited type should have been catched earlier\"),\n             _ => bug!(\"Unexpected primitive type {}\", ty)\n         }\n         Ok(())"}]}