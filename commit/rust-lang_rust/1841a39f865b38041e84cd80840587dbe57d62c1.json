{"sha": "1841a39f865b38041e84cd80840587dbe57d62c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDFhMzlmODY1YjM4MDQxZTg0Y2Q4MDg0MDU4N2RiZTU3ZDYyYzE=", "commit": {"author": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T15:58:09Z"}, "committer": {"name": "krk", "email": "keremkat@gmail.com", "date": "2019-11-01T15:58:09Z"}, "message": "Remove variable pat.", "tree": {"sha": "75a7209c2f02bebd1c93efde21e7ac2272f2f739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a7209c2f02bebd1c93efde21e7ac2272f2f739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1841a39f865b38041e84cd80840587dbe57d62c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1841a39f865b38041e84cd80840587dbe57d62c1", "html_url": "https://github.com/rust-lang/rust/commit/1841a39f865b38041e84cd80840587dbe57d62c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1841a39f865b38041e84cd80840587dbe57d62c1/comments", "author": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krk", "id": 1447853, "node_id": "MDQ6VXNlcjE0NDc4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1447853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krk", "html_url": "https://github.com/krk", "followers_url": "https://api.github.com/users/krk/followers", "following_url": "https://api.github.com/users/krk/following{/other_user}", "gists_url": "https://api.github.com/users/krk/gists{/gist_id}", "starred_url": "https://api.github.com/users/krk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krk/subscriptions", "organizations_url": "https://api.github.com/users/krk/orgs", "repos_url": "https://api.github.com/users/krk/repos", "events_url": "https://api.github.com/users/krk/events{/privacy}", "received_events_url": "https://api.github.com/users/krk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4d9f7a90dc0605992c4f774a8d9a1323ad6d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4d9f7a90dc0605992c4f774a8d9a1323ad6d1e", "html_url": "https://github.com/rust-lang/rust/commit/4a4d9f7a90dc0605992c4f774a8d9a1323ad6d1e"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "4322d37370cda2cdb6c50b845575584a781f42ac", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1841a39f865b38041e84cd80840587dbe57d62c1/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841a39f865b38041e84cd80840587dbe57d62c1/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=1841a39f865b38041e84cd80840587dbe57d62c1", "patch": "@@ -38,7 +38,6 @@ use crate::{\n pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n-    let pat = &cond.pat();\n     let expr = cond.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n     if if_expr.else_branch().is_some() {\n@@ -79,7 +78,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n \n     ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match pat {\n+        let new_block = match cond.pat() {\n             None => {\n                 // If.\n                 let early_expression = &(early_expression.to_owned() + \";\");"}]}