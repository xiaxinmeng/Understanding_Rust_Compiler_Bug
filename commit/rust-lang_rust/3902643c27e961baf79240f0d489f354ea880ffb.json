{"sha": "3902643c27e961baf79240f0d489f354ea880ffb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDI2NDNjMjdlOTYxYmFmNzkyNDBmMGQ0ODlmMzU0ZWE4ODBmZmI=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T10:27:39Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T10:27:39Z"}, "message": "move ExplicitSelf to rustc::ty::util, and use it to implement object safety checks", "tree": {"sha": "2a5cd451dfdb74d059dcd860bcb1df285db8c4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5cd451dfdb74d059dcd860bcb1df285db8c4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3902643c27e961baf79240f0d489f354ea880ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3902643c27e961baf79240f0d489f354ea880ffb", "html_url": "https://github.com/rust-lang/rust/commit/3902643c27e961baf79240f0d489f354ea880ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3902643c27e961baf79240f0d489f354ea880ffb/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c", "html_url": "https://github.com/rust-lang/rust/commit/0b27dcc665c846d32db0b6da59dcf7ee1da5b02c"}], "stats": {"total": 125, "additions": 71, "deletions": 54}, "files": [{"sha": "c2f9cc4f766606fd2488b6c4f92fc6ea8ecea01c", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -23,6 +23,7 @@ use hir::def_id::DefId;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::subst::Substs;\n+use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n use syntax::ast;\n \n@@ -57,6 +58,8 @@ impl ObjectSafetyViolation {\n                          in its arguments or return type\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::NonStandardSelfType) =>\n+                format!(\"method `{}` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\", name).into(),\n             ObjectSafetyViolation::AssociatedConst(name) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n@@ -74,6 +77,9 @@ pub enum MethodViolationCode {\n \n     /// e.g., `fn foo<A>()`\n     Generic,\n+\n+    /// arbitrary `self` type, e.g. `self: Rc<Self>`\n+    NonStandardSelfType,\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -260,9 +266,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return Some(MethodViolationCode::StaticMethod);\n         }\n \n+        let sig = self.fn_sig(method.def_id);\n+\n+        let self_ty = self.mk_self_type();\n+        let self_arg_ty = sig.skip_binder().inputs()[0];\n+        if let ExplicitSelf::Other = ExplicitSelf::determine(self_arg_ty, |ty| ty == self_ty) {\n+            return Some(MethodViolationCode::NonStandardSelfType);\n+        }\n+\n         // The `Self` type is erased, so it should not appear in list of\n         // arguments or return type apart from the receiver.\n-        let ref sig = self.fn_sig(method.def_id);\n         for input_ty in &sig.skip_binder().inputs()[1..] {\n             if self.contains_illegal_self_type_reference(trait_def_id, input_ty) {\n                 return Some(MethodViolationCode::ReferencesSelf);"}, {"sha": "e70b3067c27714abe4548384a0f87502fc52aaef", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -12,6 +12,7 @@\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n+use hir;\n use ich::NodeIdHashingMode;\n use middle::const_val::ConstVal;\n use traits::{self, Reveal};\n@@ -1178,6 +1179,56 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     layout\n }\n \n+pub enum ExplicitSelf<'tcx> {\n+    ByValue,\n+    ByReference(ty::Region<'tcx>, hir::Mutability),\n+    ByBox,\n+    Other\n+}\n+\n+impl<'tcx> ExplicitSelf<'tcx> {\n+    /// Categorizes an explicit self declaration like `self: SomeType`\n+    /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n+    /// `Other`.\n+    /// This is mainly used to require the arbitrary_self_types feature\n+    /// in the case of `Other`, to improve error messages in the common cases,\n+    /// and to make `Other` non-object-safe.\n+    ///\n+    /// Examples:\n+    ///\n+    /// ```\n+    /// impl<'a> Foo for &'a T {\n+    ///     // Legal declarations:\n+    ///     fn method1(self: &&'a T); // ExplicitSelf::ByReference\n+    ///     fn method2(self: &'a T); // ExplicitSelf::ByValue\n+    ///     fn method3(self: Box<&'a T>); // ExplicitSelf::ByBox\n+    ///     fn method4(self: Rc<&'a T>); // ExplicitSelf::Other\n+    ///\n+    ///     // Invalid cases will be caught by `check_method_receiver`:\n+    ///     fn method_err1(self: &'a mut T); // ExplicitSelf::Other\n+    ///     fn method_err2(self: &'static T) // ExplicitSelf::ByValue\n+    ///     fn method_err3(self: &&T) // ExplicitSelf::ByReference\n+    /// }\n+    /// ```\n+    ///\n+    pub fn determine<P>(\n+        self_arg_ty: Ty<'tcx>,\n+        is_self_ty: P\n+    ) -> ExplicitSelf<'tcx>\n+    where\n+        P: Fn(Ty<'tcx>) -> bool\n+    {\n+        use self::ExplicitSelf::*;\n+\n+        match self_arg_ty.sty {\n+            _ if is_self_ty(self_arg_ty) => ByValue,\n+            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if is_self_ty(ty) => ByReference(region, mutbl),\n+            ty::TyAdt(def, _) if def.is_box() && is_self_ty(self_arg_ty.boxed_ty()) => ByBox,\n+            _ => Other\n+        }\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         is_copy_raw,"}, {"sha": "2f0b2b63bc754371ac93319bebac2995272b9b9c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -1403,53 +1403,3 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n         vec\n     }\n }\n-\n-pub enum ExplicitSelf<'tcx> {\n-    ByValue,\n-    ByReference(ty::Region<'tcx>, hir::Mutability),\n-    ByBox,\n-    Other\n-}\n-\n-impl<'tcx> ExplicitSelf<'tcx> {\n-    /// Categorizes an explicit self declaration like `self: SomeType`\n-    /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n-    /// `Other`.\n-    /// This is mainly used to require the arbitrary_self_types feature\n-    /// in the case of `Other`, to improve error messages in the common cases,\n-    /// and to make `Other` non-object-safe.\n-    ///\n-    /// Examples:\n-    ///\n-    /// ```\n-    /// impl<'a> Foo for &'a T {\n-    ///     // Legal declarations:\n-    ///     fn method1(self: &&'a T); // ExplicitSelf::ByReference\n-    ///     fn method2(self: &'a T); // ExplicitSelf::ByValue\n-    ///     fn method3(self: Box<&'a T>); // ExplicitSelf::ByBox\n-    ///     fn method4(self: Rc<&'a T>); // ExplicitSelf::Other\n-    ///\n-    ///     // Invalid cases will be caught by `check_method_receiver`:\n-    ///     fn method_err1(self: &'a mut T); // ExplicitSelf::Other\n-    ///     fn method_err2(self: &'static T) // ExplicitSelf::ByValue\n-    ///     fn method_err3(self: &&T) // ExplicitSelf::ByReference\n-    /// }\n-    /// ```\n-    ///\n-    pub fn determine<'a, 'gcx, P>(\n-        self_arg_ty: Ty<'tcx>,\n-        is_self_ty: P\n-    ) -> ExplicitSelf<'tcx>\n-    where\n-        P: Fn(Ty<'tcx>) -> bool\n-    {\n-        use self::ExplicitSelf::*;\n-\n-        match self_arg_ty.sty {\n-            _ if is_self_ty(self_arg_ty) => ByValue,\n-            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if is_self_ty(ty) => ByReference(region, mutbl),\n-            ty::TyAdt(def, _) if def.is_box() && is_self_ty(self_arg_ty.boxed_ty()) => ByBox,\n-            _ => Other\n-        }\n-    }\n-}"}, {"sha": "2c44c40d83d49012d860fa4c9f719e4fd7c93354", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -13,6 +13,7 @@ use rustc::infer::{self, InferOk};\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::util::ExplicitSelf;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{Subst, Substs};\n@@ -21,7 +22,6 @@ use rustc::util::common::ErrorReported;\n use syntax_pos::Span;\n \n use super::{Inherited, FnCtxt};\n-use astconv::ExplicitSelf;\n \n /// Checks that a method from an impl conforms to the signature of\n /// the same method as declared in the trait."}, {"sha": "b2a085bc21c18368bfb597d305e17f0be2066b1d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use astconv::ExplicitSelf;\n use check::{Inherited, FnCtxt};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::infer::InferOk;\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n "}, {"sha": "1f9a2191c9cc8d4aac203346d0f6d8e1a7caaa69", "filename": "src/test/compile-fail/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3902643c27e961baf79240f0d489f354ea880ffb/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902643c27e961baf79240f0d489f354ea880ffb/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs?ref=3902643c27e961baf79240f0d489f354ea880ffb", "patch": "@@ -30,7 +30,10 @@ impl Bar for usize {\n fn make_foo() {\n     let x = Box::new(5usize) as Box<Foo>;\n     //~^ ERROR E0038\n-    //~| NOTE the method `foo` has an arbitrary self type\n+    //~| NOTE method `foo` has a non-standard `self` type\n+    //~| NOTE the trait `Foo` cannot be made into an object\n+    //~| ERROR E0038\n+    //~| NOTE method `foo` has a non-standard `self` type\n     //~| NOTE the trait `Foo` cannot be made into an object\n }\n "}]}