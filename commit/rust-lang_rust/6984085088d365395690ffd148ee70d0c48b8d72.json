{"sha": "6984085088d365395690ffd148ee70d0c48b8d72", "node_id": "C_kwDOAAsO6NoAKDY5ODQwODUwODhkMzY1Mzk1NjkwZmZkMTQ4ZWU3MGQwYzQ4YjhkNzI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T15:36:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T10:06:11Z"}, "message": "Stop pointing to operators if their libcore method source is not available", "tree": {"sha": "8622f2fadf061d738dc7c2c1987b1e38ad3f9f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8622f2fadf061d738dc7c2c1987b1e38ad3f9f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6984085088d365395690ffd148ee70d0c48b8d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6984085088d365395690ffd148ee70d0c48b8d72", "html_url": "https://github.com/rust-lang/rust/commit/6984085088d365395690ffd148ee70d0c48b8d72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6984085088d365395690ffd148ee70d0c48b8d72/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59554a2b54c3510b062825801064541a4caa662d", "url": "https://api.github.com/repos/rust-lang/rust/commits/59554a2b54c3510b062825801064541a4caa662d", "html_url": "https://github.com/rust-lang/rust/commit/59554a2b54c3510b062825801064541a4caa662d"}], "stats": {"total": 86, "additions": 16, "deletions": 70}, "files": [{"sha": "cbd590052008c14a46f3ab0b099ea517ef6f7ce9", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6984085088d365395690ffd148ee70d0c48b8d72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6984085088d365395690ffd148ee70d0c48b8d72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=6984085088d365395690ffd148ee70d0c48b8d72", "patch": "@@ -1059,12 +1059,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                     if self.fn_self_span_reported.insert(fn_span) {\n                         err.span_note(\n-                            // Check whether the source is accessible\n-                            if self.infcx.tcx.sess.source_map().is_span_accessible(self_arg.span) {\n-                                self_arg.span\n-                            } else {\n-                                fn_call_span\n-                            },\n+                            self_arg.span,\n                             \"calling this operator moves the left-hand side\",\n                         );\n                     }"}, {"sha": "6fbbb55437eb2f8b91a0d3dd17346411fbdcf7c4", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 10, "deletions": 40, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=6984085088d365395690ffd148ee70d0c48b8d72", "patch": "@@ -9,10 +9,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:6:5\n-   |\n-LL |     lhs + rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn add<A: Add<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -45,10 +42,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:12:5\n-   |\n-LL |     lhs - rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn sub<A: Sub<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -81,10 +75,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:18:5\n-   |\n-LL |     lhs * rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn mul<A: Mul<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -117,10 +108,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:24:5\n-   |\n-LL |     lhs / rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn div<A: Div<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -153,10 +141,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:30:5\n-   |\n-LL |     lhs % rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn rem<A: Rem<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -189,10 +174,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:36:5\n-   |\n-LL |     lhs & rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn bitand<A: BitAnd<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -225,10 +207,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:42:5\n-   |\n-LL |     lhs | rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn bitor<A: BitOr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -261,10 +240,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:48:5\n-   |\n-LL |     lhs ^ rhs;\n-   |     ^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn bitxor<A: BitXor<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -297,10 +273,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:54:5\n-   |\n-LL |     lhs << rhs;\n-   |     ^^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn shl<A: Shl<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -333,10 +306,7 @@ LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-consume-args.rs:60:5\n-   |\n-LL |     lhs >> rhs;\n-   |     ^^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn shr<A: Shr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {"}, {"sha": "dae267da05d1758bd31791fff00a437cc3066a8a", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=6984085088d365395690ffd148ee70d0c48b8d72", "patch": "@@ -12,12 +12,7 @@ LL | |     x;\n    |       `x` moved due to usage in operator\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-move-semantics.rs:6:5\n-   |\n-LL | /     x\n-LL | |     +\n-LL | |     x;\n-   | |_____^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider further restricting this bound\n    |\n LL | fn double_move<T: Add<Output=()> + Copy>(x: T) {\n@@ -79,12 +74,7 @@ LL | |     *n;\n    | |______- `*m` moved due to usage in operator\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/binop-move-semantics.rs:30:5\n-   |\n-LL | /     *m\n-LL | |     +\n-LL | |     *n;\n-   | |______^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/binop-move-semantics.rs:32:5"}, {"sha": "b3f95ee192a565e85a6bc7647068168fd46e203f", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=6984085088d365395690ffd148ee70d0c48b8d72", "patch": "@@ -109,10 +109,7 @@ LL |     foo_add;\n    |     ^^^^^^^ value used here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/move-fn-self-receiver.rs:58:5\n-   |\n-LL |     foo_add + Foo;\n-   |     ^^^^^^^^^^^^^\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0382]: use of moved value: `implicit_into_iter`\n   --> $DIR/move-fn-self-receiver.rs:63:5"}, {"sha": "2a3ca14433f62ffeaec52fb189a016064eda8d35", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6984085088d365395690ffd148ee70d0c48b8d72/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=6984085088d365395690ffd148ee70d0c48b8d72", "patch": "@@ -10,10 +10,7 @@ LL |     x.clone();\n    |     ^^^^^^^^^ value borrowed here after move\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/unop-move-semantics.rs:6:5\n-   |\n-LL |     !x;\n-   |     ^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     !x.clone();\n@@ -56,10 +53,7 @@ LL |     !*m;\n    |     `*m` moved due to usage in operator\n    |\n note: calling this operator moves the left-hand side\n-  --> $DIR/unop-move-semantics.rs:24:5\n-   |\n-LL |     !*m;\n-   |     ^^^\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/unop-move-semantics.rs:26:6"}]}