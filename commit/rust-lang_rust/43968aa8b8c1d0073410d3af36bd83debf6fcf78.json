{"sha": "43968aa8b8c1d0073410d3af36bd83debf6fcf78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTY4YWE4YjhjMWQwMDczNDEwZDNhZjM2YmQ4M2RlYmY2ZmNmNzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-21T18:06:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-21T18:22:31Z"}, "message": "Replace sext() and zext() with single ext() method", "tree": {"sha": "a666040c916def8b246943ab7ab6ab9762168a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a666040c916def8b246943ab7ab6ab9762168a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43968aa8b8c1d0073410d3af36bd83debf6fcf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43968aa8b8c1d0073410d3af36bd83debf6fcf78", "html_url": "https://github.com/rust-lang/rust/commit/43968aa8b8c1d0073410d3af36bd83debf6fcf78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43968aa8b8c1d0073410d3af36bd83debf6fcf78/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "html_url": "https://github.com/rust-lang/rust/commit/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "fa0711193df487bbf72025f5e9aa7e0d514f7662", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=43968aa8b8c1d0073410d3af36bd83debf6fcf78", "patch": "@@ -15,7 +15,7 @@ use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n-    ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n+    ArgAbi, ArgAttribute, ArgAttributes, ArgExtension, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy};\n@@ -2619,7 +2619,7 @@ where\n                                       is_return: bool| {\n             // Booleans are always an i1 that needs to be zero-extended.\n             if scalar.is_bool() {\n-                attrs.zext();\n+                attrs.ext(ArgExtension::Zext);\n                 return;\n             }\n "}, {"sha": "a630c84142b4d4ebb4f749ff68097bbcfa615d96", "filename": "compiler/rustc_target/src/abi/call/mips64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs?ref=43968aa8b8c1d0073410d3af36bd83debf6fcf78", "patch": "@@ -1,4 +1,4 @@\n-use crate::abi::call::{ArgAbi, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n+use crate::abi::call::{ArgAbi, ArgExtension, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n use crate::abi::{self, HasDataLayout, LayoutOf, Size, TyAndLayout, TyAndLayoutMethods};\n \n fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n@@ -7,7 +7,7 @@ fn extend_integer_width_mips<Ty>(arg: &mut ArgAbi<'_, Ty>, bits: u64) {\n         if let abi::Int(i, signed) = scalar.value {\n             if !signed && i.size().bits() == 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n-                    attrs.sext();\n+                    attrs.ext(ArgExtension::Sext);\n                     return;\n                 }\n             }"}, {"sha": "5de9a8dfa7ac1719a7b0e388962d3c1881c6374f", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=43968aa8b8c1d0073410d3af36bd83debf6fcf78", "patch": "@@ -96,15 +96,9 @@ impl ArgAttributes {\n         }\n     }\n \n-    pub fn zext(&mut self) -> &mut Self {\n-        assert_ne!(self.arg_ext, ArgExtension::Sext);\n-        self.arg_ext = ArgExtension::Zext;\n-        self\n-    }\n-\n-    pub fn sext(&mut self) -> &mut Self {\n-        assert_ne!(self.arg_ext, ArgExtension::Zext);\n-        self.arg_ext = ArgExtension::Sext;\n+    pub fn ext(&mut self, ext: ArgExtension) -> &mut Self {\n+        assert!(self.arg_ext == ArgExtension::None || self.arg_ext == ext);\n+        self.arg_ext = ext;\n         self\n     }\n \n@@ -481,9 +475,9 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n                 if i.size().bits() < bits {\n                     if let PassMode::Direct(ref mut attrs) = self.mode {\n                         if signed {\n-                            attrs.sext()\n+                            attrs.ext(ArgExtension::Sext)\n                         } else {\n-                            attrs.zext()\n+                            attrs.ext(ArgExtension::Zext)\n                         };\n                     }\n                 }"}, {"sha": "1ab881dd13d1c46a1e8d5f4e0e0b7519fc115ff7", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43968aa8b8c1d0073410d3af36bd83debf6fcf78/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=43968aa8b8c1d0073410d3af36bd83debf6fcf78", "patch": "@@ -4,7 +4,7 @@\n // Reference: Clang RISC-V ELF psABI lowering code\n // https://github.com/llvm/llvm-project/blob/8e780252a7284be45cf1ba224cabd884847e8e92/clang/lib/CodeGen/TargetInfo.cpp#L9311-L9773\n \n-use crate::abi::call::{ArgAbi, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n+use crate::abi::call::{ArgAbi, ArgExtension, CastTarget, FnAbi, PassMode, Reg, RegKind, Uniform};\n use crate::abi::{\n     self, Abi, FieldsShape, HasDataLayout, LayoutOf, Size, TyAndLayout, TyAndLayoutMethods,\n };\n@@ -308,7 +308,7 @@ fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n             // 32-bit integers are always sign-extended\n             if i.size().bits() == 32 && xlen > 32 {\n                 if let PassMode::Direct(ref mut attrs) = arg.mode {\n-                    attrs.sext();\n+                    attrs.ext(ArgExtension::Sext);\n                     return;\n                 }\n             }"}]}