{"sha": "d30905810139c59459449cc95c7e49660bca5257", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMDkwNTgxMDEzOWM1OTQ1OTQ0OWNjOTVjN2U0OTY2MGJjYTUyNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T06:13:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T06:13:40Z"}, "message": "Rollup merge of #70284 - lcnr:issue70273-what-the-heck-git, r=eddyb\n\ncorrectly handle const params in type_of\n\nextends #70223, retry of #70276\n\nfixes #70273\n\nr? @eddyb cc @varkor", "tree": {"sha": "0c5f381550211a789a4d3c7f7a97a564f029d3e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5f381550211a789a4d3c7f7a97a564f029d3e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d30905810139c59459449cc95c7e49660bca5257", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeaUUCRBK7hj4Ov3rIwAAdHIIAE/1zyr5v2FJBjzAs1pwCSPk\nlntdpRojC8WbvxRByhnv+/eBDHWcz/+pxpMLZyVh2SsZS9xecVp49i9nEKnJyWcG\nNN79hsQ/VMmHcGkJqyLKPJwoR5zeqgq/GuWBiv+GYmVcvR9lqEp0bop637123cii\nqujZyABoDqL4LqWrhBR3c+kbIbl0UgF3Sx+UEmcly661jeEYRZIv+3+GDldOXW32\nwqHuQ4Ax7mglf6N4cqQm+EhOe446GGD+GIKNdYdXwPX2QqeXxDtm1e2BbDWB/68w\nzMQrj58tFvvDGaGiDNnBYpbyA1hOEkBkAQskXew4ykNUHc0eFY2s6RooEjDTJbI=\n=QG0E\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c5f381550211a789a4d3c7f7a97a564f029d3e1\nparent 0d5b83df26b9f8aeab514519456344490a55bf2d\nparent 0a17c4c1904ec20b6ec975e44282323c83668751\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585030420 +0100\ncommitter GitHub <noreply@github.com> 1585030420 +0100\n\nRollup merge of #70284 - lcnr:issue70273-what-the-heck-git, r=eddyb\n\ncorrectly handle const params in type_of\n\nextends #70223, retry of #70276\n\nfixes #70273\n\nr? @eddyb cc @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d30905810139c59459449cc95c7e49660bca5257", "html_url": "https://github.com/rust-lang/rust/commit/d30905810139c59459449cc95c7e49660bca5257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d30905810139c59459449cc95c7e49660bca5257/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5b83df26b9f8aeab514519456344490a55bf2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5b83df26b9f8aeab514519456344490a55bf2d", "html_url": "https://github.com/rust-lang/rust/commit/0d5b83df26b9f8aeab514519456344490a55bf2d"}, {"sha": "0a17c4c1904ec20b6ec975e44282323c83668751", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a17c4c1904ec20b6ec975e44282323c83668751", "html_url": "https://github.com/rust-lang/rust/commit/0a17c4c1904ec20b6ec975e44282323c83668751"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "3334cc32a52f709fe659304c1bfde6f03b615157", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -159,6 +159,7 @@ impl DefKind {\n     }\n }\n \n+/// The resolution of a path or export.\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n #[derive(HashStable_Generic)]\n pub enum Res<Id = hir::HirId> {"}, {"sha": "30741ed53b58b43dd47a91bab8645f63a6176de9", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -235,38 +235,40 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     };\n \n                     if let Some(path) = path {\n-                        let arg_index = path\n+                        // We've encountered an `AnonConst` in some path, so we need to\n+                        // figure out which generic parameter it corresponds to and return\n+                        // the relevant type.\n+\n+                        let (arg_index, segment) = path\n                             .segments\n                             .iter()\n-                            .filter_map(|seg| seg.args.as_ref())\n-                            .map(|generic_args| generic_args.args)\n-                            .find_map(|args| {\n+                            .filter_map(|seg| seg.args.as_ref().map(|args| (args.args, seg)))\n+                            .find_map(|(args, seg)| {\n                                 args.iter()\n                                     .filter(|arg| arg.is_const())\n                                     .enumerate()\n                                     .filter(|(_, arg)| arg.id() == hir_id)\n-                                    .map(|(index, _)| index)\n+                                    .map(|(index, _)| (index, seg))\n                                     .next()\n                             })\n                             .unwrap_or_else(|| {\n                                 bug!(\"no arg matching AnonConst in path\");\n                             });\n \n-                        // We've encountered an `AnonConst` in some path, so we need to\n-                        // figure out which generic parameter it corresponds to and return\n-                        // the relevant type.\n-                        let generics = match path.res {\n-                            Res::Def(DefKind::Ctor(..), def_id)\n-                            | Res::Def(DefKind::AssocTy, def_id) => {\n+                        // Try to use the segment resolution if it is valid, otherwise we\n+                        // default to the path resolution.\n+                        let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n+                        let generics = match res {\n+                            Res::Def(DefKind::Ctor(..), def_id) => {\n                                 tcx.generics_of(tcx.parent(def_id).unwrap())\n                             }\n                             Res::Def(_, def_id) => tcx.generics_of(def_id),\n                             res => {\n                                 tcx.sess.delay_span_bug(\n                                     DUMMY_SP,\n                                     &format!(\n-                                        \"unexpected const parent path def, parent: {:?}, def: {:?}\",\n-                                        parent_node, res\n+                                        \"unexpected anon const res {:?} in path: {:?}\",\n+                                        res, path,\n                                     ),\n                                 );\n                                 return tcx.types.err;\n@@ -291,8 +293,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 tcx.sess.delay_span_bug(\n                                     DUMMY_SP,\n                                     &format!(\n-                                        \"missing generic parameter for `AnonConst`, parent {:?}\",\n-                                        parent_node\n+                                        \"missing generic parameter for `AnonConst`, parent: {:?}, res: {:?}\",\n+                                        parent_node, res\n                                     ),\n                                 );\n                                 tcx.types.err"}, {"sha": "fd854c750184ea2907a99b0139a05ff7d3f1d24a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -62,6 +62,7 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![feature(slice_partition_dedup)]"}, {"sha": "a192ddea9c6abb3145ee60defaf7bdfed65a1956", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait T<const A: usize> {\n+    fn f();\n+}\n+struct S;\n+\n+impl T<0usize> for S {\n+    fn f() {}\n+}\n+\n+fn main() {\n+    let _err = <S as T<0usize>>::f();\n+}"}, {"sha": "64007ade0f2edff77cf228229013d55e78a215d8", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue70273-assoc-fn.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "776084b77a5770c8193cb24680604fb93cdf1185", "filename": "src/test/ui/const-generics/type_of_anon_const.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait T<const A: usize> {\n+    fn l<const N: bool>() -> usize;\n+    fn r<const N: bool>() -> bool;\n+}\n+\n+struct S;\n+\n+impl<const N: usize> T<N> for S {\n+    fn l<const M: bool>() -> usize { N }\n+    fn r<const M: bool>() -> bool { M }\n+}\n+\n+fn main() {\n+   assert_eq!(<S as T<123>>::l::<true>(), 123);\n+   assert!(<S as T<123>>::r::<true>());\n+}"}, {"sha": "495d34ce09b8172f8b39d2d78e8d084ef331e594", "filename": "src/test/ui/const-generics/type_of_anon_const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d30905810139c59459449cc95c7e49660bca5257/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.stderr?ref=d30905810139c59459449cc95c7e49660bca5257", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/type_of_anon_const.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}