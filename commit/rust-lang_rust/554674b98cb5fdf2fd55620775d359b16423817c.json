{"sha": "554674b98cb5fdf2fd55620775d359b16423817c", "node_id": "C_kwDOAAsO6NoAKDU1NDY3NGI5OGNiNWZkZjJmZDU1NjIwNzc1ZDM1OWIxNjQyMzgxN2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-06T06:37:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-06T06:37:03Z"}, "message": "Rollup merge of #97759 - WaffleLapkin:recover_label_expr, r=compiler-errors\n\nSuggest adding `{}` for `'label: non_block_expr`\n\nAdds suggestions like this:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 |     'l {0};\n  |        + +\n```\n\ninspired by https://github.com/rust-lang/rust/issues/48594#issuecomment-1146744400\n\nr? ``@compiler-errors``", "tree": {"sha": "ee2bc35c4c1cf1c156d29b647729f80e1e74d402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee2bc35c4c1cf1c156d29b647729f80e1e74d402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/554674b98cb5fdf2fd55620775d359b16423817c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinaCPCRBK7hj4Ov3rIwAAR7gIAIcxA0q1qFyGgdHS45dk2rbd\nUF0BBsfsIhLT5+nzzI1TVJ3c1/Bj/avOeUk5tN3m6uF7aQPEltuwI3JMeCWgdIvx\nBKUVMrs8hN6IkO3aTIXgbNtUSnfu3fZch5fkdDh4RZPS6r8Qv9og2eUQmkNRfeKV\n9jZWVOTZyf3QvMSseFAVMBCB9JJJpHWXUbxeclPYTlgQJtIuzvukhLLKhO1riSWC\nyki/3S7umI01hiy3eG14cmCVoZE9JJtzn+3ycRHKasu7FRUhUVTwKyCRWt6kWaVX\nX5uSbQnseYWu+LT2VCJ8Eob8hCCVaJd0ie8J77TU/ZX+09G9eivD7UV0FGWmOlw=\n=sAAZ\n-----END PGP SIGNATURE-----\n", "payload": "tree ee2bc35c4c1cf1c156d29b647729f80e1e74d402\nparent c9c6c2e7de0b651617e0cc2b5c1ae368c516361e\nparent 4f85a73e516530844aecc44fb91d0db7604f7ac4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1654497423 +0200\ncommitter GitHub <noreply@github.com> 1654497423 +0200\n\nRollup merge of #97759 - WaffleLapkin:recover_label_expr, r=compiler-errors\n\nSuggest adding `{}` for `'label: non_block_expr`\n\nAdds suggestions like this:\n```text\nhelp: consider enclosing expression in a block\n  |\n3 |     'l {0};\n  |        + +\n```\n\ninspired by https://github.com/rust-lang/rust/issues/48594#issuecomment-1146744400\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/554674b98cb5fdf2fd55620775d359b16423817c", "html_url": "https://github.com/rust-lang/rust/commit/554674b98cb5fdf2fd55620775d359b16423817c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/554674b98cb5fdf2fd55620775d359b16423817c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c6c2e7de0b651617e0cc2b5c1ae368c516361e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c6c2e7de0b651617e0cc2b5c1ae368c516361e", "html_url": "https://github.com/rust-lang/rust/commit/c9c6c2e7de0b651617e0cc2b5c1ae368c516361e"}, {"sha": "4f85a73e516530844aecc44fb91d0db7604f7ac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f85a73e516530844aecc44fb91d0db7604f7ac4", "html_url": "https://github.com/rust-lang/rust/commit/4f85a73e516530844aecc44fb91d0db7604f7ac4"}], "stats": {"total": 203, "additions": 188, "deletions": 15}, "files": [{"sha": "b786c52e6880f8f926da967871954777ffa92b0a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/554674b98cb5fdf2fd55620775d359b16423817c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554674b98cb5fdf2fd55620775d359b16423817c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=554674b98cb5fdf2fd55620775d359b16423817c", "patch": "@@ -13,10 +13,13 @@ use rustc_ast::tokenstream::Spacing;\n use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n+use rustc_ast::visit::Visitor;\n+use rustc_ast::StmtKind;\n use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -1548,9 +1551,66 @@ impl<'a> Parser<'a> {\n             Ok(self.mk_expr_err(lo))\n         } else {\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n-            self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n+\n+            let mut err = self.struct_span_err(self.token.span, msg);\n+            err.span_label(self.token.span, msg);\n+\n             // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n-            self.parse_expr()\n+            let expr = self.parse_expr().map(|expr| {\n+                let span = expr.span;\n+\n+                let found_labeled_breaks = {\n+                    struct FindLabeledBreaksVisitor(bool);\n+\n+                    impl<'ast> Visitor<'ast> for FindLabeledBreaksVisitor {\n+                        fn visit_expr_post(&mut self, ex: &'ast Expr) {\n+                            if let ExprKind::Break(Some(_label), _) = ex.kind {\n+                                self.0 = true;\n+                            }\n+                        }\n+                    }\n+\n+                    let mut vis = FindLabeledBreaksVisitor(false);\n+                    vis.visit_expr(&expr);\n+                    vis.0\n+                };\n+\n+                // Suggestion involves adding a (as of time of writing this, unstable) labeled block.\n+                //\n+                // If there are no breaks that may use this label, suggest removing the label and\n+                // recover to the unmodified expression.\n+                if !found_labeled_breaks {\n+                    let msg = \"consider removing the label\";\n+                    err.span_suggestion_verbose(\n+                        lo.until(span),\n+                        msg,\n+                        \"\",\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    return expr;\n+                }\n+\n+                let sugg_msg = \"consider enclosing expression in a block\";\n+                let suggestions = vec![\n+                    (span.shrink_to_lo(), \"{ \".to_owned()),\n+                    (span.shrink_to_hi(), \" }\".to_owned()),\n+                ];\n+\n+                err.multipart_suggestion_verbose(\n+                    sugg_msg,\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+\n+                // Replace `'label: non_block_expr` with `'label: {non_block_expr}` in order to supress future errors about `break 'label`.\n+                let stmt = self.mk_stmt(span, StmtKind::Expr(expr));\n+                let blk = self.mk_block(vec![stmt], BlockCheckMode::Default, span);\n+                self.mk_expr(span, ExprKind::Block(blk, label), ThinVec::new())\n+            });\n+\n+            err.emit();\n+            expr\n         }?;\n \n         if !ate_colon && consume_colon {"}, {"sha": "5c9597c440cbdefe98bc5c1af9cd3064ae7f2aa0", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=554674b98cb5fdf2fd55620775d359b16423817c", "patch": "@@ -47,6 +47,12 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     'l4 0;\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider removing the label\n+   |\n+LL -     'l4 0;\n+LL +     0;\n+   | \n \n error: labeled expression must be followed by `:`\n   --> $DIR/labeled-no-colon-expr.rs:8:9"}, {"sha": "fe546a71971176cb1addee19aa68d4bcdc670e86", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed?ref=554674b98cb5fdf2fd55620775d359b16423817c", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![feature(label_break_value)]\n+fn main() {\n+    let _ = 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    match () { () => {}, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    'label: { match () { () => break 'label, } }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    #[allow(unused_labels)]\n+    'label: { match () { () => 'lp: loop { break 'lp 0 }, } }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    let x = 1;\n+    let _i = 'label: { match x { //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+        0 => 42,\n+        1 if false => break 'label 17,\n+        1 => {\n+            if true {\n+                break 'label 13\n+            } else {\n+                break 'label 0;\n+            }\n+        }\n+        _ => 1,\n+    } };\n+\n+    let other = 3;\n+    let _val = 'label: { (1, if other == 3 { break 'label (2, 3) } else { other }) }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+}"}, {"sha": "35862e2eef9736bf4c7e262ad7077c536dcb08c3", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs?ref=554674b98cb5fdf2fd55620775d359b16423817c", "patch": "@@ -1,5 +1,27 @@\n+// run-rustfix\n+#![feature(label_break_value)]\n fn main() {\n-    'label: 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    let _ = 'label: 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n \n-    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+    'label: match () { () => {}, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    'label: match () { () => break 'label, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    #[allow(unused_labels)]\n+    'label: match () { () => 'lp: loop { break 'lp 0 }, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+\n+    let x = 1;\n+    let _i = 'label: match x { //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+        0 => 42,\n+        1 if false => break 'label 17,\n+        1 => {\n+            if true {\n+                break 'label 13\n+            } else {\n+                break 'label 0;\n+            }\n+        }\n+        _ => 1,\n+    };\n+\n+    let other = 3;\n+    let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other }); //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n }"}, {"sha": "767389c48088a7c76f1b9327ada80a05bdf0f5e2", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 69, "deletions": 11, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/554674b98cb5fdf2fd55620775d359b16423817c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=554674b98cb5fdf2fd55620775d359b16423817c", "patch": "@@ -1,17 +1,75 @@\n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:2:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:4:21\n    |\n-LL |     'label: 1 + 1;\n-   |             ^ expected `while`, `for`, `loop` or `{` after a label\n+LL |     let _ = 'label: 1 + 1;\n+   |                     ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider removing the label\n+   |\n+LL -     let _ = 'label: 1 + 1;\n+LL +     let _ = 1 + 1;\n+   | \n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:6:13\n+   |\n+LL |     'label: match () { () => {}, };\n+   |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider removing the label\n+   |\n+LL -     'label: match () { () => {}, };\n+LL +     match () { () => {}, };\n+   | \n \n-error[E0308]: mismatched types\n-  --> $DIR/recover-labeled-non-block-expr.rs:4:33\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:7:13\n+   |\n+LL |     'label: match () { () => break 'label, };\n+   |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL |     'label: { match () { () => break 'label, } };\n+   |             +                                  +\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:9:13\n+   |\n+LL |     'label: match () { () => 'lp: loop { break 'lp 0 }, };\n+   |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL |     'label: { match () { () => 'lp: loop { break 'lp 0 }, } };\n+   |             +                                               +\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:12:22\n+   |\n+LL |     let _i = 'label: match x {\n+   |                      ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n+   |\n+LL ~     let _i = 'label: { match x {\n+LL |         0 => 42,\n+LL |         1 if false => break 'label 17,\n+LL |         1 => {\n+LL |             if true {\n+LL |                 break 'label 13\n+ ...\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/recover-labeled-non-block-expr.rs:26:24\n+   |\n+LL |     let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other });\n+   |                        ^ expected `while`, `for`, `loop` or `{` after a label\n+   |\n+help: consider enclosing expression in a block\n    |\n-LL |     let _recovery_witness: () = 0;\n-   |                            --   ^ expected `()`, found integer\n-   |                            |\n-   |                            expected due to this\n+LL |     let _val = 'label: { (1, if other == 3 { break 'label (2, 3) } else { other }) };\n+   |                        +                                                           +\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}]}