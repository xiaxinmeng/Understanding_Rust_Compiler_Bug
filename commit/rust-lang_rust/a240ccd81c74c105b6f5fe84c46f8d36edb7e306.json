{"sha": "a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "node_id": "C_kwDOAAsO6NoAKGEyNDBjY2Q4MWM3NGMxMDViNmY1ZmU4NGM0NmY4ZDM2ZWRiN2UzMDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T03:03:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-16T03:03:03Z"}, "message": "Auto merge of #93800 - b-naber:static-initializers-mir-val, r=oli-obk\n\nTreat static refs as `mir::ConstantKind::Val`\n\nWith the upcoming introduction of Valtrees we want to treat more values as `mir::ConstantKind::Val` directly.\n\nr? `@lcnr`\n\ncc `@oli-obk`", "tree": {"sha": "3fe5203e63a0b065f548a7049e2915c8c60184dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe5203e63a0b065f548a7049e2915c8c60184dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "html_url": "https://github.com/rust-lang/rust/commit/a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393fdc10483da930cdbb00eabc3635030d2e776f", "url": "https://api.github.com/repos/rust-lang/rust/commits/393fdc10483da930cdbb00eabc3635030d2e776f", "html_url": "https://github.com/rust-lang/rust/commit/393fdc10483da930cdbb00eabc3635030d2e776f"}, {"sha": "db019f2160495b27f4bb6856c91eb9aab67cb4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/db019f2160495b27f4bb6856c91eb9aab67cb4da", "html_url": "https://github.com/rust-lang/rust/commit/db019f2160495b27f4bb6856c91eb9aab67cb4da"}], "stats": {"total": 102, "additions": 38, "deletions": 64}, "files": [{"sha": "24b08be40749d7126b4bfca82559bfca994029ab", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -2522,7 +2522,7 @@ pub enum ConstantKind<'tcx> {\n \n impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n-        match self.literal.const_for_ty()?.val().try_to_scalar() {\n+        match self.literal.try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n                 GlobalAlloc::Static(def_id) => {\n                     assert!(!tcx.is_thread_local_static(def_id));"}, {"sha": "784babffeff42e0bb598c84bc90acb97ef1cd285", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -17,9 +17,8 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::Size;\n-use std::ops::ControlFlow;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -669,6 +668,7 @@ pub fn write_allocations<'tcx>(\n     fn alloc_ids_from_alloc(alloc: &Allocation) -> impl DoubleEndedIterator<Item = AllocId> + '_ {\n         alloc.relocations().values().map(|id| *id)\n     }\n+\n     fn alloc_ids_from_const(val: ConstValue<'_>) -> impl Iterator<Item = AllocId> + '_ {\n         match val {\n             ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _size)) => {\n@@ -682,17 +682,29 @@ pub fn write_allocations<'tcx>(\n             }\n         }\n     }\n+\n     struct CollectAllocIds(BTreeSet<AllocId>);\n-    impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+\n+    impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>, _loc: Location) {\n             if let ty::ConstKind::Value(val) = c.val() {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n-            c.super_visit_with(self)\n+        }\n+\n+        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n+            match c.literal {\n+                ConstantKind::Ty(c) => self.visit_const(c, loc),\n+                ConstantKind::Val(val, _) => {\n+                    self.0.extend(alloc_ids_from_const(val));\n+                }\n+            }\n         }\n     }\n+\n     let mut visitor = CollectAllocIds(Default::default());\n-    body.visit_with(&mut visitor);\n+    visitor.visit_body(body);\n+\n     // `seen` contains all seen allocations, including the ones we have *not* printed yet.\n     // The protocol is to first `insert` into `seen`, and only if that returns `true`\n     // then push to `todo`."}, {"sha": "04bc0c8b52114dccded115a8b98fa0c9a1ac94f1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -17,6 +17,7 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n+use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{\n     BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n };\n@@ -419,7 +420,8 @@ pub enum ExprKind<'tcx> {\n     /// This is only distinguished from `Literal` so that we can register some\n     /// info for diagnostics.\n     StaticRef {\n-        literal: Const<'tcx>,\n+        alloc_id: AllocId,\n+        ty: Ty<'tcx>,\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`."}, {"sha": "b3e2cb132a273b90d9984f7c61a9a3fdbab73386", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -123,7 +123,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         }\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n-        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n+        StaticRef { .. } => {}\n         InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;"}, {"sha": "0c0b0f2bd05affc985dad8dd83c21e488da36c4c", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -1,6 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n+use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n@@ -26,8 +27,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(literal.ty(), ty);\n                 Constant { span, user_ty, literal: literal.into() }\n             }\n-            ExprKind::StaticRef { literal, .. } => {\n-                Constant { span, user_ty: None, literal: literal.into() }\n+            ExprKind::StaticRef { alloc_id, ty, .. } => {\n+                let const_val =\n+                    ConstValue::Scalar(Scalar::from_pointer(alloc_id.into(), &this.tcx));\n+                let literal = ConstantKind::Val(const_val, ty);\n+\n+                Constant { span, user_ty: None, literal }\n             }\n             ExprKind::ConstBlock { value } => {\n                 Constant { span: span, user_ty: None, literal: value.into() }"}, {"sha": "829dec74803dd9e0d83bbdd70fde506c750460bf", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n@@ -943,15 +942,8 @@ impl<'tcx> Cx<'tcx> {\n                 let kind = if self.tcx.is_thread_local_static(id) {\n                     ExprKind::ThreadLocalRef(id)\n                 } else {\n-                    let ptr = self.tcx.create_static_alloc(id);\n-                    ExprKind::StaticRef {\n-                        literal: ty::Const::from_scalar(\n-                            self.tcx,\n-                            Scalar::from_pointer(ptr.into(), &self.tcx),\n-                            ty,\n-                        ),\n-                        def_id: id,\n-                    }\n+                    let alloc_id = self.tcx.create_static_alloc(id);\n+                    ExprKind::StaticRef { alloc_id, ty, def_id: id }\n                 };\n                 ExprKind::Deref {\n                     arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),"}, {"sha": "f8a8afa92e0e65f3a3e33b2f02e408d5a2a163d6", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "1f1d857425e5b3b5c7812f75ef556a4a51a13834", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "8b5ad40c9f92c9c475a201c57d873b526af96574", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "ef651f01c9b98df9f3b3c9091973dce8bdf0b81c", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,12 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "991cf40d1b7ce6884a02dce09cb8ca16c7640a6c", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,9 +9,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "fb481697aa8111f414a49a5f99c598bd42d5a9d9", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -9,9 +9,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // ty::Const\n-                                         // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "666b805e822c1a5286fb8190c32cc1b376284b1f", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -8,9 +8,6 @@ promoted[0] in BAR: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-                                         // ty::Const\n-                                         // + ty: &i32\n-                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }"}, {"sha": "ad83e9c276e66d30ee4ac4a4f222a36f4b4e2f19", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -18,9 +18,7 @@\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-                                           // ty::Const\n--                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc1))\n++                                          // ty::Const\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(BAR, [], Some(promoted[0]))\n                                            // mir::Constant"}, {"sha": "785c8386e88b51b447b298e9732d6efd529f8812", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -8,9 +8,6 @@ promoted[0] in FOO: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // ty::Const\n-                                         // + ty: *const i32\n-                                         // + val: Value(Scalar(alloc3))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }"}, {"sha": "a9cf3ca976797da7321ea1f14095b3cd764fbd71", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -20,9 +20,7 @@\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-                                           // ty::Const\n--                                          // + ty: *const i32\n--                                          // + val: Value(Scalar(alloc3))\n++                                          // ty::Const\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(FOO, [], Some(promoted[0]))\n                                            // mir::Constant"}, {"sha": "1fd92ddd461905413f4b81d75dedf1bfba77ac51", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -24,9 +24,6 @@\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // ty::Const\n-                                           // + ty: *mut u32\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }"}, {"sha": "15b3e076642584104f43aee81f5a6bff35e856f8", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a240ccd81c74c105b6f5fe84c46f8d36edb7e306/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "patch": "@@ -17,9 +17,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // ty::Const\n-                                           // + ty: &u8\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n@@ -28,9 +25,6 @@\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // ty::Const\n-                                           // + ty: &u8\n-                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }"}]}