{"sha": "26eeec0bafabb08df96168448f4b64d9fb650b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZWVlYzBiYWZhYmIwOGRmOTYxNjg0NDhmNGI2NGQ5ZmI2NTBiMGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-14T16:04:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-01T18:13:16Z"}, "message": "Compute item_generics_num_lifetimes during resolution.", "tree": {"sha": "b9542cc9996a0a326221d722a57011d4a76e264e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9542cc9996a0a326221d722a57011d4a76e264e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26eeec0bafabb08df96168448f4b64d9fb650b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26eeec0bafabb08df96168448f4b64d9fb650b0b", "html_url": "https://github.com/rust-lang/rust/commit/26eeec0bafabb08df96168448f4b64d9fb650b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26eeec0bafabb08df96168448f4b64d9fb650b0b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "html_url": "https://github.com/rust-lang/rust/commit/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7"}], "stats": {"total": 84, "additions": 30, "deletions": 54}, "files": [{"sha": "5d3a5fc20e04278e35d158df1d6de178f96fd090", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=26eeec0bafabb08df96168448f4b64d9fb650b0b", "patch": "@@ -39,7 +39,6 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::walk_list;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n@@ -48,7 +47,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, DefPathHash, LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n@@ -159,8 +158,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     current_module: LocalDefId,\n \n-    type_def_lifetime_params: DefIdMap<usize>,\n-\n     current_hir_id_owner: (LocalDefId, u32),\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, Option<hir::HirId>>,\n@@ -172,7 +169,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n pub trait ResolverAstLowering {\n     fn def_key(&mut self, id: DefId) -> DefKey;\n \n-    fn item_generics_num_lifetimes(&self, def: DefId, sess: &Session) -> usize;\n+    fn item_generics_num_lifetimes(&self, def: DefId) -> usize;\n \n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>>;\n \n@@ -336,7 +333,6 @@ pub fn lower_crate<'a, 'hir>(\n         is_in_trait_impl: false,\n         is_in_dyn_type: false,\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n-        type_def_lifetime_params: Default::default(),\n         current_module: CRATE_DEF_ID,\n         current_hir_id_owner: (CRATE_DEF_ID, 0),\n         item_local_id_counters: Default::default(),\n@@ -452,26 +448,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             fn visit_item(&mut self, item: &'tcx Item) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n \n-                match item.kind {\n-                    ItemKind::Struct(_, ref generics)\n-                    | ItemKind::Union(_, ref generics)\n-                    | ItemKind::Enum(_, ref generics)\n-                    | ItemKind::TyAlias(box TyAliasKind(_, ref generics, ..))\n-                    | ItemKind::Trait(box TraitKind(_, _, ref generics, ..)) => {\n-                        let def_id = self.lctx.resolver.local_def_id(item.id);\n-                        let count = generics\n-                            .params\n-                            .iter()\n-                            .filter(|param| {\n-                                matches!(param.kind, ast::GenericParamKind::Lifetime { .. })\n-                            })\n-                            .count();\n-                        self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n-                    }\n-                    ItemKind::Use(ref use_tree) => {\n-                        self.allocate_use_tree_hir_id_counters(use_tree);\n-                    }\n-                    _ => {}\n+                if let ItemKind::Use(ref use_tree) = item.kind {\n+                    self.allocate_use_tree_hir_id_counters(use_tree);\n                 }\n \n                 visit::walk_item(self, item);\n@@ -486,23 +464,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 visit::walk_foreign_item(self, item);\n             }\n-\n-            fn visit_ty(&mut self, t: &'tcx Ty) {\n-                match t.kind {\n-                    // Mirrors the case in visit::walk_ty\n-                    TyKind::BareFn(ref f) => {\n-                        walk_list!(self, visit_generic_param, &f.generic_params);\n-                        // Mirrors visit::walk_fn_decl\n-                        for parameter in &f.decl.inputs {\n-                            // We don't lower the ids of argument patterns\n-                            self.visit_pat(&parameter.pat);\n-                            self.visit_ty(&parameter.ty)\n-                        }\n-                        self.visit_fn_ret_ty(&f.decl.output)\n-                    }\n-                    _ => visit::walk_ty(self, t),\n-                }\n-            }\n         }\n \n         self.lower_node_id(CRATE_NODE_ID);"}, {"sha": "90a22b5c209522864143e6b40c2d20f2fa12af5e", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=26eeec0bafabb08df96168448f4b64d9fb650b0b", "patch": "@@ -90,15 +90,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         _ => ParenthesizedGenericArgs::Err,\n                     };\n \n-                    let num_lifetimes = type_def_id.map_or(0, |def_id| {\n-                        if let Some(&n) = self.type_def_lifetime_params.get(&def_id) {\n-                            return n;\n-                        }\n-                        assert!(!def_id.is_local());\n-                        let n = self.resolver.item_generics_num_lifetimes(def_id, self.sess);\n-                        self.type_def_lifetime_params.insert(def_id, n);\n-                        n\n-                    });\n+                    let num_lifetimes = type_def_id\n+                        .map_or(0, |def_id| self.resolver.item_generics_num_lifetimes(def_id));\n                     self.lower_path_segment(\n                         p.span,\n                         segment,"}, {"sha": "4a0287d83ffd912a7e05716343e2b4e4a33ad067", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=26eeec0bafabb08df96168448f4b64d9fb650b0b", "patch": "@@ -952,6 +952,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         match item.kind {\n             ItemKind::TyAlias(box TyAliasKind(_, ref generics, _, _))\n             | ItemKind::Fn(box FnKind(_, _, ref generics, _)) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     visit::walk_item(this, item)\n                 });\n@@ -960,6 +961,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::Enum(_, ref generics)\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_adt(item, generics);\n             }\n \n@@ -970,10 +972,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 items: ref impl_items,\n                 ..\n             }) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);\n             }\n \n             ItemKind::Trait(box TraitKind(.., ref generics, ref bounds, ref trait_items)) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let local_def_id = this.r.local_def_id(item.id).to_def_id();\n@@ -1025,6 +1029,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                self.compute_num_lifetime_params(item.id, generics);\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n                     let local_def_id = this.r.local_def_id(item.id).to_def_id();\n@@ -2463,6 +2468,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+\n+    fn compute_num_lifetime_params(&mut self, id: NodeId, generics: &Generics) {\n+        let def_id = self.r.local_def_id(id);\n+        let count = generics\n+            .params\n+            .iter()\n+            .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))\n+            .count();\n+        self.r.item_generics_num_lifetimes.insert(def_id, count);\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "2101381553be127836a18d5b34115bba0844664f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26eeec0bafabb08df96168448f4b64d9fb650b0b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=26eeec0bafabb08df96168448f4b64d9fb650b0b", "patch": "@@ -1030,6 +1030,8 @@ pub struct Resolver<'a> {\n     trait_impl_items: FxHashSet<LocalDefId>,\n \n     legacy_const_generic_args: FxHashMap<DefId, Option<Vec<usize>>>,\n+    /// Amount of lifetime parameters for each item in the crate.\n+    item_generics_num_lifetimes: FxHashMap<LocalDefId, usize>,\n \n     main_def: Option<MainDefinition>,\n }\n@@ -1109,8 +1111,12 @@ impl ResolverAstLowering for Resolver<'_> {\n         }\n     }\n \n-    fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n-        self.cstore().item_generics_num_lifetimes(def_id, sess)\n+    fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {\n+        if let Some(def_id) = def_id.as_local() {\n+            self.item_generics_num_lifetimes[&def_id]\n+        } else {\n+            self.cstore().item_generics_num_lifetimes(def_id, self.session)\n+        }\n     }\n \n     fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n@@ -1390,6 +1396,7 @@ impl<'a> Resolver<'a> {\n             next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n             legacy_const_generic_args: Default::default(),\n+            item_generics_num_lifetimes: Default::default(),\n             main_def: Default::default(),\n         };\n "}]}