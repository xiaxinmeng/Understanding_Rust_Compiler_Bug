{"sha": "ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2ZiOGIwNWFhMGM5MDIzMzk4MmZjOGE4ZDM1NjcyZDEyYTkzYTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-26T01:07:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T01:07:15Z"}, "message": "Rollup merge of #69429 - matthiaskrgr:clippy_, r=estebank\n\nremove redundant clones and import", "tree": {"sha": "3466177ae196953245458b14aacaf1f777e89609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3466177ae196953245458b14aacaf1f777e89609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVcTDCRBK7hj4Ov3rIwAAdHIIAGBaljJ2u4Bq/n/eguusDQwf\nl9Rbp4W2w9Q6CMQz1AB7EK/663flA1PYPcqATdMBK2x1t8IGuV+5EysfFStvONOB\ntHjdiu2FO95DE/ogJHUm8Lh40Hs3yglUcGHy3d8ZqhkzI0tQBbOBvFWPbXJH1O3m\nM/YBQu6SI9UBkyJaFer+DQcdU074RK0STDQtfh6qe7t+01iSSZsWfYtUcEj1C8ZM\nnwukAXiqrzzjdd3YBQdiGbGTdi6RFzDrO1jYWFW+J5cuwM4bE7IXQ0Wo6t1iAvMW\n+w/zzm9rbxyyibBhTFC8qME20YMFcl7trwFvOKRdM9iN5s4JKsUeP3NGjLVGNK8=\n=cgIY\n-----END PGP SIGNATURE-----\n", "payload": "tree 3466177ae196953245458b14aacaf1f777e89609\nparent 7603c2cfba4c146aa71beb495085eaa01ff4b3d4\nparent 1892ff7aa6f7d82cbe18a531da3566fbd1939e23\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582679235 +0100\ncommitter GitHub <noreply@github.com> 1582679235 +0100\n\nRollup merge of #69429 - matthiaskrgr:clippy_, r=estebank\n\nremove redundant clones and import\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "html_url": "https://github.com/rust-lang/rust/commit/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7603c2cfba4c146aa71beb495085eaa01ff4b3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7603c2cfba4c146aa71beb495085eaa01ff4b3d4", "html_url": "https://github.com/rust-lang/rust/commit/7603c2cfba4c146aa71beb495085eaa01ff4b3d4"}, {"sha": "1892ff7aa6f7d82cbe18a531da3566fbd1939e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1892ff7aa6f7d82cbe18a531da3566fbd1939e23", "html_url": "https://github.com/rust-lang/rust/commit/1892ff7aa6f7d82cbe18a531da3566fbd1939e23"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "c027d6f61b01f2d32e5520773a04331189b27e39", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> GlobalCtxt<'tcx> {\n         ty::tls::with_related_context(tcx, |icx| {\n             let new_icx = ty::tls::ImplicitCtxt {\n                 tcx,\n-                query: icx.query.clone(),\n+                query: icx.query,\n                 diagnostics: icx.diagnostics,\n                 layout_depth: icx.layout_depth,\n                 task_deps: icx.task_deps,"}, {"sha": "d17ef3a6c9a8cce5ff7238ee985ac5c5c808e5a1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -1447,7 +1447,7 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: *self.value }),\n             self.constness,\n         )\n     }"}, {"sha": "3394fed8402224ff98f0d7929c67065d93aedd25", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> QueryLatch<'tcx> {\n                 return CycleError { usage, cycle };\n             }\n \n-            current_job = info.job.parent.clone();\n+            current_job = info.job.parent;\n         }\n \n         panic!(\"did not find a cycle\")"}, {"sha": "4248627dccaf23533f896c68a3d96bf55354e03d", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             _ => {\n                 let val = self.eval_mir_constant(constant)?;\n                 let ty = self.monomorphize(&constant.literal.ty);\n-                Ok(OperandRef::from_const(bx, val.clone(), ty))\n+                Ok(OperandRef::from_const(bx, val, ty))\n             }\n         }\n     }"}, {"sha": "6711a49b2b7c1df00a8f6b74c4ebe595d8f8c71a", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -314,7 +314,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             return Ok(());\n         }\n \n-        match self.active_cache.entry(obligation.as_cache_key().clone()) {\n+        match self.active_cache.entry(obligation.as_cache_key()) {\n             Entry::Occupied(o) => {\n                 let node = &mut self.nodes[*o.get()];\n                 if let Some(parent_index) = parent {\n@@ -385,7 +385,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         self.error_cache\n             .entry(node.obligation_tree_id)\n             .or_default()\n-            .insert(node.obligation.as_cache_key().clone());\n+            .insert(node.obligation.as_cache_key());\n     }\n \n     /// Performs a pass through the obligation list. This must"}, {"sha": "fc9f3bb076745a6f076a8783d11e7aa0b7682cf6", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -848,7 +848,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         for upper_bound in &upper_bounds {\n             if let ty::RePlaceholder(p) = upper_bound.region {\n                 if node_universe.cannot_name(p.universe) {\n-                    let origin = self.var_infos[node_idx].origin.clone();\n+                    let origin = self.var_infos[node_idx].origin;\n                     errors.push(RegionResolutionError::UpperBoundUniverseConflict(\n                         node_idx,\n                         origin,"}, {"sha": "dc6ae961e5a6e69e39f28b89ffda65360fd1bdd7", "filename": "src/librustc_macros/src/hash_stable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fhash_stable.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -1,7 +1,6 @@\n use proc_macro2::{self, Ident};\n use quote::quote;\n use syn::{self, parse_quote, Meta, NestedMeta};\n-use synstructure;\n \n struct Attributes {\n     ignore: bool,"}, {"sha": "4583e244f493d7c904a7aa04aba91fcdac388d9c", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     TerminatorKind::Yield {\n                         value,\n                         resume,\n-                        resume_arg: destination.clone(),\n+                        resume_arg: *destination,\n                         drop: cleanup,\n                     },\n                 );"}, {"sha": "79951255243141cb6c19505538993f9220928ef1", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3fb8b05aa0c90233982fc8a8d35672d12a93a1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=ab3fb8b05aa0c90233982fc8a8d35672d12a93a1", "patch": "@@ -649,7 +649,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n             }\n             PatKind::Or { ref pats } => {\n-                self.visit_bindings(&pats[0], pattern_user_ty.clone(), f);\n+                self.visit_bindings(&pats[0], pattern_user_ty, f);\n             }\n         }\n     }"}]}