{"sha": "109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOWM5YTc5ZWQ5ZTE3ZDU0YmQ0Y2EyYTRhOGI5ZmJkZmQyOWY2NTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-06T09:33:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:46Z"}, "message": "infer: extract total number of region variables from infcx\n\nWe are heading towards deeper integration with the region inference\nsystem in infcx; in particular, prior to the creation of the\n`RegionInferenceContext`, it will be the \"owner\" of the set of region\nvariables.", "tree": {"sha": "aadaf33ab5c65c3fcdf254732828b951c6ba2a9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aadaf33ab5c65c3fcdf254732828b951c6ba2a9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "html_url": "https://github.com/rust-lang/rust/commit/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a87d1bbb9326d28f73d4b837a9363ca53df7affb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a87d1bbb9326d28f73d4b837a9363ca53df7affb", "html_url": "https://github.com/rust-lang/rust/commit/a87d1bbb9326d28f73d4b837a9363ca53df7affb"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "a0334ed078f44e8090ba35c186769ac5d235d7da", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "patch": "@@ -41,7 +41,7 @@ pub fn compute_regions<'a, 'gcx, 'tcx>(\n     let free_regions = &free_regions::free_regions(infcx, def_id);\n \n     // Replace all regions with fresh inference variables.\n-    let num_region_variables = renumber::renumber_mir(infcx, free_regions, mir);\n+    renumber::renumber_mir(infcx, free_regions, mir);\n \n     // Compute what is live where.\n     let liveness = &LivenessResults {\n@@ -64,7 +64,7 @@ pub fn compute_regions<'a, 'gcx, 'tcx>(\n \n     // Create the region inference context, generate the constraints,\n     // and then solve them.\n-    let mut regioncx = RegionInferenceContext::new(free_regions, num_region_variables, mir);\n+    let mut regioncx = RegionInferenceContext::new(infcx, free_regions, mir);\n     let param_env = infcx.tcx.param_env(def_id);\n     constraint_generation::generate_constraints(infcx, &mut regioncx, &mir, param_env, liveness);\n     regioncx.solve(infcx, &mir);"}, {"sha": "f1160d42155ab56df83556f62823c042a9905f65", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "patch": "@@ -113,14 +113,12 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n     /// of those will be constant regions representing the free\n     /// regions defined in `free_regions`.\n     pub fn new(\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         free_regions: &FreeRegions<'tcx>,\n-        num_region_variables: usize,\n         mir: &Mir<'tcx>,\n     ) -> Self {\n         let mut result = Self {\n-            definitions: (0..num_region_variables)\n-                .map(|_| RegionDefinition::default())\n-                .collect(),\n+            definitions: infcx.all_region_vars().map(|_| RegionDefinition::default()).collect(),\n             constraints: Vec::new(),\n             free_regions: Vec::new(),\n         };"}, {"sha": "c053dab123d7fff3fe23740d3d522be1470f666d", "filename": "src/librustc_mir/transform/nll/renumber.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs?ref=109c9a79ed9e17d54bd4ca2a4a8b9fbdfd29f650", "patch": "@@ -25,7 +25,7 @@ pub fn renumber_mir<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     free_regions: &FreeRegions<'tcx>,\n     mir: &mut Mir<'tcx>,\n-) -> usize {\n+) {\n     // Create inference variables for each of the free regions\n     // declared on the function signature.\n     let free_region_inference_vars = (0..free_regions.indices.len())\n@@ -37,18 +37,15 @@ pub fn renumber_mir<'a, 'gcx, 'tcx>(\n     let mut visitor = NLLVisitor {\n         infcx,\n         lookup_map: HashMap::new(),\n-        num_region_variables: free_regions.indices.len(),\n         free_regions,\n         free_region_inference_vars,\n         arg_count: mir.arg_count,\n     };\n     visitor.visit_mir(mir);\n-    visitor.num_region_variables\n }\n \n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     lookup_map: HashMap<RegionVid, TyContext>,\n-    num_region_variables: usize,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     free_regions: &'a FreeRegions<'tcx>,\n     free_region_inference_vars: IndexVec<RegionVid, ty::Region<'tcx>>,\n@@ -66,9 +63,7 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n         self.infcx\n             .tcx\n             .fold_regions(value, &mut false, |_region, _depth| {\n-                self.num_region_variables += 1;\n-                self.infcx\n-                    .next_region_var(rustc_infer::MiscVariable(DUMMY_SP))\n+                self.infcx.next_region_var(rustc_infer::MiscVariable(DUMMY_SP))\n             })\n     }\n "}]}