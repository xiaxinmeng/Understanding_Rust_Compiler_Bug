{"sha": "fa73b617c23a529b1ad966a9814961f1cbc78f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzNiNjE3YzIzYTUyOWIxYWQ5NjZhOTgxNDk2MWYxY2JjNzhmNmM=", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-22T00:01:48Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2020-02-22T00:01:48Z"}, "message": "clean things up", "tree": {"sha": "383e9936378e49d782ccb0a13447ebe26a08b8f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383e9936378e49d782ccb0a13447ebe26a08b8f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa73b617c23a529b1ad966a9814961f1cbc78f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa73b617c23a529b1ad966a9814961f1cbc78f6c", "html_url": "https://github.com/rust-lang/rust/commit/fa73b617c23a529b1ad966a9814961f1cbc78f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa73b617c23a529b1ad966a9814961f1cbc78f6c/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd6b98220a7d161288f04a03111ca77b0a4845d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd6b98220a7d161288f04a03111ca77b0a4845d", "html_url": "https://github.com/rust-lang/rust/commit/1bd6b98220a7d161288f04a03111ca77b0a4845d"}], "stats": {"total": 77, "additions": 48, "deletions": 29}, "files": [{"sha": "0c87d3fe8fc1cc05442e72730a31a1a6b2b2cba0", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -14,6 +14,7 @@ use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use rustc_parse::DirectoryOwnership;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n@@ -1093,7 +1094,12 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             }\n \n             if attr.doc_str().is_some() {\n-                self.cx.parse_sess.buffer_lint(&UNUSED_DOC_COMMENTS, attr.span, ast::CRATE_NODE_ID, \"yep, it's unused\");\n+                self.cx.parse_sess.buffer_lint_with_diagnostic(\n+                    &UNUSED_DOC_COMMENTS,\n+                    attr.span,\n+                    ast::CRATE_NODE_ID,\n+                    \"unused doc comment\",\n+                    BuiltinLintDiagnostics::UnusedDocComment(attr.span));\n             }\n         }\n     }"}, {"sha": "705097d46448271600641f796a63052979b09aca", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -744,7 +744,6 @@ trait UnusedDocCommentExt {\n         cx: &EarlyContext<'_>,\n         node_span: Span,\n         node_kind: &str,\n-        is_macro_expansion: bool,\n         attrs: &[ast::Attribute],\n     );\n }\n@@ -755,7 +754,6 @@ impl UnusedDocCommentExt for UnusedDocComment {\n         cx: &EarlyContext<'_>,\n         node_span: Span,\n         node_kind: &str,\n-        is_macro_expansion: bool,\n         attrs: &[ast::Attribute],\n     ) {\n         let mut attrs = attrs.into_iter().peekable();\n@@ -783,12 +781,6 @@ impl UnusedDocCommentExt for UnusedDocComment {\n                         node_span,\n                         format!(\"rustdoc does not generate documentation for {}\", node_kind),\n                     );\n-                    if is_macro_expansion {\n-                        err.help(\n-                            \"to document an item produced by a macro, \\\n-                                  the macro must produce the documentation as part of its expansion\",\n-                        );\n-                    }\n                     err.emit();\n                 });\n             }\n@@ -797,31 +789,24 @@ impl UnusedDocCommentExt for UnusedDocComment {\n }\n \n impl EarlyLintPass for UnusedDocComment {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if let ast::ItemKind::Mac(..) = item.kind {\n-            self.warn_if_doc(cx, item.span, \"macro expansions\", true, &item.attrs);\n-        }\n-    }\n-\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n-        let (kind, is_macro_expansion) = match stmt.kind {\n-            ast::StmtKind::Local(..) => (\"statements\", false),\n-            ast::StmtKind::Item(..) => (\"inner items\", false),\n-            ast::StmtKind::Mac(..) => (\"macro expansions\", true),\n+        let kind = match stmt.kind {\n+            ast::StmtKind::Local(..) => \"statements\",\n+            ast::StmtKind::Item(..) => \"inner items\",\n             // expressions will be reported by `check_expr`.\n-            ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) => return,\n+            ast::StmtKind::Semi(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Mac(..) => return,\n         };\n \n-        self.warn_if_doc(cx, stmt.span, kind, is_macro_expansion, stmt.kind.attrs());\n+        self.warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {\n         let arm_span = arm.pat.span.with_hi(arm.body.span.hi());\n-        self.warn_if_doc(cx, arm_span, \"match arms\", false, &arm.attrs);\n+        self.warn_if_doc(cx, arm_span, \"match arms\", &arm.attrs);\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        self.warn_if_doc(cx, expr.span, \"expressions\", false, &expr.attrs);\n+        self.warn_if_doc(cx, expr.span, \"expressions\", &expr.attrs);\n     }\n }\n "}, {"sha": "adad1198b096b21b9d53ef2ad6bc4a70bf35552b", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -565,6 +565,11 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span) => {\n                     stability::deprecation_suggestion(&mut db, suggestion, span)\n                 }\n+                BuiltinLintDiagnostics::UnusedDocComment(span) => {\n+                    db.span_label(span, \"rustdoc does not generate documentation for macros\");\n+                    db.help(\"to document an item produced by a macro, \\\n+                                  the macro must produce the documentation as part of its expansion\");\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "6d4f1ff5b4877dd810514c0f2fcf005175fba1df", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -190,6 +190,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedImports(String, Vec<(Span, String)>),\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n+    UnusedDocComment(Span),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "30888e343ed8191975dbb60a3e2981124942c91a", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -176,6 +176,25 @@ impl ParseSess {\n         });\n     }\n \n+    pub fn buffer_lint_with_diagnostic(\n+        &self,\n+        lint: &'static Lint,\n+        span: impl Into<MultiSpan>,\n+        node_id: NodeId,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.buffered_lints.with_lock(|buffered_lints| {\n+            buffered_lints.push(BufferedEarlyLint {\n+                span: span.into(),\n+                node_id,\n+                msg: msg.into(),\n+                lint_id: LintId::of(lint),\n+                diagnostic,\n+            });\n+        });\n+    }\n+\n     /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n     /// parser to continue parsing the following operation as part of the same expression.\n     pub fn expr_parentheses_needed("}, {"sha": "7d2e5ab6f2b7f673a0fde4a2ae765c3c7066a433", "filename": "src/test/ui/useless-comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Ftest%2Fui%2Fuseless-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Ftest%2Fui%2Fuseless-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuseless-comment.rs?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -6,7 +6,7 @@ macro_rules! mac {\n     () => {}\n }\n \n-/// foo //~ ERROR yep, it's unused\n+/// foo //~ ERROR unused doc comment\n mac!();\n \n fn foo() {\n@@ -29,7 +29,7 @@ fn foo() {\n     #[doc = \"bar\"] //~ ERROR unused doc comment\n     3;\n \n-    /// bar //~ ERROR yep, it's unused\n+    /// bar //~ ERROR unused doc comment\n     mac!();\n \n     let x = /** comment */ 47; //~ ERROR unused doc comment"}, {"sha": "92817321a88f0ccbcd80415267303df05934a000", "filename": "src/test/ui/useless-comment.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Ftest%2Fui%2Fuseless-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa73b617c23a529b1ad966a9814961f1cbc78f6c/src%2Ftest%2Fui%2Fuseless-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuseless-comment.stderr?ref=fa73b617c23a529b1ad966a9814961f1cbc78f6c", "patch": "@@ -1,20 +1,23 @@\n-error: yep, it's unused\n+error: unused doc comment\n   --> $DIR/useless-comment.rs:9:1\n    |\n LL | /// foo\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n    |\n note: the lint level is defined here\n   --> $DIR/useless-comment.rs:3:9\n    |\n LL | #![deny(unused_doc_comments)]\n    |         ^^^^^^^^^^^^^^^^^^^\n+   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n \n-error: yep, it's unused\n+error: unused doc comment\n   --> $DIR/useless-comment.rs:32:5\n    |\n LL |     /// bar\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ rustdoc does not generate documentation for macros\n+   |\n+   = help: to document an item produced by a macro, the macro must produce the documentation as part of its expansion\n \n error: unused doc comment\n   --> $DIR/useless-comment.rs:13:5"}]}