{"sha": "df40e61382a2cba0be621fdabb9971ce3475e9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDBlNjEzODJhMmNiYTBiZTYyMWZkYWJiOTk3MWNlMzQ3NWU5YTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T10:57:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T10:57:05Z"}, "message": "Auto merge of #50307 - petrochenkov:keyhyg2, r=nikomatsakis\n\nImplement edition hygiene for keywords\n\nDetermine \"keywordness\" of an identifier in its hygienic context.\ncc https://github.com/rust-lang/rust/pull/49611\n\nI've resurrected `proc` as an Edition-2015-only keyword for testing purposes, but it should probably be buried again. EDIT: `proc` is removed again.", "tree": {"sha": "7bdf66599659eccd8b03f5921c2e5087efe94008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bdf66599659eccd8b03f5921c2e5087efe94008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7", "html_url": "https://github.com/rust-lang/rust/commit/df40e61382a2cba0be621fdabb9971ce3475e9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd18d2537ddcffb24b3739393b085ed28dfc340e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d2537ddcffb24b3739393b085ed28dfc340e", "html_url": "https://github.com/rust-lang/rust/commit/fd18d2537ddcffb24b3739393b085ed28dfc340e"}, {"sha": "d8bbc1ee1ad44e9c7bd93c8d59103eacd0ed36e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bbc1ee1ad44e9c7bd93c8d59103eacd0ed36e8", "html_url": "https://github.com/rust-lang/rust/commit/d8bbc1ee1ad44e9c7bd93c8d59103eacd0ed36e8"}], "stats": {"total": 1015, "additions": 896, "deletions": 119}, "files": [{"sha": "bcab61680965afc3aa1b381216e5ac4d1aebaf30", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -818,7 +818,7 @@ impl Ident {\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         let mut ident = Ident::new(string, span);\n         if ident.sym == keywords::Underscore.name() ||\n-           token::is_path_segment_keyword(ast::Ident::with_empty_ctxt(ident.sym)) {\n+           ast::Ident::with_empty_ctxt(ident.sym).is_path_segment_keyword() {\n             panic!(\"`{:?}` is not a valid raw identifier\", string)\n         }\n         ident.is_raw = true;"}, {"sha": "45d429612a1dbd4723060010dec29c2905018ad3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -593,6 +593,7 @@ impl<'a> LoweringContext<'a> {\n                 span: Some(span),\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                edition: codemap::hygiene::default_edition(),\n             },\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "940a68e8ce5ca7f6c7d6b9c81520e012d383ec0b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::codemap::{CodeMap, Spanned};\n-use syntax::parse::{token, ParseSess};\n+use syntax::parse::ParseSess;\n use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n@@ -1559,7 +1559,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> {\n-        if token::is_raw_guess(ast::Ident::with_empty_ctxt(name)) {\n+        if name.to_ident().is_raw_guess() {\n             self.s.word(&format!(\"r#{}\", name))?;\n         } else {\n             self.s.word(&name.as_str())?;"}, {"sha": "3a37c1c18c8d9fcd976e55d5bfe5958712f99cd3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -131,6 +131,15 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     rustc_const_unstable\n });\n \n+impl<'a> HashStable<StableHashingContext<'a>>\n+for ::syntax::edition::Edition {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'a> HashStable<StableHashingContext<'a>>\n for ::syntax::attr::StabilityLevel {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -389,6 +398,7 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::NameAndSpan {\n     format,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n+    edition,\n     span\n });\n "}, {"sha": "518021f412574dcb73c849f370f31f0a2181a9a3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -34,6 +34,7 @@ use session::search_paths::PathKind;\n use std::any::Any;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n+use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n@@ -235,6 +236,7 @@ pub trait CrateStore {\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n+    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition;\n     fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n     fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -309,6 +311,7 @@ impl CrateStore for DummyCrateStore {\n         bug!(\"crate_disambiguator\")\n     }\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh { bug!(\"crate_hash\") }\n+    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition { bug!(\"crate_edition_untracked\") }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }"}, {"sha": "497d5fdcac70288b94d5f92df52692676537506d", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -21,7 +21,7 @@ use syntax::ext::base::ExtCtxt;\n use syntax::ext::base::Resolver;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n use syntax::fold::{self, Folder};\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n@@ -86,6 +86,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n                 span: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                edition: hygiene::default_edition(),\n             },\n         });\n         let span = item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "2f89814032ef6eb55c43b3ce7986ca4c0c9477f1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -108,7 +108,7 @@ use syntax::ast;\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n-use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n+use syntax_pos::{hygiene, DUMMY_SP, MultiSpan, FileName};\n \n #[cfg(test)]\n mod test;\n@@ -466,6 +466,7 @@ pub fn run_compiler<'a>(args: &[String],\n         };\n \n         let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n+        hygiene::set_default_edition(sopts.edition);\n \n         driver::spawn_thread_pool(sopts, |sopts| {\n             run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)"}, {"sha": "6c1f72f5f9cd66b6fc9a4a38744e8bf8eab01d2e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -35,6 +35,7 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax::visit;\n@@ -535,7 +536,10 @@ impl<'a> CrateLoader<'a> {\n             mem::transmute::<*mut u8, fn(&mut Registry)>(sym)\n         };\n \n-        struct MyRegistrar(Vec<(ast::Name, Lrc<SyntaxExtension>)>);\n+        struct MyRegistrar {\n+            extensions: Vec<(ast::Name, Lrc<SyntaxExtension>)>,\n+            edition: Edition,\n+        }\n \n         impl Registry for MyRegistrar {\n             fn register_custom_derive(&mut self,\n@@ -544,36 +548,38 @@ impl<'a> CrateLoader<'a> {\n                                       attributes: &[&'static str]) {\n                 let attrs = attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n                 let derive = ProcMacroDerive::new(expand, attrs.clone());\n-                let derive = SyntaxExtension::ProcMacroDerive(Box::new(derive), attrs);\n-                self.0.push((Symbol::intern(trait_name), Lrc::new(derive)));\n+                let derive = SyntaxExtension::ProcMacroDerive(\n+                    Box::new(derive), attrs, self.edition\n+                );\n+                self.extensions.push((Symbol::intern(trait_name), Lrc::new(derive)));\n             }\n \n             fn register_attr_proc_macro(&mut self,\n                                         name: &str,\n                                         expand: fn(TokenStream, TokenStream) -> TokenStream) {\n                 let expand = SyntaxExtension::AttrProcMacro(\n-                    Box::new(AttrProcMacro { inner: expand })\n+                    Box::new(AttrProcMacro { inner: expand }), self.edition\n                 );\n-                self.0.push((Symbol::intern(name), Lrc::new(expand)));\n+                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n             }\n \n             fn register_bang_proc_macro(&mut self,\n                                         name: &str,\n                                         expand: fn(TokenStream) -> TokenStream) {\n                 let expand = SyntaxExtension::ProcMacro(\n-                    Box::new(BangProcMacro { inner: expand })\n+                    Box::new(BangProcMacro { inner: expand }), self.edition\n                 );\n-                self.0.push((Symbol::intern(name), Lrc::new(expand)));\n+                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n             }\n         }\n \n-        let mut my_registrar = MyRegistrar(Vec::new());\n+        let mut my_registrar = MyRegistrar { extensions: Vec::new(), edition: root.edition };\n         registrar(&mut my_registrar);\n \n         // Intentionally leak the dynamic library. We can't ever unload it\n         // since the library can make things that will live arbitrarily long.\n         mem::forget(lib);\n-        my_registrar.0\n+        my_registrar.extensions\n     }\n \n     /// Look for a plugin registrar. Returns library path, crate"}, {"sha": "f2d2d090e0ab38cd1effe3ac7c6b8704ddc2b4f5", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -24,6 +24,7 @@ use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n use syntax::{ast, attr};\n+use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos;\n@@ -234,4 +235,8 @@ impl CrateMetadata {\n     pub fn panic_strategy(&self) -> PanicStrategy {\n         self.root.panic_strategy.clone()\n     }\n+\n+    pub fn edition(&self) -> Edition {\n+        self.root.edition\n+    }\n }"}, {"sha": "c8f25f935e9fe13807ea87dc9dbdb071719c933a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -38,6 +38,7 @@ use std::sync::Arc;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap;\n+use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::parse::filemap_to_stream;\n use syntax::symbol::Symbol;\n@@ -464,6 +465,11 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).hash()\n     }\n \n+    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition\n+    {\n+        self.get_crate_data(cnum).edition()\n+    }\n+\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n@@ -512,7 +518,8 @@ impl CrateStore for cstore::CStore {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n         } else if data.name == \"proc_macro\" &&\n                   self.get_crate_data(id.krate).item_name(id.index) == \"quote\" {\n-            let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter));\n+            let ext = SyntaxExtension::ProcMacro(Box::new(::proc_macro::__internal::Quoter),\n+                                                 data.edition());\n             return LoadedMacro::ProcMacro(Lrc::new(ext));\n         }\n "}, {"sha": "d00f4f32c109f61422897b952a563147b8976575", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -44,7 +44,7 @@ use syntax::ast::{self, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::attr;\n use syntax::symbol::Symbol;\n-use syntax_pos::{self, FileName, FileMap, Span, DUMMY_SP};\n+use syntax_pos::{self, hygiene, FileName, FileMap, Span, DUMMY_SP};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -496,6 +496,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hash: link_meta.crate_hash,\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n             panic_strategy: tcx.sess.panic_strategy(),\n+            edition: hygiene::default_edition(),\n             has_global_allocator: has_global_allocator,\n             has_default_lib_allocator: has_default_lib_allocator,\n             plugin_registrar_fn: tcx.sess"}, {"sha": "8e17b7f8d692d94194627f66d56342a4c1bb9682", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -23,6 +23,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use rustc_serialize as serialize;\n use syntax::{ast, attr};\n+use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax_pos::{self, Span};\n \n@@ -189,6 +190,7 @@ pub struct CrateRoot {\n     pub hash: hir::svh::Svh,\n     pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n+    pub edition: Edition,\n     pub has_global_allocator: bool,\n     pub has_default_lib_allocator: bool,\n     pub plugin_registrar_fn: Option<DefIndex>,"}, {"sha": "4f239a0868ebfaa87e49086f779ffae35c2df58d", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -21,7 +21,6 @@ use rustc::session::Session;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::Spanned;\n-use syntax::parse::token;\n use syntax::symbol::keywords;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n@@ -40,14 +39,13 @@ impl<'a> AstValidator<'a> {\n         let valid_names = [keywords::UnderscoreLifetime.name(),\n                            keywords::StaticLifetime.name(),\n                            keywords::Invalid.name()];\n-        if !valid_names.contains(&ident.name) &&\n-            token::is_reserved_ident(ident.without_first_quote()) {\n+        if !valid_names.contains(&ident.name) && ident.without_first_quote().is_reserved() {\n             self.err_handler().span_err(ident.span, \"lifetimes cannot use keyword names\");\n         }\n     }\n \n     fn check_label(&self, ident: Ident) {\n-        if token::is_reserved_ident(ident.without_first_quote()) {\n+        if ident.without_first_quote().is_reserved() {\n             self.err_handler()\n                 .span_err(ident.span, &format!(\"invalid label name `{}`\", ident.name));\n         }"}, {"sha": "ea15f4c75b96c73bb0bd7336242812ac7be2f398", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -15,6 +15,7 @@ use rustc::session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n+use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -107,15 +108,17 @@ impl<'a> Registry<'a> {\n                 def_info: _,\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n-                unstable_feature\n+                unstable_feature,\n+                edition,\n             } => {\n                 let nid = ast::CRATE_NODE_ID;\n                 NormalTT {\n                     expander,\n                     def_info: Some((nid, self.krate_span)),\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n-                    unstable_feature\n+                    unstable_feature,\n+                    edition,\n                 }\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n@@ -150,6 +153,7 @@ impl<'a> Registry<'a> {\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n             unstable_feature: None,\n+            edition: hygiene::default_edition(),\n         });\n     }\n "}, {"sha": "d3cc533cd36a460661ab60423b3d317c12ed086b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -588,7 +588,8 @@ impl<'a> Resolver<'a> {\n \n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,\n                                                &self.session.features_untracked(),\n-                                               &macro_def));\n+                                               &macro_def,\n+                                               self.cstore.crate_edition_untracked(def_id.krate)));\n         self.macro_map.insert(def_id, ext.clone());\n         ext\n     }"}, {"sha": "e13e6bc6b745677f9b60009920a89a60626102b5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -58,7 +58,6 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::feature_gate::{feature_err, GateIssue};\n-use syntax::parse::token;\n use syntax::ptr::P;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n@@ -3274,7 +3273,7 @@ impl<'a> Resolver<'a> {\n                     // `$crate::a::b`\n                     module = Some(self.resolve_crate_root(ident.span.ctxt(), true));\n                     continue\n-                } else if i == 1 && !token::is_path_segment_keyword(ident) {\n+                } else if i == 1 && !ident.is_path_segment_keyword() {\n                     let prev_name = path[0].name;\n                     if prev_name == keywords::Extern.name() ||\n                        prev_name == keywords::CrateRoot.name() &&"}, {"sha": "0fc963a1367126180e043a40fdf953063dda190b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -24,7 +24,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Annotatable, Determinacy, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroKind, SyntaxExtension, Resolver as SyntaxResolver};\n use syntax::ext::expand::{Expansion, ExpansionKind, Invocation, InvocationKind, find_attr_invoc};\n-use syntax::ext::hygiene::{Mark, MarkKind};\n+use syntax::ext::hygiene::{self, Mark, MarkKind};\n use syntax::ext::placeholders::placeholder;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, emit_feature_err, GateIssue};\n@@ -328,7 +328,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n                 SyntaxExtension::NormalTT { def_info, .. } => def_info,\n-                SyntaxExtension::DeclMacro(.., osp) => osp,\n+                SyntaxExtension::DeclMacro(.., osp, _) => osp,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {\n@@ -371,7 +371,7 @@ impl<'a> Resolver<'a> {\n         };\n         for path in traits {\n             match self.resolve_macro(scope, path, MacroKind::Derive, force) {\n-                Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs) = *ext {\n+                Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs, _) = *ext {\n                     if inert_attrs.contains(&attr_name) {\n                         // FIXME(jseyfried) Avoid `mem::replace` here.\n                         let dummy_item = placeholder(ExpansionKind::Items, ast::DUMMY_NODE_ID)\n@@ -755,7 +755,7 @@ impl<'a> Resolver<'a> {\n         let def_id = self.definitions.local_def_id(item.id);\n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,\n                                                &self.session.features_untracked(),\n-                                               item));\n+                                               item, hygiene::default_edition()));\n         self.macro_map.insert(def_id, ext);\n \n         let def = match item.node { ast::ItemKind::MacroDef(ref def) => def, _ => unreachable!() };\n@@ -803,14 +803,15 @@ impl<'a> Resolver<'a> {\n \n         match *ext {\n             // If `ext` is a procedural macro, check if we've already warned about it\n-            AttrProcMacro(_) | ProcMacro(_) => if !self.warned_proc_macros.insert(name) { return; },\n+            AttrProcMacro(..) | ProcMacro(..) =>\n+                if !self.warned_proc_macros.insert(name) { return; },\n             _ => return,\n         }\n \n         let warn_msg = match *ext {\n-            AttrProcMacro(_) => \"attribute procedural macros cannot be \\\n-                                 imported with `#[macro_use]`\",\n-            ProcMacro(_) => \"procedural macros cannot be imported with `#[macro_use]`\",\n+            AttrProcMacro(..) => \"attribute procedural macros cannot be \\\n+                                  imported with `#[macro_use]`\",\n+            ProcMacro(..) => \"procedural macros cannot be imported with `#[macro_use]`\",\n             _ => return,\n         };\n "}, {"sha": "16d5d3fa0437f3dec6d0b5e977918d5bc9948ef6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -27,7 +27,6 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{Ident, Name, NodeId};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n-use syntax::parse::token;\n use syntax::symbol::keywords;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n@@ -667,7 +666,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         } else {\n                             Some(self.resolve_crate_root(source.span.ctxt().modern(), false))\n                         }\n-                    } else if is_extern && !token::is_path_segment_keyword(source) {\n+                    } else if is_extern && !source.is_path_segment_keyword() {\n                         let crate_id =\n                             self.resolver.crate_loader.process_use_extern(\n                                 source.name,\n@@ -715,8 +714,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n             PathResult::Failed(span, msg, true) => {\n                 let (mut self_path, mut self_result) = (module_path.clone(), None);\n-                let is_special = |ident| token::is_path_segment_keyword(ident) &&\n-                                         ident.name != keywords::CrateRoot.name();\n+                let is_special = |ident: Ident| ident.is_path_segment_keyword() &&\n+                                                ident.name != keywords::CrateRoot.name();\n                 if !self_path.is_empty() && !is_special(self_path[0]) &&\n                    !(self_path.len() > 1 && is_special(self_path[1])) {\n                     self_path[0].name = keywords::SelfValue.name();"}, {"sha": "1817726d6a110bfc5367bd1bbd89e07dcf9cd72d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -107,8 +107,7 @@ impl Path {\n     // or starts with something like `self`/`super`/`$crate`/etc.\n     pub fn make_root(&self) -> Option<PathSegment> {\n         if let Some(ident) = self.segments.get(0).map(|seg| seg.ident) {\n-            if ::parse::token::is_path_segment_keyword(ident) &&\n-               ident.name != keywords::Crate.name() {\n+            if ident.is_path_segment_keyword() && ident.name != keywords::Crate.name() {\n                 return None;\n             }\n         }"}, {"sha": "f7d4227977c834ebd7defa449137df221d689f01", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -14,9 +14,10 @@ use ast::{self, Attribute, Name, PatKind, MetaItem};\n use attr::HasAttrs;\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n+use edition::Edition;\n use errors::{DiagnosticBuilder, DiagnosticId};\n use ext::expand::{self, Expansion, Invocation};\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use fold::{self, Folder};\n use parse::{self, parser, DirectoryOwnership};\n use parse::token;\n@@ -586,13 +587,13 @@ pub enum SyntaxExtension {\n     MultiModifier(Box<MultiItemModifier + sync::Sync + sync::Send>),\n \n     /// A function-like procedural macro. TokenStream -> TokenStream.\n-    ProcMacro(Box<ProcMacro + sync::Sync + sync::Send>),\n+    ProcMacro(Box<ProcMacro + sync::Sync + sync::Send>, Edition),\n \n     /// An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream.\n     /// The first TokenSteam is the attribute, the second is the annotated item.\n     /// Allows modification of the input items and adding new items, similar to\n     /// MultiModifier, but uses TokenStreams, rather than AST nodes.\n-    AttrProcMacro(Box<AttrProcMacro + sync::Sync + sync::Send>),\n+    AttrProcMacro(Box<AttrProcMacro + sync::Sync + sync::Send>, Edition),\n \n     /// A normal, function-like syntax extension.\n     ///\n@@ -608,6 +609,8 @@ pub enum SyntaxExtension {\n         allow_internal_unsafe: bool,\n         /// The macro's feature name if it is unstable, and the stability feature\n         unstable_feature: Option<(Symbol, u32)>,\n+        /// Edition of the crate in which the macro is defined\n+        edition: Edition,\n     },\n \n     /// A function-like syntax extension that has an extra ident before\n@@ -619,17 +622,16 @@ pub enum SyntaxExtension {\n     /// The input is the annotated item.\n     /// Allows generating code to implement a Trait for a given struct\n     /// or enum item.\n-    ProcMacroDerive(Box<MultiItemModifier +\n-                        sync::Sync +\n-                        sync::Send>, Vec<Symbol> /* inert attribute names */),\n+    ProcMacroDerive(Box<MultiItemModifier + sync::Sync + sync::Send>,\n+                    Vec<Symbol> /* inert attribute names */, Edition),\n \n     /// An attribute-like procedural macro that derives a builtin trait.\n     BuiltinDerive(BuiltinDeriveFn),\n \n     /// A declarative macro, e.g. `macro m() {}`.\n     ///\n     /// The second element is the definition site span.\n-    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>),\n+    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>, Edition),\n }\n \n impl SyntaxExtension {\n@@ -660,6 +662,21 @@ impl SyntaxExtension {\n             _ => false,\n         }\n     }\n+\n+    pub fn edition(&self) -> Edition {\n+        match *self {\n+            SyntaxExtension::NormalTT { edition, .. } |\n+            SyntaxExtension::DeclMacro(.., edition) |\n+            SyntaxExtension::ProcMacro(.., edition) |\n+            SyntaxExtension::AttrProcMacro(.., edition) |\n+            SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n+            // Unstable legacy stuff\n+            SyntaxExtension::IdentTT(..) |\n+            SyntaxExtension::MultiDecorator(..) |\n+            SyntaxExtension::MultiModifier(..) |\n+            SyntaxExtension::BuiltinDerive(..) => hygiene::default_edition(),\n+        }\n+    }\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "0b6a7e1c4f49dc2d6b13f27dab4d601226cf59ab", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -10,7 +10,7 @@\n \n use attr::HasAttrs;\n use ast;\n-use codemap::{ExpnInfo, NameAndSpan, ExpnFormat};\n+use codemap::{hygiene, ExpnInfo, NameAndSpan, ExpnFormat};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use parse::parser::PathStyle;\n@@ -65,6 +65,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         },\n     });\n "}, {"sha": "ee96963362b6c419f21ef0010ecc5f62e8072d8f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -16,7 +16,7 @@ use config::{is_test_or_bench, StripUnconfigured};\n use errors::FatalError;\n use ext::base::*;\n use ext::derive::{add_derived_markers, collect_derives};\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use ext::placeholders::{placeholder, PlaceholderExpander};\n use feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use fold;\n@@ -502,6 +502,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n+                edition: ext.edition(),\n             }\n         });\n \n@@ -520,7 +521,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 items.push(item);\n                 Some(kind.expect_from_annotatables(items))\n             }\n-            AttrProcMacro(ref mac) => {\n+            AttrProcMacro(ref mac, ..) => {\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n@@ -609,7 +610,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                           allow_internal_unstable,\n                                           allow_internal_unsafe,\n                                           // can't infer this type\n-                                          unstable_feature: Option<(Symbol, u32)>| {\n+                                          unstable_feature: Option<(Symbol, u32)>,\n+                                          edition| {\n \n             // feature-gate the macro invocation\n             if let Some((feature, issue)) = unstable_feature {\n@@ -642,15 +644,17 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     span: def_site_span,\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n+                    edition,\n                 },\n             });\n             Ok(())\n         };\n \n         let opt_expanded = match *ext {\n-            DeclMacro(ref expand, def_span) => {\n+            DeclMacro(ref expand, def_span, edition) => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_span.map(|(_, s)| s),\n-                                                                    false, false, None) {\n+                                                                    false, false, None,\n+                                                                    edition) {\n                     dummy_span\n                 } else {\n                     kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n@@ -663,11 +667,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 allow_internal_unstable,\n                 allow_internal_unsafe,\n                 unstable_feature,\n+                edition,\n             } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n                                                                     allow_internal_unstable,\n                                                                     allow_internal_unsafe,\n-                                                                    unstable_feature) {\n+                                                                    unstable_feature,\n+                                                                    edition) {\n                     dummy_span\n                 } else {\n                     kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n@@ -688,6 +694,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             span: tt_span,\n                             allow_internal_unstable,\n                             allow_internal_unsafe: false,\n+                            edition: hygiene::default_edition(),\n                         }\n                     });\n \n@@ -709,7 +716,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 kind.dummy(span)\n             }\n \n-            ProcMacro(ref expandfun) => {\n+            ProcMacro(ref expandfun, edition) => {\n                 if ident.name != keywords::Invalid.name() {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -728,6 +735,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             // FIXME probably want to follow macro_rules macros here.\n                             allow_internal_unstable: false,\n                             allow_internal_unsafe: false,\n+                            edition,\n                         },\n                     });\n \n@@ -802,11 +810,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n+                edition: ext.edition(),\n             }\n         };\n \n         match *ext {\n-            ProcMacroDerive(ref ext, _) => {\n+            ProcMacroDerive(ref ext, ..) => {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this"}, {"sha": "d1a7e7aac266ef8291a2ec7433cabcefe9078939", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -10,6 +10,7 @@\n \n use {ast, attr};\n use syntax_pos::{Span, DUMMY_SP};\n+use edition::Edition;\n use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::expand::{Expansion, ExpansionKind};\n@@ -183,7 +184,8 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n // Holy self-referential!\n \n /// Converts a `macro_rules!` invocation into a syntax extension.\n-pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item) -> SyntaxExtension {\n+pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition: Edition)\n+               -> SyntaxExtension {\n     let lhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"lhs\"));\n     let rhs_nm = ast::Ident::with_empty_ctxt(Symbol::gensym(\"rhs\"));\n \n@@ -298,10 +300,11 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item) -> Syntax\n             def_info: Some((def.id, def.span)),\n             allow_internal_unstable,\n             allow_internal_unsafe,\n-            unstable_feature\n+            unstable_feature,\n+            edition,\n         }\n     } else {\n-        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)))\n+        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)), edition)\n     }\n }\n "}, {"sha": "e98170345696a141a9352d6ae170eec0303edf08", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -22,7 +22,6 @@\n #![feature(unicode_internals)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n-#![feature(non_exhaustive)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n #![feature(str_escape)]\n@@ -142,14 +141,14 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n-pub mod edition;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;\n pub mod ptr;\n pub mod show_span;\n pub mod std_inject;\n pub mod str;\n+pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n pub mod test;\n pub mod tokenstream;"}, {"sha": "bbece1ee5e3d4474e286737cb53d74b5bbb73a6a", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -1128,7 +1128,7 @@ impl<'a> StringReader<'a> {\n                 return Ok(self.with_str_from(start, |string| {\n                     // FIXME: perform NFKC normalization here. (Issue #2253)\n                     let ident = self.mk_ident(string);\n-                    if is_raw_ident && (token::is_path_segment_keyword(ident) ||\n+                    if is_raw_ident && (ident.is_path_segment_keyword() ||\n                                         ident.name == keywords::Underscore.name()) {\n                         self.fatal_span_(raw_start, self.pos,\n                             &format!(\"`r#{}` is not currently supported.\", ident.name)"}, {"sha": "5575614a4d482b8b39d66005cd6a1beb5e06f8d3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 44, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -138,44 +138,6 @@ fn ident_can_begin_type(ident: ast::Ident, is_raw: bool) -> bool {\n     ].contains(&ident.name)\n }\n \n-pub fn is_path_segment_keyword(id: ast::Ident) -> bool {\n-    id.name == keywords::Super.name() ||\n-    id.name == keywords::SelfValue.name() ||\n-    id.name == keywords::SelfType.name() ||\n-    id.name == keywords::Extern.name() ||\n-    id.name == keywords::Crate.name() ||\n-    id.name == keywords::CrateRoot.name() ||\n-    id.name == keywords::DollarCrate.name()\n-}\n-\n-// We see this identifier in a normal identifier position, like variable name or a type.\n-// How was it written originally? Did it use the raw form? Let's try to guess.\n-pub fn is_raw_guess(ident: ast::Ident) -> bool {\n-    ident.name != keywords::Invalid.name() &&\n-    is_reserved_ident(ident) && !is_path_segment_keyword(ident)\n-}\n-\n-// Returns true for reserved identifiers used internally for elided lifetimes,\n-// unnamed method parameters, crate root module, error recovery etc.\n-pub fn is_special_ident(id: ast::Ident) -> bool {\n-    id.name <= keywords::Underscore.name()\n-}\n-\n-/// Returns `true` if the token is a keyword used in the language.\n-pub fn is_used_keyword(id: ast::Ident) -> bool {\n-    id.name >= keywords::As.name() && id.name <= keywords::While.name()\n-}\n-\n-/// Returns `true` if the token is a keyword reserved for possible future use.\n-pub fn is_unused_keyword(id: ast::Ident) -> bool {\n-    id.name >= keywords::Abstract.name() && id.name <= keywords::Yield.name()\n-}\n-\n-/// Returns `true` if the token is either a special identifier or a keyword.\n-pub fn is_reserved_ident(id: ast::Ident) -> bool {\n-    is_special_ident(id) || is_used_keyword(id) || is_unused_keyword(id)\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug)]\n pub enum Token {\n     /* Expression-operator symbols. */\n@@ -251,7 +213,7 @@ impl Token {\n \n     /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary.\n     pub fn from_ast_ident(ident: ast::Ident) -> Token {\n-        Ident(ident, is_raw_guess(ident))\n+        Ident(ident, ident.is_raw_guess())\n     }\n \n     /// Returns `true` if the token starts with '>'.\n@@ -431,7 +393,7 @@ impl Token {\n \n     pub fn is_path_segment_keyword(&self) -> bool {\n         match self.ident() {\n-            Some((id, false)) => is_path_segment_keyword(id),\n+            Some((id, false)) => id.is_path_segment_keyword(),\n             _ => false,\n         }\n     }\n@@ -440,31 +402,31 @@ impl Token {\n     // unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n         match self.ident() {\n-            Some((id, false)) => is_special_ident(id),\n+            Some((id, false)) => id.is_special(),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(&self) -> bool {\n         match self.ident() {\n-            Some((id, false)) => is_used_keyword(id),\n+            Some((id, false)) => id.is_used_keyword(),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is a keyword reserved for possible future use.\n     pub fn is_unused_keyword(&self) -> bool {\n         match self.ident() {\n-            Some((id, false)) => is_unused_keyword(id),\n+            Some((id, false)) => id.is_unused_keyword(),\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n         match self.ident() {\n-            Some((id, false)) => is_reserved_ident(id),\n+            Some((id, false)) => id.is_reserved(),\n             _ => false,\n         }\n     }"}, {"sha": "17f83a09c77b780cff60c42bf48c9d3cd3e21947", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -2374,7 +2374,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_ident(&mut self, ident: ast::Ident) -> io::Result<()> {\n-        if token::is_raw_guess(ident) {\n+        if ident.is_raw_guess() {\n             self.s.word(&format!(\"r#{}\", ident))?;\n         } else {\n             self.s.word(&ident.name.as_str())?;"}, {"sha": "e9cd7adb9c166fa25f955bdf81ba11c7d3519f70", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -14,7 +14,7 @@ use std::cell::Cell;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n-use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, respan};\n+use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, hygiene, respan};\n use ptr::P;\n use tokenstream::TokenStream;\n \n@@ -30,6 +30,7 @@ fn ignored_span(sp: Span) -> Span {\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "1dfd48a24c3bfbb4009052492346d2220ec4e73d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -29,7 +29,7 @@ use entry::{self, EntryPointType};\n use ext::base::{ExtCtxt, Resolver};\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use fold::Folder;\n use feature_gate::Features;\n use util::move_map::MoveMap;\n@@ -300,6 +300,7 @@ fn generate_test_harness(sess: &ParseSess,\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n "}, {"sha": "15fcfac13adf2b02563e781e635d850c3eeda2ac", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -54,6 +54,7 @@ pub mod proc_macro_impl;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension};\n+use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n \n pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n@@ -74,6 +75,7 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                         allow_internal_unstable: false,\n                         allow_internal_unsafe: false,\n                         unstable_feature: None,\n+                        edition: hygiene::default_edition(),\n                     });\n         )* }\n     }\n@@ -128,7 +130,8 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n                 def_info: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n-                unstable_feature: None\n+                unstable_feature: None,\n+                edition: hygiene::default_edition(),\n             });\n \n     for (name, ext) in user_exts {"}, {"sha": "3593165023a54611cde685e540ce2039e87e267f", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -14,7 +14,7 @@ use errors;\n \n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr;\n-use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, respan};\n+use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, hygiene, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n@@ -369,6 +369,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n     let span = DUMMY_SP.apply_mark(mark);"}, {"sha": "18446c109964d8a2c3a5ee5560355e0d143da429", "filename": "src/libsyntax_pos/edition.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -12,7 +12,7 @@ use std::fmt;\n use std::str::FromStr;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n #[non_exhaustive]\n pub enum Edition {\n     // editions must be kept in order, newest to oldest", "previous_filename": "src/libsyntax/edition.rs"}, {"sha": "1365ac396ffdf5f4e21bf89e535556ad8a730a52", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -17,6 +17,7 @@\n \n use GLOBALS;\n use Span;\n+use edition::Edition;\n use symbol::{Ident, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -151,6 +152,7 @@ pub struct HygieneData {\n     syntax_contexts: Vec<SyntaxContextData>,\n     markings: HashMap<(SyntaxContext, Mark), SyntaxContext>,\n     gensym_to_ctxt: HashMap<Symbol, Span>,\n+    default_edition: Edition,\n }\n \n impl HygieneData {\n@@ -168,6 +170,7 @@ impl HygieneData {\n             }],\n             markings: HashMap::new(),\n             gensym_to_ctxt: HashMap::new(),\n+            default_edition: Edition::Edition2015,\n         }\n     }\n \n@@ -176,6 +179,14 @@ impl HygieneData {\n     }\n }\n \n+pub fn default_edition() -> Edition {\n+    HygieneData::with(|data| data.default_edition)\n+}\n+\n+pub fn set_default_edition(edition: Edition) {\n+    HygieneData::with(|data| data.default_edition = edition);\n+}\n+\n pub fn clear_markings() {\n     HygieneData::with(|data| data.markings = HashMap::new());\n }\n@@ -443,6 +454,8 @@ pub struct NameAndSpan {\n     /// Whether the macro is allowed to use `unsafe` internally\n     /// even if the user crate has `#![forbid(unsafe_code)]`.\n     pub allow_internal_unsafe: bool,\n+    /// Edition of the crate in which the macro is defined.\n+    pub edition: Edition,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None."}, {"sha": "17163576901eb86bd21a8e30a75bd45954a83348", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -20,6 +20,7 @@\n \n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n #![feature(specialization)]\n@@ -48,6 +49,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n extern crate unicode_width;\n \n+pub mod edition;\n pub mod hygiene;\n pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, NameAndSpan, CompilerDesugaringKind};\n \n@@ -298,6 +300,12 @@ impl Span {\n         self.ctxt().outer().expn_info().map(|i| i.call_site)\n     }\n \n+    /// Edition of the crate from which this span came.\n+    pub fn edition(self) -> edition::Edition {\n+        self.ctxt().outer().expn_info().map_or_else(|| hygiene::default_edition(),\n+                                                    |einfo| einfo.callee.edition)\n+    }\n+\n     /// Return the source callee.\n     ///\n     /// Returns None if the supplied span has no expansion trace,"}, {"sha": "a08f9b2e54a7c63065584879539da96a273cf8fe", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -12,6 +12,7 @@\n //! allows bidirectional lookup; i.e. given a value, one can easily find the\n //! type, and vice versa.\n \n+use edition::Edition;\n use hygiene::SyntaxContext;\n use {Span, DUMMY_SP, GLOBALS};\n \n@@ -318,7 +319,7 @@ macro_rules! declare_keywords {(\n // NB: leaving holes in the ident table is bad! a different ident will get\n // interned with the id from the hole, but it will be between the min and max\n // of the reserved words, and thus tagged as \"reserved\".\n-// After modifying this list adjust `is_special_ident`, `is_used_keyword`/`is_unused_keyword`,\n+// After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,\n // this should be rarely necessary though if the keywords are kept in alphabetic order.\n declare_keywords! {\n     // Special reserved identifiers used internally for elided lifetimes,\n@@ -383,16 +384,68 @@ declare_keywords! {\n     (53, Virtual,            \"virtual\")\n     (54, Yield,              \"yield\")\n \n+    // Edition-specific keywords reserved for future use.\n+    (55, Async,              \"async\") // >= 2018 Edition Only\n+\n     // Special lifetime names\n-    (55, UnderscoreLifetime, \"'_\")\n-    (56, StaticLifetime,     \"'static\")\n+    (56, UnderscoreLifetime, \"'_\")\n+    (57, StaticLifetime,     \"'static\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (57, Auto,               \"auto\")\n-    (58, Catch,              \"catch\")\n-    (59, Default,            \"default\")\n-    (60, Dyn,                \"dyn\")\n-    (61, Union,              \"union\")\n+    (58, Auto,               \"auto\")\n+    (59, Catch,              \"catch\")\n+    (60, Default,            \"default\")\n+    (61, Dyn,                \"dyn\")\n+    (62, Union,              \"union\")\n+}\n+\n+impl Symbol {\n+    fn is_unused_keyword_2018(self) -> bool {\n+        self == keywords::Async.name()\n+    }\n+}\n+\n+impl Ident {\n+    // Returns true for reserved identifiers used internally for elided lifetimes,\n+    // unnamed method parameters, crate root module, error recovery etc.\n+    pub fn is_special(self) -> bool {\n+        self.name <= keywords::Underscore.name()\n+    }\n+\n+    /// Returns `true` if the token is a keyword used in the language.\n+    pub fn is_used_keyword(self) -> bool {\n+        self.name >= keywords::As.name() && self.name <= keywords::While.name()\n+    }\n+\n+    /// Returns `true` if the token is a keyword reserved for possible future use.\n+    pub fn is_unused_keyword(self) -> bool {\n+        // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n+        self.name >= keywords::Abstract.name() && self.name <= keywords::Yield.name() ||\n+        self.name.is_unused_keyword_2018() && self.span.edition() == Edition::Edition2018\n+    }\n+\n+    /// Returns `true` if the token is either a special identifier or a keyword.\n+    pub fn is_reserved(self) -> bool {\n+        self.is_special() || self.is_used_keyword() || self.is_unused_keyword()\n+    }\n+\n+    /// A keyword or reserved identifier that can be used as a path segment.\n+    pub fn is_path_segment_keyword(self) -> bool {\n+        self.name == keywords::Super.name() ||\n+        self.name == keywords::SelfValue.name() ||\n+        self.name == keywords::SelfType.name() ||\n+        self.name == keywords::Extern.name() ||\n+        self.name == keywords::Crate.name() ||\n+        self.name == keywords::CrateRoot.name() ||\n+        self.name == keywords::DollarCrate.name()\n+    }\n+\n+    // We see this identifier in a normal identifier position, like variable name or a type.\n+    // How was it written originally? Did it use the raw form? Let's try to guess.\n+    pub fn is_raw_guess(self) -> bool {\n+        self.name != keywords::Invalid.name() &&\n+        self.is_reserved() && !self.is_path_segment_keyword()\n+    }\n }\n \n // If an interner exists, return it. Otherwise, prepare a fresh one."}, {"sha": "d7ede763838687f79a620e7f4982329364bce61c", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -20,6 +20,7 @@ extern crate rustc_plugin;\n \n use std::borrow::ToOwned;\n use syntax::ast;\n+use syntax::ext::hygiene;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n use syntax::print::pprust;\n@@ -54,5 +55,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n             unstable_feature: None,\n+            edition: hygiene::default_edition(),\n         });\n }"}, {"sha": "9127c8e350a8cc2bb2e98d3e909fa1d89ce6cdd8", "filename": "src/test/run-pass/auxiliary/edition-kw-macro-2015.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async_raw {\n+    () => (pub fn r#async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async_raw {\n+    (r#async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! passes_ident {\n+    ($i: ident) => ($i)\n+}"}, {"sha": "4fef77d67ea71de1d1371cf271773540e8453a26", "filename": "src/test/run-pass/auxiliary/edition-kw-macro-2018.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async_raw {\n+    () => (pub fn r#async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async_raw {\n+    (r#async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! passes_ident {\n+    ($i: ident) => ($i)\n+}"}, {"sha": "41480bb978ec2f9d30bfde1700c2dae192960094", "filename": "src/test/run-pass/edition-keywords-2015-2015.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2015.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2015.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+pub fn check_async() {\n+    let mut async = 1; // OK\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    // r#async = consumes_async!(r#async); // ERROR, not a match\n+    // r#async = consumes_async_raw!(async); // ERROR, not a match\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} // OK\n+    if passes_ident!(r#async) == 1 {} // OK\n+    one_async::async(); // OK\n+    one_async::r#async(); // OK\n+    two_async::async(); // OK\n+    two_async::r#async(); // OK\n+}\n+\n+mod one_async {\n+    produces_async! {} // OK\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "78835d510639f06481a65d409e515a09a399d13c", "filename": "src/test/run-pass/edition-keywords-2015-2018.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2015-2018.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+pub fn check_async() {\n+    let mut async = 1; // OK\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    // r#async = consumes_async!(r#async); // ERROR, not a match\n+    // r#async = consumes_async_raw!(async); // ERROR, not a match\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} // OK\n+    if passes_ident!(r#async) == 1 {} // OK\n+    // one_async::async(); // ERROR, unresolved name\n+    // one_async::r#async(); // ERROR, unresolved name\n+    two_async::async(); // OK\n+    two_async::r#async(); // OK\n+}\n+\n+mod one_async {\n+    // produces_async! {} // ERROR, reserved\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "46d5f222cbb3179ec566611f1ef6399df79f9186", "filename": "src/test/run-pass/edition-keywords-2018-2015.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2015.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2015.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+pub fn check_async() {\n+    // let mut async = 1; // ERROR, reserved\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    // r#async = consumes_async!(r#async); // ERROR, not a match\n+    // r#async = consumes_async_raw!(async); // ERROR, not a match\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    // if passes_ident!(async) == 1 {} // ERROR, reserved\n+    if passes_ident!(r#async) == 1 {} // OK\n+    // one_async::async(); // ERROR, reserved\n+    one_async::r#async(); // OK\n+    // two_async::async(); // ERROR, reserved\n+    two_async::r#async(); // OK\n+}\n+\n+mod one_async {\n+    produces_async! {} // OK\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "06482988937b667e88feed720588ac0d36cfcb09", "filename": "src/test/run-pass/edition-keywords-2018-2018.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fedition-keywords-2018-2018.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+pub fn check_async() {\n+    // let mut async = 1; // ERROR, reserved\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    // r#async = consumes_async!(r#async); // ERROR, not a match\n+    // r#async = consumes_async_raw!(async); // ERROR, not a match\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    // if passes_ident!(async) == 1 {} // ERROR, reserved\n+    if passes_ident!(r#async) == 1 {} // OK\n+    // one_async::async(); // ERROR, reserved\n+    // one_async::r#async(); // ERROR, unresolved name\n+    // two_async::async(); // ERROR, reserved\n+    two_async::r#async(); // OK\n+}\n+\n+mod one_async {\n+    // produces_async! {} // ERROR, reserved\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "9127c8e350a8cc2bb2e98d3e909fa1d89ce6cdd8", "filename": "src/test/ui/auxiliary/edition-kw-macro-2015.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async_raw {\n+    () => (pub fn r#async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async_raw {\n+    (r#async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! passes_ident {\n+    ($i: ident) => ($i)\n+}"}, {"sha": "4fef77d67ea71de1d1371cf271773540e8453a26", "filename": "src/test/ui/auxiliary/edition-kw-macro-2018.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_export]\n+macro_rules! produces_async {\n+    () => (pub fn async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! produces_async_raw {\n+    () => (pub fn r#async() {})\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async {\n+    (async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! consumes_async_raw {\n+    (r#async) => (1)\n+}\n+\n+#[macro_export]\n+macro_rules! passes_ident {\n+    ($i: ident) => ($i)\n+}"}, {"sha": "b8a1994a10575fff29a8491788aacfda3e43669a", "filename": "src/test/ui/edition-keywords-2015-2015-expansion.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-expansion.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2015.rs\n+// compile-pass\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+mod one_async {\n+    produces_async! {} // OK\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "1fb91ca006cc7ba2a3e6a910415e08d6ecedf53a", "filename": "src/test/ui/edition-keywords-2015-2015-parsing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2015.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+pub fn check_async() {\n+    let mut async = 1; // OK\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+    r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} // OK\n+    if passes_ident!(r#async) == 1 {} // OK\n+    module::async(); // OK\n+    module::r#async(); // OK\n+}"}, {"sha": "5b6fd3e1c9c434c8fa24c4a60348fc482fb991ab", "filename": "src/test/ui/edition-keywords-2015-2015-parsing.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2015-parsing.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,14 @@\n+error: no rules expected the token `r#async`\n+  --> $DIR/edition-keywords-2015-2015-parsing.rs:24:31\n+   |\n+LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+   |                               ^^^^^^^\n+\n+error: no rules expected the token `async`\n+  --> $DIR/edition-keywords-2015-2015-parsing.rs:25:35\n+   |\n+LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+   |                                   ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bc14c104c49fccbd2b014c865ad3e19afbd4856c", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+mod one_async {\n+    produces_async! {} // ERROR expected identifier, found reserved keyword\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}"}, {"sha": "13c4ee82537582816fb1bdf231a32d2efb3ad185", "filename": "src/test/ui/edition-keywords-2015-2018-expansion.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-expansion.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2015-2018-expansion.rs:20:5\n+   |\n+LL |     produces_async! {} // ERROR expected identifier, found reserved keyword\n+   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "0b680eb16c7f458795e571f0ef3ca14bd96dbf3d", "filename": "src/test/ui/edition-keywords-2015-2018-parsing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2015\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+pub fn check_async() {\n+    let mut async = 1; // OK\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+    r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} // OK\n+    if passes_ident!(r#async) == 1 {} // OK\n+    module::async(); // OK\n+    module::r#async(); // OK\n+}"}, {"sha": "60cfbce3ff0e49bdd4e85a3143499e44f77edc06", "filename": "src/test/ui/edition-keywords-2015-2018-parsing.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2015-2018-parsing.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,14 @@\n+error: no rules expected the token `r#async`\n+  --> $DIR/edition-keywords-2015-2018-parsing.rs:24:31\n+   |\n+LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+   |                               ^^^^^^^\n+\n+error: no rules expected the token `async`\n+  --> $DIR/edition-keywords-2015-2018-parsing.rs:25:35\n+   |\n+LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+   |                                   ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6f85f427eb0543dda421dfa48b36d2c635a9503e", "filename": "src/test/ui/edition-keywords-2018-2015-expansion.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-expansion.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2015.rs\n+// compile-pass\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+mod one_async {\n+    produces_async! {} // OK\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "29c5ea41f1fac2f51930980c1f92a6917ade560a", "filename": "src/test/ui/edition-keywords-2018-2015-parsing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2015.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2015;\n+\n+pub fn check_async() {\n+    let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+    r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} //~ ERROR expected expression, found reserved keyword `async`\n+    if passes_ident!(r#async) == 1 {} // OK\n+    module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+    module::r#async(); // OK\n+}"}, {"sha": "0b3ca57bfab151cfffa55ac53b07a2c5a75f6fd2", "filename": "src/test/ui/edition-keywords-2018-2015-parsing.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2015-parsing.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:20:13\n+   |\n+LL |     let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+   |             ^^^^^ expected identifier, found reserved keyword\n+\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:30:13\n+   |\n+LL |     module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+   |             ^^^^^ expected identifier, found reserved keyword\n+\n+error: no rules expected the token `r#async`\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:24:31\n+   |\n+LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+   |                               ^^^^^^^\n+\n+error: no rules expected the token `async`\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:25:35\n+   |\n+LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+   |                                   ^^^^^\n+\n+error: expected expression, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:28:22\n+   |\n+LL |     if passes_ident!(async) == 1 {} //~ ERROR expected expression, found reserved keyword `async`\n+   |                      ^^^^^ expected expression\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ef7f63e225ce159aa3d86f187a6c7cd23ff7238e", "filename": "src/test/ui/edition-keywords-2018-2018-expansion.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+mod one_async {\n+    produces_async! {} // ERROR expected identifier, found reserved keyword `async`\n+}\n+mod two_async {\n+    produces_async_raw! {} // OK\n+}"}, {"sha": "cd51030fd28e1b31b0faf15e0db3088573f165a7", "filename": "src/test/ui/edition-keywords-2018-2018-expansion.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-expansion.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2018-expansion.rs:20:5\n+   |\n+LL |     produces_async! {} // ERROR expected identifier, found reserved keyword `async`\n+   |     ^^^^^^^^^^^^^^^^^^ expected identifier, found reserved keyword\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "a94808eb2246cb97236a8d64fdeafdce2a1de0c2", "filename": "src/test/ui/edition-keywords-2018-2018-parsing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.rs?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition=2018\n+// aux-build:edition-kw-macro-2018.rs\n+\n+#![feature(raw_identifiers)]\n+\n+#[macro_use]\n+extern crate edition_kw_macro_2018;\n+\n+pub fn check_async() {\n+    let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+    let mut r#async = 1; // OK\n+\n+    r#async = consumes_async!(async); // OK\n+    r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+    r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+    r#async = consumes_async_raw!(r#async); // OK\n+\n+    if passes_ident!(async) == 1 {} //~ ERROR expected expression, found reserved keyword `async`\n+    if passes_ident!(r#async) == 1 {} // OK\n+    module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+    module::r#async(); // OK\n+}"}, {"sha": "1b18d8a39beb44f8ea7cfb136fcd194ad25a03a0", "filename": "src/test/ui/edition-keywords-2018-2018-parsing.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df40e61382a2cba0be621fdabb9971ce3475e9a7/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-keywords-2018-2018-parsing.stderr?ref=df40e61382a2cba0be621fdabb9971ce3475e9a7", "patch": "@@ -0,0 +1,32 @@\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:20:13\n+   |\n+LL |     let mut async = 1; //~ ERROR expected identifier, found reserved keyword `async`\n+   |             ^^^^^ expected identifier, found reserved keyword\n+\n+error: expected identifier, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:30:13\n+   |\n+LL |     module::async(); //~ ERROR expected identifier, found reserved keyword `async`\n+   |             ^^^^^ expected identifier, found reserved keyword\n+\n+error: no rules expected the token `r#async`\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:24:31\n+   |\n+LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n+   |                               ^^^^^^^\n+\n+error: no rules expected the token `async`\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:25:35\n+   |\n+LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n+   |                                   ^^^^^\n+\n+error: expected expression, found reserved keyword `async`\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:28:22\n+   |\n+LL |     if passes_ident!(async) == 1 {} //~ ERROR expected expression, found reserved keyword `async`\n+   |                      ^^^^^ expected expression\n+\n+error: aborting due to 5 previous errors\n+"}]}