{"sha": "5655ae46a73723203edcf6a53c87560e0da7aaec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTVhZTQ2YTczNzIzMjAzZWRjZjZhNTNjODc1NjBlMGRhN2FhZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-03T03:18:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-03T03:18:37Z"}, "message": "auto merge of #5197 : pcwalton/rust/fn-types, r=pcwalton\n\nr? @catamorphism", "tree": {"sha": "a7c5ca21cf001ff1847c16016822a4965f8d7758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c5ca21cf001ff1847c16016822a4965f8d7758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5655ae46a73723203edcf6a53c87560e0da7aaec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5655ae46a73723203edcf6a53c87560e0da7aaec", "html_url": "https://github.com/rust-lang/rust/commit/5655ae46a73723203edcf6a53c87560e0da7aaec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5655ae46a73723203edcf6a53c87560e0da7aaec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826644e8cb37363a4e44561a498e79acfeb77b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/826644e8cb37363a4e44561a498e79acfeb77b6a", "html_url": "https://github.com/rust-lang/rust/commit/826644e8cb37363a4e44561a498e79acfeb77b6a"}, {"sha": "ccec510f392d5017a1da37c6b8327b5201dffd2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccec510f392d5017a1da37c6b8327b5201dffd2a", "html_url": "https://github.com/rust-lang/rust/commit/ccec510f392d5017a1da37c6b8327b5201dffd2a"}], "stats": {"total": 2429, "additions": 1098, "deletions": 1331}, "files": [{"sha": "b45a6a3dd450d6e5c025cd7d7cb38af178512822", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -1360,7 +1360,7 @@ Functions within foreign modules are declared in the same way as other Rust func\n with the exception that they may not have a body and are instead terminated by a semicolon.\n \n ~~~\n-# use libc::{c_char, FILE};\n+# use core::libc::{c_char, FILE};\n # #[nolink]\n \n extern mod c {"}, {"sha": "add3718ea7fb39613164e91b859d1ccbbd5303b4", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -14,7 +14,7 @@ should compile and run without any extra effort.\n \n ~~~~ {.xfail-test}\n extern mod std;\n-use libc::c_uint;\n+use core::libc::c_uint;\n \n extern mod crypto {\n     fn SHA1(src: *u8, sz: c_uint, out: *u8) -> *u8;\n@@ -217,7 +217,7 @@ microsecond-resolution timer.\n \n ~~~~\n extern mod std;\n-use libc::c_ulonglong;\n+use core::libc::c_ulonglong;\n \n struct timeval {\n     tv_sec: c_ulonglong,"}, {"sha": "52f63be984a312d182001683d528be3f972efea8", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -80,8 +80,8 @@ calling the `spawn` function with a closure argument. `spawn` executes the\n closure in the new task.\n \n ~~~~\n-# use io::println;\n-use task::spawn;\n+# use core::io::println;\n+use core::task::spawn;\n \n // Print something profound in a different task using a named function\n fn print_message() { println(\"I am running in a different task!\"); }\n@@ -110,8 +110,8 @@ execution. Like any closure, the function passed to `spawn` may capture\n an environment that it carries across tasks.\n \n ~~~\n-# use io::println;\n-# use task::spawn;\n+# use core::io::println;\n+# use core::task::spawn;\n # fn generate_task_number() -> int { 0 }\n // Generate some state locally\n let child_task_number = generate_task_number();\n@@ -127,8 +127,8 @@ in parallel. Thus, on a multicore machine, running the following code\n should interleave the output in vaguely random order.\n \n ~~~\n-# use io::print;\n-# use task::spawn;\n+# use core::io::print;\n+# use core::task::spawn;\n \n for int::range(0, 20) |child_task_number| {\n     do spawn {\n@@ -156,8 +156,8 @@ endpoint. Consider the following example of calculating two results\n concurrently:\n \n ~~~~\n-use task::spawn;\n-use comm::{stream, Port, Chan};\n+use core::task::spawn;\n+use core::comm::{stream, Port, Chan};\n \n let (port, chan): (Port<int>, Chan<int>) = stream();\n \n@@ -178,7 +178,7 @@ stream for sending and receiving integers (the left-hand side of the `let`,\n a tuple into its component parts).\n \n ~~~~\n-# use comm::{stream, Chan, Port};\n+# use core::comm::{stream, Chan, Port};\n let (port, chan): (Port<int>, Chan<int>) = stream();\n ~~~~\n \n@@ -187,9 +187,8 @@ which will wait to receive the data on the port. The next statement\n spawns the child task.\n \n ~~~~\n-# use task::{spawn};\n-# use task::spawn;\n-# use comm::{stream, Port, Chan};\n+# use core::task::spawn;\n+# use core::comm::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n # let (port, chan) = stream();\n do spawn || {\n@@ -209,7 +208,7 @@ computation, then waits for the child's result to arrive on the\n port:\n \n ~~~~\n-# use comm::{stream, Port, Chan};\n+# use core::comm::{stream, Port, Chan};\n # fn some_other_expensive_computation() {}\n # let (port, chan) = stream::<int>();\n # chan.send(0);\n@@ -224,8 +223,8 @@ example needed to compute multiple results across a number of tasks? The\n following program is ill-typed:\n \n ~~~ {.xfail-test}\n-# use task::{spawn};\n-# use comm::{stream, Port, Chan};\n+# use core::task::{spawn};\n+# use core::comm::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n let (port, chan) = stream();\n \n@@ -244,8 +243,8 @@ Instead we can use a `SharedChan`, a type that allows a single\n `Chan` to be shared by multiple senders.\n \n ~~~\n-# use task::spawn;\n-use comm::{stream, SharedChan};\n+# use core::task::spawn;\n+use core::comm::{stream, SharedChan};\n \n let (port, chan) = stream();\n let chan = SharedChan(chan);\n@@ -277,8 +276,8 @@ illustrate the point. For reference, written with multiple streams, it\n might look like the example below.\n \n ~~~\n-# use task::spawn;\n-# use comm::{stream, Port, Chan};\n+# use core::task::spawn;\n+# use core::comm::{stream, Port, Chan};\n \n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {\n@@ -309,7 +308,7 @@ All tasks are, by default, _linked_ to each other. That means that the fates\n of all tasks are intertwined: if one fails, so do all the others.\n \n ~~~\n-# use task::spawn;\n+# use core::task::spawn;\n # fn do_some_work() { loop { task::yield() } }\n # do task::try {\n // Create a child task that fails\n@@ -393,8 +392,8 @@ internally, with additional logic to wait for the child task to finish\n before returning. Hence:\n \n ~~~\n-# use comm::{stream, Chan, Port};\n-# use task::{spawn, try};\n+# use core::comm::{stream, Chan, Port};\n+# use core::task::{spawn, try};\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n let (receiver, sender): (Port<int>, Chan<int>) = stream();\n@@ -489,8 +488,8 @@ response itself is simply the stringified version of the received value,\n Here is the code for the parent task:\n \n ~~~~\n+# use core::task::spawn;\n # use std::comm::DuplexStream;\n-# use task::spawn;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {\n #     let mut value: uint;\n #     loop {"}, {"sha": "b425c595f82eb2e13518c3cfa52fd8cc98ed0881", "filename": "doc/tutorial.md", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -1313,7 +1313,7 @@ and [`core::str`]. Here are some examples.\n [`core::str`]: core/str.html\n \n ~~~\n-# use io::println;\n+# use core::io::println;\n # enum Crayon {\n #     Almond, AntiqueBrass, Apricot,\n #     Aquamarine, Asparagus, AtomicTangerine,\n@@ -1368,7 +1368,7 @@ Rust also supports _closures_, functions that can access variables in\n the enclosing scope.\n \n ~~~~\n-# use println = io::println;\n+# use println = core::io::println;\n fn call_closure_with_ten(b: fn(int)) { b(10); }\n \n let captured_var = 20;\n@@ -1525,7 +1525,7 @@ words, it is a function that takes an owned closure that takes no\n arguments.\n \n ~~~~\n-use task::spawn;\n+use core::task::spawn;\n \n do spawn() || {\n     debug!(\"I'm a task, whatever\");\n@@ -1537,7 +1537,7 @@ lists back to back. Since that is so unsightly, empty argument lists\n may be omitted from `do` expressions.\n \n ~~~~\n-# use task::spawn;\n+# use core::task::spawn;\n do spawn {\n    debug!(\"Kablam!\");\n }\n@@ -1568,8 +1568,8 @@ fn each(v: &[int], op: fn(v: &int) -> bool) {\n And using this function to iterate over a vector:\n \n ~~~~\n-# use each = vec::each;\n-# use println = io::println;\n+# use each = core::vec::each;\n+# use println = core::io::println;\n each([2, 4, 8, 5, 16], |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1585,8 +1585,8 @@ out of the loop, you just write `break`. To skip ahead\n to the next iteration, write `loop`.\n \n ~~~~\n-# use each = vec::each;\n-# use println = io::println;\n+# use each = core::vec::each;\n+# use println = core::io::println;\n for each([2, 4, 8, 5, 16]) |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1601,7 +1601,7 @@ normally allowed in closures, in a block that appears as the body of a\n the enclosing function, not just the loop body.\n \n ~~~~\n-# use each = vec::each;\n+# use each = core::vec::each;\n fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |x| {\n         if (*x == elt) { return true; }\n@@ -1616,7 +1616,7 @@ In these situations it can be convenient to lean on Rust's\n argument patterns to bind `x` to the actual value, not the pointer.\n \n ~~~~\n-# use each = vec::each;\n+# use each = core::vec::each;\n # fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |&x| {\n         if (x == elt) { return true; }\n@@ -1758,8 +1758,8 @@ Constructors are one common application for static methods, as in `new` above.\n To call a static method, you have to prefix it with the type name and a double colon:\n \n ~~~~\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n struct Circle { radius: float }\n impl Circle {\n     static fn new(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n@@ -2030,8 +2030,8 @@ The compiler will use type inference to decide which implementation to call.\n \n ~~~~\n trait Shape { static fn new(area: float) -> Self; }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n struct Circle { radius: float }\n struct Square { length: float }\n \n@@ -2189,8 +2189,8 @@ Now, we can implement `Circle` on a type only if we also implement `Shape`.\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n # fn square(x: float) -> float { x * x }\n struct CircleStruct { center: Point, radius: float }\n impl Circle for CircleStruct {\n@@ -2224,8 +2224,8 @@ Likewise, supertrait methods may also be called on trait objects.\n ~~~ {.xfail-test}\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n # struct Point { x: float, y: float }\n # struct CircleStruct { center: Point, radius: float }\n # impl Circle for CircleStruct { fn radius(&self) -> float { sqrt(self.area() / pi) } }\n@@ -2291,13 +2291,12 @@ be private. But this encapsulation is at the module level, not the\n struct level. Note that fields and methods are _public_ by default.\n \n ~~~\n-mod farm {\n-# use farm;\n+pub mod farm {\n # pub type Chicken = int;\n # type Cow = int;\n # enum Human = int;\n # impl Human { fn rest(&self) { } }\n-# pub fn make_me_a_farm() -> farm::Farm { farm::Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n+# pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], cows: ~[], farmer: Human(0) } }\n     pub struct Farm {\n         priv chickens: ~[Chicken],\n         priv cows: ~[Cow],"}, {"sha": "bccaf0ddf601834133e763ed8633ae8deff80640", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -22,18 +22,18 @@ extern mod std(vers = \"0.6\");\n \n use core::*;\n \n-mod procsrv;\n-mod util;\n-mod header;\n-mod runtest;\n-mod common;\n-mod errors;\n+pub mod procsrv;\n+pub mod util;\n+pub mod header;\n+pub mod runtest;\n+pub mod common;\n+pub mod errors;\n \n use std::getopts;\n use std::test;\n \n use core::{result, either};\n-use result::{Ok, Err};\n+use core::result::{Ok, Err};\n \n use common::config;\n use common::mode_run_pass;\n@@ -223,7 +223,7 @@ pub fn make_test_name(config: config, testfile: &Path) -> test::TestName {\n \n pub fn make_test_closure(config: config, testfile: &Path) -> test::TestFn {\n     let testfile = testfile.to_str();\n-    test::DynTestFn(fn~() { runtest::run(config, testfile) })\n+    test::DynTestFn(|| runtest::run(config, testfile))\n }\n \n // Local Variables:"}, {"sha": "39b70299ba5bdf0c457b4c1197634100b70db53d", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,9 +11,10 @@\n use core::prelude::*;\n \n use common::config;\n-use io;\n-use io::ReaderUtil;\n-use str;\n+\n+use core::io;\n+use core::io::ReaderUtil;\n+use core::str;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "64d1aae5ff5ef080da74b976fa813a4e12b8ad08", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,10 +12,11 @@ use core::prelude::*;\n \n use common;\n use common::config;\n-use io;\n-use io::ReaderUtil;\n-use os;\n-use str;\n+\n+use core::io::ReaderUtil;\n+use core::io;\n+use core::os;\n+use core::str;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out"}, {"sha": "8d8cdb3c719c521a87f8fedb1175fed368106a9d", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,17 +10,17 @@\n \n use core::prelude::*;\n \n-use io;\n-use io::{ReaderUtil, WriterUtil};\n-use libc;\n-use libc::{c_int, pid_t};\n-use os;\n-use run;\n-use run::spawn_process;\n-use pipes;\n-use str;\n-use task;\n-use vec;\n+use core::io::{ReaderUtil, WriterUtil};\n+use core::io;\n+use core::libc::{c_int, pid_t};\n+use core::libc;\n+use core::os;\n+use core::pipes;\n+use core::run::spawn_process;\n+use core::run;\n+use core::str;\n+use core::task;\n+use core::vec;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: ~str, prog: ~str) -> ~[(~str,~str)] {"}, {"sha": "b5def15fc509c40a8747f87118c1417d5b014fe7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,13 +10,6 @@\n \n use core::prelude::*;\n \n-use io;\n-use io::WriterUtil;\n-use os;\n-use str;\n-use uint;\n-use vec;\n-\n use common;\n use common::mode_run_pass;\n use common::mode_run_fail;\n@@ -31,6 +24,13 @@ use procsrv;\n use util;\n use util::logv;\n \n+use core::io::WriterUtil;\n+use core::io;\n+use core::os;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line."}, {"sha": "ad60e532f3cb0a697d5f495e3afa2781e3d9249a", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,13 +10,13 @@\n \n use core::prelude::*;\n \n-use io;\n-use os;\n-use os::getenv;\n-\n use common;\n use common::config;\n \n+use core::io;\n+use core::os::getenv;\n+use core::os;\n+\n pub fn make_new_path(path: ~str) -> ~str {\n \n     // Windows just uses PATH as the library search path, so we have to"}, {"sha": "93989f8e4a90136195c489372b72bb229bdb1064", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -52,7 +52,7 @@ def scrub(b):\n d.write(\"extern mod std;\\n\")\n d.write(\"extern mod run_pass_stage2;\\n\")\n d.write(\"use run_pass_stage2::*;\\n\")\n-d.write(\"use io::WriterUtil;\\n\");\n+d.write(\"use core::io::WriterUtil;\\n\");\n d.write(\"fn main() {\\n\");\n d.write(\"    let out = io::stdout();\\n\");\n i = 0"}, {"sha": "190421955734afff348fab0bf94ce434a7d105f7", "filename": "src/libcore/core.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -235,10 +235,10 @@ pub mod private {\n \n /* For internal use, not exported */\n \n-mod unicode;\n+pub mod unicode;\n #[path = \"num/cmath.rs\"]\n-mod cmath;\n-mod stackwalk;\n+pub mod cmath;\n+pub mod stackwalk;\n \n \n // A curious inner-module that's not exported that contains the binding"}, {"sha": "4f9b8ccf7576cea0cecb298401b0b76ea753dc0a", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -1139,7 +1139,7 @@ pub mod fsync {\n     pub struct Arg<t> {\n         val: t,\n         opt_level: Option<Level>,\n-        fsync_fn: fn@(f: t, Level) -> int,\n+        fsync_fn: @fn(f: t, Level) -> int,\n     }\n \n     // fsync file after executing blk\n@@ -1150,9 +1150,9 @@ pub mod fsync {\n         unsafe {\n             blk(Res(Arg {\n                 val: file.f, opt_level: opt_level,\n-                fsync_fn: fn@(file: *libc::FILE, l: Level) -> int {\n+                fsync_fn: |file, l| {\n                     unsafe {\n-                        return os::fsync_fd(libc::fileno(file), l) as int;\n+                        os::fsync_fd(libc::fileno(file), l) as int\n                     }\n                 }\n             }));\n@@ -1164,9 +1164,7 @@ pub mod fsync {\n                        blk: fn(v: Res<fd_t>)) {\n         blk(Res(Arg {\n             val: fd.fd, opt_level: opt_level,\n-            fsync_fn: fn@(fd: fd_t, l: Level) -> int {\n-                return os::fsync_fd(fd, l) as int;\n-            }\n+            fsync_fn: |fd, l| os::fsync_fd(fd, l) as int\n         }));\n     }\n \n@@ -1178,9 +1176,7 @@ pub mod fsync {\n                     blk: fn(v: Res<FSyncable>)) {\n         blk(Res(Arg {\n             val: o, opt_level: opt_level,\n-            fsync_fn: fn@(o: FSyncable, l: Level) -> int {\n-                return o.fsync(l);\n-            }\n+            fsync_fn: |o, l| o.fsync(l)\n         }));\n     }\n }"}, {"sha": "4d97df621da3fd0ad61810462ce0feeff6d6da4c", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! An interface for numeric types\n-use core::cmp::{Ord, Eq};\n+use cmp::{Ord, Eq};\n use ops::{Add, Div, Modulo, Mul, Neg, Sub};\n use option::{None, Option, Some};\n use char;"}, {"sha": "e4fc9528f23fc2e31077af2d901493831d8ec7bf", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -910,11 +910,10 @@ endpoint is passed to the new task.\n \n */\n pub fn spawn_service<T:Owned,Tb:Owned>(\n-    init: extern fn() -> (SendPacketBuffered<T, Tb>,\n-                          RecvPacketBuffered<T, Tb>),\n-    service: fn~(v: RecvPacketBuffered<T, Tb>))\n-    -> SendPacketBuffered<T, Tb>\n-{\n+            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n+                                  RecvPacketBuffered<T, Tb>),\n+            service: ~fn(v: RecvPacketBuffered<T, Tb>))\n+        -> SendPacketBuffered<T, Tb> {\n     let (client, server) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe\n@@ -932,11 +931,10 @@ receive state.\n \n */\n pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n-    init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n-                          SendPacketBuffered<T, Tb>),\n-    service: fn~(v: SendPacketBuffered<T, Tb>))\n-    -> RecvPacketBuffered<T, Tb>\n-{\n+        init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n+                              SendPacketBuffered<T, Tb>),\n+        service: ~fn(v: SendPacketBuffered<T, Tb>))\n+        -> RecvPacketBuffered<T, Tb> {\n     let (client, server) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe"}, {"sha": "06ae4eb17a534614bee1fcc667230cc76942239b", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -489,9 +489,9 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_closure_ptr(&self, ck: uint) -> bool {\n-        self.align_to::<fn@()>();\n+        self.align_to::<@fn()>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }\n-        self.bump_past::<fn@()>();\n+        self.bump_past::<@fn()>();\n         true\n     }\n }"}, {"sha": "185d8caae01fa365b23f196c85e141fa149f39ec", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -27,8 +27,8 @@ magic.\n */\n \n use prelude::*;\n-use rt;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n+use task::rt;\n use task;\n \n /**"}, {"sha": "0835d4400ede80b54d708277f59a6d20690ee1f2", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -191,7 +191,7 @@ pub struct TaskOpts {\n // FIXME (#3724): Replace the 'consumed' bit with move mode on self\n pub struct TaskBuilder {\n     opts: TaskOpts,\n-    gen_body: fn@(v: fn~()) -> fn~(),\n+    gen_body: @fn(v: ~fn()) -> ~fn(),\n     can_not_copy: Option<util::NonCopyable>,\n     mut consumed: bool,\n }\n@@ -357,7 +357,7 @@ pub impl TaskBuilder {\n      * generator by applying the task body which results from the\n      * existing body generator to the new body generator.\n      */\n-    fn add_wrapper(wrapper: fn@(v: fn~()) -> fn~()) -> TaskBuilder {\n+    fn add_wrapper(wrapper: @fn(v: ~fn()) -> ~fn()) -> TaskBuilder {\n         let prev_gen_body = self.gen_body;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n@@ -385,7 +385,7 @@ pub impl TaskBuilder {\n      * When spawning into a new scheduler, the number of threads requested\n      * must be greater than zero.\n      */\n-    fn spawn(f: fn~()) {\n+    fn spawn(f: ~fn()) {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         let x = self.consume();\n         let opts = TaskOpts {\n@@ -397,7 +397,7 @@ pub impl TaskBuilder {\n         spawn::spawn_raw(opts, (x.gen_body)(f));\n     }\n     /// Runs a task, while transfering ownership of one argument to the child.\n-    fn spawn_with<A:Owned>(arg: A, f: fn~(v: A)) {\n+    fn spawn_with<A:Owned>(arg: A, f: ~fn(v: A)) {\n         let arg = Cell(arg);\n         do self.spawn {\n             f(arg.take());\n@@ -417,7 +417,7 @@ pub impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    fn try<T:Owned>(f: fn~() -> T) -> Result<T,()> {\n+    fn try<T:Owned>(f: ~fn() -> T) -> Result<T,()> {\n         let (po, ch) = stream::<T>();\n         let mut result = None;\n \n@@ -458,7 +458,7 @@ pub fn default_task_opts() -> TaskOpts {\n \n /* Spawn convenience functions */\n \n-pub fn spawn(f: fn~()) {\n+pub fn spawn(f: ~fn()) {\n     /*!\n      * Creates and executes a new child task\n      *\n@@ -471,7 +471,7 @@ pub fn spawn(f: fn~()) {\n     task().spawn(f)\n }\n \n-pub fn spawn_unlinked(f: fn~()) {\n+pub fn spawn_unlinked(f: ~fn()) {\n     /*!\n      * Creates a child task unlinked from the current one. If either this\n      * task or the child task fails, the other will not be killed.\n@@ -480,7 +480,7 @@ pub fn spawn_unlinked(f: fn~()) {\n     task().unlinked().spawn(f)\n }\n \n-pub fn spawn_supervised(f: fn~()) {\n+pub fn spawn_supervised(f: ~fn()) {\n     /*!\n      * Creates a child task unlinked from the current one. If either this\n      * task or the child task fails, the other will not be killed.\n@@ -489,7 +489,7 @@ pub fn spawn_supervised(f: fn~()) {\n     task().supervised().spawn(f)\n }\n \n-pub fn spawn_with<A:Owned>(arg: A, f: fn~(v: A)) {\n+pub fn spawn_with<A:Owned>(arg: A, f: ~fn(v: A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n      * child.\n@@ -503,7 +503,7 @@ pub fn spawn_with<A:Owned>(arg: A, f: fn~(v: A)) {\n     task().spawn_with(arg, f)\n }\n \n-pub fn spawn_sched(mode: SchedMode, f: fn~()) {\n+pub fn spawn_sched(mode: SchedMode, f: ~fn()) {\n     /*!\n      * Creates a new task on a new or existing scheduler\n \n@@ -519,7 +519,7 @@ pub fn spawn_sched(mode: SchedMode, f: fn~()) {\n     task().sched_mode(mode).spawn(f)\n }\n \n-pub fn try<T:Owned>(f: fn~() -> T) -> Result<T,()> {\n+pub fn try<T:Owned>(f: ~fn() -> T) -> Result<T,()> {\n     /*!\n      * Execute a function in another task and return either the return value\n      * of the function or result::err.\n@@ -840,11 +840,12 @@ fn test_add_wrapper() {\n     let ch = Wrapper { f: Some(ch) };\n     let b1 = do b0.add_wrapper |body| {\n         let ch = Wrapper { f: Some(ch.f.swap_unwrap()) };\n-        fn~() {\n+        let result: ~fn() = || {\n             let ch = ch.f.swap_unwrap();\n             body();\n             ch.send(());\n-        }\n+        };\n+        result\n     };\n     do b1.spawn { }\n     po.recv();\n@@ -1015,7 +1016,7 @@ fn test_spawn_sched_blocking() {\n }\n \n #[cfg(test)]\n-fn avoid_copying_the_body(spawnfn: fn(v: fn~())) {\n+fn avoid_copying_the_body(spawnfn: &fn(v: ~fn())) {\n     let (p, ch) = stream::<uint>();\n \n     let x = ~1;\n@@ -1164,7 +1165,7 @@ fn test_child_doesnt_ref_parent() {\n     // (well, it would if the constant were 8000+ - I lowered it to be more\n     // valgrind-friendly. try this at home, instead..!)\n     const generations: uint = 16;\n-    fn child_no(x: uint) -> fn~() {\n+    fn child_no(x: uint) -> ~fn() {\n         return || {\n             if x < generations {\n                 task::spawn(child_no(x+1));"}, {"sha": "152e602eeee070902322b19d7961d60325358c8c", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -173,19 +173,19 @@ fn access_ancestors<U>(x: &unstable::Exclusive<AncestorNode>,\n //     taskgroups that forward_blk already ran on successfully (Note: bail_blk\n //     is NOT called on the block that forward_blk broke on!).\n // (3) As a bonus, coalesces away all 'dead' taskgroup nodes in the list.\n-// FIXME(#2190): Change Option<fn@(...)> to Option<fn&(...)>, to save on\n+// FIXME(#2190): Change Option<@fn(...)> to Option<&fn(...)>, to save on\n // allocations. Once that bug is fixed, changing the sigil should suffice.\n fn each_ancestor(list:        &mut AncestorList,\n-                     bail_opt:    Option<fn@(TaskGroupInner)>,\n-                     forward_blk: fn(TaskGroupInner) -> bool)\n-        -> bool {\n+                 bail_opt:    Option<@fn(TaskGroupInner)>,\n+                 forward_blk: fn(TaskGroupInner) -> bool)\n+              -> bool {\n     // \"Kickoff\" call - there was no last generation.\n     return !coalesce(list, bail_opt, forward_blk, uint::max_value);\n \n     // Recursively iterates, and coalesces afterwards if needed. Returns\n     // whether or not unwinding is needed (i.e., !successful iteration).\n     fn coalesce(list:            &mut AncestorList,\n-                bail_opt:        Option<fn@(TaskGroupInner)>,\n+                bail_opt:        Option<@fn(TaskGroupInner)>,\n                 forward_blk:     fn(TaskGroupInner) -> bool,\n                 last_generation: uint) -> bool {\n         // Need to swap the list out to use it, to appease borrowck.\n@@ -213,9 +213,10 @@ fn each_ancestor(list:        &mut AncestorList,\n     //     True if the supplied block did 'break', here or in any recursive\n     //     calls. If so, must call the unwinder on all previous nodes.\n     fn iterate(ancestors:       &AncestorList,\n-               bail_opt:        Option<fn@(TaskGroupInner)>,\n-               forward_blk:     fn(TaskGroupInner) -> bool,\n-               last_generation: uint) -> (Option<AncestorList>, bool) {\n+               bail_opt:        Option<@fn(TaskGroupInner)>,\n+               forward_blk:     &fn(TaskGroupInner) -> bool,\n+               last_generation: uint)\n+            -> (Option<AncestorList>, bool) {\n         // At each step of iteration, three booleans are at play which govern\n         // how the iteration should behave.\n         // 'nobe_is_dead' - Should the list should be coalesced at this point?\n@@ -532,7 +533,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n     }\n }\n \n-pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n+pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n     let (child_tg, ancestors, is_main) =\n         gen_child_taskgroup(opts.linked, opts.supervised);\n \n@@ -577,9 +578,10 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n     fn make_child_wrapper(child: *rust_task, child_arc: TaskGroupArc,\n                           ancestors: AncestorList, is_main: bool,\n                           notify_chan: Option<Chan<TaskResult>>,\n-                          f: fn~()) -> fn~() {\n+                          f: ~fn())\n+                       -> ~fn() {\n         let child_data = Cell((child_arc, ancestors));\n-        return fn~() {\n+        let result: ~fn() = || {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n             let mut (child_arc, ancestors) = child_data.take();\n             // Child task runs this code.\n@@ -613,6 +615,7 @@ pub fn spawn_raw(opts: TaskOpts, f: fn~()) {\n             // FIXME #4428: Crashy.\n             // unsafe { cleanup::annihilate(); }\n         };\n+        return result;\n \n         // Set up membership in taskgroup and descendantship in all ancestor\n         // groups. If any enlistment fails, Some task was already failing, so"}, {"sha": "c995d914a7a65136d2dbff0b59a974c8a3b84440", "filename": "src/libcore/unstable/finally.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -79,9 +79,8 @@ fn test_fail() {\n \n #[test]\n fn test_retval() {\n-    let i = do (fn&() -> int {\n-        10\n-    }).finally { };\n+    let closure: &fn() -> int = || 10;\n+    let i = do closure.finally { };\n     assert i == 10;\n }\n "}, {"sha": "bff5e9750ec103cc973b371b9a968f405455f242", "filename": "src/libcore/unstable/weak_task.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -43,9 +43,9 @@ pub unsafe fn weaken_task(f: &fn(Port<ShutdownMsg>)) {\n     // Expect the weak task service to be alive\n     assert service.try_send(RegisterWeakTask(task, shutdown_chan));\n     unsafe { rust_dec_kernel_live_count(); }\n-    do fn&() {\n+    do (|| {\n         f(shutdown_port.take())\n-    }.finally || {\n+    }).finally || {\n         unsafe { rust_inc_kernel_live_count(); }\n         // Service my have already exited\n         service.send(UnregisterWeakTask(task));\n@@ -74,13 +74,13 @@ fn create_global_service() -> ~WeakTaskService {\n     do task().unlinked().spawn {\n         debug!(\"running global weak task service\");\n         let port = Cell(port.take());\n-        do fn&() {\n+        do (|| {\n             let port = port.take();\n             // The weak task service is itself a weak task\n             debug!(\"weakening the weak service task\");\n             unsafe { rust_dec_kernel_live_count(); }\n             run_weak_task_service(port);\n-        }.finally {\n+        }).finally {\n             debug!(\"unweakening the weak service task\");\n             unsafe { rust_inc_kernel_live_count(); }\n         }"}, {"sha": "afbe0c930cccadb69f80351581139a9a96685540", "filename": "src/libfuzzer/ast_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fast_match.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,8 +11,9 @@\n use std;\n use vec;\n \n-fn vec_equal<T>(v: ~[T], u: ~[T],\n-                element_equality_test: fn@(&&T, &&T) -> bool) ->\n+fn vec_equal<T>(v: ~[T],\n+                u: ~[T],\n+                element_equality_test: @fn(&&T, &&T) -> bool) ->\n    bool {\n     let Lv = vec::len(v);\n     if Lv != vec::len(u) { return false; }"}, {"sha": "fb4c6400434f3277a1c9d11c4ce077c9cedccdad", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -39,8 +39,8 @@ type pointy = {\n     mut b : ~maybe_pointy,\n     mut c : @maybe_pointy,\n \n-    mut f : fn@()->(),\n-    mut g : fn~()->(),\n+    mut f : @fn()->(),\n+    mut g : ~fn()->(),\n \n     mut m : ~[maybe_pointy],\n     mut n : ~[maybe_pointy],\n@@ -54,8 +54,8 @@ fn empty_pointy() -> @pointy {\n         mut b : ~none,\n         mut c : @none,\n \n-        mut f : fn@()->(){},\n-        mut g : fn~()->(){},\n+        mut f : || {},\n+        mut g : || {},\n \n         mut m : ~[],\n         mut n : ~[],\n@@ -82,7 +82,7 @@ fn test_cycles(r : rand::rng, k: uint, n: uint)\n         if (likelihood(r, k, n)) { v[i].c = @p(choice(r, v)); }\n \n         if (likelihood(r, k, n)) { v[i].f = bind nopP(choice(r, v)); }\n-        //if (false)               { v[i].g = bind (fn~(_x: @pointy) { })(\n+        //if (false)               { v[i].g = bind (|_: @pointy| { })(\n         // choice(r, v)); }\n           // https://github.com/mozilla/rust/issues/1899\n "}, {"sha": "1eb4ff98a6e6dfb2b76f78c0cfe00a32a96249a0", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -31,8 +31,7 @@ extern mod std(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n use syntax::{ast, ast_util, fold, visit, codemap};\n use syntax::parse;\n@@ -138,7 +137,7 @@ pub fn safe_to_steal_ty(t: @ast::Ty, tm: test_mode) -> bool {\n }\n \n // Not type-parameterized: https://github.com/mozilla/rust/issues/898 (FIXED)\n-pub fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n+pub fn stash_expr_if(c: @fn(@ast::expr, test_mode)->bool,\n                      es: @mut ~[ast::expr],\n                      e: @ast::expr,\n                      tm: test_mode) {\n@@ -149,7 +148,7 @@ pub fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n     }\n }\n \n-pub fn stash_ty_if(c: fn@(@ast::Ty, test_mode)->bool,\n+pub fn stash_ty_if(c: @fn(@ast::Ty, test_mode)->bool,\n                    es: @mut ~[ast::Ty],\n                    e: @ast::Ty,\n                    tm: test_mode) {\n@@ -253,7 +252,7 @@ pub fn under(n: uint, it: fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-pub fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n+pub fn as_str(f: @fn(+x: io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n \n@@ -276,8 +275,8 @@ pub fn check_variants_T<T: Copy>(\n   filename: &Path,\n   thing_label: ~str,\n   things: ~[T],\n-  stringifier: fn@(@T, @syntax::parse::token::ident_interner) -> ~str,\n-  replacer: fn@(ast::crate, uint, T, test_mode) -> ast::crate,\n+  stringifier: @fn(@T, @syntax::parse::token::ident_interner) -> ~str,\n+  replacer: @fn(ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: Context\n   ) {\n     error!(\"%s contains %u %s objects\", filename.to_str(),"}, {"sha": "37e0f874b40dc9288ec4bab4e3f5bbde17e6e6c7", "filename": "src/librust/rust.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -220,7 +220,7 @@ fn usage() {\n \n }\n \n-fn main() {\n+pub fn main() {\n     let args = os::args().tail();\n \n     if !args.is_empty() {"}, {"sha": "95337b4150c29b25c7f269a989a962618c834e76", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n-use session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {"}, {"sha": "446b83af425a7b96f409e2176d2188756f66bb3a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use back::rpath;\n+use driver::session::Session;\n use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n@@ -21,8 +22,6 @@ use metadata::filesearch;\n use metadata::{encoder, cstore};\n use middle::trans::common::CrateContext;\n use middle::ty;\n-use session::Session;\n-use session;\n use util::ppaux;\n \n use core::char;\n@@ -89,10 +88,10 @@ pub fn WriteOutputFile(sess: Session,\n \n pub mod jit {\n     use back::link::llvm_err;\n+    use driver::session::Session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, PassManagerRef, mk_target_data};\n     use metadata::cstore;\n-    use session::Session;\n \n     use core::cast;\n     use core::libc::c_int;\n@@ -170,11 +169,11 @@ pub mod write {\n     use back::link::{output_type_assembly, output_type_bitcode};\n     use back::link::{output_type_exe, output_type_llvm_assembly};\n     use back::link::{output_type_object};\n+    use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n-    use session::Session;\n \n     use core::char;\n     use core::libc::{c_char, c_int, c_uint};"}, {"sha": "2cc812c3d41056f349729549b900190d5e200ce1", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,9 +10,9 @@\n \n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n use metadata::loader::meta_section_name;\n-use session::sess_os_to_meta_os;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return target_strs::t {"}, {"sha": "b68073974dcf916f895d929d6dc22af693f24dc8", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,9 +10,9 @@\n \n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n use metadata::loader::meta_section_name;\n-use session::sess_os_to_meta_os;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return target_strs::t {"}, {"sha": "6e6213d4427dab4d13b54125bcd26a8fbbab5830", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,14 +12,15 @@ use core::prelude::*;\n \n use back::link;\n use back::{arm, x86, x86_64};\n+use driver::session::{Aggressive};\n+use driver::session::{Session, Session_, OptLevel, No, Less, Default};\n+use driver::session;\n use front;\n use lib::llvm::llvm;\n use metadata::{creader, cstore, filesearch};\n use metadata;\n use middle::{trans, freevars, kind, ty, typeck, lint, astencode};\n use middle;\n-use session::{Session, Session_, OptLevel, No, Less, Default, Aggressive};\n-use session;\n use util::ppaux;\n \n use core::cmp;"}, {"sha": "5da16dd5342081238d9b6215f33a0accf22e8055", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use back::link;\n use back::target_strs;\n use back;\n-use driver;\n+use driver::driver::host_triple;\n use driver::session;\n use metadata::filesearch;\n use metadata;\n@@ -293,7 +293,7 @@ pub fn basic_options() -> @options {\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: ~[],\n         maybe_sysroot: None,\n-        target_triple: driver::host_triple(),\n+        target_triple: host_triple(),\n         cfg: ~[],\n         binary: ~\"rustc\",\n         test: false,"}, {"sha": "cdf63c49de3a4c6d0f5a367cf2f3e6d6a3751bd8", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -15,7 +15,7 @@ use syntax::{ast, fold, attr};\n use core::option;\n use core::vec;\n \n-type in_cfg_pred = fn@(+attrs: ~[ast::attribute]) -> bool;\n+type in_cfg_pred = @fn(+attrs: ~[ast::attribute]) -> bool;\n \n struct Context {\n     in_cfg: in_cfg_pred"}, {"sha": "059cd9723e76aed785c8c82891cde5c19e32ac80", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // NB: this file is include_str!'ed into the compiler, re-parsed\n // and injected into each crate the compiler builds. Keep it small.\n \n-mod intrinsic {\n+pub mod intrinsic {\n     pub use intrinsic::rusti::visit_tydesc;\n \n     // FIXME (#3727): remove this when the interface has settled and the"}, {"sha": "524e46db7388575bdb1b7e0b6e73dc1c94fc2913", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,25 +12,24 @@\n \n use core::prelude::*;\n \n+use driver::session::Session;\n use driver::session;\n use front::config;\n-use session::Session;\n \n use core::dvec::DVec;\n use core::option;\n use core::vec;\n use syntax::ast_util::*;\n+use syntax::attr::attrs_contains_name;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n use syntax::codemap;\n+use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::fold;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n-use syntax::attr::attrs_contains_name;\n \n-use syntax::ext::base::{mk_ctxt, ext_ctxt};\n-\n-type node_id_gen = fn@() -> ast::node_id;\n+type node_id_gen = @fn() -> ast::node_id;\n \n struct Test {\n     span: span,\n@@ -286,7 +285,7 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n     let vi = ast::view_item {\n         node: vi,\n         attrs: ~[],\n-        vis: ast::private,\n+        vis: ast::public,\n         span: dummy_sp()\n     };\n     return @vi;"}, {"sha": "307a58135e1387be557ac580315bce22dba7646b", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -80,7 +80,7 @@ fn dump_crates(+crate_cache: @mut ~[cache_entry]) {\n fn warn_if_multiple_versions(e: @mut Env,\n                              diag: span_handler,\n                              crate_cache: @mut ~[cache_entry]) {\n-    use either::*;\n+    use core::either::*;\n \n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas("}, {"sha": "f660c796fa3b8959bb8beff9c400fb8918f0c545", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -14,9 +14,6 @@\n use core::prelude::*;\n \n use metadata::cstore::crate_metadata;\n-use dvec::DVec;\n-use hash::{Hash, HashUtil};\n-use io::WriterUtil;\n use metadata::common::*;\n use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n use metadata::csearch;\n@@ -28,8 +25,11 @@ use middle::{ty, resolve};\n use util::ppaux::ty_to_str;\n \n use core::cmp;\n+use core::dvec::DVec;\n use core::dvec;\n+use core::hash::{Hash, HashUtil};\n use core::int;\n+use core::io::WriterUtil;\n use core::io;\n use core::option;\n use core::str;"}, {"sha": "403cc1cf978455782d49af3d73a679d892ff2cdf", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -57,7 +57,7 @@ use writer = std::ebml::writer;\n // used by astencode:\n type abbrev_map = oldmap::HashMap<ty::t, tyencode::ty_abbrev>;\n \n-pub type encode_inlined_item = fn@(ecx: @EncodeContext,\n+pub type encode_inlined_item = @fn(ecx: @EncodeContext,\n                                    ebml_w: writer::Encoder,\n                                    path: &[ast_map::path_elt],\n                                    ii: ast::inlined_item);"}, {"sha": "233c0949fa66a763fcd440acaa5f57270274d225", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -81,7 +81,7 @@ pub fn parse_ident(st: @mut PState, last: char) -> ast::ident {\n     return parse_ident_(st, |a| is_last(last, a) );\n }\n \n-fn parse_ident_(st: @mut PState, is_last: fn@(char) -> bool) ->\n+fn parse_ident_(st: @mut PState, is_last: @fn(char) -> bool) ->\n    ast::ident {\n     let mut rslt = ~\"\";\n     while !is_last(peek(st)) {"}, {"sha": "8fd1d176b6593d8de012697d8ccffac757451733", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -29,10 +29,10 @@ use middle::ty::Vid;\n pub struct ctxt {\n     diag: span_handler,\n     // Def -> str Callback:\n-    ds: fn@(def_id) -> ~str,\n+    ds: @fn(def_id) -> ~str,\n     // The type context.\n     tcx: ty::ctxt,\n-    reachable: fn@(node_id) -> bool,\n+    reachable: @fn(node_id) -> bool,\n     abbrevs: abbrev_ctxt\n }\n "}, {"sha": "b52a2d0bb093c11f369ecf0e916f2fffb601beb7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -843,7 +843,7 @@ fn encode_side_tables_for_ii(ecx: @e::EncodeContext,\n         let ebml_w = copy ebml_w;\n         ast_util::visit_ids_for_inlined_item(\n             ii,\n-            fn@(id: ast::node_id) {\n+            |id: ast::node_id| {\n                 // Note: this will cause a copy of ebml_w, which is bad as\n                 // it has mut fields.  But I believe it's harmless since\n                 // we generate balanced EBML."}, {"sha": "d6af2f7862644175308a0ed799ed2dd398fa8bfb", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -212,8 +212,8 @@ pub impl CheckLoanCtxt {\n                     (*self.fn_args).contains(&(did.node));\n                 if is_fn_arg { return; } // case (a) above\n               }\n-              ast::expr_fn_block(*) | ast::expr_fn(*) |\n-              ast::expr_loop_body(*) | ast::expr_do_body(*) => {\n+              ast::expr_fn_block(*) | ast::expr_loop_body(*) |\n+              ast::expr_do_body(*) => {\n                 if self.is_stack_closure(expr.id) {\n                     // case (b) above\n                     return;\n@@ -244,7 +244,7 @@ pub impl CheckLoanCtxt {\n     }\n \n     // True if the expression with the given `id` is a stack closure.\n-    // The expression must be an expr_fn(*) or expr_fn_block(*)\n+    // The expression must be an expr_fn_block(*)\n     fn is_stack_closure(@mut self, id: ast::node_id) -> bool {\n         let fn_ty = ty::node_id_to_type(self.tcx(), id);\n         match ty::get(fn_ty).sty {\n@@ -262,10 +262,8 @@ pub impl CheckLoanCtxt {\n             did.crate == ast::local_crate &&\n                 (*self.fn_args).contains(&(did.node))\n           }\n-          ast::expr_fn_block(*) | ast::expr_fn(*) => {\n-            self.is_stack_closure(expr.id)\n-          }\n-          _ => false\n+          ast::expr_fn_block(*) => self.is_stack_closure(expr.id),\n+          _ => false,\n         };\n     }\n "}, {"sha": "457701e659a6930914a68f0fb1fd9844ffbf1020", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -251,7 +251,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n         // Receivers in method calls are always passed by ref.\n         //\n         // Here, the field a.b is in fact a closure.  Eventually, this\n-        // should be an fn&, but for now it's an fn@.  In any case,\n+        // should be an &fn, but for now it's an @fn.  In any case,\n         // the enclosing scope is either the call where it is a rcvr\n         // (if used like `a.b(...)`), the call where it's an argument\n         // (if used like `x(a.b)`), or the block (if used like `let x"}, {"sha": "74a79e5e56096cab9da51b342012734567040d39", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -38,12 +38,6 @@ pub fn check_crate(tcx: ty::ctxt, crate: @crate) {\n               expr_loop(ref b, _) => {\n                 (v.visit_block)(b, Context { in_loop: true,.. cx }, v);\n               }\n-              expr_fn(*) => {\n-                visit::visit_expr(e, Context {\n-                                        in_loop: false,\n-                                        can_ret: true\n-                                     }, v);\n-              }\n               expr_fn_block(_, ref b) => {\n                 (v.visit_block)(b, Context {\n                                          in_loop: false,"}, {"sha": "52520b59b446e832737eb3a8b70021a835379675", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -46,14 +46,10 @@ fn collect_freevars(def_map: resolve::DefMap, blk: &ast::blk)\n \n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n \n-    let walk_expr = fn@(expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n+    let walk_expr: @fn(expr: @ast::expr, &&depth: int, v: visit::vt<int>) =\n+        |expr, depth, v| {\n             match expr.node {\n-              ast::expr_fn(_, _, _, _) => {\n-                visit::visit_expr(expr, depth + 1, v);\n-              }\n-              ast::expr_fn_block(*) => {\n-                visit::visit_expr(expr, depth + 1, v);\n-              }\n+              ast::expr_fn_block(*) => visit::visit_expr(expr, depth + 1, v),\n               ast::expr_path(*) => {\n                   let mut i = 0;\n                   match def_map.find(&expr.id) {\n@@ -100,8 +96,11 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = HashMap();\n \n-    let walk_fn = fn@(_fk: &visit::fn_kind, _decl: &ast::fn_decl,\n-                      blk: &ast::blk, _sp: span, nid: ast::node_id) {\n+    let walk_fn: @fn(&visit::fn_kind,\n+                     &ast::fn_decl,\n+                     &ast::blk,\n+                     span,\n+                     ast::node_id) = |_, _, blk, _, nid| {\n         let vars = collect_freevars(def_map, blk);\n         freevars.insert(nid, vars);\n     };"}, {"sha": "aca5675aa151d2d4452c9397e39b70c7528d17d7", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -84,7 +84,7 @@ pub fn check_crate(tcx: ty::ctxt,\n         visit_expr: check_expr,\n         visit_fn: check_fn,\n         visit_ty: check_ty,\n-        visit_item: fn@(i: @item, cx: Context, v: visit::vt<Context>) {\n+        visit_item: |i, cx, v| {\n             visit::visit_item(i, Context { current_item: i.id,.. cx }, v);\n         },\n         .. *visit::default_visitor()\n@@ -93,7 +93,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     tcx.sess.abort_if_errors();\n }\n \n-type check_fn = fn@(Context, @freevar_entry);\n+type check_fn = @fn(Context, @freevar_entry);\n \n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the node_id for some expression that creates the"}, {"sha": "c0ce6ee515fabc2372c7bb96667b80de3250ae39", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -34,7 +34,7 @@ use syntax::visit::{visit_crate, visit_item};\n \n use core::ptr;\n use std::oldmap::HashMap;\n-use str_eq = str::eq;\n+use str_eq = core::str::eq;\n \n pub enum LangItem {\n     ConstTraitLangItem,         // 0"}, {"sha": "95f28578fec66c8860df5aa56d77c8ec77bb31fb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -570,7 +570,6 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n         }\n         visit::visit_expr(expr, self, vt);\n       }\n-      expr_fn(*) |\n       expr_fn_block(*) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n@@ -1123,8 +1122,8 @@ pub impl Liveness {\n               self.propagate_through_expr(e, succ)\n           }\n \n-          expr_fn(_, _, ref blk, _) | expr_fn_block(_, ref blk) => {\n-              debug!(\"%s is an expr_fn or expr_fn_block\",\n+          expr_fn_block(_, ref blk) => {\n+              debug!(\"%s is an expr_fn_block\",\n                    expr_to_str(expr, self.tcx.sess.intr()));\n \n               /*\n@@ -1592,7 +1591,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_fn(*) | expr_fn_block(*) => {\n+      expr_fn_block(*) => {\n         let caps = self.ir.captures(expr);\n         for caps.each |cap| {\n             let var = self.variable(cap.var_nid, expr.span);\n@@ -1794,7 +1793,7 @@ pub impl @Liveness {\n         }\n \n         match move_expr.node {\n-            expr_fn(*) | expr_fn_block(*) => {\n+            expr_fn_block(*) => {\n                 self.report_illegal_read(\n                     move_expr.span, lnk, var, MovedValue);\n                 let name = self.ir.variable_name(var);"}, {"sha": "bcbb2d6fd175466e39bed1aaa506db880bb28553", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -441,7 +441,7 @@ pub impl mem_categorization_ctxt {\n \n           ast::expr_addr_of(*) | ast::expr_call(*) |\n           ast::expr_swap(*) | ast::expr_assign(*) |\n-          ast::expr_assign_op(*) | ast::expr_fn(*) | ast::expr_fn_block(*) |\n+          ast::expr_assign_op(*) | ast::expr_fn_block(*) |\n           ast::expr_assert(*) | ast::expr_ret(*) |\n           ast::expr_loop_body(*) | ast::expr_do_body(*) |\n           ast::expr_unary(*) | ast::expr_method_call(*) |"}, {"sha": "c360b3a23e735fa241db68a5328774d46df713ae", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -644,7 +644,6 @@ pub impl VisitContext {\n                 self.use_expr(base, comp_mode, visitor);\n             }\n \n-            expr_fn(_, _, ref body, _) |\n             expr_fn_block(_, ref body) => {\n                 let cap_vars = self.compute_captures(expr.id);\n                 self.move_maps.capture_map.insert(expr.id, cap_vars);"}, {"sha": "5298f6c632d64f2659e45a0914477f7cf94814be", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 132, "deletions": 272, "changes": 404, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -34,12 +34,12 @@ use syntax::ast::{def_local, def_mod, def_prim_ty, def_region, def_self};\n use syntax::ast::{def_self_ty, def_static_method, def_struct, def_ty};\n use syntax::ast::{def_ty_param, def_typaram_binder};\n use syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n-use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n+use syntax::ast::{expr_binary, expr_break, expr_cast, expr_field};\n use syntax::ast::{expr_fn_block, expr_index, expr_method_call, expr_path};\n use syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n use syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n use syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n-use syntax::ast::{expr_fn_block, expr_index, expr_loop};\n+use syntax::ast::{expr_index, expr_loop};\n use syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n use syntax::ast::{foreign_item, foreign_item_const, foreign_item_fn, ge};\n use syntax::ast::{Generics};\n@@ -77,15 +77,14 @@ use syntax::visit::{visit_mod, visit_ty, vt};\n use syntax::opt_vec;\n use syntax::opt_vec::OptVec;\n \n-use managed::ptr_eq;\n-use dvec::DVec;\n-use option::{Some, get, is_some, is_none};\n-use str::{connect, split_str};\n-use vec::pop;\n-\n+use core::dvec::DVec;\n+use core::managed::ptr_eq;\n+use core::option::{Some, get, is_some, is_none};\n+use core::str::{connect, split_str};\n+use core::vec::pop;\n use std::list::{Cons, List, Nil};\n use std::oldmap::HashMap;\n-use str_eq = str::eq;\n+use str_eq = core::str::eq;\n \n // Definition mapping\n pub type DefMap = HashMap<node_id,def>;\n@@ -305,6 +304,12 @@ pub enum AllowCapturingSelfFlag {\n     DontAllowCapturingSelf,     //< The \"self\" definition cannot be captured.\n }\n \n+#[deriving_eq]\n+enum NameSearchType {\n+    SearchItemsAndPublicImports,    //< Search items and public imports.\n+    SearchItemsAndAllImports,       //< Search items and all imports.\n+}\n+\n pub enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(def),\n     FoundConst(def),\n@@ -1488,7 +1493,7 @@ pub impl Resolver {\n                         let parent_link = ModuleParentLink\n                             (self.get_module_from_parent(new_parent), name);\n \n-                        child_name_bindings.define_module(privacy,\n+                        child_name_bindings.define_module(Public,\n                                                           parent_link,\n                                                           Some(def_id),\n                                                           NormalModuleKind,\n@@ -1948,10 +1953,8 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * Attempts to resolve imports for the given module and all of its\n-     * submodules.\n-     */\n+    /// Attempts to resolve imports for the given module and all of its\n+    /// submodules.\n     fn resolve_imports_for_module_subtree(@mut self, module_: @mut Module) {\n         debug!(\"(resolving imports for module subtree) resolving %s\",\n                self.module_to_str(module_));\n@@ -1974,19 +1977,19 @@ pub impl Resolver {\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(@mut self, module_: @mut Module) {\n-        if (*module_).all_imports_resolved() {\n+    fn resolve_imports_for_module(@mut self, module: @mut Module) {\n+        if module.all_imports_resolved() {\n             debug!(\"(resolving imports for module) all imports resolved for \\\n                    %s\",\n-                   self.module_to_str(module_));\n+                   self.module_to_str(module));\n             return;\n         }\n \n-        let import_count = module_.imports.len();\n-        while module_.resolved_import_count < import_count {\n-            let import_index = module_.resolved_import_count;\n-            let import_directive = module_.imports.get_elt(import_index);\n-            match self.resolve_import_for_module(module_, import_directive) {\n+        let import_count = module.imports.len();\n+        while module.resolved_import_count < import_count {\n+            let import_index = module.resolved_import_count;\n+            let import_directive = module.imports.get_elt(import_index);\n+            match self.resolve_import_for_module(module, import_directive) {\n                 Failed => {\n                     // We presumably emitted an error. Continue.\n                     let idents = import_directive.module_path.get();\n@@ -2004,7 +2007,7 @@ pub impl Resolver {\n                 }\n             }\n \n-            module_.resolved_import_count += 1;\n+            module.resolved_import_count += 1;\n         }\n     }\n \n@@ -2037,72 +2040,71 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * Attempts to resolve the given import. The return value indicates\n-     * failure if we're certain the name does not exist, indeterminate if we\n-     * don't know whether the name exists at the moment due to other\n-     * currently-unresolved imports, or success if we know the name exists.\n-     * If successful, the resolved bindings are written into the module.\n-     */\n-    fn resolve_import_for_module(@mut self,\n-                                 module_: @mut Module,\n+    /// Attempts to resolve the given import. The return value indicates\n+    /// failure if we're certain the name does not exist, indeterminate if we\n+    /// don't know whether the name exists at the moment due to other\n+    /// currently-unresolved imports, or success if we know the name exists.\n+    /// If successful, the resolved bindings are written into the module.\n+    fn resolve_import_for_module(@mut self, module_: @mut Module,\n                                  import_directive: @ImportDirective)\n                               -> ResolveResult<()> {\n-        let mut resolution_result;\n+        let mut resolution_result = Failed;\n         let module_path = import_directive.module_path;\n \n         debug!(\"(resolving import for module) resolving import `%s::...` in \\\n                 `%s`\",\n-               self.idents_to_str((*module_path).get()),\n+               self.idents_to_str(module_path.get()),\n                self.module_to_str(module_));\n \n-        // One-level renaming imports of the form `import foo = bar;` are\n-        // handled specially.\n-\n-        if (*module_path).len() == 0 {\n-            resolution_result =\n-                self.resolve_one_level_renaming_import(module_,\n-                                                       import_directive);\n+        // First, resolve the module path for the directive, if necessary.\n+        let containing_module = if module_path.len() == 0 {\n+            // Use the crate root.\n+            Some(self.graph_root.get_module())\n         } else {\n-            // First, resolve the module path for the directive, if necessary.\n             match self.resolve_module_path_for_import(module_,\n                                                       module_path,\n                                                       DontUseLexicalScope,\n                                                       import_directive.span) {\n \n-                Failed => {\n-                    resolution_result = Failed;\n-                }\n+                Failed => None,\n                 Indeterminate => {\n                     resolution_result = Indeterminate;\n+                    None\n                 }\n-                Success(containing_module) => {\n-                    // We found the module that the target is contained\n-                    // within. Attempt to resolve the import within it.\n-\n-                    match *import_directive.subclass {\n-                        SingleImport(target, source, AnyNS) => {\n-                            resolution_result =\n-                                self.resolve_single_import(module_,\n-                                                           containing_module,\n-                                                           target,\n-                                                           source);\n-                        }\n-                        SingleImport(target, source, TypeNSOnly) => {\n-                            resolution_result =\n-                                self.resolve_single_module_import\n-                                    (module_, containing_module, target,\n-                                     source);\n-                        }\n-                        GlobImport => {\n-                            let span = import_directive.span;\n-                            let p = import_directive.privacy;\n-                            resolution_result =\n-                                self.resolve_glob_import(p,\n-                                                         module_,\n-                                                         containing_module,\n-                                                         span);\n-                        }\n+                Success(containing_module) => Some(containing_module),\n+            }\n+        };\n+\n+        match containing_module {\n+            None => {}\n+            Some(containing_module) => {\n+                // We found the module that the target is contained\n+                // within. Attempt to resolve the import within it.\n+\n+                match *import_directive.subclass {\n+                    SingleImport(target, source, AnyNS) => {\n+                        resolution_result =\n+                            self.resolve_single_import(module_,\n+                                                       containing_module,\n+                                                       target,\n+                                                       source);\n+                    }\n+                    SingleImport(target, source, TypeNSOnly) => {\n+                        resolution_result =\n+                            self.resolve_single_module_import(\n+                                module_,\n+                                containing_module,\n+                                target,\n+                                source);\n+                    }\n+                    GlobImport => {\n+                        let span = import_directive.span;\n+                        let privacy = import_directive.privacy;\n+                        resolution_result =\n+                            self.resolve_glob_import(privacy,\n+                                                     module_,\n+                                                     containing_module,\n+                                                     span);\n                     }\n                 }\n             }\n@@ -2575,11 +2577,13 @@ pub impl Resolver {\n         return Success(());\n     }\n \n+    /// Resolves the given module path from the given root `module_`.\n     fn resolve_module_path_from_root(@mut self,\n                                      module_: @mut Module,\n                                      module_path: @DVec<ident>,\n                                      index: uint,\n-                                     span: span)\n+                                     span: span,\n+                                     mut name_search_type: NameSearchType)\n                                   -> ResolveResult<@mut Module> {\n         let mut search_module = module_;\n         let mut index = index;\n@@ -2594,7 +2598,7 @@ pub impl Resolver {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               TypeNS,\n-                                              false) {\n+                                              name_search_type) {\n                 Failed => {\n                     self.session.span_err(span, ~\"unresolved name\");\n                     return Failed;\n@@ -2639,22 +2643,33 @@ pub impl Resolver {\n             }\n \n             index += 1;\n+\n+            // After the first element of the path, allow searching through\n+            // items and imports unconditionally. This allows things like:\n+            //\n+            // pub mod core {\n+            //     pub use vec;\n+            // }\n+            //\n+            // pub mod something_else {\n+            //     use core::vec;\n+            // }\n+\n+            name_search_type = SearchItemsAndPublicImports;\n         }\n \n         return Success(search_module);\n     }\n \n-    /**\n-     * Attempts to resolve the module part of an import directive or path\n-     * rooted at the given module.\n-     */\n+    /// Attempts to resolve the module part of an import directive or path\n+    /// rooted at the given module.\n     fn resolve_module_path_for_import(@mut self,\n                                       module_: @mut Module,\n                                       module_path: @DVec<ident>,\n                                       use_lexical_scope: UseLexicalScopeFlag,\n                                       span: span)\n                                    -> ResolveResult<@mut Module> {\n-        let module_path_len = (*module_path).len();\n+        let module_path_len = module_path.len();\n         assert module_path_len > 0;\n \n         debug!(\"(resolving module path for import) processing `%s` rooted at \\\n@@ -2721,12 +2736,15 @@ pub impl Resolver {\n             }\n         }\n \n-        return self.resolve_module_path_from_root(search_module,\n-                                                  module_path,\n-                                                  start_index,\n-                                                  span);\n+        self.resolve_module_path_from_root(search_module,\n+                                           module_path,\n+                                           start_index,\n+                                           span,\n+                                           SearchItemsAndPublicImports)\n     }\n \n+    /// Invariant: This must only be called during main resolution, not during\n+    /// import resolution.\n     fn resolve_item_in_lexical_scope(@mut self,\n                                      module_: @mut Module,\n                                      name: ident,\n@@ -2822,7 +2840,7 @@ pub impl Resolver {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               namespace,\n-                                              false) {\n+                                              SearchItemsAndAllImports) {\n                 Failed => {\n                     // Continue up the search chain.\n                 }\n@@ -2973,16 +2991,14 @@ pub impl Resolver {\n         return Success(PrefixFound(containing_module, i));\n     }\n \n-    /**\n-     * Attempts to resolve the supplied name in the given module for the\n-     * given namespace. If successful, returns the target corresponding to\n-     * the name.\n-     */\n+    /// Attempts to resolve the supplied name in the given module for the\n+    /// given namespace. If successful, returns the target corresponding to\n+    /// the name.\n     fn resolve_name_in_module(@mut self,\n                               module_: @mut Module,\n                               name: ident,\n                               namespace: Namespace,\n-                              allow_globs: bool)\n+                              +name_search_type: NameSearchType)\n                            -> ResolveResult<Target> {\n         debug!(\"(resolving name in module) resolving `%s` in `%s`\",\n                *self.session.str_of(name),\n@@ -3001,35 +3017,42 @@ pub impl Resolver {\n             }\n         }\n \n-        // Next, check the module's imports. If the module has a glob and\n-        // globs were not allowed, then we bail out; we don't know its imports\n-        // yet.\n-        if !allow_globs && module_.glob_count > 0 {\n-            debug!(\"(resolving name in module) module has glob; bailing out\");\n-            return Indeterminate;\n+        // Next, check the module's imports if necessary.\n+\n+        // If this is a search of all imports, we should be done with glob\n+        // resolution at this point.\n+        if name_search_type == SearchItemsAndAllImports {\n+            assert module_.glob_count == 0;\n         }\n \n-        // Otherwise, we check the list of resolved imports.\n+        // Check the list of resolved imports.\n         match module_.import_resolutions.find(&name) {\n             Some(import_resolution) => {\n                 if import_resolution.outstanding_references != 0 {\n-                    debug!(\"(resolving name in module) import unresolved; \\\n-                            bailing out\");\n+                    debug!(\"(resolving name in module) import \\\n+                            unresolved; bailing out\");\n                     return Indeterminate;\n                 }\n \n-                match (*import_resolution).target_for_namespace(namespace) {\n+                match import_resolution.target_for_namespace(namespace) {\n                     None => {\n-                        debug!(\"(resolving name in module) name found, but \\\n-                                not in namespace %?\",\n+                        debug!(\"(resolving name in module) name found, \\\n+                                but not in namespace %?\",\n                                namespace);\n                     }\n-                    Some(target) => {\n+                    Some(target)\n+                            if name_search_type ==\n+                                SearchItemsAndAllImports ||\n+                            import_resolution.privacy == Public => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n                         import_resolution.state.used = true;\n                         return Success(copy target);\n                     }\n+                    Some(_) => {\n+                        debug!(\"(resolving name in module) name found, \\\n+                                but not public\");\n+                    }\n                 }\n             }\n             None => {\n@@ -3043,168 +3066,6 @@ pub impl Resolver {\n         return Failed;\n     }\n \n-    /**\n-     * Resolves a one-level renaming import of the kind `import foo = bar;`\n-     * This needs special handling, as, unlike all of the other imports, it\n-     * needs to look in the scope chain for modules and non-modules alike.\n-     */\n-    fn resolve_one_level_renaming_import(@mut self,\n-                                         module_: @mut Module,\n-                                         import_directive: @ImportDirective)\n-                                      -> ResolveResult<()> {\n-        let mut target_name;\n-        let mut source_name;\n-        let allowable_namespaces;\n-        match *import_directive.subclass {\n-            SingleImport(target, source, namespaces) => {\n-                target_name = target;\n-                source_name = source;\n-                allowable_namespaces = namespaces;\n-            }\n-            GlobImport => {\n-                fail!(~\"found `import *`, which is invalid\");\n-            }\n-        }\n-\n-        debug!(\"(resolving one-level naming result) resolving import `%s` = \\\n-                `%s` in `%s`\",\n-                *self.session.str_of(target_name),\n-                *self.session.str_of(source_name),\n-                self.module_to_str(module_));\n-\n-        // Find the matching items in the lexical scope chain for every\n-        // namespace. If any of them come back indeterminate, this entire\n-        // import is indeterminate.\n-\n-        let mut module_result;\n-        debug!(\"(resolving one-level naming result) searching for module\");\n-        match self.resolve_item_in_lexical_scope(module_,\n-                                                 source_name,\n-                                                 TypeNS,\n-                                                 SearchThroughModules) {\n-            Failed => {\n-                debug!(\"(resolving one-level renaming import) didn't find \\\n-                        module result\");\n-                module_result = None;\n-            }\n-            Indeterminate => {\n-                debug!(\"(resolving one-level renaming import) module result \\\n-                        is indeterminate; bailing\");\n-                return Indeterminate;\n-            }\n-            Success(name_bindings) => {\n-                debug!(\"(resolving one-level renaming import) module result \\\n-                        found\");\n-                module_result = Some(copy name_bindings);\n-            }\n-        }\n-\n-        let mut value_result;\n-        let mut type_result;\n-        if allowable_namespaces == TypeNSOnly {\n-            value_result = None;\n-            type_result = None;\n-        } else {\n-            debug!(\"(resolving one-level naming result) searching for value\");\n-            match self.resolve_item_in_lexical_scope(module_,\n-                                                     source_name,\n-                                                     ValueNS,\n-                                                     SearchThroughModules) {\n-\n-                Failed => {\n-                    debug!(\"(resolving one-level renaming import) didn't \\\n-                            find value result\");\n-                    value_result = None;\n-                }\n-                Indeterminate => {\n-                    debug!(\"(resolving one-level renaming import) value \\\n-                            result is indeterminate; bailing\");\n-                    return Indeterminate;\n-                }\n-                Success(name_bindings) => {\n-                    debug!(\"(resolving one-level renaming import) value \\\n-                            result found\");\n-                    value_result = Some(copy name_bindings);\n-                }\n-            }\n-\n-            debug!(\"(resolving one-level naming result) searching for type\");\n-            match self.resolve_item_in_lexical_scope(module_,\n-                                                     source_name,\n-                                                     TypeNS,\n-                                                     SearchThroughModules) {\n-\n-                Failed => {\n-                    debug!(\"(resolving one-level renaming import) didn't \\\n-                            find type result\");\n-                    type_result = None;\n-                }\n-                Indeterminate => {\n-                    debug!(\"(resolving one-level renaming import) type \\\n-                            result is indeterminate; bailing\");\n-                    return Indeterminate;\n-                }\n-                Success(name_bindings) => {\n-                    debug!(\"(resolving one-level renaming import) type \\\n-                            result found\");\n-                    type_result = Some(copy name_bindings);\n-                }\n-            }\n-        }\n-\n-        //\n-        // NB: This one results in effects that may be somewhat surprising. It\n-        // means that this:\n-        //\n-        // mod A {\n-        //     impl foo for ... { ... }\n-        //     mod B {\n-        //         impl foo for ... { ... }\n-        //         import bar = foo;\n-        //         ...\n-        //     }\n-        // }\n-        //\n-        // results in only A::B::foo being aliased to A::B::bar, not A::foo\n-        // *and* A::B::foo being aliased to A::B::bar.\n-        //\n-\n-        // If nothing at all was found, that's an error.\n-        if is_none(&module_result) &&\n-                is_none(&value_result) &&\n-                is_none(&type_result) {\n-\n-            self.session.span_err(import_directive.span,\n-                                  ~\"unresolved import\");\n-            return Failed;\n-        }\n-\n-        // Otherwise, proceed and write in the bindings.\n-        match module_.import_resolutions.find(&target_name) {\n-            None => {\n-                fail!(~\"(resolving one-level renaming import) reduced graph \\\n-                      construction or glob importing should have created the \\\n-                      import resolution name by now\");\n-            }\n-            Some(import_resolution) => {\n-                debug!(\"(resolving one-level renaming import) writing module \\\n-                        result %? for `%s` into `%s`\",\n-                       is_none(&module_result),\n-                       *self.session.str_of(target_name),\n-                       self.module_to_str(module_));\n-\n-                import_resolution.value_target = value_result;\n-                import_resolution.type_target = type_result;\n-\n-                assert import_resolution.outstanding_references >= 1;\n-                import_resolution.outstanding_references -= 1;\n-            }\n-        }\n-\n-        debug!(\"(resolving one-level renaming import) successfully resolved\");\n-        return Success(());\n-    }\n-\n     fn report_unresolved_imports(@mut self, module_: @mut Module) {\n         let index = module_.resolved_import_count;\n         let import_count = module_.imports.len();\n@@ -4538,10 +4399,8 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * If `check_ribs` is true, checks the local definitions first; i.e.\n-     * doesn't skip straight to the containing module.\n-     */\n+    /// If `check_ribs` is true, checks the local definitions first; i.e.\n+    /// doesn't skip straight to the containing module.\n     fn resolve_path(@mut self,\n                     path: @path,\n                     namespace: Namespace,\n@@ -4714,6 +4573,8 @@ pub impl Resolver {\n         }\n     }\n \n+    /// Invariant: This must be called only during main resolution, not during\n+    /// import resolution.\n     fn resolve_crate_relative_path(@mut self,\n                                    path: @path,\n                                    +xray: XrayFlag,\n@@ -4727,8 +4588,8 @@ pub impl Resolver {\n         match self.resolve_module_path_from_root(root_module,\n                                                  module_path_idents,\n                                                  0,\n-                                                 path.span) {\n-\n+                                                 path.span,\n+                                                 SearchItemsAndAllImports) {\n             Failed => {\n                 self.session.span_err(path.span,\n                                       fmt!(\"use of undeclared module `::%s`\",\n@@ -4949,7 +4810,6 @@ pub impl Resolver {\n                 visit_expr(expr, (), visitor);\n             }\n \n-            expr_fn(_, ref fn_decl, ref block, _) |\n             expr_fn_block(ref fn_decl, ref block) => {\n                 self.resolve_function(FunctionRibKind(expr.id, block.node.id),\n                                       Some(@/*bad*/copy *fn_decl),"}, {"sha": "0d3524ed7fb2fa95052a87926fa1d6c1096f1970", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -1003,7 +1003,7 @@ pub fn any_tuple_struct_pat(bcx: block, m: &[@Match], col: uint) -> bool {\n     })\n }\n \n-pub type mk_fail = fn@() -> BasicBlockRef;\n+pub type mk_fail = @fn() -> BasicBlockRef;\n \n pub fn pick_col(m: &[@Match]) -> uint {\n     fn score(p: @ast::pat) -> uint {"}, {"sha": "a714446235aefc9a84f57f2373685ed9638ac691", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -634,8 +634,8 @@ pub fn compare_scalar_values(cx: block,\n     }\n }\n \n-pub type val_pair_fn = fn@(block, ValueRef, ValueRef) -> block;\n-pub type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> block;\n+pub type val_pair_fn = @fn(block, ValueRef, ValueRef) -> block;\n+pub type val_and_ty_fn = @fn(block, ValueRef, ty::t) -> block;\n \n pub fn load_inbounds(cx: block, p: ValueRef, idxs: &[uint]) -> ValueRef {\n     return Load(cx, GEPi(cx, p, idxs));"}, {"sha": "8db48e1de605518a051bf5d6c3092978bf26782f", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,26 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use codemap::span;\n-use lib;\n use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use libc::{c_uint, c_int, c_ulonglong};\n+use lib;\n use middle::trans::common::*;\n use middle::trans::machine::llsize_of_real;\n \n use core::prelude::*;\n use core::cast::transmute;\n use core::cast;\n+use core::libc::{c_uint, c_int, c_ulonglong};\n use core::libc;\n use core::option::Some;\n use core::ptr;\n use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n+use syntax::codemap::span;\n use syntax::codemap;\n \n pub fn terminate(cx: block, _: &str) {"}, {"sha": "fd149aa71e5762d3bb62bfbe6622173c61d82829", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -42,7 +42,7 @@ use syntax::print::pprust::expr_to_str;\n // roughly as follows:\n //\n // struct rust_opaque_box {         // see rust_internal.h\n-//   unsigned ref_count;            // only used for fn@()\n+//   unsigned ref_count;            // only used for @fn()\n //   type_desc *tydesc;             // describes closure_data struct\n //   rust_opaque_box *prev;         // (used internally by memory alloc)\n //   rust_opaque_box *next;         // (used internally by memory alloc)\n@@ -57,7 +57,7 @@ use syntax::print::pprust::expr_to_str;\n // };\n //\n // Note that the closure is itself a rust_opaque_box.  This is true\n-// even for fn~ and fn&, because we wish to keep binary compatibility\n+// even for ~fn and &fn, because we wish to keep binary compatibility\n // between all kinds of closures.  The allocation strategy for this\n // closure depends on the closure type.  For a sendfn, the closure\n // (and the referenced type descriptors) will be allocated in the\n@@ -440,11 +440,10 @@ pub fn trans_expr_fn(bcx: block,\n }\n \n pub fn make_closure_glue(\n-    cx: block,\n-    v: ValueRef,\n-    t: ty::t,\n-    glue_fn: fn@(block, v: ValueRef, t: ty::t) -> block) -> block\n-{\n+        cx: block,\n+        v: ValueRef,\n+        t: ty::t,\n+        glue_fn: @fn(block, v: ValueRef, t: ty::t) -> block) -> block {\n     let _icx = cx.insn_ctxt(\"closure::make_closure_glue\");\n     let bcx = cx;\n     let tcx = cx.tcx();\n@@ -483,7 +482,7 @@ pub fn make_opaque_cbox_take_glue(\n         }\n     }\n \n-    // fn~ requires a deep copy.\n+    // ~fn requires a deep copy.\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n     let llopaquecboxty = T_opaque_box_ptr(ccx);\n     let cbox_in = Load(bcx, cboxptr);"}, {"sha": "bd8bbfce5a419c6e605bbfdd0b34a7556ddea27b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -61,14 +61,15 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust::expr_to_str;\n use syntax::{ast, ast_map};\n \n-pub type namegen = fn@(~str) -> ident;\n+pub type namegen = @fn(~str) -> ident;\n pub fn new_namegen(intr: @ident_interner) -> namegen {\n-    return fn@(prefix: ~str) -> ident {\n+    let f: @fn(~str) -> ident = |prefix| {\n         // XXX: Bad copies.\n-        return intr.gensym(@fmt!(\"%s_%u\",\n-                                 prefix,\n-                                 intr.gensym(@copy prefix).repr))\n+        intr.gensym(@fmt!(\"%s_%u\",\n+                          prefix,\n+                          intr.gensym(@copy prefix).repr))\n     };\n+    f\n }\n \n pub type addrspace = c_uint;\n@@ -81,10 +82,11 @@ pub type addrspace = c_uint;\n pub const default_addrspace: addrspace = 0;\n pub const gc_box_addrspace: addrspace = 1;\n \n-pub type addrspace_gen = fn@() -> addrspace;\n+pub type addrspace_gen = @fn() -> addrspace;\n pub fn new_addrspace_gen() -> addrspace_gen {\n     let i = @mut 1;\n-    return fn@() -> addrspace { *i += 1; *i };\n+    let result: addrspace_gen = || { *i += 1; *i };\n+    result\n }\n \n pub struct tydesc_info {\n@@ -349,8 +351,8 @@ pub enum cleantype {\n }\n \n pub enum cleanup {\n-    clean(fn@(block) -> block, cleantype),\n-    clean_temp(ValueRef, fn@(block) -> block, cleantype),\n+    clean(@fn(block) -> block, cleantype),\n+    clean_temp(ValueRef, @fn(block) -> block, cleantype),\n }\n \n // Used to remember and reuse existing cleanup paths\n@@ -1034,7 +1036,7 @@ pub fn T_typaram_ptr(tn: @TypeNames) -> TypeRef {\n }\n \n pub fn T_opaque_cbox_ptr(cx: @CrateContext) -> TypeRef {\n-    // closures look like boxes (even when they are fn~ or fn&)\n+    // closures look like boxes (even when they are ~fn or &fn)\n     // see trans_closure.rs\n     return T_opaque_box_ptr(cx);\n }"}, {"sha": "d6c691f6667633864e6e7b95eea10226784eaac9", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -869,15 +869,12 @@ pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n       }\n       ast_map::node_expr(expr) => {\n         match /*bad*/copy expr.node {\n-          ast::expr_fn(_, decl, _, _) => {\n-            ((dbg_cx.names)(~\"fn\"), decl.output, expr.id)\n-          }\n           ast::expr_fn_block(decl, _) => {\n             ((dbg_cx.names)(~\"fn\"), decl.output, expr.id)\n           }\n           _ => fcx.ccx.sess.span_bug(expr.span,\n                                      ~\"create_function: \\\n-                                       expected an expr_fn or fn_block here\")\n+                                       expected an expr_fn_block here\")\n         }\n       }\n       ast_map::node_dtor(_, _, did, _) => {"}, {"sha": "74cebaee2da4fd684834ff0ba2d04eeded403ccf", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -619,7 +619,6 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_vec(*) | ast::expr_repeat(*) => {\n             return tvec::trans_fixed_vstore(bcx, expr, expr, dest);\n         }\n-        ast::expr_fn(_, ref decl, ref body, _) |\n         ast::expr_fn_block(ref decl, ref body) => {\n             let expr_ty = expr_ty(bcx, expr);\n             let sigil = ty::ty_closure_sigil(expr_ty);"}, {"sha": "de6d22cd6b899a8fc0be6a994f887ac1e1b7ee18", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -709,7 +709,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     return inf;\n }\n \n-pub type glue_helper = fn@(block, ValueRef, ty::t);\n+pub type glue_helper = @fn(block, ValueRef, ty::t);\n \n pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n                             +name: ~str) -> ValueRef {"}, {"sha": "3542b5acf05351b465a606e74d31228134bcbe97", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -520,9 +520,9 @@ pub fn get_base_and_len(bcx: block,\n     }\n }\n \n-pub type val_and_ty_fn = fn@(block, ValueRef, ty::t) -> Result;\n+pub type val_and_ty_fn = @fn(block, ValueRef, ty::t) -> Result;\n \n-pub type iter_vec_block = fn(block, ValueRef, ty::t) -> block;\n+pub type iter_vec_block = &fn(block, ValueRef, ty::t) -> block;\n \n pub fn iter_vec_raw(bcx: block, data_ptr: ValueRef, vec_ty: ty::t,\n                     fill: ValueRef, f: iter_vec_block) -> block {"}, {"sha": "7b7a6eee92e7c5bf5fc7cfa0720cdcf440b826ea", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -301,7 +301,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n             }\n         }\n       }\n-      expr_fn(*) | expr_fn_block(*) => {\n+      expr_fn_block(*) => {\n           match ty::ty_closure_sigil(ty::expr_ty(cx.ccx.tcx, e)) {\n               ast::OwnedSigil => {}\n               ast::BorrowedSigil | ast::ManagedSigil => {"}, {"sha": "0b0715dd9ca35fe07db051cf3d88351e1083fd6a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use driver::session::Session;\n use driver::session;\n use metadata::csearch;\n use metadata;\n@@ -22,7 +23,6 @@ use middle::resolve;\n use middle::ty;\n use middle::typeck;\n use middle;\n-use session::Session;\n use util::ppaux::{note_and_explain_region, bound_region_to_str};\n use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n use util::ppaux::{ty_to_str, tys_to_str};\n@@ -525,7 +525,7 @@ pub enum sty {\n     // \"Fake\" types, used for trans purposes\n     ty_type, // type_desc*\n     ty_opaque_box, // used by monomorphizer to represent any @ box\n-    ty_opaque_closure_ptr(Sigil), // ptr to env for fn, fn@, fn~\n+    ty_opaque_closure_ptr(Sigil), // ptr to env for &fn, @fn, ~fn\n     ty_unboxed_vec(mt),\n }\n \n@@ -1102,8 +1102,8 @@ pub pure fn mach_sty(cfg: @session::config, t: t) -> sty {\n }\n \n pub fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n-        // FIXME(#2202) --- We retain by-ref for fn& things to workaround a\n-        // memory leak that otherwise results when @fn is upcast to &fn.\n+    // FIXME(#2202) --- We retain by-ref for &fn things to workaround a\n+    // memory leak that otherwise results when @fn is upcast to &fn.\n     match ty::get(ty).sty {\n         ty::ty_closure(ClosureTy {sigil: ast::BorrowedSigil, _}) => {\n             return ast::by_ref;\n@@ -3124,7 +3124,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_tup(*) |\n         ast::expr_if(*) |\n         ast::expr_match(*) |\n-        ast::expr_fn(*) |\n         ast::expr_fn_block(*) |\n         ast::expr_loop_body(*) |\n         ast::expr_do_body(*) |"}, {"sha": "f724a442902f269e7e86a1c443fa002558bf9f2a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -389,7 +389,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n                      self_info: Option<SelfInfo>) {\n         let tcx = fcx.ccx.tcx;\n \n-        let assign = fn@(nid: ast::node_id, ty_opt: Option<ty::t>) {\n+        let assign: @fn(ast::node_id, Option<ty::t>) = |nid, ty_opt| {\n             match ty_opt {\n                 None => {\n                     // infer the variable's type\n@@ -432,8 +432,8 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n \n         // Add explicitly-declared locals.\n-        let visit_local = fn@(local: @ast::local,\n-                              &&e: (), v: visit::vt<()>) {\n+        let visit_local: @fn(@ast::local, &&e: (), visit::vt<()>) =\n+                |local, e, v| {\n             let o_ty = match local.node.ty.node {\n               ast::ty_infer => None,\n               _ => Some(fcx.to_ty(local.node.ty))\n@@ -447,7 +447,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         };\n \n         // Add pattern bindings.\n-        let visit_pat = fn@(p: @ast::pat, &&e: (), v: visit::vt<()>) {\n+        let visit_pat: @fn(@ast::pat, &&e: (), visit::vt<()>) = |p, e, v| {\n             match p.node {\n               ast::pat_ident(_, path, _)\n                   if pat_util::pat_is_binding(fcx.ccx.tcx.def_map, p) => {\n@@ -462,7 +462,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n             visit::visit_pat(p, e, v);\n         };\n \n-        let visit_block = fn@(b: &ast::blk, &&e: (), v: visit::vt<()>) {\n+        let visit_block: @fn(&ast::blk, &&e: (), visit::vt<()>) = |b, e, v| {\n             // non-obvious: the `blk` variable maps to region lb, so\n             // we have to keep this up-to-date.  This\n             // is... unfortunate.  It'd be nice to not need this.\n@@ -2373,10 +2373,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       ast::expr_match(discrim, ref arms) => {\n         bot = _match::check_match(fcx, expr, discrim, (/*bad*/copy *arms));\n       }\n-      ast::expr_fn(sigil, ref decl, ref body, _) => {\n-        check_expr_fn(fcx, expr, Some(sigil),\n-                      decl, body, Vanilla, expected);\n-      }\n       ast::expr_fn_block(ref decl, ref body) => {\n         check_expr_fn(fcx, expr, None,\n                       decl, body, Vanilla, expected);"}, {"sha": "8a7726650722082ca8806193780818790ea94a1d", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -282,7 +282,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @mut Rcx, v: rvt) {\n             guarantor::for_match(rcx, discr, *arms);\n         }\n \n-        ast::expr_fn(*) | ast::expr_fn_block(*) => {\n+        ast::expr_fn_block(*) => {\n             let function_type = rcx.resolve_node_type(expr.id);\n             match ty::get(function_type).sty {\n                 ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil,\n@@ -708,7 +708,6 @@ pub mod guarantor {\n             ast::expr_tup(*) |\n             ast::expr_if(*) |\n             ast::expr_match(*) |\n-            ast::expr_fn(*) |\n             ast::expr_fn_block(*) |\n             ast::expr_loop_body(*) |\n             ast::expr_do_body(*) |"}, {"sha": "b2d399ac8da493ee7c007cf2d55f26752e566e73", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -24,10 +24,10 @@ use util::common::indenter;\n use util::ppaux::tys_to_str;\n use util::ppaux;\n \n+use core::result::{Result, Ok, Err};\n use core::result;\n use core::uint;\n use core::vec;\n-use result::{Result, Ok, Err};\n use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "1ad89fe6f1e5e68e680eeb80345bcce063fc71da", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -552,13 +552,12 @@ use util::ppaux::note_and_explain_region;\n use core::cell::{Cell, empty_cell};\n use core::cmp;\n use core::dvec::DVec;\n+use core::result::{Err, Ok, Result};\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use result::Result;\n-use result::{Ok, Err};\n-use std::oldmap::HashMap;\n use std::list::{List, Nil, Cons};\n+use std::oldmap::HashMap;\n use syntax::codemap::span;\n use syntax::codemap;\n "}, {"sha": "8ab6a07a91018d31635fc8fb39618188f3fcaee6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -134,21 +134,21 @@ pub mod lib {\n     pub mod llvm;\n }\n \n-use result::{Ok, Err};\n-use io::ReaderUtil;\n+use driver::driver::{host_triple, optgroups, early_error};\n+use driver::driver::{str_input, file_input, build_session_options};\n+use driver::driver::{build_session, build_configuration, parse_pretty};\n+use driver::driver::{pp_mode, pretty_print_input, list_metadata};\n+use driver::driver::{compile_input};\n+use driver::session;\n+use middle::lint;\n+\n+use core::io::ReaderUtil;\n+use core::result::{Ok, Err};\n+use std::getopts::{groups, opt_present};\n use std::getopts;\n use std::oldmap::HashMap;\n-use getopts::{opt_present};\n-use getopts::groups;\n use syntax::codemap;\n use syntax::diagnostic;\n-use driver::driver::{host_triple, optgroups, early_error,\n-                     str_input, file_input, build_session_options,\n-                     build_session, build_configuration, parse_pretty,\n-                     pp_mode, pretty_print_input, list_metadata,\n-                     compile_input};\n-use driver::session;\n-use middle::lint;\n \n pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n@@ -315,7 +315,7 @@ diagnostic emitter which records when we hit a fatal error. If the task\n fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n-pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n+pub fn monitor(+f: ~fn(diagnostic::Emitter)) {\n     use core::cell::Cell;\n     use core::comm::*;\n     let (p, ch) = stream();\n@@ -326,8 +326,10 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n         let ch_capture = ch.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n-        let demitter = fn@(cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n-                           msg: &str, lvl: diagnostic::level) {\n+        let demitter: @fn(Option<(@codemap::CodeMap, codemap::span)>,\n+                          &str,\n+                          diagnostic::level) =\n+                          |cmsp, msg, lvl| {\n             if lvl == diagnostic::fatal {\n                 ch_capture.send(fatal);\n             }"}, {"sha": "8729ca5f6e170874d313a3c4005f2fce8267a09d", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -59,7 +59,7 @@ pub fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn loop_query(b: &ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n+pub fn loop_query(b: &ast::blk, p: @fn(ast::expr_) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         &&flag: @mut bool,\n@@ -82,7 +82,7 @@ pub fn loop_query(b: &ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n \n // Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n-pub fn block_query(b: &ast::blk, p: fn@(@ast::expr) -> bool) -> bool {\n+pub fn block_query(b: &ast::blk, p: @fn(@ast::expr) -> bool) -> bool {\n     let rs = @mut false;\n     let visit_expr: @fn(@ast::expr,\n                         &&flag: @mut bool,"}, {"sha": "03410ee30fc735ef90a0b6beefbf204a2e8afaa7", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -46,12 +46,12 @@ pub struct Ctxt {\n     ast_map: ast_map::map\n }\n \n-type SrvOwner<T> = fn(srv: Srv) -> T;\n-pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n-type Parser = fn~(Session, s: ~str) -> @ast::crate;\n+type SrvOwner<T> = &fn(srv: Srv) -> T;\n+pub type CtxtHandler<T> = ~fn(ctxt: Ctxt) -> T;\n+type Parser = ~fn(Session, s: ~str) -> @ast::crate;\n \n enum Msg {\n-    HandleRequest(fn~(Ctxt)),\n+    HandleRequest(~fn(Ctxt)),\n     Exit\n }\n \n@@ -117,12 +117,10 @@ fn act(po: &Port<Msg>, source: ~str, parse: Parser) {\n \n pub fn exec<T:Owned>(\n     srv: Srv,\n-    f: fn~(ctxt: Ctxt) -> T\n+    f: ~fn(ctxt: Ctxt) -> T\n ) -> T {\n     let (po, ch) = stream();\n-    let msg = HandleRequest(fn~(ctxt: Ctxt) {\n-        ch.send(f(ctxt))\n-    });\n+    let msg = HandleRequest(|ctxt| ch.send(f(ctxt)));\n     srv.ch.send(msg);\n     po.recv()\n }"}, {"sha": "28322450c4daabcea07e4ab3a0fbe31fe2e0ff0b", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -114,7 +114,7 @@ fn fold_item(\n fn parse_item_attrs<T:Owned>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n-    parse_attrs: fn~(a: ~[ast::attribute]) -> T) -> T {\n+    parse_attrs: ~fn(a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |ctxt| {\n         let attrs = match ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,"}, {"sha": "21c0393f68f6f1791486b675340f406f716b62d9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -85,7 +85,7 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n }\n \n pub fn usage() {\n-    use io::println;\n+    use core::io::println;\n \n     println(~\"Usage: rustdoc [options] <cratefile>\\n\");\n     println(~\"Options:\\n\");\n@@ -105,7 +105,7 @@ pub fn default_config(input_crate: &Path) -> Config {\n     }\n }\n \n-type Process = fn~((&str), (&[~str])) -> ProgramOutput;\n+type Process = ~fn((&str), (&[~str])) -> ProgramOutput;\n \n pub fn mock_program_output(_prog: &str, _args: &[~str]) -> ProgramOutput {\n     ProgramOutput {\n@@ -262,11 +262,8 @@ fn should_find_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n-        -> ProgramOutput {\n-        ProgramOutput {\n-            status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n-        }\n+    let mock_program_output: ~fn(&str, &[~str]) -> ProgramOutput = |prog, _| {\n+        ProgramOutput { status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\" }\n     };\n     let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Ok(Some(~\"pandoc\"));\n@@ -278,11 +275,8 @@ fn should_error_with_no_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n-        -> ProgramOutput {\n-        ProgramOutput {\n-            status: 1, out: ~\"\", err: ~\"\"\n-        }\n+    let mock_program_output: ~fn(&str, &[~str]) -> ProgramOutput = |_, _| {\n+        ProgramOutput { status: 1, out: ~\"\", err: ~\"\" }\n     };\n     let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Err(~\"couldn't find pandoc\");"}, {"sha": "b37f8f8443e5ef189ff9f3166eda748ed3a6ef75", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -162,7 +162,6 @@ fn pandoc_header_id(header: &str) -> ~str {\n #[test]\n fn should_remove_punctuation_from_headers() {\n     assert pandoc_header_id(~\"impl foo of bar<A>\") == ~\"impl-foo-of-bara\";\n-    assert pandoc_header_id(~\"fn@(~[~A])\") == ~\"fna\";\n     assert pandoc_header_id(~\"impl of num::num for int\")\n         == ~\"impl-of-numnum-for-int\";\n     assert pandoc_header_id(~\"impl of num::num for int/&\")"}, {"sha": "020073f9b89db261acbf07710f6128fcc74fd0c6", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -34,8 +34,8 @@ pub enum WriteInstr {\n     Done\n }\n \n-pub type Writer = fn~(v: WriteInstr);\n-pub type WriterFactory = fn~(page: doc::Page) -> Writer;\n+pub type Writer = ~fn(v: WriteInstr);\n+pub type WriterFactory = ~fn(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n     fn write_str(&self, +str: ~str);\n@@ -69,15 +69,17 @@ pub fn make_writer_factory(config: config::Config) -> WriterFactory {\n }\n \n fn markdown_writer_factory(config: config::Config) -> WriterFactory {\n-    fn~(page: doc::Page) -> Writer {\n+    let result: ~fn(page: doc::Page) -> Writer = |page| {\n         markdown_writer(copy config, page)\n-    }\n+    };\n+    result\n }\n \n fn pandoc_writer_factory(config: config::Config) -> WriterFactory {\n-    fn~(page: doc::Page) -> Writer {\n+    let result: ~fn(doc::Page) -> Writer = |page| {\n         pandoc_writer(copy config, page)\n-    }\n+    };\n+    result\n }\n \n fn markdown_writer(\n@@ -108,7 +110,7 @@ fn pandoc_writer(\n     ];\n \n     do generic_writer |markdown| {\n-        use io::WriterUtil;\n+        use core::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n         debug!(\"pandoc args: %s\", str::connect(pandoc_args, ~\" \"));\n@@ -167,7 +169,7 @@ fn readclose(fd: libc::c_int) -> ~str {\n     }\n }\n \n-fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n+fn generic_writer(process: ~fn(markdown: ~str)) -> Writer {\n     let (po, ch) = stream::<WriteInstr>();\n     do task::spawn || {\n         let mut markdown = ~\"\";\n@@ -180,9 +182,8 @@ fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n         }\n         process(markdown);\n     };\n-    fn~(instr: WriteInstr) {\n-        ch.send(instr);\n-    }\n+    let result: ~fn(instr: WriteInstr) = |instr| ch.send(instr);\n+    result\n }\n \n fn make_local_filename(\n@@ -281,7 +282,7 @@ mod test {\n }\n \n fn write_file(path: &Path, s: ~str) {\n-    use io::WriterUtil;\n+    use core::io::WriterUtil;\n \n     match io::file_writer(path, ~[io::Create, io::Truncate]) {\n       result::Ok(writer) => {\n@@ -295,7 +296,7 @@ pub fn future_writer_factory(\n ) -> (WriterFactory, Port<(doc::Page, ~str)>) {\n     let (markdown_po, markdown_ch) = stream();\n     let markdown_ch = SharedChan(markdown_ch);\n-    let writer_factory = fn~(page: doc::Page) -> Writer {\n+    let writer_factory: WriterFactory = |page| {\n         let (writer_po, writer_ch) = comm::stream();\n         let markdown_ch = markdown_ch.clone();\n         do task::spawn || {\n@@ -312,9 +313,7 @@ pub fn future_writer_factory(\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n     let (port, chan) = comm::stream();\n-    let writer = fn~(instr: WriteInstr) {\n-        chan.send(copy instr);\n-    };\n+    let writer: ~fn(instr: WriteInstr) = |instr| chan.send(copy instr);\n     let future = do future::from_fn || {\n         let mut res = ~\"\";\n         loop {"}, {"sha": "54f1a779bcc65b6ecc26ebeb22e869082d44a6b0", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -31,41 +31,41 @@ extern mod syntax(vers = \"0.6\");\n use core::*;\n use std::par;\n \n-mod pass;\n-mod config;\n-mod parse;\n-mod extract;\n-mod attr_parser;\n-mod doc;\n-mod markdown_index_pass;\n-mod markdown_pass;\n-mod markdown_writer;\n-mod fold;\n-mod path_pass;\n-mod attr_pass;\n-mod tystr_pass;\n-mod prune_hidden_pass;\n-mod desc_to_brief_pass;\n-mod text_pass;\n-mod unindent_pass;\n-mod trim_pass;\n-mod astsrv;\n-mod demo;\n-mod sort_pass;\n-mod sort_item_name_pass;\n-mod sort_item_type_pass;\n-mod page_pass;\n-mod sectionalize_pass;\n-mod escape_pass;\n-mod prune_private_pass;\n-mod util;\n+pub mod pass;\n+pub mod config;\n+pub mod parse;\n+pub mod extract;\n+pub mod attr_parser;\n+pub mod doc;\n+pub mod markdown_index_pass;\n+pub mod markdown_pass;\n+pub mod markdown_writer;\n+pub mod fold;\n+pub mod path_pass;\n+pub mod attr_pass;\n+pub mod tystr_pass;\n+pub mod prune_hidden_pass;\n+pub mod desc_to_brief_pass;\n+pub mod text_pass;\n+pub mod unindent_pass;\n+pub mod trim_pass;\n+pub mod astsrv;\n+pub mod demo;\n+pub mod sort_pass;\n+pub mod sort_item_name_pass;\n+pub mod sort_item_type_pass;\n+pub mod page_pass;\n+pub mod sectionalize_pass;\n+pub mod escape_pass;\n+pub mod prune_private_pass;\n+pub mod util;\n \n use doc::ItemUtils;\n use doc::Item;\n use pass::Pass;\n use config::Config;\n \n-fn main() {\n+pub fn main() {\n     let args = os::args();\n \n     if args.contains(&~\"-h\") || args.contains(&~\"--help\") {\n@@ -144,7 +144,7 @@ fn run(config: Config) {\n     }\n }\n \n-fn time<T>(what: ~str, f: fn() -> T) -> T {\n+pub fn time<T>(what: ~str, f: fn() -> T) -> T {\n     let start = std::time::precise_time_s();\n     let rv = f();\n     let end = std::time::precise_time_s();"}, {"sha": "603480f907c06d6f0d0e85fc6446bda4a46fecdd", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -27,14 +27,14 @@ extern mod rustc(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-use io::{ReaderUtil, WriterUtil};\n-use std::{json, semver, getopts};\n-use std::net::url;\n-use hashmap::linear::LinearMap;\n-use rustc::metadata::filesearch;\n+use core::hashmap::linear::LinearMap;\n+use core::io::{ReaderUtil, WriterUtil};\n use rustc::driver::{driver, session};\n-use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n+use rustc::metadata::filesearch;\n+use std::net::url;\n+use std::{json, semver, getopts};\n use syntax::codemap::spanned;\n+use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n \n mod usage;\n mod util;\n@@ -926,7 +926,7 @@ pub struct Crate {\n \n pub struct Listener {\n     cmds: ~[~str],\n-    cb: fn~()\n+    cb: ~fn()\n }\n \n pub fn run(listeners: ~[Listener]) {"}, {"sha": "bd2dd102e45ce384c5509213f4d355c5eafa2038", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use Listener;\n+\n use core::*;\n-use hashmap::linear::LinearMap;\n-use rustc::metadata::filesearch;\n+use core::hashmap::linear::LinearMap;\n use rustc::driver::{driver, session};\n-use syntax::ast_util::*;\n-use syntax::{ast, attr, codemap, diagnostic, fold, parse, visit};\n-use codemap::{span, dummy_sp, spanned};\n+use rustc::metadata::filesearch;\n+use std::getopts::groups::getopts;\n use std::semver;\n use std::{json, term, sort, getopts};\n-use getopts::groups::getopts;\n-use Listener;\n-\n+use syntax::ast_util::*;\n+use syntax::codemap::{span, dummy_sp, spanned};\n use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::ext::build;\n+use syntax::{ast, attr, codemap, diagnostic, fold, parse, visit};\n \n pub struct Package {\n     id: ~str,"}, {"sha": "5212a17f373745d565ed141ba1bbfa2d2c9b6ea7", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -865,7 +865,7 @@ pub impl BigInt {\n mod biguint_tests {\n \n     use core::*;\n-    use num::{IntConvertible, Zero, One};\n+    use core::num::{IntConvertible, Zero, One};\n     use super::{BigInt, BigUint, BigDigit};\n \n     #[test]"}, {"sha": "30538a129425a5eae0f6f9a1c9b3b1e44f8fa6df", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -53,7 +53,7 @@ pub struct CVec<T> {\n }\n \n struct DtorRes {\n-  dtor: Option<fn@()>,\n+  dtor: Option<@fn()>,\n }\n \n impl Drop for DtorRes {\n@@ -65,7 +65,7 @@ impl Drop for DtorRes {\n     }\n }\n \n-fn DtorRes(dtor: Option<fn@()>) -> DtorRes {\n+fn DtorRes(dtor: Option<@fn()>) -> DtorRes {\n     DtorRes {\n         dtor: dtor\n     }\n@@ -102,7 +102,7 @@ pub unsafe fn CVec<T>(base: *mut T, len: uint) -> CVec<T> {\n  * * dtor - A function to run when the value is destructed, useful\n  *          for freeing the buffer, etc.\n  */\n-pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: fn@())\n+pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: @fn())\n   -> CVec<T> {\n     return CVec{\n         base: base,"}, {"sha": "42f954f7c390d08e9a3ea570ee6a49ea251b4682", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -771,10 +771,10 @@ mod test {\n         writer_chan: WriterChanFactory<F>,\n         port: uint) {\n \n-        use net::tcp;\n+        use core::cell::Cell;\n         use net::ip;\n-        use cell::Cell;\n         use net::tcp::TcpSocket;\n+        use net::tcp;\n         use uv;\n \n         // Indicate to the client task that the server is listening"}, {"sha": "990c37ce807ec773003cfd78724b387ab4108564", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -37,13 +37,13 @@ pub struct Future<A> {\n }\n \n // FIXME(#2829) -- futures should not be copyable, because they close\n-// over fn~'s that have pipes and so forth within!\n+// over ~fn's that have pipes and so forth within!\n impl<A> Drop for Future<A> {\n     fn finalize(&self) {}\n }\n \n priv enum FutureState<A> {\n-    Pending(fn~() -> A),\n+    Pending(~fn() -> A),\n     Evaluating,\n     Forced(A)\n }\n@@ -125,7 +125,7 @@ pub fn from_fn<A>(f: ~fn() -> A) -> Future<A> {\n     Future {state: Pending(f)}\n }\n \n-pub fn spawn<A:Owned>(blk: fn~() -> A) -> Future<A> {\n+pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n     /*!\n      * Create a future from a unique closure.\n      *"}, {"sha": "5b116705698fd48ff81c694eec0cc1bd47ade29f", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -625,8 +625,8 @@ pub fn accept(new_conn: TcpNewConnection)\n  */\n pub fn listen(host_ip: ip::IpAddr, port: uint, backlog: uint,\n               iotask: &IoTask,\n-              on_establish_cb: fn~(SharedChan<Option<TcpErrData>>),\n-              new_connect_cb: fn~(TcpNewConnection,\n+              on_establish_cb: ~fn(SharedChan<Option<TcpErrData>>),\n+              new_connect_cb: ~fn(TcpNewConnection,\n                                   SharedChan<Option<TcpErrData>>))\n     -> result::Result<(), TcpListenErrData> {\n     do listen_common(host_ip, port, backlog, iotask,\n@@ -643,11 +643,13 @@ pub fn listen(host_ip: ip::IpAddr, port: uint, backlog: uint,\n     }\n }\n \n-fn listen_common(host_ip: ip::IpAddr, port: uint, backlog: uint,\n-          iotask: &IoTask,\n-          on_establish_cb: fn~(SharedChan<Option<TcpErrData>>),\n-          on_connect_cb: fn~(*uv::ll::uv_tcp_t))\n-    -> result::Result<(), TcpListenErrData> {\n+fn listen_common(host_ip: ip::IpAddr,\n+                 port: uint,\n+                 backlog: uint,\n+                 iotask: &IoTask,\n+                 on_establish_cb: ~fn(SharedChan<Option<TcpErrData>>),\n+                 on_connect_cb: ~fn(*uv::ll::uv_tcp_t))\n+              -> result::Result<(), TcpListenErrData> {\n     unsafe {\n         let (stream_closed_po, stream_closed_ch) = stream::<()>();\n         let stream_closed_ch = SharedChan(stream_closed_ch);\n@@ -1197,7 +1199,7 @@ struct TcpListenFcData {\n     server_stream_ptr: *uv::ll::uv_tcp_t,\n     stream_closed_ch: SharedChan<()>,\n     kill_ch: SharedChan<Option<TcpErrData>>,\n-    on_connect_cb: fn~(*uv::ll::uv_tcp_t),\n+    on_connect_cb: ~fn(*uv::ll::uv_tcp_t),\n     iotask: IoTask,\n     ipv6: bool,\n     mut active: bool,"}, {"sha": "d65921f910cb4ac009e83caa865c12c21de06ce0", "filename": "src/libstd/par.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -94,24 +94,24 @@ pub fn map<A:Copy + Owned,B:Copy + Owned>(\n     xs: &[A], fn_factory: &fn() -> ~fn(&A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(_base: uint, slice : &[A]) -> ~[B] {\n-            vec::map(slice, |x| f(x))\n-        }\n+        let result: ~fn(uint, &[A]) -> ~[B] =\n+            |_, slice| vec::map(slice, |x| f(x));\n+        result\n     }))\n }\n \n /// A parallel version of mapi.\n pub fn mapi<A:Copy + Owned,B:Copy + Owned>(\n-    xs: &[A],\n-    fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B]\n-{\n+        xs: &[A],\n+        fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A]) -> ~[B] {\n+        let result: ~fn(uint, &[A]) -> ~[B] = |base, slice| {\n             vec::mapi(slice, |i, x| {\n                 f(i + base, x)\n             })\n-        }\n+        };\n+        result\n     });\n     let r = vec::concat(slices);\n     log(info, (r.len(), xs.len()));\n@@ -126,11 +126,12 @@ pub fn alli<A:Copy + Owned>(\n {\n     do vec::all(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(base: uint, slice : &[A]) -> bool {\n+        let result: ~fn(uint, &[A]) -> bool = |base, slice| {\n             vec::alli(slice, |i, x| {\n                 f(i + base, x)\n             })\n-        }\n+        };\n+        result\n     })) |x| { *x }\n }\n \n@@ -140,8 +141,8 @@ pub fn any<A:Copy + Owned>(\n     fn_factory: &fn() -> ~fn(&A) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         let f = fn_factory();\n-        fn~(_base : uint, slice: &[A]) -> bool {\n-            vec::any(slice, |x| f(x))\n-        }\n+        let result: ~fn(uint, &[A]) -> bool =\n+            |_, slice| vec::any(slice, |x| f(x));\n+        result\n     })) |x| { *x }\n }"}, {"sha": "7c7f3390f2e93f56c929ca76eed971a0aa70537d", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,14 +10,14 @@\n \n //! Semver parsing and logic\n \n-use io;\n-use io::{ReaderUtil};\n-use option::{Option, Some, None};\n-use uint;\n-use str;\n-use to_str::ToStr;\n-use char;\n+use core::char;\n use core::cmp;\n+use core::io::{ReaderUtil};\n+use core::io;\n+use core::option::{Option, Some, None};\n+use core::str;\n+use core::to_str::ToStr;\n+use core::uint;\n \n #[deriving_eq]\n pub enum Identifier {"}, {"sha": "f29872bf3871243a6ff4e5897a6af79463232ca0", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -113,7 +113,7 @@ pub mod serialize;\n // 'std' so that macro-expanded references to std::serialize and such\n // can be resolved within libcore.\n #[doc(hidden)] // FIXME #3538\n-mod std {\n+pub mod std {\n     pub use serialize;\n     pub use test;\n }"}, {"sha": "4ffa9b01d2b10c0232b84196152ba83b84fe4aae", "filename": "src/libstd/test.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -409,7 +409,7 @@ type MonitorMsg = (TestDesc, TestResult);\n \n fn run_tests(opts: &TestOpts,\n              tests: ~[TestDescAndFn],\n-             callback: fn@(e: TestEvent)) {\n+             callback: @fn(e: TestEvent)) {\n     let mut filtered_tests = filter_tests(opts, tests);\n \n     let filtered_descs = filtered_tests.map(|t| t.desc);\n@@ -537,7 +537,7 @@ pub fn filter_tests(\n \n struct TestFuture {\n     test: TestDesc,\n-    wait: fn@() -> TestResult,\n+    wait: @fn() -> TestResult,\n }\n \n pub fn run_test(force_ignore: bool,\n@@ -594,15 +594,14 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n }\n \n pub mod bench {\n-\n-    use rand;\n-    use u64;\n-    use vec;\n     use time::precise_time_ns;\n     use test::{BenchHarness, BenchSamples};\n     use stats::Stats;\n-    use num;\n-    use rand;\n+\n+    use core::num;\n+    use core::rand;\n+    use core::u64;\n+    use core::vec;\n \n     pub impl BenchHarness {\n \n@@ -783,7 +782,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(fn~() { f()}),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -801,7 +800,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(fn~() { f()}),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -820,7 +819,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(fn~() { f() }),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -838,7 +837,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(fn~() { f() }),\n+            testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan(ch);\n@@ -891,15 +890,15 @@ mod tests {\n                     ignore: true,\n                     should_fail: false,\n                 },\n-                testfn: DynTestFn(fn~() { }),\n+                testfn: DynTestFn(|| {}),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n                     should_fail: false\n                 },\n-                testfn: DynTestFn(fn~() { }),\n+                testfn: DynTestFn(|| {}),\n             },\n         ];\n         let filtered = filter_tests(&opts, tests);"}, {"sha": "7bd411315b225154095fb50686a4d68b69c53289", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -221,7 +221,7 @@ mod test {\n                 let ch = ch.clone();\n                 let hl_loop_clone = hl_loop.clone();\n                 do task::spawn {\n-                    use rand::*;\n+                    use core::rand::*;\n                     let rng = Rng();\n                     for iter::repeat(times) {\n                         sleep(&hl_loop_clone, rng.next() as uint % maxms);"}, {"sha": "daf90f345e052b6ba3d02474af6921629e7488fe", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,21 +12,20 @@\n \n use ll = uv_ll;\n use iotask = uv_iotask;\n-use get_gl = get;\n+use get_gl = self::get;\n use uv_iotask::{IoTask, spawn_iotask};\n \n+use core::clone::Clone;\n+use core::comm::{Port, Chan, SharedChan, select2i};\n use core::either::{Left, Right};\n use core::libc;\n-use core::comm::{Port, Chan, SharedChan, select2i};\n-use core::unstable::global::{global_data_clone_create,\n-                            global_data_clone};\n-use core::unstable::weak_task::weaken_task;\n+use core::option::{Some, None};\n use core::str;\n use core::task::{task, SingleThreaded, spawn};\n use core::task;\n+use core::unstable::global::{global_data_clone_create, global_data_clone};\n+use core::unstable::weak_task::weaken_task;\n use core::vec;\n-use core::clone::Clone;\n-use core::option::{Some, None};\n \n /**\n  * Race-free helper to get access to a global task where a libuv\n@@ -98,7 +97,7 @@ fn get_monitor_task_gl() -> IoTask {\n \n fn spawn_loop() -> IoTask {\n     let builder = do task().add_wrapper |task_body| {\n-        fn~() {\n+        let result: ~fn() = || {\n             // The I/O loop task also needs to be weak so it doesn't keep\n             // the runtime alive\n             unsafe {\n@@ -113,7 +112,8 @@ fn spawn_loop() -> IoTask {\n                     debug!(\"global libuv task is leaving weakened state\");\n                 }\n             }\n-        }\n+        };\n+        result\n     };\n     let builder = builder.unlinked();\n     spawn_iotask(builder)\n@@ -123,7 +123,7 @@ fn spawn_loop() -> IoTask {\n mod test {\n     use core::prelude::*;\n \n-    use get_gl = get;\n+    use get_gl = uv_global_loop::get;\n     use uv::iotask;\n     use uv::ll;\n     use uv_global_loop::*;"}, {"sha": "6179b10f3c373bcdfed3d92b2d0c692736291e5a", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -76,8 +76,7 @@ pub fn spawn_iotask(task: task::TaskBuilder) -> IoTask {\n  * module. It is not safe to send the `loop_ptr` param to this callback out\n  * via ports/chans.\n  */\n-pub unsafe fn interact(iotask: &IoTask,\n-                   cb: fn~(*c_void)) {\n+pub unsafe fn interact(iotask: &IoTask, cb: ~fn(*c_void)) {\n     send_msg(iotask, Interaction(cb));\n }\n \n@@ -98,7 +97,7 @@ pub fn exit(iotask: &IoTask) {\n // INTERNAL API\n \n enum IoTaskMsg {\n-    Interaction (fn~(*libc::c_void)),\n+    Interaction(~fn(*libc::c_void)),\n     TeardownLoop\n }\n "}, {"sha": "7f47db3750419ee295a04c74c813db8c7b1712f4", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -396,7 +396,7 @@ fn unwrap<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n \n //#[test]\n fn test() {\n-    use io::WriterUtil;\n+    use core::io::WriterUtil;\n \n     let db = @Mut(Database { db_filename: Path(\"db.json\"),\n                              db_cache: LinearMap::new(),"}, {"sha": "cec35b429b43b7236e2189c123a4b53bb8829805", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -571,10 +571,6 @@ pub enum expr_ {\n        (implicit) condition is always true. */\n     expr_loop(blk, Option<ident>),\n     expr_match(@expr, ~[arm]),\n-\n-    // FIXME(#4717) the @() is req'd on windows or else LLVM croaks\n-    expr_fn(Sigil, fn_decl, blk, @()),\n-\n     expr_fn_block(fn_decl, blk),\n     // Inner expr is always an expr_fn_block. We need the wrapping node to\n     // easily type this (a function returning nil on the inside but bool on"}, {"sha": "96f4dadb3dbe9fce56260ebb84dbde0314848219", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 22, "deletions": 53, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -396,8 +396,8 @@ pub fn empty(range: id_range) -> bool {\n     range.min >= range.max\n }\n \n-pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n-    let visit_generics = fn@(generics: &Generics) {\n+pub fn id_visitor(vfn: @fn(node_id)) -> visit::vt<()> {\n+    let visit_generics: @fn(&Generics) = |generics| {\n         for generics.ty_params.each |p| {\n             vfn(p.id);\n         }\n@@ -408,7 +408,7 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n     visit::mk_simple_visitor(@visit::SimpleVisitor {\n         visit_mod: |_m, _sp, id| vfn(id),\n \n-        visit_view_item: fn@(vi: @view_item) {\n+        visit_view_item: |vi| {\n             match vi.node {\n               view_item_extern_mod(_, _, id) => vfn(id),\n               view_item_use(ref vps) => {\n@@ -423,11 +423,9 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_foreign_item: fn@(ni: @foreign_item) {\n-            vfn(ni.id)\n-        },\n+        visit_foreign_item: |ni| vfn(ni.id),\n \n-        visit_item: fn@(i: @item) {\n+        visit_item: |i| {\n             vfn(i.id);\n             match i.node {\n               item_enum(ref enum_definition, _) =>\n@@ -436,36 +434,21 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_local: fn@(l: @local) {\n-            vfn(l.node.id);\n-        },\n-\n-        visit_block: fn@(b: &blk) {\n-            vfn(b.node.id);\n-        },\n-\n-        visit_stmt: fn@(s: @stmt) {\n-            vfn(ast_util::stmt_id(*s));\n-        },\n-\n-        visit_arm: fn@(_a: &arm) { },\n-\n-        visit_pat: fn@(p: @pat) {\n-            vfn(p.id)\n-        },\n-\n-        visit_decl: fn@(_d: @decl) {\n-        },\n+        visit_local: |l| vfn(l.node.id),\n+        visit_block: |b| vfn(b.node.id),\n+        visit_stmt: |s| vfn(ast_util::stmt_id(*s)),\n+        visit_arm: |_| {},\n+        visit_pat: |p| vfn(p.id),\n+        visit_decl: |_| {},\n \n-        visit_expr: fn@(e: @expr) {\n+        visit_expr: |e| {\n             vfn(e.callee_id);\n             vfn(e.id);\n         },\n \n-        visit_expr_post: fn@(_e: @expr) {\n-        },\n+        visit_expr_post: |_| {},\n \n-        visit_ty: fn@(t: @Ty) {\n+        visit_ty: |t| {\n             match t.node {\n               ty_path(_, id) => vfn(id),\n               _ => { /* fall through */ }\n@@ -474,8 +457,7 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n \n         visit_generics: visit_generics,\n \n-        visit_fn: fn@(fk: &visit::fn_kind, d: &ast::fn_decl,\n-                      _b: &ast::blk, _sp: span, id: ast::node_id) {\n+        visit_fn: |fk, d, _, _, id| {\n             vfn(id);\n \n             match *fk {\n@@ -502,32 +484,19 @@ pub fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n             }\n         },\n \n-        visit_ty_method: fn@(_ty_m: &ty_method) {\n-        },\n-\n-        visit_trait_method: fn@(_ty_m: &trait_method) {\n-        },\n-\n-        visit_struct_def: fn@(_sd: @struct_def,\n-                              _id: ident,\n-                              _generics: &Generics,\n-                              _id: node_id) {\n-        },\n-\n-        visit_struct_field: fn@(f: @struct_field) {\n-            vfn(f.node.id);\n-        },\n-\n-        visit_struct_method: fn@(_m: @method) {\n-        }\n+        visit_ty_method: |_| {},\n+        visit_trait_method: |_| {},\n+        visit_struct_def: |_, _, _, _| {},\n+        visit_struct_field: |f| vfn(f.node.id),\n+        visit_struct_method: |_| {}\n     })\n }\n \n-pub fn visit_ids_for_inlined_item(item: inlined_item, vfn: fn@(node_id)) {\n+pub fn visit_ids_for_inlined_item(item: inlined_item, vfn: @fn(node_id)) {\n     item.accept((), id_visitor(vfn));\n }\n \n-pub fn compute_id_range(visit_ids_fn: fn(fn@(node_id))) -> id_range {\n+pub fn compute_id_range(visit_ids_fn: &fn(@fn(node_id))) -> id_range {\n     let min = @mut int::max_value;\n     let max = @mut int::min_value;\n     do visit_ids_fn |id| {"}, {"sha": "ba4ec7fb6db2795fcda2eb5a304db6b0eb48a01d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -23,8 +23,9 @@ use core::dvec::DVec;\n \n use std::term;\n \n-pub type Emitter = fn@(cmsp: Option<(@codemap::CodeMap, span)>,\n-                   msg: &str, lvl: level);\n+pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,\n+                       msg: &str,\n+                       lvl: level);\n \n // a handler deals with errors; certain errors\n // (fatal, bug, unimpl) may cause immediate exit,\n@@ -204,8 +205,7 @@ fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n }\n \n pub fn collect(messages: @DVec<~str>)\n-    -> fn@(Option<(@codemap::CodeMap, span)>, &str, level)\n-{\n+            -> @fn(Option<(@codemap::CodeMap, span)>, &str, level) {\n     let f: @fn(Option<(@codemap::CodeMap, span)>, &str, level) =\n         |_o, msg: &str, _l| { messages.push(msg.to_str()); };\n     f"}, {"sha": "b3d3358e5861ee25cb9d7d4e049d95f80b56507e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -37,29 +37,39 @@ pub struct MacroDef {\n     ext: SyntaxExtension\n }\n \n-pub type ItemDecorator =\n-    fn@(ext_ctxt, span, @ast::meta_item, ~[@ast::item]) -> ~[@ast::item];\n+pub type ItemDecorator = @fn(ext_ctxt,\n+                             span,\n+                             @ast::meta_item,\n+                             ~[@ast::item])\n+                          -> ~[@ast::item];\n \n pub struct SyntaxExpanderTT {\n     expander: SyntaxExpanderTTFun,\n     span: Option<span>\n }\n \n-pub type SyntaxExpanderTTFun\n-    = fn@(ext_ctxt, span, &[ast::token_tree]) -> MacResult;\n+pub type SyntaxExpanderTTFun = @fn(ext_ctxt,\n+                                   span,\n+                                   &[ast::token_tree])\n+                                -> MacResult;\n \n pub struct SyntaxExpanderTTItem {\n     expander: SyntaxExpanderTTItemFun,\n     span: Option<span>\n }\n \n-pub type SyntaxExpanderTTItemFun\n-    = fn@(ext_ctxt, span, ast::ident, ~[ast::token_tree]) -> MacResult;\n+pub type SyntaxExpanderTTItemFun = @fn(ext_ctxt,\n+                                       span,\n+                                       ast::ident,\n+                                       ~[ast::token_tree])\n+                                    -> MacResult;\n \n pub enum MacResult {\n     MRExpr(@ast::expr),\n     MRItem(@ast::item),\n-    MRAny(fn@()-> @ast::expr, fn@()-> Option<@ast::item>, fn@()->@ast::stmt),\n+    MRAny(@fn() -> @ast::expr,\n+          @fn() -> Option<@ast::item>,\n+          @fn() -> @ast::stmt),\n     MRDef(MacroDef)\n }\n "}, {"sha": "c8fb83224ac74b2201e5dcdae84de31eb512ca5e", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -15,7 +15,7 @@\n  * interface.\n  */\n \n-use prelude::*;\n+use core::prelude::*;\n \n use ast;\n use codemap::span;"}, {"sha": "858ce4b17a3ef7dbcad154c8f2cf3199913c4067", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -26,9 +26,12 @@ use core::option;\n use core::vec;\n use core::hashmap::LinearMap;\n \n-pub fn expand_expr(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                   e: &expr_, s: span, fld: ast_fold,\n-                   orig: fn@(&expr_, span, ast_fold) -> (expr_, span))\n+pub fn expand_expr(extsbox: @mut SyntaxEnv,\n+                   cx: ext_ctxt,\n+                   e: &expr_,\n+                   s: span,\n+                   fld: ast_fold,\n+                   orig: @fn(&expr_, span, ast_fold) -> (expr_, span))\n                 -> (expr_, span) {\n     match *e {\n         // expr_mac should really be expr_ext or something; it's the\n@@ -105,9 +108,11 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n //\n // NB: there is some redundancy between this and expand_item, below, and\n // they might benefit from some amount of semantic and language-UI merger.\n-pub fn expand_mod_items(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                        module_: &ast::_mod, fld: ast_fold,\n-                        orig: fn@(&ast::_mod, ast_fold) -> ast::_mod)\n+pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n+                        cx: ext_ctxt,\n+                        module_: &ast::_mod,\n+                        fld: ast_fold,\n+                        orig: @fn(&ast::_mod, ast_fold) -> ast::_mod)\n                      -> ast::_mod {\n     // Fold the contents first:\n     let module_ = orig(module_, fld);\n@@ -155,8 +160,10 @@ macro_rules! with_exts_frame (\n \n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(extsbox: @mut SyntaxEnv,\n-                   cx: ext_ctxt, it: @ast::item, fld: ast_fold,\n-                   orig: fn@(@ast::item, ast_fold) -> Option<@ast::item>)\n+                   cx: ext_ctxt,\n+                   it: @ast::item,\n+                   fld: ast_fold,\n+                   orig: @fn(@ast::item, ast_fold) -> Option<@ast::item>)\n                 -> Option<@ast::item> {\n     // need to do expansion first... it might turn out to be a module.\n     let maybe_it = match it.node {\n@@ -296,11 +303,13 @@ pub fn expand_item_mac(+extsbox: @mut SyntaxEnv,\n }\n \n // expand a stmt\n-pub fn expand_stmt(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                   s: &stmt_, sp: span, fld: ast_fold,\n-                   orig: fn@(s: &stmt_, span, ast_fold) -> (stmt_, span))\n+pub fn expand_stmt(extsbox: @mut SyntaxEnv,\n+                   cx: ext_ctxt,\n+                   s: &stmt_,\n+                   sp: span,\n+                   fld: ast_fold,\n+                   orig: @fn(&stmt_, span, ast_fold) -> (stmt_, span))\n                 -> (stmt_, span) {\n-\n     let (mac, pth, tts, semi) = match *s {\n         stmt_mac(ref mac, semi) => {\n             match mac.node {\n@@ -356,10 +365,13 @@ pub fn expand_stmt(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n \n \n \n-pub fn expand_block(extsbox: @mut SyntaxEnv, cx: ext_ctxt,\n-                    blk: &blk_, sp: span, fld: ast_fold,\n-                    orig: fn@(&blk_, span, ast_fold) -> (blk_, span))\n-    -> (blk_, span) {\n+pub fn expand_block(extsbox: @mut SyntaxEnv,\n+                    cx: ext_ctxt,\n+                    blk: &blk_,\n+                    sp: span,\n+                    fld: ast_fold,\n+                    orig: @fn(&blk_, span, ast_fold) -> (blk_, span))\n+                 -> (blk_, span) {\n     match (*extsbox).find(&@~\" block\") {\n         // no scope limit on macros in this block, no need\n         // to push an exts frame:"}, {"sha": "af558e6b330d9b09c9f924913f098307d1716a34", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -24,7 +24,8 @@ use ext::base::*;\n use ext::base;\n use ext::build;\n use ext::build::*;\n-use unstable::extfmt::ct::*;\n+\n+use core::unstable::extfmt::ct::*;\n \n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n@@ -41,9 +42,7 @@ pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     fn parse_fmt_err_(cx: ext_ctxt, sp: span, msg: &str) -> ! {\n         cx.span_fatal(sp, msg);\n     }\n-    let parse_fmt_err = fn@(s: &str) -> ! {\n-        parse_fmt_err_(cx, fmtspan, s)\n-    };\n+    let parse_fmt_err: @fn(&str) -> ! = |s| parse_fmt_err_(cx, fmtspan, s);\n     let pieces = parse_fmt_string(fmt, parse_fmt_err);\n     MRExpr(pieces_to_expr(cx, sp, pieces, args))\n }"}, {"sha": "9072f4bdd01bc55b978fabd15595f088973aaf98", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n use core::io::WriterUtil;\n+use core::prelude::*;\n \n use ast;\n use codemap;"}, {"sha": "d7f7f7c6510e4b54779ee53de7e202955c7bc3c6", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n+use core::prelude::*;\n \n use ast::tt_delim;\n use ast;"}, {"sha": "b315e543f5f40427c3f646b2d57c3d9d531d395e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -39,7 +39,7 @@ pub trait ast_fold {\n     fn fold_ident(@self, ident) -> ident;\n     fn fold_path(@self, @path) -> @path;\n     fn fold_local(@self, @local) -> @local;\n-    fn map_exprs(@self, fn@(@expr) -> @expr, &[@expr]) -> ~[@expr];\n+    fn map_exprs(@self, @fn(@expr) -> @expr, &[@expr]) -> ~[@expr];\n     fn new_id(@self, node_id) -> node_id;\n     fn new_span(@self, span) -> span;\n }\n@@ -48,29 +48,29 @@ pub trait ast_fold {\n \n pub struct AstFoldFns {\n     //unlike the others, item_ is non-trivial\n-    fold_crate: fn@(&crate_, span, ast_fold) -> (crate_, span),\n-    fold_view_item: fn@(view_item_, ast_fold) -> view_item_,\n-    fold_foreign_item: fn@(@foreign_item, ast_fold) -> @foreign_item,\n-    fold_item: fn@(@item, ast_fold) -> Option<@item>,\n-    fold_struct_field: fn@(@struct_field, ast_fold) -> @struct_field,\n-    fold_item_underscore: fn@(&item_, ast_fold) -> item_,\n-    fold_method: fn@(@method, ast_fold) -> @method,\n-    fold_block: fn@(&blk_, span, ast_fold) -> (blk_, span),\n-    fold_stmt: fn@(&stmt_, span, ast_fold) -> (stmt_, span),\n-    fold_arm: fn@(&arm, ast_fold) -> arm,\n-    fold_pat: fn@(&pat_, span, ast_fold) -> (pat_, span),\n-    fold_decl: fn@(&decl_, span, ast_fold) -> (decl_, span),\n-    fold_expr: fn@(&expr_, span, ast_fold) -> (expr_, span),\n-    fold_ty: fn@(&ty_, span, ast_fold) -> (ty_, span),\n-    fold_mod: fn@(&_mod, ast_fold) -> _mod,\n-    fold_foreign_mod: fn@(&foreign_mod, ast_fold) -> foreign_mod,\n-    fold_variant: fn@(&variant_, span, ast_fold) -> (variant_, span),\n-    fold_ident: fn@(ident, ast_fold) -> ident,\n-    fold_path: fn@(@path, ast_fold) -> path,\n-    fold_local: fn@(&local_, span, ast_fold) -> (local_, span),\n-    map_exprs: fn@(fn@(@expr) -> @expr, &[@expr]) -> ~[@expr],\n-    new_id: fn@(node_id) -> node_id,\n-    new_span: fn@(span) -> span\n+    fold_crate: @fn(&crate_, span, ast_fold) -> (crate_, span),\n+    fold_view_item: @fn(view_item_, ast_fold) -> view_item_,\n+    fold_foreign_item: @fn(@foreign_item, ast_fold) -> @foreign_item,\n+    fold_item: @fn(@item, ast_fold) -> Option<@item>,\n+    fold_struct_field: @fn(@struct_field, ast_fold) -> @struct_field,\n+    fold_item_underscore: @fn(&item_, ast_fold) -> item_,\n+    fold_method: @fn(@method, ast_fold) -> @method,\n+    fold_block: @fn(&blk_, span, ast_fold) -> (blk_, span),\n+    fold_stmt: @fn(&stmt_, span, ast_fold) -> (stmt_, span),\n+    fold_arm: @fn(&arm, ast_fold) -> arm,\n+    fold_pat: @fn(&pat_, span, ast_fold) -> (pat_, span),\n+    fold_decl: @fn(&decl_, span, ast_fold) -> (decl_, span),\n+    fold_expr: @fn(&expr_, span, ast_fold) -> (expr_, span),\n+    fold_ty: @fn(&ty_, span, ast_fold) -> (ty_, span),\n+    fold_mod: @fn(&_mod, ast_fold) -> _mod,\n+    fold_foreign_mod: @fn(&foreign_mod, ast_fold) -> foreign_mod,\n+    fold_variant: @fn(&variant_, span, ast_fold) -> (variant_, span),\n+    fold_ident: @fn(ident, ast_fold) -> ident,\n+    fold_path: @fn(@path, ast_fold) -> path,\n+    fold_local: @fn(&local_, span, ast_fold) -> (local_, span),\n+    map_exprs: @fn(@fn(@expr) -> @expr, &[@expr]) -> ~[@expr],\n+    new_id: @fn(node_id) -> node_id,\n+    new_span: @fn(span) -> span\n }\n \n pub type ast_fold_fns = @AstFoldFns;\n@@ -446,12 +446,12 @@ fn noop_fold_decl(d: &decl_, fld: @ast_fold) -> decl_ {\n     }\n }\n \n-pub fn wrap<T>(f: fn@(&T, ast_fold) -> T)\n-    -> fn@(&T, span, ast_fold) -> (T, span)\n-{\n-    fn@(x: &T, s: span, fld: @ast_fold) -> (T, span) {\n+pub fn wrap<T>(f: @fn(&T, ast_fold) -> T)\n+            -> @fn(&T, span, ast_fold) -> (T, span) {\n+    let result: @fn(&T, span, @ast_fold) -> (T, span) = |x, s, fld| {\n         (f(x, fld), s)\n-    }\n+    };\n+    result\n }\n \n pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n@@ -533,14 +533,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 arms.map(|x| fld.fold_arm(x))\n             )\n         }\n-        expr_fn(proto, ref decl, ref body, _) => {\n-            expr_fn(\n-                proto,\n-                fold_fn_decl(decl, fld),\n-                fld.fold_block(body),\n-                @()\n-            )\n-        }\n         expr_fn_block(ref decl, ref body) => {\n             expr_fn_block(\n                 fold_fn_decl(decl, fld),\n@@ -759,7 +751,7 @@ fn noop_fold_local(l: &local_, fld: @ast_fold) -> local_ {\n \n /* temporarily eta-expand because of a compiler bug with using `fn<T>` as a\n    value */\n-fn noop_map_exprs(f: fn@(@expr) -> @expr, es: &[@expr]) -> ~[@expr] {\n+fn noop_map_exprs(f: @fn(@expr) -> @expr, es: &[@expr]) -> ~[@expr] {\n     es.map(|x| f(*x))\n }\n \n@@ -893,11 +885,10 @@ impl ast_fold for AstFoldFns {\n         let (n, s) = (self.fold_local)(&x.node, x.span, self as @ast_fold);\n         @spanned { node: n, span: (self.new_span)(s) }\n     }\n-    fn map_exprs(\n-        @self,\n-        f: fn@(@expr) -> @expr,\n-        e: &[@expr]\n-    ) -> ~[@expr] {\n+    fn map_exprs(@self,\n+                 f: @fn(@expr) -> @expr,\n+                 e: &[@expr])\n+              -> ~[@expr] {\n         (self.map_exprs)(f, e)\n     }\n     fn new_id(@self, node_id: ast::node_id) -> node_id {"}, {"sha": "a3df97b3ae4c70458777c9cdd1efe1c17598c0d0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -23,7 +23,7 @@ use ast::{decl_local, default_blk, deref, div, enum_def, enum_variant_kind};\n use ast::{expl, expr, expr_, expr_addr_of, expr_match, expr_again};\n use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n-use ast::{expr_field, expr_fn, expr_fn_block, expr_if, expr_index};\n+use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n@@ -61,10 +61,10 @@ use ast::{vstore_uniq};\n use ast;\n use ast_util::{ident_to_path, operator_prec};\n use ast_util;\n-use classify;\n use codemap::{span,FssNone, BytePos, spanned, respan, mk_sp};\n use codemap;\n use parse::attr::parser_attr;\n+use parse::classify;\n use parse::common::{seq_sep_none, token_to_str};\n use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;\n@@ -381,17 +381,8 @@ pub impl Parser {\n         let purity = self.parse_purity();\n         let onceness = parse_onceness(&self);\n         self.expect_keyword(&~\"fn\");\n-        let post_sigil = self.parse_fn_ty_sigil();\n-\n-        let sigil = match (pre_sigil, post_sigil) {\n-            (None, None) => BorrowedSigil,\n-            (Some(p), None) | (None, Some(p)) => p,\n-            (Some(_), Some(_)) => {\n-                self.fatal(~\"cannot combine prefix and postfix \\\n-                             syntax for closure kind; note that \\\n-                             postfix syntax is obsolete\");\n-            }\n-        };\n+\n+        let sigil = match pre_sigil { None => BorrowedSigil, Some(p) => p };\n \n         let region = if pre_region_name.is_some() {\n             Some(self.region_from_name(pre_region_name))\n@@ -1150,15 +1141,6 @@ pub impl Parser {\n             return self.parse_loop_expr();\n         } else if self.eat_keyword(&~\"match\") {\n             return self.parse_match_expr();\n-        } else if self.eat_keyword(&~\"fn\") {\n-            let opt_sigil = self.parse_fn_ty_sigil();\n-            let sigil = match opt_sigil {\n-                None => {\n-                    self.fatal(~\"fn expr are deprecated, use fn@\")\n-                }\n-                Some(p) => { p }\n-            };\n-            return self.parse_fn_expr(sigil);\n         } else if self.eat_keyword(&~\"unsafe\") {\n             return self.parse_block_expr(lo, unsafe_blk);\n         } else if *self.token == token::LBRACKET {\n@@ -1775,19 +1757,6 @@ pub impl Parser {\n         self.mk_expr(lo, hi, expr_if(cond, thn, els))\n     }\n \n-    fn parse_fn_expr(sigil: Sigil) -> @expr {\n-        let lo = self.last_span.lo;\n-\n-        // if we want to allow fn expression argument types to be inferred in\n-        // the future, just have to change parse_arg to parse_fn_block_arg.\n-        let decl = self.parse_fn_decl(|p| p.parse_arg());\n-\n-        let body = self.parse_block();\n-\n-        self.mk_expr(lo, body.span.hi,\n-                     expr_fn(sigil, decl, body, @()))\n-    }\n-\n     // `|args| { ... }` like in `do` expressions\n     fn parse_lambda_block_expr() -> @expr {\n         self.parse_lambda_expr_(\n@@ -1822,8 +1791,8 @@ pub impl Parser {\n                                 || self.parse_expr())\n     }\n \n-    fn parse_lambda_expr_(parse_decl: fn&() -> fn_decl,\n-                          parse_body: fn&() -> @expr) -> @expr {\n+    fn parse_lambda_expr_(parse_decl: &fn() -> fn_decl,\n+                          parse_body: &fn() -> @expr) -> @expr {\n         let lo = self.last_span.lo;\n         let decl = parse_decl();\n         let body = parse_body();"}, {"sha": "f808a3be6bbebc0ff67165723dafa6495fcf5892", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -47,8 +47,8 @@ pub enum ann_node/& {\n     node_pat(@ps, @ast::pat),\n }\n pub struct pp_ann {\n-    pre: fn@(ann_node),\n-    post: fn@(ann_node)\n+    pre: @fn(ann_node),\n+    post: @fn(ann_node)\n }\n \n pub fn no_ann() -> pp_ann {\n@@ -1346,17 +1346,6 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n         }\n         bclose_(s, expr.span, match_indent_unit);\n       }\n-      ast::expr_fn(sigil, ref decl, ref body, _) => {\n-        // containing cbox, will be closed by print-block at }\n-        cbox(s, indent_unit);\n-        // head-box, will be closed by print-block at start\n-        ibox(s, 0u);\n-        print_fn_header_info(s, None, None, ast::Many,\n-                             Some(sigil), ast::inherited);\n-        print_fn_args_and_ret(s, decl, None);\n-        space(s.s);\n-        print_block(s, body);\n-      }\n       ast::expr_fn_block(ref decl, ref body) => {\n         // in do/for blocks we don't want to show an empty\n         // argument list, but at this point we don't know which\n@@ -2190,7 +2179,7 @@ pub fn print_string(s: @ps, st: ~str) {\n     word(s.s, ~\"\\\"\");\n }\n \n-pub fn to_str<T>(t: T, f: fn@(@ps, T), intr: @ident_interner) -> ~str {\n+pub fn to_str<T>(t: T, f: @fn(@ps, T), intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n         f(s, t);"}, {"sha": "5fc93412c50168436e926c804cce543562faa2c8", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,9 +13,8 @@\n // type, and vice versa.\n \n use core::prelude::*;\n-\n-use hashmap::linear::LinearMap;\n-use dvec::DVec;\n+use core::dvec::DVec;\n+use core::hashmap::linear::LinearMap;\n \n pub struct Interner<T> {\n     priv map: @mut LinearMap<T, uint>,"}, {"sha": "262754624cba564d9897a605ca67da487ba9fcaf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 70, "deletions": 82, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -71,27 +71,26 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n }\n \n pub struct Visitor<E> {\n-    visit_mod: fn@(&_mod, span, node_id, E, vt<E>),\n-    visit_view_item: fn@(@view_item, E, vt<E>),\n-    visit_foreign_item: fn@(@foreign_item, E, vt<E>),\n-    visit_item: fn@(@item, E, vt<E>),\n-    visit_local: fn@(@local, E, vt<E>),\n-    visit_block: fn@(&blk, E, vt<E>),\n-    visit_stmt: fn@(@stmt, E, vt<E>),\n-    visit_arm: fn@(&arm, E, vt<E>),\n-    visit_pat: fn@(@pat, E, vt<E>),\n-    visit_decl: fn@(@decl, E, vt<E>),\n-    visit_expr: fn@(@expr, E, vt<E>),\n-    visit_expr_post: fn@(@expr, E, vt<E>),\n-    visit_ty: fn@(@Ty, E, vt<E>),\n-    visit_generics: fn@(&Generics, E, vt<E>),\n-    visit_fn: fn@(&fn_kind, &fn_decl, &blk, span, node_id, E, vt<E>),\n-    visit_ty_method: fn@(&ty_method, E, vt<E>),\n-    visit_trait_method: fn@(&trait_method, E, vt<E>),\n-    visit_struct_def: fn@(@struct_def, ident, &Generics, node_id, E,\n-                          vt<E>),\n-    visit_struct_field: fn@(@struct_field, E, vt<E>),\n-    visit_struct_method: fn@(@method, E, vt<E>)\n+    visit_mod: @fn(&_mod, span, node_id, E, vt<E>),\n+    visit_view_item: @fn(@view_item, E, vt<E>),\n+    visit_foreign_item: @fn(@foreign_item, E, vt<E>),\n+    visit_item: @fn(@item, E, vt<E>),\n+    visit_local: @fn(@local, E, vt<E>),\n+    visit_block: @fn(&blk, E, vt<E>),\n+    visit_stmt: @fn(@stmt, E, vt<E>),\n+    visit_arm: @fn(&arm, E, vt<E>),\n+    visit_pat: @fn(@pat, E, vt<E>),\n+    visit_decl: @fn(@decl, E, vt<E>),\n+    visit_expr: @fn(@expr, E, vt<E>),\n+    visit_expr_post: @fn(@expr, E, vt<E>),\n+    visit_ty: @fn(@Ty, E, vt<E>),\n+    visit_generics: @fn(&Generics, E, vt<E>),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id, E, vt<E>),\n+    visit_ty_method: @fn(&ty_method, E, vt<E>),\n+    visit_trait_method: @fn(&trait_method, E, vt<E>),\n+    visit_struct_def: @fn(@struct_def, ident, &Generics, node_id, E, vt<E>),\n+    visit_struct_field: @fn(@struct_field, E, vt<E>),\n+    visit_struct_method: @fn(@method, E, vt<E>)\n }\n \n pub type visitor<E> = @Visitor<E>;\n@@ -535,17 +534,6 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n             (v.visit_expr)(x, e, v);\n             for arms.each |a| { (v.visit_arm)(a, e, v); }\n         }\n-        expr_fn(proto, ref decl, ref body, _) => {\n-            (v.visit_fn)(\n-                &fk_anon(proto),\n-                decl,\n-                body,\n-                ex.span,\n-                ex.id,\n-                e,\n-                v\n-            );\n-        }\n         expr_fn_block(ref decl, ref body) => {\n             (v.visit_fn)(\n                 &fk_fn_block,\n@@ -603,26 +591,26 @@ pub fn visit_arm<E>(a: &arm, e: E, v: vt<E>) {\n // calls the given functions on the nodes.\n \n pub struct SimpleVisitor {\n-    visit_mod: fn@(&_mod, span, node_id),\n-    visit_view_item: fn@(@view_item),\n-    visit_foreign_item: fn@(@foreign_item),\n-    visit_item: fn@(@item),\n-    visit_local: fn@(@local),\n-    visit_block: fn@(&blk),\n-    visit_stmt: fn@(@stmt),\n-    visit_arm: fn@(&arm),\n-    visit_pat: fn@(@pat),\n-    visit_decl: fn@(@decl),\n-    visit_expr: fn@(@expr),\n-    visit_expr_post: fn@(@expr),\n-    visit_ty: fn@(@Ty),\n-    visit_generics: fn@(&Generics),\n-    visit_fn: fn@(&fn_kind, &fn_decl, &blk, span, node_id),\n-    visit_ty_method: fn@(&ty_method),\n-    visit_trait_method: fn@(&trait_method),\n-    visit_struct_def: fn@(@struct_def, ident, &Generics, node_id),\n-    visit_struct_field: fn@(@struct_field),\n-    visit_struct_method: fn@(@method)\n+    visit_mod: @fn(&_mod, span, node_id),\n+    visit_view_item: @fn(@view_item),\n+    visit_foreign_item: @fn(@foreign_item),\n+    visit_item: @fn(@item),\n+    visit_local: @fn(@local),\n+    visit_block: @fn(&blk),\n+    visit_stmt: @fn(@stmt),\n+    visit_arm: @fn(&arm),\n+    visit_pat: @fn(@pat),\n+    visit_decl: @fn(@decl),\n+    visit_expr: @fn(@expr),\n+    visit_expr_post: @fn(@expr),\n+    visit_ty: @fn(@Ty),\n+    visit_generics: @fn(&Generics),\n+    visit_fn: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n+    visit_ty_method: @fn(&ty_method),\n+    visit_trait_method: @fn(&trait_method),\n+    visit_struct_def: @fn(@struct_def, ident, &Generics, node_id),\n+    visit_struct_field: @fn(@struct_field),\n+    visit_struct_method: @fn(@method)\n }\n \n pub type simple_visitor = @SimpleVisitor;\n@@ -644,21 +632,19 @@ pub fn default_simple_visitor() -> @SimpleVisitor {\n         visit_expr: |_e| { },\n         visit_expr_post: |_e| { },\n         visit_ty: simple_ignore_ty,\n-        visit_generics: fn@(_ps: &Generics) { },\n-        visit_fn: fn@(_fk: &fn_kind, _d: &fn_decl, _b: &blk, _sp: span,\n-                      _id: node_id) { },\n-        visit_ty_method: fn@(_m: &ty_method) { },\n-        visit_trait_method: fn@(_m: &trait_method) { },\n-        visit_struct_def: fn@(_sd: @struct_def, _nm: ident,\n-                              _generics: &Generics, _id: node_id) { },\n-        visit_struct_field: fn@(_f: @struct_field) { },\n-        visit_struct_method: fn@(_m: @method) { }\n+        visit_generics: |_| {},\n+        visit_fn: |_, _, _, _, _| {},\n+        visit_ty_method: |_| {},\n+        visit_trait_method: |_| {},\n+        visit_struct_def: |_, _, _, _| {},\n+        visit_struct_field: |_| {},\n+        visit_struct_method: |_| {},\n     }\n }\n \n pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n     fn v_mod(\n-        f: fn@(&_mod, span, node_id),\n+        f: @fn(&_mod, span, node_id),\n         m: &_mod,\n         sp: span,\n         id: node_id,\n@@ -668,65 +654,67 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(m, sp, id);\n         visit_mod(m, sp, id, e, v);\n     }\n-    fn v_view_item(f: fn@(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n+    fn v_view_item(f: @fn(@view_item), vi: @view_item, &&e: (), v: vt<()>) {\n         f(vi);\n         visit_view_item(vi, e, v);\n     }\n-    fn v_foreign_item(f: fn@(@foreign_item), ni: @foreign_item, &&e: (),\n-                     v: vt<()>) {\n+    fn v_foreign_item(f: @fn(@foreign_item), ni: @foreign_item, &&e: (),\n+                      v: vt<()>) {\n         f(ni);\n         visit_foreign_item(ni, e, v);\n     }\n-    fn v_item(f: fn@(@item), i: @item, &&e: (), v: vt<()>) {\n+    fn v_item(f: @fn(@item), i: @item, &&e: (), v: vt<()>) {\n         f(i);\n         visit_item(i, e, v);\n     }\n-    fn v_local(f: fn@(@local), l: @local, &&e: (), v: vt<()>) {\n+    fn v_local(f: @fn(@local), l: @local, &&e: (), v: vt<()>) {\n         f(l);\n         visit_local(l, e, v);\n     }\n-    fn v_block(f: fn@(&blk), bl: &blk, &&e: (), v: vt<()>) {\n+    fn v_block(f: @fn(&ast::blk), bl: &ast::blk, &&e: (), v: vt<()>) {\n         f(bl);\n         visit_block(bl, e, v);\n     }\n-    fn v_stmt(f: fn@(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n+    fn v_stmt(f: @fn(@stmt), st: @stmt, &&e: (), v: vt<()>) {\n         f(st);\n         visit_stmt(st, e, v);\n     }\n-    fn v_arm(f: fn@(&arm), a: &arm, &&e: (), v: vt<()>) {\n+    fn v_arm(f: @fn(&arm), a: &arm, &&e: (), v: vt<()>) {\n         f(a);\n         visit_arm(a, e, v);\n     }\n-    fn v_pat(f: fn@(@pat), p: @pat, &&e: (), v: vt<()>) {\n+    fn v_pat(f: @fn(@pat), p: @pat, &&e: (), v: vt<()>) {\n         f(p);\n         visit_pat(p, e, v);\n     }\n-    fn v_decl(f: fn@(@decl), d: @decl, &&e: (), v: vt<()>) {\n+    fn v_decl(f: @fn(@decl), d: @decl, &&e: (), v: vt<()>) {\n         f(d);\n         visit_decl(d, e, v);\n     }\n-    fn v_expr(f: fn@(@expr), ex: @expr, &&e: (), v: vt<()>) {\n+    fn v_expr(f: @fn(@expr), ex: @expr, &&e: (), v: vt<()>) {\n         f(ex);\n         visit_expr(ex, e, v);\n     }\n-    fn v_expr_post(f: fn@(@expr), ex: @expr, &&_e: (), _v: vt<()>) {\n+    fn v_expr_post(f: @fn(@expr), ex: @expr, &&_e: (), _v: vt<()>) {\n         f(ex);\n     }\n-    fn v_ty(f: fn@(@Ty), ty: @Ty, &&e: (), v: vt<()>) {\n+    fn v_ty(f: @fn(@Ty), ty: @Ty, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty(ty, e, v);\n     }\n-    fn v_ty_method(f: fn@(&ty_method), ty: &ty_method, &&e: (), v: vt<()>) {\n+    fn v_ty_method(f: @fn(&ty_method), ty: &ty_method, &&e: (), v: vt<()>) {\n         f(ty);\n         visit_ty_method(ty, e, v);\n     }\n-    fn v_trait_method(f: fn@(&trait_method), m: &trait_method, &&e: (),\n+    fn v_trait_method(f: @fn(&trait_method),\n+                      m: &trait_method,\n+                      &&e: (),\n                       v: vt<()>) {\n         f(m);\n         visit_trait_method(m, e, v);\n     }\n     fn v_struct_def(\n-        f: fn@(@struct_def, ident, &Generics, node_id),\n+        f: @fn(@struct_def, ident, &Generics, node_id),\n         sd: @struct_def,\n         nm: ident,\n         generics: &Generics,\n@@ -738,7 +726,7 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         visit_struct_def(sd, nm, generics, id, e, v);\n     }\n     fn v_generics(\n-        f: fn@(&Generics),\n+        f: @fn(&Generics),\n         ps: &Generics,\n         &&e: (),\n         v: vt<()>\n@@ -747,7 +735,7 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         visit_generics(ps, e, v);\n     }\n     fn v_fn(\n-        f: fn@(&fn_kind, &fn_decl, &blk, span, node_id),\n+        f: @fn(&fn_kind, &fn_decl, &blk, span, node_id),\n         fk: &fn_kind,\n         decl: &fn_decl,\n         body: &blk,\n@@ -761,12 +749,12 @@ pub fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n     }\n     let visit_ty: @fn(@Ty, &&x: (), vt<()>) =\n         |a,b,c| v_ty(v.visit_ty, a, b, c);\n-    fn v_struct_field(f: fn@(@struct_field), sf: @struct_field, &&e: (),\n+    fn v_struct_field(f: @fn(@struct_field), sf: @struct_field, &&e: (),\n                       v: vt<()>) {\n         f(sf);\n         visit_struct_field(sf, e, v);\n     }\n-    fn v_struct_method(f: fn@(@method), m: @method, &&e: (), v: vt<()>) {\n+    fn v_struct_method(f: @fn(@method), m: @method, &&e: (), v: vt<()>) {\n         f(m);\n         visit_struct_method(m, e, v);\n     }"}, {"sha": "ece0d48c3ae445e33cd977732f9a57f29814428f", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -36,7 +36,7 @@ struct rust_opaque_box {\n     rust_opaque_box *next;\n };\n \n-// corresponds to the layout of a fn(), fn@(), fn~() etc\n+// corresponds to the layout of a &fn(), @fn(), ~fn() etc\n struct fn_env_pair {\n     spawn_fn f;\n     rust_opaque_box *env;"}, {"sha": "a818ff58f9440e1b5d43a8c2e92d011f8be1bd65", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,11 +10,11 @@\n \n #[legacy_modes];\n \n-use dvec::DVec;\n+use core::dvec::DVec;\n \n pub struct Entry<A,B> {key: A, value: B}\n \n-pub struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<Entry<A,B>> }\n+pub struct alist<A,B> { eq_fn: @fn(A,A) -> bool, data: DVec<Entry<A,B>> }\n \n pub fn alist_add<A:Copy,B:Copy>(lst: alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});"}, {"sha": "dd2ffd5002c9416d991a0651c97fc721b14f756d", "filename": "src/test/auxiliary/issue4516_ty_param_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue4516_ty_param_lib.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n pub fn to_closure<A:Durable + Copy>(x: A) -> @fn() -> A {\n-    fn@() -> A { copy x }\n+    let result: @fn() -> A = || copy x;\n+    result\n }"}, {"sha": "10a7238a3f7d01ac49da70f3938fbba786307d95", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n pub trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq {\n }"}, {"sha": "e026e78ffb81d1e73b8f7ba201be85df8bfc14ab", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,7 +16,7 @@ use std::time::precise_time_s;\n use std::oldmap;\n use std::oldmap::{Map, HashMap};\n \n-use io::{Reader, ReaderUtil};\n+use core::io::{Reader, ReaderUtil};\n \n macro_rules! bench (\n     ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))"}, {"sha": "7f1f4bd1834ea58375af93110156ec861b9dad0d", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,8 +11,8 @@\n // A raw test of vector appending performance.\n \n extern mod std;\n-use dvec::DVec;\n-use io::WriterUtil;\n+use core::dvec::DVec;\n+use core::io::WriterUtil;\n \n fn collect_raw(num: uint) -> ~[uint] {\n     let mut result = ~[];"}, {"sha": "0b172011648ad6ee08a9d1bef17ec2d3aed844db", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -267,7 +267,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         colors = do par::mapi(*color_vec) {\n             let colors = arc::clone(&color);\n             let graph = arc::clone(&graph);\n-            fn~(+i: uint, +c: &color) -> color {\n+            let result: ~fn(+x: uint, +y: &color) -> color = |i, c| {\n                 let colors = arc::get(&colors);\n                 let graph = arc::get(&graph);\n                 match *c {\n@@ -290,20 +290,22 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n                   gray(parent) => { black(parent) }\n                   black(parent) => { black(parent) }\n                 }\n-            }\n+            };\n+            result\n         };\n         assert(colors.len() == old_len);\n     }\n \n     // Convert the results.\n     do par::map(colors) {\n-        fn~(c: &color) -> i64 {\n+        let result: ~fn(c: &color) -> i64 = |c| {\n             match *c {\n                 white => { -1i64 }\n                 black(parent) => { parent }\n                 _ => { fail!(~\"Found remaining gray nodes in BFS\") }\n             }\n-        }\n+        };\n+        result\n     }\n }\n \n@@ -387,14 +389,15 @@ fn validate(edges: ~[(node_id, node_id)],\n \n     let status = do par::alli(tree) {\n         let edges = copy edges;\n-        fn~(+u: uint, v: &i64) -> bool {\n+        let result: ~fn(+x: uint, v: &i64) -> bool = |u, v| {\n             let u = u as node_id;\n             if *v == -1i64 || u == root {\n                 true\n             } else {\n                 edges.contains(&(u, *v)) || edges.contains(&(*v, u))\n             }\n-        }\n+        };\n+        result\n     };\n \n     if !status { return status }"}, {"sha": "fbd80d5813008bbd4a2011e53c35222f38623c20", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -21,10 +21,10 @@\n #[legacy_modes];\n \n extern mod std;\n-use io::Writer;\n-use io::WriterUtil;\n+use core::io::Writer;\n+use core::io::WriterUtil;\n \n-use comm::{Port, Chan, SharedChan};\n+use core::comm::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }"}, {"sha": "2513538374590de37897db4b8ba79a54f49d38b8", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -17,10 +17,10 @@\n #[legacy_modes];\n \n extern mod std;\n-use io::Writer;\n-use io::WriterUtil;\n+use core::io::Writer;\n+use core::io::WriterUtil;\n \n-use comm::{Port, PortSet, Chan, stream};\n+use core::comm::{Port, PortSet, Chan, stream};\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }"}, {"sha": "2bc89f64a298c7e9e36c97ee1c5ae562cd701570", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,7 +16,7 @@\n  * http://shootout.alioth.debian.org/\n  */\n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n "}, {"sha": "35c6694ee0c7474053f75137421ae8aa9cc7394d", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -17,9 +17,9 @@ extern mod std;\n use std::oldmap;\n use std::oldmap::HashMap;\n use std::sort;\n-use io::ReaderUtil;\n-use comm::{stream, Port, Chan};\n-use cmp::Ord;\n+use core::io::ReaderUtil;\n+use core::comm::{stream, Port, Chan};\n+use core::cmp::Ord;\n \n // given a map, print a sorted version of it\n fn sort_and_fmt(mm: HashMap<~[u8], uint>, total: uint) -> ~str {"}, {"sha": "146a4b8c86928c594359a04440c10a76e18b996f", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -24,7 +24,7 @@\n //\n //  writes pbm image to output path\n \n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use core::hashmap::linear::LinearMap;\n \n struct cmplx {"}, {"sha": "f4127e6c7726571d10e431636cb062f53fc0c343", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -45,7 +45,7 @@ fn main() {\n     io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n }\n \n-mod NBodySystem {\n+pub mod NBodySystem {\n     use Body;\n \n     pub fn make() -> ~[Body::Props] {\n@@ -162,7 +162,7 @@ mod NBodySystem {\n     }\n }\n \n-mod Body {\n+pub mod Body {\n     use Body;\n \n     pub const PI: float = 3.141592653589793;"}, {"sha": "e0d2fbb0513b4f42cbff3ed4d7663622836b1a16", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -29,7 +29,7 @@ use core::comm::*;\n use core::io::WriterUtil;\n \n use core::result;\n-use result::{Ok, Err};\n+use core::result::{Ok, Err};\n \n fn fib(n: int) -> int {\n     fn pfib(c: Chan<int>, n: int) {"}, {"sha": "d54376a253256a38feb8eaa41997858789195ae0", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n extern mod std;\n use std::smallintmap::SmallIntMap;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n     for uint::range(min, max) |i| {"}, {"sha": "dc8136bc122b34238914fdefd97fcbc4b0ff4e81", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,8 @@\n extern mod std;\n \n use std::bitv;\n-use io::{ReaderUtil, WriterUtil};\n+use core::io::{ReaderUtil, WriterUtil};\n+use core::io;\n \n // Computes a single solution to a given 9x9 sudoku\n //"}, {"sha": "05781b20a9b3f61122861543ad55285464998d99", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -46,7 +46,7 @@ type nillist = List<()>;\n struct State {\n     box: @nillist,\n     unique: ~nillist,\n-    fn_box: fn@() -> @nillist,\n+    fn_box: @fn() -> @nillist,\n     tuple: (@nillist, ~nillist),\n     vec: ~[@nillist],\n     res: r\n@@ -78,7 +78,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 box: @Nil,\n                 unique: ~Nil,\n-                fn_box: fn@() -> @nillist { @Nil::<()> },\n+                fn_box: || @Nil::<()>,\n                 tuple: (@Nil, ~Nil),\n                 vec: ~[@Nil],\n                 res: r(@Nil)\n@@ -90,7 +90,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n             State {\n                 box: @Cons((), st.box),\n                 unique: ~Cons((), @*st.unique),\n-                fn_box: fn@() -> @nillist { @Cons((), fn_box()) },\n+                fn_box: || @Cons((), fn_box()),\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n                 vec: st.vec + ~[@Cons((), st.vec.last())],"}, {"sha": "40390ceeee499bd19e84cd98d6be43bcafc9b923", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -46,7 +46,7 @@ fn grandchild_group(num_tasks: uint) {\n     // Master grandchild task exits early.\n }\n \n-fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n+fn spawn_supervised_blocking(myname: &str, +f: ~fn()) {\n     let mut res = None;\n     task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n     error!(\"%s group waiting\", myname);"}, {"sha": "2436e4da8df259cabba670937f3e58719b4c4070", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -28,5 +28,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = fn@() { debug!(\"meow\"); }; //~ ERROR attempted to take value of method\n+  nyan.speak = || debug!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "4e8af4f042105db8445aef4d05feb57e04ecce3b", "filename": "src/test/compile-fail/borrowck-addr-of-upvar.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-addr-of-upvar.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,16 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: @int) -> fn@() -> &static/int {\n-    fn@() -> &static/int {&*x} //~ ERROR illegal borrow\n+fn foo(x: @int) -> @fn() -> &static/int {\n+    let result: @fn() -> &static/int = || &*x;  //~ ERROR illegal borrow\n+    result\n }\n \n-fn bar(x: @int) -> fn@() -> &int {\n-    fn@() -> &int {&*x} //~ ERROR illegal borrow\n+fn bar(x: @int) -> @fn() -> &int {\n+    let result: @fn() -> &int = || &*x; //~ ERROR illegal borrow\n+    result\n }\n \n-fn zed(x: @int) -> fn@() -> int {\n-    fn@() -> int {*&*x}\n+fn zed(x: @int) -> @fn() -> int {\n+    let result: @fn() -> int = || *&*x;\n+    result\n }\n \n fn main() {"}, {"sha": "8dc86c9a1631001c409c070ca119f60cca3e181a", "filename": "src/test/compile-fail/borrowck-call-sendfn.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-sendfn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,11 @@\n \n // xfail-test #2978\n \n-fn call(x: @{f: fn~()}) {\n+struct Foo {\n+    f: ~fn()\n+}\n+\n+fn call(x: @Foo) {\n     x.f(); //~ ERROR foo\n     //~^ NOTE bar\n }"}, {"sha": "aca63308d874eaa43bcfe81479e898f260e027bd", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -22,7 +22,7 @@ fn box_imm() {\n \n     let v = ~3;\n     let _w = &v; //~ NOTE loan of immutable local variable granted here\n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         debug!(\"v=%d\", *v);\n         //~^ ERROR by-move capture of immutable local variable prohibited due to outstanding loan\n     });"}, {"sha": "1031183491549683203c363bf5dbd7f0314a22ce", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> bool) -> bool { f(10i) }\n+fn f(f: @fn(int) -> bool) -> bool { f(10i) }\n \n fn main() {\n     assert do f() |i| { i == 10i } == 10i;"}, {"sha": "2a30f9fb96faf157a7ef96b844db9174a7211b6e", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn reproduce<T:Copy>(t: T) -> fn@() -> T {\n-    fn@() -> T { t }\n+fn reproduce<T:Copy>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t;\n+    result\n }\n \n fn main() {\n     // type of x is the variable X,\n     // with the lower bound @mut int\n     let x = @mut 3;\n \n-    // type of r is fn@() -> X\n+    // type of r is @fn() -> X\n     let r = reproduce(x);\n \n     // Requires that X be a subtype of"}, {"sha": "5df2007721defa2d1214e69f1dbba6f62dd30380", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn mk_identity<T:Copy>() -> fn@(T) -> T {\n-    fn@(t: T) -> T { t }\n+fn mk_identity<T:Copy>() -> @fn(T) -> T {\n+    let result: @fn(t: T) -> T = |t| t;\n+    result\n }\n \n fn main() {\n-    // type of r is fn@(X) -> X\n+    // type of r is @fn(X) -> X\n     // for some fresh X\n     let r = mk_identity();\n "}, {"sha": "5ee4a01f2b9c54ad87e840971472eb4299d63b9d", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved\n-use baz::zed::bar;\n+use baz::zed::bar;  //~ ERROR unresolved name\n+//~^ ERROR failed to resolve import\n+\n mod baz {}\n mod zed {\n     pub fn bar() { debug!(\"bar3\"); }"}, {"sha": "acc371076e70475fed0a405bdfa19d6aab3214db", "filename": "src/test/compile-fail/issue-1451.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1451.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-struct T { f: fn@() };\n-struct S { f: fn@() };\n+struct T { f: @fn() };\n+struct S { f: @fn() };\n \n fn fooS(t: S) {\n }\n@@ -22,11 +22,11 @@ fn bar() {\n }\n \n fn main() {\n-    let x: fn@() = bar;\n+    let x: @fn() = bar;\n     fooS(S {f: x});\n     fooS(S {f: bar});\n \n-    let x: fn@() = bar;\n+    let x: @fn() = bar;\n     fooT(T {f: x});\n     fooT(T {f: bar});\n }"}, {"sha": "a0d2536d85f0e7d2b22e04fa75ae7a855cd0e138", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,8 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-use unresolved::*; //~ ERROR unresolved import\n+use unresolved::*; //~ ERROR unresolved name\n+//~^ ERROR failed to resolve import\n \n fn main() {\n }"}, {"sha": "af37949573108f3d334870f24d569db808c622d6", "filename": "src/test/compile-fail/issue-1896-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1896-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct boxedFn { theFn: fn~() -> uint }\n+struct boxedFn { theFn: ~fn() -> uint }\n \n fn createClosure (closedUint: uint) -> boxedFn {\n-    boxedFn {theFn: fn@ () -> uint { closedUint }} //~ ERROR mismatched types\n+    let result: @fn() -> uint = || closedUint;\n+    boxedFn { theFn: result } //~ ERROR mismatched types\n }\n \n fn main () {"}, {"sha": "40c2772f2347f0ced90dd3e179d1700632fc99a0", "filename": "src/test/compile-fail/issue-2074.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2074.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,13 +10,13 @@\n \n // xfail-test\n fn main() {\n-    let one = fn@() -> uint {\n+    let one: @fn() -> uint = || {\n         enum r { a };\n-        return a as uint;\n+        a as uint\n     };\n-    let two = fn@() -> uint {\n+    let two = @fn() -> uint = || {\n         enum r { a };\n-        return a as uint;\n+        a as uint\n     };\n     one(); two();\n }"}, {"sha": "1de311f4de5482e02615a7cb846944f5ab88f58d", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dvec::DVec;\n+use core::dvec::DVec;\n \n-type parser = {\n+struct parser {\n     tokens: DVec<int>,\n-};\n+}\n \n trait parse {\n     fn parse() -> ~[int];\n }\n \n impl parse for parser {\n     fn parse() -> ~[int] {\n-        dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n+        ::core::dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n     }\n }\n "}, {"sha": "1f425b0922337431c2ee51be5de60b3f73bdd496", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n // we let an impl method can have more permissive bounds than the trait\n // method it's implementing, the return type might be less specific than\n // needed. Just punt and make it invariant.\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy + Const,D>(x: C) -> C;"}, {"sha": "ae7869d4a6890d0c63f2349c62c4de26eb45425c", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that an impl method's bounds aren't *more* restrictive\n // than the trait method it's implementing\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "c28fd462b410b796d38def7a6f131fb2aa5371cd", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that ty params get matched correctly when comparing\n // an impl against a trait\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "c88a94ef62969427df6e80d3c6cd3b234f26df77", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicate supertrait in trait declaration\n               Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq"}, {"sha": "f337914da6dcac63761259bfcdac119721420b64", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern mod std;\n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn f<T:Eq>(o: &mut Option<T>) {\n     assert *o == option::None;"}, {"sha": "928abae242383600bc937970289bba380192c72c", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n+    let _: ~fn() = || foo(x); //~ ERROR value has non-owned type `@uint`\n }"}, {"sha": "31ab555b38ab69b0255629d6764e4412b9d79ada", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn copy1<T:Copy>(t: T) -> fn@() -> T {\n-    fn@() -> T { t } //~ ERROR value may contain borrowed pointers\n+fn copy1<T:Copy>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t; //~ ERROR value may contain borrowed pointers\n+    result\n }\n \n-fn copy2<T:Copy + &static>(t: T) -> fn@() -> T {\n-    fn@() -> T { t }\n+fn copy2<T:Copy + &static>(t: T) -> @fn() -> T {\n+    let result: @fn() -> T = || t;\n+    result\n }\n \n fn main() {\n@@ -23,7 +25,10 @@ fn main() {\n     copy2(@3);\n     copy2(@&x); //~ ERROR does not fulfill `&static`\n \n-    copy2(fn@() {});\n-    copy2(fn~() {}); //~ ERROR does not fulfill `Copy`\n-    copy2(fn&() {}); //~ ERROR does not fulfill `&static`\n+    let boxed: @fn() = || {};\n+    copy2(boxed);\n+    let owned: ~fn() = || {};\n+    copy2(owned);    //~ ERROR does not fulfill `Copy`\n+    let borrowed: &fn() = || {};\n+    copy2(borrowed); //~ ERROR does not fulfill `&static`\n }"}, {"sha": "1ed18a0297a9ab04e37319daa57512fc8e37705c", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // error-pattern:assigning to captured outer immutable variable in a stack closure\n-// Make sure that nesting a block within a fn@ doesn't let us\n-// mutate upvars from a fn@.\n-fn f2(x: fn()) { x(); }\n+// Make sure that nesting a block within a @fn doesn't let us\n+// mutate upvars from a @fn.\n+fn f2(x: &fn()) { x(); }\n \n fn main() {\n     let i = 0;\n-    let ctr = fn@ () -> int { f2(|| i = i + 1 ); return i; };\n+    let ctr: @fn() -> int = || { f2(|| i = i + 1 ); i };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "eaa51a8c3dd56e25e9dd3943545cfea3886bf3c6", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n // error-pattern:assigning to captured outer variable in a heap closure\n-// Make sure we can't write to upvars from fn@s\n+// Make sure we can't write to upvars from @fns\n fn main() {\n     let i = 0;\n-    let ctr = fn@ () -> int { i = i + 1; return i; };\n+    let ctr: @fn() -> int = || { i = i + 1; i };\n     log(error, ctr());\n     log(error, ctr());\n     log(error, ctr());"}, {"sha": "75815d2643cbbc3563f02c0d4e5ea9c6111a7bee", "filename": "src/test/compile-fail/liveness-block-unint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-block-unint.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: fn()) { f(); }\n+fn force(f: &fn()) { f(); }\n fn main() {\n     let x: int;\n-    force(fn&() {\n+    force(|| {\n         log(debug, x); //~ ERROR capture of possibly uninitialized variable: `x`\n     });\n }"}, {"sha": "1fddea8096607570f5252b1eda7c458b6166a7a9", "filename": "src/test/compile-fail/liveness-init-in-called-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-called-fn-expr.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    let j = fn@() -> int {\n+    let j: @fn() -> int = || {\n         let i: int;\n-        return i; //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     j();\n }"}, {"sha": "13b8fb04a426a75cfc009bdcadfe535b8f2ba4e2", "filename": "src/test/compile-fail/liveness-init-in-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-init-in-fn-expr.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    let f = fn@() -> int {\n+    let f: @fn() -> int = || {\n         let i: int;\n-        return i; //~ ERROR use of possibly uninitialized variable: `i`\n+        i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     log(error, f());\n }"}, {"sha": "914b7d9d677ad1cdd83d3948e189e9bdd8cc9d77", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let a: ~[int] = ~[];\n-    vec::each(a, fn@(_x: &int) -> bool {\n-        //~^ ERROR not all control paths return a value\n+    vec::each(a, |_| -> bool {\n+        //~^ ERROR mismatched types\n     });\n }"}, {"sha": "9e4d16f96e6c3840612eb0005754ca77e36d912d", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -68,5 +68,5 @@ impl Drop for r {\n \n fn main() {\n     let x = r { x: () };\n-    fn@() { copy x; }; //~ ERROR copying a value of non-copyable type\n+    || { copy x; }; //~ ERROR copying a value of non-copyable type\n }"}, {"sha": "d432c5eac46d477448987ecb49fbebcd4ea2ce0b", "filename": "src/test/compile-fail/omitted-arg-wrong-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fomitted-arg-wrong-types.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // xfail-test - #2093\n-fn let_in<T>(x: T, f: fn(T)) {}\n+fn let_in<T>(x: T, f: &fn(T)) {}\n \n fn main() {\n-    let_in(3u, fn&(i) { assert i == 3; });\n+    let_in(3u, |i| { assert i == 3; });\n     //~^ ERROR expected `uint` but found `int`\n \n-    let_in(3, fn&(i) { assert i == 3u; });\n+    let_in(3, |i| { assert i == 3u; });\n     //~^ ERROR expected `int` but found `uint`\n }"}, {"sha": "7e65d1908c4d115f9bb1fbcc14ebf7a244b77996", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,6 @@\n \n \n extern mod std;\n-use option::Some;\n \n // error-pattern: mismatched types\n "}, {"sha": "6b3b6f1463f58b6f335b1575d4c67d3db6e4ed78", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,6 @@\n // except according to those terms.\n \n extern mod std;\n-use option::Some;\n \n // error-pattern: mismatched types\n "}, {"sha": "2744afb113d5fc112fd6ede03fc7f1c56905b691", "filename": "src/test/compile-fail/pure-subtyping.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-subtyping.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,36 +12,36 @@\n \n fn take<T>(_v: T) {}\n \n-fn assign_to_pure(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<pure fn()>(x);\n-    take::<pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n-    take::<pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n+fn assign_to_pure(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&pure fn()>(x);\n+    take::<&pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n+    take::<&pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n }\n \n-fn assign_to_impure(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<fn()>(x);\n-    take::<fn()>(y);\n-    take::<fn()>(z); //~ ERROR expected impure fn but found unsafe fn\n+fn assign_to_impure(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&fn()>(x);\n+    take::<&fn()>(y);\n+    take::<&fn()>(z); //~ ERROR expected impure fn but found unsafe fn\n }\n \n-fn assign_to_unsafe(x: pure fn(), y: fn(), z: unsafe fn()) {\n-    take::<unsafe fn()>(x);\n-    take::<unsafe fn()>(y);\n-    take::<unsafe fn()>(z);\n+fn assign_to_unsafe(x: &pure fn(), y: &fn(), z: &unsafe fn()) {\n+    take::<&unsafe fn()>(x);\n+    take::<&unsafe fn()>(y);\n+    take::<&unsafe fn()>(z);\n }\n \n-fn assign_to_pure2(x: pure fn@(), y: fn@(), z: unsafe fn@()) {\n-    take::<pure fn()>(x);\n-    take::<pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n-    take::<pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n+fn assign_to_pure2(x: @pure fn(), y: @fn(), z: @unsafe fn()) {\n+    take::<&pure fn()>(x);\n+    take::<&pure fn()>(y); //~ ERROR expected pure fn but found impure fn\n+    take::<&pure fn()>(z); //~ ERROR expected pure fn but found unsafe fn\n \n-    take::<pure fn~()>(x); //~ ERROR expected ~ closure, found @ closure\n-    take::<pure fn~()>(y); //~ ERROR expected ~ closure, found @ closure\n-    take::<pure fn~()>(z); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(x); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(y); //~ ERROR expected ~ closure, found @ closure\n+    take::<~pure fn()>(z); //~ ERROR expected ~ closure, found @ closure\n \n-    take::<unsafe fn~()>(x); //~ ERROR expected ~ closure, found @ closure\n-    take::<unsafe fn~()>(y); //~ ERROR expected ~ closure, found @ closure\n-    take::<unsafe fn~()>(z); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(x); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(y); //~ ERROR expected ~ closure, found @ closure\n+    take::<~unsafe fn()>(z); //~ ERROR expected ~ closure, found @ closure\n }\n \n fn main() {"}, {"sha": "a4f1825fcaee67eb3dc9cbc5b594f2810bd16e10", "filename": "src/test/compile-fail/regions-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // we reported errors in this case:\n \n fn not_ok(a: &uint, b: &b/uint) {\n-    let mut g: fn@(x: &uint) = fn@(x: &b/uint) {};\n+    let mut g: @fn(x: &uint) = |x: &b/uint| {};\n     //~^ ERROR mismatched types\n     g(a);\n }"}, {"sha": "c25205c58d1960043257f69ae0393e5084db563a", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n mod argparse {\n     extern mod std;\n \n-    use either::{Either, Left, Right};\n+    use core::either::{Either, Left, Right};\n \n     pub struct Flag {\n         name: &str,"}, {"sha": "936aa79d0328de1b503308c801b84b7e16374436", "filename": "src/test/compile-fail/regions-infer-contravariance-due-to-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-contravariance-due-to-ret.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -14,7 +14,7 @@\n // the normal case.\n \n struct contravariant {\n-    f: fn@() -> &self/int\n+    f: @fn() -> &self/int\n }\n \n fn to_same_lifetime(bi: contravariant/&r) {"}, {"sha": "27e1452d9572991b4fccea4ab5b205b29c711cef", "filename": "src/test/compile-fail/regions-infer-covariance-due-to-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-covariance-due-to-arg.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n // You can upcast to a *larger region* but not a smaller one.\n \n struct covariant {\n-    f: fn@(x: &self/int) -> int\n+    f: @fn(x: &self/int) -> int\n }\n \n fn to_same_lifetime(bi: covariant/&r) {"}, {"sha": "c84afc6ca64fdf23ccb071770555914223cac437", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: fn@(x: @mut &self/int)\n+    f: @fn(x: @mut &self/int)\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "b958aa70aa4039b5a8687a62c06d13a80cf06fdd", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: fn@() -> @mut &self/int\n+    f: @fn() -> @mut &self/int\n }\n \n fn to_same_lifetime(bi: invariant/&r) {"}, {"sha": "ca105a1dd5e02f067497e1ef554436f6c872a18c", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,15 +13,15 @@ struct direct {\n }\n \n struct indirect1 {\n-    g: fn@(direct)\n+    g: @fn(direct)\n }\n \n struct indirect2 {\n-    g: fn@(direct/&)\n+    g: @fn(direct/&)\n }\n \n struct indirect3 {\n-    g: fn@(direct/&self)\n+    g: @fn(direct/&self)\n }\n \n fn take_direct(p: direct) -> direct { p } //~ ERROR mismatched types"}, {"sha": "11414a11108473b13636e7d63fe829185e49d725", "filename": "src/test/compile-fail/regions-infer-region-in-fn-but-not-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-region-in-fn-but-not-type.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n \n // check that the &int here does not cause us to think that `foo`\n // contains region pointers\n-enum foo = fn~(x: &int);\n+enum foo = ~fn(x: &int);\n \n fn take_foo(x: foo/&) {} //~ ERROR no region bound is allowed on `foo`\n "}, {"sha": "b4cbbacea3f09753590b9fb7623a25728d0073a3", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,9 +12,8 @@ fn ignore<T>(_t: T) {}\n \n fn nested() {\n     let y = 3;\n-    ignore(fn&(z: &z/int) -> &z/int {\n-        if false { return &y; } //~ ERROR illegal borrow\n-        return z;\n+    ignore(|z: &z/int| -> &z/int {\n+        if false { &y } else { z } //~ ERROR illegal borrow\n     });\n }\n "}, {"sha": "714b863ca1d32a4b7be1ea220e75e2a32966e6e9", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -14,13 +14,13 @@ fn nested(x: &x/int) {\n     let y = 3;\n     let mut ay = &y; //~ ERROR cannot infer an appropriate lifetime\n \n-    ignore(fn&(z: &z/int) {\n+    ignore(|z: &z/int| {\n         ay = x;\n         ay = &y;  //~ ERROR cannot infer an appropriate lifetime\n         ay = z;\n     });\n \n-    ignore(fn&(z: &z/int) -> &z/int {\n+    ignore(|z: &z/int| -> &z/int {\n         if false { return x; }  //~ ERROR mismatched types\n         if false { return ay; }\n         return z;"}, {"sha": "66f1007afcf97a2b6e07238dddae49b5f49fc419", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,13 +12,12 @@ fn with<T>(t: T, f: fn(T)) { f(t) }\n \n fn nested<'x>(x: &'x int) {  // (1)\n     do with(\n-        fn&(x: &'x int, // Refers to the region `x` at (1)\n-            y: &'y int, // A fresh region `y` (2)\n-            z: fn<'z>(x: &'x int, // Refers to `x` at (1)\n-                      y: &'y int, // Refers to `y` at (2)\n-                      z: &'z int) -> &'z int) // A fresh region `z` (3)\n-            -> &x/int {\n-\n+        |x: &'x int, // Refers to the region `x` at (1)\n+         y: &'y int, // A fresh region `y` (2)\n+         z: &fn<'z>(x: &'x int, // Refers to `x` at (1)\n+                    y: &'y int, // Refers to `y` at (2)\n+                    z: &'z int) -> &'z int| // A fresh region `z` (3)\n+                 -> &x/int {\n             if false { return z(x, y, x); }\n \n             if false { return z(x, y, y); }"}, {"sha": "33bb06e4f264378c0ba137cdd01eb307f4222638", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(f: fn@(uint) -> uint) -> uint {\n+fn test(f: @fn(uint) -> uint) -> uint {\n     return f(22u);\n }\n \n fn main() {\n-    let f = fn~(x: uint) -> uint { return 4u; };\n+    let f: ~fn(x: uint) -> uint = |x| 4u;\n     log(debug, test(f)); //~ ERROR expected @ closure, found ~ closure\n }"}, {"sha": "00e3e612e8f5babf7e5f3adb1c0a2a4c401cd25d", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,4 +12,4 @@\n \n extern mod std;\n \n-fn main() { task::spawn(fn~() -> int { 10 }); }\n+fn main() { task::spawn(|| -> int { 10 }); }"}, {"sha": "67fdfffe1d3b63b744c2d353d32ba5020bb0c5a2", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn blk1(b: fn()) -> fn@() { return fn@() { }; }\n+fn blk1(b: &fn()) -> @fn() { return || { }; }\n fn test1() { (do blk1 { debug!(\"hi\"); })(); }"}, {"sha": "56b7acc7f0f18f7a88448abf522d0533f8de14c9", "filename": "src/test/run-fail/issue-2144.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fissue-2144.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fissue-2144.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2144.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n // Don't leak when the landing pads need to request more stack\n // than is allowed during normal execution\n \n-fn useBlock(f: fn~() -> uint) { useBlock(|| 22u ) }\n+fn useBlock(f: ~fn() -> uint) { useBlock(|| 22u ) }\n fn main() {\n     useBlock(|| 22u );\n }"}, {"sha": "9ca343e3866b883d0831774e071e2c7bb9b1a102", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:explicit failure\n // Don't double free the string\n extern mod std;\n-use io::ReaderUtil;\n+use core::io::ReaderUtil;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {"}, {"sha": "326c304ef3b7554021d025e35ea5a1170de0e3a5", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,9 +16,9 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x = @fn~() {\n+    let x: @~fn() = @(|| {\n         log(error, copy y);\n-    };\n+    });\n     failfn();\n     log(error, x);\n }"}, {"sha": "a2227e6c94ac274b8029b261795514a80c25ebe8", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,7 +16,7 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x = @fn@() {\n+    let x: @@fn() = @|| {\n         log(error, copy y);\n     };\n     failfn();"}, {"sha": "b84ae2e94fcea48f2aa8a0b5bf03a35a281ee3f2", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,6 +16,6 @@ fn f(a: @int) {\n \n fn main() {\n     let b = @0;\n-    let g : fn@() = || f(b);\n+    let g: @fn() = || f(b);\n     g();\n }"}, {"sha": "f92f7874fc39914c5170abe1316934edc586c5a9", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -14,12 +14,13 @@ fn main() {\n     let cheese = ~\"roquefort\";\n     let carrots = @~\"crunchy\";\n \n-    fn@(tasties: @~str, macerate: fn(~str)) {\n+    let result: @fn(@~str, &fn(~str)) = (|tasties, macerate| {\n         macerate(copy *tasties);\n-    } (carrots, |food| {\n+    });\n+    result(carrots, |food| {\n         let mush = food + cheese;\n         let cheese = copy cheese;\n-        let f = fn@() {\n+        let f: &fn() = || {\n             let chew = mush + cheese;\n             fail!(~\"so yummy\")\n         };"}, {"sha": "6f7276af798deba6e95cd2967c4b67413c8efec0", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // the assert should fail at runtime\n // error-pattern:Assertion same_length(chars, ints) failed\n extern mod std;\n-use vec::{same_length, zip};\n+use core::vec::{same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}, {"sha": "0f19d4ee16b8ad286ac55547e714e21e1c4807a1", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,8 +12,9 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n-    fn@() -> (A, u16) { (a, b) }\n+fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+    let result: @fn() -> (A, u16) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "1de3fde58f29a22914c682247a6cee98a4a3929d", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -23,8 +23,9 @@ fn make_cycle<A:Copy>(a: A) {\n     g.rec = Some(g);\n }\n \n-fn f<A:Owned + Copy,B:Owned + Copy>(a: A, b: B) -> fn@() -> (A, B) {\n-    fn@() -> (A, B) { (a, b) }\n+fn f<A:Owned + Copy,B:Owned + Copy>(a: A, b: B) -> @fn() -> (A, B) {\n+    let result: @fn() -> (A, B) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "171e7a836bee15d7aed1af48403f441ac6deaf9c", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -17,13 +17,13 @@ extern mod std;\n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n \n-use cmp::Eq;\n-use std::ebml;\n use EBReader = std::ebml::reader;\n use EBWriter = std::ebml::writer;\n-use io::Writer;\n-use std::serialize::{Encodable, Decodable};\n+use core::cmp::Eq;\n+use core::io::Writer;\n+use std::ebml;\n use std::prettyprint;\n+use std::serialize::{Encodable, Decodable};\n use std::time;\n \n fn test_prettyprint<A:Encodable<prettyprint::Serializer>>("}, {"sha": "1549eb6fbc23407c4403b8c89c48e0049d06cd48", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,19 +10,15 @@\n \n extern mod std;\n \n-fn asSendfn( f : fn~()->uint ) -> uint {\n+fn asSendfn( f : ~fn()->uint ) -> uint {\n    return f();\n }\n \n-fn asLambda( f : fn@()->uint ) -> uint {\n+fn asLambda( f : @fn()->uint ) -> uint {\n    return f();\n }\n \n-fn asBlock( f : fn&()->uint ) -> uint {\n-   return f();\n-}\n-\n-fn asAny( f : fn()->uint ) -> uint {\n+fn asBlock( f : &fn()->uint ) -> uint {\n    return f();\n }\n "}, {"sha": "04adeb9c71b1899eb23c459996ce398eaf1fd3e9", "filename": "src/test/run-pass/block-arg-used-as-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn to_lambda(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n+fn to_lambda(f: @fn(uint) -> uint) -> @fn(uint) -> uint {\n     return f;\n }\n \n pub fn main() {\n-    let x: fn@(uint) -> uint = to_lambda(|x| x * 2u );\n+    let x: @fn(uint) -> uint = to_lambda(|x| x * 2u );\n     let y = to_lambda(x);\n \n     let x_r = x(22u);"}, {"sha": "7089e596619e07d5fd2c20702463ac90e5690309", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,21 +11,21 @@\n pub fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move = fn@() -> uint { ptr::addr_of(&(*x)) as uint };\n+    let lam_move: @fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n \n     let x = ~2;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn@() -> uint = || ptr::addr_of(&(*x)) as uint;\n+    let lam_move: @fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n \n     let x = ~3;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let snd_move = fn~() -> uint { ptr::addr_of(&(*x)) as uint };\n+    let snd_move: ~fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert snd_move() == y;\n \n     let x = ~4;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn~() -> uint = || ptr::addr_of(&(*x)) as uint;\n+    let lam_move: ~fn() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n }"}, {"sha": "4b2c2d0d3081651fa22a6d9fcb0e6324517a8f3c", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -58,10 +58,8 @@ class cat : noisy, scratchy, bitey {\n   new(in_x : uint, in_y : int, in_name: str)\n     { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n       self.name = in_name; self.scratched = dvec();\n-      let hsher: hashfn<body_part> =\n-        fn@(p: body_part) -> uint { int::hash(p as int) };\n-      let eqer : eqfn<body_part> =\n-        fn@(p: body_part, q: body_part)  -> bool { p == q };\n+      let hsher: hashfn<body_part> = |p| int::hash(p as int);\n+      let eqer : eqfn<body_part> = |p, q| p == q;\n       let t : hashmap<body_part, uint> =\n         hashmap::<body_part, uint>(hsher, eqer);\n       self.bite_counts = t;"}, {"sha": "8c31b39ac28257d4de2d481fa83502f236cfed7c", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,8 +16,9 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy + &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n-    fn@() -> (A, u16) { (a, b) }\n+fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n+    let result: @fn() -> (A, u16) = || (a, b);\n+    result\n }\n \n pub fn main() {"}, {"sha": "cd148417f4c673c988a3e7070e35d80146ed814a", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z: fn@() }\n+struct foo { z: @fn() }\n \n fn nop() { }\n fn nop_foo(_x : @mut foo) { }\n \n pub fn main() {\n     let w = @mut foo{ z: || nop() };\n-    let x: fn@() = || nop_foo(w);\n+    let x: @fn() = || nop_foo(w);\n     w.z = x;\n }"}, {"sha": "8b613093944c5feff2bd4e98ac1c4303522a976f", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z : fn@() }\n+struct foo { z : @fn() }\n \n fn nop() { }\n fn nop_foo(_y: ~[int], _x : @mut foo) { }\n \n pub fn main() {\n     let w = @mut foo{ z: || nop() };\n-    let x : fn@() = || nop_foo(~[], w);\n+    let x : @fn() = || nop_foo(~[], w);\n     w.z = x;\n }"}, {"sha": "f724a86555c76992106028014dd18b96a1849f95", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct foo { z: fn@() }\n+struct foo { z: @fn() }\n \n fn nop() { }\n fn nop_foo(_y: @int, _x: @mut foo) { }\n@@ -17,6 +17,6 @@ fn o() -> @int { @10 }\n \n pub fn main() {\n     let w = @mut foo { z: || nop() };\n-    let x : fn@() = || nop_foo(o(), w);\n+    let x : @fn() = || nop_foo(o(), w);\n     w.z = x;\n }"}, {"sha": "c89d693c816359bb3681e560d9fd388407fb697b", "filename": "src/test/run-pass/do-for-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in for/do exprs\n \n-fn f(f: fn@() -> bool) { }\n+fn f(f: @fn() -> bool) { }\n \n-fn d(f: fn@()) { }\n+fn d(f: @fn()) { }\n \n pub fn main() {\n     for f { }"}, {"sha": "b1113f5ad51f0bd870ad2ca4747e01c9825213a2", "filename": "src/test/run-pass/do-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-stack.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn&(int)) { f(10) }\n+fn f(f: &fn(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert i == 10 }"}, {"sha": "a7a34d06f1e83d9b9927c07332db2c0bb8209490", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int)) { f(10) }\n+fn f(f: @fn(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert i == 10 }"}, {"sha": "d82331c6045294b770bfd46dc39a5f53b6e09c03", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> int) -> int { f(10) }\n+fn f(f: @fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert do f() |i| { i } == 10;"}, {"sha": "09337d892a71f1598fb70726c83bf04eafa2f046", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: fn@(int) -> int) -> int { f(10) }\n+fn f(f: @fn(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert do f |i| { i } == 10;"}, {"sha": "88c78e9e99755354940e50bb64b21b19e11e561c", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -15,8 +15,8 @@ extern mod std;\n  *\n  * The hash should concentrate entropy in the lower bits.\n  */\n-type HashFn<K> = pure fn~(K) -> uint;\n-type EqFn<K> = pure fn~(K, K) -> bool;\n+type HashFn<K> = ~pure fn(K) -> uint;\n+type EqFn<K> = ~pure fn(K, K) -> bool;\n \n struct LM { resize_at: uint, size: uint }\n "}, {"sha": "7f477d3f103ad852440255ec3704b1f85ac0a868", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = match true { true => { expected }, _ => fail!() };"}, {"sha": "5612cca639d0f01b75d272a0efde940e43b0990e", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };"}, {"sha": "3c1131455f17ebe21481ba9eaebb5282f6b452cb", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(~T, ~T) -> bool;\n+type compare<T> = @fn(~T, ~T) -> bool;\n \n fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {"}, {"sha": "2d45e6a7a3eecf52107a0bebec462849c8ed1209", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = match true {"}, {"sha": "df7fbb8d5b2c0bdb8513723c8f6db446c2ecdce5", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // -*- rust -*-\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n   let actual: T = match true { true => { expected }, _ => fail!(~\"wat\") };"}, {"sha": "eb82a2a44454e63c436955dadbe62f5d35f15bf8", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n \n \n fn test_fn() {\n-    type t = fn@() -> int;\n+    type t = @fn() -> int;\n     fn ten() -> int { return 10; }\n     let rs: t = { ten };\n     //assert (rs() == 10);"}, {"sha": "737ff99440d52a6f0182ead33a0bc509577d5cf8", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n     let actual: @T = { expected };"}, {"sha": "eeda810b5c6ca6b52e0c8c2f4221c4e4ee60790d", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "a9074b6f97f38c5174238cd37b5e58942c3b43ad", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(~T, ~T) -> bool;\n+type compare<T> = @fn(~T, ~T) -> bool;\n \n fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { copy expected };"}, {"sha": "6624e6ea0152f3ffc2a68a2ecfe694b47fdc0f1c", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "63187bee76fe7fdc736f744e80d7479d3d6d34ee", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n // xfail-fast\n \n // Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };"}, {"sha": "fd5e88da730d247eae2016c53ba2ff9b7cc34954", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-type compare<T> = fn@(@T, @T) -> bool;\n+type compare<T> = @fn(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n     let actual: @T = if true { expected } else { not_expected };"}, {"sha": "08809d03515734ad0427fc7e396edadabf766f04", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n #[legacy_modes];\n \n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "18cc4048242c9214ffbfa4b3c16d6711d4042cd2", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n // -*- rust -*-\n \n // Tests for if as expressions with dynamic type sizes\n-type compare<T> = fn@(T, T) -> bool;\n+type compare<T> = @fn(T, T) -> bool;\n \n fn test_generic<T:Copy>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };"}, {"sha": "e28191ce35ef33e4b1a77a72e7caecd19540cb7c", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,15 +10,15 @@\n \n // xfail-fast\n \n-fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f( |a| fix_help(f, a), x);\n }\n \n-fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n+fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "0c34a94c9821bcb93fdb896d48e8304f48712446", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,15 +10,15 @@\n \n // xfail-fast\n \n-fn fix_help<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f(|a| fix_help(f, a), x);\n }\n \n-fn fix<A:&static,B:Owned>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A:&static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n \n-fn fact_(f: fn@(v: int) -> int, n: int) -> int {\n+fn fact_(f: @fn(v: int) -> int, n: int) -> int {\n     // fun fact 0 = 1\n     return if n == 0 { 1 } else { n * f(n - 1) };\n }"}, {"sha": "6facfc92d3e24f7af03dc3d77dc48c5909ce3850", "filename": "src/test/run-pass/fn-assign-managed-to-bare-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn add(n: int) -> fn@(int) -> int {\n-      fn@(m: int) -> int { m + n }\n+fn add(n: int) -> @fn(int) -> int {\n+    let result: @fn(int) -> int = |m| m + n;\n+    result\n }\n \n-pub fn main()\n-{\n+pub fn main() {\n       assert add(3)(4) == 7;\n       let add3 : fn(int)->int = add(3);\n       assert add3(4) == 7;"}, {"sha": "be07da77baa7bbdf061b90398bb0a856e739bcff", "filename": "src/test/run-pass/fn-assign-managed-to-bare-2.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-assign-managed-to-bare-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,20 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn add(n: int) -> fn@(int) -> int {\n-    fn@(m: int) -> int { m + n }\n+fn add(n: int) -> @fn(int) -> int {\n+    let result: @fn(int) -> int = |m| m + n;\n+    result\n }\n \n pub fn main()\n {\n     assert add(3)(4) == 7;\n \n-    let add1 : fn@(int)->int = add(1);\n+    let add1 : @fn(int)->int = add(1);\n     assert add1(6) == 7;\n \n-    let add2 : &(fn@(int)->int) = &add(2);\n+    let add2 : &(@fn(int)->int) = &add(2);\n     assert (*add2)(5) == 7;\n \n-    let add3 : fn(int)->int = add(3);\n+    let add3 : &fn(int)->int = add(3);\n     assert add3(4) == 7;\n }"}, {"sha": "853b44ed76cb67d7df58f7924afab8d011eab57f", "filename": "src/test/run-pass/fn-bare-coerce-to-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-shared.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n fn bare() {}\n \n-fn likes_shared(f: fn@()) { f() }\n+fn likes_shared(f: @fn()) { f() }\n \n pub fn main() {\n     likes_shared(bare);"}, {"sha": "39e4f52873a395e5c058bea4b06bae8f1ae48466", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct r {\n-    field: fn@()\n+    field: @fn()\n }\n \n pub fn main() {"}, {"sha": "a753005069ff937393b1ef3be806fe2e6d67ddbe", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    // We should be able to type infer inside of fn@s.\n-    let f = fn@() { let i = 10; };\n+    // We should be able to type infer inside of @fns.\n+    let f = || {\n+        let i = 10;\n+    };\n }"}, {"sha": "b51f60f95a8aee9be7d5b2d0c2b4a8b727338356", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: fn@(int) -> int) -> int { let n: int = f(3); return n; }\n+fn ho(f: @fn(int) -> int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "72d4ab7aeabc9218c5c736c712954e4c5b38dd3a", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -29,7 +29,7 @@ mod map_reduce {\n     use std::oldmap::HashMap;\n     use core::comm::*;\n \n-    pub type putter = fn@(~str, ~str);\n+    pub type putter = @fn(~str, ~str);\n \n     pub type mapper = extern fn(~str, putter);\n "}, {"sha": "a6d8eac3bd16387640e40a96b513a70d6eee9385", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    use vec::from_fn;\n-    log(debug, vec::len(from_fn(2, |i| i)));\n+    use core::vec::from_fn;\n+    log(debug, ::core::vec::len(from_fn(2, |i| i)));\n     {\n-        use vec::*;\n+        use core::vec::*;\n         log(debug, len(~[2]));\n     }\n }"}, {"sha": "972a36697317184c0f653bc4e104b0a8e03fe1c9", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n \n use baz::zed;\n-use zed::bar;\n+use baz::zed::bar;\n \n mod baz {\n     pub mod zed {"}, {"sha": "bbdbdd54f91f68d6ab6d90672aa5976cf4182ebf", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -18,6 +18,6 @@ mod foo {\n     }\n }\n mod bar {\n-    pub use zed::baz;\n+    pub use foo::zed::baz;\n }\n pub fn main() { baz(); }"}, {"sha": "4c6cc3458c43b593c660ced874d4b4815c82ba12", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -18,7 +18,7 @@ mod foo {\n     }\n }\n mod bar {\n-    pub use zed::baz;\n+    pub use foo::zed::baz;\n     pub mod foo {\n         pub mod zed {}\n     }"}, {"sha": "723cc8ef633e6cbbd9a1c9e1544d4815dd1a14f7", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n // type must be known in this context' if the passing down doesn't\n // happen.)\n \n-fn eat_tup(_r: ~@(int, fn@(Pair) -> int)) {}\n+fn eat_tup(_r: ~@(int, @fn(Pair) -> int)) {}\n fn eat_rec(_r: @~Rec) {}\n \n struct Rec { a: int, b: fn(Pair) -> int }"}, {"sha": "33be716cc5f48bdef192cf3b6355b64a9681e576", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // xfail-test\n-pub fn main() {  let early_error: fn@(str) -> !  = {|msg| fail!() }; }\n+pub fn main() {  let early_error: @fn(str) -> !  = {|msg| fail!() }; }\n "}, {"sha": "67877795cc0d8d7b633b0fd49941a6d13a120fbf", "filename": "src/test/run-pass/issue-1895.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1895.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,8 +10,7 @@\n \n pub fn main() {\n   let x = 1;\n-  let y = fn@() -> int {\n-             x\n-          }();\n+  let y: @fn() -> int = || x;\n+  let z = y();\n }\n "}, {"sha": "e3327283a8162f49f72664a7c5dced8073069328", "filename": "src/test/run-pass/issue-1989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1989.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -17,13 +17,13 @@ enum maybe_pointy {\n \n struct Pointy {\n     a : maybe_pointy,\n-    f : fn@()->(),\n+    f : @fn()->(),\n }\n \n fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy{\n         a : none,\n-        f : fn@()->(){},\n+        f : || {},\n     }\n }\n "}, {"sha": "cd2273ab173fe62b083efccd0a0818ad113f7995", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -18,29 +18,29 @@ trait iterable<A> {\n     fn iter(blk: fn(A));\n }\n \n-impl<A> iterable<A> for fn@(fn(A)) {\n+impl<A> iterable<A> for @fn(&fn(A)) {\n     fn iter(blk: fn(A)) { self(blk); }\n }\n \n-impl iterable<uint> for fn@(fn(uint)) {\n+impl iterable<uint> for @fn(&fn(uint)) {\n     fn iter(blk: fn(&&v: uint)) { self( |i| blk(i) ) }\n }\n \n-fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n+fn filter<A,IA:iterable<A>>(self: IA, prd: @fn(A) -> bool, blk: &fn(A)) {\n     do self.iter |a| {\n         if prd(a) { blk(a) }\n     }\n }\n \n-fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: fn(B, A) -> B) -> B {\n+fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: &fn(B, A) -> B) -> B {\n     let mut b = b0;\n     do self.iter |a| {\n         b = blk(b, a);\n     }\n     b\n }\n \n-fn range(lo: uint, hi: uint, it: fn(uint)) {\n+fn range(lo: uint, hi: uint, it: &fn(uint)) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n@@ -49,8 +49,8 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n }\n \n pub fn main() {\n-    let range: fn@(fn&(uint)) = |a| range(0u, 1000u, a);\n-    let filt: fn@(fn&(v: uint)) = |a| filter(\n+    let range: @fn(&fn(uint)) = |a| range(0u, 1000u, a);\n+    let filt: @fn(&fn(v: uint)) = |a| filter(\n         range,\n         |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n         a);"}, {"sha": "c769c33390fa5a3da7d332c7f7b2542a17b8bf82", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n const generations: uint = 1024+256+128+49;\n \n-fn child_no(x: uint) -> fn~() {\n+fn child_no(x: uint) -> ~fn() {\n      || {\n         if x < generations {\n             task::spawn(child_no(x+1));"}, {"sha": "3842e073faf13e7c4b83b77a8f25a63327a5d564", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,19 +10,19 @@\n \n // xfail-test\n mod a {\n-fn foo(f: fn&()) { f() }\n+fn foo(f: &fn()) { f() }\n fn bar() {}\n pub fn main() { foo(||bar()); }\n }\n \n mod b {\n-fn foo(f: Option<fn&()>) { f.iter(|x|x()) }\n+fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n fn bar() {}\n pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-fn foo(f: Option<fn&()>) { f.iter(|x|x()) }\n+fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n fn bar() {}\n pub fn main() { foo(Some(||bar())); }\n }"}, {"sha": "05869952fb8b55afff1ba9c9a9f14baf7cba6b45", "filename": "src/test/run-pass/issue-2190.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test\n type t = {\n-    f: fn~()\n+    f: ~fn()\n };\n \n pub fn main() {"}, {"sha": "7b3247fafc7d4ec5ccd51d4b1757819975f7d3cd", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait FlatMapToVec<A> {\n   fn flat_map_to_vec<B, IB:BaseIter<B>>(op: fn(&A) -> IB) -> ~[B];"}, {"sha": "2eb63102224c9831d10d897c05ee82a0c43df0bc", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct cat {\n-    meow: fn@(),\n+    meow: @fn(),\n }\n \n fn cat() -> cat {\n     cat {\n-        meow: fn@() { error!(\"meow\"); }\n+        meow: || error!(\"meow\")\n     }\n }\n "}, {"sha": "2b4acc34f4659ba77960daba1ba8b79ec8e7e2f7", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,12 +11,11 @@\n // except according to those terms.\n \n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use std::oldmap::HashMap;\n use std::json;\n \n-enum object\n-{\n+enum object {\n     bool_value(bool),\n     int_value(i64),\n }"}, {"sha": "3340a387a128c4e6bb6989a0302fa4ace3392c6a", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n /// Map representation\n \n-use io::ReaderUtil;\n+use core::io::ReaderUtil;\n \n extern mod std;\n "}, {"sha": "852c6d995c60e587cba32e7158d4a5668f34606e", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Connection = fn@(~[u8]);\n+type Connection = @fn(~[u8]);\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = fn@(_data: ~[u8]) { };\n+    let mock_connection: Connection = |_| {};\n     Some(mock_connection)\n }\n "}, {"sha": "e0c074c968f38081ddb254372e57ddc1d5e872a0", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use comm::{Select2, Selectable};\n+use core::comm::{Select2, Selectable};\n \n pub fn main() {\n     let (p,c) = comm::stream();"}, {"sha": "0e4f7d9749dd6d4c874545f713e5335fe91ec59a", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,9 +12,9 @@\n \n // rustc --test ignores2.rs && ./ignores2\n extern mod std;\n-use path::{Path};\n+use core::path::{Path};\n \n-type rsrc_loader = fn~ (path: &Path) -> result::Result<~str, ~str>;\n+type rsrc_loader = ~fn(path: &Path) -> result::Result<~str, ~str>;\n \n #[test]\n fn tester()"}, {"sha": "4671b25ce22d4c1ea5664940e3885137c1793e6e", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -20,7 +20,7 @@ extern mod std;\n \n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method.\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n // Represents a position on a canvas.\n struct Point {"}, {"sha": "d0afd0107ee3e3239a0a7a8a6fcabe7ac6202872", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -1,9 +1,9 @@\n extern mod std;\n \n-use comm::Chan;\n+use core::comm::Chan;\n \n type RingBuffer = ~[float];\n-type SamplesFn = fn~ (samples: &RingBuffer);\n+type SamplesFn = ~fn(samples: &RingBuffer);\n \n enum Msg\n {"}, {"sha": "a1f57b380c17dc0d7da2cd7b233067f7107ee7be", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n // This should typecheck even though the type of e is not fully\n-// resolved when we finish typechecking the fn@.\n+// resolved when we finish typechecking the @fn.\n \n \n struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let f = fn@ () { log(error, e.n); };\n+    let f: @fn() = || log(error, e.n);\n     e.refs += ~[1];\n }"}, {"sha": "2dc7079af53279e1c15d9a830d85b50f9e1af935", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure we don't leak fn@s in silly ways.\n-fn force(f: fn@()) { f() }\n+// Make sure we don't leak @fns in silly ways.\n+fn force(f: @fn()) { f() }\n pub fn main() {\n     let x = 7;\n-    let _f = fn@() { log(error, x); };\n-    force(fn@() { log(error, x); });\n+    let _f: @fn() = || log(error, x);\n+    force(|| log(error, x));\n }"}, {"sha": "b5fb43680984705479e87ad728a8db2f588a7ac9", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,10 +12,11 @@\n \n struct A { a: ~int }\n \n-fn foo() -> fn@() -> int {\n+fn foo() -> @fn() -> int {\n     let k = ~22;\n     let _u = A {a: copy k};\n-    return fn@() -> int { 22 };\n+    let result: @fn() -> int = || 22;\n+    result\n }\n \n pub fn main() {"}, {"sha": "0535e63fcb494e5dacaf9a37dfae2c2b3955cc29", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n struct A { a: ~int }\n \n pub fn main() {\n-    fn invoke(f: fn@()) { f(); }\n+    fn invoke(f: @fn()) { f(); }\n     let k = ~22;\n     let _u = A {a: copy k};\n     invoke(|| log(error, copy k) )"}, {"sha": "ee9af0d9d6c13090306563e4b59cca9b2ccff7bf", "filename": "src/test/run-pass/monomorphize-trait-in-fn-at.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-trait-in-fn-at.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // test that invoking functions which require\n-// dictionaries from inside an fn@ works\n+// dictionaries from inside an @fn works\n // (at one point, it didn't)\n \n fn mk_nil<C:ty_ops>(cx: C) -> uint {\n@@ -25,8 +25,6 @@ impl ty_ops for () {\n }\n \n pub fn main() {\n-    let fn_env = fn@() -> uint {\n-        mk_nil(())\n-    };\n+    let fn_env: @fn() -> uint = || mk_nil(());\n     assert fn_env() == 22u;\n }"}, {"sha": "48f4a75ed4e4c1f7800788f9a3366581d9572b70", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(-thing: fn@()) { }\n+fn f2(-thing: @fn()) { }\n \n-fn f(-thing: fn@()) {\n+fn f(-thing: @fn()) {\n     f2(thing);\n }\n \n pub fn main() {\n-    f(fn@() {});\n+    f(|| {});\n }"}, {"sha": "267f365c7134c3adff8e0e0fdb0579da709eac25", "filename": "src/test/run-pass/new-import-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::println;\n+use core::io::println;\n \n pub fn main() {\n     println(\"Hello world!\");"}, {"sha": "10ac45922aa6cbd7b150f42f0d45151e5c6e567a", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,9 +11,9 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> fn@() { return || (); }\n+fn shared() -> @fn() { return || (); }\n \n-fn unique() -> fn~() { return || (); }\n+fn unique() -> ~fn() { return || (); }\n \n pub fn main() {\n }"}, {"sha": "4b580e7fa797aaac35c75b349b9b6bce10f60e34", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test fn~ is not inferred\n+// xfail-test ~fn is not inferred\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn shared() -> fn@() { || () }\n+fn shared() -> @fn() { || () }\n \n-fn unique() -> fn~() { || () }\n+fn unique() -> ~fn() { || () }\n \n pub fn main() {\n }"}, {"sha": "21a3e35068916e42581422454f87673947fa39df", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,11 +10,11 @@\n \n // Tests for the new |args| expr lambda syntax\n \n-fn f(i: int, f: fn(int) -> int) -> int { f(i) }\n+fn f(i: int, f: &fn(int) -> int) -> int { f(i) }\n \n fn g(g: fn()) { }\n \n-fn ff() -> fn@(int) -> int {\n+fn ff() -> @fn(int) -> int {\n     return |x| x + 1;\n }\n \n@@ -23,7 +23,7 @@ pub fn main() {\n     g(||());\n     assert do f(10) |a| { a } == 10;\n     do g() { }\n-    let _x: fn@() -> int = || 10;\n-    let _y: fn@(int) -> int = |a| a;\n+    let _x: @fn() -> int = || 10;\n+    let _y: @fn(int) -> int = |a| a;\n     assert ff()(10) == 11;\n }"}, {"sha": "8c3423bf8444135fbddb3f0501c6546da3dc5ca9", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -66,5 +66,6 @@ pub fn main() {\n     assert q.y == !(p.y);\n \n     // Issue #1733\n-    fn~(_x: int){}(p[true]);\n+    let result: ~fn(int) = |_|();\n+    result(p[true]);\n }"}, {"sha": "852c580667ad7651b3a6fc257c806b77bf86432c", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,9 +11,9 @@\n // xfail-fast\n \n use core::bool;\n+use core::libc::c_void;\n+use core::vec::UnboxedVecRepr;\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-use libc::c_void;\n-use vec::UnboxedVecRepr;\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n \n@@ -463,9 +463,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_closure_ptr(&self, ck: uint) -> bool {\n-        self.align_to::<fn@()>();\n+        self.align_to::<@fn()>();\n         if ! self.inner.visit_closure_ptr(ck) { return false; }\n-        self.bump_past::<fn@()>();\n+        self.bump_past::<@fn()>();\n         true\n     }\n }"}, {"sha": "e78a6e69bddb30f94f66966f43d47103cc942339", "filename": "src/test/run-pass/regions-equiv-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-equiv-fns.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,7 +13,7 @@\n \n fn ok(a: &uint) {\n     // Here &r is an alias for &:\n-    let mut g: fn@(x: &uint) = fn@(x: &r/uint) {};\n+    let mut g: @fn(x: &uint) = |x: &r/uint| {};\n     g(a);\n }\n "}, {"sha": "b28d8534fecabc0865dd1895537aa25b86c57eca", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,21 +11,21 @@\n // Issue #2263.\n \n // Should pass region checking.\n-fn ok(f: fn@(x: &uint)) {\n+fn ok(f: @fn(x: &uint)) {\n     // Here, g is a function that can accept a uint pointer with\n     // lifetime r, and f is a function that can accept a uint pointer\n     // with any lifetime.  The assignment g = f should be OK (i.e.,\n     // f's type should be a subtype of g's type), because f can be\n     // used in any context that expects g's type.  But this currently\n     // fails.\n-    let mut g: fn@(y: &r/uint) = fn@(x: &r/uint) { };\n+    let mut g: @fn(y: &r/uint) = |x: &r/uint| { };\n     g = f;\n }\n \n // This version is the same as above, except that here, g's type is\n // inferred.\n-fn ok_inferred(f: fn@(x: &uint)) {\n-    let mut g = fn@(x: &r/uint) { };\n+fn ok_inferred(f: @fn(x: &uint)) {\n+    let mut g: @fn(x: &r/uint) = |_| {};\n     g = f;\n }\n "}, {"sha": "12e8ab1384fccc4f79e04603d52c42d62b24ec52", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,9 @@\n // except according to those terms.\n \n extern mod std;\n-use libc, sys, cast;\n+use core::libc;\n+use core::sys;\n+use core::cast;\n use std::arena::Arena;\n \n struct Bcx {"}, {"sha": "3f11a9bdce3c7da7cba06ac61b4786c2ac1eeef6", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn iter<T>(v: ~[T], it: fn(&T) -> bool) {\n     let mut i = 0u, l = v.len();"}, {"sha": "ce4e6218d0bfb2eb041b547fe5d5ff826bbe7467", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n         error!(\"new_sched_id %?\", new_sched_id);\n         let new_task_id = rustrt::rust_new_task_in_sched(new_sched_id);\n         assert !new_task_id.is_null();\n-        let f = fn~() {\n+        let f: ~fn() = || {\n             unsafe {\n                 let child_sched_id = rustrt::rust_get_sched_id();\n                 error!(\"child_sched_id %?\", child_sched_id);"}, {"sha": "c0af726dd8d641353caab9d14080963f51684245", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -31,10 +31,8 @@ fn test05_start(f: &~fn(v: float, v: ~str) -> Pair<float, ~str>) {\n }\n \n fn spawn<A:Copy,B:Copy>(f: extern fn(&~fn(A,B)->Pair<A,B>)) {\n-    let arg = fn~(a: A, b: B) -> Pair<A,B> {\n-        return make_generic_record(a, b);\n-    };\n-    task::spawn(|| f(&arg) );\n+    let arg: ~fn(A, B) -> Pair<A,B> = |a, b| make_generic_record(a, b);\n+    task::spawn(|| f(&arg));\n }\n \n fn test05() {"}, {"sha": "92e709a373870137a03261cdccbef974586484f1", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -15,6 +15,6 @@ fn test(f: fn(uint) -> uint) -> uint {\n }\n \n pub fn main() {\n-    let y = test(fn~(x: uint) -> uint { return 4u * x; });\n+    let y = test(|x| 4u * x);\n     assert y == 88u;\n }"}, {"sha": "9b71f678122cd70dad64d236e0abfe3a0c119c3b", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,17 +10,17 @@\n \n pub fn main() { test05(); }\n \n-fn test05_start(&&f: fn~(int)) {\n+fn test05_start(&&f: ~fn(int)) {\n     f(22);\n }\n \n fn test05() {\n     let three = ~3;\n-    let fn_to_send = fn~(n: int) {\n+    let fn_to_send: ~fn(int) = |n| {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         test05_start(fn_to_send);\n     });\n }"}, {"sha": "c39a0f36d5804a4ee2757c6d1272f900c3ed10d6", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use std::tempfile;\n \n pub fn main() {"}, {"sha": "3e71875c4b5c0803106c58ef77509bea3c6a49fc", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -13,8 +13,8 @@\n \n extern mod std;\n \n-use comm::Chan;\n-use comm::Port;\n+use core::comm::Chan;\n+use core::comm::Port;\n \n pub fn main() { test05(); }\n "}, {"sha": "48a2b30209825898918c21d33b7b06731d194bfe", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -39,7 +39,7 @@ fn notify(ch: Chan<bool>, v: @mut bool) -> notify {\n     }\n }\n \n-fn joinable(f: fn~()) -> Port<bool> {\n+fn joinable(f: ~fn()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\","}, {"sha": "cbfff832736ece307bd9f1d293bf08d0d548bf2b", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let x = ~1;\n     let x_in_parent = ptr::addr_of(&(*x)) as uint;\n \n-    task::spawn(fn~() {\n+    task::spawn(|| {\n         let x_in_child = ptr::addr_of(&(*x)) as uint;\n         ch.send(x_in_child);\n     });"}, {"sha": "36b1e6cd4de405dd49ed5f533bd81ad1131203f9", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "70eed496db3f551844f868d8931fa0596a8d4af4", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,7 +12,7 @@\n \n // Extending Num and using inherited static methods\n \n-use num::NumCast::from;\n+use core::num::NumCast::from;\n \n trait Num {\n     static fn from_int(i: int) -> Self;"}, {"sha": "44b4bd60f1de064f8b14dee7583afa16eecc4744", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Ord;\n-use num::NumCast::from;\n+use core::cmp::Ord;\n+use core::num::NumCast::from;\n \n pub trait NumExt: NumCast Ord { }\n "}, {"sha": "5c9d9e6a13b5fee6b8536ff752df5a1b035c3076", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -12,8 +12,8 @@\n \n // A more complex example of numeric extensions\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "c2cd56ad1078e8c1e8c2f644fe6cf00c0dd47926", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n pub trait NumExt: Eq Ord NumCast {}\n "}, {"sha": "ac8d80359d87482509a6b3dac8e069f6783a3b76", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n pub trait NumExt: Eq NumCast {}\n "}, {"sha": "7ecc15a0d812d03299e4356609f53fb3ec44206d", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait MyNum : Eq { }\n "}, {"sha": "54a9ea9ad1e32551c6bc75e823b1594a4aa5ca32", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq { }\n "}, {"sha": "3a23a8246a5619aaa287c8b93584985f0f6a0f0e", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -15,11 +15,12 @@ enum maybe_pointy {\n \n struct Pointy {\n     a : maybe_pointy,\n-    d : fn~() -> uint,\n+    d : ~fn() -> uint,\n }\n \n-fn make_uniq_closure<A:Owned + Copy>(a: A) -> fn~() -> uint {\n-    fn~() -> uint { ptr::addr_of(&a) as uint }\n+fn make_uniq_closure<A:Owned + Copy>(a: A) -> ~fn() -> uint {\n+    let result: ~fn() -> uint = || ptr::addr_of(&a) as uint;\n+    result\n }\n \n fn empty_pointy() -> @mut Pointy {"}, {"sha": "b54daa477ecbe4b12bac24761eb0dbc77a93f199", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -16,14 +16,14 @@ enum maybe_pointy {\n struct Pointy {\n     a : maybe_pointy,\n     c : ~int,\n-    d : fn~()->(),\n+    d : ~fn()->(),\n }\n \n fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy {\n         a : none,\n         c : ~22,\n-        d : fn~()->(){},\n+        d : || {},\n     }\n }\n "}, {"sha": "3cc184572865be856abc44e06825710fd031a672", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn sendable() {\n "}, {"sha": "62023fdae53b5481fa7bd27270e700b60af73f63", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let x = ~1;\n-    let lam_move = fn@() { };\n+    let lam_move: @fn() = || {};\n     lam_move();\n }"}, {"sha": "1ade9e8246fdd9264817fbd3f8ca2db4823277ed", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5655ae46a73723203edcf6a53c87560e0da7aaec/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=5655ae46a73723203edcf6a53c87560e0da7aaec", "patch": "@@ -10,7 +10,7 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-use vec::{head, last, same_length, zip};\n+use core::vec::{head, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}]}