{"sha": "48a86e0b2cdfaba5a2a684911178d717067e4d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YTg2ZTBiMmNkZmFiYTVhMmE2ODQ5MTExNzhkNzE3MDY3ZTRkMjg=", "commit": {"author": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-17T23:52:10Z"}, "committer": {"name": "Thomas Etter", "email": "thomas.etter@auterion.com", "date": "2019-11-17T23:52:10Z"}, "message": "replace some asserts with assert_eq for better error readability", "tree": {"sha": "603fecea6d547b88691b16ddfb4acd6cc8399d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/603fecea6d547b88691b16ddfb4acd6cc8399d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48a86e0b2cdfaba5a2a684911178d717067e4d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48a86e0b2cdfaba5a2a684911178d717067e4d28", "html_url": "https://github.com/rust-lang/rust/commit/48a86e0b2cdfaba5a2a684911178d717067e4d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48a86e0b2cdfaba5a2a684911178d717067e4d28/comments", "author": null, "committer": null, "parents": [{"sha": "be993beb0b0294c6ce4519bf007f73063187809e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be993beb0b0294c6ce4519bf007f73063187809e", "html_url": "https://github.com/rust-lang/rust/commit/be993beb0b0294c6ce4519bf007f73063187809e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0bea2b80ecf5e185e2ce40f7c82cb0af14346e98", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48a86e0b2cdfaba5a2a684911178d717067e4d28/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48a86e0b2cdfaba5a2a684911178d717067e4d28/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=48a86e0b2cdfaba5a2a684911178d717067e4d28", "patch": "@@ -85,7 +85,7 @@ pub fn do_not_run_ignored_tests() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result != TrOk);\n+    assert_ne!(result, TrOk);\n }\n \n #[test]\n@@ -104,7 +104,7 @@ pub fn ignored_tests_result_in_ignored() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrIgnored);\n+    assert_eq!(result, TrIgnored);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -127,7 +127,7 @@ fn test_should_panic() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrOk);\n+    assert_eq!(result, TrOk);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -150,7 +150,7 @@ fn test_should_panic_good_message() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrOk);\n+    assert_eq!(result, TrOk);\n }\n \n // FIXME: Re-enable emscripten once it can catch panics again (introduced by #65251)\n@@ -227,7 +227,7 @@ fn test_should_panic_but_succeeds() {\n     let (tx, rx) = channel();\n     run_test(&TestOpts::new(), false, desc, RunStrategy::InProcess, tx, Concurrent::No);\n     let result = rx.recv().unwrap().result;\n-    assert!(result == TrFailedMsg(\"test did not panic as expected\".to_string()));\n+    assert_eq!(result, TrFailedMsg(\"test did not panic as expected\".to_string()));\n }\n \n fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n@@ -601,7 +601,7 @@ pub fn sort_tests() {\n     ];\n \n     for (a, b) in expected.iter().zip(filtered) {\n-        assert!(*a == b.desc.name.to_string());\n+        assert_eq!(*a, b.desc.name.to_string());\n     }\n }\n "}]}