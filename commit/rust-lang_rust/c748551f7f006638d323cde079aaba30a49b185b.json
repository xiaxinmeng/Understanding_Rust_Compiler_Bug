{"sha": "c748551f7f006638d323cde079aaba30a49b185b", "node_id": "C_kwDOAAsO6NoAKGM3NDg1NTFmN2YwMDY2MzhkMzIzY2RlMDc5YWFiYTMwYTQ5YjE4NWI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-19T14:36:58Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-05T19:45:27Z"}, "message": "Fix invalid add of whitespace when there is where clause", "tree": {"sha": "2c3fb8a240f25898f927c73697056dce2bb3f329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3fb8a240f25898f927c73697056dce2bb3f329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c748551f7f006638d323cde079aaba30a49b185b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c748551f7f006638d323cde079aaba30a49b185b", "html_url": "https://github.com/rust-lang/rust/commit/c748551f7f006638d323cde079aaba30a49b185b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c748551f7f006638d323cde079aaba30a49b185b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53792b9c5c3cded466a073e4b9a9e51d0007b9ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/53792b9c5c3cded466a073e4b9a9e51d0007b9ab", "html_url": "https://github.com/rust-lang/rust/commit/53792b9c5c3cded466a073e4b9a9e51d0007b9ab"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "0982c4b3acec868cf1cfc1d30272db46649daf14", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c748551f7f006638d323cde079aaba30a49b185b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748551f7f006638d323cde079aaba30a49b185b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c748551f7f006638d323cde079aaba30a49b185b", "patch": "@@ -146,6 +146,10 @@ impl Buffer {\n     pub(crate) fn reserve(&mut self, additional: usize) {\n         self.buffer.reserve(additional)\n     }\n+\n+    pub(crate) fn len(&self) -> usize {\n+        self.buffer.len()\n+    }\n }\n \n fn comma_sep<T: fmt::Display>("}, {"sha": "3525007baf369a9c875ffe01479c2044229a02c0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c748551f7f006638d323cde079aaba30a49b185b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c748551f7f006638d323cde079aaba30a49b185b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=c748551f7f006638d323cde079aaba30a49b185b", "patch": "@@ -62,6 +62,17 @@ struct ItemVars<'a> {\n     src_href: Option<&'a str>,\n }\n \n+/// Calls `print_where_clause` and returns `true` if a `where` clause was generated.\n+fn print_where_clause_and_check<'a, 'tcx: 'a>(\n+    buffer: &mut Buffer,\n+    gens: &'a clean::Generics,\n+    cx: &'a Context<'tcx>,\n+) -> bool {\n+    let len_before = buffer.len();\n+    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, true));\n+    len_before != buffer.len()\n+}\n+\n pub(super) fn print_item(\n     cx: &mut Context<'_>,\n     item: &clean::Item,\n@@ -1152,17 +1163,21 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n-                \"{}enum {}{}{}\",\n+                \"{}enum {}{}\",\n                 it.visibility.print_with_space(it.item_id, cx),\n                 it.name.unwrap(),\n                 e.generics.print(cx),\n-                print_where_clause(&e.generics, cx, 0, true),\n             );\n+            if !print_where_clause_and_check(w, &e.generics, cx) {\n+                // If there wasn't a `where` clause, we add a whitespace.\n+                w.write_str(\" \");\n+            }\n+\n             let variants_stripped = e.has_stripped_entries();\n             if count_variants == 0 && !variants_stripped {\n-                w.write_str(\" {}\");\n+                w.write_str(\"{}\");\n             } else {\n-                w.write_str(\" {\\n\");\n+                w.write_str(\"{\\n\");\n                 let toggle = should_hide_fields(count_variants);\n                 if toggle {\n                     toggle_open(w, format_args!(\"{} variants\", count_variants));\n@@ -1643,13 +1658,21 @@ fn render_union(\n     tab: &str,\n     cx: &Context<'_>,\n ) {\n-    write!(w, \"{}union {}\", it.visibility.print_with_space(it.item_id, cx), it.name.unwrap());\n-    if let Some(g) = g {\n-        write!(w, \"{}\", g.print(cx));\n-        write!(w, \"{}\", print_where_clause(g, cx, 0, true));\n+    write!(w, \"{}union {}\", it.visibility.print_with_space(it.item_id, cx), it.name.unwrap(),);\n+\n+    let where_displayed = g\n+        .map(|g| {\n+            write!(w, \"{}\", g.print(cx));\n+            print_where_clause_and_check(w, g, cx)\n+        })\n+        .unwrap_or(false);\n+\n+    // If there wasn't a `where` clause, we add a whitespace.\n+    if !where_displayed {\n+        w.write_str(\" \");\n     }\n \n-    write!(w, \" {{\\n{}\", tab);\n+    write!(w, \"{{\\n{}\", tab);\n     let count_fields =\n         fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n     let toggle = should_hide_fields(count_fields);\n@@ -1701,10 +1724,14 @@ fn render_struct(\n     }\n     match ty {\n         CtorKind::Fictive => {\n-            if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, true),)\n+            let where_diplayed = g.map(|g| print_where_clause_and_check(w, g, cx)).unwrap_or(false);\n+\n+            // If there wasn't a `where` clause, we add a whitespace.\n+            if !where_diplayed {\n+                w.write_str(\" {\");\n+            } else {\n+                w.write_str(\"{\");\n             }\n-            w.write_str(\" {\");\n             let count_fields =\n                 fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n             let has_visible_fields = count_fields > 0;\n@@ -1759,7 +1786,7 @@ fn render_struct(\n             }\n             w.write_str(\")\");\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false),)\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n             }\n             // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n             if structhead {\n@@ -1769,7 +1796,7 @@ fn render_struct(\n         CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false),)\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n             }\n             w.write_str(\";\");\n         }"}]}