{"sha": "7a9aa4f9808fe37afb581ba54884612df2034a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOWFhNGY5ODA4ZmUzN2FmYjU4MWJhNTQ4ODQ2MTJkZjIwMzRhNzU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-25T20:08:31Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-25T20:08:51Z"}, "message": "Fix rebase fallout", "tree": {"sha": "d9cc44f735d86d21b094402323b5216995f1647e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cc44f735d86d21b094402323b5216995f1647e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9aa4f9808fe37afb581ba54884612df2034a75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl++udMACgkQtAh+UQ6Y\nsWRbzQ/9EljhkLA392bifEtMm7Uose8fqNCxntjhIiDmcJCEAf2rnhtbaE6Uu03Q\nftaEpR0jdG50NaR7LNLh0XVjt9+jyykhQ99iKNxO+oDFd/of0ypgkEn80FvGYiLz\nzySxQRlzVeVTg9Scg/GhWJjd/xYpU5nHuh3ey2meG6BMjOW0/wq2cHM0HhRO5DN/\ns5Y467A2EzIe6u6+tNRMCaIO19SE5MoMtZ3RTRWLbTrMH71tJdgDvXFTiUK+Rsyc\n5QM2T6PG/TN98vfefzmw/C2XKF0rQB1aw74B4PW7uqClaUndPQ1fV7NnDIEK4Mb3\nEb8zjfu6N9k4e1Szkp2UI3JN+21jYCNWWt4608On3GEcoWreSRTpgtw/DDjoyGi+\n+nySH4FEhZ3eGnucF7lF50gByUNha4S3zAmGPbqab0LArHqs0cbmNvCusrawh06M\nPDBJolj24GeTUWGMZIpt4IpdUqvEyNi7bFZl9BDrQchlTtOU7BS2UVPPQrWX7swm\nw/fT1k6BFop23aYnpGQkDo68jLy5u9eJb4DM8ziFkjvAT/zlhYqDLeVmKAfzSkAT\n5B0k4U4SUMRdhc/tSBEnYMuQz4XeB0DTEGRAEcSsjjGZOIU7fxz7Ba3BLnHeX5e+\ngRGNJE3aL1m5UdeG9nQYG4mrnO1XFVfCfJ/ENyrcIfUKI9UYldo=\n=SqIp\n-----END PGP SIGNATURE-----", "payload": "tree d9cc44f735d86d21b094402323b5216995f1647e\nparent 6a9dbd2e0ec6b4c882668c0d35272b2ee4c03c6e\nauthor Aaron Hill <aa1ronham@gmail.com> 1606334911 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1606334931 -0500\n\nFix rebase fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9aa4f9808fe37afb581ba54884612df2034a75", "html_url": "https://github.com/rust-lang/rust/commit/7a9aa4f9808fe37afb581ba54884612df2034a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9aa4f9808fe37afb581ba54884612df2034a75/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9dbd2e0ec6b4c882668c0d35272b2ee4c03c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9dbd2e0ec6b4c882668c0d35272b2ee4c03c6e", "html_url": "https://github.com/rust-lang/rust/commit/6a9dbd2e0ec6b4c882668c0d35272b2ee4c03c6e"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "35428dc8d84e5e00c0bf681cca74e0de25d8b194", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=7a9aa4f9808fe37afb581ba54884612df2034a75", "patch": "@@ -205,7 +205,10 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n /// If we are not in incremental compilation mode, returns `None`.\n /// Otherwise, tries to load the query result cache from disk,\n /// creating an empty cache if it could not be loaded.\n-pub fn load_query_result_cache<'a>(sess: &'a Session, definitions: &Definitions) -> Option<OnDiskCache<'a>> {\n+pub fn load_query_result_cache<'a>(\n+    sess: &'a Session,\n+    definitions: &Definitions,\n+) -> Option<OnDiskCache<'a>> {\n     if sess.opts.incremental.is_none() {\n         return None;\n     }\n@@ -217,7 +220,9 @@ pub fn load_query_result_cache<'a>(sess: &'a Session, definitions: &Definitions)\n         &query_cache_path(sess),\n         sess.is_nightly_build(),\n     ) {\n-        LoadResult::Ok { data: (bytes, start_pos) } => Some(OnDiskCache::new(sess, bytes, start_pos, definitions)),\n+        LoadResult::Ok { data: (bytes, start_pos) } => {\n+            Some(OnDiskCache::new(sess, bytes, start_pos, definitions))\n+        }\n         _ => Some(OnDiskCache::new_empty(sess.source_map())),\n     }\n }"}, {"sha": "d954c8ab5fb9c3e5cf247bb55470f733d0d7d06d", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=7a9aa4f9808fe37afb581ba54884612df2034a75", "patch": "@@ -252,8 +252,7 @@ macro_rules! define_dep_nodes {\n             /// has been removed.\n             fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n-                    let def_path_hash = DefPathHash(self.hash);\n-                    tcx.queries.on_disk_cache.as_ref()?.def_path_hash_to_def_id(tcx, def_path_hash)\n+                    tcx.queries.on_disk_cache.as_ref()?.def_path_hash_to_def_id(tcx, DefPathHash(self.hash.into()))\n                 } else {\n                     None\n                 }\n@@ -326,7 +325,9 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n         // we will use the old DefIndex as an initial guess for\n         // a lookup into the crate metadata.\n         if !self.is_local() {\n-            tcx.queries.on_disk_cache.store_foreign_def_id_hash(*self, hash);\n+            if let Some(cache) = &tcx.queries.on_disk_cache {\n+                cache.store_foreign_def_id_hash(*self, hash);\n+            }\n         }\n         hash.0\n     }"}, {"sha": "a94f6d25fc71ee8a8783a9382fe368ddfef7bf66", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=7a9aa4f9808fe37afb581ba54884612df2034a75", "patch": "@@ -92,7 +92,9 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type StableHashingContext = StableHashingContext<'tcx>;\n \n     fn register_reused_dep_path_hash(&self, hash: DefPathHash) {\n-        self.queries.on_disk_cache.register_reused_dep_path_hash(hash)\n+        if let Some(cache) = self.queries.on_disk_cache.as_ref() {\n+            cache.register_reused_dep_path_hash(hash)\n+        }\n     }\n \n     fn create_stable_hashing_context(&self) -> Self::StableHashingContext {"}, {"sha": "898cc24992ba8f98d83b1bdfcb7a5f1a1d6e0004", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=7a9aa4f9808fe37afb581ba54884612df2034a75", "patch": "@@ -862,7 +862,13 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n         // If we get to this point, then all of the query inputs were green,\n         // which means that the definition with this hash is guaranteed to\n         // still exist in the current compilation session.\n-        Ok(d.tcx().queries.on_disk_cache.def_path_hash_to_def_id(d.tcx(), def_path_hash).unwrap())\n+        Ok(d.tcx()\n+            .queries\n+            .on_disk_cache\n+            .as_ref()\n+            .unwrap()\n+            .def_path_hash_to_def_id(d.tcx(), def_path_hash)\n+            .unwrap())\n     }\n }\n "}, {"sha": "ac37b296b533bcec11777f47dfa8330c8dcf64dd", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9aa4f9808fe37afb581ba54884612df2034a75/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=7a9aa4f9808fe37afb581ba54884612df2034a75", "patch": "@@ -709,7 +709,7 @@ impl<K: DepKind> DepGraph<K> {\n         // from the old incremental cache into the new cache that we serialize\n         // and the end of this compilation session.\n         if dep_node.kind.can_reconstruct_query_key() {\n-            tcx.register_reused_dep_path_hash(DefPathHash(dep_node.hash));\n+            tcx.register_reused_dep_path_hash(DefPathHash(dep_node.hash.into()));\n         }\n \n         // ... emitting any stored diagnostic ..."}]}