{"sha": "484b612909fed94c21846ec54832b676174c9b57", "node_id": "C_kwDOAAsO6NoAKDQ4NGI2MTI5MDlmZWQ5NGMyMTg0NmVjNTQ4MzJiNjc2MTc0YzliNTc", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-16T06:41:42Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-16T06:41:42Z"}, "message": "use subdiagnostic for logical negation, bitwise not", "tree": {"sha": "b64a38ffb88e2bfb9c16dc9d564dbef30cd41e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64a38ffb88e2bfb9c16dc9d564dbef30cd41e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/484b612909fed94c21846ec54832b676174c9b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/484b612909fed94c21846ec54832b676174c9b57", "html_url": "https://github.com/rust-lang/rust/commit/484b612909fed94c21846ec54832b676174c9b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/484b612909fed94c21846ec54832b676174c9b57/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43562b95bb80d91cd3f880e1d63b129a65a9b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43562b95bb80d91cd3f880e1d63b129a65a9b44", "html_url": "https://github.com/rust-lang/rust/commit/f43562b95bb80d91cd3f880e1d63b129a65a9b44"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "9459cfebde936802708cbf97f2b037f834c18032", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=484b612909fed94c21846ec54832b676174c9b57", "patch": "@@ -55,7 +55,9 @@ parser_tilde_is_not_unary_operator = `~` cannot be used as a unary operator\n     .suggestion = use `!` to perform bitwise not\n \n parser_unexpected_token_after_not = unexpected {$negated_desc} after identifier\n-    .suggestion = use `!` to perform {$negated_msg}\n+parser_unexpected_token_after_not_bitwise = use `!` to perform bitwise not\n+parser_unexpected_token_after_not_logical = use `!` to perform logical negation\n+parser_unexpected_token_after_not_default = use `!` to perform logical negation or bitwise not\n \n parser_malformed_loop_label = malformed loop label\n     .suggestion = use the correct loop label format"}, {"sha": "a65f523a0f45551978a03ff38f140443d10801ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=484b612909fed94c21846ec54832b676174c9b57", "patch": "@@ -430,9 +430,32 @@ pub(crate) struct NotAsNegationOperator {\n     #[primary_span]\n     pub negated: Span,\n     pub negated_desc: String,\n-    pub negated_msg: String,\n-    #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n-    pub not: Span,\n+    #[subdiagnostic]\n+    pub sub: NotAsNegationOperatorSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum NotAsNegationOperatorSub {\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_default,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotDefault(#[primary_span] Span),\n+\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_bitwise,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotBitwise(#[primary_span] Span),\n+\n+    #[suggestion_short(\n+        parser::unexpected_token_after_not_logical,\n+        applicability = \"machine-applicable\",\n+        code = \"!\"\n+    )]\n+    SuggestNotLogical(#[primary_span] Span),\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "f4f75f71e722c100cf3abb1680ee79a142c589a6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484b612909fed94c21846ec54832b676174c9b57/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=484b612909fed94c21846ec54832b676174c9b57", "patch": "@@ -6,8 +6,9 @@ use super::diagnostics::{\n     InvalidComparisonOperatorSub, InvalidLogicalOperator, InvalidLogicalOperatorSub,\n     LeftArrowOperator, LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath,\n     MalformedLoopLabel, MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray,\n-    NotAsNegationOperator, OuterAttributeNotAllowedOnIfElse, RequireColonAfterLabeledExpression,\n-    SnapshotParser, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n+    NotAsNegationOperator, NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse,\n+    RequireColonAfterLabeledExpression, SnapshotParser, TildeAsUnaryOperator,\n+    UnexpectedTokenAfterLabel,\n };\n use super::pat::{CommaRecoveryMode, RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n@@ -660,21 +661,23 @@ impl<'a> Parser<'a> {\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         // Emit the error...\n         let negated_token = self.look_ahead(1, |t| t.clone());\n-        let negtated_msg = if negated_token.is_numeric_lit() {\n-            \"bitwise not\"\n+\n+        let sub_diag = if negated_token.is_numeric_lit() {\n+            NotAsNegationOperatorSub::SuggestNotBitwise\n         } else if negated_token.is_bool_lit() {\n-            \"logical negation\"\n+            NotAsNegationOperatorSub::SuggestNotLogical\n         } else {\n-            \"logical negation or bitwise not\"\n+            NotAsNegationOperatorSub::SuggestNotDefault\n         };\n \n         self.sess.emit_err(NotAsNegationOperator {\n             negated: negated_token.span,\n             negated_desc: super::token_descr(&negated_token),\n-            negated_msg: negtated_msg.to_string(),\n             // Span the `not` plus trailing whitespace to avoid\n             // trailing whitespace after the `!` in our suggestion\n-            not: self.sess.source_map().span_until_non_whitespace(lo.to(negated_token.span)),\n+            sub: sub_diag(\n+                self.sess.source_map().span_until_non_whitespace(lo.to(negated_token.span)),\n+            ),\n         });\n \n         // ...and recover!"}]}