{"sha": "33585f4fe11968ce652815c8a3debfdf97df6baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTg1ZjRmZTExOTY4Y2U2NTI4MTVjOGEzZGViZmRmOTdkZjZiYWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-11T21:30:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-30T08:11:59Z"}, "message": "CleanEndRegions: do not clean regions that occur in types in validation statements", "tree": {"sha": "58016d51ab0fc44fd52b4cb938a926bb24c2cbd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58016d51ab0fc44fd52b4cb938a926bb24c2cbd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33585f4fe11968ce652815c8a3debfdf97df6baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33585f4fe11968ce652815c8a3debfdf97df6baa", "html_url": "https://github.com/rust-lang/rust/commit/33585f4fe11968ce652815c8a3debfdf97df6baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33585f4fe11968ce652815c8a3debfdf97df6baa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "735ace977c75405084cb41b3b0613d14b55c811d", "url": "https://api.github.com/repos/rust-lang/rust/commits/735ace977c75405084cb41b3b0613d14b55c811d", "html_url": "https://github.com/rust-lang/rust/commit/735ace977c75405084cb41b3b0613d14b55c811d"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "28311a5e68cce1a5e1e2fe2a6624b807730e2b42", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/33585f4fe11968ce652815c8a3debfdf97df6baa/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33585f4fe11968ce652815c8a3debfdf97df6baa/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=33585f4fe11968ce652815c8a3debfdf97df6baa", "patch": "@@ -24,13 +24,14 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc::middle::region::CodeExtent;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n-use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::{RegionKind, TyCtxt};\n+use rustc::mir::visit::{MutVisitor, Visitor, Lookup};\n+use rustc::ty::{Ty, RegionKind, TyCtxt};\n \n pub struct CleanEndRegions;\n \n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<CodeExtent>,\n+    in_validation_statement: bool,\n }\n \n struct DeleteTrivialEndRegions<'a> {\n@@ -42,7 +43,7 @@ impl MirPass for CleanEndRegions {\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let mut gather = GatherBorrowedRegions { seen_regions: FxHashSet() };\n+        let mut gather = GatherBorrowedRegions { seen_regions: FxHashSet(), in_validation_statement: false };\n         gather.visit_mir(mir);\n \n         let mut delete = DeleteTrivialEndRegions { seen_regions: &mut gather.seen_regions };\n@@ -54,13 +55,39 @@ impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions {\n     fn visit_rvalue(&mut self,\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n+        // Gather regions that are used for borrows\n         if let Rvalue::Ref(r, _, _) = *rvalue {\n             if let RegionKind::ReScope(ce) = *r {\n                 self.seen_regions.insert(ce);\n             }\n         }\n         self.super_rvalue(rvalue, location);\n     }\n+\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &Statement<'tcx>,\n+                       location: Location) {\n+        self.in_validation_statement = match statement.kind {\n+            StatementKind::Validate(..) => true,\n+            _ => false,\n+        };\n+        self.super_statement(block, statement, location);\n+        self.in_validation_statement = false;\n+    }\n+\n+    fn visit_ty(&mut self, ty: &Ty<'tcx>, _: Lookup) {\n+        // Gather regions that occur in types inside AcquireValid/ReleaseValid statements\n+        if self.in_validation_statement {\n+            for re in ty.walk().flat_map(|t| t.regions()) {\n+                match *re {\n+                    RegionKind::ReScope(ce) => { self.seen_regions.insert(ce); }\n+                    _ => {},\n+                }\n+            }\n+        }\n+        self.super_ty(ty);\n+    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {"}, {"sha": "12b1c549ffec582cd41a9eb8002f0a52d88a4436", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33585f4fe11968ce652815c8a3debfdf97df6baa/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33585f4fe11968ce652815c8a3debfdf97df6baa/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=33585f4fe11968ce652815c8a3debfdf97df6baa", "patch": "@@ -11,6 +11,8 @@\n //! This pass erases all early-bound regions from the types occuring in the MIR.\n //! We want to do this once just before trans, so trans does not have to take\n //! care erasing regions all over the place.\n+//! NOTE:  We do NOT erase regions of statements that are relevant for \"types-as-contracts\"-validation,\n+//! namely, AcquireValid, ReleaseValid, and EndRegion.\n \n use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n@@ -20,20 +22,24 @@ use rustc::mir::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    in_validation_statement: bool,\n }\n \n impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         EraseRegionsVisitor {\n-            tcx: tcx\n+            tcx: tcx,\n+            in_validation_statement: false,\n         }\n     }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: Lookup) {\n-        let old_ty = *ty;\n-        *ty = self.tcx.erase_regions(&old_ty);\n+        if !self.in_validation_statement {\n+            *ty = self.tcx.erase_regions(&{*ty});\n+        }\n+        self.super_ty(ty);\n     }\n \n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, _: Location) {\n@@ -71,10 +77,12 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n                        block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n-        if let StatementKind::EndRegion(_) = statement.kind {\n-            statement.kind = StatementKind::Nop;\n-        }\n+        self.in_validation_statement = match statement.kind {\n+            StatementKind::Validate(..) => true,\n+            _ => false,\n+        };\n         self.super_statement(block, statement, location);\n+        self.in_validation_statement = false;\n     }\n }\n "}]}