{"sha": "4a25c3c1ec2594b249dffc826b1e937df137d267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjVjM2MxZWMyNTk0YjI0OWRmZmM4MjZiMWU5MzdkZjEzN2QyNjc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-03T23:25:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-03T23:25:49Z"}, "message": "Rollup merge of #65056 - spastorino:place-mut-visitor-adjusts, r=oli-obk\n\nMake visit projection iterative\n\nr? @oli-obk\n\n/cc @nikomatsakis", "tree": {"sha": "fb650182f75d33234665c45563a2f96471ad75d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb650182f75d33234665c45563a2f96471ad75d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a25c3c1ec2594b249dffc826b1e937df137d267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdloN9CRBK7hj4Ov3rIwAAdHIIAB97wRTCHs8rYrsrC2urOQGA\nwrbYCXlLtnQjE2rgtYRwdG9ChTRus5B4UoFOTCyBRxXyvsZjBKB9rHUtFGmA7jJq\no10FfVplFuaL1vQJ6pwH+8MhBOae0syw/kClYe0VnRVYg7EV9KCPe2NOeghTLOI9\nokZRdUij/YCZTDWUNPQr1asyY2WR1ShvKf5WV+CpmqdNYbp88tfUvyUh/vjJMXUR\np5IG63ZDyFEY5FtvU4M7Y/W80KYJwkJiTG8uTFMdT3AjPvX45vlshoKFj7wVeKep\nl0xohVRheSksUvZ2dgvxjQb/5PtvPbUYvjEYFXOe4yg5cQYwG0KFCB8UJMajTFY=\n=1jTj\n-----END PGP SIGNATURE-----\n", "payload": "tree fb650182f75d33234665c45563a2f96471ad75d5\nparent dd9ccb20fc1de307f4441d239f77fb7d6990b2c3\nparent b9ed64268de50378b91f3ba7488329b7bd884e7d\nauthor Tyler Mandry <tmandry@gmail.com> 1570145149 -0700\ncommitter GitHub <noreply@github.com> 1570145149 -0700\n\nRollup merge of #65056 - spastorino:place-mut-visitor-adjusts, r=oli-obk\n\nMake visit projection iterative\n\nr? @oli-obk\n\n/cc @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a25c3c1ec2594b249dffc826b1e937df137d267", "html_url": "https://github.com/rust-lang/rust/commit/4a25c3c1ec2594b249dffc826b1e937df137d267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a25c3c1ec2594b249dffc826b1e937df137d267/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9ccb20fc1de307f4441d239f77fb7d6990b2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9ccb20fc1de307f4441d239f77fb7d6990b2c3", "html_url": "https://github.com/rust-lang/rust/commit/dd9ccb20fc1de307f4441d239f77fb7d6990b2c3"}, {"sha": "b9ed64268de50378b91f3ba7488329b7bd884e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ed64268de50378b91f3ba7488329b7bd884e7d", "html_url": "https://github.com/rust-lang/rust/commit/b9ed64268de50378b91f3ba7488329b7bd884e7d"}], "stats": {"total": 197, "additions": 110, "deletions": 87}, "files": [{"sha": "bfbeeebd1e230cb7e994716d2412390480418aac", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4a25c3c1ec2594b249dffc826b1e937df137d267", "patch": "@@ -166,6 +166,15 @@ macro_rules! make_mir_visitor {\n                 self.super_projection(base, projection, context, location);\n             }\n \n+            fn visit_projection_elem(&mut self,\n+                                     base: & $($mutability)? PlaceBase<'tcx>,\n+                                     proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     context: PlaceContext,\n+                                     location: Location) {\n+                self.super_projection_elem(base, proj_base, elem, context, location);\n+            }\n+\n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n                               location: Location) {\n@@ -725,27 +734,36 @@ macro_rules! make_mir_visitor {\n                                 projection: & $($mutability)? [PlaceElem<'tcx>],\n                                 context: PlaceContext,\n                                 location: Location) {\n-                if let [proj_base @ .., elem] = projection {\n-                    self.visit_projection(base, proj_base, context, location);\n+                let mut cursor = projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n+                    self.visit_projection_elem(base, cursor, elem, context, location);\n+                }\n+            }\n \n-                    match elem {\n-                        ProjectionElem::Field(_field, ty) => {\n-                            self.visit_ty(ty, TyContext::Location(location));\n-                        }\n-                        ProjectionElem::Index(local) => {\n-                            self.visit_local(\n-                                local,\n-                                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                                location\n-                            );\n-                        }\n-                        ProjectionElem::Deref |\n-                        ProjectionElem::Subslice { from: _, to: _ } |\n-                        ProjectionElem::ConstantIndex { offset: _,\n-                                                        min_length: _,\n-                                                        from_end: _ } |\n-                        ProjectionElem::Downcast(_, _) => {\n-                        }\n+            fn super_projection_elem(&mut self,\n+                                     _base: & $($mutability)? PlaceBase<'tcx>,\n+                                     _proj_base: & $($mutability)? [PlaceElem<'tcx>],\n+                                     elem: & $($mutability)? PlaceElem<'tcx>,\n+                                     _context: PlaceContext,\n+                                     location: Location) {\n+                match elem {\n+                    ProjectionElem::Field(_field, ty) => {\n+                        self.visit_ty(ty, TyContext::Location(location));\n+                    }\n+                    ProjectionElem::Index(local) => {\n+                        self.visit_local(\n+                            local,\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                            location\n+                        );\n+                    }\n+                    ProjectionElem::Deref |\n+                    ProjectionElem::Subslice { from: _, to: _ } |\n+                    ProjectionElem::ConstantIndex { offset: _,\n+                                                    min_length: _,\n+                                                    from_end: _ } |\n+                    ProjectionElem::Downcast(_, _) => {\n                     }\n                 }\n             }"}, {"sha": "87cd39b02cd97d9205b3e82bbb30e46c1bb79b9b", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=4a25c3c1ec2594b249dffc826b1e937df137d267", "patch": "@@ -404,25 +404,25 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n         self.super_assign(dest, rvalue, location);\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         trace!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n             context,\n             location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        let (elem, proj_base) = match proj.split_last() {\n-            Some(x) => x,\n-            None => return,\n-        };\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n \n         match elem {\n             ProjectionElem::Deref => {"}, {"sha": "fbcf9c8cb5eba5063f6087e10d2ca3f007081a4b", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 63, "deletions": 58, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a25c3c1ec2594b249dffc826b1e937df137d267/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4a25c3c1ec2594b249dffc826b1e937df137d267", "patch": "@@ -1156,82 +1156,87 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_projection(\n+    fn visit_projection_elem(\n         &mut self,\n         place_base: &PlaceBase<'tcx>,\n-        proj: &[PlaceElem<'tcx>],\n+        proj_base: &[PlaceElem<'tcx>],\n+        elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {\n         debug!(\n-            \"visit_place_projection: proj={:?} context={:?} location={:?}\",\n-            proj, context, location,\n+            \"visit_projection_elem: place_base={:?} proj_base={:?} elem={:?} \\\n+            context={:?} location={:?}\",\n+            place_base,\n+            proj_base,\n+            elem,\n+            context,\n+            location,\n         );\n-        self.super_projection(place_base, proj, context, location);\n \n-        if let [proj_base @ .., elem] = proj {\n-            match elem {\n-                ProjectionElem::Deref => {\n-                    if context.is_mutating_use() {\n-                        // `not_const` errors out in const contexts\n-                        self.not_const(ops::MutDeref)\n-                    }\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    match self.mode {\n-                        Mode::NonConstFn => {}\n-                        _ if self.suppress_errors => {}\n-                        _ => {\n-                            if let ty::RawPtr(_) = base_ty.kind {\n-                                if !self.tcx.features().const_raw_ptr_deref {\n-                                    self.record_error(ops::RawPtrDeref);\n-                                    emit_feature_err(\n-                                        &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n-                                        self.span, GateIssue::Language,\n-                                        &format!(\n-                                            \"dereferencing raw pointers in {}s is unstable\",\n-                                            self.mode,\n-                                        ),\n-                                    );\n-                                }\n+        self.super_projection_elem(place_base, proj_base, elem, context, location);\n+\n+        match elem {\n+            ProjectionElem::Deref => {\n+                if context.is_mutating_use() {\n+                    // `not_const` errors out in const contexts\n+                    self.not_const(ops::MutDeref)\n+                }\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                match self.mode {\n+                    Mode::NonConstFn => {}\n+                    _ if self.suppress_errors => {}\n+                    _ => {\n+                        if let ty::RawPtr(_) = base_ty.kind {\n+                            if !self.tcx.features().const_raw_ptr_deref {\n+                                self.record_error(ops::RawPtrDeref);\n+                                emit_feature_err(\n+                                    &self.tcx.sess.parse_sess, sym::const_raw_ptr_deref,\n+                                    self.span, GateIssue::Language,\n+                                    &format!(\n+                                        \"dereferencing raw pointers in {}s is unstable\",\n+                                        self.mode,\n+                                    ),\n+                                );\n                             }\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::ConstantIndex {..} |\n-                ProjectionElem::Subslice {..} |\n-                ProjectionElem::Field(..) |\n-                ProjectionElem::Index(_) => {\n-                    let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n-                    if let Some(def) = base_ty.ty_adt_def() {\n-                        if def.is_union() {\n-                            match self.mode {\n-                                Mode::ConstFn => {\n-                                    if !self.tcx.features().const_fn_union\n-                                        && !self.suppress_errors\n-                                    {\n-                                        self.record_error(ops::UnionAccess);\n-                                        emit_feature_err(\n-                                            &self.tcx.sess.parse_sess, sym::const_fn_union,\n-                                            self.span, GateIssue::Language,\n-                                            \"unions in const fn are unstable\",\n-                                        );\n-                                    }\n-                                },\n+            ProjectionElem::ConstantIndex {..} |\n+            ProjectionElem::Subslice {..} |\n+            ProjectionElem::Field(..) |\n+            ProjectionElem::Index(_) => {\n+                let base_ty = Place::ty_from(place_base, proj_base, self.body, self.tcx).ty;\n+                if let Some(def) = base_ty.ty_adt_def() {\n+                    if def.is_union() {\n+                        match self.mode {\n+                            Mode::ConstFn => {\n+                                if !self.tcx.features().const_fn_union\n+                                    && !self.suppress_errors\n+                                {\n+                                    self.record_error(ops::UnionAccess);\n+                                    emit_feature_err(\n+                                        &self.tcx.sess.parse_sess, sym::const_fn_union,\n+                                        self.span, GateIssue::Language,\n+                                        \"unions in const fn are unstable\",\n+                                    );\n+                                }\n+                            },\n \n-                                | Mode::NonConstFn\n-                                | Mode::Static\n-                                | Mode::StaticMut\n-                                | Mode::Const\n-                                => {},\n-                            }\n+                            | Mode::NonConstFn\n+                            | Mode::Static\n+                            | Mode::StaticMut\n+                            | Mode::Const\n+                            => {},\n                         }\n                     }\n                 }\n+            }\n \n-                ProjectionElem::Downcast(..) => {\n-                    self.not_const(ops::Downcast)\n-                }\n+            ProjectionElem::Downcast(..) => {\n+                self.not_const(ops::Downcast)\n             }\n         }\n     }"}]}