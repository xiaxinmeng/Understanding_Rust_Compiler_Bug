{"sha": "7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODdlYTlmYzVjM2FiNWQ2Yzg1M2U2ZDNhZTA2MDNmMTk1MjZlYjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-09T09:55:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-08T08:08:43Z"}, "message": "librustc::session : Make DebuggingOpts use the options! macro", "tree": {"sha": "24dedf1a45ba708c65234b9e21d1d07eab3b5285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24dedf1a45ba708c65234b9e21d1d07eab3b5285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "html_url": "https://github.com/rust-lang/rust/commit/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3248bc5bd0384712e70f67eb90daa38ae5e5a21f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3248bc5bd0384712e70f67eb90daa38ae5e5a21f", "html_url": "https://github.com/rust-lang/rust/commit/3248bc5bd0384712e70f67eb90daa38ae5e5a21f"}], "stats": {"total": 286, "additions": 118, "deletions": 168}, "files": [{"sha": "0d6ab9c273b754a7e3491ca8568a9312adb86158", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -22,7 +22,6 @@ use middle::ty;\n use super::Constraint;\n use middle::infer::SubregionOrigin;\n use middle::infer::region_inference::RegionVarBindings;\n-use session::config;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux::Repr;\n \n@@ -55,7 +54,7 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n                                              subject_node: ast::NodeId) {\n     let tcx = region_vars.tcx;\n \n-    if !region_vars.tcx.sess.debugging_opt(config::PRINT_REGION_GRAPH) {\n+    if !region_vars.tcx.sess.opts.debugging_opts.print_region_graph {\n         return;\n     }\n "}, {"sha": "ca24c1f56a091f24a5fe28fdb4c7470acf12d9bc", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 79, "deletions": 123, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -99,7 +99,7 @@ pub struct Options {\n     pub parse_only: bool,\n     pub no_trans: bool,\n     pub no_analysis: bool,\n-    pub debugging_opts: u64,\n+    pub debugging_opts: DebuggingOptions,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n     pub write_dependency_info: (bool, Option<Path>),\n     pub prints: Vec<PrintRequest>,\n@@ -224,7 +224,7 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         no_analysis: false,\n-        debugging_opts: 0,\n+        debugging_opts: basic_debugging_options(),\n         write_dependency_info: (false, None),\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n@@ -257,103 +257,6 @@ pub enum CrateType {\n     CrateTypeStaticlib,\n }\n \n-macro_rules! debugging_opts {\n-    ([ $opt:ident ] $cnt:expr ) => (\n-        pub const $opt: u64 = 1 << $cnt;\n-    );\n-    ([ $opt:ident, $($rest:ident),* ] $cnt:expr ) => (\n-        pub const $opt: u64 = 1 << $cnt;\n-        debugging_opts! { [ $($rest),* ] $cnt + 1 }\n-    )\n-}\n-\n-debugging_opts! {\n-    [\n-        VERBOSE,\n-        TIME_PASSES,\n-        COUNT_LLVM_INSNS,\n-        TIME_LLVM_PASSES,\n-        TRANS_STATS,\n-        ASM_COMMENTS,\n-        NO_VERIFY,\n-        BORROWCK_STATS,\n-        NO_LANDING_PADS,\n-        DEBUG_LLVM,\n-        COUNT_TYPE_SIZES,\n-        META_STATS,\n-        GC,\n-        PRINT_LINK_ARGS,\n-        PRINT_LLVM_PASSES,\n-        AST_JSON,\n-        AST_JSON_NOEXPAND,\n-        LS,\n-        SAVE_ANALYSIS,\n-        PRINT_MOVE_FRAGMENTS,\n-        FLOWGRAPH_PRINT_LOANS,\n-        FLOWGRAPH_PRINT_MOVES,\n-        FLOWGRAPH_PRINT_ASSIGNS,\n-        FLOWGRAPH_PRINT_ALL,\n-        PRINT_REGION_GRAPH,\n-        PARSE_ONLY,\n-        NO_TRANS,\n-        NO_ANALYSIS,\n-        UNSTABLE_OPTIONS,\n-        PRINT_ENUM_SIZES\n-    ]\n-    0\n-}\n-\n-pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n-    vec![(\"verbose\", \"in general, enable more debug printouts\", VERBOSE),\n-     (\"time-passes\", \"measure time of each rustc pass\", TIME_PASSES),\n-     (\"count-llvm-insns\", \"count where LLVM \\\n-                           instrs originate\", COUNT_LLVM_INSNS),\n-     (\"time-llvm-passes\", \"measure time of each LLVM pass\",\n-      TIME_LLVM_PASSES),\n-     (\"trans-stats\", \"gather trans statistics\", TRANS_STATS),\n-     (\"asm-comments\", \"generate comments into the assembly (may change behavior)\",\n-      ASM_COMMENTS),\n-     (\"no-verify\", \"skip LLVM verification\", NO_VERIFY),\n-     (\"borrowck-stats\", \"gather borrowck statistics\",  BORROWCK_STATS),\n-     (\"no-landing-pads\", \"omit landing pads for unwinding\",\n-      NO_LANDING_PADS),\n-     (\"debug-llvm\", \"enable debug output from LLVM\", DEBUG_LLVM),\n-     (\"count-type-sizes\", \"count the sizes of aggregate types\",\n-      COUNT_TYPE_SIZES),\n-     (\"meta-stats\", \"gather metadata statistics\", META_STATS),\n-     (\"print-link-args\", \"Print the arguments passed to the linker\",\n-      PRINT_LINK_ARGS),\n-     (\"gc\", \"Garbage collect shared data (experimental)\", GC),\n-     (\"print-llvm-passes\",\n-      \"Prints the llvm optimization passes being run\",\n-      PRINT_LLVM_PASSES),\n-     (\"ast-json\", \"Print the AST as JSON and halt\", AST_JSON),\n-     (\"ast-json-noexpand\", \"Print the pre-expansion AST as JSON and halt\", AST_JSON_NOEXPAND),\n-     (\"ls\", \"List the symbols defined by a library crate\", LS),\n-     (\"save-analysis\", \"Write syntax and type analysis information \\\n-                        in addition to normal output\", SAVE_ANALYSIS),\n-     (\"print-move-fragments\", \"Print out move-fragment data for every fn\",\n-      PRINT_MOVE_FRAGMENTS),\n-     (\"flowgraph-print-loans\", \"Include loan analysis data in \\\n-                       --pretty flowgraph output\", FLOWGRAPH_PRINT_LOANS),\n-     (\"flowgraph-print-moves\", \"Include move analysis data in \\\n-                       --pretty flowgraph output\", FLOWGRAPH_PRINT_MOVES),\n-     (\"flowgraph-print-assigns\", \"Include assignment analysis data in \\\n-                       --pretty flowgraph output\", FLOWGRAPH_PRINT_ASSIGNS),\n-     (\"flowgraph-print-all\", \"Include all dataflow analysis data in \\\n-                       --pretty flowgraph output\", FLOWGRAPH_PRINT_ALL),\n-     (\"print-region-graph\", \"Prints region inference graph. \\\n-                             Use with RUST_REGION_GRAPH=help for more info\",\n-      PRINT_REGION_GRAPH),\n-     (\"parse-only\", \"Parse only; do not compile, assemble, or link\", PARSE_ONLY),\n-     (\"no-trans\", \"Run all passes except translation; no output\", NO_TRANS),\n-     (\"no-analysis\", \"Parse and expand the source, but run no analysis and\",\n-      NO_ANALYSIS),\n-     (\"unstable-options\", \"Adds unstable command line options to rustc interface\",\n-      UNSTABLE_OPTIONS),\n-     (\"print-enum-sizes\", \"Print the size of enums and their variants\", PRINT_ENUM_SIZES),\n-    ]\n-}\n \n #[derive(Clone)]\n pub enum Passes {\n@@ -387,6 +290,7 @@ macro_rules! options {\n      $($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n (\n     #[derive(Clone)]\n+    #[allow(missing_copy_implementations)]\n     pub struct $struct_name { $(pub $opt: $t),* }\n \n     pub fn $defaultfn() -> $struct_name {\n@@ -439,7 +343,7 @@ macro_rules! options {\n                                      Option<&'static str>, &'static str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n-    #[allow(non_upper_case_globals)]\n+    #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n         pub const parse_bool: Option<&'static str> = None;\n         pub const parse_opt_bool: Option<&'static str> = None;\n@@ -454,6 +358,7 @@ macro_rules! options {\n             Some(\"a number\");\n     }\n \n+    #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, SomePasses, AllPasses};\n \n@@ -608,6 +513,73 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"Optimize with possible levels 0-3\"),\n }\n \n+\n+options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n+         build_debugging_options, \"Z\", \"debugging\",\n+         DB_OPTIONS, db_type_desc, dbsetters,\n+    verbose: bool = (false, parse_bool,\n+        \"in general, enable more debug printouts\"),\n+    time_passes: bool = (false, parse_bool,\n+        \"measure time of each rustc pass\"),\n+    count_llvm_insns: bool = (false, parse_bool,\n+        \"count where LLVM instrs originate\"),\n+    time_llvm_passes: bool = (false, parse_bool,\n+        \"measure time of each LLVM pass\"),\n+    trans_stats: bool = (false, parse_bool,\n+        \"gather trans statistics\"),\n+    asm_comments: bool = (false, parse_bool,\n+        \"generate comments into the assembly (may change behavior)\"),\n+    no_verify: bool = (false, parse_bool,\n+        \"skip LLVM verification\"),\n+    borrowck_stats: bool = (false, parse_bool,\n+        \"gather borrowck statistics\"),\n+    no_landing_pads: bool = (false, parse_bool,\n+        \"omit landing pads for unwinding\"),\n+    debug_llvm: bool = (false, parse_bool,\n+        \"enable debug output from LLVM\"),\n+    count_type_sizes: bool = (false, parse_bool,\n+        \"count the sizes of aggregate types\"),\n+    meta_stats: bool = (false, parse_bool,\n+        \"gather metadata statistics\"),\n+    print_link_args: bool = (false, parse_bool,\n+        \"Print the arguments passed to the linker\"),\n+    gc: bool = (false, parse_bool,\n+        \"Garbage collect shared data (experimental)\"),\n+    print_llvm_passes: bool = (false, parse_bool,\n+        \"Prints the llvm optimization passes being run\"),\n+    ast_json: bool = (false, parse_bool,\n+        \"Print the AST as JSON and halt\"),\n+    ast_json_noexpand: bool = (false, parse_bool,\n+        \"Print the pre-expansion AST as JSON and halt\"),\n+    ls: bool = (false, parse_bool,\n+        \"List the symbols defined by a library crate\"),\n+    save_analysis: bool = (false, parse_bool,\n+        \"Write syntax and type analysis information in addition to normal output\"),\n+    print_move_fragments: bool = (false, parse_bool,\n+        \"Print out move-fragment data for every fn\"),\n+    flowgraph_print_loans: bool = (false, parse_bool,\n+        \"Include loan analysis data in --pretty flowgraph output\"),\n+    flowgraph_print_moves: bool = (false, parse_bool,\n+        \"Include move analysis data in --pretty flowgraph output\"),\n+    flowgraph_print_assigns: bool = (false, parse_bool,\n+        \"Include assignment analysis data in --pretty flowgraph output\"),\n+    flowgraph_print_all: bool = (false, parse_bool,\n+        \"Include all dataflow analysis data in --pretty flowgraph output\"),\n+    print_region_graph: bool = (false, parse_bool,\n+         \"Prints region inference graph. \\\n+          Use with RUST_REGION_GRAPH=help for more info\"),\n+    parse_only: bool = (false, parse_bool,\n+          \"Parse only; do not compile, assemble, or link\"),\n+    no_trans: bool = (false, parse_bool,\n+          \"Run all passes except translation; no output\"),\n+    no_analysis: bool = (false, parse_bool,\n+          \"Parse and expand the source, but run no analysis\"),\n+    unstable_options: bool = (false, parse_bool,\n+          \"Adds unstable command line options to rustc interface\"),\n+    print_enum_sizes: bool = (false, parse_bool,\n+          \"Print the size of enums and their variants\"),\n+}\n+\n pub fn default_lib_output() -> CrateType {\n     CrateTypeRlib\n }\n@@ -883,52 +855,36 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n-    let mut debugging_opts = 0;\n-    let debug_flags = matches.opt_strs(\"Z\");\n-    let debug_map = debugging_opts_map();\n-    for debug_flag in debug_flags.iter() {\n-        let mut this_bit = 0;\n-        for &(name, _, bit) in debug_map.iter() {\n-            if name == *debug_flag {\n-                this_bit = bit;\n-                break;\n-            }\n-        }\n-        if this_bit == 0 {\n-            early_error(&format!(\"unknown debug flag: {}\",\n-                                *debug_flag)[])\n-        }\n-        debugging_opts |= this_bit;\n-    }\n+    let debugging_opts = build_debugging_options(matches);\n \n     let parse_only = if matches.opt_present(\"parse-only\") {\n         // FIXME(acrichto) remove this eventually\n         early_warn(\"--parse-only is deprecated in favor of -Z parse-only\");\n         true\n     } else {\n-        debugging_opts & PARSE_ONLY != 0\n+        debugging_opts.parse_only\n     };\n     let no_trans = if matches.opt_present(\"no-trans\") {\n         // FIXME(acrichto) remove this eventually\n         early_warn(\"--no-trans is deprecated in favor of -Z no-trans\");\n         true\n     } else {\n-        debugging_opts & NO_TRANS != 0\n+        debugging_opts.no_trans\n     };\n     let no_analysis = if matches.opt_present(\"no-analysis\") {\n         // FIXME(acrichto) remove this eventually\n         early_warn(\"--no-analysis is deprecated in favor of -Z no-analysis\");\n         true\n     } else {\n-        debugging_opts & NO_ANALYSIS != 0\n+        debugging_opts.no_analysis\n     };\n \n-    if debugging_opts & DEBUG_LLVM != 0 {\n+    if debugging_opts.debug_llvm {\n         unsafe { llvm::LLVMSetDebug(1); }\n     }\n \n     let mut output_types = Vec::new();\n-    if !parse_only && !no_trans {\n+    if !debugging_opts.parse_only && !no_trans {\n         let unparsed_output_types = matches.opt_strs(\"emit\");\n         for unparsed_output_type in unparsed_output_types.iter() {\n             for part in unparsed_output_type.split(',') {\n@@ -998,7 +954,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n         }\n     };\n-    let gc = debugging_opts & GC != 0;\n+    let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if matches.opt_present(\"debuginfo\") {\n             early_error(\"-g and --debuginfo both provided\");"}, {"sha": "79e4d0f7aea3011c750f380f7d6d842dcb22c7c7", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -164,9 +164,6 @@ impl Session {\n     pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler {\n         &self.parse_sess.span_diagnostic\n     }\n-    pub fn debugging_opt(&self, opt: u64) -> bool {\n-        (self.opts.debugging_opts & opt) != 0\n-    }\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         &self.parse_sess.span_diagnostic.cm\n     }\n@@ -176,36 +173,36 @@ impl Session {\n         self.span_bug(sp,\n                       &format!(\"impossible case reached: {}\", msg)[]);\n     }\n-    pub fn verbose(&self) -> bool { self.debugging_opt(config::VERBOSE) }\n-    pub fn time_passes(&self) -> bool { self.debugging_opt(config::TIME_PASSES) }\n+    pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }\n+    pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }\n     pub fn count_llvm_insns(&self) -> bool {\n-        self.debugging_opt(config::COUNT_LLVM_INSNS)\n+        self.opts.debugging_opts.count_llvm_insns\n     }\n     pub fn count_type_sizes(&self) -> bool {\n-        self.debugging_opt(config::COUNT_TYPE_SIZES)\n+        self.opts.debugging_opts.count_type_sizes\n     }\n     pub fn time_llvm_passes(&self) -> bool {\n-        self.debugging_opt(config::TIME_LLVM_PASSES)\n+        self.opts.debugging_opts.time_llvm_passes\n     }\n-    pub fn trans_stats(&self) -> bool { self.debugging_opt(config::TRANS_STATS) }\n-    pub fn meta_stats(&self) -> bool { self.debugging_opt(config::META_STATS) }\n-    pub fn asm_comments(&self) -> bool { self.debugging_opt(config::ASM_COMMENTS) }\n-    pub fn no_verify(&self) -> bool { self.debugging_opt(config::NO_VERIFY) }\n-    pub fn borrowck_stats(&self) -> bool { self.debugging_opt(config::BORROWCK_STATS) }\n+    pub fn trans_stats(&self) -> bool { self.opts.debugging_opts.trans_stats }\n+    pub fn meta_stats(&self) -> bool { self.opts.debugging_opts.meta_stats }\n+    pub fn asm_comments(&self) -> bool { self.opts.debugging_opts.asm_comments }\n+    pub fn no_verify(&self) -> bool { self.opts.debugging_opts.no_verify }\n+    pub fn borrowck_stats(&self) -> bool { self.opts.debugging_opts.borrowck_stats }\n     pub fn print_llvm_passes(&self) -> bool {\n-        self.debugging_opt(config::PRINT_LLVM_PASSES)\n+        self.opts.debugging_opts.print_llvm_passes\n     }\n     pub fn lto(&self) -> bool {\n         self.opts.cg.lto\n     }\n     pub fn no_landing_pads(&self) -> bool {\n-        self.debugging_opt(config::NO_LANDING_PADS)\n+        self.opts.debugging_opts.no_landing_pads\n     }\n     pub fn unstable_options(&self) -> bool {\n-        self.debugging_opt(config::UNSTABLE_OPTIONS)\n+        self.opts.debugging_opts.unstable_options\n     }\n     pub fn print_enum_sizes(&self) -> bool {\n-        self.debugging_opt(config::PRINT_ENUM_SIZES)\n+        self.opts.debugging_opts.print_enum_sizes\n     }\n     pub fn sysroot<'a>(&'a self) -> &'a Path {\n         match self.opts.maybe_sysroot {"}, {"sha": "e2942719f2a47882993837ffdb0f619f74bc81aa", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -19,7 +19,6 @@ use borrowck::LoanPathKind::{LpVar, LpUpvar, LpDowncast, LpExtend};\n use borrowck::LoanPathElem::{LpDeref, LpInterior};\n use borrowck::move_data::{InvalidMovePathIndex};\n use borrowck::move_data::{MoveData, MovePathIndex};\n-use rustc::session::config;\n use rustc::middle::ty;\n use rustc::middle::mem_categorization as mc;\n use rustc::util::ppaux::{Repr, UserString};\n@@ -133,7 +132,7 @@ pub fn instrument_move_fragments<'tcx>(this: &MoveData<'tcx>,\n \n         let span_err =\n             attrs.iter().any(|a| a.check_name(\"rustc_move_fragments\"));\n-        let print = tcx.sess.debugging_opt(config::PRINT_MOVE_FRAGMENTS);\n+        let print = tcx.sess.opts.debugging_opts.print_move_fragments;\n \n         (span_err, print)\n     };"}, {"sha": "c5ade686dfb4607747d594e3fd48988f7320aca1", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -142,7 +142,7 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n         }\n     });\n \n-    if sess.opts.debugging_opts & config::AST_JSON_NOEXPAND != 0 {\n+    if sess.opts.debugging_opts.ast_json_noexpand {\n         println!(\"{}\", json::as_json(&krate));\n     }\n \n@@ -334,7 +334,7 @@ pub fn assign_node_ids_and_map<'ast>(sess: &Session,\n     let map = time(sess.time_passes(), \"assigning node ids and indexing ast\", forest, |forest|\n                    ast_map::map_crate(forest, NodeIdAssigner { sess: sess }));\n \n-    if sess.opts.debugging_opts & config::AST_JSON != 0 {\n+    if sess.opts.debugging_opts.ast_json {\n         println!(\"{}\", json::as_json(map.krate()));\n     }\n \n@@ -484,7 +484,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n }\n \n fn save_analysis(sess: &Session) -> bool {\n-    (sess.opts.debugging_opts & config::SAVE_ANALYSIS) != 0\n+    sess.opts.debugging_opts.save_analysis\n }\n \n pub fn phase_save_analysis(sess: &Session,\n@@ -575,15 +575,15 @@ pub fn stop_after_phase_1(sess: &Session) -> bool {\n     if sess.opts.show_span.is_some() {\n         return true;\n     }\n-    return sess.opts.debugging_opts & config::AST_JSON_NOEXPAND != 0;\n+    return sess.opts.debugging_opts.ast_json_noexpand;\n }\n \n pub fn stop_after_phase_2(sess: &Session) -> bool {\n     if sess.opts.no_analysis {\n         debug!(\"invoked with --no-analysis, returning early from compile_input\");\n         return true;\n     }\n-    return sess.opts.debugging_opts & config::AST_JSON != 0;\n+    return sess.opts.debugging_opts.ast_json;\n }\n \n pub fn stop_after_phase_5(sess: &Session) -> bool {"}, {"sha": "c4ecb6b7b0634fab03020811676756f3b9496022", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -378,13 +378,13 @@ Available lint options:\n \n fn describe_debug_flags() {\n     println!(\"\\nAvailable debug options:\\n\");\n-    let r = config::debugging_opts_map();\n-    for tuple in r.iter() {\n-        match *tuple {\n-            (ref name, ref desc, _) => {\n-                println!(\"    -Z {:>20} -- {}\", *name, *desc);\n-            }\n-        }\n+    for &(name, _, opt_type_desc, desc) in config::DB_OPTIONS.iter() {\n+        let (width, extra) = match opt_type_desc {\n+            Some(..) => (21, \"=val\"),\n+            None => (25, \"\")\n+        };\n+        println!(\"    -Z {:>width$}{} -- {}\", name.replace(\"_\", \"-\"),\n+                 extra, desc, width=width);\n     }\n }\n "}, {"sha": "1765c80f9437b45b28807545f10e62f8e5f46a7a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n-use rustc::session::config::{self, Input};\n+use rustc::session::config::Input;\n use rustc::util::ppaux;\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n@@ -305,19 +305,18 @@ impl<'tcx> pprust::PpAnn for TypedAnnotation<'tcx> {\n }\n \n fn gather_flowgraph_variants(sess: &Session) -> Vec<borrowck_dot::Variant> {\n-    let print_loans   = config::FLOWGRAPH_PRINT_LOANS;\n-    let print_moves   = config::FLOWGRAPH_PRINT_MOVES;\n-    let print_assigns = config::FLOWGRAPH_PRINT_ASSIGNS;\n-    let print_all     = config::FLOWGRAPH_PRINT_ALL;\n-    let opt = |&: print_which| sess.debugging_opt(print_which);\n+    let print_loans = sess.opts.debugging_opts.flowgraph_print_loans;\n+    let print_moves = sess.opts.debugging_opts.flowgraph_print_moves;\n+    let print_assigns = sess.opts.debugging_opts.flowgraph_print_assigns;\n+    let print_all = sess.opts.debugging_opts.flowgraph_print_all;\n     let mut variants = Vec::new();\n-    if opt(print_all) || opt(print_loans) {\n+    if print_all || print_loans {\n         variants.push(borrowck_dot::Loans);\n     }\n-    if opt(print_all) || opt(print_moves) {\n+    if print_all || print_moves {\n         variants.push(borrowck_dot::Moves);\n     }\n-    if opt(print_all) || opt(print_assigns) {\n+    if print_all || print_assigns {\n         variants.push(borrowck_dot::Assigns);\n     }\n     variants"}, {"sha": "f68c76f4c44243dc455c912538db7f0e8486716c", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -99,7 +99,7 @@ fn test_env<F>(source_string: &str,\n {\n     let mut options =\n         config::basic_options();\n-    options.debugging_opts |= config::VERBOSE;\n+    options.debugging_opts.verbose = true;\n     let codemap =\n         CodeMap::new();\n     let diagnostic_handler ="}, {"sha": "351be70cf52614497b11564c976209cdd489af29", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -778,7 +778,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n         cmd.arg(\"-lcompiler-rt\");\n     }\n \n-    if (sess.opts.debugging_opts & config::PRINT_LINK_ARGS) != 0 {\n+    if sess.opts.debugging_opts.print_link_args {\n         println!(\"{}\", &cmd);\n     }\n "}, {"sha": "c818dda7581bd02aa32c737e21c5b7bada86f067", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "patch": "@@ -715,7 +715,7 @@ pub fn run_passes(sess: &Session,\n \n         cmd.args(&sess.target.target.options.post_link_args[]);\n \n-        if (sess.opts.debugging_opts & config::PRINT_LINK_ARGS) != 0 {\n+        if sess.opts.debugging_opts.print_link_args {\n             println!(\"{}\", &cmd);\n         }\n "}]}