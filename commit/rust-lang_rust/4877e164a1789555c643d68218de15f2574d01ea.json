{"sha": "4877e164a1789555c643d68218de15f2574d01ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NzdlMTY0YTE3ODk1NTVjNjQzZDY4MjE4ZGUxNWYyNTc0ZDAxZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T05:51:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-03T05:51:04Z"}, "message": "Auto merge of #67768 - wesleywiser:dnm_test_perf_65244, r=Mark-Simulacrum\n\nRevert #65244 for performance reasons\n\nThis reverts commit f35517ee861dc012ccc26083dd4520045e2c4f6f.\n\nRevert #65244 so we can see if it is the cause of the performance issue in #67706\n\ncc https://github.com/rust-lang/rust/issues/67644", "tree": {"sha": "3865dfba07e78cff7b692467966aa7c975e1af3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3865dfba07e78cff7b692467966aa7c975e1af3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4877e164a1789555c643d68218de15f2574d01ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4877e164a1789555c643d68218de15f2574d01ea", "html_url": "https://github.com/rust-lang/rust/commit/4877e164a1789555c643d68218de15f2574d01ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4877e164a1789555c643d68218de15f2574d01ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a58f5864659ddfe1d95c122abaa75c88220aed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a58f5864659ddfe1d95c122abaa75c88220aed0", "html_url": "https://github.com/rust-lang/rust/commit/0a58f5864659ddfe1d95c122abaa75c88220aed0"}, {"sha": "717702dffdf9ddb84e1fd35f189511a307e350e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/717702dffdf9ddb84e1fd35f189511a307e350e1", "html_url": "https://github.com/rust-lang/rust/commit/717702dffdf9ddb84e1fd35f189511a307e350e1"}], "stats": {"total": 102, "additions": 12, "deletions": 90}, "files": [{"sha": "f14ed38b9b0f27c4c5a39bd8450b466a4d07cc3d", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -99,21 +99,6 @@ pub trait Future {\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n }\n \n-/// Conversion into a `Future`.\n-#[unstable(feature = \"into_future\", issue = \"67644\")]\n-pub trait IntoFuture {\n-    /// The output that the future will produce on completion.\n-    #[unstable(feature = \"into_future\", issue = \"67644\")]\n-    type Output;\n-    /// Which kind of future are we turning this into?\n-    #[unstable(feature = \"into_future\", issue = \"67644\")]\n-    type Future: Future<Output = Self::Output>;\n-\n-    /// Creates a future from a value.\n-    #[unstable(feature = \"into_future\", issue = \"67644\")]\n-    fn into_future(self) -> Self::Future;\n-}\n-\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     type Output = F::Output;\n@@ -134,13 +119,3 @@ where\n         Pin::get_mut(self).as_mut().poll(cx)\n     }\n }\n-\n-#[unstable(feature = \"into_future\", issue = \"67644\")]\n-impl<F: Future> IntoFuture for F {\n-    type Output = F::Output;\n-    type Future = F;\n-\n-    fn into_future(self) -> Self::Future {\n-        self\n-    }\n-}"}, {"sha": "89ea4713cfdaaa43b377e9bc18fa49735940a48b", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -5,6 +5,3 @@\n mod future;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n-\n-#[unstable(feature = \"into_future\", issue = \"67644\")]\n-pub use self::future::IntoFuture;"}, {"sha": "591e869193d83c0bdd3dbb4dfec531740d85eb91", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -517,7 +517,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// match ::std::future::IntoFuture::into_future(<expr>) {\n+    /// match <expr> {\n     ///     mut pinned => loop {\n     ///         match ::std::future::poll_with_tls_context(unsafe {\n     ///             <::std::pin::Pin>::new_unchecked(&mut pinned)\n@@ -641,27 +641,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // mut pinned => loop { ... }\n         let pinned_arm = self.arm(pinned_pat, loop_expr);\n \n-        // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n-        let into_future_span = self.mark_span_with_reason(\n-            DesugaringKind::Await,\n-            await_span,\n-            self.allow_into_future.clone(),\n-        );\n-        let expr = self.lower_expr_mut(expr);\n-        let into_future_expr = self.expr_call_std_path(\n-            into_future_span,\n-            &[sym::future, sym::IntoFuture, sym::into_future],\n-            arena_vec![self; expr],\n-        );\n-\n-        // match <into_future_expr> {\n+        // match <expr> {\n         //     mut pinned => loop { .. }\n         // }\n-        hir::ExprKind::Match(\n-            into_future_expr,\n-            arena_vec![self; pinned_arm],\n-            hir::MatchSource::AwaitDesugar,\n-        )\n+        let expr = self.lower_expr(expr);\n+        hir::ExprKind::Match(expr, arena_vec![self; pinned_arm], hir::MatchSource::AwaitDesugar)\n     }\n \n     fn lower_expr_closure("}, {"sha": "3b06a6969acc048380ca34ffdcc98097ba404206", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -167,7 +167,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n-    allow_into_future: Option<Lrc<[Symbol]>>,\n }\n \n pub trait Resolver {\n@@ -300,7 +299,6 @@ pub fn lower_crate<'a, 'hir>(\n         in_scope_lifetimes: Vec::new(),\n         allow_try_trait: Some([sym::try_trait][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n-        allow_into_future: Some([sym::into_future][..].into()),\n     }\n     .lower_crate(krate)\n }"}, {"sha": "fea72744d31e4003ab6c5d8eec3953c8603f52bf", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -379,8 +379,6 @@ symbols! {\n         infer_static_outlives_requirements,\n         inline,\n         intel,\n-        into_future,\n-        IntoFuture,\n         into_iter,\n         IntoIterator,\n         into_result,"}, {"sha": "9c7422c2b20a6208c9807fbb81fbd889f70d3ace", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -10,11 +10,7 @@ use core::task::{Context, Poll};\n \n #[doc(inline)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-pub use core::future::Future;\n-\n-#[doc(inline)]\n-#[unstable(feature = \"into_future\", issue = \"67644\")]\n-pub use core::future::IntoFuture;\n+pub use core::future::*;\n \n /// Wrap a generator in a future.\n ///"}, {"sha": "4b15c9ba4f3a59fe5facafa20b5b7f7099345b38", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -269,7 +269,6 @@\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n #![feature(int_error_matching)]\n-#![feature(into_future)]\n #![feature(integer_atomics)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "4a413381aa30098e0caf68e2720abafacb0da53f", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -112,7 +112,7 @@ async fn mixed_sizes() {\n fn main() {\n     assert_eq!(1028, std::mem::size_of_val(&single()));\n     assert_eq!(1032, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3080, std::mem::size_of_val(&joined()));\n-    assert_eq!(3080, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(6164, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(3084, std::mem::size_of_val(&joined()));\n+    assert_eq!(3084, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(7188, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "d5ff0eb304937e3de6b8acbdd19cf0fc1f25ff6e", "filename": "src/test/ui/async-await/await-into-future.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a58f5864659ddfe1d95c122abaa75c88220aed0/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a58f5864659ddfe1d95c122abaa75c88220aed0/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs?ref=0a58f5864659ddfe1d95c122abaa75c88220aed0", "patch": "@@ -1,28 +0,0 @@\n-// check-pass\n-\n-// edition:2018\n-\n-#![feature(into_future)]\n-\n-use std::{future::{Future, IntoFuture}, pin::Pin};\n-\n-struct AwaitMe;\n-\n-impl IntoFuture for AwaitMe {\n-    type Output = i32;\n-    type Future = Pin<Box<dyn Future<Output = i32>>>;\n-\n-    fn into_future(self) -> Self::Future {\n-        Box::pin(me())\n-    }\n-}\n-\n-async fn me() -> i32 {\n-    41\n-}\n-\n-async fn run() {\n-    assert_eq!(AwaitMe.await, 41);\n-}\n-\n-fn main() {}"}, {"sha": "cd6670923c2c6ef4f05757cb6b7f295d1ec00783", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4877e164a1789555c643d68218de15f2574d01ea/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4877e164a1789555c643d68218de15f2574d01ea/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=4877e164a1789555c643d68218de15f2574d01ea", "patch": "@@ -32,8 +32,11 @@ error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]: std:\n    |\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:16:5: 16:15]`\n+   | \n+  ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |\n-   = note: required by `std::future::IntoFuture::into_future`\n+LL |     F: Future,\n+   |        ------ required by this bound in `std::future::poll_with_tls_context`\n \n error: aborting due to 4 previous errors\n "}]}