{"sha": "9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYzVlZjU0MWFkMTc5ODZiZmU2YWUwNjdhODRlYThmN2I3YWUxMzM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T22:24:39Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-09-04T19:22:08Z"}, "message": "Breaking change upgrades", "tree": {"sha": "b66ab3ff4520b7abc1ea542ab3447c6d15e9047d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66ab3ff4520b7abc1ea542ab3447c6d15e9047d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "html_url": "https://github.com/rust-lang/rust/commit/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6", "html_url": "https://github.com/rust-lang/rust/commit/1c2e17f4e3a2070a7f703f51e29c1c388ef703b6"}], "stats": {"total": 148, "additions": 99, "deletions": 49}, "files": [{"sha": "951745bf5bbb5e4590a193639d2c980177b03b6a", "filename": "src/Cargo.lock", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -12,7 +12,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -391,7 +391,7 @@ dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfix 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -421,7 +421,7 @@ dependencies = [\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1092,6 +1092,15 @@ dependencies = [\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"lock_api\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"log\"\n version = \"0.3.9\"\n@@ -1397,6 +1406,15 @@ dependencies = [\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"parking_lot\"\n+version = \"0.6.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lock_api 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"parking_lot_core\"\n version = \"0.2.14\"\n@@ -1408,6 +1426,17 @@ dependencies = [\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"parking_lot_core\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"percent-encoding\"\n version = \"1.0.1\"\n@@ -1821,7 +1850,7 @@ dependencies = [\n  \"jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"polonius-engine 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2072,6 +2101,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2081,7 +2111,7 @@ dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2131,10 +2161,11 @@ name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_cratesio_shim 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n- \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2148,7 +2179,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_fs_util 0.0.0\",\n@@ -2580,7 +2611,7 @@ dependencies = [\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n- \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\",\n  \"rustc_msan 0.0.0\",\n@@ -3156,6 +3187,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libgit2-sys 0.7.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ab62b46003ba97701554631fa570d9f7e7947e2480ae3d941e555a54a2c0f05\"\n \"checksum libssh2-sys 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10dbc0957a27626444f5a3f523e6b97a70c3d702999bf1c7161cfbe7a25a9368\"\n \"checksum libz-sys 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5f9aba969b3c45fe9c94bec65895868a9ceca9a600699f4054b75747a19c7c6\"\n+\"checksum lock_api 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"949826a5ccf18c1b3a7c3d57692778d21768b79e46eb9dd07bfc4c2160036c54\"\n \"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\"\n \"checksum log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cba860f648db8e6f269df990180c2217f333472b4a6e901e97446858487971e2\"\n \"checksum log_settings 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19af41f0565d7c19b2058153ad0b42d4d5ce89ec4dbf06ed6741114a8b63e7cd\"\n@@ -3188,7 +3220,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ordslice 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd20eec3dbe4376829cb7d80ae6ac45e0a766831dca50202ff2d40db46a8a024\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4d05f1349491390b1730afba60bb20d55761bef489a954546b58b4b34e1e2ac\"\n+\"checksum parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0802bff09003b291ba756dc7e79313e51cc31667e94afbe847def490424cde5\"\n \"checksum parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4db1a8ccf734a7bce794cc19b3df06ed87ab2f3907036b693c68f56b4d4537fa\"\n+\"checksum parking_lot_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"06a2b6aae052309c2fd2161ef58f5067bc17bb758377a0de9d4b279d603fdd8a\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n \"checksum pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab94faafeb93f4c5e3ce81ca0e5a779529a602ad5d09ae6d21996bfb8b6a52bf\""}, {"sha": "642a43d4d9c2bc1a8d53a2db094183da8ffc8066", "filename": "src/liballoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -14,7 +14,7 @@ core = { path = \"../libcore\" }\n compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }\n \n [dev-dependencies]\n-rand = \"0.4\"\n+rand = \"0.5\"\n \n [[test]]\n name = \"collectionstests\""}, {"sha": "2ef84dbade0fbc480f96529db85988407f45e241", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -1222,7 +1222,7 @@ mod tests {\n     use std::thread;\n     use std::vec::Vec;\n \n-    use rand::{thread_rng, Rng};\n+    use rand::{thread_rng, RngCore};\n \n     use super::{LinkedList, Node};\n "}, {"sha": "f33bf64d40bdef79e987a809039b44891e0aad13", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -18,7 +18,8 @@ use std::sync::atomic::Ordering::Relaxed;\n use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize};\n use std::thread;\n \n-use rand::{Rng, thread_rng};\n+use rand::{Rng, RngCore, thread_rng};\n+use rand::distributions::Standard;\n \n fn square(n: usize) -> usize {\n     n * n\n@@ -405,7 +406,7 @@ fn test_sort() {\n     for len in (2..25).chain(500..510) {\n         for &modulus in &[5, 10, 100, 1000] {\n             for _ in 0..10 {\n-                let orig: Vec<_> = rng.gen_iter::<i32>()\n+                let orig: Vec<_> = rng.sample_iter::<i32, _>(&Standard)\n                     .map(|x| x % modulus)\n                     .take(len)\n                     .collect();"}, {"sha": "0b01cfc488bbaf83fd80b02ce4361957f4967456", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -20,4 +20,4 @@ name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n-rand = \"0.4\"\n+rand = \"0.5\""}, {"sha": "ab619093d9d85b77969fc2ee9b0999cb8e5e56e5", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -18,8 +18,8 @@ use core::num::flt2dec::strategy::grisu::format_exact_opt;\n use core::num::flt2dec::strategy::grisu::format_shortest_opt;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n \n-use rand::{self, Rand, XorShiftRng};\n-use rand::distributions::{IndependentSample, Range};\n+use rand::{FromEntropy, XorShiftRng};\n+use rand::distributions::{Distribution, Uniform};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -71,21 +71,21 @@ fn iterate<F, G, V>(func: &str, k: usize, n: usize, mut f: F, mut g: G, mut v: V\n pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n         where F: FnMut(&Decoded, &mut [u8]) -> Option<(usize, i16)>,\n               G: FnMut(&Decoded, &mut [u8]) -> (usize, i16) {\n-    let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n-    let f32_range = Range::new(0x0000_0001u32, 0x7f80_0000);\n+    let mut rng = XorShiftRng::from_entropy();\n+    let f32_range = Uniform::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n-        let x = f32::from_bits(f32_range.ind_sample(&mut rng));\n+        let x = f32::from_bits(f32_range.sample(&mut rng));\n         decode_finite(x)\n     });\n }\n \n pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n         where F: FnMut(&Decoded, &mut [u8]) -> Option<(usize, i16)>,\n               G: FnMut(&Decoded, &mut [u8]) -> (usize, i16) {\n-    let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n-    let f64_range = Range::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n+    let mut rng = XorShiftRng::from_entropy();\n+    let f64_range = Uniform::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n-        let x = f64::from_bits(f64_range.ind_sample(&mut rng));\n+        let x = f64::from_bits(f64_range.sample(&mut rng));\n         decode_finite(x)\n     });\n }"}, {"sha": "012dc9bf5e0b93751c40ea628adf19adcce71459", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -802,11 +802,11 @@ fn test_rotate_right() {\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n-    use rand::{Rng, XorShiftRng};\n+    use rand::{FromEntropy, Rng, XorShiftRng};\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n-    let mut rng = XorShiftRng::new_unseeded();\n+    let mut rng = XorShiftRng::from_entropy();\n \n     for len in (2..25).chain(500..510) {\n         let v = &mut v[0..len];"}, {"sha": "6c3b52196a3a2bb03c459e4f96b8a821fda5864d", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -29,7 +29,7 @@ serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n-parking_lot = \"0.5.5\"\n+parking_lot = \"0.6\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n chalk-engine = { version = \"0.7.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }"}, {"sha": "d1f050fcd424d23201142bd3453440a245c4b931", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::{RwLock, ReadGuard};\n+use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n                                            StableHasherResult};\n use ich::StableHashingContext;\n@@ -55,7 +55,10 @@ impl Cache {\n         *self.predecessors.borrow_mut() = None;\n     }\n \n-    pub fn predecessors(&self, mir: &Mir) -> ReadGuard<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n+    pub fn predecessors(\n+        &self,\n+        mir: &Mir\n+    ) -> MappedReadGuard<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         if self.predecessors.borrow().is_none() {\n             *self.predecessors.borrow_mut() = Some(calculate_predecessors(mir));\n         }"}, {"sha": "f66be6dc54d37e3c883d062c5cfd44a0aeb6e12f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::sync::ReadGuard;\n+use rustc_data_structures::sync::MappedReadGuard;\n use rustc_serialize as serialize;\n use smallvec::SmallVec;\n use std::borrow::Cow;\n@@ -194,13 +194,13 @@ impl<'tcx> Mir<'tcx> {\n     }\n \n     #[inline]\n-    pub fn predecessors(&self) -> ReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n+    pub fn predecessors(&self) -> MappedReadGuard<'_, IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         self.cache.predecessors(self)\n     }\n \n     #[inline]\n-    pub fn predecessors_for(&self, bb: BasicBlock) -> ReadGuard<'_, Vec<BasicBlock>> {\n-        ReadGuard::map(self.predecessors(), |p| &p[bb])\n+    pub fn predecessors_for(&self, bb: BasicBlock) -> MappedReadGuard<'_, Vec<BasicBlock>> {\n+        MappedReadGuard::map(self.predecessors(), |p| &p[bb])\n     }\n \n     #[inline]"}, {"sha": "3ff3cb4cae1d499dddf592c8a9db4854d0f00fcd", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc_data_structures::sync::{RwLock, ReadGuard};\n+use rustc_data_structures::sync::{RwLock, ReadGuard, MappedReadGuard};\n use std::mem;\n \n /// The `Steal` struct is intended to used as the value for a query.\n@@ -42,7 +42,7 @@ impl<T> Steal<T> {\n         }\n     }\n \n-    pub fn borrow(&self) -> ReadGuard<T> {\n+    pub fn borrow(&self) -> MappedReadGuard<T> {\n         ReadGuard::map(self.value.borrow(), |opt| match *opt {\n             None => bug!(\"attempted to read from stolen value\"),\n             Some(ref v) => v"}, {"sha": "b8e494e4040ec829e52baa89347883c04a287e7a", "filename": "src/librustc_cratesio_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_cratesio_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_cratesio_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -22,3 +22,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n bitflags = \"1.0\"\n log = \"0.4\"\n+unicode-width = \"0.1.4\""}, {"sha": "ebceb00cca8b0b72c7a65bc4af1f944cdc62e170", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -16,3 +16,4 @@\n \n extern crate bitflags;\n extern crate log;\n+extern crate unicode_width;"}, {"sha": "5a72fde6a2c8a1d917fb3d6d1efebf12a31084ae", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -22,5 +22,5 @@ rustc-hash = \"1.0.1\"\n smallvec = { version = \"0.6.5\", features = [\"union\"] }\n \n [dependencies.parking_lot]\n-version = \"0.5\"\n+version = \"0.6\"\n features = [\"nightly\"]"}, {"sha": "a2893a60cb680722c7e8eea40268f06dd767d93d", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -93,8 +93,11 @@ cfg_if! {\n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n         pub use std::cell::Ref as ReadGuard;\n+        pub use std::cell::Ref as MappedReadGuard;\n         pub use std::cell::RefMut as WriteGuard;\n+        pub use std::cell::RefMut as MappedWriteGuard;\n         pub use std::cell::RefMut as LockGuard;\n+        pub use std::cell::RefMut as MappedLockGuard;\n \n         use std::cell::RefCell as InnerRwLock;\n         use std::cell::RefCell as InnerLock;\n@@ -213,9 +216,12 @@ cfg_if! {\n         pub use std::marker::Sync as Sync;\n \n         pub use parking_lot::RwLockReadGuard as ReadGuard;\n+        pub use parking_lot::MappedRwLockReadGuard as MappedReadGuard;\n         pub use parking_lot::RwLockWriteGuard as WriteGuard;\n+        pub use parking_lot::MappedRwLockWriteGuard as MappedWriteGuard;\n \n         pub use parking_lot::MutexGuard as LockGuard;\n+        pub use parking_lot::MappedMutexGuard as MappedLockGuard;\n \n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;"}, {"sha": "101ca0650c8a4247d281eb8d06534c52c3105b99", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\"\n-termcolor = \"0.3\"\n+termcolor = \"1.0\""}, {"sha": "b8519ee1ab1a5bff1c839d55e4bb8d2db46abd6e", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n-rand = \"0.4\"\n+rand = \"0.5\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "ec25aef8080593800aea6305b4bfff01546a2764", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -126,7 +126,7 @@ use std::mem;\n use std::path::{Path, PathBuf};\n use std::time::{UNIX_EPOCH, SystemTime, Duration};\n \n-use rand::{thread_rng, Rng};\n+use rand::{RngCore, thread_rng};\n \n const LOCK_FILE_EXT: &'static str = \".lock\";\n const DEP_GRAPH_FILENAME: &'static str = \"dep-graph.bin\";"}, {"sha": "bcdd1b4b088029fea45a223e733b9a27b60da69f", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -25,7 +25,7 @@ profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n \n [dev-dependencies]\n-rand = \"0.4\"\n+rand = \"0.5\"\n \n [target.x86_64-apple-darwin.dependencies]\n rustc_asan = { path = \"../librustc_asan\" }"}, {"sha": "e177d4a988ae7d9c5ac943307f42f323ffe37a3b", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -2076,7 +2076,7 @@ mod tests {\n     use fs::{self, File, OpenOptions};\n     use io::{ErrorKind, SeekFrom};\n     use path::Path;\n-    use rand::{StdRng, Rng};\n+    use rand::{StdRng, FromEntropy, RngCore};\n     use str;\n     use sys_common::io::test::{TempDir, tmpdir};\n     use thread;\n@@ -3110,7 +3110,7 @@ mod tests {\n     #[test]\n     fn binary_file() {\n         let mut bytes = [0; 1024];\n-        StdRng::new().unwrap().fill_bytes(&mut bytes);\n+        StdRng::from_entropy().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();\n \n@@ -3123,7 +3123,7 @@ mod tests {\n     #[test]\n     fn write_then_read() {\n         let mut bytes = [0; 1024];\n-        StdRng::new().unwrap().fill_bytes(&mut bytes);\n+        StdRng::from_entropy().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();\n "}, {"sha": "ed3a3865a6caee0f2b5d0d49bd4204f479dc10f6", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -597,7 +597,7 @@ mod tests {\n             thread::spawn(move || {\n                 let mut rng = rand::thread_rng();\n                 for _ in 0..M {\n-                    if rng.gen_weighted_bool(N) {\n+                    if rng.gen_bool(1.0 / (N as f64)) {\n                         drop(r.write().unwrap());\n                     } else {\n                         drop(r.read().unwrap());"}, {"sha": "a96fb19213999cf7affeea0d2029497e4a0e44c1", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -14,7 +14,7 @@ pub const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n pub mod test {\n     use path::{Path, PathBuf};\n     use env;\n-    use rand::{self, Rng};\n+    use rand::{self, RngCore};\n     use fs;\n \n     pub struct TempDir(PathBuf);"}, {"sha": "7302a794480aba5d3157ae71e7af8606ff10c600", "filename": "src/libstd/tests/env.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftests%2Fenv.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -13,11 +13,12 @@ extern crate rand;\n use std::env::*;\n use std::ffi::{OsString, OsStr};\n \n-use rand::Rng;\n+use rand::{thread_rng, Rng};\n+use rand::distributions::Alphanumeric;\n \n fn make_rand_name() -> OsString {\n-    let mut rng = rand::thread_rng();\n-    let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n+    let mut rng = thread_rng();\n+    let n = format!(\"TEST{}\", rng.sample_iter(&Alphanumeric).take(10)\n                                  .collect::<String>());\n     let n = OsString::from(n);\n     assert!(var_os(&n).is_none());"}, {"sha": "95839f94b9efea279e3437c1d06d7817a5eee1fe", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -24,7 +24,7 @@ pub use self::ExpnFormat::*;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::{Lrc, Lock, LockGuard};\n+use rustc_data_structures::sync::{Lrc, Lock, LockGuard, MappedLockGuard};\n use std::cmp;\n use std::hash::Hash;\n use std::path::{Path, PathBuf};\n@@ -194,7 +194,7 @@ impl SourceMap {\n         Ok(self.new_source_file(filename, src))\n     }\n \n-    pub fn files(&self) -> LockGuard<Vec<Lrc<SourceFile>>> {\n+    pub fn files(&self) -> MappedLockGuard<Vec<Lrc<SourceFile>>> {\n         LockGuard::map(self.files.borrow(), |files| &mut files.file_maps)\n     }\n "}, {"sha": "7fec2e003a4452ee5ee7ffbe51ff24d1fd325958", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -9,7 +9,7 @@ env_logger = { version = \"0.5\", default-features = false }\n filetime = \"0.2\"\n getopts = \"0.2\"\n log = \"0.4\"\n-regex = \"0.2\"\n+regex = \"1.0\"\n serde = \"1.0\"\n serde_json = \"1.0\"\n serde_derive = \"1.0\""}, {"sha": "d6a2c17d6f6f9a6d2b265180313840d927e296db", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=9ec5ef541ad17986bfe6ae067a84ea8f7b7ae133", "patch": "@@ -91,6 +91,7 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"kernel32-sys\"),\n     Crate(\"lazy_static\"),\n     Crate(\"libc\"),\n+    Crate(\"lock_api\"),\n     Crate(\"log\"),\n     Crate(\"log_settings\"),\n     Crate(\"memchr\"),\n@@ -102,8 +103,8 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"owning_ref\"),\n     Crate(\"parking_lot\"),\n     Crate(\"parking_lot_core\"),\n-    Crate(\"polonius-engine\"),\n     Crate(\"pkg-config\"),\n+    Crate(\"polonius-engine\"),\n     Crate(\"quick-error\"),\n     Crate(\"rand\"),\n     Crate(\"rand_core\"),\n@@ -134,6 +135,7 @@ static WHITELIST: &'static [Crate] = &[\n     Crate(\"winapi\"),\n     Crate(\"winapi-build\"),\n     Crate(\"winapi-i686-pc-windows-gnu\"),\n+    Crate(\"winapi-util\"),\n     Crate(\"winapi-x86_64-pc-windows-gnu\"),\n     Crate(\"wincolor\"),\n ];"}]}