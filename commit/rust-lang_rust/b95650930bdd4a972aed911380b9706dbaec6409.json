{"sha": "b95650930bdd4a972aed911380b9706dbaec6409", "node_id": "C_kwDOAAsO6NoAKGI5NTY1MDkzMGJkZDRhOTcyYWVkOTExMzgwYjk3MDZkYmFlYzY0MDk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-23T14:40:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-12T09:56:23Z"}, "message": "Compute variance for opaques too.", "tree": {"sha": "6eaf218ca46dee68c8a4406336ef310fb1b1b561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eaf218ca46dee68c8a4406336ef310fb1b1b561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b95650930bdd4a972aed911380b9706dbaec6409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b95650930bdd4a972aed911380b9706dbaec6409", "html_url": "https://github.com/rust-lang/rust/commit/b95650930bdd4a972aed911380b9706dbaec6409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b95650930bdd4a972aed911380b9706dbaec6409/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825f8edc2fff167304d40c826f136e82967d68f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/825f8edc2fff167304d40c826f136e82967d68f3", "html_url": "https://github.com/rust-lang/rust/commit/825f8edc2fff167304d40c826f136e82967d68f3"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "aa7fad0096428ca15ced9db4e0e8766b8338667d", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b95650930bdd4a972aed911380b9706dbaec6409/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95650930bdd4a972aed911380b9706dbaec6409/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=b95650930bdd4a972aed911380b9706dbaec6409", "patch": "@@ -5,9 +5,10 @@\n \n use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, CrateVariancesMap, TyCtxt};\n+use rustc_middle::ty::{self, CrateVariancesMap, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use std::ops::ControlFlow;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n /// allocate terms.\n@@ -50,6 +51,9 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         | DefKind::Union\n         | DefKind::Variant\n         | DefKind::Ctor(..) => {}\n+        DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder => {\n+            return variance_of_opaque(tcx, item_def_id.expect_local());\n+        }\n         _ => {\n             // Variance not relevant.\n             span_bug!(tcx.def_span(item_def_id), \"asked to compute variance for wrong kind of item\")\n@@ -61,3 +65,89 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     let crate_map = tcx.crate_variances(());\n     crate_map.variances.get(&item_def_id).copied().unwrap_or(&[])\n }\n+\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n+fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Variance] {\n+    let generics = tcx.generics_of(item_def_id);\n+\n+    // Opaque types may only use regions that are bound. So for\n+    // ```rust\n+    // type Foo<'a, 'b, 'c> = impl Trait<'a> + 'b;\n+    // ```\n+    // we may not use `'c` in the hidden type.\n+    struct OpaqueTypeLifetimeCollector {\n+        variances: Vec<ty::Variance>,\n+    }\n+\n+    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector {\n+        #[instrument(level = \"trace\", skip(self), ret)]\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {\n+                self.variances[ebr.index as usize] = ty::Invariant;\n+            }\n+            r.super_visit_with(self)\n+        }\n+    }\n+\n+    // By default, we RPIT are invariant wrt type and const generics, but they are bivariant wrt\n+    // lifetime generics.\n+    let mut variances: Vec<_> = std::iter::repeat(ty::Invariant).take(generics.count()).collect();\n+\n+    // Mark all lifetimes from parent generics as unused (Bivariant).\n+    // This will be overridden later if required.\n+    {\n+        let mut generics = generics;\n+        while let Some(def_id) = generics.parent {\n+            generics = tcx.generics_of(def_id);\n+            for param in &generics.params {\n+                match param.kind {\n+                    ty::GenericParamDefKind::Lifetime => {\n+                        variances[param.index as usize] = ty::Bivariant;\n+                    }\n+                    ty::GenericParamDefKind::Type { .. }\n+                    | ty::GenericParamDefKind::Const { .. } => {}\n+                }\n+            }\n+        }\n+    }\n+\n+    let mut collector = OpaqueTypeLifetimeCollector { variances };\n+    let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id.to_def_id());\n+    for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n+        let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);\n+        debug!(?pred);\n+\n+        // We only ignore opaque type substs if the opaque type is the outermost type.\n+        // The opaque type may be nested within itself via recursion in e.g.\n+        // type Foo<'a> = impl PartialEq<Foo<'a>>;\n+        // which thus mentions `'a` and should thus accept hidden types that borrow 'a\n+        // instead of requiring an additional `+ 'a`.\n+        match pred.kind().skip_binder() {\n+            ty::PredicateKind::Trait(ty::TraitPredicate {\n+                trait_ref: ty::TraitRef { def_id: _, substs },\n+                constness: _,\n+                polarity: _,\n+            }) => {\n+                for subst in &substs[1..] {\n+                    subst.visit_with(&mut collector);\n+                }\n+            }\n+            ty::PredicateKind::Projection(ty::ProjectionPredicate {\n+                projection_ty: ty::ProjectionTy { substs, item_def_id: _ },\n+                term,\n+            }) => {\n+                for subst in &substs[1..] {\n+                    subst.visit_with(&mut collector);\n+                }\n+                term.visit_with(&mut collector);\n+            }\n+            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(_, region)) => {\n+                region.visit_with(&mut collector);\n+            }\n+            _ => {\n+                pred.visit_with(&mut collector);\n+            }\n+        }\n+    }\n+    tcx.arena.alloc_from_iter(collector.variances.into_iter())\n+}"}, {"sha": "9b95c4a32d7d2016811558d8041507f3c8df5602", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b95650930bdd4a972aed911380b9706dbaec6409/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b95650930bdd4a972aed911380b9706dbaec6409/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b95650930bdd4a972aed911380b9706dbaec6409", "patch": "@@ -928,6 +928,8 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::Union\n         | DefKind::Enum\n         | DefKind::Variant\n+        | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Fn\n         | DefKind::Ctor(..)\n         | DefKind::AssocFn => true,\n@@ -941,8 +943,6 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::Const\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n-        | DefKind::OpaqueTy\n-        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Trait\n         | DefKind::TraitAlias"}]}