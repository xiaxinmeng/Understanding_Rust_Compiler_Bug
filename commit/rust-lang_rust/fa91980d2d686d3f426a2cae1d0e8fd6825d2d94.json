{"sha": "fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "node_id": "C_kwDOAAsO6NoAKGZhOTE5ODBkMmQ2ODZkM2Y0MjZhMmNhZTFkMGU4ZmQ2ODI1ZDJkOTQ", "commit": {"author": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-19T10:27:31Z"}, "committer": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-19T10:46:37Z"}, "message": "Add long description and test for E0311\n\nAdds a long description and unit test for the E0311 compiler error.", "tree": {"sha": "721f3338bfe28410f3378bfc56f5a6f41b838913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/721f3338bfe28410f3378bfc56f5a6f41b838913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "html_url": "https://github.com/rust-lang/rust/commit/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/comments", "author": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c943bad02626dddc5e5135b23c77429b6e4a063", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c943bad02626dddc5e5135b23c77429b6e4a063", "html_url": "https://github.com/rust-lang/rust/commit/6c943bad02626dddc5e5135b23c77429b6e4a063"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "1e86d159668ffe5d6b1bca194df8bb1a359c6d18", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "patch": "@@ -159,6 +159,7 @@ E0307: include_str!(\"./error_codes/E0307.md\"),\n E0308: include_str!(\"./error_codes/E0308.md\"),\n E0309: include_str!(\"./error_codes/E0309.md\"),\n E0310: include_str!(\"./error_codes/E0310.md\"),\n+E0311: include_str!(\"./error_codes/E0311.md\"),\n E0312: include_str!(\"./error_codes/E0312.md\"),\n E0316: include_str!(\"./error_codes/E0316.md\"),\n E0317: include_str!(\"./error_codes/E0317.md\"),\n@@ -568,7 +569,6 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n-    E0311, // thing may not live long enough\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured\n            // variable\n //  E0314, // closure outlives stack frame"}, {"sha": "8b5daaaa17865e1d8a8ce09fe05ff8bdc634aee6", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "patch": "@@ -0,0 +1,49 @@\n+E0311 occurs when there is insufficient information for the rust compiler to\n+prove that some time has a long enough lifetime.\n+\n+Erroneous code example:\n+\n+```compile_fail, E0311\n+use std::borrow::BorrowMut;\n+\n+trait NestedBorrowMut<U, V> {\n+    fn nested_borrow_mut(&mut self) -> &mut V;\n+}\n+\n+impl<T, U, V> NestedBorrowMut<U, V> for T\n+where\n+    T: BorrowMut<U>,\n+    U: BorrowMut<V>,  // missing lifetime specifier here --> compile fail\n+{\n+    fn nested_borrow_mut(&mut self) -> &mut V {\n+        self.borrow_mut().borrow_mut()\n+    }\n+}\n+```\n+\n+In this example we have a trait that borrows some inner data element of type V\n+from an outer type T, through an intermediate type U. The compiler is unable to\n+prove that the livetime of U is long enough to support the reference, so it\n+throws E0311. To fix the issue we can explicitly add lifetime specifiers to the\n+trait, which link the lifetimes of the various data types and allow the code\n+to compile.\n+\n+Working implementation of the `NestedBorrowMut` trait:\n+\n+```\n+use std::borrow::BorrowMut;\n+\n+trait NestedBorrowMut<'a, U, V> {\n+    fn nested_borrow_mut(& 'a mut self) -> &'a mut V;\n+}\n+\n+impl<'a, T, U, V> NestedBorrowMut<'a, U, V> for T\n+where\n+    T: BorrowMut<U>,\n+    U: BorrowMut<V> + 'a,\n+{\n+    fn nested_borrow_mut(&'a mut self) -> &'a mut V {\n+        self.borrow_mut().borrow_mut()\n+    }\n+}\n+```"}, {"sha": "eb9a473e9a2d1e0a8341ee334b1fbdb5af77f807", "filename": "src/test/ui/error-codes/E0311.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs?ref=fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "patch": "@@ -0,0 +1,18 @@\n+use std::borrow::BorrowMut;\n+\n+trait NestedBorrowMut<U, V> {\n+    fn nested_borrow_mut(&mut self) -> &mut V;\n+}\n+\n+impl<T, U, V> NestedBorrowMut<U, V> for T\n+where\n+    T: BorrowMut<U>,\n+    U: BorrowMut<V>, // Error is caused by missing lifetime here\n+{\n+    fn nested_borrow_mut(&mut self) -> &mut V {\n+        let u_ref = self.borrow_mut(); //~ ERROR E0311\n+        u_ref.borrow_mut() //~ ERROR E0311\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a219a6352adc8a2061ee44bcf3b7e526b4f41c16", "filename": "src/test/ui/error-codes/E0311.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa91980d2d686d3f426a2cae1d0e8fd6825d2d94/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr?ref=fa91980d2d686d3f426a2cae1d0e8fd6825d2d94", "patch": "@@ -0,0 +1,45 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/E0311.rs:13:21\n+   |\n+LL |         let u_ref = self.borrow_mut();\n+   |                     ^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/E0311.rs:12:26\n+   |\n+LL |     fn nested_borrow_mut(&mut self) -> &mut V {\n+   |                          ^^^^^^^^^\n+note: ...so that the type `U` will meet its required lifetime bounds\n+  --> $DIR/E0311.rs:13:21\n+   |\n+LL |         let u_ref = self.borrow_mut();\n+   |                     ^^^^^^^^^^^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here\n+   |                     ++++\n+\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/E0311.rs:14:9\n+   |\n+LL |         u_ref.borrow_mut()\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/E0311.rs:12:26\n+   |\n+LL |     fn nested_borrow_mut(&mut self) -> &mut V {\n+   |                          ^^^^^^^^^\n+note: ...so that the type `U` will meet its required lifetime bounds\n+  --> $DIR/E0311.rs:14:9\n+   |\n+LL |         u_ref.borrow_mut()\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here\n+   |                     ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}]}