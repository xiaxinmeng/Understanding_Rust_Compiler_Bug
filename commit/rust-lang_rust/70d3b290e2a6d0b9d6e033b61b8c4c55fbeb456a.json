{"sha": "70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDNiMjkwZTJhNmQwYjlkNmUwMzNiNjFiOGM0YzU1ZmJlYjQ1NmE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T09:04:27Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:48Z"}, "message": "hir: remove NodeId from Local", "tree": {"sha": "d867ce42af0756881db14ceed8d8607264f5523f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d867ce42af0756881db14ceed8d8607264f5523f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "html_url": "https://github.com/rust-lang/rust/commit/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341b02398630c6c503f63fdecc1f3ed7b0cc721e", "url": "https://api.github.com/repos/rust-lang/rust/commits/341b02398630c6c503f63fdecc1f3ed7b0cc721e", "html_url": "https://github.com/rust-lang/rust/commit/341b02398630c6c503f63fdecc1f3ed7b0cc721e"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "86a0dfae4c49b2cde262237eb2a81e5b5ccdd942", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -2008,7 +2008,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_local(&mut self, l: &Local) -> (hir::Local, SmallVec<[hir::ItemId; 1]>) {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(l.id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(l.id);\n         let mut ids = SmallVec::<[hir::ItemId; 1]>::new();\n         if self.sess.features_untracked().impl_trait_in_bindings {\n             if let Some(ref ty) = l.ty {\n@@ -2018,7 +2018,6 @@ impl<'a> LoweringContext<'a> {\n         }\n         let parent_def_id = DefId::local(self.current_hir_id_owner.last().unwrap().0);\n         (hir::Local {\n-            id: node_id,\n             hir_id,\n             ty: l.ty\n                 .as_ref()\n@@ -4905,13 +4904,12 @@ impl<'a> LoweringContext<'a> {\n         pat: P<hir::Pat>,\n         source: hir::LocalSource,\n     ) -> hir::Stmt {\n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n \n         let local = hir::Local {\n             pat,\n             ty: None,\n             init: ex,\n-            id: node_id,\n             hir_id,\n             span: sp,\n             attrs: ThinVec::new(),"}, {"sha": "1d8ea8f655717d74b5826627ac2b8fff1e4624b0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -387,7 +387,7 @@ impl<'hir> Map<'hir> {\n             Node::Block(_) |\n             Node::Crate => None,\n             Node::Local(local) => {\n-                Some(Def::Local(local.id))\n+                Some(Def::Local(self.hir_to_node_id(local.hir_id)))\n             }\n             Node::MacroDef(macro_def) => {\n                 Some(Def::Macro(self.local_def_id_from_hir_id(macro_def.hir_id),"}, {"sha": "fc2f3643f939a3b4cd0077ab55e91f4aee6c2ac4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -1207,7 +1207,6 @@ pub struct Local {\n     pub ty: Option<P<Ty>>,\n     /// Initializer expression to set the value, if any.\n     pub init: Option<P<Expr>>,\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub attrs: ThinVec<Attribute>,"}, {"sha": "8109a374c049e9b2df743f682ff3b9d621d3bc78", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -505,7 +505,6 @@ impl_stable_hash_for!(struct hir::Local {\n     pat,\n     ty,\n     init,\n-    id,\n     hir_id,\n     span,\n     attrs,"}, {"sha": "e27672842dbc1d70a20302ecb3b0fd78b21eae85", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.demand_eqtype_pat(pat.span, expected, rhs_ty, match_discrim_span);\n                 common_type\n             }\n-            PatKind::Binding(ba, var_id, _, _, ref sub) => {\n+            PatKind::Binding(ba, _, var_id, _, ref sub) => {\n                 let bm = if ba == hir::BindingAnnotation::Unannotated {\n                     def_bm\n                 } else {\n@@ -239,7 +239,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .pat_binding_modes_mut()\n                     .insert(pat.hir_id, bm);\n                 debug!(\"check_pat_walk: pat.hir_id={:?} bm={:?}\", pat.hir_id, bm);\n-                let local_ty = self.local_ty(pat.span, pat.id).decl_ty;\n+                let local_ty = self.local_ty(pat.span, pat.hir_id).decl_ty;\n                 match bm {\n                     ty::BindByReference(mutbl) => {\n                         // if the binding is like\n@@ -265,7 +265,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 // if there are multiple arms, make sure they all agree on\n                 // what the type of the binding `x` ought to be\n-                if var_id != pat.id {\n+                if var_id != pat.hir_id {\n                     let vt = self.local_ty(pat.span, var_id).decl_ty;\n                     self.demand_eqtype_pat(pat.span, vt, local_ty, match_discrim_span);\n                 }"}, {"sha": "9a8b682cb48d183407f0fb82275f5dc4f4ef2540", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -137,7 +137,7 @@ use crate::TypeAndSubsts;\n use crate::lint;\n use crate::util::captures::Captures;\n use crate::util::common::{ErrorReported, indenter};\n-use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, HirIdMap, NodeMap};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, HirIdMap};\n \n pub use self::Expectation::*;\n use self::autoderef::Autoderef;\n@@ -194,7 +194,7 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     tables: MaybeInProgressTables<'a, 'tcx>,\n \n-    locals: RefCell<NodeMap<LocalTy<'tcx>>>,\n+    locals: RefCell<HirIdMap<LocalTy<'tcx>>>,\n \n     fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n@@ -943,7 +943,7 @@ struct GatherLocalsVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n-    fn assign(&mut self, span: Span, nid: ast::NodeId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n+    fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n         match ty_opt {\n             None => {\n                 // infer the variable's type\n@@ -994,19 +994,19 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n             },\n             None => None,\n         };\n-        self.assign(local.span, local.id, local_ty);\n+        self.assign(local.span, local.hir_id, local_ty);\n \n         debug!(\"Local variable {:?} is assigned type {}\",\n                local.pat,\n                self.fcx.ty_to_string(\n-                   self.fcx.locals.borrow().get(&local.id).unwrap().clone().decl_ty));\n+                   self.fcx.locals.borrow().get(&local.hir_id).unwrap().clone().decl_ty));\n         intravisit::walk_local(self, local);\n     }\n \n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'gcx hir::Pat) {\n         if let PatKind::Binding(_, _, _, ident, _) = p.node {\n-            let var_ty = self.assign(p.span, p.id, None);\n+            let var_ty = self.assign(p.span, p.hir_id, None);\n \n             if !self.fcx.tcx.features().unsized_locals {\n                 self.fcx.require_type_is_sized(var_ty, p.span,\n@@ -1016,7 +1016,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n             debug!(\"Pattern binding {} is assigned to {} with type {:?}\",\n                    ident,\n                    self.fcx.ty_to_string(\n-                       self.fcx.locals.borrow().get(&p.id).unwrap().clone().decl_ty),\n+                       self.fcx.locals.borrow().get(&p.hir_id).unwrap().clone().decl_ty),\n                    var_ty);\n         }\n         intravisit::walk_pat(self, p);\n@@ -2124,10 +2124,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         format!(\"{:?}\", self_ptr)\n     }\n \n-    pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> LocalTy<'tcx> {\n+    pub fn local_ty(&self, span: Span, nid: hir::HirId) -> LocalTy<'tcx> {\n         self.locals.borrow().get(&nid).cloned().unwrap_or_else(||\n             span_bug!(span, \"no type for local variable {}\",\n-                      self.tcx.hir().node_to_string(nid))\n+                      self.tcx.hir().hir_to_string(nid))\n         )\n     }\n \n@@ -4805,7 +4805,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // See #44848.\n         let ref_bindings = local.pat.contains_explicit_ref_binding();\n \n-        let local_ty = self.local_ty(init.span, local.id).revealed_ty;\n+        let local_ty = self.local_ty(init.span, local.hir_id).revealed_ty;\n         if let Some(m) = ref_bindings {\n             // Somewhat subtle: if we have a `ref` binding in the pattern,\n             // we want to avoid introducing coercions for the RHS. This is\n@@ -4824,7 +4824,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_decl_local(&self, local: &'gcx hir::Local) {\n-        let t = self.local_ty(local.span, local.id).decl_ty;\n+        let t = self.local_ty(local.span, local.hir_id).decl_ty;\n         self.write_ty(local.hir_id, t);\n \n         if let Some(ref init) = local.init {\n@@ -5378,7 +5378,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match def {\n             Def::Local(nid) | Def::Upvar(nid, ..) => {\n-                let ty = self.local_ty(span, nid).decl_ty;\n+                let hid = self.tcx.hir().node_to_hir_id(nid);\n+                let ty = self.local_ty(span, hid).decl_ty;\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(hir_id, ty);\n                 return (ty, def);"}, {"sha": "5981d9bb66bfca81017017746321923d38667a79", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=70d3b290e2a6d0b9d6e033b61b8c4c55fbeb456a", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn visit_local(&mut self, l: &'gcx hir::Local) {\n         intravisit::walk_local(self, l);\n-        let var_ty = self.fcx.local_ty(l.span, l.id).decl_ty;\n+        let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;\n         let var_ty = self.resolve(&var_ty, &l.span);\n         self.write_ty_to_tables(l.hir_id, var_ty);\n     }"}]}