{"sha": "81e85ce76d6630a8f87f81df2470e76fbe73de7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTg1Y2U3NmQ2NjMwYThmODdmODFkZjI0NzBlNzZmYmU3M2RlN2Q=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-30T19:59:43Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-30T19:59:43Z"}, "message": "Move to Arc::clone(&x) over x.clone() in library/std", "tree": {"sha": "55988a948bd8b9f80aba09c8a6e9ef8d13eaf6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55988a948bd8b9f80aba09c8a6e9ef8d13eaf6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e85ce76d6630a8f87f81df2470e76fbe73de7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e85ce76d6630a8f87f81df2470e76fbe73de7d", "html_url": "https://github.com/rust-lang/rust/commit/81e85ce76d6630a8f87f81df2470e76fbe73de7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e85ce76d6630a8f87f81df2470e76fbe73de7d/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "56f63002b7f110f336ebbeed0e8154ceb1e55a4e", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -2381,15 +2381,15 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// use std::rc::Rc;\n     ///\n     /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n-    /// let mut known_strings: Vec<Rc<String>> = Vec::new();\n+    /// let known_strings: Vec<Rc<String>> = Vec::new();\n     ///\n     /// // Initialise known strings, run program, etc.\n     ///\n     /// reclaim_memory(&mut map, &known_strings);\n     ///\n     /// fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {\n     ///     for s in known_strings {\n-    ///         if let Entry::Occupied(entry) = map.entry(s.clone()) {\n+    ///         if let Entry::Occupied(entry) = map.entry(Rc::clone(s)) {\n     ///             // Replaces the entry's key with our version of it in `known_strings`.\n     ///             entry.replace_key();\n     ///         }"}, {"sha": "61f097ccf250cbf9ce8caccfde56d806408517d9", "filename": "library/std/src/sync/barrier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fbarrier.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -13,7 +13,7 @@ use crate::sync::{Condvar, Mutex};\n /// let mut handles = Vec::with_capacity(10);\n /// let barrier = Arc::new(Barrier::new(10));\n /// for _ in 0..10 {\n-///     let c = barrier.clone();\n+///     let c = Arc::clone(&barrier);\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n ///     handles.push(thread::spawn(move|| {\n@@ -110,7 +110,7 @@ impl Barrier {\n     /// let mut handles = Vec::with_capacity(10);\n     /// let barrier = Arc::new(Barrier::new(10));\n     /// for _ in 0..10 {\n-    ///     let c = barrier.clone();\n+    ///     let c = Arc::clone(&barrier);\n     ///     // The same messages will be printed together.\n     ///     // You will NOT see any interleaving.\n     ///     handles.push(thread::spawn(move|| {"}, {"sha": "1fbcb0ac08e0f8e21688d453e3f9187d3657dd9b", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -33,7 +33,7 @@ impl WaitTimeoutResult {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move || {\n     ///     let (lock, cvar) = &*pair2;\n@@ -90,7 +90,7 @@ impl WaitTimeoutResult {\n /// use std::thread;\n ///\n /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-/// let pair2 = pair.clone();\n+/// let pair2 = Arc::clone(&pair);\n ///\n /// // Inside of our lock, spawn a new thread, and then wait for it to start.\n /// thread::spawn(move|| {\n@@ -173,7 +173,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -229,7 +229,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(true), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -288,7 +288,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -360,7 +360,7 @@ impl Condvar {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -429,7 +429,7 @@ impl Condvar {\n     /// use std::time::Duration;\n     ///\n     /// let pair = Arc::new((Mutex::new(true), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -493,7 +493,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;\n@@ -533,7 +533,7 @@ impl Condvar {\n     /// use std::thread;\n     ///\n     /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n-    /// let pair2 = pair.clone();\n+    /// let pair2 = Arc::clone(&pair);\n     ///\n     /// thread::spawn(move|| {\n     ///     let (lock, cvar) = &*pair2;"}, {"sha": "39a5a455fe4d564b376e1712e36c180e52bf1427", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -85,7 +85,7 @@ use crate::sys_common::poison::{self, LockResult, TryLockError, TryLockResult};\n /// use std::thread;\n ///\n /// let lock = Arc::new(Mutex::new(0_u32));\n-/// let lock2 = lock.clone();\n+/// let lock2 = Arc::clone(&lock);\n ///\n /// let _ = thread::spawn(move || -> () {\n ///     // This thread will acquire the mutex first, unwrapping the result of\n@@ -256,7 +256,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// thread::spawn(move || {\n     ///     *c_mutex.lock().unwrap() = 10;\n@@ -292,7 +292,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// thread::spawn(move || {\n     ///     let mut lock = c_mutex.try_lock();\n@@ -328,7 +328,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// use std::thread;\n     ///\n     /// let mutex = Arc::new(Mutex::new(0));\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     ///\n     /// let _ = thread::spawn(move || {\n     ///     let _lock = c_mutex.lock().unwrap();"}, {"sha": "b7f135f5c8af479cf9c20939de9f0f3895c6893e", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -162,7 +162,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// use std::thread;\n     ///\n     /// let lock = Arc::new(RwLock::new(1));\n-    /// let c_lock = lock.clone();\n+    /// let c_lock = Arc::clone(&lock);\n     ///\n     /// let n = lock.read().unwrap();\n     /// assert_eq!(*n, 1);\n@@ -318,7 +318,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// use std::thread;\n     ///\n     /// let lock = Arc::new(RwLock::new(0));\n-    /// let c_lock = lock.clone();\n+    /// let c_lock = Arc::clone(&lock);\n     ///\n     /// let _ = thread::spawn(move || {\n     ///     let _lock = c_lock.write().unwrap();"}, {"sha": "2ab2c700a1bf16d4677c9370a36055063082beb9", "filename": "library/std/src/sys_common/poison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e85ce76d6630a8f87f81df2470e76fbe73de7d/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fpoison.rs?ref=81e85ce76d6630a8f87f81df2470e76fbe73de7d", "patch": "@@ -65,7 +65,7 @@ pub struct Guard {\n /// let mutex = Arc::new(Mutex::new(1));\n ///\n /// // poison the mutex\n-/// let c_mutex = mutex.clone();\n+/// let c_mutex = Arc::clone(&mutex);\n /// let _ = thread::spawn(move || {\n ///     let mut data = c_mutex.lock().unwrap();\n ///     *data = 2;\n@@ -168,7 +168,7 @@ impl<T> PoisonError<T> {\n     /// let mutex = Arc::new(Mutex::new(HashSet::new()));\n     ///\n     /// // poison the mutex\n-    /// let c_mutex = mutex.clone();\n+    /// let c_mutex = Arc::clone(&mutex);\n     /// let _ = thread::spawn(move || {\n     ///     let mut data = c_mutex.lock().unwrap();\n     ///     data.insert(10);"}]}