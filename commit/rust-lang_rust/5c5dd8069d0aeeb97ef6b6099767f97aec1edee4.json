{"sha": "5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWRkODA2OWQwYWVlYjk3ZWY2YjYwOTk3NjdmOTdhZWMxZWRlZTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T04:10:06Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T04:10:06Z"}, "message": "syntax: reformat passing of `FnHeader` to `parse_item_fn`.", "tree": {"sha": "bbd7f769f1e3fbab718a3a193b77d3e48ccf9dca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd7f769f1e3fbab718a3a193b77d3e48ccf9dca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "html_url": "https://github.com/rust-lang/rust/commit/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e04690440b6d77b4da9bfcf593a641133033ae44", "url": "https://api.github.com/repos/rust-lang/rust/commits/e04690440b6d77b4da9bfcf593a641133033ae44", "html_url": "https://github.com/rust-lang/rust/commit/e04690440b6d77b4da9bfcf593a641133033ae44"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "c00a5807d52c5d56a125715f45eace6b4adc33b8", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "patch": "@@ -122,12 +122,13 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n                 let fn_span = self.prev_span;\n-                return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n+                let header = FnHeader {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: opt_abi.unwrap_or(Abi::C),\n-                });\n+                };\n+                return self.parse_item_fn(lo, visibility, attrs, header);\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n                     self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs, extern_sp)?,\n@@ -154,12 +155,13 @@ impl<'a> Parser<'a> {\n                 // CONST FUNCTION ITEM\n                 let unsafety = self.parse_unsafety();\n                 self.bump();\n-                return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n+                let header = FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n                     constness: respan(const_span, Constness::Const),\n                     abi: Abi::Rust,\n-                });\n+                };\n+                return self.parse_item_fn(lo, visibility, attrs, header);\n             }\n \n             // CONST ITEM\n@@ -196,14 +198,14 @@ impl<'a> Parser<'a> {\n                     closure_id: DUMMY_NODE_ID,\n                     return_impl_trait_id: DUMMY_NODE_ID,\n                 });\n-                let item = self.parse_item_fn(lo, visibility, attrs, FnHeader {\n+                self.ban_async_in_2015(async_span);\n+                let header = FnHeader {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: Abi::Rust,\n-                })?;\n-                self.ban_async_in_2015(async_span);\n-                return Ok(item);\n+                };\n+                return self.parse_item_fn(lo, visibility, attrs, header);\n             }\n         }\n         if self.check_keyword(kw::Unsafe) &&\n@@ -241,12 +243,13 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let fn_span = self.prev_span;\n-            return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n+            let header = FnHeader {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi: Abi::Rust,\n-            });\n+            };\n+            return self.parse_item_fn(lo, visibility, attrs, header);\n         }\n         if self.check_keyword(kw::Unsafe)\n             && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace)) {\n@@ -261,12 +264,13 @@ impl<'a> Parser<'a> {\n             };\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n-            return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n+            let header = FnHeader {\n                 unsafety: Unsafety::Unsafe,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi,\n-            });\n+            };\n+            return self.parse_item_fn(lo, visibility, attrs, header);\n         }\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM"}, {"sha": "7633825eb32ab167f1ee6894bb66ab3edeef10ad", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5dd8069d0aeeb97ef6b6099767f97aec1edee4/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=5c5dd8069d0aeeb97ef6b6099767f97aec1edee4", "patch": "@@ -10,18 +10,18 @@ error[E0670]: `async fn` is not permitted in the 2015 edition\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n-   |\n-LL |     async fn bar() {}\n-   |     ^^^^^\n-\n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^\n \n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n+   |\n+LL |     async fn bar() {}\n+   |     ^^^^^\n+\n error[E0670]: `async fn` is not permitted in the 2015 edition\n   --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |"}]}