{"sha": "735607c1f91a44cc2228bd34e0a9e588cef11230", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTYwN2MxZjkxYTQ0Y2MyMjI4YmQzNGUwYTllNTg4Y2VmMTEyMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-30T11:12:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-30T11:12:55Z"}, "message": "Auto merge of #3588 - detrumi:tuple_struct_use_self, r=phansch\n\n`use_self` for tuple structs\n\nFixes #3498", "tree": {"sha": "8d1b417602da8c6d9ebfc7c0c0dd8a161ef94ac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1b417602da8c6d9ebfc7c0c0dd8a161ef94ac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735607c1f91a44cc2228bd34e0a9e588cef11230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735607c1f91a44cc2228bd34e0a9e588cef11230", "html_url": "https://github.com/rust-lang/rust/commit/735607c1f91a44cc2228bd34e0a9e588cef11230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735607c1f91a44cc2228bd34e0a9e588cef11230/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee138a7cf4a483282ffdf5d53ed5856b3bd16a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee138a7cf4a483282ffdf5d53ed5856b3bd16a1", "html_url": "https://github.com/rust-lang/rust/commit/aee138a7cf4a483282ffdf5d53ed5856b3bd16a1"}, {"sha": "259ec2dc0eb3945855fd58b0d549135f6a81884a", "url": "https://api.github.com/repos/rust-lang/rust/commits/259ec2dc0eb3945855fd58b0d549135f6a81884a", "html_url": "https://github.com/rust-lang/rust/commit/259ec2dc0eb3945855fd58b0d549135f6a81884a"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "b031e8b1c44481a02addc0ea2090e21ece53290c", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/735607c1f91a44cc2228bd34e0a9e588cef11230/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735607c1f91a44cc2228bd34e0a9e588cef11230/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=735607c1f91a44cc2228bd34e0a9e588cef11230", "patch": "@@ -9,6 +9,7 @@\n \n use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::def::{CtorKind, Def};\n use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -25,7 +26,10 @@ use syntax_pos::symbol::keywords::SelfUpper;\n /// name\n /// feels inconsistent.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:**\n+/// - False positive when using associated types (#2843)\n+/// - False positives in some situations when using generics (#3410)\n+/// - False positive when type from outer function can't be used (#3463)\n ///\n /// **Example:**\n /// ```rust\n@@ -226,10 +230,15 @@ struct UseSelfVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n-        if self.item_path.def == path.def && path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n-            span_use_self_lint(self.cx, path);\n+        if path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n+            if self.item_path.def == path.def {\n+                span_use_self_lint(self.cx, path);\n+            } else if let Def::StructCtor(ctor_did, CtorKind::Fn) = path.def {\n+                if self.item_path.def.opt_def_id() == self.cx.tcx.parent_def_id(ctor_did) {\n+                    span_use_self_lint(self.cx, path);\n+                }\n+            }\n         }\n-\n         walk_path(self, path);\n     }\n "}, {"sha": "b201e160ebd93e2ac2555372f82442c84afd60f2", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/735607c1f91a44cc2228bd34e0a9e588cef11230/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735607c1f91a44cc2228bd34e0a9e588cef11230/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=735607c1f91a44cc2228bd34e0a9e588cef11230", "patch": "@@ -51,8 +51,6 @@ mod better {\n     }\n }\n \n-//todo the lint does not handle lifetimed struct\n-//the following module should trigger the lint on the third method only\n mod lifetimes {\n     struct Foo<'a> {\n         foo_str: &'a str,\n@@ -69,7 +67,8 @@ mod lifetimes {\n             Foo { foo_str: \"foo\" }\n         }\n \n-        // `Self` is applicable here\n+        // FIXME: the lint does not handle lifetimed struct\n+        // `Self` should be applicable here\n         fn clone(&self) -> Foo<'a> {\n             Foo { foo_str: self.foo_str }\n         }\n@@ -217,6 +216,16 @@ mod existential {\n     }\n }\n \n+mod tuple_structs {\n+    pub struct TS(i32);\n+\n+    impl TS {\n+        pub fn ts() -> Self {\n+            TS(0)\n+        }\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;"}, {"sha": "d52fce76de598f54a60561299f2ad20463a1b073", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/735607c1f91a44cc2228bd34e0a9e588cef11230/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/735607c1f91a44cc2228bd34e0a9e588cef11230/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=735607c1f91a44cc2228bd34e0a9e588cef11230", "patch": "@@ -37,94 +37,100 @@ LL |             Foo::new()\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:96:22\n+  --> $DIR/use_self.rs:95:22\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:96:31\n+  --> $DIR/use_self.rs:95:31\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                               ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:37\n+  --> $DIR/use_self.rs:99:37\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:53\n+  --> $DIR/use_self.rs:99:53\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:104:30\n+  --> $DIR/use_self.rs:103:30\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:104:43\n+  --> $DIR/use_self.rs:103:43\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:28\n+  --> $DIR/use_self.rs:107:28\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:46\n+  --> $DIR/use_self.rs:107:46\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:110:20\n+  --> $DIR/use_self.rs:109:20\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:110:28\n+  --> $DIR/use_self.rs:109:28\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:111:13\n+  --> $DIR/use_self.rs:110:13\n    |\n LL |             Bad::default()\n    |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:116:23\n+  --> $DIR/use_self.rs:115:23\n    |\n LL |         type Output = Bad;\n    |                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:118:27\n+  --> $DIR/use_self.rs:117:27\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:118:35\n+  --> $DIR/use_self.rs:117:35\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                                   ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:210:56\n+  --> $DIR/use_self.rs:209:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 21 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:224:13\n+   |\n+LL |             TS(0)\n+   |             ^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 22 previous errors\n "}]}