{"sha": "9b907032891712c21ef9c8ff20c46cd2b20fcf30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTA3MDMyODkxNzEyYzIxZWY5YzhmZjIwYzQ2Y2QyYjIwZmNmMzA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-22T18:32:45Z"}, "message": "Add support for sanitizer recovery", "tree": {"sha": "356729cea279c0c86f2b3389ed9ca473057d3a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356729cea279c0c86f2b3389ed9ca473057d3a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b907032891712c21ef9c8ff20c46cd2b20fcf30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b907032891712c21ef9c8ff20c46cd2b20fcf30", "html_url": "https://github.com/rust-lang/rust/commit/9b907032891712c21ef9c8ff20c46cd2b20fcf30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b907032891712c21ef9c8ff20c46cd2b20fcf30/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317f68ab10c04719d54265f92784618afed914b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/317f68ab10c04719d54265f92784618afed914b6", "html_url": "https://github.com/rust-lang/rust/commit/317f68ab10c04719d54265f92784618afed914b6"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "afcbafd8a0092e01c0d7b0a5cfc5e91a6b5d5c2f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9b907032891712c21ef9c8ff20c46cd2b20fcf30", "patch": "@@ -43,14 +43,27 @@ pub struct Config {\n     pub usize_ty: UintTy,\n }\n \n-#[derive(Clone, Hash, Debug)]\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Sanitizer {\n     Address,\n     Leak,\n     Memory,\n     Thread,\n }\n \n+impl FromStr for Sanitizer {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Sanitizer, ()> {\n+        match s {\n+            \"address\" => Ok(Sanitizer::Address),\n+            \"leak\" => Ok(Sanitizer::Leak),\n+            \"memory\" => Ok(Sanitizer::Memory),\n+            \"thread\" => Ok(Sanitizer::Thread),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n pub enum OptLevel {\n     No,         // -O0\n@@ -819,6 +832,8 @@ macro_rules! options {\n             Some(\"one of: `full`, `partial`, or `off`\");\n         pub const parse_sanitizer: Option<&str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n+        pub const parse_sanitizer_list: Option<&str> =\n+            Some(\"comma separated list of sanitizers\");\n         pub const parse_linker_flavor: Option<&str> =\n             Some(::rustc_target::spec::LinkerFlavor::one_of());\n         pub const parse_optimization_fuel: Option<&str> =\n@@ -1013,15 +1028,30 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n-            match v {\n-                Some(\"address\") => *slote = Some(Sanitizer::Address),\n-                Some(\"leak\") => *slote = Some(Sanitizer::Leak),\n-                Some(\"memory\") => *slote = Some(Sanitizer::Memory),\n-                Some(\"thread\") => *slote = Some(Sanitizer::Thread),\n-                _ => return false,\n+        fn parse_sanitizer(slot: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n+            if let Some(Ok(s)) =  v.map(str::parse) {\n+                *slot = Some(s);\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        fn parse_sanitizer_list(slot: &mut Vec<Sanitizer>, v: Option<&str>) -> bool {\n+            if let Some(v) = v {\n+                for s in v.split(',').map(str::parse) {\n+                    if let Ok(s) = s {\n+                        if !slot.contains(&s) {\n+                            slot.push(s);\n+                        }\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+                true\n+            } else {\n+                false\n             }\n-            true\n         }\n \n         fn parse_linker_flavor(slote: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n@@ -1379,6 +1409,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"pass `-install_name @rpath/...` to the macOS linker\"),\n     sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [TRACKED],\n                                     \"use a sanitizer\"),\n+    sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n+        \"Enable recovery for selected sanitizers\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n         \"set the optimization fuel quota for a crate\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -2984,6 +3016,7 @@ mod dep_tracking {\n         Option<cstore::NativeLibraryKind>\n     ));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n+    impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where"}, {"sha": "1b94cc605a58bca5a42a2aa6207e47fdcaf7127e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=9b907032891712c21ef9c8ff20c46cd2b20fcf30", "patch": "@@ -364,17 +364,16 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             }\n \n             if let Some(sanitizer) = &config.sanitizer {\n+                let recover = config.sanitizer_recover.contains(sanitizer);\n                 match sanitizer {\n                     Sanitizer::Address => {\n-                        let recover = false;\n                         extra_passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(\n                                 recover));\n                         extra_passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(\n                                 recover));\n                     }\n                     Sanitizer::Memory => {\n                         let track_origins = 0;\n-                        let recover = false;\n                         extra_passes.push(llvm::LLVMRustCreateMemorySanitizerPass(\n                                 track_origins, recover));\n                     }"}, {"sha": "f80869132c006ce755589c656275006f2b148146", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=9b907032891712c21ef9c8ff20c46cd2b20fcf30", "patch": "@@ -60,6 +60,7 @@ pub struct ModuleConfig {\n     pub pgo_use: Option<PathBuf>,\n \n     pub sanitizer: Option<Sanitizer>,\n+    pub sanitizer_recover: Vec<Sanitizer>,\n \n     // Flags indicating which outputs to produce.\n     pub emit_pre_lto_bc: bool,\n@@ -100,6 +101,7 @@ impl ModuleConfig {\n             pgo_use: None,\n \n             sanitizer: None,\n+            sanitizer_recover: Default::default(),\n \n             emit_no_opt_bc: false,\n             emit_pre_lto_bc: false,\n@@ -356,6 +358,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     modules_config.pgo_gen = sess.opts.cg.profile_generate.clone();\n     modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n     modules_config.sanitizer = sess.opts.debugging_opts.sanitizer.clone();\n+    modules_config.sanitizer_recover = sess.opts.debugging_opts.sanitizer_recover.clone();\n     modules_config.opt_level = Some(sess.opts.optimize);\n     modules_config.opt_size = Some(sess.opts.optimize);\n "}, {"sha": "a292332667b54260d8148a312fd0d6494a0cc7c2", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b907032891712c21ef9c8ff20c46cd2b20fcf30/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=9b907032891712c21ef9c8ff20c46cd2b20fcf30", "patch": "@@ -0,0 +1,34 @@\n+// Verifies that AddressSanitizer and MemorySanitizer\n+// recovery mode can be enabled with -Zsanitizer-recover.\n+//\n+// needs-sanitizer-support\n+// only-linux\n+// only-x86_64\n+// revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER\n+//\n+//[ASAN]         compile-flags: -Zsanitizer=address\n+//[ASAN-RECOVER] compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n+//[MSAN]         compile-flags: -Zsanitizer=memory\n+//[MSAN-RECOVER] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n+\n+#![crate_type=\"lib\"]\n+\n+// ASAN-LABEL:         define i32 @penguin(\n+// ASAN-RECOVER-LABEL: define i32 @penguin(\n+// MSAN-LABEL:         define i32 @penguin(\n+// MSAN-RECOVER-LABEL: define i32 @penguin(\n+#[no_mangle]\n+pub fn penguin(p: &mut i32) -> i32 {\n+    // ASAN:             call void @__asan_report_load4(i64 %0)\n+    // ASAN:             unreachable\n+    //\n+    // ASAN-RECOVER:     call void @__asan_report_load4_noabort(\n+    // ASAN-RECOVER-NOT: unreachable\n+    //\n+    // MSAN:             call void @__msan_warning_noreturn()\n+    // MSAN:             unreachable\n+    //\n+    // MSAN-RECOVER:     call void @__msan_warning()\n+    // MSAN-RECOVER-NOT: unreachable\n+    *p\n+}"}]}