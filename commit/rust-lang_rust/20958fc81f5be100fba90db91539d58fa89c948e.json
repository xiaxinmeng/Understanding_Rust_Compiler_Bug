{"sha": "20958fc81f5be100fba90db91539d58fa89c948e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTU4ZmM4MWY1YmUxMDBmYmE5MGRiOTE1MzlkNThmYTg5Yzk0OGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T02:18:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-21T02:18:27Z"}, "message": "Auto merge of #58902 - matthewjasper:generator-cleanup-blocks, r=davidtwco\n\nFixes for the generator transform\n\n* Moves cleanup annotations in pretty printed MIR so that they can be tested\n* Correctly determines which drops are in cleanup blocks when elaborating generator drops\n* Use the correct state for poisoning a generator\n\nCloses #58892", "tree": {"sha": "ac40e144abce754fe4d080d6d6687c20cbb1c183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac40e144abce754fe4d080d6d6687c20cbb1c183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20958fc81f5be100fba90db91539d58fa89c948e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20958fc81f5be100fba90db91539d58fa89c948e", "html_url": "https://github.com/rust-lang/rust/commit/20958fc81f5be100fba90db91539d58fa89c948e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20958fc81f5be100fba90db91539d58fa89c948e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b3b136c50700b1f2df9b00259ae98c79f72abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b3b136c50700b1f2df9b00259ae98c79f72abb", "html_url": "https://github.com/rust-lang/rust/commit/33b3b136c50700b1f2df9b00259ae98c79f72abb"}, {"sha": "5e68c5708792a945b9e1dc5b2b0299fec629a509", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e68c5708792a945b9e1dc5b2b0299fec629a509", "html_url": "https://github.com/rust-lang/rust/commit/5e68c5708792a945b9e1dc5b2b0299fec629a509"}], "stats": {"total": 189, "additions": 129, "deletions": 60}, "files": [{"sha": "b22258a49b24b6f7216bb8b4740b0ff3ca5f8572", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -26,7 +26,7 @@\n //!     }\n //!\n //! This pass computes the meaning of the state field and the MIR locals which are live\n-//! across a suspension point. There are however two hardcoded generator states:\n+//! across a suspension point. There are however three hardcoded generator states:\n //!     0 - Generator have not been resumed yet\n //!     1 - Generator has returned / is completed\n //!     2 - Generator has been poisoned\n@@ -144,6 +144,13 @@ fn self_arg() -> Local {\n     Local::new(1)\n }\n \n+/// Generator have not been resumed yet\n+const UNRESUMED: u32 = 0;\n+/// Generator has returned / is completed\n+const RETURNED: u32 = 1;\n+/// Generator has been poisoned\n+const POISONED: u32 = 2;\n+\n struct SuspensionPoint {\n     state: u32,\n     resume: BasicBlock,\n@@ -278,7 +285,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n \n                 state\n             } else { // Return\n-                 1 // state for returned\n+                RETURNED // state for returned\n             };\n             data.statements.push(self.set_state(state, source_info));\n             data.terminator.as_mut().unwrap().kind = TerminatorKind::Return;\n@@ -590,8 +597,15 @@ fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_env = tcx.param_env(def_id);\n     let gen = self_arg();\n \n-    for block in mir.basic_blocks().indices() {\n-        let (target, unwind, source_info) = match mir.basic_blocks()[block].terminator() {\n+    let mut elaborator = DropShimElaborator {\n+        mir: mir,\n+        patch: MirPatch::new(mir),\n+        tcx,\n+        param_env\n+    };\n+\n+    for (block, block_data) in mir.basic_blocks().iter_enumerated() {\n+        let (target, unwind, source_info) = match block_data.terminator() {\n             &Terminator {\n                 source_info,\n                 kind: TerminatorKind::Drop {\n@@ -602,31 +616,22 @@ fn elaborate_generator_drops<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             } if local == gen => (target, unwind, source_info),\n             _ => continue,\n         };\n-        let unwind = if let Some(unwind) = unwind {\n-            Unwind::To(unwind)\n-        } else {\n+        let unwind = if block_data.is_cleanup {\n             Unwind::InCleanup\n+        } else {\n+            Unwind::To(unwind.unwrap_or_else(|| elaborator.patch.resume_block()))\n         };\n-        let patch = {\n-            let mut elaborator = DropShimElaborator {\n-                mir: &mir,\n-                patch: MirPatch::new(mir),\n-                tcx,\n-                param_env\n-            };\n-            elaborate_drop(\n-                &mut elaborator,\n-                source_info,\n-                &Place::Base(PlaceBase::Local(gen)),\n-                (),\n-                target,\n-                unwind,\n-                block\n-            );\n-            elaborator.patch\n-        };\n-        patch.apply(mir);\n+        elaborate_drop(\n+            &mut elaborator,\n+            source_info,\n+            &Place::Base(PlaceBase::Local(gen)),\n+            (),\n+            target,\n+            unwind,\n+            block,\n+        );\n     }\n+    elaborator.patch.apply(mir);\n }\n \n fn create_generator_drop_shim<'a, 'tcx>(\n@@ -643,10 +648,10 @@ fn create_generator_drop_shim<'a, 'tcx>(\n \n     let mut cases = create_cases(&mut mir, transform, |point| point.drop);\n \n-    cases.insert(0, (0, drop_clean));\n+    cases.insert(0, (UNRESUMED, drop_clean));\n \n-    // The returned state (1) and the poisoned state (2) falls through to\n-    // the default case which is just to return\n+    // The returned state and the poisoned state fall through to the default\n+    // case which is just to return\n \n     insert_switch(tcx, &mut mir, cases, &transform, TerminatorKind::Return);\n \n@@ -762,7 +767,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n     for block in mir.basic_blocks_mut() {\n         let source_info = block.terminator().source_info;\n         if let &TerminatorKind::Resume = &block.terminator().kind {\n-            block.statements.push(transform.set_state(1, source_info));\n+            block.statements.push(transform.set_state(POISONED, source_info));\n         }\n     }\n \n@@ -773,12 +778,12 @@ fn create_generator_resume_function<'a, 'tcx>(\n         GeneratorResumedAfterReturn,\n     };\n \n-    // Jump to the entry point on the 0 state\n-    cases.insert(0, (0, BasicBlock::new(0)));\n-    // Panic when resumed on the returned (1) state\n-    cases.insert(1, (1, insert_panic_block(tcx, mir, GeneratorResumedAfterReturn)));\n-    // Panic when resumed on the poisoned (2) state\n-    cases.insert(2, (2, insert_panic_block(tcx, mir, GeneratorResumedAfterPanic)));\n+    // Jump to the entry point on the unresumed\n+    cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n+    // Panic when resumed on the returned state\n+    cases.insert(1, (RETURNED, insert_panic_block(tcx, mir, GeneratorResumedAfterReturn)));\n+    // Panic when resumed on the poisoned state\n+    cases.insert(2, (POISONED, insert_panic_block(tcx, mir, GeneratorResumedAfterPanic)));\n \n     insert_switch(tcx, mir, cases, &transform, TerminatorKind::Unreachable);\n \n@@ -942,7 +947,7 @@ impl MirPass for StateTransform {\n         mir.generator_layout = Some(layout);\n \n         // Insert `drop(generator_struct)` which is used to drop upvars for generators in\n-        // the unresumed (0) state.\n+        // the unresumed state.\n         // This is expanded to a drop ladder in `elaborate_generator_drops`.\n         let drop_clean = insert_clean_drop(mir);\n "}, {"sha": "13bcdc26a5efb43f512ee031362e2f065d46c38c", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -317,9 +317,8 @@ where\n     let data = &mir[block];\n \n     // Basic block label at the top.\n-    let cleanup_text = if data.is_cleanup { \" // cleanup\" } else { \"\" };\n-    let lbl = format!(\"{}{:?}: {{\", INDENT, block);\n-    writeln!(w, \"{0:1$}{2}\", lbl, ALIGN, cleanup_text)?;\n+    let cleanup_text = if data.is_cleanup { \" (cleanup)\" } else { \"\" };\n+    writeln!(w, \"{}{:?}{}: {{\", INDENT, block, cleanup_text)?;\n \n     // List of statements in the middle.\n     let mut current_location = Location {"}, {"sha": "c771013f72814b8210d47585a16f9a5fe17319b1", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -48,7 +48,7 @@ fn main() {\n //        drop(_6) -> [return: bb6, unwind: bb4];\n //    }\n //    ...\n-//    bb5: {\n+//    bb5 (cleanup): {\n //        drop(_6) -> bb4;\n //    }\n // END rustc.main.SimplifyCfg-initial.after.mir"}, {"sha": "14d302f0eea72a9899df5899bd9a9e1654469f14", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -38,7 +38,7 @@ impl Drop for S {\n //         (*_2) = const S::new() -> [return: bb2, unwind: bb3];\n //     }\n //\n-//     bb1: {\n+//     bb1 (cleanup): {\n //         resume;\n //     }\n //\n@@ -47,7 +47,7 @@ impl Drop for S {\n //         drop(_2) -> bb4;\n //     }\n //\n-//     bb3: {\n+//     bb3 (cleanup): {\n //         drop(_2) -> bb1;\n //     }\n //\n@@ -62,11 +62,11 @@ impl Drop for S {\n //         drop(_4) -> [return: bb8, unwind: bb6];\n //     }\n //\n-//     bb6: {\n+//     bb6 (cleanup): {\n //         drop(_1) -> bb1;\n //     }\n //\n-//     bb7: {\n+//     bb7 (cleanup): {\n //         drop(_4) -> bb6;\n //     }\n //"}, {"sha": "48398691271baa69536ebd6e3d5eae3fd636318a", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -0,0 +1,43 @@\n+#![feature(generators, generator_trait)]\n+\n+// Regression test for #58892, generator drop shims should not have blocks\n+// spuriously marked as cleanup\n+\n+fn main() {\n+    let gen = || {\n+        yield;\n+    };\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.main-{{closure}}.generator_drop.0.mir\n+// bb0: {\n+//     switchInt(((*_1).0: u32)) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n+// }\n+// bb1: {\n+//     goto -> bb5;\n+// }\n+// bb2: {\n+//     return;\n+// }\n+// bb3: {\n+//     return;\n+// }\n+// bb4: {\n+//     goto -> bb6;\n+// }\n+// bb5: {\n+//     goto -> bb2;\n+// }\n+// bb6: {\n+//     goto -> bb3;\n+// }\n+// bb7: {\n+//     StorageLive(_3);\n+//     goto -> bb1;\n+// }\n+// bb8: {\n+//     return;\n+// }\n+// END rustc.main-{{closure}}.generator_drop.0.mir"}, {"sha": "047e623941b71835e2f9eceda95da670b3b02c7b", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -18,7 +18,7 @@ fn main() {\n //         FakeRead(ForLet, _1);\n //         goto -> bb2;\n //     }\n-//     bb1: {\n+//     bb1 (cleanup): {\n //         resume;\n //     }\n //     bb2: {"}, {"sha": "5f4f4ab82af24a027d931f4289b31e7c9a4b0154", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -43,7 +43,7 @@ fn main() {\n //         FakeRead(ForMatchedPlace, _3);\n //         switchInt(_3) -> [false: bb9, otherwise: bb8];\n //     }\n-//     bb4: {\n+//     bb4 (cleanup): {\n //         resume;\n //     }\n //     bb5: {"}, {"sha": "34891ee70b5c6c3d45f07e7a61be8003dac03cd4", "filename": "src/test/mir-opt/loop_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Floop_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Floop_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -18,7 +18,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //    ...\n-//    bb1: { // The cleanup block\n+//    bb1 (cleanup): {\n //        resume;\n //    }\n //    ..."}, {"sha": "0cbf048697aac3bbf792a9003c752747ebfd81ec", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -47,7 +47,7 @@ fn main() {\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [0isize: bb4, 1isize: bb2, otherwise: bb7];\n //  }\n-//  bb1: {\n+//  bb1 (cleanup): {\n //      resume;\n //  }\n //  bb2: {\n@@ -116,7 +116,7 @@ fn main() {\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [0isize: bb3, 1isize: bb2, otherwise: bb7];\n //  }\n-//  bb1: {\n+//  bb1 (cleanup): {\n //      resume;\n //  }\n //  bb2: {\n@@ -185,7 +185,7 @@ fn main() {\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [1isize: bb2, otherwise: bb3];\n //  }\n-//  bb1: {\n+//  bb1 (cleanup): {\n //      resume;\n //  }\n //  bb2: {"}, {"sha": "167a6eb349eb2f5e626a5104902c4b65ebc6c720", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -38,14 +38,14 @@ impl Drop for Droppy {\n //         _6 = move (_1.0: Aligned);\n //         drop(_6) -> [return: bb4, unwind: bb3];\n //     }\n-//     bb1: {\n+//     bb1 (cleanup): {\n //         resume;\n //     }\n //     bb2: {\n //         StorageDead(_1);\n //         return;\n //     }\n-//     bb3: {\n+//     bb3 (cleanup): {\n //         (_1.0: Aligned) = move _4;\n //         drop(_1) -> bb1;\n //     }"}, {"sha": "144348450a91b5aa34edce9ca7980e2d5afee8b7", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -63,7 +63,7 @@ fn main() {\n //     StorageDead(_8);\n //     return;\n // }\n-// bb10: {\n+// bb10 (cleanup): {\n //     resume;\n // }\n // END rustc.match_guard.CleanupNonCodegenStatements.before.mir\n@@ -114,7 +114,7 @@ fn main() {\n //     StorageDead(_8);\n //     return;\n // }\n-// bb10: {\n+// bb10 (cleanup): {\n //     resume;\n // }\n // END rustc.match_guard.CleanupNonCodegenStatements.after.mir"}, {"sha": "ef41373d774e319e52a8e6fa770b56c7be054781", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -29,7 +29,7 @@ fn main() {\n //     _0 = const 2i32;\n //     return;\n // }\n-// bb1: {\n+// bb1 (cleanup): {\n //     resume;\n // }\n // END rustc.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir\n@@ -39,7 +39,7 @@ fn main() {\n //     _0 = const 5isize;\n //     return;\n // }\n-// bb1: {\n+// bb1 (cleanup): {\n //     resume;\n // }\n // END rustc.E-V-{{constant}}.mir_map.0.mir\n@@ -51,16 +51,16 @@ fn main() {\n // bb1: {\n //     return;\n // }\n-// bb2: {\n+// bb2 (cleanup): {\n //     resume;\n // }\n // bb3: {\n //     goto -> bb1;\n // }\n-// bb4: {\n+// bb4 (cleanup): {\n //     goto -> bb2;\n // }\n-// bb5: {\n+// bb5 (cleanup): {\n //     drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb4;\n // }\n // bb6: {"}, {"sha": "910b4903bf6a36225e98e46538f17223ded00d82", "filename": "src/test/run-fail/generator-resume-after-panic.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20958fc81f5be100fba90db91539d58fa89c948e/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs?ref=20958fc81f5be100fba90db91539d58fa89c948e", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern:generator resumed after panicking\n+\n+// Test that we get the correct message for resuming a panicked generator.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    ops::Generator,\n+    pin::Pin,\n+    panic,\n+};\n+\n+fn main() {\n+    let mut g = || {\n+        panic!();\n+        yield;\n+    };\n+    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        let x = Pin::new(&mut g).resume();\n+    }));\n+    Pin::new(&mut g).resume();\n+}"}]}