{"sha": "c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODRkMGVkN2QxZGNhZDk5ZDUyM2NiODJkN2ZjNzhjNmQ3NmE4YzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T22:25:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T22:25:58Z"}, "message": "review comments", "tree": {"sha": "f9b0d3e109c08a7ab62812b6f6e7a64b8ef35181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b0d3e109c08a7ab62812b6f6e7a64b8ef35181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6", "html_url": "https://github.com/rust-lang/rust/commit/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4117c6d33c572579081adcdf70dce29b25f9db15", "url": "https://api.github.com/repos/rust-lang/rust/commits/4117c6d33c572579081adcdf70dce29b25f9db15", "html_url": "https://github.com/rust-lang/rust/commit/4117c6d33c572579081adcdf70dce29b25f9db15"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "1a2393be806d55d037f2faef1ef558bcb0fe142b", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=c084d0ed7d1dcad99d523cb82d7fc78c6d76a8c6", "patch": "@@ -274,14 +274,13 @@ impl<'a> Parser<'a> {\n             self.bump(); // (\n             let sp = lo.to(self.span);\n             self.bump(); // )\n-            let mut err = self.struct_span_err(sp, \"incorrect use of `await`\");\n-            err.span_suggestion(\n-                sp,\n-                \"`await` is not a method call, remove the parentheses\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n-            err.emit()\n+            self.struct_span_err(sp, \"incorrect use of `await`\")\n+                .span_suggestion(\n+                    sp,\n+                    \"`await` is not a method call, remove the parentheses\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                ).emit()\n         }\n     }\n \n@@ -327,12 +326,12 @@ impl<'a> Parser<'a> {\n                 );\n             } else {\n                 err.note(\"type ascription is a nightly-only feature that lets \\\n-                          you annotate an expression with a type: `<expr>: <type>`\");\n-                err.span_note(\n-                    lhs_span,\n-                    \"this expression expects an ascribed type after the colon\",\n-                );\n-                err.help(\"this might be indicative of a syntax error elsewhere\");\n+                          you annotate an expression with a type: `<expr>: <type>`\")\n+                    .span_note(\n+                        lhs_span,\n+                        \"this expression expects an ascribed type after the colon\",\n+                    )\n+                    .help(\"this might be indicative of a syntax error elsewhere\");\n             }\n         }\n     }\n@@ -409,10 +408,10 @@ impl<'a> Parser<'a> {\n         if self.token.is_keyword(keywords::Pub) {\n             match self.parse_visibility(false) {\n                 Ok(vis) => {\n-                    let mut err = self.diagnostic()\n-                        .struct_span_err(vis.span, \"unnecessary visibility qualifier\");\n-                    err.span_label(vis.span, \"`pub` not permitted here\");\n-                    err.emit();\n+                    self.diagnostic()\n+                        .struct_span_err(vis.span, \"unnecessary visibility qualifier\")\n+                        .span_label(vis.span, \"`pub` not permitted here\")\n+                        .emit();\n                 }\n                 Err(mut err) => err.emit(),\n             }\n@@ -488,15 +487,12 @@ impl<'a> Parser<'a> {\n                         break;\n                     }\n                 }\n-                token::Comma => {\n-                    if break_on_semi == SemiColonMode::Comma &&\n+                token::Comma if break_on_semi == SemiColonMode::Comma &&\n                        brace_depth == 0 &&\n-                       bracket_depth == 0 {\n-                        debug!(\"recover_stmt_ return - Semi\");\n-                        break;\n-                    } else {\n-                        self.bump();\n-                    }\n+                       bracket_depth == 0 =>\n+                {\n+                    debug!(\"recover_stmt_ return - Semi\");\n+                    break;\n                 }\n                 _ => {\n                     self.bump()"}]}