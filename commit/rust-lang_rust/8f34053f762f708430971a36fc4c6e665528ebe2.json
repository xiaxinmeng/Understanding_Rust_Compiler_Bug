{"sha": "8f34053f762f708430971a36fc4c6e665528ebe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzQwNTNmNzYyZjcwODQzMDk3MWEzNmZjNGM2ZTY2NTUyOGViZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-26T15:07:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-26T15:07:42Z"}, "message": "Auto merge of #32508 - Manishearth:rollup, r=Manishearth\n\nRollup of 6 pull requests\n\n- Successful merges: #32383, #32387, #32440, #32470, #32478, #32492\n- Failed merges:", "tree": {"sha": "8d8a88c8131f641134cfb087f40c564792b50433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8a88c8131f641134cfb087f40c564792b50433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f34053f762f708430971a36fc4c6e665528ebe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f34053f762f708430971a36fc4c6e665528ebe2", "html_url": "https://github.com/rust-lang/rust/commit/8f34053f762f708430971a36fc4c6e665528ebe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f34053f762f708430971a36fc4c6e665528ebe2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346d0d5175e7b236a7e3f41fd992afc61f148442", "url": "https://api.github.com/repos/rust-lang/rust/commits/346d0d5175e7b236a7e3f41fd992afc61f148442", "html_url": "https://github.com/rust-lang/rust/commit/346d0d5175e7b236a7e3f41fd992afc61f148442"}, {"sha": "90f2b69cddc92c8b3ff3a51f261d441a58b706bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f2b69cddc92c8b3ff3a51f261d441a58b706bd", "html_url": "https://github.com/rust-lang/rust/commit/90f2b69cddc92c8b3ff3a51f261d441a58b706bd"}], "stats": {"total": 201, "additions": 63, "deletions": 138}, "files": [{"sha": "f5ebceedd363a9c77fb071788638253fee0a2f84", "filename": "src/doc/book/strings.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fdoc%2Fbook%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fdoc%2Fbook%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstrings.md?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -44,6 +44,11 @@ let s = \"foo\\\n assert_eq!(\"foobar\", s);\n ```\n \n+Note that you normally cannot access a `str` directly, but only through a `&str`\n+reference. This is because `str` is an unsized type which requires additional\n+runtime information to be usable. For more information see the chapter on\n+[unsized types][ut].\n+\n Rust has more than only `&str`s though. A `String` is a heap-allocated string.\n This string is growable, and is also guaranteed to be UTF-8. `String`s are\n commonly created by converting from a string slice using the `to_string`\n@@ -185,5 +190,6 @@ let hello_world = hello + &world;\n This is because `&String` can automatically coerce to a `&str`. This is a\n feature called \u2018[`Deref` coercions][dc]\u2019.\n \n+[ut]: unsized-types.html\n [dc]: deref-coercions.html\n [connect]: ../std/net/struct.TcpStream.html#method.connect"}, {"sha": "fcf9aefaba8474920178eac36f51f7adc8ad48fe", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -3911,6 +3911,9 @@ The _heap_ is a general term that describes boxes.  The lifetime of an\n allocation in the heap depends on the lifetime of the box values pointing to\n it. Since box values may themselves be passed in and out of frames, or stored\n in the heap, heap allocations may outlive the frame they are allocated within.\n+An allocation in the heap is guaranteed to reside at a single location in the\n+heap for the whole lifetime of the allocation - it will never be relocated as\n+a result of moving a box value.\n \n ### Memory ownership\n "}, {"sha": "cde7094cec41e1cd795dab7bc7fc37a59d8aa897", "filename": "src/etc/CONFIGS.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fetc%2FCONFIGS.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Fetc%2FCONFIGS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FCONFIGS.md?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -10,7 +10,3 @@ These are some links to repos with configs which ease the use of rust.\n * [kate-config](https://github.com/rust-lang/kate-config)\n * [nano-config](https://github.com/rust-lang/nano-config)\n * [zsh-config](https://github.com/rust-lang/zsh-config)\n-\n-## Community-maintained Configs\n-\n-* [.editorconfig](https://gist.github.com/derhuerst/c9d1b9309e308d9851fa) ([what is this?](http://editorconfig.org/))"}, {"sha": "7b9296bb4c893ff2fc6f5efba19c9b9017de2f4e", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 48, "deletions": 132, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -153,14 +153,9 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let d = '1';\n-    ///\n-    /// assert!(d.is_digit(10));\n-    ///\n-    /// let d = 'f';\n-    ///\n-    /// assert!(d.is_digit(16));\n-    /// assert!(!d.is_digit(10));\n+    /// assert!('1'.is_digit(10));\n+    /// assert!('f'.is_digit(16));\n+    /// assert!(!'f'.is_digit(10));\n     /// ```\n     ///\n     /// Passing a large radix, causing a panic:\n@@ -169,10 +164,8 @@ impl char {\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n-    ///     let d = '1';\n-    ///\n     ///     // this panics\n-    ///     d.is_digit(37);\n+    ///     '1'.is_digit(37);\n     /// }).join();\n     ///\n     /// assert!(result.is_err());\n@@ -209,25 +202,15 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let d = '1';\n-    ///\n-    /// assert_eq!(d.to_digit(10), Some(1));\n-    ///\n-    /// let d = 'f';\n-    ///\n-    /// assert_eq!(d.to_digit(16), Some(15));\n+    /// assert_eq!('1'.to_digit(10), Some(1));\n+    /// assert_eq!('f'.to_digit(16), Some(15));\n     /// ```\n     ///\n     /// Passing a non-digit results in failure:\n     ///\n     /// ```\n-    /// let d = 'f';\n-    ///\n-    /// assert_eq!(d.to_digit(10), None);\n-    ///\n-    /// let d = 'z';\n-    ///\n-    /// assert_eq!(d.to_digit(16), None);\n+    /// assert_eq!('f'.to_digit(10), None);\n+    /// assert_eq!('z'.to_digit(16), None);\n     /// ```\n     ///\n     /// Passing a large radix, causing a panic:\n@@ -236,9 +219,7 @@ impl char {\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n-    ///   let d = '1';\n-    ///\n-    ///   d.to_digit(37);\n+    ///     '1'.to_digit(37);\n     /// }).join();\n     ///\n     /// assert!(result.is_err());\n@@ -463,12 +444,8 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    ///\n-    /// assert!(c.is_alphabetic());\n-    ///\n-    /// let c = '\u4eac';\n-    /// assert!(c.is_alphabetic());\n+    /// assert!('a'.is_alphabetic());\n+    /// assert!('\u4eac'.is_alphabetic());\n     ///\n     /// let c = '\ud83d\udc9d';\n     /// // love is many things, but it is not alphabetic\n@@ -522,21 +499,13 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    /// assert!(c.is_lowercase());\n-    ///\n-    /// let c = '\u03b4';\n-    /// assert!(c.is_lowercase());\n-    ///\n-    /// let c = 'A';\n-    /// assert!(!c.is_lowercase());\n-    ///\n-    /// let c = '\u0394';\n-    /// assert!(!c.is_lowercase());\n+    /// assert!('a'.is_lowercase());\n+    /// assert!('\u03b4'.is_lowercase());\n+    /// assert!(!'A'.is_lowercase());\n+    /// assert!(!'\u0394'.is_lowercase());\n     ///\n     /// // The various Chinese scripts do not have case, and so:\n-    /// let c = '\u4e2d';\n-    /// assert!(!c.is_lowercase());\n+    /// assert!(!'\u4e2d'.is_lowercase());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -558,21 +527,13 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    /// assert!(!c.is_uppercase());\n-    ///\n-    /// let c = '\u03b4';\n-    /// assert!(!c.is_uppercase());\n-    ///\n-    /// let c = 'A';\n-    /// assert!(c.is_uppercase());\n-    ///\n-    /// let c = '\u0394';\n-    /// assert!(c.is_uppercase());\n+    /// assert!(!'a'.is_uppercase());\n+    /// assert!(!'\u03b4'.is_uppercase());\n+    /// assert!('A'.is_uppercase());\n+    /// assert!('\u0394'.is_uppercase());\n     ///\n     /// // The various Chinese scripts do not have case, and so:\n-    /// let c = '\u4e2d';\n-    /// assert!(!c.is_uppercase());\n+    /// assert!(!'\u4e2d'.is_uppercase());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -594,15 +555,12 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = ' ';\n-    /// assert!(c.is_whitespace());\n+    /// assert!(' '.is_whitespace());\n     ///\n     /// // a non-breaking space\n-    /// let c = '\\u{A0}';\n-    /// assert!(c.is_whitespace());\n+    /// assert!('\\u{A0}'.is_whitespace());\n     ///\n-    /// let c = '\u8d8a';\n-    /// assert!(!c.is_whitespace());\n+    /// assert!(!'\u8d8a'.is_whitespace());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -624,29 +582,14 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = '\u0663';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '7';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u09ec';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = 'K';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u0648';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u85cf';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u00be';\n-    /// assert!(!c.is_alphanumeric());\n-    ///\n-    /// let c = '\u2460';\n-    /// assert!(!c.is_alphanumeric());\n+    /// assert!('\u0663'.is_alphanumeric());\n+    /// assert!('7'.is_alphanumeric());\n+    /// assert!('\u09ec'.is_alphanumeric());\n+    /// assert!('K'.is_alphanumeric());\n+    /// assert!('\u0648'.is_alphanumeric());\n+    /// assert!('\u85cf'.is_alphanumeric());\n+    /// assert!(!'\u00be'.is_alphanumeric());\n+    /// assert!(!'\u2460'.is_alphanumeric());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -665,11 +608,8 @@ impl char {\n     ///\n     /// ```\n     /// // U+009C, STRING TERMINATOR\n-    /// let c = '\u009c';\n-    /// assert!(c.is_control());\n-    ///\n-    /// let c = 'q';\n-    /// assert!(!c.is_control());\n+    /// assert!('\u009c'.is_control());\n+    /// assert!(!'q'.is_control());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -687,29 +627,14 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = '\u0663';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = '7';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = '\u09ec';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = 'K';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u0648';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u85cf';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u00be';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u2460';\n-    /// assert!(!c.is_numeric());\n+    /// assert!('\u0663'.is_numeric());\n+    /// assert!('7'.is_numeric());\n+    /// assert!('\u09ec'.is_numeric());\n+    /// assert!(!'K'.is_numeric());\n+    /// assert!(!'\u0648'.is_numeric());\n+    /// assert!(!'\u85cf'.is_numeric());\n+    /// assert!(!'\u00be'.is_numeric());\n+    /// assert!(!'\u2460'.is_numeric());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -744,13 +669,10 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'C';\n-    ///\n-    /// assert_eq!(c.to_lowercase().next(), Some('c'));\n+    /// assert_eq!('C'.to_lowercase().next(), Some('c'));\n     ///\n     /// // Japanese scripts do not have case, and so:\n-    /// let c = '\u5c71';\n-    /// assert_eq!(c.to_lowercase().next(), Some('\u5c71'));\n+    /// assert_eq!('\u5c71'.to_lowercase().next(), Some('\u5c71'));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -781,12 +703,10 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'c';\n-    /// assert_eq!(c.to_uppercase().next(), Some('C'));\n+    /// assert_eq!('c'.to_uppercase().next(), Some('C'));\n     ///\n     /// // Japanese does not have case, and so:\n-    /// let c = '\u5c71';\n-    /// assert_eq!(c.to_uppercase().next(), Some('\u5c71'));\n+    /// assert_eq!('\u5c71'.to_uppercase().next(), Some('\u5c71'));\n     /// ```\n     ///\n     /// In Turkish, the equivalent of 'i' in Latin has five forms instead of two:\n@@ -797,19 +717,15 @@ impl char {\n     /// Note that the lowercase dotted 'i' is the same as the Latin. Therefore:\n     ///\n     /// ```\n-    /// let i = 'i';\n-    ///\n-    /// let upper_i = i.to_uppercase().next();\n+    /// let upper_i = 'i'.to_uppercase().next();\n     /// ```\n     ///\n     /// The value of `upper_i` here relies on the language of the text: if we're\n     /// in `en-US`, it should be `Some('I')`, but if we're in `tr_TR`, it should\n     /// be `Some('\u0130')`. `to_uppercase()` does not take this into account, and so:\n     ///\n     /// ```\n-    /// let i = 'i';\n-    ///\n-    /// let upper_i = i.to_uppercase().next();\n+    /// let upper_i = 'i'.to_uppercase().next();\n     ///\n     /// assert_eq!(Some('I'), upper_i);\n     /// ```"}, {"sha": "1d1e78926f1208c7eec107e24e651c7da5fb12a2", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -742,8 +742,6 @@\n                 if ($(this).val().length === 0) {\n                     if (browserSupportsHistoryApi()) {\n                         history.replaceState(\"\", \"std - Rust\", \"?search=\");\n-                    } else {\n-                        location.replace(\"?search=\");\n                     }\n                     $('#main.content').removeClass('hidden');\n                     $('#search.content').addClass('hidden');"}, {"sha": "3ae3cf8504ea4b3f57c0ac58fcdb331dbe8608e4", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f34053f762f708430971a36fc4c6e665528ebe2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=8f34053f762f708430971a36fc4c6e665528ebe2", "patch": "@@ -567,4 +567,10 @@ mod tests {\n                     &from_u32(lower).unwrap().to_string()));\n         }\n     }\n+\n+    #[test]\n+    fn inference_works() {\n+        let x = \"a\".to_string();\n+        x.eq_ignore_ascii_case(\"A\");\n+    }\n }"}]}