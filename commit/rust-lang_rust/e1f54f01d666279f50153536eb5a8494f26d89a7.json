{"sha": "e1f54f01d666279f50153536eb5a8494f26d89a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjU0ZjAxZDY2NjI3OWY1MDE1MzUzNmViNWE4NDk0ZjI2ZDg5YTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-31T01:23:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-01T11:13:06Z"}, "message": "Implement basic inference for closure kinds and some simple tests.\nTrickier cases not yet handled.", "tree": {"sha": "f6e701e84bd1cc40ef333bf82235e5bcd807fc2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e701e84bd1cc40ef333bf82235e5bcd807fc2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f54f01d666279f50153536eb5a8494f26d89a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f54f01d666279f50153536eb5a8494f26d89a7", "html_url": "https://github.com/rust-lang/rust/commit/e1f54f01d666279f50153536eb5a8494f26d89a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f54f01d666279f50153536eb5a8494f26d89a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f465869fd23d1bea7a99ca2e602c94e13d0dffb", "html_url": "https://github.com/rust-lang/rust/commit/2f465869fd23d1bea7a99ca2e602c94e13d0dffb"}], "stats": {"total": 226, "additions": 196, "deletions": 30}, "files": [{"sha": "d7a28f1843c09b1fa3525f49c454dd17633dbe25", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -150,6 +150,7 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 adjusted_ty: adjusted_ty,\n                 autoderefref: autoderefref,\n                 fn_sig: fn_sig.clone(),\n+                closure_def_id: def_id,\n             });\n             return Some(CallStep::Closure(fn_sig));\n         }\n@@ -321,17 +322,19 @@ struct CallResolution<'tcx> {\n     adjusted_ty: Ty<'tcx>,\n     autoderefref: ty::AutoDerefRef<'tcx>,\n     fn_sig: ty::FnSig<'tcx>,\n+    closure_def_id: ast::DefId,\n }\n \n impl<'tcx> Repr<'tcx> for CallResolution<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         format!(\"CallResolution(call_expr={}, callee_expr={}, adjusted_ty={}, \\\n-                autoderefref={}, fn_sig={})\",\n+                autoderefref={}, fn_sig={}, closure_def_id={})\",\n                 self.call_expr.repr(tcx),\n                 self.callee_expr.repr(tcx),\n                 self.adjusted_ty.repr(tcx),\n                 self.autoderefref.repr(tcx),\n-                self.fn_sig.repr(tcx))\n+                self.fn_sig.repr(tcx),\n+                self.closure_def_id.repr(tcx))\n     }\n }\n \n@@ -340,6 +343,13 @@ impl<'tcx> DeferredResolution<'tcx> for CallResolution<'tcx> {\n         debug!(\"attempt_resolution() {}\",\n                self.repr(fcx.tcx()));\n \n+        match fcx.closure_kind(self.closure_def_id) {\n+            Some(_) => { }\n+            None => {\n+                return false;\n+            }\n+        }\n+\n         // We may now know enough to figure out fn vs fnmut etc.\n         match try_overloaded_call_traits(fcx, self.call_expr, self.callee_expr,\n                                          self.adjusted_ty, self.autoderefref.clone()) {"}, {"sha": "2bbf832fdef01bd72b61d309c1921272e76b6883", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -45,17 +45,10 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n             // that, otherwise we'll error, requesting an annotation.\n             match expected_sig_and_kind {\n                 None => { // don't have information about the kind, request explicit annotation\n-                    // NB We still need to typeck the body, so assume `FnMut` kind just for that\n-                    let kind = ty::FnMutClosureKind;\n-\n-                    check_closure(fcx, expr, kind, decl, body, None);\n-\n-                    span_err!(fcx.ccx.tcx.sess, expr.span, E0187,\n-                        \"can't infer the \\\"kind\\\" of the closure; explicitly annotate it; e.g. \\\n-                        `|&:| {{}}`\");\n+                    check_closure(fcx, expr, None, decl, body, None);\n                 },\n                 Some((sig, kind)) => {\n-                    check_closure(fcx, expr, kind, decl, body, Some(sig));\n+                    check_closure(fcx, expr, Some(kind), decl, body, Some(sig));\n                 }\n             }\n         }\n@@ -68,21 +61,21 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n             };\n \n             let expected_sig = expected_sig_and_kind.map(|t| t.0);\n-            check_closure(fcx, expr, kind, decl, body, expected_sig);\n+            check_closure(fcx, expr, Some(kind), decl, body, expected_sig);\n         }\n     }\n }\n \n fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                           expr: &ast::Expr,\n-                          kind: ty::ClosureKind,\n+                          opt_kind: Option<ty::ClosureKind>,\n                           decl: &'tcx ast::FnDecl,\n                           body: &'tcx ast::Block,\n                           expected_sig: Option<ty::FnSig<'tcx>>) {\n     let expr_def_id = ast_util::local_def(expr.id);\n \n-    debug!(\"check_closure kind={:?} expected_sig={}\",\n-           kind,\n+    debug!(\"check_closure opt_kind={:?} expected_sig={}\",\n+           opt_kind,\n            expected_sig.repr(fcx.tcx()));\n \n     let mut fn_ty = astconv::ty_of_closure(\n@@ -124,13 +117,16 @@ fn check_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     // the `closures` table.\n     fn_ty.sig.0.inputs = vec![ty::mk_tup(fcx.tcx(), fn_ty.sig.0.inputs)];\n \n-    debug!(\"closure for {} --> sig={} kind={:?}\",\n+    debug!(\"closure for {} --> sig={} opt_kind={:?}\",\n            expr_def_id.repr(fcx.tcx()),\n            fn_ty.sig.repr(fcx.tcx()),\n-           kind);\n+           opt_kind);\n \n     fcx.inh.closure_tys.borrow_mut().insert(expr_def_id, fn_ty);\n-    fcx.inh.closure_kinds.borrow_mut().insert(expr_def_id, kind);\n+    match opt_kind {\n+        Some(kind) => { fcx.inh.closure_kinds.borrow_mut().insert(expr_def_id, kind); }\n+        None => { }\n+    }\n }\n \n fn deduce_expectations_from_expected_type<'a,'tcx>("}, {"sha": "2b043076e461498d60e5cacd36f282b18003a3cd", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -46,7 +46,9 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::ty::{self};\n use middle::infer::{InferCtxt, UpvarRegion};\n+use std::collections::HashSet;\n use syntax::ast;\n+use syntax::ast_util;\n use syntax::codemap::Span;\n use syntax::visit::{self, Visitor};\n use util::ppaux::Repr;\n@@ -56,20 +58,23 @@ use util::ppaux::Repr;\n \n pub fn closure_analyze_fn(fcx: &FnCtxt,\n                           _id: ast::NodeId,\n-                          decl: &ast::FnDecl,\n-                          body: &ast::Block) {\n+                          _decl: &ast::FnDecl,\n+                          body: &ast::Block)\n+{\n     let mut seed = SeedBorrowKind::new(fcx);\n     seed.visit_block(body);\n+    let closures_with_inferred_kinds = seed.closures_with_inferred_kinds;\n \n-    let mut adjust = AdjustBorrowKind::new(fcx);\n-    adjust.analyze_fn(decl, body);\n+    let mut adjust = AdjustBorrowKind::new(fcx, &closures_with_inferred_kinds);\n+    adjust.visit_block(body);\n }\n \n ///////////////////////////////////////////////////////////////////////////\n // SEED BORROW KIND\n \n struct SeedBorrowKind<'a,'tcx:'a> {\n     fcx: &'a FnCtxt<'a,'tcx>,\n+    closures_with_inferred_kinds: HashSet<ast::NodeId>,\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for SeedBorrowKind<'a, 'tcx> {\n@@ -105,7 +110,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for SeedBorrowKind<'a, 'tcx> {\n \n impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n     fn new(fcx: &'a FnCtxt<'a,'tcx>) -> SeedBorrowKind<'a,'tcx> {\n-        SeedBorrowKind { fcx: fcx }\n+        SeedBorrowKind { fcx: fcx, closures_with_inferred_kinds: HashSet::new() }\n     }\n \n     fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n@@ -121,6 +126,14 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n                      capture_clause: ast::CaptureClause,\n                      _body: &ast::Block)\n     {\n+        let closure_def_id = ast_util::local_def(expr.id);\n+        if !self.fcx.inh.closure_kinds.borrow().contains_key(&closure_def_id) {\n+            self.closures_with_inferred_kinds.insert(expr.id);\n+            self.fcx.inh.closure_kinds.borrow_mut().insert(closure_def_id, ty::FnClosureKind);\n+            debug!(\"check_closure: adding closure_id={} to closures_with_inferred_kinds\",\n+                   closure_def_id.repr(self.tcx()));\n+        }\n+\n         ty::with_freevars(self.tcx(), expr.id, |freevars| {\n             for freevar in freevars.iter() {\n                 let var_node_id = freevar.def.local_node_id();\n@@ -151,19 +164,22 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n // ADJUST BORROW KIND\n \n struct AdjustBorrowKind<'a,'tcx:'a> {\n-    fcx: &'a FnCtxt<'a,'tcx>\n+    fcx: &'a FnCtxt<'a,'tcx>,\n+    closures_with_inferred_kinds: &'a HashSet<ast::NodeId>,\n }\n \n impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n-    fn new(fcx: &'a FnCtxt<'a,'tcx>) -> AdjustBorrowKind<'a,'tcx> {\n-        AdjustBorrowKind { fcx: fcx }\n+    fn new(fcx: &'a FnCtxt<'a,'tcx>,\n+           closures_with_inferred_kinds: &'a HashSet<ast::NodeId>)\n+           -> AdjustBorrowKind<'a,'tcx> {\n+        AdjustBorrowKind { fcx: fcx, closures_with_inferred_kinds: closures_with_inferred_kinds }\n     }\n \n     fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n         self.fcx.tcx()\n     }\n \n-    fn analyze_fn(&mut self, decl: &ast::FnDecl, body: &ast::Block) {\n+    fn analyze_closure(&mut self, id: ast::NodeId, decl: &ast::FnDecl, body: &ast::Block) {\n         /*!\n          * Analysis starting point.\n          */\n@@ -203,6 +219,9 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                             setting upvar_id={:?} to by value\",\n                            upvar_id);\n \n+                    // to move out of an upvar, this must be a FnOnce closure\n+                    self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnOnceClosureKind);\n+\n                     let mut upvar_capture_map = self.fcx.inh.upvar_capture_map.borrow_mut();\n                     upvar_capture_map.insert(upvar_id, ty::UpvarCapture::ByValue);\n                 }\n@@ -306,6 +325,13 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n         debug!(\"adjust_upvar_borrow_kind(upvar_id={:?}, upvar_capture={:?}, kind={:?})\",\n                upvar_id, upvar_capture, kind);\n \n+        match kind {\n+            ty::ImmBorrow => { }\n+            ty::UniqueImmBorrow | ty::MutBorrow => {\n+                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnMutClosureKind);\n+            }\n+        }\n+\n         match *upvar_capture {\n             ty::UpvarCapture::ByValue => {\n                 // Upvar is already by-value, the strongest criteria.\n@@ -328,6 +354,40 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n             }\n         }\n     }\n+\n+    fn adjust_closure_kind(&self,\n+                           closure_id: ast::NodeId,\n+                           new_kind: ty::ClosureKind) {\n+        debug!(\"adjust_closure_kind(closure_id={}, new_kind={:?})\",\n+               closure_id, new_kind);\n+\n+        if !self.closures_with_inferred_kinds.contains(&closure_id) {\n+            return;\n+        }\n+\n+        let closure_def_id = ast_util::local_def(closure_id);\n+        let mut closure_kinds = self.fcx.inh.closure_kinds.borrow_mut();\n+        let existing_kind = closure_kinds[closure_def_id];\n+\n+        debug!(\"adjust_closure_kind: closure_id={}, existing_kind={:?}, new_kind={:?}\",\n+               closure_id, existing_kind, new_kind);\n+\n+        match (existing_kind, new_kind) {\n+            (ty::FnClosureKind, ty::FnClosureKind) |\n+            (ty::FnMutClosureKind, ty::FnClosureKind) |\n+            (ty::FnMutClosureKind, ty::FnMutClosureKind) |\n+            (ty::FnOnceClosureKind, _) => {\n+                // no change needed\n+            }\n+\n+            (ty::FnClosureKind, ty::FnMutClosureKind) |\n+            (ty::FnClosureKind, ty::FnOnceClosureKind) |\n+            (ty::FnMutClosureKind, ty::FnOnceClosureKind) => {\n+                // new kind is stronger than the old kind\n+                closure_kinds.insert(closure_def_id, new_kind);\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'tcx> {\n@@ -336,14 +396,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'tcx> {\n                 decl: &'v ast::FnDecl,\n                 body: &'v ast::Block,\n                 span: Span,\n-                _id: ast::NodeId)\n+                id: ast::NodeId)\n     {\n         match fn_kind {\n             visit::FkItemFn(..) | visit::FkMethod(..) => {\n                 // ignore nested fn items\n             }\n             visit::FkFnBlock => {\n-                self.analyze_fn(decl, body);\n+                self.analyze_closure(id, decl, body);\n                 visit::walk_fn(self, fn_kind, decl, body, span);\n             }\n         }"}, {"sha": "60e673bcc7ba6f172ba8c435bf733da2a0129210", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -278,7 +278,7 @@ fn check_object_type_binds_all_associated_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n }\n \n pub fn select_all_fcx_obligations_and_apply_defaults(fcx: &FnCtxt) {\n-    debug!(\"select_all_fcx_obligations_or_error\");\n+    debug!(\"select_all_fcx_obligations_and_apply_defaults\");\n \n     fcx.inh.deferred_resolutions.borrow_mut()\n                                 .retain(|r| !r.attempt_resolution(fcx));"}, {"sha": "9e4ed30799686b80686f21f102e41a369b8d76bb", "filename": "src/test/compile-fail/unboxed-closures-infer-fnmut-missing-mut.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-missing-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-missing-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-missing-mut.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+fn main() {\n+    let mut counter = 0;\n+    let tick = || counter += 1;\n+    tick(); //~ ERROR cannot borrow immutable local variable `tick` as mutable\n+}"}, {"sha": "0050fbdde2639eb7fe8b0d207efd950de625b195", "filename": "src/test/compile-fail/unboxed-closures-infer-fnonce-call-twice.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnonce-call-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnonce-call-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnonce-call-twice.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+use std::mem;\n+\n+fn main() {\n+    let mut counter: Vec<i32> = Vec::new();\n+    let tick = || mem::drop(counter);\n+    tick();\n+    tick(); //~ ERROR use of moved value: `tick`\n+}"}, {"sha": "67f36b9a9203cfa0fe04b69df050ef7eb7665151", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+fn main() {\n+    let mut counter = 0;\n+\n+    {\n+        let mut tick = || counter += 1;\n+        tick();\n+        tick();\n+    }\n+\n+    assert_eq!(counter, 2);\n+}"}, {"sha": "69beae77184620030d26e3f0c5654929636ec78b", "filename": "src/test/run-pass/unboxed-closures-infer-fnonce.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f54f01d666279f50153536eb5a8494f26d89a7/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnonce.rs?ref=e1f54f01d666279f50153536eb5a8494f26d89a7", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsafe_destructor)]\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+use std::mem;\n+\n+struct DropMe<'a>(&'a mut i32);\n+\n+#[unsafe_destructor]\n+impl<'a> Drop for DropMe<'a> {\n+    fn drop(&mut self) {\n+        *self.0 += 1;\n+    }\n+}\n+\n+fn main() {\n+    let mut counter = 0;\n+\n+    {\n+        let drop_me = DropMe(&mut counter);\n+        let tick = || mem::drop(drop_me);\n+        tick();\n+    }\n+\n+    assert_eq!(counter, 1);\n+}"}]}