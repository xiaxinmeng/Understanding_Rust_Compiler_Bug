{"sha": "effba718b4a46811d7baba185129b2eb34b3f126", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmJhNzE4YjRhNDY4MTFkN2JhYmExODUxMjliMmViMzRiM2YxMjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-06T22:54:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-06T22:54:49Z"}, "message": "Merge pull request #2679 from topecongiro/multi-lined-binary\n\nPut operands on its own line when each fits in a single line", "tree": {"sha": "dfb28f5e592a889751c6f4cb35d1c0dc35e2ee3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb28f5e592a889751c6f4cb35d1c0dc35e2ee3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/effba718b4a46811d7baba185129b2eb34b3f126", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa74e5CRBK7hj4Ov3rIwAAdHIIAJhC7WGj+bcr+eppByrlLtr1\nmm0bsZCjyTC/pOpPsgbey5yvFSTCTz7ojGzL+po5fpO/ZIRR8BHtAoisXP0PFkIn\nCw2q2qA4VDcIezXIfdaNJ28Wo4/4ZRM4YrUI4+rn8aNxZcEc4mTtbRI4A6gJpIug\nqwN6sGtthdJ5HJDYI1qLsQe2+iWiAE5/GjYLzkU1JpqIAenyQbULFS3VU/8wx0Kt\n7w2ehpYbvqcQOK1zcmXarND1d8//4VoFTQNQLyqfZixJwyR4BCe+MfblwRHiWy4/\n9jzCeRGvXi3j7lkJqhV43C9BXysbmHwaSjOfr2etN23NYvrfqFgMfl99MuLHGyk=\n=5PNX\n-----END PGP SIGNATURE-----\n", "payload": "tree dfb28f5e592a889751c6f4cb35d1c0dc35e2ee3b\nparent 195489d4f0101add826d07b28c383410478e6f1e\nparent 1f738ea208cba72bfb433993fd88ad92ce6dada1\nauthor Nick Cameron <nrc@ncameron.org> 1525647289 +1200\ncommitter GitHub <noreply@github.com> 1525647289 +1200\n\nMerge pull request #2679 from topecongiro/multi-lined-binary\n\nPut operands on its own line when each fits in a single line"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/effba718b4a46811d7baba185129b2eb34b3f126", "html_url": "https://github.com/rust-lang/rust/commit/effba718b4a46811d7baba185129b2eb34b3f126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/effba718b4a46811d7baba185129b2eb34b3f126/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195489d4f0101add826d07b28c383410478e6f1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/195489d4f0101add826d07b28c383410478e6f1e", "html_url": "https://github.com/rust-lang/rust/commit/195489d4f0101add826d07b28c383410478e6f1e"}, {"sha": "1f738ea208cba72bfb433993fd88ad92ce6dada1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f738ea208cba72bfb433993fd88ad92ce6dada1", "html_url": "https://github.com/rust-lang/rust/commit/1f738ea208cba72bfb433993fd88ad92ce6dada1"}], "stats": {"total": 291, "additions": 231, "deletions": 60}, "files": [{"sha": "07a336d93fa9a5e405d6312293c7c293cdd63c2a", "filename": "Configurations.md", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -64,7 +64,12 @@ fn main() {\n \n ```rust\n fn main() {\n-    if lorem_ipsum && dolor_sit && amet_consectetur && lorem_sit && dolor_consectetur && amet_ipsum\n+    if lorem_ipsum\n+        && dolor_sit\n+        && amet_consectetur\n+        && lorem_sit\n+        && dolor_consectetur\n+        && amet_ipsum\n         && lorem_consectetur\n     {\n         // ...\n@@ -76,7 +81,12 @@ fn main() {\n \n ```rust\n fn main() {\n-    if lorem_ipsum && dolor_sit && amet_consectetur && lorem_sit && dolor_consectetur && amet_ipsum\n+    if lorem_ipsum\n+       && dolor_sit\n+       && amet_consectetur\n+       && lorem_sit\n+       && dolor_consectetur\n+       && amet_ipsum\n        && lorem_consectetur\n     {\n         // ...\n@@ -342,7 +352,8 @@ fn main() {\n     let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo\n         || barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n \n-    let sum = 123456789012345678901234567890 + 123456789012345678901234567890\n+    let sum = 123456789012345678901234567890\n+        + 123456789012345678901234567890\n         + 123456789012345678901234567890;\n \n     let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n@@ -357,7 +368,8 @@ fn main() {\n     let or = foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo ||\n         barbarbarbarbarbarbarbarbarbarbarbarbarbarbarbar;\n \n-    let sum = 123456789012345678901234567890 + 123456789012345678901234567890 +\n+    let sum = 123456789012345678901234567890 +\n+        123456789012345678901234567890 +\n         123456789012345678901234567890;\n \n     let range = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.."}, {"sha": "b7bb92c858f4dad88d2116975e6e20b271b82f9e", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -36,7 +36,8 @@ fn main() {\n \n     let exit_code = match execute(&opts) {\n         Ok((write_mode, summary)) => {\n-            if summary.has_operational_errors() || summary.has_parsing_errors()\n+            if summary.has_operational_errors()\n+                || summary.has_parsing_errors()\n                 || (summary.has_diff && write_mode == WriteMode::Check)\n             {\n                 1"}, {"sha": "c602ed7b3e5019ae986000ffb3428a442a6648f9", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -265,7 +265,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         nested_shape.indent.to_string_with_newline(context.config)\n     };\n \n-    let first_connector = if is_small_parent || fits_single_line\n+    let first_connector = if is_small_parent\n+        || fits_single_line\n         || last_line_extendable(&parent_rewrite)\n         || context.config.indent_style() == IndentStyle::Visual\n     {\n@@ -275,7 +276,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     };\n \n     let result = if is_small_parent && rewrites.len() > 1 {\n-        let second_connector = if fits_single_line || rewrites[1] == \"?\"\n+        let second_connector = if fits_single_line\n+            || rewrites[1] == \"?\"\n             || last_line_extendable(&rewrites[0])\n             || context.config.indent_style() == IndentStyle::Visual\n         {"}, {"sha": "c9372248f05dd4c6cb931c1d81add9d5f874e1be", "filename": "src/closures.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -109,8 +109,10 @@ fn get_inner_expr<'a>(\n \n // Figure out if a block is necessary.\n fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext) -> bool {\n-    is_unsafe_block(block) || block.stmts.len() > 1\n-        || block_contains_comment(block, context.codemap) || prefix.contains('\\n')\n+    is_unsafe_block(block)\n+        || block.stmts.len() > 1\n+        || block_contains_comment(block, context.codemap)\n+        || prefix.contains('\\n')\n }\n \n // Rewrite closure with a single expression wrapping its body with block."}, {"sha": "49f8d1698e1ccd66597aef44131246993e2894bc", "filename": "src/comment.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -579,7 +579,9 @@ fn light_rewrite_comment(\n /// Does not trim all whitespace. If a single space is trimmed from the left of the string,\n /// this function returns true.\n fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> (&'a str, bool) {\n-    if line.starts_with(\"//! \") || line.starts_with(\"/// \") || line.starts_with(\"/*! \")\n+    if line.starts_with(\"//! \")\n+        || line.starts_with(\"/// \")\n+        || line.starts_with(\"/*! \")\n         || line.starts_with(\"/** \")\n     {\n         (&line[4..], true)\n@@ -589,13 +591,18 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> (&'a str,\n         } else {\n             (&line[opener.trim_right().len()..], false)\n         }\n-    } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\")\n-        || line.starts_with(\"///\") || line.starts_with(\"** \")\n+    } else if line.starts_with(\"/* \")\n+        || line.starts_with(\"// \")\n+        || line.starts_with(\"//!\")\n+        || line.starts_with(\"///\")\n+        || line.starts_with(\"** \")\n         || line.starts_with(\"/*!\")\n         || (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n     {\n         (&line[3..], line.chars().nth(2).unwrap() == ' ')\n-    } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\")\n+    } else if line.starts_with(\"/*\")\n+        || line.starts_with(\"* \")\n+        || line.starts_with(\"//\")\n         || line.starts_with(\"**\")\n     {\n         (&line[2..], line.chars().nth(1).unwrap() == ' ')"}, {"sha": "9f339b61be74890312f8f5a9f8cbd7e8de4435da", "filename": "src/config/summary.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -90,7 +90,9 @@ impl Summary {\n     }\n \n     pub fn has_no_errors(&self) -> bool {\n-        !(self.has_operational_errors || self.has_parsing_errors || self.has_formatting_errors\n+        !(self.has_operational_errors\n+            || self.has_parsing_errors\n+            || self.has_formatting_errors\n             || self.has_diff)\n     }\n "}, {"sha": "4ca1bbb22e317497cdbb7175f62efdf43617a157", "filename": "src/expr.rs", "status": "modified", "additions": 104, "deletions": 18, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -86,16 +86,18 @@ pub fn format_expr(\n             rewrite_call(context, &callee_str, args, inner_span, shape)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape, expr.span),\n-        ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n+        ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n             // FIXME: format comments between operands and operator\n-            rewrite_pair(\n-                &**lhs,\n-                &**rhs,\n-                PairParts::new(\"\", &format!(\" {} \", context.snippet(op.span)), \"\"),\n-                context,\n-                shape,\n-                context.config.binop_separator(),\n-            )\n+            rewrite_simple_binaries(context, expr, shape, op).or_else(|| {\n+                rewrite_pair(\n+                    &**lhs,\n+                    &**rhs,\n+                    PairParts::new(\"\", &format!(\" {} \", context.snippet(op.span)), \"\"),\n+                    context,\n+                    shape,\n+                    context.config.binop_separator(),\n+                )\n+            })\n         }\n         ast::ExprKind::Unary(ref op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n         ast::ExprKind::Struct(ref path, ref fields, ref base) => rewrite_struct_lit(\n@@ -352,6 +354,80 @@ pub fn format_expr(\n         })\n }\n \n+/// Collect operands that appears in the given binary operator in the opposite order.\n+/// e.g. `collect_binary_items(e, ||)` for `a && b || c || d` returns `[d, c, a && b]`.\n+fn collect_binary_items<'a>(mut expr: &'a ast::Expr, binop: ast::BinOp) -> Vec<&'a ast::Expr> {\n+    let mut result = vec![];\n+    let mut prev_lhs = None;\n+    loop {\n+        match expr.node {\n+            ast::ExprKind::Binary(inner_binop, ref lhs, ref rhs)\n+                if inner_binop.node == binop.node =>\n+            {\n+                result.push(&**rhs);\n+                expr = lhs;\n+                prev_lhs = Some(lhs);\n+            }\n+            _ => {\n+                if let Some(lhs) = prev_lhs {\n+                    result.push(lhs);\n+                }\n+                break;\n+            }\n+        }\n+    }\n+    result\n+}\n+\n+/// Rewrites a binary expression whose operands fits within a single line.\n+fn rewrite_simple_binaries(\n+    context: &RewriteContext,\n+    expr: &ast::Expr,\n+    shape: Shape,\n+    op: ast::BinOp,\n+) -> Option<String> {\n+    let op_str = context.snippet(op.span);\n+\n+    // 2 = spaces around a binary operator.\n+    let sep_overhead = op_str.len() + 2;\n+    let nested_overhead = sep_overhead - 1;\n+\n+    let nested_shape = (match context.config.indent_style() {\n+        IndentStyle::Visual => shape.visual_indent(0),\n+        IndentStyle::Block => shape.block_indent(context.config.tab_spaces()),\n+    }).with_max_width(context.config);\n+    let nested_shape = match context.config.binop_separator() {\n+        SeparatorPlace::Back => nested_shape.sub_width(nested_overhead)?,\n+        SeparatorPlace::Front => nested_shape.offset_left(nested_overhead)?,\n+    };\n+\n+    let opt_rewrites: Option<Vec<_>> = collect_binary_items(expr, op)\n+        .iter()\n+        .rev()\n+        .map(|e| e.rewrite(context, nested_shape))\n+        .collect();\n+    if let Some(rewrites) = opt_rewrites {\n+        if rewrites.iter().all(|e| ::utils::is_single_line(e)) {\n+            let total_width = rewrites.iter().map(|s| s.len()).sum::<usize>()\n+                + sep_overhead * (rewrites.len() - 1);\n+\n+            let sep_str = if total_width <= shape.width {\n+                format!(\" {} \", op_str)\n+            } else {\n+                let indent_str = nested_shape.indent.to_string_with_newline(context.config);\n+                match context.config.binop_separator() {\n+                    SeparatorPlace::Back => format!(\" {}{}\", op_str.trim_right(), indent_str),\n+                    SeparatorPlace::Front => format!(\"{}{} \", indent_str, op_str.trim_left()),\n+                }\n+            };\n+\n+            return wrap_str(rewrites.join(&sep_str), context.config.max_width(), shape);\n+        }\n+    }\n+\n+    None\n+}\n+\n #[derive(new, Clone, Copy)]\n pub struct PairParts<'a> {\n     prefix: &'a str,\n@@ -398,8 +474,10 @@ where\n                 .map(|first_line| first_line.ends_with('{'))\n                 .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n-            let one_line_width = last_line_width(&lhs_result) + pp.infix.len()\n-                + first_line_width(rhs_result) + pp.suffix.len();\n+            let one_line_width = last_line_width(&lhs_result)\n+                + pp.infix.len()\n+                + first_line_width(rhs_result)\n+                + pp.suffix.len();\n             if one_line_width <= shape.width {\n                 return Some(format!(\n                     \"{}{}{}{}\",\n@@ -482,7 +560,9 @@ fn rewrite_empty_block(\n     let user_str = user_str.trim();\n     if user_str.starts_with('{') && user_str.ends_with('}') {\n         let comment_str = user_str[1..user_str.len() - 1].trim();\n-        if block.stmts.is_empty() && !comment_str.contains('\\n') && !comment_str.starts_with(\"//\")\n+        if block.stmts.is_empty()\n+            && !comment_str.contains('\\n')\n+            && !comment_str.starts_with(\"//\")\n             && comment_str.len() + 4 <= shape.width\n         {\n             return Some(format!(\"{}{{ {} }}\", prefix, comment_str));\n@@ -1165,8 +1245,10 @@ pub fn is_simple_block(\n     attrs: Option<&[ast::Attribute]>,\n     codemap: &CodeMap,\n ) -> bool {\n-    (block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0])\n-        && !block_contains_comment(block, codemap) && attrs.map_or(true, |a| a.is_empty()))\n+    (block.stmts.len() == 1\n+        && stmt_is_expr(&block.stmts[0])\n+        && !block_contains_comment(block, codemap)\n+        && attrs.map_or(true, |a| a.is_empty()))\n }\n \n /// Checks whether a block contains at most one statement or expression, and no\n@@ -1176,7 +1258,8 @@ pub fn is_simple_block_stmt(\n     attrs: Option<&[ast::Attribute]>,\n     codemap: &CodeMap,\n ) -> bool {\n-    block.stmts.len() <= 1 && !block_contains_comment(block, codemap)\n+    block.stmts.len() <= 1\n+        && !block_contains_comment(block, codemap)\n         && attrs.map_or(true, |a| a.is_empty())\n }\n \n@@ -1187,7 +1270,8 @@ pub fn is_empty_block(\n     attrs: Option<&[ast::Attribute]>,\n     codemap: &CodeMap,\n ) -> bool {\n-    block.stmts.is_empty() && !block_contains_comment(block, codemap)\n+    block.stmts.is_empty()\n+        && !block_contains_comment(block, codemap)\n         && attrs.map_or(true, |a| inner_attributes(a).is_empty())\n }\n \n@@ -1702,7 +1786,8 @@ pub fn wrap_struct_field(\n     one_line_width: usize,\n ) -> String {\n     if context.config.indent_style() == IndentStyle::Block\n-        && (fields_str.contains('\\n') || !context.config.struct_lit_single_line()\n+        && (fields_str.contains('\\n')\n+            || !context.config.struct_lit_single_line()\n             || fields_str.len() > one_line_width)\n     {\n         format!(\n@@ -2028,7 +2113,8 @@ fn choose_rhs<R: Rewrite>(\n }\n \n pub fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str, rhs_tactics: RhsTactics) -> bool {\n-    rhs_tactics == RhsTactics::ForceNextLine || !next_line_rhs.contains('\\n')\n+    rhs_tactics == RhsTactics::ForceNextLine\n+        || !next_line_rhs.contains('\\n')\n         || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }\n "}, {"sha": "3d7ad0ab1b5f4ffd2d546192f60de47b15987ee5", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -489,7 +489,9 @@ impl UseTree {\n     }\n \n     fn share_prefix(&self, other: &UseTree) -> bool {\n-        if self.path.is_empty() || other.path.is_empty() || self.attrs.is_some()\n+        if self.path.is_empty()\n+            || other.path.is_empty()\n+            || self.attrs.is_some()\n             || !self.same_visibility(other)\n         {\n             false"}, {"sha": "729545139088506e6b3ee808654b4bc2326c068e", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -313,7 +313,8 @@ impl<'a> FmtVisitor<'a> {\n             rewrite_fn_base(&context, indent, ident, fn_sig, span, newline_brace, true)?;\n \n         // 2 = ` {`\n-        if self.config.brace_style() == BraceStyle::AlwaysNextLine || force_newline_brace\n+        if self.config.brace_style() == BraceStyle::AlwaysNextLine\n+            || force_newline_brace\n             || last_line_width(&result) + 2 > self.shape().width\n         {\n             newline_brace = true;\n@@ -376,7 +377,8 @@ impl<'a> FmtVisitor<'a> {\n \n         let codemap = self.get_context().codemap;\n \n-        if self.config.empty_item_single_line() && is_empty_block(block, None, codemap)\n+        if self.config.empty_item_single_line()\n+            && is_empty_block(block, None, codemap)\n             && self.block_indent.width() + fn_str.len() + 2 <= self.config.max_width()\n         {\n             return Some(format!(\"{}{{}}\", fn_str));\n@@ -755,7 +757,9 @@ fn is_impl_single_line(\n     let open_pos = snippet.find_uncommented(\"{\")? + 1;\n \n     Some(\n-        context.config.empty_item_single_line() && items.is_empty() && !result.contains('\\n')\n+        context.config.empty_item_single_line()\n+            && items.is_empty()\n+            && !result.contains('\\n')\n             && result.len() + where_clause_str.len() <= context.config.max_width()\n             && !contains_comment(&snippet[open_pos..]),\n     )\n@@ -1194,7 +1198,8 @@ pub fn format_struct_struct(\n     // 1 = `}`\n     let overhead = if fields.is_empty() { 1 } else { 0 };\n     let total_width = result.len() + generics_str.len() + overhead;\n-    if !generics_str.is_empty() && !generics_str.contains('\\n')\n+    if !generics_str.is_empty()\n+        && !generics_str.contains('\\n')\n         && total_width > context.config.max_width()\n     {\n         result.push('\\n');\n@@ -1223,7 +1228,9 @@ pub fn format_struct_struct(\n         one_line_budget,\n     )?;\n \n-    if !items_str.contains('\\n') && !result.contains('\\n') && items_str.len() <= one_line_budget\n+    if !items_str.contains('\\n')\n+        && !result.contains('\\n')\n+        && items_str.len() <= one_line_budget\n         && !last_line_contains_single_line_comment(&items_str)\n     {\n         Some(format!(\"{} {} }}\", result, items_str))\n@@ -1904,7 +1911,8 @@ fn rewrite_fn_base(\n     } else {\n         result.push('(');\n     }\n-    if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty()\n+    if context.config.spaces_within_parens_and_brackets()\n+        && !fd.inputs.is_empty()\n         && result.ends_with('(')\n     {\n         result.push(' ')\n@@ -2478,8 +2486,10 @@ fn rewrite_where_clause_rfc_style(\n     let newline_after_where = comment_separator(&comment_after, clause_shape);\n \n     // 6 = `where `\n-    let clause_sep = if where_clause_option.compress_where && comment_before.is_empty()\n-        && comment_after.is_empty() && !preds_str.contains('\\n')\n+    let clause_sep = if where_clause_option.compress_where\n+        && comment_before.is_empty()\n+        && comment_after.is_empty()\n+        && !preds_str.contains('\\n')\n         && 6 + preds_str.len() <= shape.width || where_single_line\n     {\n         Cow::from(\" \")\n@@ -2590,7 +2600,8 @@ fn rewrite_where_clause(\n     } else {\n         terminator.len()\n     };\n-    if density == Density::Tall || preds_str.contains('\\n')\n+    if density == Density::Tall\n+        || preds_str.contains('\\n')\n         || shape.indent.width() + \" where \".len() + preds_str.len() + end_length > shape.width\n     {\n         Some(format!(\n@@ -2682,7 +2693,8 @@ fn format_generics(\n             || (generics.where_clause.predicates.is_empty()\n                 && trimmed_last_line_width(&result) == 1)\n     } else {\n-        brace_pos == BracePos::ForceSameLine || trimmed_last_line_width(&result) == 1\n+        brace_pos == BracePos::ForceSameLine\n+            || trimmed_last_line_width(&result) == 1\n             || brace_style != BraceStyle::AlwaysNextLine\n     };\n     if brace_pos == BracePos::None {"}, {"sha": "71cf74f60220b4039a9f9bd1eceaf8a9b4ae0c53", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -490,7 +490,8 @@ fn format_lines(\n \n                 // Check for any line width errors we couldn't correct.\n                 let error_kind = ErrorKind::LineOverflow(line_len, config.max_width());\n-                if line_len > config.max_width() && !is_skipped_line(cur_line, skipped_range)\n+                if line_len > config.max_width()\n+                    && !is_skipped_line(cur_line, skipped_range)\n                     && should_report_error(config, kind, is_string, error_kind)\n                 {\n                     errors.push(FormattingError {\n@@ -905,7 +906,8 @@ pub fn format_and_emit_report(input: Input, config: &Config) -> FmtResult<Summar\n             if report.has_warnings() {\n                 match term::stderr() {\n                     Some(ref t)\n-                        if use_colored_tty(config.color()) && t.supports_color()\n+                        if use_colored_tty(config.color())\n+                            && t.supports_color()\n                             && t.supports_attr(term::Attr::Bold) =>\n                     {\n                         match report.print_warnings_fancy(term::stderr().unwrap()) {"}, {"sha": "433beac44ee09a69a45cc5faf0ad9e8de02c2305", "filename": "src/lists.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -192,7 +192,8 @@ where\n     let total_sep_len = sep.len() * sep_count.checked_sub(1).unwrap_or(0);\n     let real_total = total_width + total_sep_len;\n \n-    if real_total <= limit && !pre_line_comments\n+    if real_total <= limit\n+        && !pre_line_comments\n         && !items.into_iter().any(|item| item.as_ref().is_multiline())\n     {\n         DefinitiveListTactic::Horizontal\n@@ -404,8 +405,10 @@ where\n             if !starts_with_newline(comment) {\n                 let mut comment_alignment =\n                     post_comment_alignment(item_max_width, inner_item.len());\n-                if first_line_width(&formatted_comment) + last_line_width(&result)\n-                    + comment_alignment + 1 > formatting.config.max_width()\n+                if first_line_width(&formatted_comment)\n+                    + last_line_width(&result)\n+                    + comment_alignment\n+                    + 1 > formatting.config.max_width()\n                 {\n                     item_max_width = None;\n                     formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n@@ -431,7 +434,9 @@ where\n             item_max_width = None;\n         }\n \n-        if formatting.preserve_newline && !last && tactic == DefinitiveListTactic::Vertical\n+        if formatting.preserve_newline\n+            && !last\n+            && tactic == DefinitiveListTactic::Vertical\n             && item.new_lines\n         {\n             item_max_width = None;\n@@ -458,7 +463,8 @@ where\n         let item = item.as_ref();\n         let inner_item_width = item.inner_as_ref().len();\n         if !first\n-            && (item.is_different_group() || item.post_comment.is_none()\n+            && (item.is_different_group()\n+                || item.post_comment.is_none()\n                 || inner_item_width + overhead > max_budget)\n         {\n             return max_width;"}, {"sha": "3da0a4a5c3a23e4b38531fa0a8566a3a5018cfce", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -269,7 +269,8 @@ pub fn rewrite_macro_inner(\n                 let nested_shape = mac_shape.block_indent(context.config.tab_spaces());\n                 let lhs = arg_vec[0].rewrite(context, nested_shape)?;\n                 let rhs = arg_vec[1].rewrite(context, nested_shape)?;\n-                if !lhs.contains('\\n') && !rhs.contains('\\n')\n+                if !lhs.contains('\\n')\n+                    && !rhs.contains('\\n')\n                     && lhs.len() + rhs.len() + total_overhead <= shape.width\n                 {\n                     Some(format!(\"{}{}{}; {}{}\", macro_name, lbr, lhs, rhs, rbr))"}, {"sha": "0bbdbe62017c234752906d6daecfb27a97e85f3d", "filename": "src/matches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -498,7 +498,8 @@ fn rewrite_guard(\n fn nop_block_collapse(block_str: Option<String>, budget: usize) -> Option<String> {\n     debug!(\"nop_block_collapse {:?} {}\", block_str, budget);\n     block_str.map(|block_str| {\n-        if block_str.starts_with('{') && budget >= 2\n+        if block_str.starts_with('{')\n+            && budget >= 2\n             && (block_str[1..].find(|c: char| !c.is_whitespace()).unwrap() == block_str.len() - 2)\n         {\n             \"{}\".to_owned()"}, {"sha": "977dbbbb5f4ed9e27b72c010bb6902c0b2ff3813", "filename": "src/overflow.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -235,7 +235,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n \n     fn try_overflow_last_item(&self, list_items: &mut Vec<ListItem>) -> DefinitiveListTactic {\n         // 1 = \"(\"\n-        let combine_arg_with_callee = self.items.len() == 1 && self.items[0].to_expr().is_some()\n+        let combine_arg_with_callee = self.items.len() == 1\n+            && self.items[0].to_expr().is_some()\n             && self.ident.len() + 1 <= self.context.config.tab_spaces();\n         let overflow_last = combine_arg_with_callee || can_be_overflowed(self.context, self.items);\n \n@@ -311,7 +312,9 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n                 // Use horizontal layout for a function with a single argument as long as\n                 // everything fits in a single line.\n                 // `self.one_line_width == 0` means vertical layout is forced.\n-                if self.items.len() == 1 && self.one_line_width != 0 && !list_items[0].has_comment()\n+                if self.items.len() == 1\n+                    && self.one_line_width != 0\n+                    && !list_items[0].has_comment()\n                     && !list_items[0].inner_as_ref().contains('\\n')\n                     && ::lists::total_item_width(&list_items[0]) <= self.one_line_width\n                 {\n@@ -462,7 +465,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         let (extendable, items_str) = self.rewrite_items()?;\n \n         // If we are using visual indent style and failed to format, retry with block indent.\n-        if !self.context.use_block_indent() && need_block_indent(&items_str, self.nested_shape)\n+        if !self.context.use_block_indent()\n+            && need_block_indent(&items_str, self.nested_shape)\n             && !extendable\n         {\n             self.context.use_block.replace(true);"}, {"sha": "6ffb9cd5c7ebb0fbcbb2d92604bca78cdf073232", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -230,7 +230,8 @@ fn rewrite_segment(\n     if let Some(ref params) = segment.parameters {\n         match **params {\n             ast::PathParameters::AngleBracketed(ref data)\n-                if !data.lifetimes.is_empty() || !data.types.is_empty()\n+                if !data.lifetimes.is_empty()\n+                    || !data.types.is_empty()\n                     || !data.bindings.is_empty() =>\n             {\n                 let param_list = data.lifetimes"}, {"sha": "f7502931d9693ef88c37dcd0e1f1fad6269c5bf8", "filename": "tests/source/binary-expr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Fsource%2Fbinary-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Fsource%2Fbinary-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fbinary-expr.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -0,0 +1,10 @@\n+// Binary expressions\n+\n+fn foo() {\n+    // 100\n+    let x = aaaaaaaaaa || bbbbbbbbbb || cccccccccc || dddddddddd && eeeeeeeeee || ffffffffff || ggg;\n+    // 101\n+    let x = aaaaaaaaaa || bbbbbbbbbb || cccccccccc || dddddddddd && eeeeeeeeee || ffffffffff || gggg;\n+    // 104\n+    let x = aaaaaaaaaa || bbbbbbbbbb || cccccccccc || dddddddddd && eeeeeeeeee || ffffffffff || gggggggg;\n+}"}, {"sha": "93115b282cafa70dabd97c508b6dfd1a0e9ade6c", "filename": "tests/target/binary-expr.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fbinary-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fbinary-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbinary-expr.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -0,0 +1,16 @@\n+// Binary expressions\n+\n+fn foo() {\n+    // 100\n+    let x = aaaaaaaaaa || bbbbbbbbbb || cccccccccc || dddddddddd && eeeeeeeeee || ffffffffff || ggg;\n+    // 101\n+    let x =\n+        aaaaaaaaaa || bbbbbbbbbb || cccccccccc || dddddddddd && eeeeeeeeee || ffffffffff || gggg;\n+    // 104\n+    let x = aaaaaaaaaa\n+        || bbbbbbbbbb\n+        || cccccccccc\n+        || dddddddddd && eeeeeeeeee\n+        || ffffffffff\n+        || gggggggg;\n+}"}, {"sha": "859b4562dff3c87fd23930c234dccdc8121fe228", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -150,7 +150,8 @@ fn issue_1450() {\n }\n \n fn foo() {\n-    if real_total <= limit && !pre_line_comments\n+    if real_total <= limit\n+        && !pre_line_comments\n         && !items.into_iter().any(|item| item.as_ref().is_multiline())\n     {\n         DefinitiveListTactic::Horizontal"}, {"sha": "5f12ec3ff7a4462c99954d2568eb33478461dc14", "filename": "tests/target/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -21,8 +21,10 @@ fn foo() -> bool {\n         10000 * 30000000000 + 40000 / 1002200000000 - 50000 * sqrt(-1),\n         trivial_value,\n     );\n-    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + a\n-        + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaa);\n+    (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        + a\n+        + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+        + aaaaa);\n \n     {\n         for _ in 0..10 {}"}, {"sha": "e950200b15bd004423a44abaf5bcc79e06ea4492", "filename": "tests/target/issue-1239.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fissue-1239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effba718b4a46811d7baba185129b2eb34b3f126/tests%2Ftarget%2Fissue-1239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1239.rs?ref=effba718b4a46811d7baba185129b2eb34b3f126", "patch": "@@ -3,7 +3,8 @@ fn foo() {\n         || condition__uses_alignment_for_first_if__1\n         || condition__uses_alignment_for_first_if__2\n     {\n-    } else if condition__no_alignment_for_later_else__0 || condition__no_alignment_for_later_else__1\n+    } else if condition__no_alignment_for_later_else__0\n+        || condition__no_alignment_for_later_else__1\n         || condition__no_alignment_for_later_else__2\n     {\n     };"}]}