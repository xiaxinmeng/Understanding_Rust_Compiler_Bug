{"sha": "a99e458022444608880936fe20a30ffa573bf0e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OWU0NTgwMjI0NDQ2MDg4ODA5MzZmZTIwYTMwZmZhNTczYmYwZTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-24T17:31:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-24T17:31:46Z"}, "message": "Rustup to rustc 1.30.0-nightly (f49f6e73a 2018-09-23)", "tree": {"sha": "2755fe88c74a96df93b9586c2c6cecf9abab6dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2755fe88c74a96df93b9586c2c6cecf9abab6dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a99e458022444608880936fe20a30ffa573bf0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a99e458022444608880936fe20a30ffa573bf0e8", "html_url": "https://github.com/rust-lang/rust/commit/a99e458022444608880936fe20a30ffa573bf0e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a99e458022444608880936fe20a30ffa573bf0e8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b721a29407c3f79e729a2f61ecd03bd3c4059c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b721a29407c3f79e729a2f61ecd03bd3c4059c4", "html_url": "https://github.com/rust-lang/rust/commit/5b721a29407c3f79e729a2f61ecd03bd3c4059c4"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "dbbaf6ca841d1b9071a39e5a27ce2bbbea5d52ff", "filename": "0001-Disable-stdsimd-in-libcore.patch", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a99e458022444608880936fe20a30ffa573bf0e8/0001-Disable-stdsimd-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a99e458022444608880936fe20a30ffa573bf0e8/0001-Disable-stdsimd-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0001-Disable-stdsimd-in-libcore.patch?ref=a99e458022444608880936fe20a30ffa573bf0e8", "patch": "@@ -1,29 +1,29 @@\n-From a26747487d398af360dc16344b1f9d2b367720c9 Mon Sep 17 00:00:00 2001\n+From 09ba4e4d2574ba591524cffe18eb11e05e6726a4 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 19 Jul 2018 18:26:56 +0200\n+Date: Mon, 24 Sep 2018 18:50:20 +0200\n Subject: [PATCH] Disable stdsimd in libcore\n \n ---\n  src/libcore/lib.rs | 2 ++\n  1 file changed, 2 insertions(+)\n \n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index bbe6ae8619..bdeb6ce426 100644\n+index 3b7646f..d349a49 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -238,6 +238,7 @@ macro_rules! test_v256 { ($item:item) => {}; }\n- macro_rules! test_v512 { ($item:item) => {}; }\n- #[allow(unused_macros)]\n- macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n+@@ -226,6 +226,7 @@ mod nonzero;\n+ mod tuple;\n+ mod unit;\n+ \n +/*\n- #[path = \"../stdsimd/coresimd/mod.rs\"]\n- #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n- #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-@@ -250,3 +251,4 @@ pub use coresimd::simd;\n+ // Pull in the the `coresimd` crate directly into libcore. This is where all the\n+ // architecture-specific (and vendor-specific) intrinsics are defined. AKA\n+ // things like SIMD and such. Note that the actual source for all this lies in a\n+@@ -256,3 +257,4 @@ mod coresimd;\n  #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n  #[cfg(not(stage0))]\n  pub use coresimd::arch;\n +*/\n---\n+-- \n 2.11.0\n "}, {"sha": "94c2e85411a1e4377eaddebe9783a0f2696d3a43", "filename": "src/constant.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a99e458022444608880936fe20a30ffa573bf0e8/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99e458022444608880936fe20a30ffa573bf0e8/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a99e458022444608880936fe20a30ffa573bf0e8", "patch": "@@ -1,10 +1,10 @@\n use cranelift_module::*;\n use crate::prelude::*;\n use crate::rustc::mir::interpret::{\n-    read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId,\n+    read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use crate::rustc::ty::Const;\n-use crate::rustc_mir::interpret::{CompileTimeEvaluator, EvalContext, Memory, MemoryKind};\n+use crate::rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, OpTy, PlaceTy};\n \n #[derive(Default)]\n pub struct ConstantCx {\n@@ -124,7 +124,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n         let mut ecx = EvalContext::new(\n             fx.tcx.at(DUMMY_SP),\n             ty::ParamEnv::reveal_all(),\n-            CompileTimeEvaluator,\n+            TransPlaceInterpreter,\n             (),\n         );\n         let op = ecx.const_to_op(const_)?;\n@@ -155,11 +155,11 @@ fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n ) -> DataId {\n     let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n     let is_mutable = if let crate::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n-        true\n-    } else {\n-        !tcx.type_of(def_id)\n-            .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n-    };\n+            true\n+        } else {\n+            !tcx.type_of(def_id)\n+                .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n+        };\n     module\n         .declare_data(&*symbol_name, Linkage::Export, is_mutable)\n         .unwrap()\n@@ -185,7 +185,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n ) {\n-    let memory = Memory::<CompileTimeEvaluator>::new(tcx.at(DUMMY_SP), ());\n+    let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP), ());\n \n     while let Some(todo_item) = pop_set(&mut cx.todo) {\n         let (data_id, alloc) = match todo_item {\n@@ -269,3 +269,56 @@ fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T>\n         None\n     }\n }\n+\n+struct TransPlaceInterpreter;\n+\n+impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n+    type MemoryData = ();\n+    type MemoryKinds = ();\n+    const MUT_STATIC_KIND: Option<()> = None;\n+\n+    fn before_terminator(_: &mut EvalContext<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n+        panic!();\n+    }\n+\n+    fn find_fn(\n+        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: Instance<'tcx>,\n+        _: &[OpTy<'tcx>],\n+        _: Option<PlaceTy<'tcx>>,\n+        _: Option<BasicBlock>,\n+    ) -> EvalResult<'tcx, Option<&'mir Mir<'tcx>>> {\n+        panic!();\n+    }\n+\n+    fn call_intrinsic(\n+        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: Instance<'tcx>,\n+        _: &[OpTy<'tcx>],\n+        _: PlaceTy<'tcx>,\n+    ) -> EvalResult<'tcx> {\n+        panic!();\n+    }\n+\n+    fn find_foreign_static(\n+        _: crate::rustc::ty::query::TyCtxtAt<'a, 'tcx, 'tcx>,\n+        _: DefId,\n+    ) -> EvalResult<'tcx, &'tcx Allocation> {\n+        panic!();\n+    }\n+\n+    fn ptr_op(\n+        _: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: mir::BinOp,\n+        _: Scalar,\n+        _: TyLayout<'tcx>,\n+        _: Scalar,\n+        _: TyLayout<'tcx>,\n+    ) -> EvalResult<'tcx, (Scalar, bool)> {\n+        panic!();\n+    }\n+\n+    fn box_alloc(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n+        panic!();\n+    }\n+}"}]}