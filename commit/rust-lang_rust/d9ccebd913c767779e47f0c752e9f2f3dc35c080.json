{"sha": "d9ccebd913c767779e47f0c752e9f2f3dc35c080", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Y2NlYmQ5MTNjNzY3Nzc5ZTQ3ZjBjNzUyZTlmMmYzZGMzNWMwODA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T09:08:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T09:08:46Z"}, "message": "fix deadlock", "tree": {"sha": "361248214cd3a06ad1e9b58675f00b7422521d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361248214cd3a06ad1e9b58675f00b7422521d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ccebd913c767779e47f0c752e9f2f3dc35c080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ccebd913c767779e47f0c752e9f2f3dc35c080", "html_url": "https://github.com/rust-lang/rust/commit/d9ccebd913c767779e47f0c752e9f2f3dc35c080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ccebd913c767779e47f0c752e9f2f3dc35c080/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48b9d9be737339be988042ca88d31330738618c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48b9d9be737339be988042ca88d31330738618c", "html_url": "https://github.com/rust-lang/rust/commit/f48b9d9be737339be988042ca88d31330738618c"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "297dcd9ae22b9150322da587d3b91a13020653b8", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d9ccebd913c767779e47f0c752e9f2f3dc35c080/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ccebd913c767779e47f0c752e9f2f3dc35c080/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=d9ccebd913c767779e47f0c752e9f2f3dc35c080", "patch": "@@ -8,7 +8,7 @@ use std::{\n };\n \n use tempdir::TempDir;\n-use crossbeam_channel::{bounded, after, Sender, Receiver};\n+use crossbeam_channel::{unbounded, after, Sender, Receiver};\n use flexi_logger::Logger;\n use languageserver_types::{\n     Url,\n@@ -54,7 +54,6 @@ pub fn project(fixture: &str) -> Server {\n         buf.push('\\n');\n     }\n     flush!();\n-\n     Server::new(tmp_dir, paths)\n }\n \n@@ -70,8 +69,8 @@ pub struct Server {\n impl Server {\n     fn new(dir: TempDir, files: Vec<(PathBuf, String)>) -> Server {\n         let path = dir.path().to_path_buf();\n-        let (client_sender, mut server_receiver) = bounded(1);\n-        let (mut server_sender, client_receiver) = bounded(1);\n+        let (client_sender, mut server_receiver) = unbounded();\n+        let (mut server_sender, client_receiver) = unbounded();\n         let server = thread::spawn(move || main_loop(true, path, &mut server_receiver, &mut server_sender));\n         let res = Server {\n             req_id: Cell::new(1),\n@@ -81,6 +80,7 @@ impl Server {\n             receiver: client_receiver,\n             server: Some(server),\n         };\n+\n         for (path, text) in files {\n             res.send_notification(RawNotification::new::<DidOpenTextDocument>(\n                 &DidOpenTextDocumentParams {\n@@ -179,15 +179,11 @@ impl Server {\n         }\n     }\n     fn recv(&self) -> Option<RawMessage> {\n-        let timeout = Duration::from_secs(5);\n-        let msg = select! {\n-            recv(&self.receiver, msg) => msg,\n-            recv(after(timeout)) => panic!(\"timed out\"),\n-        };\n-        msg.map(|msg| {\n-            self.messages.borrow_mut().push(msg.clone());\n-            msg\n-        })\n+        recv_timeout(&self.receiver)\n+            .map(|msg| {\n+                self.messages.borrow_mut().push(msg.clone());\n+                msg\n+            })\n     }\n     fn send_notification(&self, not: RawNotification) {\n         self.sender.as_ref()\n@@ -201,7 +197,7 @@ impl Drop for Server {\n         {\n             self.send_request::<Shutdown>(666, ());\n             drop(self.sender.take().unwrap());\n-            while let Some(msg) = self.receiver.recv() {\n+            while let Some(msg) = recv_timeout(&self.receiver) {\n                 drop(msg);\n             }\n         }\n@@ -210,3 +206,11 @@ impl Drop for Server {\n             .join().unwrap().unwrap();\n     }\n }\n+\n+fn recv_timeout(receiver: &Receiver<RawMessage>) -> Option<RawMessage> {\n+    let timeout = Duration::from_secs(5);\n+    select! {\n+        recv(receiver, msg) => msg,\n+        recv(after(timeout)) => panic!(\"timed out\"),\n+    }\n+}"}]}