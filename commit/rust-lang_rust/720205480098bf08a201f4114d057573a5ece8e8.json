{"sha": "720205480098bf08a201f4114d057573a5ece8e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDIwNTQ4MDA5OGJmMDhhMjAxZjQxMTRkMDU3NTczYTVlY2U4ZTg=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-07T12:49:00Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Document all the things", "tree": {"sha": "b6528026c99ddd1fe9888e7775a380aacd7730a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6528026c99ddd1fe9888e7775a380aacd7730a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720205480098bf08a201f4114d057573a5ece8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720205480098bf08a201f4114d057573a5ece8e8", "html_url": "https://github.com/rust-lang/rust/commit/720205480098bf08a201f4114d057573a5ece8e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720205480098bf08a201f4114d057573a5ece8e8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680c4022ae744e30e6344882919b444f1353baba", "url": "https://api.github.com/repos/rust-lang/rust/commits/680c4022ae744e30e6344882919b444f1353baba", "html_url": "https://github.com/rust-lang/rust/commit/680c4022ae744e30e6344882919b444f1353baba"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "03e27991d9308bc7a69c79b6a07b26fa6d74d5c4", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/720205480098bf08a201f4114d057573a5ece8e8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720205480098bf08a201f4114d057573a5ece8e8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=720205480098bf08a201f4114d057573a5ece8e8", "patch": "@@ -280,6 +280,7 @@ fn mir_const<'tcx>(\n     tcx.alloc_steal_mir(body)\n }\n \n+/// Compute the main MIR body and the list of MIR bodies of the promoteds.\n fn mir_promoted(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -321,6 +322,7 @@ fn mir_promoted(\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n+/// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n     let did = def_id.expect_local();\n     if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n@@ -330,6 +332,11 @@ fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n     }\n }\n \n+/// Same as `mir_for_ctfe`, but used to get the MIR of a const generic parameter.\n+/// The docs on `WithOptConstParam` explain this a bit more, but the TLDR is that\n+/// we'd get cycle errors with `mir_for_ctfe`, because typeck would need to typeck\n+/// the const parameter while type checking the main body, which in turn would try\n+/// to type check the main body again.\n fn mir_for_ctfe_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (did, param_did): (LocalDefId, DefId),\n@@ -378,6 +385,9 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n     body\n }\n \n+/// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n+/// mir borrowck *before* doing so in order to ensure that borrowck can be run and doesn't\n+/// end up missing the source MIR due to stealing happening.\n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -515,6 +525,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     );\n }\n \n+/// Optimize the MIR and prepare it for codegen.\n fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     let did = did.expect_local();\n     assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n@@ -544,6 +555,8 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n     body\n }\n \n+/// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for\n+/// constant evaluation once all substitutions become known.\n fn promoted_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,"}]}