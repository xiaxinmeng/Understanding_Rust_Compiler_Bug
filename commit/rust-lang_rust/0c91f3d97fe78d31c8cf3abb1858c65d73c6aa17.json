{"sha": "0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTFmM2Q5N2ZlNzhkMzFjOGNmM2FiYjE4NThjNjVkNzNjNmFhMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-12T02:00:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-12T02:00:18Z"}, "message": "Auto merge of #57234 - Centril:const-stabilizations-2, r=oli-obk\n\nConst-stabilize `const_int_ops` + `const_ip`\n\nr? @oli-obk\n\n## Note for relnotes: This PR includes https://github.com/rust-lang/rust/pull/57105.\n\nI've added T-lang since this affects intrinsics and the operational semantics of Rust's `const fn` fragment.\n\n## Stable APIs proposed for constification\n\n+ `const_int_ops`:\n    + `count_ones`\n    + `count_zeros`\n    + `leading_zeros`\n    + `trailing_zeros`\n    + `swap_bytes`\n    + `from_be`\n    + `from_le`\n    + `to_be`\n    + `to_le`\n+ `const_ip`\n    + `Ipv4Addr::new`\n\n## Unstable APIs constified\n\n+ `const_int_conversion`:\n    + `reverse_bits`", "tree": {"sha": "ef5057d474b09cc69205de7056d193c1f861b049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5057d474b09cc69205de7056d193c1f861b049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "html_url": "https://github.com/rust-lang/rust/commit/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43986184b8f4e0d633e8ae1704f0e19aec30cb2", "html_url": "https://github.com/rust-lang/rust/commit/b43986184b8f4e0d633e8ae1704f0e19aec30cb2"}, {"sha": "14be8a7f14fdcc4d146efc7501be9933e0a817b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14be8a7f14fdcc4d146efc7501be9933e0a817b0", "html_url": "https://github.com/rust-lang/rust/commit/14be8a7f14fdcc4d146efc7501be9933e0a817b0"}], "stats": {"total": 867, "additions": 669, "deletions": 198}, "files": [{"sha": "db19baf7a2c64124521c53b61b82b491ab584f6c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1348,7 +1348,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::ctlz;\n     ///\n     /// let x = 0b0001_1100_u8;\n-    /// let num_leading = unsafe { ctlz(x) };\n+    /// let num_leading = ctlz(x);\n     /// assert_eq!(num_leading, 3);\n     /// ```\n     ///\n@@ -1360,7 +1360,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::ctlz;\n     ///\n     /// let x = 0u16;\n-    /// let num_leading = unsafe { ctlz(x) };\n+    /// let num_leading = ctlz(x);\n     /// assert_eq!(num_leading, 16);\n     /// ```\n     pub fn ctlz<T>(x: T) -> T;\n@@ -1391,7 +1391,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::cttz;\n     ///\n     /// let x = 0b0011_1000_u8;\n-    /// let num_trailing = unsafe { cttz(x) };\n+    /// let num_trailing = cttz(x);\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n     ///\n@@ -1403,7 +1403,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::cttz;\n     ///\n     /// let x = 0u16;\n-    /// let num_trailing = unsafe { cttz(x) };\n+    /// let num_trailing = cttz(x);\n     /// assert_eq!(num_trailing, 16);\n     /// ```\n     pub fn cttz<T>(x: T) -> T;"}, {"sha": "a5f20d08e47bee6256736bc693e0911bec30d053", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -71,7 +71,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n-#![feature(const_int_ops)]\n+#![cfg_attr(stage0, feature(const_int_ops))]\n #![feature(const_fn_union)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n@@ -114,9 +114,7 @@\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n-#![feature(const_int_rotate)]\n-#![feature(const_int_wrapping)]\n-#![feature(const_int_sign)]\n+#![cfg_attr(stage0, feature(const_int_rotate))]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(reverse_bits)]"}, {"sha": "7ff04410516a3e61563fad4bbdd24bfa678c7e07", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 72, "deletions": 35, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -275,7 +275,7 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -291,7 +291,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -312,7 +312,7 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -333,7 +333,7 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -357,7 +357,7 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_rotate\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_left(n) as Self\n@@ -382,7 +382,7 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_rotate\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_right(n) as Self\n@@ -404,7 +404,7 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 (self as $UnsignedT).swap_bytes() as Self\n@@ -454,7 +454,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -488,7 +488,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -522,7 +522,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -556,7 +556,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -994,12 +994,15 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n+                #[cfg(not(stage0))]\n+                intrinsics::overflowing_add(self, rhs)\n             }\n         }\n \n@@ -1018,12 +1021,15 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n+                #[cfg(not(stage0))]\n+                intrinsics::overflowing_sub(self, rhs)\n             }\n         }\n \n@@ -1041,12 +1047,15 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe {\n                     intrinsics::overflowing_mul(self, rhs)\n                 }\n+                #[cfg(not(stage0))]\n+                intrinsics::overflowing_mul(self, rhs)\n             }\n         }\n \n@@ -1205,7 +1214,7 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1233,7 +1242,7 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1886,7 +1895,6 @@ assert!(!(-10\", stringify!($SelfT), \").is_positive());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_sign\")]\n             #[inline]\n             pub const fn is_positive(self) -> bool { self > 0 }\n         }\n@@ -1905,7 +1913,6 @@ assert!(!10\", stringify!($SelfT), \".is_negative());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_sign\")]\n             #[inline]\n             pub const fn is_negative(self) -> bool { self < 0 }\n         }\n@@ -2227,10 +2234,13 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::ctpop(self as $ActualT) as u32 }\n             }\n         }\n \n@@ -2245,7 +2255,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2265,10 +2275,13 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::ctlz(self as $ActualT) as u32 }\n             }\n         }\n \n@@ -2286,10 +2299,13 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::cttz(self) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::cttz(self) as u32 }\n             }\n         }\n \n@@ -2310,10 +2326,13 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_rotate\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::rotate_left(self, n as $SelfT) }\n+                #[cfg(not(stage0))]\n+                intrinsics::rotate_left(self, n as $SelfT)\n             }\n         }\n \n@@ -2335,10 +2354,13 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_rotate\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::rotate_right(self, n as $SelfT) }\n+                #[cfg(not(stage0))]\n+                intrinsics::rotate_right(self, n as $SelfT)\n             }\n         }\n \n@@ -2357,10 +2379,13 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+                #[cfg(not(stage0))]\n+                { intrinsics::bswap(self as $ActualT) as Self }\n             }\n         }\n \n@@ -2380,10 +2405,13 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_conversion\"))]\n             #[inline]\n             pub const fn reverse_bits(self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+                #[cfg(not(stage0))]\n+                { intrinsics::bitreverse(self as $ActualT) as Self }\n             }\n         }\n \n@@ -2407,7 +2435,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -2441,7 +2469,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2475,7 +2503,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -2509,7 +2537,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2884,12 +2912,15 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n+                #[cfg(not(stage0))]\n+                intrinsics::overflowing_add(self, rhs)\n             }\n         }\n \n@@ -2907,12 +2938,15 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n+                #[cfg(not(stage0))]\n+                intrinsics::overflowing_sub(self, rhs)\n             }\n         }\n \n@@ -2931,12 +2965,15 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+        #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n+            #[cfg(stage0)]\n             unsafe {\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n+            #[cfg(not(stage0))]\n+            intrinsics::overflowing_mul(self, rhs)\n         }\n \n         doc_comment! {\n@@ -3081,7 +3118,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3111,7 +3148,7 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {"}, {"sha": "33f309c995702b1756ee31def616abe8a0075838", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -342,15 +342,11 @@ fn check_terminator(\n                 // some intrinsics are waved through if called inside the\n                 // standard library. Users never need to call them directly\n                 match tcx.fn_sig(def_id).abi() {\n-                    abi::Abi::RustIntrinsic => match &tcx.item_name(def_id).as_str()[..] {\n-                        | \"size_of\"\n-                        | \"min_align_of\"\n-                        | \"needs_drop\"\n-                        => {},\n-                        _ => return Err((\n+                    abi::Abi::RustIntrinsic => if !is_intrinsic_whitelisted(tcx, def_id) {\n+                        return Err((\n                             span,\n                             \"can only call a curated list of intrinsics in `min_const_fn`\".into(),\n-                        )),\n+                        ))\n                     },\n                     abi::Abi::Rust if tcx.is_min_const_fn(def_id) => {},\n                     abi::Abi::Rust => return Err((\n@@ -390,3 +386,30 @@ fn check_terminator(\n         },\n     }\n }\n+\n+/// Returns true if the `def_id` refers to an intrisic which we've whitelisted\n+/// for being called from stable `const fn`s (`min_const_fn`).\n+///\n+/// Adding more intrinsics requires sign-off from @rust-lang/lang.\n+fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    match &tcx.item_name(def_id).as_str()[..] {\n+        | \"size_of\"\n+        | \"min_align_of\"\n+        | \"needs_drop\"\n+        // Arithmetic:\n+        | \"overflowing_add\" // ~> .wrapping_add\n+        | \"overflowing_sub\" // ~> .wrapping_sub\n+        | \"overflowing_mul\" // ~> .wrapping_mul\n+        | \"unchecked_shl\" // ~> .wrapping_shl\n+        | \"unchecked_shr\" // ~> .wrapping_shr\n+        | \"rotate_left\" // ~> .rotate_left\n+        | \"rotate_right\" // ~> .rotate_right\n+        | \"ctpop\" // ~> .count_ones\n+        | \"ctlz\" // ~> .leading_zeros\n+        | \"cttz\" // ~> .trailing_zeros\n+        | \"bswap\" // ~> .swap_bytes\n+        | \"bitreverse\" // ~> .reverse_bits\n+        => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "04d18ff7aa37260e48c3a7fbc2c918eba4f9baf1", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -66,6 +66,18 @@ fn equate_intrinsic_type<'a, 'tcx>(\n     require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(def_id)), fty);\n }\n \n+/// Returns whether the given intrinsic is unsafe to call or not.\n+pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n+    match intrinsic {\n+        \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n+        \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n+        \"rotate_left\" | \"rotate_right\" |\n+        \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\"\n+        => hir::Unsafety::Normal,\n+        _ => hir::Unsafety::Unsafe,\n+    }\n+}\n+\n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -117,10 +129,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n         (0, Vec::new(), tcx.types.never, hir::Unsafety::Unsafe)\n     } else {\n-        let unsafety = match &name[..] {\n-            \"size_of\" | \"min_align_of\" | \"needs_drop\" => hir::Unsafety::Normal,\n-            _ => hir::Unsafety::Unsafe,\n-        };\n+        let unsafety = intrisic_operation_unsafety(&name[..]);\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_unit()),\n             \"size_of\" |"}, {"sha": "870c6dd8bc1f60a4f2fc2de1367183553216b0cc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -80,7 +80,7 @@ mod closure;\n mod callee;\n mod compare_method;\n mod generator_interior;\n-mod intrinsic;\n+pub mod intrinsic;\n mod op;\n \n use astconv::{AstConv, PathSeg};"}, {"sha": "2ac52bcda76f734a4012610affea69e80a80ef63", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -16,6 +16,7 @@\n \n use astconv::{AstConv, Bounds};\n use constrained_type_params as ctp;\n+use check::intrinsic::intrisic_operation_unsafety;\n use lint;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime as rl;\n@@ -2080,10 +2081,7 @@ fn compute_sig_of_foreign_fn_decl<'a, 'tcx>(\n     abi: abi::Abi,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n-        match &*tcx.item_name(def_id).as_str() {\n-            \"size_of\" | \"min_align_of\" | \"needs_drop\" => hir::Unsafety::Normal,\n-            _ => hir::Unsafety::Unsafe,\n-        }\n+        intrisic_operation_unsafety(&*tcx.item_name(def_id).as_str())\n     } else {\n         hir::Unsafety::Unsafe\n     };"}, {"sha": "701565191b9603d8dbb6cd68ee8e3c8fdf9dcabb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -242,8 +242,8 @@\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]\n-#![feature(const_int_ops)]\n-#![feature(const_ip)]\n+#![cfg_attr(stage0, feature(const_int_ops))]\n+#![cfg_attr(stage0, feature(const_ip))]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_cstr_unchecked)]\n #![feature(core_intrinsics)]"}, {"sha": "f98113e0896f7908eb634e0952acb0b5dbe9e732", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -328,7 +328,7 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_ip\")]\n+    #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_ip\"))]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         Ipv4Addr {\n             inner: c::in_addr {"}, {"sha": "19d65860179b2628a598479fe69bf664bdbeabd5", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_int_conversion, const_int_ops, reverse_bits)]\n+#![feature(const_int_conversion, reverse_bits)]\n \n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n@@ -21,4 +21,3 @@ fn main() {\n     assert_eq!(TO_LE_BYTES, ident([0x78, 0x56, 0x34, 0x12]));\n     assert_eq!(TO_NE_BYTES, ident([0x80, 0, 0, 0]));\n }\n-"}, {"sha": "c014e97ef19b806efa9dd5d1ce015aa5a1d4863f", "filename": "src/test/run-pass/const-int-rotate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-rotate.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_int_rotate)]\n-\n const LEFT: u32 = 0x10000b3u32.rotate_left(8);\n const RIGHT: u32 = 0xb301u32.rotate_right(8);\n "}, {"sha": "9d656a020306921d4cc851fa592a32cd39b051fd", "filename": "src/test/run-pass/const-int-sign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_int_sign)]\n-\n const NEGATIVE_A: bool = (-10i32).is_negative();\n const NEGATIVE_B: bool = 10i32.is_negative();\n const POSITIVE_A: bool= (-10i32).is_positive();"}, {"sha": "5ab712015dfc37e42d002d35c46af02212a2c175", "filename": "src/test/run-pass/const-int-wrapping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-wrapping.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_int_wrapping)]\n-\n const ADD_A: u32 = 200u32.wrapping_add(55);\n const ADD_B: u32 = 200u32.wrapping_add(u32::max_value());\n "}, {"sha": "cbe6d864c9c3a7eb35be33cb0679a3a2759e9546", "filename": "src/test/run-pass/consts/const-endianess.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_int_ops)]\n #![feature(test)]\n \n extern crate test;\n@@ -8,7 +7,6 @@ use test::black_box as b;\n const BE_U32: u32 = 55u32.to_be();\n const LE_U32: u32 = 55u32.to_le();\n \n-\n fn main() {\n     assert_eq!(BE_U32, b(55u32).to_be());\n     assert_eq!(LE_U32, b(55u32).to_le());"}, {"sha": "3145c21acc9889b5e7c0a221b1166b288b292e3a", "filename": "src/test/run-pass/ctfe/bswap-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -4,9 +4,9 @@\n \n use std::intrinsics;\n \n-const SWAPPED_U8: u8 = unsafe { intrinsics::bswap(0x12_u8) };\n-const SWAPPED_U16: u16 = unsafe { intrinsics::bswap(0x12_34_u16) };\n-const SWAPPED_I32: i32 = unsafe { intrinsics::bswap(0x12_34_56_78_i32) };\n+const SWAPPED_U8: u8 = intrinsics::bswap(0x12_u8);\n+const SWAPPED_U16: u16 = intrinsics::bswap(0x12_34_u16);\n+const SWAPPED_I32: i32 = intrinsics::bswap(0x12_34_56_78_i32);\n \n fn main() {\n     assert_eq!(SWAPPED_U8, 0x12);"}, {"sha": "0154f0499502959fe95372e12aa730acd6f61217", "filename": "src/test/run-pass/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 109, "deletions": 107, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -16,63 +16,63 @@ mod rusti {\n }\n \n pub fn main() {\n-    unsafe {\n-        use rusti::*;\n-\n-        assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n-        assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n-        assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n-        assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n-        assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n-\n-        assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n-        assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n-        assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n-        assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n-        assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n-\n-        assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n-        assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n-        assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n-        assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n-        assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n-\n-        assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n-        assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n-        assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n-        assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n-        assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n-\n-        assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n-        assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n-        assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n-        assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n-        assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n-\n-        assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n-        assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n-        assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n-        assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n-        assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n-\n-        assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n-        assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n-        assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n-        assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n-        assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n-\n-        assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n-        assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n-        assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n-        assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n-        assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n-\n-        assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n-        assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n-        assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n-        assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n-        assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n+    use rusti::*;\n+\n+    assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n+    assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n+    assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n+    assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n+    assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n+\n+    assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n+    assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n+    assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n+    assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n+    assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n+\n+    assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n+    assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n+    assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n+    assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n+    assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n+\n+    assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n+    assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n+    assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n+    assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n+    assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n+\n+    assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n+    assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n+    assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n+    assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n+    assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n+\n+    assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n+    assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n+    assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n+    assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n+    assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n+\n+    assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n+    assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n+    assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n+    assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n+    assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n+\n+    assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n+    assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n+    assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n+    assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n+    assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n+\n+    assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n+    assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n+    assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n+    assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n+    assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n \n+    unsafe {\n         assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n         assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n         assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n@@ -90,37 +90,39 @@ pub fn main() {\n         assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n         assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n         assert_eq!(ctlz_nonzero(100u128), 121); assert_eq!(ctlz_nonzero(100i128), 121);\n+    }\n \n-        assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n-        assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n-        assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n-        assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n-        assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n-\n-        assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n-        assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n-        assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n-        assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n-        assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n-\n-        assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n-        assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n-        assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n-        assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n-        assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n-\n-        assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n-        assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n-        assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n-        assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n-        assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n-\n-        assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n-        assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n-        assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n-        assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n-        assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n+    assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n+    assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n+    assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n+    assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n+    assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n+\n+    assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n+    assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n+    assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n+    assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n+    assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n+\n+    assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n+    assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n+    assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n+    assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n+    assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n+\n+    assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n+    assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n+    assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n+    assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n+    assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n+\n+    assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n+    assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n+    assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n+    assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n+    assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n \n+    unsafe {\n         assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n         assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n         assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n@@ -144,27 +146,27 @@ pub fn main() {\n         assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n         assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n         assert_eq!(cttz_nonzero(100u128), 2); assert_eq!(cttz_nonzero(100i128), 2);\n-\n-        assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n-        assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n-        assert_eq!(bswap(0x0A0Bu16), 0x0B0A);\n-        assert_eq!(bswap(0x0A0Bi16), 0x0B0A);\n-        assert_eq!(bswap(0x0ABBCC0Du32), 0x0DCCBB0A);\n-        assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n-        assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n-        assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n-        assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n-        assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n-\n-        assert_eq!(bitreverse(0x0Au8), 0x50);\n-        assert_eq!(bitreverse(0x0Ai8), 0x50);\n-        assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n-        assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n-        assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n-        assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n-        assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n-        assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n-        assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n-        assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n     }\n+\n+    assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n+    assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n+    assert_eq!(bswap(0x0A0Bu16), 0x0B0A);\n+    assert_eq!(bswap(0x0A0Bi16), 0x0B0A);\n+    assert_eq!(bswap(0x0ABBCC0Du32), 0x0DCCBB0A);\n+    assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n+    assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n+    assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+    assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n+    assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n+\n+    assert_eq!(bitreverse(0x0Au8), 0x50);\n+    assert_eq!(bitreverse(0x0Ai8), 0x50);\n+    assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n+    assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n+    assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n+    assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n+    assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n+    assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n+    assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n+    assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n }"}, {"sha": "a29723f34b4326239c944eed987d1ae385de3020", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -14,7 +14,7 @@ use std::intrinsics;\n #[derive(Copy, Clone)]\n pub struct Foo(i64);\n \n-pub unsafe fn test_cttz(v: Foo) -> Foo {\n+pub fn test_cttz(v: Foo) -> Foo {\n     intrinsics::cttz(v)\n     //~^ ERROR `cttz` intrinsic: expected basic integer type, found `Foo`\n }"}, {"sha": "8ee029b6cc390295b00c512108a5fa1a4b8da7b1", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "modified", "additions": 113, "deletions": 4, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -2,10 +2,119 @@\n \n use std::intrinsics;\n \n-const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+// The documentation of `unchecked_shl` states that it:\n+//\n+// Performs an unchecked left shift, resulting in undefined behavior when\n+// y < 0 or y >= N, where N is the width of T in bits.\n+//\n+// So we check this for a few `y`.\n+\n+// unsigned types:\n+\n+const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// signed types:\n+\n+const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// and make sure we capture y < 0:\n+\n+const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// and that there's no special relation to the value -1 by picking some\n+// negative values at random:\n+\n+const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n+//~^ ERROR any use of this value will cause an error\n+const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// Repeat it all over for `unchecked_shr`\n+\n+// unsigned types:\n+\n+const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// signed types:\n+\n+const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// and make sure we capture y < 0:\n+\n+const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n+//~^ ERROR any use of this value will cause an error\n+\n+// and that there's no special relation to the value -1 by picking some\n+// negative values at random:\n+\n+const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n+//~^ ERROR any use of this value will cause an error\n+const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n //~^ ERROR any use of this value will cause an error\n-const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n //~^ ERROR any use of this value will cause an error\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "4382d9174b757bbf7bc3e883f3b453ae00168c9a", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 315, "deletions": 11, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=0c91f3d97fe78d31c8cf3abb1858c65d73c6aa17", "patch": "@@ -1,20 +1,324 @@\n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:5:1\n+  --> $DIR/const-int-unchecked.rs:14:1\n    |\n-LL | const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n-   |                          |\n-   |                          Overflowing shift by 8 in unchecked_shr\n+LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                             |\n+   |                             Overflowing shift by 8 in unchecked_shl\n    |\n    = note: #[deny(const_err)] on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/const-int-unchecked.rs:7:1\n+  --> $DIR/const-int-unchecked.rs:16:1\n    |\n-LL | const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n-   |                          |\n-   |                          Overflowing shift by 8 in unchecked_shl\n+LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 16 in unchecked_shl\n \n-error: aborting due to 2 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:18:1\n+   |\n+LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 32 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:20:1\n+   |\n+LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 64 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:22:1\n+   |\n+LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 128 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:27:1\n+   |\n+LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                             |\n+   |                             Overflowing shift by 8 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:29:1\n+   |\n+LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 16 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:31:1\n+   |\n+LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 32 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:33:1\n+   |\n+LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 64 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:35:1\n+   |\n+LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 128 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:40:1\n+   |\n+LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 255 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:42:1\n+   |\n+LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 65535 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:44:1\n+   |\n+LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 4294967295 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:46:1\n+   |\n+LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 18446744073709551615 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:48:1\n+   |\n+LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                     |\n+   |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:54:1\n+   |\n+LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                        |\n+   |                                        Overflowing shift by 250 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:56:1\n+   |\n+LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 65523 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:58:1\n+   |\n+LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 4294967271 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:60:1\n+   |\n+LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 18446744073709551586 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:62:1\n+   |\n+LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                            |\n+   |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shl\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:69:1\n+   |\n+LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                             |\n+   |                             Overflowing shift by 8 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:71:1\n+   |\n+LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 16 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:73:1\n+   |\n+LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 32 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:75:1\n+   |\n+LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 64 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:77:1\n+   |\n+LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 128 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:82:1\n+   |\n+LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                             |\n+   |                             Overflowing shift by 8 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:84:1\n+   |\n+LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 16 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:86:1\n+   |\n+LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 32 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:88:1\n+   |\n+LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                               |\n+   |                               Overflowing shift by 64 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:90:1\n+   |\n+LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 128 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:95:1\n+   |\n+LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                 |\n+   |                                 Overflowing shift by 255 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:97:1\n+   |\n+LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 65535 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:99:1\n+   |\n+LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 4294967295 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:101:1\n+   |\n+LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                   |\n+   |                                   Overflowing shift by 18446744073709551615 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:103:1\n+   |\n+LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                     |\n+   |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:109:1\n+   |\n+LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n+   |                                        |\n+   |                                        Overflowing shift by 250 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:111:1\n+   |\n+LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 65523 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:113:1\n+   |\n+LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 4294967271 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:115:1\n+   |\n+LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n+   |                                          |\n+   |                                          Overflowing shift by 18446744073709551586 in unchecked_shr\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-int-unchecked.rs:117:1\n+   |\n+LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------^^^\n+   |                                            |\n+   |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shr\n+\n+error: aborting due to 40 previous errors\n "}]}