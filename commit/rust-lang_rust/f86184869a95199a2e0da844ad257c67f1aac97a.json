{"sha": "f86184869a95199a2e0da844ad257c67f1aac97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjE4NDg2OWE5NTE5OWEyZTBkYTg0NGFkMjU3YzY3ZjFhYWM5N2E=", "commit": {"author": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2014-07-30T22:56:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-31T18:50:24Z"}, "message": "alloc, arena, test, url, uuid: Elide lifetimes.\n\nSigned-off-by: OGINO Masanori <masanori.ogino@gmail.com>", "tree": {"sha": "5042e78e28e8a5fd15305690af86435d1b7f7b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5042e78e28e8a5fd15305690af86435d1b7f7b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f86184869a95199a2e0da844ad257c67f1aac97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f86184869a95199a2e0da844ad257c67f1aac97a", "html_url": "https://github.com/rust-lang/rust/commit/f86184869a95199a2e0da844ad257c67f1aac97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f86184869a95199a2e0da844ad257c67f1aac97a/comments", "author": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2467c6e5a7fe008c33fdc1060a5ce869d6219a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/2467c6e5a7fe008c33fdc1060a5ce869d6219a92", "html_url": "https://github.com/rust-lang/rust/commit/2467c6e5a7fe008c33fdc1060a5ce869d6219a92"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "35914aa354159ea07caf43f2cf981f81a7f2abe7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f86184869a95199a2e0da844ad257c67f1aac97a", "patch": "@@ -226,7 +226,7 @@ impl<T: Clone> Rc<T> {\n     /// data is cloned if the reference count is greater than one.\n     #[inline]\n     #[experimental]\n-    pub fn make_unique<'a>(&'a mut self) -> &'a mut T {\n+    pub fn make_unique(&mut self) -> &mut T {\n         // Note that we hold a strong reference, which also counts as\n         // a weak reference, so we only clone if there is an\n         // additional reference of either kind.\n@@ -247,7 +247,7 @@ impl<T: Clone> Rc<T> {\n impl<T> Deref<T> for Rc<T> {\n     /// Borrow the value contained in the reference-counted box\n     #[inline(always)]\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         &self.inner().value\n     }\n }\n@@ -390,7 +390,7 @@ impl<T> Clone for Weak<T> {\n \n #[doc(hidden)]\n trait RcBoxPtr<T> {\n-    fn inner<'a>(&'a self) -> &'a RcBox<T>;\n+    fn inner(&self) -> &RcBox<T>;\n \n     #[inline]\n     fn strong(&self) -> uint { self.inner().strong.get() }\n@@ -413,12 +413,12 @@ trait RcBoxPtr<T> {\n \n impl<T> RcBoxPtr<T> for Rc<T> {\n     #[inline(always)]\n-    fn inner<'a>(&'a self) -> &'a RcBox<T> { unsafe { &(*self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> { unsafe { &(*self._ptr) } }\n }\n \n impl<T> RcBoxPtr<T> for Weak<T> {\n     #[inline(always)]\n-    fn inner<'a>(&'a self) -> &'a RcBox<T> { unsafe { &(*self._ptr) } }\n+    fn inner(&self) -> &RcBox<T> { unsafe { &(*self._ptr) } }\n }\n \n #[cfg(test)]"}, {"sha": "5d316cdb51e37ab2f25ac883d64de1290e924d5b", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=f86184869a95199a2e0da844ad257c67f1aac97a", "patch": "@@ -207,7 +207,7 @@ impl Arena {\n     }\n \n     #[inline]\n-    fn alloc_copy<'a, T>(&'a self, op: || -> T) -> &'a T {\n+    fn alloc_copy<T>(&self, op: || -> T) -> &T {\n         unsafe {\n             let ptr = self.alloc_copy_inner(mem::size_of::<T>(),\n                                             mem::min_align_of::<T>());\n@@ -261,7 +261,7 @@ impl Arena {\n     }\n \n     #[inline]\n-    fn alloc_noncopy<'a, T>(&'a self, op: || -> T) -> &'a T {\n+    fn alloc_noncopy<T>(&self, op: || -> T) -> &T {\n         unsafe {\n             let tydesc = get_tydesc::<T>();\n             let (ty_ptr, ptr) =\n@@ -285,7 +285,7 @@ impl Arena {\n     /// Allocate a new item in the arena, using `op` to initialize the value\n     /// and returning a reference to it.\n     #[inline]\n-    pub fn alloc<'a, T>(&'a self, op: || -> T) -> &'a T {\n+    pub fn alloc<T>(&self, op: || -> T) -> &T {\n         unsafe {\n             if intrinsics::needs_drop::<T>() {\n                 self.alloc_noncopy(op)\n@@ -458,13 +458,13 @@ impl<T> TypedArena<T> {\n \n     /// Allocates an object in the TypedArena, returning a reference to it.\n     #[inline]\n-    pub fn alloc<'a>(&'a self, object: T) -> &'a T {\n+    pub fn alloc(&self, object: T) -> &T {\n         if self.ptr == self.end {\n             self.grow()\n         }\n \n-        let ptr: &'a T = unsafe {\n-            let ptr: &'a mut T = mem::transmute(self.ptr);\n+        let ptr: &T = unsafe {\n+            let ptr: &mut T = mem::transmute(self.ptr);\n             ptr::write(ptr, object);\n             self.ptr.set(self.ptr.get().offset(1));\n             ptr"}, {"sha": "9af28e771e1fbd17ec095ecaa050bae91724a636", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=f86184869a95199a2e0da844ad257c67f1aac97a", "patch": "@@ -164,7 +164,7 @@ impl<T: FloatMath + FromPrimitive> Summary<T> {\n     }\n }\n \n-impl<'a,T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n+impl<'a, T: FloatMath + FromPrimitive> Stats<T> for &'a [T] {\n \n     // FIXME #11059 handle NaN, inf and overflow\n     fn sum(self) -> T {"}, {"sha": "0221b95b40434b23c721bdebd3a8df0b6e7cecb9", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=f86184869a95199a2e0da844ad257c67f1aac97a", "patch": "@@ -394,7 +394,7 @@ pub fn decode_form_urlencoded(s: &[u8])\n     }\n }\n \n-fn split_char_first<'a>(s: &'a str, c: char) -> (&'a str, &'a str) {\n+fn split_char_first(s: &str, c: char) -> (&str, &str) {\n     let mut iter = s.splitn(c, 1);\n \n     match (iter.next(), iter.next()) {\n@@ -466,7 +466,7 @@ pub fn query_to_str(query: &Query) -> String {\n /// };\n /// println!(\"Scheme in use: {}.\", scheme); // Scheme in use: https.\n /// ```\n-pub fn get_scheme<'a>(rawurl: &'a str) -> DecodeResult<(&'a str, &'a str)> {\n+pub fn get_scheme(rawurl: &str) -> DecodeResult<(&str, &str)> {\n     for (i,c) in rawurl.chars().enumerate() {\n         let result = match c {\n             'A' .. 'Z'\n@@ -493,8 +493,8 @@ pub fn get_scheme<'a>(rawurl: &'a str) -> DecodeResult<(&'a str, &'a str)> {\n }\n \n // returns userinfo, host, port, and unparsed part, or an error\n-fn get_authority<'a>(rawurl: &'a str) ->\n-    DecodeResult<(Option<UserInfo>, &'a str, Option<u16>, &'a str)> {\n+fn get_authority(rawurl: &str) ->\n+    DecodeResult<(Option<UserInfo>, &str, Option<u16>, &str)> {\n     enum State {\n         Start, // starting state\n         PassHostPort, // could be in user or port\n@@ -662,8 +662,7 @@ fn get_authority<'a>(rawurl: &'a str) ->\n \n \n // returns the path and unparsed part of url, or an error\n-fn get_path<'a>(rawurl: &'a str, is_authority: bool)\n-                                            -> DecodeResult<(String, &'a str)> {\n+fn get_path(rawurl: &str, is_authority: bool) -> DecodeResult<(String, &str)> {\n     let len = rawurl.len();\n     let mut end = len;\n     for (i,c) in rawurl.chars().enumerate() {"}, {"sha": "6a5148c4a9457aae68110616ccb9be9b2bbaf80a", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f86184869a95199a2e0da844ad257c67f1aac97a/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=f86184869a95199a2e0da844ad257c67f1aac97a", "patch": "@@ -313,7 +313,7 @@ impl Uuid {\n     }\n \n     /// Return an array of 16 octets containing the UUID data\n-    pub fn as_bytes<'a>(&'a self) -> &'a [u8] {\n+    pub fn as_bytes(&self) -> &[u8] {\n         self.bytes.as_slice()\n     }\n "}]}