{"sha": "34b1135b59b15d66a2c5db77563f5b6a13deec15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YjExMzViNTliMTVkNjZhMmM1ZGI3NzU2M2Y1YjZhMTNkZWVjMTU=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T00:05:59Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T00:05:59Z"}, "message": "Converted UdpSocket into a newtype struct and (dis)connecting uses move semantics rather than ~.", "tree": {"sha": "5cefdc11ae138ce00e7459f7f937066ffb2ffa31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cefdc11ae138ce00e7459f7f937066ffb2ffa31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34b1135b59b15d66a2c5db77563f5b6a13deec15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34b1135b59b15d66a2c5db77563f5b6a13deec15", "html_url": "https://github.com/rust-lang/rust/commit/34b1135b59b15d66a2c5db77563f5b6a13deec15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34b1135b59b15d66a2c5db77563f5b6a13deec15/comments", "author": null, "committer": null, "parents": [{"sha": "f60468629566ae896e90039f89ef5bb63f920aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60468629566ae896e90039f89ef5bb63f920aef", "html_url": "https://github.com/rust-lang/rust/commit/f60468629566ae896e90039f89ef5bb63f920aef"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "2452441b965732bee142709d4f0bf10d973f5674", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/34b1135b59b15d66a2c5db77563f5b6a13deec15/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b1135b59b15d66a2c5db77563f5b6a13deec15/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=34b1135b59b15d66a2c5db77563f5b6a13deec15", "patch": "@@ -16,31 +16,24 @@ use rt::io::{io_error, read_error, EndOfFile};\n use rt::rtio::{RtioUdpSocketObject, RtioUdpSocket, IoFactory, IoFactoryObject};\n use rt::local::Local;\n \n-pub struct UdpSocket {\n-    rtsocket: ~RtioUdpSocketObject\n-}\n+pub struct UdpSocket(~RtioUdpSocketObject);\n \n impl UdpSocket {\n-    fn new(s: ~RtioUdpSocketObject) -> UdpSocket {\n-        UdpSocket { rtsocket: s }\n-    }\n+    fn new(s: ~RtioUdpSocketObject) -> UdpSocket { UdpSocket(s) }\n \n     pub fn bind(addr: IpAddr) -> Option<UdpSocket> {\n-        let socket = unsafe {\n-            let io = Local::unsafe_borrow::<IoFactoryObject>();\n-            (*io).udp_bind(addr)\n-        };\n+        let socket = unsafe { (*Local::unsafe_borrow::<IoFactoryObject>()).udp_bind(addr) };\n         match socket {\n-            Ok(s) => { Some(UdpSocket { rtsocket: s }) }\n+            Ok(s) => Some(UdpSocket::new(s)),\n             Err(ioerr) => {\n                 io_error::cond.raise(ioerr);\n-                return None;\n+                None\n             }\n         }\n     }\n \n     pub fn recvfrom(&self, buf: &mut [u8]) -> Option<(uint, IpAddr)> {\n-        match (*self.rtsocket).recvfrom(buf) {\n+        match (**self).recvfrom(buf) {\n             Ok((nread, src)) => Some((nread, src)),\n             Err(ioerr) => {\n                 // EOF is indicated by returning None\n@@ -53,34 +46,26 @@ impl UdpSocket {\n     }\n \n     pub fn sendto(&self, buf: &[u8], dst: IpAddr) {\n-        match (*self.rtsocket).sendto(buf, dst) {\n+        match (**self).sendto(buf, dst) {\n             Ok(_) => (),\n-            Err(ioerr) => {\n-                io_error::cond.raise(ioerr);\n-            }\n+            Err(ioerr) => io_error::cond.raise(ioerr),\n         }\n     }\n \n-    // XXX convert ~self to self eventually\n-    pub fn connect(~self, other: IpAddr) -> UdpStream {\n+    pub fn connect(self, other: IpAddr) -> UdpStream {\n         UdpStream { socket: self, connectedTo: other }\n     }\n }\n \n pub struct UdpStream {\n-    socket: ~UdpSocket,\n+    socket: UdpSocket,\n     connectedTo: IpAddr\n }\n \n impl UdpStream {\n-    pub fn as_socket<T>(&self, f: &fn(&UdpSocket) -> T) -> T {\n-        f(self.socket)\n-    }\n+    pub fn as_socket<T>(&self, f: &fn(&UdpSocket) -> T) -> T { f(&self.socket) }\n \n-    pub fn disconnect(self) -> ~UdpSocket {\n-        let UdpStream { socket: s, _ } = self;\n-        s\n-    }\n+    pub fn disconnect(self) -> UdpSocket { self.socket }\n }\n \n impl Reader for UdpStream {"}]}