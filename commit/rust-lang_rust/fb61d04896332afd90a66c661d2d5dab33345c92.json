{"sha": "fb61d04896332afd90a66c661d2d5dab33345c92", "node_id": "C_kwDOAAsO6NoAKGZiNjFkMDQ4OTYzMzJhZmQ5MGE2NmM2NjFkMmQ1ZGFiMzMzNDVjOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T14:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T14:43:51Z"}, "message": "Auto merge of #7669 - Labelray:if_then_panic, r=giraffate\n\nNew lint `if_then_panic`\n\nchangelog: add the new lint [`if_then_panic`]\nfix #7645", "tree": {"sha": "9c97dba66ec04e5dfd3aba1ed9a30e4153abe8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c97dba66ec04e5dfd3aba1ed9a30e4153abe8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb61d04896332afd90a66c661d2d5dab33345c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb61d04896332afd90a66c661d2d5dab33345c92", "html_url": "https://github.com/rust-lang/rust/commit/fb61d04896332afd90a66c661d2d5dab33345c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb61d04896332afd90a66c661d2d5dab33345c92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e38bc16ebcedd379c32849fc455f57f7116cc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e38bc16ebcedd379c32849fc455f57f7116cc86", "html_url": "https://github.com/rust-lang/rust/commit/2e38bc16ebcedd379c32849fc455f57f7116cc86"}, {"sha": "543b638dbe4b559e660c76128eb326533f7ea370", "url": "https://api.github.com/repos/rust-lang/rust/commits/543b638dbe4b559e660c76128eb326533f7ea370", "html_url": "https://github.com/rust-lang/rust/commit/543b638dbe4b559e660c76128eb326533f7ea370"}], "stats": {"total": 292, "additions": 263, "deletions": 29}, "files": [{"sha": "040c906a722b6b9e3cdea674d53216ed172184a4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -2688,6 +2688,7 @@ Released 2018-09-13\n [`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n+[`if_then_panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_panic\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone"}, {"sha": "ee575c81a8b0b69061110b696db5fc9399c85de2", "filename": "clippy_lints/src/if_then_panic.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_panic.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -0,0 +1,97 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::higher::PanicExpn;\n+use clippy_utils::is_expn_of;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, Expr, ExprKind, StmtKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects `if`-then-`panic!` that can be replaced with `assert!`.\n+    ///\n+    /// ### Why is this bad?\n+    /// `assert!` is simpler than `if`-then-`panic!`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let sad_people: Vec<&str> = vec![];\n+    /// if !sad_people.is_empty() {\n+    ///     panic!(\"there are sad people: {:?}\", sad_people);\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let sad_people: Vec<&str> = vec![];\n+    /// assert!(sad_people.is_empty(), \"there are sad people: {:?}\", sad_people);\n+    /// ```\n+    pub IF_THEN_PANIC,\n+    style,\n+    \"`panic!` and only a `panic!` in `if`-then statement\"\n+}\n+\n+declare_lint_pass!(IfThenPanic => [IF_THEN_PANIC]);\n+\n+impl LateLintPass<'_> for IfThenPanic {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let Expr {\n+                kind: ExprKind:: If(cond, Expr {\n+                    kind: ExprKind::Block(\n+                        Block {\n+                            stmts: [stmt],\n+                            ..\n+                        },\n+                        _),\n+                    ..\n+                }, None),\n+                ..\n+            } = &expr;\n+            if is_expn_of(stmt.span, \"panic\").is_some();\n+            if !matches!(cond.kind, ExprKind::Let(_, _, _));\n+            if let StmtKind::Semi(semi) = stmt.kind;\n+            if !cx.tcx.sess.source_map().is_multiline(cond.span);\n+\n+            then {\n+                let span = if let Some(panic_expn) = PanicExpn::parse(semi) {\n+                    match *panic_expn.format_args.value_args {\n+                        [] => panic_expn.format_args.format_string_span,\n+                        [.., last] => panic_expn.format_args.format_string_span.to(last.span),\n+                    }\n+                } else {\n+                    if_chain! {\n+                        if let ExprKind::Block(block, _) = semi.kind;\n+                        if let Some(init) = block.expr;\n+                        if let ExprKind::Call(_, [format_args]) = init.kind;\n+\n+                        then {\n+                            format_args.span\n+                        } else {\n+                            return\n+                        }\n+                    }\n+                };\n+                let mut applicability = Applicability::MachineApplicable;\n+                let sugg = snippet_with_applicability(cx, span, \"..\", &mut applicability);\n+\n+                let cond_sugg =\n+                if let ExprKind::DropTemps(Expr{kind: ExprKind::Unary(UnOp::Not, not_expr), ..}) = cond.kind {\n+                    snippet_with_applicability(cx, not_expr.span, \"..\", &mut applicability).to_string()\n+                } else {\n+                    format!(\"!{}\", snippet_with_applicability(cx, cond.span, \"..\", &mut applicability))\n+                };\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    IF_THEN_PANIC,\n+                    expr.span,\n+                    \"only a `panic!` in `if`-then statement\",\n+                    \"try\",\n+                    format!(\"assert!({}, {});\", cond_sugg, sugg),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "1a69cf0dc88cd99b17ed18f5408bb281ad40a000", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -227,6 +227,7 @@ mod identity_op;\n mod if_let_mutex;\n mod if_let_some_result;\n mod if_not_else;\n+mod if_then_panic;\n mod if_then_some_else_none;\n mod implicit_hasher;\n mod implicit_return;\n@@ -659,6 +660,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         if_let_mutex::IF_LET_MUTEX,\n         if_let_some_result::IF_LET_SOME_RESULT,\n         if_not_else::IF_NOT_ELSE,\n+        if_then_panic::IF_THEN_PANIC,\n         if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n         implicit_hasher::IMPLICIT_HASHER,\n         implicit_return::IMPLICIT_RETURN,\n@@ -1257,6 +1259,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(identity_op::IDENTITY_OP),\n         LintId::of(if_let_mutex::IF_LET_MUTEX),\n         LintId::of(if_let_some_result::IF_LET_SOME_RESULT),\n+        LintId::of(if_then_panic::IF_THEN_PANIC),\n         LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n         LintId::of(infinite_iter::INFINITE_ITER),\n         LintId::of(inherent_to_string::INHERENT_TO_STRING),\n@@ -1511,6 +1514,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(functions::MUST_USE_UNIT),\n         LintId::of(functions::RESULT_UNIT_ERR),\n         LintId::of(if_let_some_result::IF_LET_SOME_RESULT),\n+        LintId::of(if_then_panic::IF_THEN_PANIC),\n         LintId::of(inherent_to_string::INHERENT_TO_STRING),\n         LintId::of(len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),\n@@ -2138,6 +2142,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n+    store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n }\n \n #[rustfmt::skip]"}, {"sha": "273684b8e86c2684d6bbd2f7327d3e754ab2a861", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -561,9 +561,7 @@ declare_lint_pass!(ProduceIce => [PRODUCE_ICE]);\n \n impl EarlyLintPass for ProduceIce {\n     fn check_fn(&mut self, _: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: Span, _: NodeId) {\n-        if is_trigger_fn(fn_kind) {\n-            panic!(\"Would you like some help with that?\");\n-        }\n+        assert!(!is_trigger_fn(fn_kind), \"Would you like some help with that?\");\n     }\n }\n "}, {"sha": "64bd4223c050b0ec90e0ac2d29a63aa5abc5b4ad", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -608,3 +608,33 @@ pub fn is_from_for_desugar(local: &hir::Local<'_>) -> bool {\n \n     false\n }\n+\n+/// A parsed `panic!` expansion\n+pub struct PanicExpn<'tcx> {\n+    /// Span of `panic!(..)`\n+    pub call_site: Span,\n+    /// Inner `format_args!` expansion\n+    pub format_args: FormatArgsExpn<'tcx>,\n+}\n+\n+impl PanicExpn<'tcx> {\n+    /// Parses an expanded `panic!` invocation\n+    pub fn parse(expr: &'tcx Expr<'tcx>) -> Option<Self> {\n+        if_chain! {\n+            if let ExprKind::Block(block, _) = expr.kind;\n+            if let Some(init) = block.expr;\n+            if let ExprKind::Call(_, [format_args]) = init.kind;\n+            let expn_data = expr.span.ctxt().outer_expn_data();\n+            if let ExprKind::AddrOf(_, _, format_args) = format_args.kind;\n+            if let Some(format_args) = FormatArgsExpn::parse(format_args);\n+            then {\n+                Some(PanicExpn {\n+                    call_site: expn_data.call_site,\n+                    format_args,\n+                })\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+}"}, {"sha": "d7596f6ff0cae9e7e78f9c72b438ebb55da6e2e5", "filename": "tests/compile-test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -90,9 +90,11 @@ fn extern_flags() -> String {\n         .copied()\n         .filter(|n| !crates.contains_key(n))\n         .collect();\n-    if !not_found.is_empty() {\n-        panic!(\"dependencies not found in depinfo: {:?}\", not_found);\n-    }\n+    assert!(\n+        not_found.is_empty(),\n+        \"dependencies not found in depinfo: {:?}\",\n+        not_found\n+    );\n     crates\n         .into_iter()\n         .map(|(name, path)| format!(\" --extern {}={}\", name, path))"}, {"sha": "c64425fa01a42a36b8351e934ae81523d75b7129", "filename": "tests/integration.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -74,8 +74,11 @@ fn integration_test() {\n         panic!(\"incompatible crate versions\");\n     } else if stderr.contains(\"failed to run `rustc` to learn about target-specific information\") {\n         panic!(\"couldn't find librustc_driver, consider setting `LD_LIBRARY_PATH`\");\n-    } else if stderr.contains(\"toolchain\") && stderr.contains(\"is not installed\") {\n-        panic!(\"missing required toolchain\");\n+    } else {\n+        assert!(\n+            !stderr.contains(\"toolchain\") || !stderr.contains(\"is not installed\"),\n+            \"missing required toolchain\"\n+        );\n     }\n \n     match output.status.code() {"}, {"sha": "495cd97e05e15d472bef961da5a2e9eab1573814", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::fallible_impl_from)]\n+#![allow(clippy::if_then_panic)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "8b8054586e690ecef0fd4f0b794494d1005616b7", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -1,5 +1,5 @@\n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:5:1\n+  --> $DIR/fallible_impl_from.rs:6:1\n    |\n LL | / impl From<String> for Foo {\n LL | |     fn from(s: String) -> Self {\n@@ -15,13 +15,13 @@ LL | #![deny(clippy::fallible_impl_from)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:7:13\n+  --> $DIR/fallible_impl_from.rs:8:13\n    |\n LL |         Foo(s.parse().unwrap())\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:26:1\n+  --> $DIR/fallible_impl_from.rs:27:1\n    |\n LL | / impl From<usize> for Invalid {\n LL | |     fn from(i: usize) -> Invalid {\n@@ -34,14 +34,14 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:29:13\n+  --> $DIR/fallible_impl_from.rs:30:13\n    |\n LL |             panic!();\n    |             ^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:35:1\n+  --> $DIR/fallible_impl_from.rs:36:1\n    |\n LL | / impl From<Option<String>> for Invalid {\n LL | |     fn from(s: Option<String>) -> Invalid {\n@@ -54,7 +54,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:37:17\n+  --> $DIR/fallible_impl_from.rs:38:17\n    |\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL |             panic!(\"{:?}\", s);\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:53:1\n+  --> $DIR/fallible_impl_from.rs:54:1\n    |\n LL | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n LL | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n@@ -81,7 +81,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:55:12\n+  --> $DIR/fallible_impl_from.rs:56:12\n    |\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fc57ae0dfa5ee0a50a919966ebff18bcc03878ad", "filename": "tests/ui/if_then_panic.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.fixed?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![warn(clippy::if_then_panic)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+    assert!(a.is_empty(), \"qwqwq\");\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+}"}, {"sha": "d1ac93d8d413ccedbb5208f38e47c47c7b449b10", "filename": "tests/ui/if_then_panic.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+#![warn(clippy::if_then_panic)]\n+\n+fn main() {\n+    let a = vec![1, 2, 3];\n+    let c = Some(2);\n+    if !a.is_empty()\n+        && a.len() == 3\n+        && c != None\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+        && !a.is_empty()\n+        && a.len() == 3\n+    {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    if !a.is_empty() {\n+        panic!(\"qaqaq{:?}\", a);\n+    }\n+    if !a.is_empty() {\n+        panic!(\"qwqwq\");\n+    }\n+    if a.len() == 3 {\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+        println!(\"qwq\");\n+    }\n+    if let Some(b) = c {\n+        panic!(\"orz {}\", b);\n+    }\n+    if a.len() == 3 {\n+        panic!(\"qaqaq\");\n+    } else {\n+        println!(\"qwq\");\n+    }\n+}"}, {"sha": "b92c9bdf67430872509c0da4429b0d04dde498e1", "filename": "tests/ui/if_then_panic.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fif_then_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_then_panic.stderr?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -0,0 +1,20 @@\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:19:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qaqaq{:?}\", a);\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   |\n+   = note: `-D clippy::if-then-panic` implied by `-D warnings`\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/if_then_panic.rs:22:5\n+   |\n+LL | /     if !a.is_empty() {\n+LL | |         panic!(\"qwqwq\");\n+LL | |     }\n+   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "99e6d2aad8dd6b46ac5229da0866d36218688f0a", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -1,4 +1,9 @@\n-#![allow(unused, clippy::redundant_clone)]\n+#![allow(\n+    unused,\n+    clippy::many_single_char_names,\n+    clippy::redundant_clone,\n+    clippy::if_then_panic\n+)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;"}, {"sha": "42183447ead737cf34275a3fe9be5edf01a406c4", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb61d04896332afd90a66c661d2d5dab33345c92/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=fb61d04896332afd90a66c661d2d5dab33345c92", "patch": "@@ -1,31 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:7:14\n+  --> $DIR/ptr_arg.rs:12:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:16:14\n+  --> $DIR/ptr_arg.rs:21:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:25:15\n+  --> $DIR/ptr_arg.rs:30:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:38:18\n+  --> $DIR/ptr_arg.rs:43:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:51:14\n+  --> $DIR/ptr_arg.rs:56:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:60:18\n+  --> $DIR/ptr_arg.rs:65:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -67,7 +67,7 @@ LL |     x.to_string()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:68:19\n+  --> $DIR/ptr_arg.rs:73:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:76:44\n+  --> $DIR/ptr_arg.rs:81:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -109,13 +109,13 @@ LL |     let c = y;\n    |             ~\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:90:25\n+  --> $DIR/ptr_arg.rs:95:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:143:21\n+  --> $DIR/ptr_arg.rs:148:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         let _ = vec.to_owned().clone();\n    |                 ~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:148:23\n+  --> $DIR/ptr_arg.rs:153:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -153,7 +153,7 @@ LL |         let _ = path.to_path_buf().clone();\n    |                 ~~~~~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:153:21\n+  --> $DIR/ptr_arg.rs:158:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^"}]}