{"sha": "8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NzBlOGJjZjYxNTNkMWVhZDIyODNmMWEwZWQ3YjE5MjIzMGVjYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-23T17:53:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-23T17:53:54Z"}, "message": "Auto merge of #72504 - Dylan-DPC:rollup-6wi1ifz, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #72292 (Replace obligation construction with deref_steps())\n - #72431 (add warning sign to UB examples)\n - #72446 (Impl Ord for proc_macro::LineColumn)\n - #72492 (Add some regression tests)\n - #72496 (Correct small typo: 'not' -> 'note')\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f8af85f4ef103eff49a78548336f8c2119e1a608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8af85f4ef103eff49a78548336f8c2119e1a608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "html_url": "https://github.com/rust-lang/rust/commit/8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b0a68f35a06fc7aed8aa95831df8eace4afffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "html_url": "https://github.com/rust-lang/rust/commit/75b0a68f35a06fc7aed8aa95831df8eace4afffb"}, {"sha": "a03bf3f5f5694084a3e84ea6fa2a0f3f189044d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a03bf3f5f5694084a3e84ea6fa2a0f3f189044d6", "html_url": "https://github.com/rust-lang/rust/commit/a03bf3f5f5694084a3e84ea6fa2a0f3f189044d6"}], "stats": {"total": 193, "additions": 115, "deletions": 78}, "files": [{"sha": "01c97444ae3aea20c7ab3e2b4a764dbb25bb25a6", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -20,9 +20,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior!\n+/// let x: &i32 = unsafe { mem::zeroed() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<&i32>`:\n-/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior!\n+/// let x: &i32 = unsafe { MaybeUninit::zeroed().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// This is exploited by the compiler for various optimizations, such as eliding\n@@ -35,9 +35,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let b: bool = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<bool>`:\n-/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let b: bool = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n ///\n /// Moreover, uninitialized memory is special in that the compiler knows that\n@@ -49,9 +49,9 @@ use crate::mem::ManuallyDrop;\n /// # #![allow(invalid_value)]\n /// use std::mem::{self, MaybeUninit};\n ///\n-/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior!\n+/// let x: i32 = unsafe { mem::uninitialized() }; // undefined behavior! \u26a0\ufe0f\n /// // The equivalent code with `MaybeUninit<i32>`:\n-/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior!\n+/// let x: i32 = unsafe { MaybeUninit::uninit().assume_init() }; // undefined behavior! \u26a0\ufe0f\n /// ```\n /// (Notice that the rules around uninitialized integers are not finalized yet, but\n /// until they are, it is advisable to avoid them.)\n@@ -348,7 +348,7 @@ impl<T> MaybeUninit<T> {\n     /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n     /// let x = unsafe { x.assume_init() };\n     /// // Inside a pair, we create a `NotZero` that does not have a valid discriminant.\n-    /// // This is undefined behavior.\n+    /// // This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline]\n@@ -400,7 +400,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &*x.as_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -437,7 +437,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n@@ -489,7 +489,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_init = unsafe { x.assume_init() };\n-    /// // `x` had not been initialized yet, so this last line caused undefined behavior.\n+    /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n@@ -553,7 +553,7 @@ impl<T> MaybeUninit<T> {\n     /// x.write(Some(vec![0,1,2]));\n     /// let x1 = unsafe { x.read() };\n     /// let x2 = unsafe { x.read() };\n-    /// // We now created two copies of the same vector, leading to a double-free when\n+    /// // We now created two copies of the same vector, leading to a double-free \u26a0\ufe0f when\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n@@ -603,7 +603,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// let x = MaybeUninit::<Vec<u32>>::uninit();\n     /// let x_vec: &Vec<u32> = unsafe { x.get_ref() };\n-    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior. \u26a0\ufe0f\n     /// ```\n     ///\n     /// ```rust,no_run\n@@ -686,7 +686,7 @@ impl<T> MaybeUninit<T> {\n     /// unsafe {\n     ///     *b.get_mut() = true;\n     ///     // We have created a (mutable) reference to an uninitialized `bool`!\n-    ///     // This is undefined behavior.\n+    ///     // This is undefined behavior. \u26a0\ufe0f\n     /// }\n     /// ```\n     ///"}, {"sha": "2d5bd7e872bd5923856cbb0dbfbf256f899ea4c3", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -39,6 +39,7 @@ mod diagnostic;\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n+use std::cmp::Ordering;\n use std::ops::{Bound, RangeBounds};\n use std::path::PathBuf;\n use std::str::FromStr;\n@@ -420,6 +421,20 @@ impl !Send for LineColumn {}\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl !Sync for LineColumn {}\n \n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+impl Ord for LineColumn {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.line.cmp(&other.line).then(self.column.cmp(&other.column))\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+impl PartialOrd for LineColumn {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n /// The source file of a given `Span`.\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Clone)]"}, {"sha": "331b330cf29f06326d9c34b621cceb41c20d4465", "filename": "src/libproc_macro/tests/test.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibproc_macro%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibproc_macro%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Ftests%2Ftest.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -0,0 +1,12 @@\n+#![feature(proc_macro_span)]\n+\n+use proc_macro::LineColumn;\n+\n+#[test]\n+fn test_line_column_ord() {\n+    let line0_column0 = LineColumn { line: 0, column: 0 };\n+    let line0_column1 = LineColumn { line: 0, column: 1 };\n+    let line1_column0 = LineColumn { line: 1, column: 0 };\n+    assert!(line0_column0 < line0_column1);\n+    assert!(line0_column1 < line1_column0);\n+}"}, {"sha": "a324bd03eca8f7f234c723254b1c30e33168cc29", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -887,7 +887,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let coerce = Coerce::new(self, cause, AllowTwoPhase::No);\n         coerce\n             .autoderef(rustc_span::DUMMY_SP, expr_ty)\n-            .find_map(|(ty, steps)| coerce.unify(ty, target).ok().map(|_| steps))\n+            .find_map(|(ty, steps)| self.probe(|_| coerce.unify(ty, target)).ok().map(|_| steps))\n     }\n \n     /// Given some expressions, their known unified type and another expression,"}, {"sha": "700b9359d06ed40fd4f6bdf91c068bd993396710", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -1,16 +1,15 @@\n use crate::check::FnCtxt;\n use rustc_infer::infer::InferOk;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause};\n+use rustc_trait_selection::traits::ObligationCause;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::{CloneTraitLangItem, DerefTraitLangItem};\n+use rustc_hir::lang_items::CloneTraitLangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n-use rustc_middle::ty::{self, AssocItem, ToPredicate, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -633,48 +632,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             _ if sp == expr.span && !is_macro => {\n-                // Check for `Deref` implementations by constructing a predicate to\n-                // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(sp));\n-                let item_def_id = self\n-                    .tcx\n-                    .associated_items(deref_trait)\n-                    .in_definition_order()\n-                    .find(|item| item.kind == ty::AssocKind::Type)\n-                    .unwrap()\n-                    .def_id;\n-                let predicate =\n-                    ty::PredicateKind::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n-                        // `<T as Deref>::Output`\n-                        projection_ty: ty::ProjectionTy {\n-                            // `T`\n-                            substs: self.tcx.intern_substs(&[checked_ty.into()]),\n-                            // `Deref::Output`\n-                            item_def_id,\n-                        },\n-                        // `U`\n-                        ty: expected,\n-                    }))\n-                    .to_predicate(self.tcx);\n-                let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n-                let impls_deref = self.infcx.predicate_may_hold(&obligation);\n-\n-                // For a suggestion to make sense, the type would need to be `Copy`.\n-                let is_copy = self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp);\n-\n-                if is_copy && impls_deref {\n-                    if let Ok(code) = sm.span_to_snippet(sp) {\n-                        let message = if checked_ty.is_region_ptr() {\n-                            \"consider dereferencing the borrow\"\n-                        } else {\n-                            \"consider dereferencing the type\"\n-                        };\n-                        let suggestion = if is_struct_pat_shorthand_field {\n-                            format!(\"{}: *{}\", code, code)\n-                        } else {\n-                            format!(\"*{}\", code)\n-                        };\n-                        return Some((sp, message, suggestion, Applicability::MachineApplicable));\n+                if let Some(steps) = self.deref_steps(checked_ty, expected) {\n+                    if steps == 1 {\n+                        // For a suggestion to make sense, the type would need to be `Copy`.\n+                        if self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp) {\n+                            if let Ok(code) = sm.span_to_snippet(sp) {\n+                                let message = if checked_ty.is_region_ptr() {\n+                                    \"consider dereferencing the borrow\"\n+                                } else {\n+                                    \"consider dereferencing the type\"\n+                                };\n+                                let suggestion = if is_struct_pat_shorthand_field {\n+                                    format!(\"{}: *{}\", code, code)\n+                                } else {\n+                                    format!(\"*{}\", code)\n+                                };\n+                                return Some((\n+                                    sp,\n+                                    message,\n+                                    suggestion,\n+                                    Applicability::MachineApplicable,\n+                                ));\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "deb9eb5b4b05cf79f78e67fd4e7fa17c385decfd", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -882,7 +882,7 @@ impl f32 {\n     /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n     /// less than `min`. Otherwise this returns `self`.\n     ///\n-    /// Not that this function returns NaN if the initial value was NaN as\n+    /// Note that this function returns NaN if the initial value was NaN as\n     /// well.\n     ///\n     /// # Panics"}, {"sha": "b79e550ed265edf424c84f85a7161cb33c447d5c", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -884,7 +884,7 @@ impl f64 {\n     /// Returns `max` if `self` is greater than `max`, and `min` if `self` is\n     /// less than `min`. Otherwise this returns `self`.\n     ///\n-    /// Not that this function returns NaN if the initial value was NaN as\n+    /// Note that this function returns NaN if the initial value was NaN as\n     /// well.\n     ///\n     /// # Panics"}, {"sha": "9bce274027ee00186f26297d5012223a47ec96fb", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -1,3 +1,6 @@\n+// compile-flags: -Zsave-analysis\n+// This is also a regression test for #69415 and the above flag is needed.\n+\n #![feature(untagged_unions)]\n \n trait Tr1 { type As1: Copy; }"}, {"sha": "7f2704e1bc3715b314b28e557ad5535011452ed1", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:12:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     type A: Iterator<Item: Copy>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:18:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type B: Iterator<Item: 'static>;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:19:20\n+  --> $DIR/feature-gate-associated_type_bounds.rs:22:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n@@ -26,7 +26,7 @@ LL | struct _St1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:26:18\n+  --> $DIR/feature-gate-associated_type_bounds.rs:29:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n@@ -35,7 +35,7 @@ LL | enum _En1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:33:19\n+  --> $DIR/feature-gate-associated_type_bounds.rs:36:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n@@ -44,7 +44,7 @@ LL | union _Un1<T: Tr1<As1: Tr2>> {\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:40:37\n+  --> $DIR/feature-gate-associated_type_bounds.rs:43:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n@@ -53,7 +53,7 @@ LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:43:22\n+  --> $DIR/feature-gate-associated_type_bounds.rs:46:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:45:26\n+  --> $DIR/feature-gate-associated_type_bounds.rs:48:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:48:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:51:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:51:31\n+  --> $DIR/feature-gate-associated_type_bounds.rs:54:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:54:23\n+  --> $DIR/feature-gate-associated_type_bounds.rs:57:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:60:24\n+  --> $DIR/feature-gate-associated_type_bounds.rs:63:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:67:21\n+  --> $DIR/feature-gate-associated_type_bounds.rs:70:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n@@ -116,23 +116,23 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:57:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:60:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:63:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:67:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:70:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b6c3bb222876d8a8159b94423a62d09f58539783", "filename": "src/test/ui/issues/issue-72455.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8970e8bcf6153d1ead2283f1a0ed7b192230eca6/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72455.rs?ref=8970e8bcf6153d1ead2283f1a0ed7b192230eca6", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+pub trait ResultExt {\n+    type Ok;\n+    fn err_eprint_and_ignore(self) -> Option<Self::Ok>;\n+}\n+\n+impl<O, E> ResultExt for std::result::Result<O, E>\n+where\n+    E: std::error::Error,\n+{\n+    type Ok = O;\n+    fn err_eprint_and_ignore(self) -> Option<O>\n+    where\n+        Self: ,\n+    {\n+        match self {\n+            Err(e) => {\n+                eprintln!(\"{}\", e);\n+                None\n+            }\n+            Ok(o) => Some(o),\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}