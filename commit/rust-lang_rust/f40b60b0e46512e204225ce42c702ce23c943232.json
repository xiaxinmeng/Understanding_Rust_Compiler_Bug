{"sha": "f40b60b0e46512e204225ce42c702ce23c943232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MGI2MGIwZTQ2NTEyZTIwNDIyNWNlNDJjNzAyY2UyM2M5NDMyMzI=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-09-27T16:15:31Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-10-08T12:36:30Z"}, "message": "librustdoc/html: recognize slices not to nest A tags.\n\n1. A slice of parametrized type, say\n   BorrowedRef { ... Vector(Generic(T)) }, is rendered as\n   \"<a href='primitive.slice.html'>&amp;[T]</a>\"\n2. A slice of other types, say\n   BorrowedRef { ... Vector(int) }, is rendered as\n   \"<a href='primitive.slice.html'>&amp;[</a>\n    <a href='primitive.int.html'>int</a>\n    <a href='primitive.slice.html'>]</a>\"\n3. Other cases, say BorrowedRef { ... int }, are\n   rendered as same as before:\n   \"&<a href='primitive.int.html'>int</a>\"\n\nRelevant W3C specs:\n- http://www.w3.org/TR/html401/struct/links.html#h-12.2.2\n  12.2.2 Nested links are illegal\n- http://www.w3.org/TR/html5/text-level-semantics.html#the-a-element\n  states A tag must not enclose any \"interactive contents\"\n  which include A tags themselves.", "tree": {"sha": "19f42794f256b98fe3e2782471268afd73b1195a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19f42794f256b98fe3e2782471268afd73b1195a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f40b60b0e46512e204225ce42c702ce23c943232", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f40b60b0e46512e204225ce42c702ce23c943232", "html_url": "https://github.com/rust-lang/rust/commit/f40b60b0e46512e204225ce42c702ce23c943232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f40b60b0e46512e204225ce42c702ce23c943232/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc649ba8f803913a23c767d57be01c693cd03d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc649ba8f803913a23c767d57be01c693cd03d8a", "html_url": "https://github.com/rust-lang/rust/commit/bc649ba8f803913a23c767d57be01c693cd03d8a"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "02ba4aabc9919f79d60415bbdf60524c464e1ec4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f40b60b0e46512e204225ce42c702ce23c943232/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f40b60b0e46512e204225ce42c702ce23c943232/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f40b60b0e46512e204225ce42c702ce23c943232", "patch": "@@ -478,7 +478,25 @@ impl fmt::Show for clean::Type {\n                     Some(ref l) => format!(\"{} \", *l),\n                     _ => \"\".to_string(),\n                 };\n-                write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n+                let m = MutableSpace(mutability);\n+                match **ty {\n+                    clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n+                        match **bt {\n+                            clean::Generic(_) =>\n+                                primitive_link(f, clean::Slice,\n+                                    format!(\"&amp;{}{}[{}]\", lt, m, **bt).as_slice()),\n+                            _ => {\n+                                try!(primitive_link(f, clean::Slice,\n+                                    format!(\"&amp;{}{}[\", lt, m).as_slice()));\n+                                try!(write!(f, \"{}\", **bt));\n+                                primitive_link(f, clean::Slice, \"]\")\n+                            }\n+                        }\n+                    }\n+                    _ => {\n+                        write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n+                    }\n+                }\n             }\n             clean::Unique(..) => {\n                 fail!(\"should have been cleaned\")"}]}