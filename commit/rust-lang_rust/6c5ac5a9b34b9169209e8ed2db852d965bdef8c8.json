{"sha": "6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNWFjNWE5YjM0YjkxNjkyMDllOGVkMmRiODUyZDk2NWJkZWY4Yzg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-26T07:54:41Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T04:52:25Z"}, "message": "Remove needless borrows", "tree": {"sha": "c563ccf0fe04dfea8503e4f42f962b9e173fc9ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c563ccf0fe04dfea8503e4f42f962b9e173fc9ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "html_url": "https://github.com/rust-lang/rust/commit/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314c97387d3e46dce1a939d16788b917dd4420e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/314c97387d3e46dce1a939d16788b917dd4420e8", "html_url": "https://github.com/rust-lang/rust/commit/314c97387d3e46dce1a939d16788b917dd4420e8"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "6a6e982912a7966f622bea2cb603e37e21641c81", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "patch": "@@ -75,7 +75,7 @@ pub fn format_expr(\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi(), expr.span.hi());\n             let callee_str = callee.rewrite(context, shape)?;\n-            rewrite_call(context, &callee_str, &args, inner_span, shape)\n+            rewrite_call(context, &callee_str, args, inner_span, shape)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n@@ -101,7 +101,7 @@ pub fn format_expr(\n             shape,\n         ),\n         ast::ExprKind::Tup(ref items) => {\n-            rewrite_tuple(context, &ptr_vec_to_ref_vec(&items), expr.span, shape)\n+            rewrite_tuple(context, &ptr_vec_to_ref_vec(items), expr.span, shape)\n         }\n         ast::ExprKind::If(..) |\n         ast::ExprKind::IfLet(..) |\n@@ -355,7 +355,7 @@ where\n             .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n             let one_line_width = last_line_width(&lhs_result) + infix.len()\n-                + first_line_width(&rhs_result) + suffix.len();\n+                + first_line_width(rhs_result) + suffix.len();\n             if one_line_width <= shape.width {\n                 return Some(format!(\"{}{}{}{}\", lhs_result, infix, rhs_result, suffix));\n             }\n@@ -2004,7 +2004,7 @@ pub fn rewrite_call(\n     rewrite_call_inner(\n         context,\n         callee,\n-        &ptr_vec_to_ref_vec(&args),\n+        &ptr_vec_to_ref_vec(args),\n         span,\n         shape,\n         context.config.fn_call_width(),"}, {"sha": "a44206df0496b28de01d3a7bd2fe57e43c063f1b", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "patch": "@@ -292,7 +292,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             Some(ref s) => {\n                 self.format_missing_with_indent(source!(self, span).lo());\n-                self.buffer.push_str(&s);\n+                self.buffer.push_str(s);\n                 self.last_pos = source!(self, span).hi();\n             }\n             None => {"}, {"sha": "c85f2fd5e628665800dcdb1e6b4134272ea8f027", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "patch": "@@ -215,7 +215,7 @@ impl<'a> FnSig<'a> {\n                 unsafety: unsafety,\n                 visibility: visibility.clone(),\n             },\n-            visit::FnKind::Method(_, ref method_sig, vis, _) => {\n+            visit::FnKind::Method(_, method_sig, vis, _) => {\n                 let mut fn_sig = FnSig::from_method_sig(method_sig, generics);\n                 fn_sig.defaultness = defualtness;\n                 if let Some(vis) = vis {\n@@ -2318,16 +2318,16 @@ fn rewrite_generics_inner(\n     impl<'a> Rewrite for GenericsArg<'a> {\n         fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n             match *self {\n-                GenericsArg::Lifetime(ref lifetime) => lifetime.rewrite(context, shape),\n-                GenericsArg::TyParam(ref ty) => ty.rewrite(context, shape),\n+                GenericsArg::Lifetime(lifetime) => lifetime.rewrite(context, shape),\n+                GenericsArg::TyParam(ty) => ty.rewrite(context, shape),\n             }\n         }\n     }\n     impl<'a> Spanned for GenericsArg<'a> {\n         fn span(&self) -> Span {\n             match *self {\n-                GenericsArg::Lifetime(ref lifetime) => lifetime.span(),\n-                GenericsArg::TyParam(ref ty) => ty.span(),\n+                GenericsArg::Lifetime(lifetime) => lifetime.span(),\n+                GenericsArg::TyParam(ty) => ty.span(),\n             }\n         }\n     }"}, {"sha": "42c31da35039a3ef3d70e5a898d8521416cf5f99", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "patch": "@@ -70,10 +70,10 @@ pub enum MacroArg {\n \n impl Rewrite for MacroArg {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        match self {\n-            &MacroArg::Expr(ref expr) => expr.rewrite(context, shape),\n-            &MacroArg::Ty(ref ty) => ty.rewrite(context, shape),\n-            &MacroArg::Pat(ref pat) => pat.rewrite(context, shape),\n+        match *self {\n+            MacroArg::Expr(ref expr) => expr.rewrite(context, shape),\n+            MacroArg::Ty(ref ty) => ty.rewrite(context, shape),\n+            MacroArg::Pat(ref pat) => pat.rewrite(context, shape),\n         }\n     }\n }"}, {"sha": "a0b3a7c196a0ada34d12d38c13d09d33a97a0a3c", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5ac5a9b34b9169209e8ed2db852d965bdef8c8/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6c5ac5a9b34b9169209e8ed2db852d965bdef8c8", "patch": "@@ -695,7 +695,7 @@ impl Rewrite for ast::Ty {\n             }\n             ast::TyKind::Tup(ref items) => rewrite_tuple(\n                 context,\n-                &::utils::ptr_vec_to_ref_vec(&items),\n+                &::utils::ptr_vec_to_ref_vec(items),\n                 self.span,\n                 shape,\n             ),"}]}