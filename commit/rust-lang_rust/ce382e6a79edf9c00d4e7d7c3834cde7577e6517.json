{"sha": "ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzgyZTZhNzllZGY5YzAwZDRlN2Q3YzM4MzRjZGU3NTc3ZTY1MTc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-20T21:22:17Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-20T21:22:17Z"}, "message": "Refactor a bit", "tree": {"sha": "561d2f7d88aa6019a44cd20c2ecdadaff344e033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561d2f7d88aa6019a44cd20c2ecdadaff344e033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "html_url": "https://github.com/rust-lang/rust/commit/ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce382e6a79edf9c00d4e7d7c3834cde7577e6517/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd350108b0d1be67e86b93a94c324317a00b57cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd350108b0d1be67e86b93a94c324317a00b57cd", "html_url": "https://github.com/rust-lang/rust/commit/bd350108b0d1be67e86b93a94c324317a00b57cd"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "673f80a7ab02aed8aedb0c79bbe14194cf60de00", "filename": "crates/ra_proc_macro/src/process.rs", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ce382e6a79edf9c00d4e7d7c3834cde7577e6517/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce382e6a79edf9c00d4e7d7c3834cde7577e6517/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Fprocess.rs?ref=ce382e6a79edf9c00d4e7d7c3834cde7577e6517", "patch": "@@ -28,60 +28,6 @@ pub(crate) struct ProcMacroProcessThread {\n     handle: jod_thread::JoinHandle<()>,\n }\n \n-struct Task {\n-    req: Request,\n-    result_tx: Sender<Option<Response>>,\n-}\n-\n-struct Process {\n-    path: PathBuf,\n-    args: Vec<OsString>,\n-    child: Child,\n-}\n-\n-impl Drop for Process {\n-    fn drop(&mut self) {\n-        let _ = self.child.kill();\n-    }\n-}\n-\n-impl Process {\n-    fn run(\n-        path: PathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-    ) -> io::Result<Process> {\n-        let args = args.into_iter().map(|s| s.as_ref().into()).collect();\n-\n-        let child = Command::new(&path)\n-            .args(&args)\n-            .stdin(Stdio::piped())\n-            .stdout(Stdio::piped())\n-            .stderr(Stdio::null())\n-            .spawn()?;\n-\n-        Ok(Process { path, args, child })\n-    }\n-\n-    fn restart(&mut self) -> io::Result<()> {\n-        let _ = self.child.kill();\n-        self.child = Command::new(&self.path)\n-            .args(&self.args)\n-            .stdin(Stdio::piped())\n-            .stdout(Stdio::piped())\n-            .stderr(Stdio::null())\n-            .spawn()?;\n-        Ok(())\n-    }\n-\n-    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n-        let stdin = self.child.stdin.take()?;\n-        let stdout = self.child.stdout.take()?;\n-        let read = BufReader::new(stdout);\n-\n-        Some((stdin, read))\n-    }\n-}\n-\n impl ProcMacroProcessSrv {\n     pub fn run(\n         process_path: PathBuf,\n@@ -196,6 +142,57 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n     }\n }\n \n+struct Task {\n+    req: Request,\n+    result_tx: Sender<Option<Response>>,\n+}\n+\n+struct Process {\n+    path: PathBuf,\n+    args: Vec<OsString>,\n+    child: Child,\n+}\n+\n+impl Drop for Process {\n+    fn drop(&mut self) {\n+        let _ = self.child.kill();\n+    }\n+}\n+\n+impl Process {\n+    fn run(\n+        path: PathBuf,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+    ) -> io::Result<Process> {\n+        let args = args.into_iter().map(|s| s.as_ref().into()).collect();\n+        let child = mk_child(&path, &args)?;\n+        Ok(Process { path, args, child })\n+    }\n+\n+    fn restart(&mut self) -> io::Result<()> {\n+        let _ = self.child.kill();\n+        self.child = mk_child(&self.path, &self.args)?;\n+        Ok(())\n+    }\n+\n+    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n+        let stdin = self.child.stdin.take()?;\n+        let stdout = self.child.stdout.take()?;\n+        let read = BufReader::new(stdout);\n+\n+        Some((stdin, read))\n+    }\n+}\n+\n+fn mk_child(path: &Path, args: impl IntoIterator<Item = impl AsRef<OsStr>>) -> io::Result<Child> {\n+    Command::new(&path)\n+        .args(args)\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .stderr(Stdio::null())\n+        .spawn()\n+}\n+\n fn send_request(\n     mut writer: &mut impl Write,\n     mut reader: &mut impl BufRead,"}]}