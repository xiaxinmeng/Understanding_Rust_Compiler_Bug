{"sha": "052495d0017e2b18b781bcf0469a048e5051f5c0", "node_id": "C_kwDOAAsO6NoAKDA1MjQ5NWQwMDE3ZTJiMThiNzgxYmNmMDQ2OWEwNDhlNTA1MWY1YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T17:55:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T17:55:26Z"}, "message": "Auto merge of #98614 - oli-obk:take_unsound_opaque_types, r=wesleywiser\n\ndon't succeed `evaluate_obligation` query if new opaque types were registered\n\nfixes #98608\nfixes #98604\n\nThe root cause of all this is that in type flag computation we entirely ignore nongeneric things like struct fields and the signature of function items. So if a flag had to be set for a struct if it is set for a field, that will only happen if the field is generic, as only the generic parameters are checked.\n\nI now believe we cannot use type flags to handle opaque types. They seem like the wrong tool for this.\n\nInstead, this PR replaces the previous logic by adding a new variant of `EvaluatedToOk`: `EvaluatedToOkModuloOpaqueTypes`, which says that there were some opaque types that got hidden types bound, but that binding may not have been legal (because we don't know if the opaque type was in its defining scope or not).", "tree": {"sha": "16023f6d02c5eea4ced47ce568101df49b193d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16023f6d02c5eea4ced47ce568101df49b193d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052495d0017e2b18b781bcf0469a048e5051f5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052495d0017e2b18b781bcf0469a048e5051f5c0", "html_url": "https://github.com/rust-lang/rust/commit/052495d0017e2b18b781bcf0469a048e5051f5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052495d0017e2b18b781bcf0469a048e5051f5c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45263fc66d253f762b3880764ae48611a25bf887", "url": "https://api.github.com/repos/rust-lang/rust/commits/45263fc66d253f762b3880764ae48611a25bf887", "html_url": "https://github.com/rust-lang/rust/commit/45263fc66d253f762b3880764ae48611a25bf887"}, {"sha": "d6b93eb79352149bae0fd1efc0bb181947a9e6f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b93eb79352149bae0fd1efc0bb181947a9e6f1", "html_url": "https://github.com/rust-lang/rust/commit/d6b93eb79352149bae0fd1efc0bb181947a9e6f1"}], "stats": {"total": 303, "additions": 116, "deletions": 187}, "files": [{"sha": "28f037cc61a76136e2c67d06b52ee6ee76c7c618", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -888,6 +888,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)\n     }\n \n+    pub fn opaque_types_added_in_snapshot(&self, snapshot: &CombinedSnapshot<'a, 'tcx>) -> bool {\n+        self.inner.borrow().undo_log.opaque_types_in_snapshot(&snapshot.undo_snapshot)\n+    }\n+\n     pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {\n         self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);\n     }"}, {"sha": "f11701bba6f43d61bec267fa252f0ff9b24698c5", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(def_id, substs) if def_id.is_local() => {\n                 let origin = if self.defining_use_anchor.is_some() {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose"}, {"sha": "74a26ebc39f817c0673c1e86e9595312c4d9d8b1", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -185,6 +185,10 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         })\n     }\n \n+    pub(crate) fn opaque_types_in_snapshot(&self, s: &Snapshot<'tcx>) -> bool {\n+        self.logs[s.undo_len..].iter().any(|log| matches!(log, UndoLog::OpaqueTypes(..)))\n+    }\n+\n     pub(crate) fn region_constraints(\n         &self,\n     ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {"}, {"sha": "5d22f9f972e10626b34adecb59283ba04905db0e", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -203,7 +203,7 @@ impl<'tcx> ProjectionCache<'_, 'tcx> {\n             Some(&ProjectionCacheEntry::NormalizedTy { ref ty, complete: _ }) => {\n                 info!(\"ProjectionCacheEntry::complete({:?}) - completing {:?}\", key, ty);\n                 let mut ty = ty.clone();\n-                if result == EvaluationResult::EvaluatedToOk {\n+                if result.must_apply_considering_regions() {\n                     ty.obligations = vec![];\n                 }\n                 map.insert(key, ProjectionCacheEntry::NormalizedTy { ty, complete: Some(result) });"}, {"sha": "0ca5a532b754269c9faf40ff63eb1c63db326841", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -176,6 +176,10 @@ pub enum EvaluationResult {\n     EvaluatedToOk,\n     /// Evaluation successful, but there were unevaluated region obligations.\n     EvaluatedToOkModuloRegions,\n+    /// Evaluation successful, but need to rerun because opaque types got\n+    /// hidden types assigned without it being known whether the opaque types\n+    /// are within their defining scope\n+    EvaluatedToOkModuloOpaqueTypes,\n     /// Evaluation is known to be ambiguous -- it *might* hold for some\n     /// assignment of inference variables, but it might not.\n     ///\n@@ -252,9 +256,11 @@ impl EvaluationResult {\n \n     pub fn may_apply(self) -> bool {\n         match self {\n-            EvaluatedToOk | EvaluatedToOkModuloRegions | EvaluatedToAmbig | EvaluatedToUnknown => {\n-                true\n-            }\n+            EvaluatedToOkModuloOpaqueTypes\n+            | EvaluatedToOk\n+            | EvaluatedToOkModuloRegions\n+            | EvaluatedToAmbig\n+            | EvaluatedToUnknown => true,\n \n             EvaluatedToErr | EvaluatedToRecur => false,\n         }\n@@ -264,7 +270,11 @@ impl EvaluationResult {\n         match self {\n             EvaluatedToUnknown | EvaluatedToRecur => true,\n \n-            EvaluatedToOk | EvaluatedToOkModuloRegions | EvaluatedToAmbig | EvaluatedToErr => false,\n+            EvaluatedToOkModuloOpaqueTypes\n+            | EvaluatedToOk\n+            | EvaluatedToOkModuloRegions\n+            | EvaluatedToAmbig\n+            | EvaluatedToErr => false,\n         }\n     }\n }"}, {"sha": "f15108fb7501af64effab6e23c0485587b6bcdfe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -1089,6 +1089,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct OpaqueTypeKey<'tcx> {\n+    // FIXME(oli-obk): make this a LocalDefId\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n }"}, {"sha": "33585de600130c02cf6b100ff90f5124f5b2edeb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -777,6 +777,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             Ok(\n                 EvaluationResult::EvaluatedToOk\n                 | EvaluationResult::EvaluatedToOkModuloRegions\n+                | EvaluationResult::EvaluatedToOkModuloOpaqueTypes\n                 | EvaluationResult::EvaluatedToAmbig,\n             ) => {}\n             _ => return false,"}, {"sha": "b205ca8fa11694855cb6c53557383a369c538c07", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -394,6 +394,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Err(_) => return Ok(EvaluatedToErr),\n             }\n \n+            if self.infcx.opaque_types_added_in_snapshot(snapshot) {\n+                return Ok(result.max(EvaluatedToOkModuloOpaqueTypes));\n+            }\n+\n             match self.infcx.region_constraints_added_in_snapshot(snapshot) {\n                 None => Ok(result),\n                 Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),"}, {"sha": "fd6376ef6ee9dc04abfffdd00747a85c799d0670", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -204,14 +204,6 @@ bitflags! {\n                                           | TypeFlags::HAS_CT_INFER.bits\n                                           | TypeFlags::HAS_TY_PLACEHOLDER.bits\n                                           | TypeFlags::HAS_CT_PLACEHOLDER.bits\n-                                          // The `evaluate_obligation` query does not return further\n-                                          // obligations. If it evaluates an obligation with an opaque\n-                                          // type, that opaque type may get compared to another type,\n-                                          // constraining it. We would lose this information.\n-                                          // FIXME: differentiate between crate-local opaque types\n-                                          // and opaque types from other crates, as only opaque types\n-                                          // from the local crate can possibly be a local name\n-                                          | TypeFlags::HAS_TY_OPAQUE.bits\n                                           // We consider 'freshened' types and constants\n                                           // to depend on a particular fn.\n                                           // The freshening process throws away information,"}, {"sha": "c2fbbf94fd66623678df17d392e4507993b2330e", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -11,7 +11,6 @@ fn main() {\n // return type, which can't depend on the obligation.\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n     send(cycle2().clone());\n \n     Rc::new(Cell::new(5))"}, {"sha": "634ff14869eb4d371384f31a382a5d4b93a66005", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 15, "deletions": 97, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -30,129 +30,47 @@ note: ...which requires building MIR for `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires computing type of `cycle2::{opaque#0}`...\n-  --> $DIR/auto-trait-leak.rs:20:16\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   |                ^^^^^^^^^^\n-note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:1:1\n-   |\n-LL | / use std::cell::Cell;\n-LL | | use std::rc::Rc;\n-LL | |\n-LL | | fn send<T: Send>(_: T) {}\n-...  |\n-LL | |     Rc::new(String::from(\"foo\"))\n-LL | | }\n-   | |_^\n-\n-error[E0391]: cycle detected when computing type of `cycle1::{opaque#0}`\n-  --> $DIR/auto-trait-leak.rs:12:16\n+  --> $DIR/auto-trait-leak.rs:14:5\n    |\n-LL | fn cycle1() -> impl Clone {\n-   |                ^^^^^^^^^^\n-   |\n-note: ...which requires borrow-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires unsafety-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires building MIR for `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires type-checking `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:12:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle2().clone());\n+   |     ^^^^\n+   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n-  --> $DIR/auto-trait-leak.rs:20:16\n+  --> $DIR/auto-trait-leak.rs:19:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:20:5\n    |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     send(cycle1().clone());\n+   |     ^^^^\n+   = note: ...which requires evaluating trait selection obligation `impl core::clone::Clone: core::marker::Send`...\n    = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:1:1\n@@ -166,6 +84,6 @@ LL | |     Rc::new(String::from(\"foo\"))\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "5fb7a9473d3dfbc57cef2537e10e59729a553908", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -6,7 +6,6 @@\n mod m {\n     type Foo = impl std::fmt::Debug;\n     //~^ ERROR: cycle detected when computing type of `m::Foo::{opaque#0}` [E0391]\n-    //~| ERROR: cycle detected when computing type of `m::Foo::{opaque#0}` [E0391]\n \n     pub fn foo() -> Foo {\n         22_u32"}, {"sha": "1e9a45aac79e996e094b715d01a9aff30e85de5a", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.stderr", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -5,35 +5,18 @@ LL |     type Foo = impl std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires type-checking `m::bar`...\n-  --> $DIR/auto-trait-leakage3.rs:15:5\n+  --> $DIR/auto-trait-leakage3.rs:15:9\n    |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n+LL |         is_send(foo());\n+   |         ^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `m::Foo: core::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`\n   --> $DIR/auto-trait-leakage3.rs:6:1\n    |\n LL | mod m {\n    | ^^^^^\n \n-error[E0391]: cycle detected when computing type of `m::Foo::{opaque#0}`\n-  --> $DIR/auto-trait-leakage3.rs:7:16\n-   |\n-LL |     type Foo = impl std::fmt::Debug;\n-   |                ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires type-checking `m::bar`...\n-  --> $DIR/auto-trait-leakage3.rs:15:5\n-   |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in module `m`\n-  --> $DIR/auto-trait-leakage3.rs:6:1\n-   |\n-LL | mod m {\n-   | ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "79caddf79132072124ae62c6e1a539229159f6ce", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -4,7 +4,6 @@\n mod m {\n     type Foo = impl std::fmt::Debug;\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n \n     // Cycle: error today, but it'd be nice if it eventually worked\n "}, {"sha": "b9d646b927a6fb895392843190dc0b8b8f9ab18d", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.stderr", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -5,35 +5,18 @@ LL |     type Foo = impl std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires type-checking `m::bar`...\n-  --> $DIR/inference-cycle.rs:15:5\n+  --> $DIR/inference-cycle.rs:15:9\n    |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n+LL |         is_send(foo()); // Today: error\n+   |         ^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `m::Foo: core::marker::Send`...\n    = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in module `m`\n   --> $DIR/inference-cycle.rs:4:1\n    |\n LL | mod m {\n    | ^^^^^\n \n-error[E0391]: cycle detected when computing type of `m::Foo::{opaque#0}`\n-  --> $DIR/inference-cycle.rs:5:16\n-   |\n-LL |     type Foo = impl std::fmt::Debug;\n-   |                ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...which requires type-checking `m::bar`...\n-  --> $DIR/inference-cycle.rs:15:5\n-   |\n-LL |     pub fn bar() {\n-   |     ^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in module `m`\n-  --> $DIR/inference-cycle.rs:4:1\n-   |\n-LL | mod m {\n-   | ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "a4fd8a82a04fd2771c51d4597be5117f1eefd2f4", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+type AsyncFnPtr = Box<\n+    dyn Fn() -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,\n+>;\n+\n+async fn test() {}\n+\n+#[allow(unused_must_use)]\n+fn main() {\n+    Box::new(test) as AsyncFnPtr;\n+    //~^ ERROR type mismatch\n+}"}, {"sha": "f04d1b4d7877e974e67a9efe5696c955df36bcef", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -0,0 +1,18 @@\n+error[E0271]: type mismatch resolving `<fn() -> impl Future<Output = ()> {test} as FnOnce<()>>::Output == Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+  --> $DIR/issue-98604.rs:11:5\n+   |\n+LL |     Box::new(test) as AsyncFnPtr;\n+   |     ^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-98604.rs:7:17\n+   |\n+LL | async fn test() {}\n+   |                 ^ checked the `Output` of this `async fn`, found opaque type\n+   = note:   expected struct `Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+           found opaque type `impl Future<Output = ()>`\n+   = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "d75762a8b62f094933539dfa770d7d5df7856745", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -0,0 +1,9 @@\n+fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+\n+fn main() {\n+    let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n+    //~^ ERROR type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+    let boxed = b();\n+    let null = *boxed;\n+    println!(\"{null:?}\");\n+}"}, {"sha": "8f3ec7d9d16160ed0fee5b1b6372f8345820dcdb", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -0,0 +1,16 @@\n+error[E0271]: type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+  --> $DIR/issue-98608.rs:4:39\n+   |\n+LL | fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+   |            ---------- the found opaque type\n+...\n+LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n+   |                                       ^^^^^^^^^^^^ expected struct `Box`, found opaque type\n+   |\n+   = note:   expected struct `Box<u8>`\n+           found opaque type `impl Sized`\n+   = note: required for the cast from `fn() -> impl Sized {hi}` to the object type `dyn Fn() -> Box<u8>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "7ecb553530106caf1c6d20d5c6927449b18a6484", "filename": "src/test/ui/type-alias-impl-trait/reveal_local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.rs?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -4,7 +4,6 @@ use std::fmt::Debug;\n \n type Foo = impl Debug;\n //~^ ERROR cycle detected\n-//~| ERROR cycle detected\n \n fn is_send<T: Send>() { }\n "}, {"sha": "27fded3332921c92a22064f87471760763ae8f1b", "filename": "src/test/ui/type-alias-impl-trait/reveal_local.stderr", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/052495d0017e2b18b781bcf0469a048e5051f5c0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Freveal_local.stderr?ref=052495d0017e2b18b781bcf0469a048e5051f5c0", "patch": "@@ -5,10 +5,11 @@ LL | type Foo = impl Debug;\n    |            ^^^^^^^^^^\n    |\n note: ...which requires type-checking `not_good`...\n-  --> $DIR/reveal_local.rs:11:1\n+  --> $DIR/reveal_local.rs:13:5\n    |\n-LL | fn not_good() {\n-   | ^^^^^^^^^^^^^\n+LL |     is_send::<Foo>();\n+   |     ^^^^^^^^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `Foo: core::marker::Send`...\n    = note: ...which again requires computing type of `Foo::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/reveal_local.rs:1:1\n@@ -22,30 +23,6 @@ LL | |\n LL | | fn main() {}\n    | |____________^\n \n-error[E0391]: cycle detected when computing type of `Foo::{opaque#0}`\n-  --> $DIR/reveal_local.rs:5:12\n-   |\n-LL | type Foo = impl Debug;\n-   |            ^^^^^^^^^^\n-   |\n-note: ...which requires type-checking `not_gooder`...\n-  --> $DIR/reveal_local.rs:17:1\n-   |\n-LL | fn not_gooder() {\n-   | ^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing type of `Foo::{opaque#0}`, completing the cycle\n-note: cycle used when checking item types in top-level module\n-  --> $DIR/reveal_local.rs:1:1\n-   |\n-LL | / #![feature(type_alias_impl_trait)]\n-LL | |\n-LL | | use std::fmt::Debug;\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0391`."}]}