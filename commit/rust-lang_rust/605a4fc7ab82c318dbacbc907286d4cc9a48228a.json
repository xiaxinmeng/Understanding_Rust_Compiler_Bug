{"sha": "605a4fc7ab82c318dbacbc907286d4cc9a48228a", "node_id": "C_kwDOAAsO6NoAKDYwNWE0ZmM3YWI4MmMzMThkYmFjYmM5MDcyODZkNGNjOWE0ODIyOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:05Z"}, "message": "Rollup merge of #109142 - the8472:mutex-block-docs, r=cuviper\n\nAdd block-based mutex unlocking example\n\nThis modifies the existing example in the Mutex docs to show both `drop()` and block based early unlocking.\n\nAlternative to #81872, which is getting closed.", "tree": {"sha": "e33adcb7194a163cc9bfc26341800bfbeedabcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33adcb7194a163cc9bfc26341800bfbeedabcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605a4fc7ab82c318dbacbc907286d4cc9a48228a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0tCRBK7hj4Ov3rIwAAB/YIAFeKnhNAwN6+mEvPZaZsc/Y0\nia4OVYp4qi+hmsCOUD3HubP6l0xr05UMRFR8tMag1oz06NL/CCh6vVsydCzAHMZ5\nRo58k3d7uTTao1OVZyQAy+QLVxdqvT5CiJ8OfVWMIJogXlGAZb/WDeA959Uq4h5J\nBiQXzk/O1JGvrmUsqukrxrP+42XmoT2UVEBWdAj025VGTq/7Hfz0PGTGeqwtZwiR\npW+blH4uDuytiiIZYxdownRi70oXoTeSKLv0JKWZ/rbIf4VXqzlSU+pm8Mp61b64\nSwf/rahL/lafZRhCzitCrA1QDdhV0SP2RBAzvnm0IYBWNlBeldG8QiuE5/YwYd0=\n=VW3/\n-----END PGP SIGNATURE-----\n", "payload": "tree e33adcb7194a163cc9bfc26341800bfbeedabcd9\nparent cfd8105f3f8a213af195f7eb2ad67824a5a872a9\nparent a3e41b57593cb58729f0761e0cf9f25db5639af6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617325 +0100\ncommitter GitHub <noreply@github.com> 1679617325 +0100\n\nRollup merge of #109142 - the8472:mutex-block-docs, r=cuviper\n\nAdd block-based mutex unlocking example\n\nThis modifies the existing example in the Mutex docs to show both `drop()` and block based early unlocking.\n\nAlternative to #81872, which is getting closed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605a4fc7ab82c318dbacbc907286d4cc9a48228a", "html_url": "https://github.com/rust-lang/rust/commit/605a4fc7ab82c318dbacbc907286d4cc9a48228a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605a4fc7ab82c318dbacbc907286d4cc9a48228a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd8105f3f8a213af195f7eb2ad67824a5a872a9", "html_url": "https://github.com/rust-lang/rust/commit/cfd8105f3f8a213af195f7eb2ad67824a5a872a9"}, {"sha": "a3e41b57593cb58729f0761e0cf9f25db5639af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e41b57593cb58729f0761e0cf9f25db5639af6", "html_url": "https://github.com/rust-lang/rust/commit/a3e41b57593cb58729f0761e0cf9f25db5639af6"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "b8fec6902a08c2cda716ee04d3c273ecb8f23ece", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/605a4fc7ab82c318dbacbc907286d4cc9a48228a/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605a4fc7ab82c318dbacbc907286d4cc9a48228a/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=605a4fc7ab82c318dbacbc907286d4cc9a48228a", "patch": "@@ -107,8 +107,8 @@ use crate::sys::locks as sys;\n /// *guard += 1;\n /// ```\n ///\n-/// It is sometimes necessary to manually drop the mutex guard to unlock it\n-/// sooner than the end of the enclosing scope.\n+/// To unlock a mutex guard sooner than the end of the enclosing scope,\n+/// either create an inner scope or drop the guard manually.\n ///\n /// ```\n /// use std::sync::{Arc, Mutex};\n@@ -125,11 +125,18 @@ use crate::sys::locks as sys;\n ///     let res_mutex_clone = Arc::clone(&res_mutex);\n ///\n ///     threads.push(thread::spawn(move || {\n-///         let mut data = data_mutex_clone.lock().unwrap();\n-///         // This is the result of some important and long-ish work.\n-///         let result = data.iter().fold(0, |acc, x| acc + x * 2);\n-///         data.push(result);\n-///         drop(data);\n+///         // Here we use a block to limit the lifetime of the lock guard.\n+///         let result = {\n+///             let mut data = data_mutex_clone.lock().unwrap();\n+///             // This is the result of some important and long-ish work.\n+///             let result = data.iter().fold(0, |acc, x| acc + x * 2);\n+///             data.push(result);\n+///             result\n+///             // The mutex guard gets dropped here, together with any other values\n+///             // created in the critical section.\n+///         };\n+///         // The guard created here is a temporary dropped at the end of the statement, i.e.\n+///         // the lock would not remain being held even if the thread did some additional work.\n ///         *res_mutex_clone.lock().unwrap() += result;\n ///     }));\n /// });\n@@ -146,6 +153,8 @@ use crate::sys::locks as sys;\n /// // It's even more important here than in the threads because we `.join` the\n /// // threads after that. If we had not dropped the mutex guard, a thread could\n /// // be waiting forever for it, causing a deadlock.\n+/// // As in the threads, a block could have been used instead of calling the\n+/// // `drop` function.\n /// drop(data);\n /// // Here the mutex guard is not assigned to a variable and so, even if the\n /// // scope does not end after this line, the mutex is still released: there is\n@@ -160,6 +169,7 @@ use crate::sys::locks as sys;\n ///\n /// assert_eq!(*res_mutex.lock().unwrap(), 800);\n /// ```\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Mutex\")]\n pub struct Mutex<T: ?Sized> {"}]}