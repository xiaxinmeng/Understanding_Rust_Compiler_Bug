{"sha": "c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWQ3ZWYwODg0M2UyYjIzZTM4NDYyY2U4ZTZlMWIwNzU1OWQ2ZDM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-15T20:09:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-15T20:09:56Z"}, "message": "Merge pull request #3106 from sinkuu/clippy\n\nClippy and cleanups", "tree": {"sha": "b61762adaab4ce45aba463125859b067a8bddbf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b61762adaab4ce45aba463125859b067a8bddbf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxPQVCRBK7hj4Ov3rIwAAdHIIAKuE8+HpRT294LMMAHU85+pI\nl+M00fJqtNhNYbuwlVcr6Qxtveg+6LWtMSIo7faJu/xJRvQNqh4HBpCOZotQA/hs\n7g+KdbOIG3NK5QBvITPkgPmoakMeP8bkcS/dfvajIcvLrJlnGkEyUTYh1PYd4azd\nb4fQcPtWM5/KfUYdCqO1mZZKQ+cZT/HihET9JqG4DARWZix2wYsrl3dNbaAkXIau\nzB7Apk5DPzaV4qu5zh4cruwtcq4LMYBnlLUZwJLdOvx0VVPCPmvJWkhYB90AhmYo\n+7ZSjK4lWakjNSF5osKvWvzQ0fgOyZmyrw8PY4f7gRNtG4XltXUgtA/v/IMr3pc=\n=4IO/\n-----END PGP SIGNATURE-----\n", "payload": "tree b61762adaab4ce45aba463125859b067a8bddbf0\nparent 5f02be6294cdef448366297065a26c268249f40b\nparent e64a6d371b498ad2187ec4937c144b1bf83d0659\nauthor Nick Cameron <nrc@ncameron.org> 1539634196 +1300\ncommitter GitHub <noreply@github.com> 1539634196 +1300\n\nMerge pull request #3106 from sinkuu/clippy\n\nClippy and cleanups"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "html_url": "https://github.com/rust-lang/rust/commit/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f02be6294cdef448366297065a26c268249f40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f02be6294cdef448366297065a26c268249f40b", "html_url": "https://github.com/rust-lang/rust/commit/5f02be6294cdef448366297065a26c268249f40b"}, {"sha": "e64a6d371b498ad2187ec4937c144b1bf83d0659", "url": "https://api.github.com/repos/rust-lang/rust/commits/e64a6d371b498ad2187ec4937c144b1bf83d0659", "html_url": "https://github.com/rust-lang/rust/commit/e64a6d371b498ad2187ec4937c144b1bf83d0659"}], "stats": {"total": 162, "additions": 66, "deletions": 96}, "files": [{"sha": "53890b57fe15381047ec0bb1001ae1e94061d495", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -67,6 +67,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"bytecount\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"simd 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"byteorder\"\n@@ -674,6 +677,11 @@ dependencies = [\n  \"serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"simd\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"smallvec\"\n version = \"0.6.5\"\n@@ -918,6 +926,7 @@ dependencies = [\n \"checksum serde 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\" = \"84257ccd054dc351472528c8587b4de2dbf0dc0fe2e634030c1a90bfdacebaa9\"\n \"checksum serde_derive 1.0.79 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31569d901045afbff7a9479f793177fe9259819aff10ab4f89ef69bbc5f567fe\"\n \"checksum serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"43344e7ce05d0d8280c5940cabb4964bea626aa58b1ec0e8c73fa2a8512a38ce\"\n+\"checksum simd 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0048b17eb9577ac545c61d85c3559b41dfb4cbea41c9bd9ca6a4f73ff05fda84\"\n \"checksum smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"153ffa32fd170e9944f7e0838edf824a754ec4c1fc64746fcc9fe1f8fa602e5d\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"261ae9ecaa397c42b960649561949d69311f08eeaea86a65696e6e46517cf741\""}, {"sha": "561989a1a11bba8265053e41e97f089b18d97d77", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -764,12 +764,12 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n                 // due to comment wrapping, a line that was originaly behind `#` is split over\n                 // multiple lines, which needs then to be prefixed with a `#`\n                 if !orig.trim_left().starts_with(\"# \") {\n-                    format!(\"# {}\", orig)\n+                    Cow::from(format!(\"# {}\", orig))\n                 } else {\n-                    orig.to_string()\n+                    Cow::from(orig)\n                 }\n             } else {\n-                line.to_string()\n+                Cow::from(line)\n             }\n         })\n         .collect::<Vec<_>>()"}, {"sha": "291a59e1055eee539cb614396b2f4a3e2607357d", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -112,7 +112,7 @@ macro_rules! create_config {\n                 cloned.width_heuristics = None;\n \n                 ::toml::to_string(&cloned)\n-                    .map_err(|e| format!(\"Could not output config: {}\", e.to_string()))\n+                    .map_err(|e| format!(\"Could not output config: {}\", e))\n             }\n         }\n "}, {"sha": "15ffb842ee495e773a3fb16325db18f48b89d0f6", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -1816,12 +1816,7 @@ fn rewrite_unary_op(\n     shape: Shape,\n ) -> Option<String> {\n     // For some reason, an UnOp is not spanned like BinOp!\n-    let operator_str = match op {\n-        ast::UnOp::Deref => \"*\",\n-        ast::UnOp::Not => \"!\",\n-        ast::UnOp::Neg => \"-\",\n-    };\n-    rewrite_unary_prefix(context, operator_str, expr, shape)\n+    rewrite_unary_prefix(context, ast::UnOp::to_string(op), expr, shape)\n }\n \n fn rewrite_assignment("}, {"sha": "aacfa12d437eade62c6277f0ce8dff9944fdc4a0", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -83,7 +83,7 @@ fn main() {\n     );\n \n     if let Err(e) = run(&opts) {\n-        println!(\"{}\", opts.usage(&format!(\"{}\", e)));\n+        println!(\"{}\", opts.usage(&e.to_string()));\n         process::exit(1);\n     }\n }"}, {"sha": "19caafbfb828c3587eb24cc3b5e81efeb905ca0b", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -779,7 +779,7 @@ pub fn format_impl(\n             let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n             result.push_str(&inner_indent_str);\n-            result.push_str(visitor.buffer.to_string().trim());\n+            result.push_str(visitor.buffer.trim());\n             result.push_str(&outer_indent_str);\n         } else if need_newline || !context.config.empty_item_single_line() {\n             result.push_str(&sep);\n@@ -1137,7 +1137,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n \n             result.push_str(&inner_indent_str);\n-            result.push_str(visitor.buffer.to_string().trim());\n+            result.push_str(visitor.buffer.trim());\n             result.push_str(&outer_indent_str);\n         } else if result.contains('\\n') {\n             result.push_str(&outer_indent_str);\n@@ -1543,7 +1543,7 @@ pub fn rewrite_struct_field_prefix(\n             rewrite_ident(context, name),\n             type_annotation_spacing.0\n         ),\n-        None => format!(\"{}\", vis),\n+        None => vis.to_string(),\n     })\n }\n \n@@ -2004,18 +2004,13 @@ fn rewrite_fn_base(\n         one_line_budget, multi_line_budget, arg_indent\n     );\n \n+    result.push('(');\n     // Check if vertical layout was forced.\n-    if one_line_budget == 0 {\n-        if snuggle_angle_bracket {\n-            result.push('(');\n-        } else {\n-            result.push_str(\"(\");\n-            if context.config.indent_style() == IndentStyle::Visual {\n-                result.push_str(&arg_indent.to_string_with_newline(context.config));\n-            }\n-        }\n-    } else {\n-        result.push('(');\n+    if one_line_budget == 0\n+        && !snuggle_angle_bracket\n+        && context.config.indent_style() == IndentStyle::Visual\n+    {\n+        result.push_str(&arg_indent.to_string_with_newline(context.config));\n     }\n \n     // Skip `pub(crate)`."}, {"sha": "87eee34dacacf9bcf3512204af5adf2d3d90a8d5", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -50,7 +50,7 @@ impl<'a> ListFormatting<'a> {\n             ends_with_newline: true,\n             preserve_newline: false,\n             nested: false,\n-            config: config,\n+            config,\n         }\n     }\n "}, {"sha": "baf1ed45253cc20d328963f6874369681e26486e", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -1073,7 +1073,7 @@ fn next_space(tok: &Token) -> SpaceState {\n /// when the macro is not an instance of try! (or parsing the inner expression\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::Expr> {\n-    if &format!(\"{}\", mac.node.path) == \"try\" {\n+    if &mac.node.path.to_string() == \"try\" {\n         let ts: TokenStream = mac.node.tts.clone().into();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n@@ -1493,5 +1493,5 @@ fn rewrite_macro_with_items(\n     result.push_str(&shape.indent.to_string_with_newline(context.config));\n     result.push_str(closer);\n     result.push_str(trailing_semicolon);\n-    return Some(result);\n+    Some(result)\n }"}, {"sha": "b7d73bbf0ba2fc314a0c7ad80ad4a0c72f704a0a", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -120,7 +120,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn push_vertical_spaces(&mut self, mut newline_count: usize) {\n-        let offset = self.count_trailing_newlines();\n+        let offset = self.buffer.chars().rev().take_while(|c| *c == '\\n').count();\n         let newline_upper_bound = self.config.blank_lines_upper_bound() + 1;\n         let newline_lower_bound = self.config.blank_lines_lower_bound() + 1;\n \n@@ -142,16 +142,6 @@ impl<'a> FmtVisitor<'a> {\n         self.push_str(&blank_lines);\n     }\n \n-    fn count_trailing_newlines(&self) -> usize {\n-        let mut buf = &*self.buffer;\n-        let mut result = 0;\n-        while buf.ends_with('\\n') {\n-            buf = &buf[..buf.len() - 1];\n-            result += 1;\n-        }\n-        result\n-    }\n-\n     fn write_snippet<F>(&mut self, span: Span, process_last_snippet: F)\n     where\n         F: Fn(&mut FmtVisitor, &str, &str),\n@@ -271,11 +261,7 @@ impl<'a> FmtVisitor<'a> {\n \n         if let Some('/') = subslice.chars().nth(1) {\n             // check that there are no contained block comments\n-            if !subslice\n-                .split('\\n')\n-                .map(|s| s.trim_left())\n-                .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n-            {\n+            if !subslice.lines().any(|s| s.trim_left().starts_with(\"/*\")) {\n                 // Add a newline after line comments\n                 self.push_str(\"\\n\");\n             }"}, {"sha": "053ce1b921285b1b24c45ae894f9e7de7361a887", "filename": "src/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -425,7 +425,7 @@ impl<'a> Context<'a> {\n                     _ => expr.rewrite(self.context, shape),\n                 }\n             }\n-            item @ _ => item.rewrite(self.context, shape),\n+            item => item.rewrite(self.context, shape),\n         };\n \n         if let Some(rewrite) = rewrite {"}, {"sha": "ed081adcd86d171e09a26dfe2aed3387dd224323", "filename": "src/source_map.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -51,11 +51,13 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n     }\n \n     fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        self.opt_span_before(original, needle).expect(&format!(\n-            \"bad span: {}: {}\",\n-            needle,\n-            self.span_to_snippet(original).unwrap()\n-        ))\n+        self.opt_span_before(original, needle).unwrap_or_else(|| {\n+            panic!(\n+                \"bad span: {}: {}\",\n+                needle,\n+                self.span_to_snippet(original).unwrap()\n+            )\n+        })\n     }\n \n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {"}, {"sha": "bbf51ffcba35e6e019a6e4eff226eec1eb7b5b0a", "filename": "src/string.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -172,7 +172,7 @@ fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n     if s.len() < start + 8 {\n         return None;\n     }\n-    let prefix = s[start..start + 8].join(\"\");\n+    let prefix = s[start..start + 8].concat();\n     if prefix.starts_with(\"https://\")\n         || prefix.starts_with(\"http://\")\n         || prefix.starts_with(\"ftp://\")\n@@ -242,9 +242,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         for (i, grapheme) in input[0..=index].iter().enumerate() {\n             if is_line_feed(grapheme) {\n                 if i <= index_minus_ws {\n-                    let mut line = input[0..i].join(\"\");\n+                    let mut line = &input[0..i].concat()[..];\n                     if trim_end {\n-                        line = line.trim_right().to_string();\n+                        line = line.trim_right();\n                     }\n                     return SnippetState::EndWithLineFeed(format!(\"{}\\n\", line), i + 1);\n                 }\n@@ -256,7 +256,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         for (i, grapheme) in input[index + 1..].iter().enumerate() {\n             if !trim_end && is_line_feed(grapheme) {\n                 return SnippetState::EndWithLineFeed(\n-                    input[0..=index + 1 + i].join(\"\").to_string(),\n+                    input[0..=index + 1 + i].concat(),\n                     index + 2 + i,\n                 );\n             } else if not_whitespace_except_line_feed(grapheme) {\n@@ -266,15 +266,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         }\n \n         if trim_end {\n-            SnippetState::LineEnd(\n-                input[0..=index_minus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[0..=index_minus_ws].concat(), index_plus_ws + 1)\n         } else {\n-            SnippetState::LineEnd(\n-                input[0..=index_plus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[0..=index_plus_ws].concat(), index_plus_ws + 1)\n         }\n     };\n \n@@ -298,15 +292,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n                 .position(|grapheme| not_whitespace_except_line_feed(grapheme))\n                 .unwrap_or(0);\n         return if trim_end {\n-            SnippetState::LineEnd(\n-                input[..=url_index_end].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            )\n+            SnippetState::LineEnd(input[..=url_index_end].concat(), index_plus_ws + 1)\n         } else {\n-            return SnippetState::LineEnd(\n-                input[..=index_plus_ws].join(\"\").to_string(),\n-                index_plus_ws + 1,\n-            );\n+            return SnippetState::LineEnd(input[..=index_plus_ws].concat(), index_plus_ws + 1);\n         };\n     }\n     match input[0..max_chars]\n@@ -331,7 +319,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n                 // A boundary was found after the line limit\n                 Some(index) => break_at(max_chars + index),\n                 // No boundary to the right, the input cannot be broken\n-                None => SnippetState::EndOfInput(input.join(\"\").to_string()),\n+                None => SnippetState::EndOfInput(input.concat()),\n             },\n         },\n     }"}, {"sha": "3d6f1ad230ddb50e72c1ce825be3b3a232227e9a", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -45,7 +45,7 @@ pub fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (\n             VisibilityKind::Restricted { path: p, .. },\n             VisibilityKind::Restricted { path: q, .. },\n-        ) => format!(\"{}\", p) == format!(\"{}\", q),\n+        ) => p.to_string() == q.to_string(),\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | ("}, {"sha": "63e2c6bdcac57c88c8128682b20880aaa8975a67", "filename": "src/visitor.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "patch": "@@ -112,7 +112,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 if contains_skip(get_attrs_from_stmt(stmt)) {\n                     self.push_skipped_with_span(stmt.span());\n                 } else {\n-                    let shape = self.shape().clone();\n+                    let shape = self.shape();\n                     let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n@@ -367,13 +367,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n-                let block_indent = self.block_indent.clone();\n+                let block_indent = self.block_indent;\n                 let rw =\n                     self.with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Trait(..) => {\n-                let block_indent = self.block_indent.clone();\n+                let block_indent = self.block_indent;\n                 let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n                 self.push_rewrite(item.span, rw);\n             }\n@@ -652,20 +652,19 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n-            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\" {\n-                if attr.path.segments.len() == 1\n-                    || attr.path.segments[1].ident.to_string() != \"skip\"\n-                {\n-                    let file_name = self.source_map.span_to_filename(attr.span).into();\n-                    self.report.append(\n-                        file_name,\n-                        vec![FormattingError::from_span(\n-                            attr.span,\n-                            &self.source_map,\n-                            ErrorKind::BadAttr,\n-                        )],\n-                    );\n-                }\n+            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\"\n+                && (attr.path.segments.len() == 1\n+                    || attr.path.segments[1].ident.to_string() != \"skip\")\n+            {\n+                let file_name = self.source_map.span_to_filename(attr.span).into();\n+                self.report.append(\n+                    file_name,\n+                    vec![FormattingError::from_span(\n+                        attr.span,\n+                        &self.source_map,\n+                        ErrorKind::BadAttr,\n+                    )],\n+                );\n             }\n         }\n         if contains_skip(attrs) {\n@@ -792,13 +791,9 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     where\n         F: Fn(&RewriteContext) -> Option<String>,\n     {\n-        let result;\n-        let macro_rewrite_failure = {\n-            let context = self.get_context();\n-            result = f(&context);\n-            unsafe { *context.macro_rewrite_failure.as_ptr() }\n-        };\n-        self.macro_rewrite_failure |= macro_rewrite_failure;\n+        let context = self.get_context();\n+        let result = f(&context);\n+        self.macro_rewrite_failure |= *context.macro_rewrite_failure.borrow();\n         result\n     }\n "}]}