{"sha": "7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiM2RlMzkyZGY5ZTBhZGU3YmExN2NjMWNiMTY4MWU0MmJiZTVhZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-09T20:04:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-09T20:04:20Z"}, "message": "Auto merge of #899 - RalfJung:generators, r=RalfJung\n\nMore generator tests\n\nCc @tmandry -- do these look reasonable for checking the new \"partial init\" case that was discovered?", "tree": {"sha": "cdfb0a9b3d6782febd10744f57e785cff1c90728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfb0a9b3d6782febd10744f57e785cff1c90728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "html_url": "https://github.com/rust-lang/rust/commit/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b55ae00991269cc6ced23a3000d048e5942976fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b55ae00991269cc6ced23a3000d048e5942976fd", "html_url": "https://github.com/rust-lang/rust/commit/b55ae00991269cc6ced23a3000d048e5942976fd"}, {"sha": "b5ce8f410bd04b97f25b5903ca014eaf99d4dc46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ce8f410bd04b97f25b5903ca014eaf99d4dc46", "html_url": "https://github.com/rust-lang/rust/commit/b5ce8f410bd04b97f25b5903ca014eaf99d4dc46"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "d2d7536dcae9137ff30bef243e9bdcaf369913e0", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "patch": "@@ -1 +1 @@\n-4be067558962c004b638e4c6f162d50f7c0c98b6\n+5aa3d9a7b5d3a46a7f158e8881146331a6bc9243"}, {"sha": "91266f67aa8e4556bad8bd749e8f4f288cb93e1b", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(async_await)]\n+#![feature(async_await, never_type)]\n \n use std::{future::Future, pin::Pin, task::Poll, ptr};\n use std::task::{Waker, RawWaker, RawWakerVTable, Context};\n@@ -40,38 +40,42 @@ async fn includes_never(crash: bool, x: u32) -> u32 {\n     result\n }\n \n-fn raw_waker_clone(_this: *const ()) -> RawWaker {\n-    panic!(\"unimplemented\");\n+async fn partial_init(x: u32) -> u32 {\n+    #[allow(unreachable_code)]\n+    let _x: (String, !) = (String::new(), return async { x + x }.await);\n }\n-fn raw_waker_wake(_this: *const ()) {\n-    panic!(\"unimplemented\");\n-}\n-fn raw_waker_wake_by_ref(_this: *const ()) {\n-    panic!(\"unimplemented\");\n-}\n-fn raw_waker_drop(_this: *const ()) {}\n \n-static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n-    raw_waker_clone,\n-    raw_waker_wake,\n-    raw_waker_wake_by_ref,\n-    raw_waker_drop,\n-);\n+fn run_fut(mut fut: impl Future<Output=u32>, output: u32) {\n+    fn raw_waker_clone(_this: *const ()) -> RawWaker {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_wake(_this: *const ()) {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_wake_by_ref(_this: *const ()) {\n+        panic!(\"unimplemented\");\n+    }\n+    fn raw_waker_drop(_this: *const ()) {}\n \n-fn main() {\n-    let x = 5;\n-    let mut fut = foo(&x, 7);\n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n-    let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(31));\n+    static RAW_WAKER: RawWakerVTable = RawWakerVTable::new(\n+        raw_waker_clone,\n+        raw_waker_wake,\n+        raw_waker_wake_by_ref,\n+        raw_waker_drop,\n+    );\n \n-    let mut fut = build_aggregate(1, 2, 3, 4);\n     let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n     let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(10));\n+    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(output));\n+}\n \n-    let mut fut = includes_never(false, 4);\n-    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n-    let mut context = Context::from_waker(&waker);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(16));\n+fn main() {\n+    let x = 5;\n+    run_fut(foo(&x, 7), 31);\n+\n+    run_fut(build_aggregate(1, 2, 3, 4), 10);\n+\n+    run_fut(includes_never(false, 4), 16);\n+\n+    run_fut(partial_init(4), 8);\n }"}, {"sha": "c31b5b9ed3bb2a3845f931d3dea776e3e8986dd1", "filename": "tests/run-pass/generator.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/tests%2Frun-pass%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8/tests%2Frun-pass%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.rs?ref=7b3de392df9e0ade7ba17cc1cb1681e42bbe5af8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(generators, generator_trait)]\n+#![feature(generators, generator_trait, never_type)]\n \n use std::ops::{GeneratorState, Generator};\n use std::pin::Pin;\n@@ -26,6 +26,7 @@ fn never() -> Never {\n \n fn main() {\n     finish(1, || yield 1);\n+\n     finish(3, || {\n         let mut x = 0;\n         yield 1;\n@@ -35,30 +36,35 @@ fn main() {\n         yield 1;\n         assert_eq!(x, 2);\n     });\n+\n     finish(7*8/2, || {\n         for i in 0..8 {\n             yield i;\n         }\n     });\n+\n     finish(1, || {\n         if true {\n             yield 1;\n         } else {\n         }\n     });\n+\n     finish(1, || {\n         if false {\n         } else {\n             yield 1;\n         }\n     });\n+\n     finish(2, || {\n         if { yield 1; false } {\n             yield 1;\n             panic!()\n         }\n         yield 1;\n     });\n+\n     // also test a self-referential generator\n     assert_eq!(\n         finish(5, || {\n@@ -71,6 +77,7 @@ fn main() {\n         }),\n         10\n     );\n+\n     let b = true;\n     finish(1, || {\n         yield 1;\n@@ -80,4 +87,10 @@ fn main() {\n         yield 2;\n         drop(x);\n     });\n+\n+    finish(3, || {\n+        yield 1;\n+        #[allow(unreachable_code)]\n+        let _x: (String, !) = (String::new(), { yield 2; return });\n+    });\n }"}]}