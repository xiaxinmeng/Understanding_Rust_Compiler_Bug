{"sha": "8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NDRhOWIzNWE3MWM1OGQyZWQ5MDNmYjJiMjlkZmVlYjEwZDI5Y2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-16T21:59:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T21:59:26Z"}, "message": "Merge #4484\n\n4484: Allow calling dyn trait super trait methods without the super trait in scope r=flodiebold a=flodiebold\n\nThis also removes some vestiges of the old impl trait support which I think aren't currently in use.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "dba83bd054be683bc0ad58fd68c47d0220b150f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba83bd054be683bc0ad58fd68c47d0220b150f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewGI+CRBK7hj4Ov3rIwAAdHIIAE+mXTlrY5BKE2aR/c6Q5a5U\nUBafDVMVEs9BUOhnBsC61DTPD4g2s6er4F+AIU2lwOKMCGkkACiqIXG8jjyks/lF\n+IvV1Z4DhgvTMdNsKO/j2jzXNbvo1ZeQxyEG5wcy20K31xy5JGxyJqVNab/yzpWv\n/QdIfUtltuciOJuyeC9Klym6ZQouFyH9MyftCR23CSEJoRmv9h5XJaJTqBs6AIni\nojiV+Ezuoew7L5onx3AJ2r2p3lkoIdqNKY07foYP+TDXJZl+OVdSJ4Edf8u1FTHZ\n3Ctxvu8FwtafyYl222FrBFxhzY46qPiayGHg5QiupRU3oBexRPax13nL1fJqLr4=\n=icyl\n-----END PGP SIGNATURE-----\n", "payload": "tree dba83bd054be683bc0ad58fd68c47d0220b150f3\nparent ebaa05a4478096aaf3bc2a48d0d171a287422c7c\nparent 811d25b7237cfb74a312369a7820bf6fbb81483e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589666366 +0000\ncommitter GitHub <noreply@github.com> 1589666366 +0000\n\nMerge #4484\n\n4484: Allow calling dyn trait super trait methods without the super trait in scope r=flodiebold a=flodiebold\n\nThis also removes some vestiges of the old impl trait support which I think aren't currently in use.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "html_url": "https://github.com/rust-lang/rust/commit/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "html_url": "https://github.com/rust-lang/rust/commit/ebaa05a4478096aaf3bc2a48d0d171a287422c7c"}, {"sha": "811d25b7237cfb74a312369a7820bf6fbb81483e", "url": "https://api.github.com/repos/rust-lang/rust/commits/811d25b7237cfb74a312369a7820bf6fbb81483e", "html_url": "https://github.com/rust-lang/rust/commit/811d25b7237cfb74a312369a7820bf6fbb81483e"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "daea02f8811a40918caa3230f7f2c9d574eff8f9", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "patch": "@@ -808,15 +808,13 @@ impl Ty {\n         }\n     }\n \n-    /// If this is an `impl Trait` or `dyn Trait`, returns that trait.\n-    pub fn inherent_trait(&self) -> Option<TraitId> {\n+    /// If this is a `dyn Trait`, returns that trait.\n+    pub fn dyn_trait(&self) -> Option<TraitId> {\n         match self {\n-            Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n-                predicates.iter().find_map(|pred| match pred {\n-                    GenericPredicate::Implemented(tr) => Some(tr.trait_),\n-                    _ => None,\n-                })\n-            }\n+            Ty::Dyn(predicates) => predicates.iter().find_map(|pred| match pred {\n+                GenericPredicate::Implemented(tr) => Some(tr.trait_),\n+                _ => None,\n+            }),\n             _ => None,\n         }\n     }"}, {"sha": "0851e16a89b23df478ff3afbd62eeaebe4a536e6", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "patch": "@@ -408,8 +408,9 @@ fn iterate_trait_method_candidates<T>(\n     receiver_ty: Option<&Canonical<Ty>>,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    // if ty is `impl Trait` or `dyn Trait`, the trait doesn't need to be in scope\n-    let inherent_trait = self_ty.value.inherent_trait().into_iter();\n+    // if ty is `dyn Trait`, the trait doesn't need to be in scope\n+    let inherent_trait =\n+        self_ty.value.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n     let env_traits = if let Ty::Placeholder(_) = self_ty.value {\n         // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n         env.trait_predicates_for_self_ty(&self_ty.value)\n@@ -601,11 +602,6 @@ pub fn implements_trait(\n     krate: CrateId,\n     trait_: TraitId,\n ) -> bool {\n-    if ty.value.inherent_trait() == Some(trait_) {\n-        // FIXME this is a bit of a hack, since Chalk should say the same thing\n-        // anyway, but currently Chalk doesn't implement `dyn/impl Trait` yet\n-        return true;\n-    }\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n "}, {"sha": "9c2c9e1d28386893c9368ef8e58ebbe7637c2324", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=8944a9b35a71c58d2ed903fb2b29dfeeb10d29cd", "patch": "@@ -1096,3 +1096,34 @@ fn test() { (S {}).method()<|>; }\n     );\n     assert_eq!(t, \"()\");\n }\n+\n+#[test]\n+fn dyn_trait_super_trait_not_in_scope() {\n+    assert_snapshot!(\n+        infer(r#\"\n+mod m {\n+    pub trait SuperTrait {\n+        fn foo(&self) -> u32 { 0 }\n+    }\n+}\n+trait Trait: m::SuperTrait {}\n+\n+struct S;\n+impl m::SuperTrait for S {}\n+impl Trait for S {}\n+\n+fn test(d: &dyn Trait) {\n+    d.foo();\n+}\n+\"#),\n+        @r###\"\n+    52..56 'self': &Self\n+    65..70 '{ 0 }': u32\n+    67..68 '0': u32\n+    177..178 'd': &dyn Trait\n+    192..208 '{     ...o(); }': ()\n+    198..199 'd': &dyn Trait\n+    198..205 'd.foo()': u32\n+    \"###\n+    );\n+}"}]}