{"sha": "ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYmNmOWY0NTg1MjJlNzZjNWE4NGU2NzcxZTBlZjQzNGQ2ZDVjNWI=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-04-07T11:45:17Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-05-03T13:13:05Z"}, "message": "Fix inference with conditionally compiled tails\n\nFixes #8378", "tree": {"sha": "05b4684b1b23a5159796d424b511d30e7e651df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b4684b1b23a5159796d424b511d30e7e651df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "html_url": "https://github.com/rust-lang/rust/commit/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb741e895f1a73420a401f2495c711afe37d9d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb741e895f1a73420a401f2495c711afe37d9d19", "html_url": "https://github.com/rust-lang/rust/commit/eb741e895f1a73420a401f2495c711afe37d9d19"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "820d5c17eb40f177bfc1bc5b4e6f422cc2d18d25", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "patch": "@@ -203,7 +203,7 @@ impl ExprCollector<'_> {\n         self.maybe_collect_expr(expr).unwrap_or_else(|| self.missing_expr())\n     }\n \n-    /// Returns `None` if the expression is `#[cfg]`d out.\n+    /// Returns `None` if and only if the expression is `#[cfg]`d out.\n     fn maybe_collect_expr(&mut self, expr: ast::Expr) -> Option<ExprId> {\n         let syntax_ptr = AstPtr::new(&expr);\n         self.check_cfg(&expr)?;\n@@ -665,7 +665,7 @@ impl ExprCollector<'_> {\n                 if self.check_cfg(&stmt).is_none() {\n                     return;\n                 }\n-\n+                let has_semi = stmt.semicolon_token().is_some();\n                 // Note that macro could be expended to multiple statements\n                 if let Some(ast::Expr::MacroCall(m)) = stmt.expr() {\n                     let macro_ptr = AstPtr::new(&m);\n@@ -682,18 +682,19 @@ impl ExprCollector<'_> {\n                                 statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n                                 if let Some(expr) = statements.expr() {\n                                     let expr = this.collect_expr(expr);\n-                                    this.statements_in_scope.push(Statement::Expr(expr));\n+                                    this.statements_in_scope\n+                                        .push(Statement::Expr { expr, has_semi });\n                                 }\n                             }\n                             None => {\n                                 let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n-                                this.statements_in_scope.push(Statement::Expr(expr));\n+                                this.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                             }\n                         },\n                     );\n                 } else {\n                     let expr = self.collect_expr_opt(stmt.expr());\n-                    self.statements_in_scope.push(Statement::Expr(expr));\n+                    self.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                 }\n             }\n             ast::Stmt::Item(item) => {\n@@ -722,8 +723,17 @@ impl ExprCollector<'_> {\n         let prev_statements = std::mem::take(&mut self.statements_in_scope);\n \n         block.statements().for_each(|s| self.collect_stmt(s));\n-\n-        let tail = block.tail_expr().map(|e| self.collect_expr(e));\n+        block.tail_expr().and_then(|e| {\n+            let expr = self.maybe_collect_expr(e)?;\n+            Some(self.statements_in_scope.push(Statement::Expr { expr, has_semi: false }))\n+        });\n+\n+        let mut tail = None;\n+        if let Some(Statement::Expr { expr, has_semi: false }) = self.statements_in_scope.last() {\n+            tail = Some(*expr);\n+            self.statements_in_scope.pop();\n+        }\n+        let tail = tail;\n         let statements = std::mem::replace(&mut self.statements_in_scope, prev_statements);\n         let syntax_node_ptr = AstPtr::new(&block.into());\n         let expr_id = self.alloc_expr("}, {"sha": "6764de3a75e4b4105938b182bec80000def974d2", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "patch": "@@ -157,7 +157,7 @@ fn compute_block_scopes(\n                 scope = scopes.new_scope(scope);\n                 scopes.add_bindings(body, scope, *pat);\n             }\n-            Statement::Expr(expr) => {\n+            Statement::Expr { expr, .. } => {\n                 scopes.set_scope(*expr, scope);\n                 compute_expr_scopes(*expr, body, scopes, scope);\n             }"}, {"sha": "0c3b410802fe5be48e42dda6272620f579b9771c", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "patch": "@@ -242,7 +242,7 @@ pub struct RecordLitField {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Statement {\n     Let { pat: PatId, type_ref: Option<Interned<TypeRef>>, initializer: Option<ExprId> },\n-    Expr(ExprId),\n+    Expr { expr: ExprId, has_semi: bool },\n }\n \n impl Expr {\n@@ -265,7 +265,7 @@ impl Expr {\n                                 f(*expr);\n                             }\n                         }\n-                        Statement::Expr(e) => f(*e),\n+                        Statement::Expr { expr: expression, .. } => f(*expression),\n                     }\n                 }\n                 if let Some(expr) = tail {"}, {"sha": "47709c1e8fc2d53bb4e10cf86714e4891acd3c87", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         if let Expr::Block { statements, tail, .. } = body_expr {\n             if let Some(t) = tail {\n                 self.validate_results_in_tail_expr(body.body_expr, *t, db);\n-            } else if let Some(Statement::Expr(id)) = statements.last() {\n+            } else if let Some(Statement::Expr { expr: id, .. }) = statements.last() {\n                 self.validate_missing_tail_expr(body.body_expr, *id, db);\n             }\n         }"}, {"sha": "9476e6297e91e974b0357076c9d19ab7b53dcc89", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ebbcf9f458522e76c5a84e6771e0ef434d6d5c5b", "patch": "@@ -809,7 +809,7 @@ impl<'a> InferenceContext<'a> {\n                     let ty = self.resolve_ty_as_possible(ty);\n                     self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n-                Statement::Expr(expr) => {\n+                Statement::Expr { expr, .. } => {\n                     self.infer_expr(*expr, &Expectation::none());\n                 }\n             }"}]}