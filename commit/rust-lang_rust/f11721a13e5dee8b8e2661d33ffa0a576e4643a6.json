{"sha": "f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMTcyMWExM2U1ZGVlOGI4ZTI2NjFkMzNmZmEwYTU3NmU0NjQzYTY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-19T21:38:16Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:35Z"}, "message": "Add helper function to set debug locations", "tree": {"sha": "8e858dcf6e4dd7508ac4ade51dd76a55b54819f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e858dcf6e4dd7508ac4ade51dd76a55b54819f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "html_url": "https://github.com/rust-lang/rust/commit/f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bf541e27eaea348f1ab534b1ec2f1e701254d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bf541e27eaea348f1ab534b1ec2f1e701254d5", "html_url": "https://github.com/rust-lang/rust/commit/22bf541e27eaea348f1ab534b1ec2f1e701254d5"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "eb7f5d9c108d4a5d93568fe519204bff504cc95f", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "patch": "@@ -102,20 +102,14 @@ pub enum FunctionDebugContext {\n }\n \n impl FunctionDebugContext {\n-    fn get_ref<'a>(&'a self,\n-                   span: Span)\n-                   -> &'a FunctionDebugContextData {\n+    fn get_ref<'a>(&'a self, span: Span) -> &'a FunctionDebugContextData {\n         match *self {\n             FunctionDebugContext::RegularContext(ref data) => data,\n             FunctionDebugContext::DebugInfoDisabled => {\n-                span_bug!(span,\n-                          \"{}\",\n-                          FunctionDebugContext::debuginfo_disabled_message());\n+                span_bug!(span, \"{}\", FunctionDebugContext::debuginfo_disabled_message());\n             }\n             FunctionDebugContext::FunctionWithoutDebugInfo => {\n-                span_bug!(span,\n-                          \"{}\",\n-                          FunctionDebugContext::should_be_ignored_message());\n+                span_bug!(span, \"{}\", FunctionDebugContext::should_be_ignored_message());\n             }\n         }\n     }"}, {"sha": "eb71e7dcfe3c9823a8135e04ef65325992bd38c4", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "patch": "@@ -20,7 +20,6 @@ use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n use common::{self, BlockAndBuilder, Funclet};\n use common::{C_bool, C_str_slice, C_struct, C_u32, C_undef};\n use consts;\n-use debuginfo;\n use Disr;\n use machine::{llalign_of_min, llbitsize_of_real};\n use meth;\n@@ -113,8 +112,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         debug!(\"trans_block: terminator: {:?}\", terminator);\n \n         let span = terminator.source_info.span;\n-        let (scope, debug_span) = self.debug_loc(terminator.source_info);\n-        debuginfo::set_source_location(&self.debug_context, &bcx, scope, debug_span);\n+        self.set_debug_loc(&bcx, terminator.source_info);\n         match terminator.kind {\n             mir::TerminatorKind::Resume => {\n                 if let Some(cleanup_pad) = cleanup_pad {\n@@ -323,7 +321,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n                 // After this point, bcx is the block for the call to panic.\n                 bcx = panic_block;\n-                debuginfo::set_source_location(&self.debug_context, &bcx, scope, debug_span);\n+                self.set_debug_loc(&bcx, terminator.source_info);\n \n                 // Get the location information.\n                 let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n@@ -599,7 +597,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                 bug!(\"Cannot use direct operand with an intrinsic call\")\n                         };\n \n-                        trans_intrinsic_call(&bcx, callee.ty, &fn_ty, &llargs, dest, debug_span);\n+                        trans_intrinsic_call(&bcx, callee.ty, &fn_ty, &llargs, dest,\n+                            terminator.source_info.span);\n \n                         if let ReturnDest::IndirectOperand(dst, _) = ret_dest {\n                             // Make a fake operand for store_return\n@@ -639,8 +638,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     if let Some((_, target)) = *destination {\n                         let ret_bcx = self.build_block(target);\n                         ret_bcx.at_start(|ret_bcx| {\n-                            debuginfo::set_source_location(&self.debug_context,\n-                                &ret_bcx, scope, debug_span);\n+                            self.set_debug_loc(&ret_bcx, terminator.source_info);\n                             let op = OperandRef {\n                                 val: Immediate(invokeret),\n                                 ty: sig.output(),"}, {"sha": "8b43930260d86cb3d303f5601dc2c13b8c90d047", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "patch": "@@ -103,6 +103,11 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         monomorphize::apply_param_substs(self.fcx.ccx.shared(), self.param_substs, value)\n     }\n \n+    pub fn set_debug_loc(&mut self, bcx: &BlockAndBuilder, source_info: mir::SourceInfo) {\n+        let (scope, span) = self.debug_loc(source_info);\n+        debuginfo::set_source_location(&self.debug_context, bcx, scope, span);\n+    }\n+\n     pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (DIScope, Span) {\n         // Bail out if debug info emission is not enabled.\n         match self.debug_context {\n@@ -120,9 +125,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             source_info.span.expn_id == COMMAND_LINE_EXPN ||\n             self.fcx.ccx.sess().opts.debugging_opts.debug_macros {\n \n-            let scope_metadata = self.scope_metadata_for_loc(source_info.scope,\n-                source_info.span.lo);\n-            (scope_metadata, source_info.span)\n+            let scope = self.scope_metadata_for_loc(source_info.scope, source_info.span.lo);\n+            (scope, source_info.span)\n         } else {\n             let cm = self.fcx.ccx.sess().codemap();\n             // Walk up the macro expansion chain until we reach a non-expanded span.\n@@ -135,9 +139,9 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     break;\n                 }\n             }\n-            let scope_metadata = self.scope_metadata_for_loc(source_info.scope, span.lo);\n+            let scope = self.scope_metadata_for_loc(source_info.scope, span.lo);\n             // Use span of the outermost call site, while keeping the original lexical scope\n-            (scope_metadata, span)\n+            (scope, span)\n         }\n     }\n "}, {"sha": "51d7a1967371c7e1fa24ae21e3eef2542af2d74a", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11721a13e5dee8b8e2661d33ffa0a576e4643a6/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=f11721a13e5dee8b8e2661d33ffa0a576e4643a6", "patch": "@@ -11,7 +11,6 @@\n use rustc::mir;\n \n use base;\n-use debuginfo;\n use common::{self, BlockAndBuilder};\n \n use super::MirContext;\n@@ -26,8 +25,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                            -> BlockAndBuilder<'a, 'tcx> {\n         debug!(\"trans_statement(statement={:?})\", statement);\n \n-        let (scope, span) = self.debug_loc(statement.source_info);\n-        debuginfo::set_source_location(&self.debug_context, &bcx, scope, span);\n+        self.set_debug_loc(&bcx, statement.source_info);\n         match statement.kind {\n             mir::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 if let mir::Lvalue::Local(index) = *lvalue {"}]}