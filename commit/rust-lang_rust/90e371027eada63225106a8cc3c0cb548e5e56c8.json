{"sha": "90e371027eada63225106a8cc3c0cb548e5e56c8", "node_id": "C_kwDOAAsO6NoAKDkwZTM3MTAyN2VhZGE2MzIyNTEwNmE4Y2MzYzBjYjU0OGU1ZTU2Yzg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-24T03:09:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-28T11:31:51Z"}, "message": "rustc_metadata: Encode list of all crate's traits into metadata", "tree": {"sha": "6a8ae848c986572cb03610a7e1bb8f256d442a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8ae848c986572cb03610a7e1bb8f256d442a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e371027eada63225106a8cc3c0cb548e5e56c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e371027eada63225106a8cc3c0cb548e5e56c8", "html_url": "https://github.com/rust-lang/rust/commit/90e371027eada63225106a8cc3c0cb548e5e56c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e371027eada63225106a8cc3c0cb548e5e56c8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4", "html_url": "https://github.com/rust-lang/rust/commit/e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4"}], "stats": {"total": 207, "additions": 95, "deletions": 112}, "files": [{"sha": "ec88cc52597a268658d995956ded879e1debb2ea", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -1406,6 +1406,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n+    fn get_traits(&'a self) -> impl Iterator<Item = DefId> + 'a {\n+        self.root.traits.decode(self).map(|index| self.local_def_id(index))\n+    }\n+\n     fn get_implementations_for_trait(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "33dd59e99ff05c99b775f85f3c3f97a17fa870e8", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -4,9 +4,11 @@ use crate::native_libs;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n@@ -195,6 +197,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n+    traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+\n     implementations_of_trait => {\n         cdata.get_implementations_for_trait(tcx, Some(other))\n     }\n@@ -285,6 +289,28 @@ pub fn provide(providers: &mut Providers) {\n                 foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect();\n             Lrc::new(modules)\n         },\n+        traits_in_crate: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+\n+            #[derive(Default)]\n+            struct TraitsVisitor {\n+                traits: Vec<DefId>,\n+            }\n+            impl ItemLikeVisitor<'_> for TraitsVisitor {\n+                fn visit_item(&mut self, item: &hir::Item<'_>) {\n+                    if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {\n+                        self.traits.push(item.def_id.to_def_id());\n+                    }\n+                }\n+                fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n+                fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+                fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n+            }\n+\n+            let mut visitor = TraitsVisitor::default();\n+            tcx.hir().visit_all_item_likes(&mut visitor);\n+            tcx.arena.alloc_slice(&visitor.traits)\n+        },\n \n         // Returns a map from a sufficiently visible external item (i.e., an\n         // external item that is visible from at least one local module) to a"}, {"sha": "4f9a2c28d8bf0a3d4aa977e4c07a710bacd85ff8", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -614,8 +614,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // Encode the def IDs of impls, for coherence checking.\n         i = self.position();\n-        let impls = self.encode_impls();\n-        let impl_bytes = self.position() - i;\n+        let (traits, impls) = self.encode_traits_and_impls();\n+        let traits_and_impls_bytes = self.position() - i;\n \n         let tcx = self.tcx;\n \n@@ -727,6 +727,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             foreign_modules,\n             source_map,\n             impls,\n+            traits,\n             exported_symbols,\n             interpret_alloc_index,\n             tables,\n@@ -753,7 +754,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             eprintln!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n             eprintln!(\"          native bytes: {}\", native_lib_bytes);\n             eprintln!(\"      source_map bytes: {}\", source_map_bytes);\n-            eprintln!(\"            impl bytes: {}\", impl_bytes);\n+            eprintln!(\"traits and impls bytes: {}\", traits_and_impls_bytes);\n             eprintln!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             eprintln!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             eprintln!(\" def-path hashes bytes: {}\", def_path_hash_map_bytes);\n@@ -1784,16 +1785,23 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n-    fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {\n-        empty_proc_macro!(self);\n-        debug!(\"EncodeContext::encode_impls()\");\n+    fn encode_traits_and_impls(&mut self) -> (Lazy<[DefIndex]>, Lazy<[TraitImpls]>) {\n+        if self.is_proc_macro {\n+            return (Lazy::empty(), Lazy::empty());\n+        }\n+        debug!(\"EncodeContext::encode_traits_and_impls()\");\n         let tcx = self.tcx;\n-        let mut visitor = ImplVisitor { tcx, impls: FxHashMap::default() };\n+        let mut visitor =\n+            TraitsAndImplsVisitor { tcx, impls: FxHashMap::default(), traits: Default::default() };\n         tcx.hir().visit_all_item_likes(&mut visitor);\n \n+        let mut all_traits = visitor.traits;\n         let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();\n \n         // Bring everything into deterministic order for hashing\n+        all_traits.sort_by_cached_key(|&local_def_index| {\n+            tcx.hir().def_path_hash(LocalDefId { local_def_index })\n+        });\n         all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));\n \n         let all_impls: Vec<_> = all_impls\n@@ -1811,7 +1819,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .collect();\n \n-        self.lazy(&all_impls)\n+        (self.lazy(&all_traits), self.lazy(&all_impls))\n     }\n \n     // Encodes all symbols exported from this crate into the metadata.\n@@ -2033,27 +2041,34 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n-struct ImplVisitor<'tcx> {\n+struct TraitsAndImplsVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    traits: Vec<DefIndex>,\n     impls: FxHashMap<DefId, Vec<(DefIndex, Option<fast_reject::SimplifiedType>)>>,\n }\n \n-impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n+impl<'tcx, 'v> ItemLikeVisitor<'v> for TraitsAndImplsVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if let hir::ItemKind::Impl { .. } = item.kind {\n-            if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {\n-                let simplified_self_ty = fast_reject::simplify_type(\n-                    self.tcx,\n-                    trait_ref.self_ty(),\n-                    SimplifyParams::No,\n-                    StripReferences::No,\n-                );\n+        match item.kind {\n+            hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) => {\n+                self.traits.push(item.def_id.local_def_index);\n+            }\n+            hir::ItemKind::Impl(..) => {\n+                if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {\n+                    let simplified_self_ty = fast_reject::simplify_type(\n+                        self.tcx,\n+                        trait_ref.self_ty(),\n+                        SimplifyParams::No,\n+                        StripReferences::No,\n+                    );\n \n-                self.impls\n-                    .entry(trait_ref.def_id)\n-                    .or_default()\n-                    .push((item.def_id.local_def_index, simplified_self_ty));\n+                    self.impls\n+                        .entry(trait_ref.def_id)\n+                        .or_default()\n+                        .push((item.def_id.local_def_index, simplified_self_ty));\n+                }\n             }\n+            _ => {}\n         }\n     }\n "}, {"sha": "efe02451a2af90ea575b2ad0e42e30b8b3b12814", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -222,6 +222,7 @@ crate struct CrateRoot<'tcx> {\n     diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n     native_libraries: Lazy<[NativeLib]>,\n     foreign_modules: Lazy<[ForeignModule]>,\n+    traits: Lazy<[DefIndex]>,\n     impls: Lazy<[TraitImpls]>,\n     interpret_alloc_index: Lazy<[u32]>,\n     proc_macro_data: Option<ProcMacroData>,"}, {"sha": "027c0c64924b830200a3f179716b3fc936f3842f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -1609,11 +1609,11 @@ rustc_queries! {\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n \n-    /// A vector of every trait accessible in the whole crate\n-    /// (i.e., including those from subcrates). This is used only for\n-    /// error reporting.\n-    query all_traits(_: ()) -> &'tcx [DefId] {\n-        desc { \"fetching all foreign and local traits\" }\n+    /// A list of all traits in a crate, used by rustdoc and error reporting.\n+    /// NOTE: Not named just `traits` due to a naming conflict.\n+    query traits_in_crate(_: CrateNum) -> &'tcx [DefId] {\n+        desc { \"fetching all traits in a crate\" }\n+        separate_provide_extern\n     }\n \n     /// The list of symbols exported from the given crate."}, {"sha": "dd571e29bf69506401adfff0dd8029a16615f4f3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -1577,6 +1577,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_limit(self) -> Limit {\n         self.limits(()).const_eval_limit\n     }\n+\n+    pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {\n+        iter::once(LOCAL_CRATE)\n+            .chain(self.crates(()).iter().copied())\n+            .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())\n+    }\n }\n \n /// A trait implemented for all `X<'a>` types that can be safely and"}, {"sha": "a9ae0ec53c7e78283275b2e27902533cf217d44c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -1567,14 +1567,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n-        let all_traits = self.tcx.all_traits(());\n-        let traits_with_same_path: std::collections::BTreeSet<_> = all_traits\n-            .iter()\n-            .filter(|trait_def_id| **trait_def_id != trait_ref.def_id())\n-            .filter(|trait_def_id| self.tcx.def_path_str(**trait_def_id) == required_trait_path)\n+        let traits_with_same_path: std::collections::BTreeSet<_> = self\n+            .tcx\n+            .all_traits()\n+            .filter(|trait_def_id| *trait_def_id != trait_ref.def_id())\n+            .filter(|trait_def_id| self.tcx.def_path_str(*trait_def_id) == required_trait_path)\n             .collect();\n         for trait_with_same_path in traits_with_same_path {\n-            if let Some(impl_def_id) = get_trait_impl(*trait_with_same_path) {\n+            if let Some(impl_def_id) = get_trait_impl(trait_with_same_path) {\n                 let impl_span = self.tcx.def_span(impl_def_id);\n                 err.span_help(impl_span, \"trait impl with same name found\");\n                 let trait_crate = self.tcx.crate_name(trait_with_same_path.krate);"}, {"sha": "f7f4c52c2a1d3cf1afe3eaf95e2941fa5b75c167", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -7,7 +7,7 @@ mod prelude2021;\n pub mod probe;\n mod suggest;\n \n-pub use self::suggest::{SelfSource, TraitInfo};\n+pub use self::suggest::SelfSource;\n pub use self::CandidateSource::*;\n pub use self::MethodError::*;\n \n@@ -31,7 +31,6 @@ use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use self::probe::{IsSuggestion, ProbeScope};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    suggest::provide(providers);\n     probe::provide(providers);\n }\n "}, {"sha": "7f9c75c7fee642933ab1a5a5ada5c40387dcc710", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 71, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -5,8 +5,8 @@ use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def::Namespace;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1922,76 +1922,10 @@ impl Ord for TraitInfo {\n     }\n }\n \n-/// Retrieves all traits in this crate and any dependent crates.\n+/// Retrieves all traits in this crate and any dependent crates,\n+/// and wraps them into `TraitInfo` for custom sorting.\n pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n-    tcx.all_traits(()).iter().map(|&def_id| TraitInfo { def_id }).collect()\n-}\n-\n-/// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n-    use hir::itemlikevisit;\n-\n-    let mut traits = vec![];\n-\n-    // Crate-local:\n-\n-    struct Visitor<'a> {\n-        traits: &'a mut Vec<DefId>,\n-    }\n-\n-    impl<'v, 'a> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a> {\n-        fn visit_item(&mut self, i: &'v hir::Item<'v>) {\n-            match i.kind {\n-                hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) => {\n-                    self.traits.push(i.def_id.to_def_id());\n-                }\n-                _ => (),\n-            }\n-        }\n-\n-        fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-\n-        fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-\n-        fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n-    }\n-\n-    tcx.hir().visit_all_item_likes(&mut Visitor { traits: &mut traits });\n-\n-    // Cross-crate:\n-\n-    let mut external_mods = FxHashSet::default();\n-    fn handle_external_res(\n-        tcx: TyCtxt<'_>,\n-        traits: &mut Vec<DefId>,\n-        external_mods: &mut FxHashSet<DefId>,\n-        res: Res<!>,\n-    ) {\n-        match res {\n-            Res::Def(DefKind::Trait | DefKind::TraitAlias, def_id) => {\n-                traits.push(def_id);\n-            }\n-            Res::Def(DefKind::Mod, def_id) => {\n-                if !external_mods.insert(def_id) {\n-                    return;\n-                }\n-                for child in tcx.item_children(def_id).iter() {\n-                    handle_external_res(tcx, traits, external_mods, child.res)\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-    for &cnum in tcx.crates(()).iter() {\n-        let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n-        handle_external_res(tcx, &mut traits, &mut external_mods, Res::Def(DefKind::Mod, def_id));\n-    }\n-\n-    tcx.arena.alloc_from_iter(traits)\n-}\n-\n-pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.all_traits = compute_all_traits;\n+    tcx.all_traits().map(|def_id| TraitInfo { def_id }).collect()\n }\n \n fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Option<Span>, bool) {"}, {"sha": "f54ab9f2b11aac9bc210bbc836c91bd8b087c821", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n         trace!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n-        for &trait_def_id in self.cx.tcx.all_traits(()).iter() {\n+        for trait_def_id in self.cx.tcx.all_traits() {\n             if !self.cx.cache.access_levels.is_public(trait_def_id)\n                 || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {"}, {"sha": "32b66278bf4230f8afe78c843cf104700271d172", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -369,10 +369,8 @@ crate fn run_global_ctxt(\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits: tcx\n-            .all_traits(())\n-            .iter()\n-            .cloned()\n-            .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n+            .all_traits()\n+            .filter(|&trait_def_id| tcx.trait_is_auto(trait_def_id))\n             .collect(),\n         module_trait_cache: FxHashMap::default(),\n         cache: Cache::new(access_levels, render_options.document_private),"}, {"sha": "cc1d994dc99f03349272601f01bd828686bdf7a2", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e371027eada63225106a8cc3c0cb548e5e56c8/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=90e371027eada63225106a8cc3c0cb548e5e56c8", "patch": "@@ -129,7 +129,7 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n     // `tcx.crates(())` doesn't include the local crate, and `tcx.all_trait_implementations`\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     let mut extra_attrs = Vec::new();\n-    for &trait_did in cx.tcx.all_traits(()).iter() {\n+    for trait_did in cx.tcx.all_traits() {\n         for &impl_did in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = impl_did.to_def_id();\n             cx.tcx.sess.prof.generic_activity(\"build_local_trait_impl\").run(|| {"}]}