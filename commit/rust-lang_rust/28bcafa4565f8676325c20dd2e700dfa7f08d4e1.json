{"sha": "28bcafa4565f8676325c20dd2e700dfa7f08d4e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmNhZmE0NTY1Zjg2NzYzMjVjMjBkZDJlNzAwZGZhN2YwOGQ0ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-16T07:01:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-16T07:01:34Z"}, "message": "Auto merge of #31668 - cuviper:lfs, r=alexcrichton\n\nThis follows the pattern already used for stat functions from #31551.  Now\n`ftruncate`, `lseek`, and `readdir_r` use their explicit 64-bit variants for\nLFS support, using wider `off_t` and `dirent` types.  This also updates to\n`open64`, which uses no different types but implies the `O_LARGEFILE` flag.\n\nNon-Linux platforms just map their normal functions to the 64-bit names.\n\nr? @alexcrichton", "tree": {"sha": "12d479000d08bcb9c74a0b2a8c21639b6889e079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d479000d08bcb9c74a0b2a8c21639b6889e079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28bcafa4565f8676325c20dd2e700dfa7f08d4e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28bcafa4565f8676325c20dd2e700dfa7f08d4e1", "html_url": "https://github.com/rust-lang/rust/commit/28bcafa4565f8676325c20dd2e700dfa7f08d4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28bcafa4565f8676325c20dd2e700dfa7f08d4e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e8ac5114cece0cf691cf33e88cde72e419240a", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e8ac5114cece0cf691cf33e88cde72e419240a", "html_url": "https://github.com/rust-lang/rust/commit/29e8ac5114cece0cf691cf33e88cde72e419240a"}, {"sha": "c84ab396350b81f07a87071c6b305cc513872a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84ab396350b81f07a87071c6b305cc513872a3e", "html_url": "https://github.com/rust-lang/rust/commit/c84ab396350b81f07a87071c6b305cc513872a3e"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "e8e0a604e552e0c60fee49f46620f23a989002e2", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28bcafa4565f8676325c20dd2e700dfa7f08d4e1/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28bcafa4565f8676325c20dd2e700dfa7f08d4e1/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=28bcafa4565f8676325c20dd2e700dfa7f08d4e1", "patch": "@@ -15,7 +15,7 @@ use os::unix::prelude::*;\n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{self, dirent, c_int, off_t, mode_t};\n+use libc::{self, c_int, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;\n@@ -26,9 +26,12 @@ use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n #[cfg(target_os = \"linux\")]\n-use libc::{stat64, fstat64, lstat64};\n+use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r, open64};\n #[cfg(not(target_os = \"linux\"))]\n-use libc::{stat as stat64, fstat as fstat64, lstat as lstat64};\n+use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,\n+           ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64, open as open64};\n+#[cfg(not(any(target_os = \"linux\", target_os = \"solaris\")))]\n+use libc::{readdir_r as readdir64_r};\n \n pub struct File(FileDesc);\n \n@@ -48,7 +51,7 @@ unsafe impl Send for Dir {}\n unsafe impl Sync for Dir {}\n \n pub struct DirEntry {\n-    entry: dirent,\n+    entry: dirent64,\n     root: Arc<PathBuf>,\n     // We need to store an owned copy of the directory name\n     // on Solaris because a) it uses a zero-length array to\n@@ -223,7 +226,7 @@ impl Iterator for ReadDir {\n             };\n             let mut entry_ptr = ptr::null_mut();\n             loop {\n-                if libc::readdir_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n+                if readdir64_r(self.dirp.0, &mut ret.entry, &mut entry_ptr) != 0 {\n                     return Some(Err(Error::last_os_error()))\n                 }\n                 if entry_ptr.is_null() {\n@@ -394,7 +397,7 @@ impl File {\n                     try!(opts.get_creation_mode()) |\n                     (opts.custom_flags as c_int & !libc::O_ACCMODE);\n         let fd = try!(cvt_r(|| unsafe {\n-            libc::open(path.as_ptr(), flags, opts.mode as c_int)\n+            open64(path.as_ptr(), flags, opts.mode as c_int)\n         }));\n         let fd = FileDesc::new(fd);\n \n@@ -443,7 +446,7 @@ impl File {\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n         try!(cvt_r(|| unsafe {\n-            libc::ftruncate(self.0.raw(), size as libc::off_t)\n+            ftruncate64(self.0.raw(), size as off64_t)\n         }));\n         Ok(())\n     }\n@@ -460,11 +463,11 @@ impl File {\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n         let (whence, pos) = match pos {\n-            SeekFrom::Start(off) => (libc::SEEK_SET, off as off_t),\n-            SeekFrom::End(off) => (libc::SEEK_END, off as off_t),\n-            SeekFrom::Current(off) => (libc::SEEK_CUR, off as off_t),\n+            SeekFrom::Start(off) => (libc::SEEK_SET, off as off64_t),\n+            SeekFrom::End(off) => (libc::SEEK_END, off as off64_t),\n+            SeekFrom::Current(off) => (libc::SEEK_CUR, off as off64_t),\n         };\n-        let n = try!(cvt(unsafe { libc::lseek(self.0.raw(), pos, whence) }));\n+        let n = try!(cvt(unsafe { lseek64(self.0.raw(), pos, whence) }));\n         Ok(n as u64)\n     }\n "}]}