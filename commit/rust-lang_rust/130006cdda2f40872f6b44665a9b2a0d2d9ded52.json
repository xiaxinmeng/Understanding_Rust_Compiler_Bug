{"sha": "130006cdda2f40872f6b44665a9b2a0d2d9ded52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMDAwNmNkZGEyZjQwODcyZjZiNDQ2NjVhOWIyYTBkMmQ5ZGVkNTI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-07T01:25:51Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-07T01:39:01Z"}, "message": "Tie the knot for self-calls inside extended objects.  Closes #539.", "tree": {"sha": "6592ad6893b0e1848234c29378a21dfaf850e153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6592ad6893b0e1848234c29378a21dfaf850e153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/130006cdda2f40872f6b44665a9b2a0d2d9ded52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/130006cdda2f40872f6b44665a9b2a0d2d9ded52", "html_url": "https://github.com/rust-lang/rust/commit/130006cdda2f40872f6b44665a9b2a0d2d9ded52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/130006cdda2f40872f6b44665a9b2a0d2d9ded52/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4c2ac0bee9a23a5f3ec230c6ea54fb2281dbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4c2ac0bee9a23a5f3ec230c6ea54fb2281dbcb", "html_url": "https://github.com/rust-lang/rust/commit/cf4c2ac0bee9a23a5f3ec230c6ea54fb2281dbcb"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "e8139432ad2092d96cd8e83b145aebd5f8da04a9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/130006cdda2f40872f6b44665a9b2a0d2d9ded52/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130006cdda2f40872f6b44665a9b2a0d2d9ded52/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=130006cdda2f40872f6b44665a9b2a0d2d9ded52", "patch": "@@ -7829,7 +7829,7 @@ fn process_fwding_mthd(@local_ctxt cx, &span sp, @ty::method m,\n                        ty::t[] additional_field_tys) -> ValueRef {\n \n     // NB: self_ty (and llself_ty) is the type of the outer object;\n-    // with_obj_ty (and llwith_obj_ty) is the type of the inner object.\n+    // with_obj_ty is the type of the inner object.\n \n     // The method m is being called on the outer object, but the outer object\n     // doesn't have that method; only the inner object does.  So what we have\n@@ -7870,6 +7870,11 @@ fn process_fwding_mthd(@local_ctxt cx, &span sp, @ty::method m,\n     auto llself_obj_ptr = alloca(bcx, llself_ty);\n     bcx.build.Store(fcx.llenv, llself_obj_ptr);\n \n+    // Grab hold of the outer object so we can pass it into the inner object,\n+    // in case that inner object needs to make any self-calls.  (Such calls\n+    // will need to dispatch back through the outer object.)\n+    auto llself_obj = bcx.build.Load(llself_obj_ptr);\n+\n     // The 'llretptr' that will arrive in the forwarding function we're\n     // creating also needs to be the correct size.  Cast it to the size of the\n     // method's return type, if necessary.\n@@ -7961,11 +7966,10 @@ fn process_fwding_mthd(@local_ctxt cx, &span sp, @ty::method m,\n \n     // Set up the original method to be called.\n     auto orig_mthd_ty = ty::method_ty_to_fn_ty(cx.ccx.tcx, *m);\n-    auto llwith_obj_ty = val_ty(llwith_obj.val);\n     auto llorig_mthd_ty =\n         type_of_fn_full(bcx.fcx.lcx.ccx, sp,\n                         ty::ty_fn_proto(bcx.fcx.lcx.ccx.tcx, orig_mthd_ty),\n-                        some[TypeRef](llwith_obj_ty),\n+                        some[TypeRef](llself_ty),\n                         m.inputs,\n                         m.output,\n                         vec::len[ast::ty_param](ty_params));\n@@ -7976,7 +7980,7 @@ fn process_fwding_mthd(@local_ctxt cx, &span sp, @ty::method m,\n     // Set up the three implicit arguments to the original method we'll need\n     // to call.\n     let vec[ValueRef] llorig_mthd_args = [llretptr, fcx.lltaskptr, \n-                                          llwith_obj.val];\n+                                          llself_obj];\n \n     // Copy the explicit arguments that are being passed into the forwarding\n     // function (they're in fcx.llargs) to llorig_mthd_args."}, {"sha": "dd0caf4bb4f77959fd5fea22aa16dbac869204e9", "filename": "src/test/run-pass/anon-obj-degenerate.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/130006cdda2f40872f6b44665a9b2a0d2d9ded52/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130006cdda2f40872f6b44665a9b2a0d2d9ded52/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs?ref=130006cdda2f40872f6b44665a9b2a0d2d9ded52", "patch": "@@ -1,6 +1,4 @@\n //xfail-stage0\n-//xfail-stage1\n-//xfail-stage2\n use std;\n \n fn main() {\n@@ -17,13 +15,10 @@ fn main() {\n     auto my_a = a();\n \n     // Degenerate anonymous object: one that doesn't add any new\n-    // methods or fields.  Adding support for this is issue #539.\n-    // (Making this work will also ensure that calls to anonymous\n-    // objects \"fall through\" appropriately.)\n+    // methods or fields.\n \n     auto my_d = obj() { with my_a };\n \n-    // Right now, this fails with \"unknown method 'foo' of obj\".\n     assert (my_d.foo() == 2);\n     assert (my_d.bar() == 2);\n "}]}