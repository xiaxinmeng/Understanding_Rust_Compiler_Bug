{"sha": "809d01c62ef25814abf8e490eb80128989985014", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOWQwMWM2MmVmMjU4MTRhYmY4ZTQ5MGViODAxMjg5ODk5ODUwMTQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-04-04T15:09:58Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-04-04T15:09:58Z"}, "message": "Updated codeblocks to specify language where required.", "tree": {"sha": "17da21afd64ffd6a30f94e8be521f1b137fffb6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17da21afd64ffd6a30f94e8be521f1b137fffb6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/809d01c62ef25814abf8e490eb80128989985014", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlrE6sYACgkQAXYLT59T\n8VTkvw//WU1LwRg+NcbBjlU0FTsl5aSCnFRQsKOVUqUWyeURMfttA4b6T8+6roDe\n8hnhufI97LVDjhjc6aroswJ7swCaQqvv2KjAaIojQK6VRHVFwKrBtB9aTVAks7lc\nEY4yZAlnIrpRjiESoy59soLw+LTYNDWfvmV/zgkCNUrx7h8TlVLMx1qo1n1FdEo/\nQRwpUE7PDfQLYD97M7nKtu2hsFFDt6vmbeTtcHlF5vkfnGqg9/YZwm4ZWcPwJcVj\nMv+m6EIxHBVCbvMq618xqcx9xq95NRR+YJBGPmWTuLL3BVG0Bu49hzzeNZCLEgXS\nOg7MfhSbCV29zjBN8mj3MMCwIshIbzqzh9qqvnqHkFRuiAkxVow3Rg6wKqqeLRRe\nyK7cR/t5hauMRauRv56XTvG+FLi6LNlwmEtP/9x8TyeDlCtStQqbD3BL/GzOdIln\nSLR1milMyL71pCyEev7SJ4s46rKtwDadwY0/kql4N/ZWCLOhmMfkGZHnN+pCgB2A\nhTJyg9xGHbjyuVZfUj/hrIOls2Yibnw3Bkjmp6w6EjGocBMG2y1pskzsRf2ZrJMJ\niOYjVvBIpHIKKtKs2qSBNTgcVskVFCHa9k+NnjhUeU+EBVtTLT2+PdR/BAm0dV55\ngPptPJAzVSMrTEUX/YsYBN4lC3NGrlfIWf5WqOy7jCQ5QtISOSA=\n=/jkq\n-----END PGP SIGNATURE-----", "payload": "tree 17da21afd64ffd6a30f94e8be521f1b137fffb6a\nparent 9e9a987a0214609d6a1da4ce8b1dfd7870b40044\nauthor David Wood <david@davidtw.co> 1522854598 +0100\ncommitter David Wood <david@davidtw.co> 1522854598 +0100\n\nUpdated codeblocks to specify language where required.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/809d01c62ef25814abf8e490eb80128989985014", "html_url": "https://github.com/rust-lang/rust/commit/809d01c62ef25814abf8e490eb80128989985014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/809d01c62ef25814abf8e490eb80128989985014/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9a987a0214609d6a1da4ce8b1dfd7870b40044", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9a987a0214609d6a1da4ce8b1dfd7870b40044", "html_url": "https://github.com/rust-lang/rust/commit/9e9a987a0214609d6a1da4ce8b1dfd7870b40044"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "7e1b7c08c3dad99fc22c4566c84cf15a3e78082e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=809d01c62ef25814abf8e490eb80128989985014", "patch": "@@ -353,8 +353,8 @@ pub struct ScopeTree {\n     /// the result of `g()` occurs after the yield (and therefore\n     /// doesn't). If we want to infer that, we can look at the\n     /// postorder traversal:\n-    /// ```\n-    /// `foo` `f` Call#1 `y` Yield `bar` `g` Call#3 Call#2 Call#0\n+    /// ```plain,ignore\n+    ///     `foo` `f` Call#1 `y` Yield `bar` `g` Call#3 Call#2 Call#0\n     /// ```\n     ///\n     /// In which we can easily see that `Call#1` occurs before the yield,"}, {"sha": "548296b77f9cf04b7b9f23e61487f3783826ae75", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=809d01c62ef25814abf8e490eb80128989985014", "patch": "@@ -362,7 +362,9 @@ enum EvaluationResult {\n     /// When checking `foo`, we have to prove `T: Trait`. This basically\n     /// translates into this:\n     ///\n+    /// ```plain,ignore\n     ///     (T: Trait + Sized \u2192_\\impl T: Trait), T: Trait \u22a2 T: Trait\n+    /// ```\n     ///\n     /// When we try to prove it, we first go the first option, which\n     /// recurses. This shows us that the impl is \"useless\" - it won't"}, {"sha": "3a97d2767444bc065f75555a8c9c4e468bcf1ed5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=809d01c62ef25814abf8e490eb80128989985014", "patch": "@@ -427,14 +427,14 @@ fn generate_fn_name_span(cm: &CodeMap, span: Span) -> Option<Span> {\n /// a new local type parameter.\n ///\n /// For instance:\n-/// ```\n+/// ```rust,ignore (pseudo-Rust)\n /// // Given span\n /// fn my_function(param: T)\n-///                       ^ Original span\n+/// //                    ^ Original span\n ///\n /// // Result\n /// fn my_function(param: T)\n-///    ^^^^^^^^^^^ Generated span with snippet `my_function<T>`\n+/// // ^^^^^^^^^^^ Generated span with snippet `my_function<T>`\n /// ```\n ///\n /// Attention: The method used is very fragile since it essentially duplicates the work of the"}, {"sha": "b5e862fac958a027089e068924fffdf6440e3a31", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=809d01c62ef25814abf8e490eb80128989985014", "patch": "@@ -1164,10 +1164,12 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     /// constraint that `'z <= 'a`. Given this setup, let's clarify the\n     /// parameters in (roughly) terms of the example:\n     ///\n+    /// ```plain,ignore (pseudo-Rust)\n     ///     A borrow of: `& 'z bk * r` where `r` has type `& 'a bk T`\n     ///     borrow_region   ^~                 ref_region    ^~\n     ///     borrow_kind        ^~               ref_kind        ^~\n     ///     ref_cmt                 ^\n+    /// ```\n     ///\n     /// Here `bk` stands for some borrow-kind (e.g., `mut`, `uniq`, etc).\n     ///"}, {"sha": "faf3ccb1133adcb89c9a18a168d0120f8aa5a228", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809d01c62ef25814abf8e490eb80128989985014/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=809d01c62ef25814abf8e490eb80128989985014", "patch": "@@ -42,21 +42,21 @@ use syntax_pos::Span;\n ///\n /// Example:\n ///\n-/// ```\n+/// ```rust,ignore (pseudo-Rust)\n /// impl<T> Trait<Foo> for Bar { ... }\n-///      ^ T does not appear in `Foo` or `Bar`, error!\n+/// //   ^ T does not appear in `Foo` or `Bar`, error!\n ///\n /// impl<T> Trait<Foo<T>> for Bar { ... }\n-///      ^ T appears in `Foo<T>`, ok.\n+/// //   ^ T appears in `Foo<T>`, ok.\n ///\n /// impl<T> Trait<Foo> for Bar where Bar: Iterator<Item=T> { ... }\n-///      ^ T is bound to `<Bar as Iterator>::Item`, ok.\n+/// //   ^ T is bound to `<Bar as Iterator>::Item`, ok.\n ///\n /// impl<'a> Trait<Foo> for Bar { }\n-///      ^ 'a is unused, but for back-compat we allow it\n+/// //   ^ 'a is unused, but for back-compat we allow it\n ///\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n-///      ^ 'a is unused and appears in assoc type, error\n+/// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,"}]}