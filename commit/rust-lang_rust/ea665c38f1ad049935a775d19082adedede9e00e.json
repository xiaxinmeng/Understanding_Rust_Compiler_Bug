{"sha": "ea665c38f1ad049935a775d19082adedede9e00e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjY1YzM4ZjFhZDA0OTkzNWE3NzVkMTkwODJhZGVkZWRlOWUwMGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T17:31:17Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-14T17:31:17Z"}, "message": "Fix FP with `USELESS_VEC` and non-copy types", "tree": {"sha": "ec0aa058831016d2340aada9404633a9068bdced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0aa058831016d2340aada9404633a9068bdced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea665c38f1ad049935a775d19082adedede9e00e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXh8x8AAoJEF5CfHlMukXoCZkQAJ8pT4YYQ4D6+i0JS9YoKNRZ\njCd2EbIbjbZy0cikAnmMG6+8znTOUb0++nAuo4J/K5ISeulpYmgkbu2ZnhVMssTr\nOl3iZRAgpl9cBsqFYk4AtfSIMbfhJg5bgkUc8pGaLWPzczI4VtYFPkbuWVRbJ/H+\nxvc1JtmNiemCvI981Dqpl4VfFjP+SFwlBxrjRIhxS6wnl/W25hi1LdHd2UB55EDz\nHQlWPUqvwBcSNwC9grChn0goV2/vWmcjKs2oJXgz5edRdiDj4eA3dqaxvptP66Kf\nftws55KFsaH68CNC+sku29DlbV2nsGGPtBDrklynqVgwYUIFjaBGNfbOs2xBldR5\n56baYcMd34i0vBbnKSSu1o3ycnlRwWeCwwAUHpPG0Hk4aGA9G+ZGQMXqq2THks1i\n6tg/HdRP74ZZ21kgoxwbWv8drC8AV6+sJtEdLnlksGtwZk7efAJdNwhI7wJ6qmee\nU6QE2P2lgIt/OTxkyBrDAIUutDKdmup4kkG0+s4S5aw7WA7MsT4e50dUO/8HVM5y\n7KYWCIEK5/Qn02ICV/hZAWzDf7vwkBSJ7/T0Phvlk6S/DcxInDwcIvxRdxV+BLP8\nx+ggP7KfjsTby3dTEqBQL/mvv8L2IHMjmLjVh4PEaccJt5bg1sTQxqWzGkdIVfUI\nBapPeqDRJvdrNP6j9s1n\n=4lW7\n-----END PGP SIGNATURE-----", "payload": "tree ec0aa058831016d2340aada9404633a9068bdced\nparent c1eb5828fafae326919c6999bfda075c87dcc296\nauthor mcarton <cartonmartin+git@gmail.com> 1468517477 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468517477 +0200\n\nFix FP with `USELESS_VEC` and non-copy types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea665c38f1ad049935a775d19082adedede9e00e", "html_url": "https://github.com/rust-lang/rust/commit/ea665c38f1ad049935a775d19082adedede9e00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea665c38f1ad049935a775d19082adedede9e00e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eb5828fafae326919c6999bfda075c87dcc296", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eb5828fafae326919c6999bfda075c87dcc296", "html_url": "https://github.com/rust-lang/rust/commit/c1eb5828fafae326919c6999bfda075c87dcc296"}], "stats": {"total": 110, "additions": 64, "deletions": 46}, "files": [{"sha": "755c325fcbc36858c685db4d6d9d869d36514524", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ea665c38f1ad049935a775d19082adedede9e00e", "patch": "@@ -2,17 +2,17 @@ use rustc::hir;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::const_qualif::ConstQualif;\n-use rustc::ty::subst::{Subst, TypeSpace};\n+use rustc::ty::subst::TypeSpace;\n use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n use std::borrow::Cow;\n use std::fmt;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n-use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n-            match_type, method_chain_args, return_ty, same_tys, snippet, span_lint,\n-            span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n+use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, match_path,\n+            match_trait_method, match_type, method_chain_args, return_ty, same_tys, snippet,\n+            span_lint, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::MethodArgs;\n use utils::paths;\n use utils::sugg;\n@@ -471,7 +471,7 @@ impl LateLintPass for Pass {\n \n                     // check conventions w.r.t. conversion method names and predicates\n                     let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n-                    let is_copy = is_copy(cx, ty, item);\n+                    let is_copy = is_copy(cx, ty, item.id);\n                     for &(ref conv, self_kinds) in &CONVENTIONS {\n                         if_let_chain! {[\n                             conv.check(&name.as_str()),\n@@ -1163,8 +1163,3 @@ fn is_bool(ty: &hir::Ty) -> bool {\n         false\n     }\n }\n-\n-fn is_copy<'a, 'ctx>(cx: &LateContext<'a, 'ctx>, ty: ty::Ty<'ctx>, item: &hir::Item) -> bool {\n-    let env = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n-    !ty.subst(cx.tcx, env.free_substs).moves_by_default(cx.tcx.global_tcx(), &env, item.span)\n-}"}, {"sha": "bcc4be745c0022d73fefc30b9be24ac557363d51", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ea665c38f1ad049935a775d19082adedede9e00e", "patch": "@@ -15,7 +15,7 @@ use std::env;\n use std::mem;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n-use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span};\n+use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n \n@@ -723,3 +723,8 @@ pub fn type_is_unsafe_function(ty: ty::Ty) -> bool {\n         _ => false,\n     }\n }\n+\n+pub fn is_copy<'a, 'ctx>(cx: &LateContext<'a, 'ctx>, ty: ty::Ty<'ctx>, env: NodeId) -> bool {\n+    let env = ty::ParameterEnvironment::for_item(cx.tcx, env);\n+    !ty.subst(cx.tcx, env.free_substs).moves_by_default(cx.tcx.global_tcx(), &env, DUMMY_SP)\n+}"}, {"sha": "cc9d5a5f224b042e0f7256d972ed11077c3058b2", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea665c38f1ad049935a775d19082adedede9e00e/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=ea665c38f1ad049935a775d19082adedede9e00e", "patch": "@@ -1,10 +1,10 @@\n-use rustc::lint::*;\n-use rustc::ty::TypeVariants;\n use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc::ty;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::eval_const_expr_partial;\n use syntax::codemap::Span;\n-use utils::{higher, snippet, span_lint_and_then};\n+use utils::{higher, is_copy, snippet, span_lint_and_then};\n \n /// **What it does:** This lint warns about using `&vec![..]` when using `&[..]` would be possible.\n ///\n@@ -35,50 +35,61 @@ impl LateLintPass for Pass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         // search for `&vec![_]` expressions where the adjusted type is `&[_]`\n         if_let_chain!{[\n-            let TypeVariants::TyRef(_, ref ty) = cx.tcx.expr_ty_adjusted(expr).sty,\n-            let TypeVariants::TySlice(..) = ty.ty.sty,\n+            let ty::TypeVariants::TyRef(_, ref ty) = cx.tcx.expr_ty_adjusted(expr).sty,\n+            let ty::TypeVariants::TySlice(..) = ty.ty.sty,\n             let ExprAddrOf(_, ref addressee) = expr.node,\n+            let Some(vec_args) = higher::vec_macro(cx, addressee),\n         ], {\n-            check_vec_macro(cx, addressee, expr.span);\n+            check_vec_macro(cx, &vec_args, expr.span);\n         }}\n \n         // search for `for _ in vec![\u2026]`\n-        if let Some((_, arg, _)) = higher::for_loop(expr) {\n+        if_let_chain!{[\n+            let Some((_, arg, _)) = higher::for_loop(expr),\n+            let Some(vec_args) = higher::vec_macro(cx, arg),\n+            is_copy(cx, vec_type(cx.tcx.expr_ty_adjusted(arg)), cx.tcx.map.get_parent(expr.id)),\n+        ], {\n             // report the error around the `vec!` not inside `<std macros>:`\n             let span = cx.sess().codemap().source_callsite(arg.span);\n-            check_vec_macro(cx, arg, span);\n-        }\n+            check_vec_macro(cx, &vec_args, span);\n+        }}\n     }\n }\n \n-fn check_vec_macro(cx: &LateContext, vec: &Expr, span: Span) {\n-    if let Some(vec_args) = higher::vec_macro(cx, vec) {\n-        let snippet = match vec_args {\n-            higher::VecArgs::Repeat(elem, len) => {\n-                if eval_const_expr_partial(cx.tcx, len, ExprTypeChecked, None).is_ok() {\n-                    format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n-                } else {\n-                    return;\n-                }\n+fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n+    let snippet = match *vec_args {\n+        higher::VecArgs::Repeat(elem, len) => {\n+            if eval_const_expr_partial(cx.tcx, len, ExprTypeChecked, None).is_ok() {\n+                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+            } else {\n+                return;\n             }\n-            higher::VecArgs::Vec(args) => {\n-                if let Some(last) = args.iter().last() {\n-                    let span = Span {\n-                        lo: args[0].span.lo,\n-                        hi: last.span.hi,\n-                        expn_id: args[0].span.expn_id,\n-                    };\n+        }\n+        higher::VecArgs::Vec(args) => {\n+            if let Some(last) = args.iter().last() {\n+                let span = Span {\n+                    lo: args[0].span.lo,\n+                    hi: last.span.hi,\n+                    expn_id: args[0].span.expn_id,\n+                };\n \n-                    format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n-                } else {\n-                    \"&[]\".into()\n-                }\n+                format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n+            } else {\n+                \"&[]\".into()\n             }\n-        };\n+        }\n+    };\n \n-        span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n-            db.span_suggestion(span, \"you can use a slice directly\", snippet);\n-        });\n-    }\n+    span_lint_and_then(cx, USELESS_VEC, span, \"useless use of `vec!`\", |db| {\n+        db.span_suggestion(span, \"you can use a slice directly\", snippet);\n+    });\n }\n \n+/// Return the item type of the vector (ie. the `T` in `Vec<T>`).\n+fn vec_type(ty: ty::Ty) -> ty::Ty {\n+    if let ty::TyStruct(_, substs) = ty.sty {\n+        substs.types.get(ty::subst::ParamSpace::TypeSpace, 0)\n+    } else {\n+        panic!(\"The type of `vec!` is a not a struct?\");\n+    }\n+}"}, {"sha": "7a790e62116123f77bed1795d96568c3cebb142f", "filename": "tests/compile-fail/vec.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea665c38f1ad049935a775d19082adedede9e00e/tests%2Fcompile-fail%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea665c38f1ad049935a775d19082adedede9e00e/tests%2Fcompile-fail%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvec.rs?ref=ea665c38f1ad049935a775d19082adedede9e00e", "patch": "@@ -3,6 +3,9 @@\n \n #![deny(useless_vec)]\n \n+#[derive(Debug)]\n+struct NonCopy;\n+\n fn on_slice(_: &[u8]) {}\n #[allow(ptr_arg)]\n fn on_vec(_: &Vec<u8>) {}\n@@ -62,6 +65,10 @@ fn main() {\n         //~^ ERROR useless use of `vec!`\n         //~| HELP you can use\n         //~| SUGGESTION for a in &[1, 2, 3] {\n-        println!(\"{}\", a);\n+        println!(\"{:?}\", a);\n+    }\n+\n+    for a in vec![NonCopy, NonCopy] {\n+        println!(\"{:?}\", a);\n     }\n }"}]}