{"sha": "594be707c43f626538ff11b22c35b858c3323cf2", "node_id": "C_kwDOAAsO6NoAKDU5NGJlNzA3YzQzZjYyNjUzOGZmMTFiMjJjMzViODU4YzMzMjNjZjI", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2022-04-15T12:34:54Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2022-04-15T13:38:37Z"}, "message": "Implement str to [u8] conversion for refcounted containers", "tree": {"sha": "e282c6b29689baf8b26d5b1c535789599f8d0240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e282c6b29689baf8b26d5b1c535789599f8d0240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594be707c43f626538ff11b22c35b858c3323cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594be707c43f626538ff11b22c35b858c3323cf2", "html_url": "https://github.com/rust-lang/rust/commit/594be707c43f626538ff11b22c35b858c3323cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594be707c43f626538ff11b22c35b858c3323cf2/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7575f9670f3c837def3d186ae09366c75c7632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7575f9670f3c837def3d186ae09366c75c7632e", "html_url": "https://github.com/rust-lang/rust/commit/e7575f9670f3c837def3d186ae09366c75c7632e"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "488b74d388e5c0b9113d32af48be4559c251112f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/594be707c43f626538ff11b22c35b858c3323cf2/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594be707c43f626538ff11b22c35b858c3323cf2/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=594be707c43f626538ff11b22c35b858c3323cf2", "patch": "@@ -1956,6 +1956,25 @@ where\n     }\n }\n \n+#[stable(feature = \"shared_from_str\", since = \"1.61.0\")]\n+impl From<Rc<str>> for Rc<[u8]> {\n+    /// Converts a reference-counted string slice into a byte slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::rc::Rc;\n+    /// let string: Rc<str> = Rc::from(\"eggplant\");\n+    /// let bytes: Rc<[u8]> = Rc::from(string);\n+    /// assert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n+    /// ```\n+    #[inline]\n+    fn from(rc: Rc<str>) -> Self {\n+        // SAFETY: `str` has the same layout as `[u8]`.\n+        unsafe { Rc::from_raw(Rc::into_raw(rc) as *const [u8]) }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]> {\n     type Error = Rc<[T]>;"}, {"sha": "a8ed31b776b258bcafd26bc5cdbccfa61a809ef0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/594be707c43f626538ff11b22c35b858c3323cf2/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594be707c43f626538ff11b22c35b858c3323cf2/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=594be707c43f626538ff11b22c35b858c3323cf2", "patch": "@@ -2556,6 +2556,25 @@ where\n     }\n }\n \n+#[stable(feature = \"shared_from_str\", since = \"1.61.0\")]\n+impl From<Arc<str>> for Arc<[u8]> {\n+    /// Converts an atomically reference-counted string slice into a byte slice.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::sync::Arc;\n+    /// let string: Arc<str> = Arc::from(\"eggplant\");\n+    /// let bytes: Arc<[u8]> = Arc::from(string);\n+    /// assert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n+    /// ```\n+    #[inline]\n+    fn from(rc: Arc<str>) -> Self {\n+        // SAFETY: `str` has the same layout as `[u8]`.\n+        unsafe { Arc::from_raw(Arc::into_raw(rc) as *const [u8]) }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]> {\n     type Error = Arc<[T]>;"}]}