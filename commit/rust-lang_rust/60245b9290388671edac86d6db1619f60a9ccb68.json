{"sha": "60245b9290388671edac86d6db1619f60a9ccb68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMjQ1YjkyOTAzODg2NzFlZGFjODZkNmRiMTYxOWY2MGE5Y2NiNjg=", "commit": {"author": {"name": "Ziad Hatahet", "email": "hatahet@gmail.com", "date": "2013-10-23T01:25:07Z"}, "committer": {"name": "Ziad Hatahet", "email": "hatahet@gmail.com", "date": "2013-10-23T01:25:07Z"}, "message": "Remove thread-blocking call to `libc::stat` in `Path::stat`\n\nFixes #9958", "tree": {"sha": "b2014dac3d775c584a6319df198b58b0cbdca0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2014dac3d775c584a6319df198b58b0cbdca0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60245b9290388671edac86d6db1619f60a9ccb68", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60245b9290388671edac86d6db1619f60a9ccb68", "html_url": "https://github.com/rust-lang/rust/commit/60245b9290388671edac86d6db1619f60a9ccb68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60245b9290388671edac86d6db1619f60a9ccb68/comments", "author": {"login": "hatahet", "id": 877713, "node_id": "MDQ6VXNlcjg3NzcxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/877713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatahet", "html_url": "https://github.com/hatahet", "followers_url": "https://api.github.com/users/hatahet/followers", "following_url": "https://api.github.com/users/hatahet/following{/other_user}", "gists_url": "https://api.github.com/users/hatahet/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatahet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatahet/subscriptions", "organizations_url": "https://api.github.com/users/hatahet/orgs", "repos_url": "https://api.github.com/users/hatahet/repos", "events_url": "https://api.github.com/users/hatahet/events{/privacy}", "received_events_url": "https://api.github.com/users/hatahet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hatahet", "id": 877713, "node_id": "MDQ6VXNlcjg3NzcxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/877713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatahet", "html_url": "https://github.com/hatahet", "followers_url": "https://api.github.com/users/hatahet/followers", "following_url": "https://api.github.com/users/hatahet/following{/other_user}", "gists_url": "https://api.github.com/users/hatahet/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatahet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatahet/subscriptions", "organizations_url": "https://api.github.com/users/hatahet/orgs", "repos_url": "https://api.github.com/users/hatahet/repos", "events_url": "https://api.github.com/users/hatahet/events{/privacy}", "received_events_url": "https://api.github.com/users/hatahet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b477f7a7b74615bba9ab3074082f9cc76a24e8a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b477f7a7b74615bba9ab3074082f9cc76a24e8a3", "html_url": "https://github.com/rust-lang/rust/commit/b477f7a7b74615bba9ab3074082f9cc76a24e8a3"}], "stats": {"total": 383, "additions": 65, "deletions": 318}, "files": [{"sha": "01bd4e6736ed37082d82639e9c82dc9b79d343e0", "filename": "src/librustpkg/conditions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -12,15 +12,14 @@\n \n pub use std::path::Path;\n pub use package_id::PkgId;\n-pub use std::libc;\n-pub use std::libc::stat;\n+pub use std::rt::io::FileStat;\n \n condition! {\n     pub bad_path: (Path, ~str) -> Path;\n }\n \n condition! {\n-    pub bad_stat: (Path, ~str) -> stat;\n+    pub bad_stat: (Path, ~str) -> FileStat;\n }\n \n condition! {"}, {"sha": "9144c08cb7331bf29559fc7cafb9cd22fa79d8c4", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -609,7 +609,7 @@ fn debug_flags() -> ~[~str] { ~[] }\n /// Returns the last-modified date as an Option\n pub fn datestamp(p: &Path) -> Option<libc::time_t> {\n     debug!(\"Scrutinizing datestamp for {} - does it exist? {:?}\", p.display(), os::path_exists(p));\n-    let out = p.stat().map(|stat| stat.st_mtime);\n+    let out = p.stat().map(|stat| stat.modified);\n     debug!(\"Date = {:?}\", out);\n     out.map(|t| { t as libc::time_t })\n }"}, {"sha": "d49a581e07047b6a6448ffb013854ba5d3ed0825", "filename": "src/librustpkg/workcache_support.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Fworkcache_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibrustpkg%2Fworkcache_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkcache_support.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -18,17 +18,17 @@ pub fn digest_file_with_date(path: &Path) -> ~str {\n     use conditions::bad_path::cond;\n     use cond1 = conditions::bad_stat::cond;\n \n-    let mut sha = ~Sha1::new();\n     let s = io::read_whole_file_str(path);\n     match s {\n         Ok(s) => {\n-            (*sha).input_str(s);\n+            let mut sha = Sha1::new();\n+            sha.input_str(s);\n             let st = match path.stat() {\n                 Some(st) => st,\n                 None => cond1.raise((path.clone(), format!(\"Couldn't get file access time\")))\n             };\n-            (*sha).input_str(st.st_mtime.to_str());\n-            (*sha).result_str()\n+            sha.input_str(st.modified.to_str());\n+            sha.result_str()\n         }\n         Err(e) => {\n             let path = cond.raise((path.clone(), format!(\"Couldn't read file: {}\", e)));\n@@ -43,13 +43,13 @@ pub fn digest_file_with_date(path: &Path) -> ~str {\n pub fn digest_only_date(path: &Path) -> ~str {\n     use cond = conditions::bad_stat::cond;\n \n-    let mut sha = ~Sha1::new();\n+    let mut sha = Sha1::new();\n     let st = match path.stat() {\n                 Some(st) => st,\n                 None => cond.raise((path.clone(), format!(\"Couldn't get file access time\")))\n     };\n-    (*sha).input_str(st.st_mtime.to_str());\n-    (*sha).result_str()\n+    sha.input_str(st.modified.to_str());\n+    sha.result_str()\n }\n \n /// Adds multiple discovered outputs"}, {"sha": "18f137e8b0e568f5f2e1486a507d79551a62eab9", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 223, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -688,228 +688,6 @@ fn from_utf8_with_replacement(mut v: &[u8]) -> ~str {\n     }\n     s\n }\n-\n-// FIXME (#9537): libc::stat should derive Default\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-mod stat {\n-    #[allow(missing_doc)];\n-\n-    #[cfg(target_arch = \"x86\")]\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                __pad1: 0,\n-                st_ino: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                __pad2: 0,\n-                st_size: 0,\n-                st_blksize: 0,\n-                st_blocks: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                __unused4: 0,\n-                __unused5: 0,\n-            }\n-        }\n-    }\n-\n-    #[cfg(target_arch = \"arm\")]\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                __pad0: [0, ..4],\n-                __st_ino: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                __pad3: [0, ..4],\n-                st_size: 0,\n-                st_blksize: 0,\n-                st_blocks: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                st_ino: 0\n-            }\n-        }\n-    }\n-\n-    #[cfg(target_arch = \"mips\")]\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                st_pad1: [0, ..3],\n-                st_ino: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                st_pad2: [0, ..2],\n-                st_size: 0,\n-                st_pad3: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                st_blksize: 0,\n-                st_blocks: 0,\n-                st_pad5: [0, ..14],\n-            }\n-        }\n-    }\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                st_ino: 0,\n-                st_nlink: 0,\n-                st_mode: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                __pad0: 0,\n-                st_rdev: 0,\n-                st_size: 0,\n-                st_blksize: 0,\n-                st_blocks: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                __unused: [0, 0, 0],\n-            }\n-        }\n-    }\n-}\n-\n-#[cfg(target_os = \"freebsd\")]\n-mod stat {\n-    #[allow(missing_doc)];\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                st_ino: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                st_size: 0,\n-                st_blocks: 0,\n-                st_blksize: 0,\n-                st_flags: 0,\n-                st_gen: 0,\n-                st_lspare: 0,\n-                st_birthtime: 0,\n-                st_birthtime_nsec: 0,\n-                __unused: [0, 0],\n-            }\n-        }\n-    }\n-}\n-\n-#[cfg(target_os = \"macos\")]\n-mod stat {\n-    #[allow(missing_doc)];\n-\n-    pub mod arch {\n-        use libc;\n-\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_ino: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                st_atime: 0,\n-                st_atime_nsec: 0,\n-                st_mtime: 0,\n-                st_mtime_nsec: 0,\n-                st_ctime: 0,\n-                st_ctime_nsec: 0,\n-                st_birthtime: 0,\n-                st_birthtime_nsec: 0,\n-                st_size: 0,\n-                st_blocks: 0,\n-                st_blksize: 0,\n-                st_flags: 0,\n-                st_gen: 0,\n-                st_lspare: 0,\n-                st_qspare: [0, 0],\n-            }\n-        }\n-    }\n-}\n-\n-#[cfg(target_os = \"win32\")]\n-mod stat {\n-    #[allow(missing_doc)];\n-\n-    pub mod arch {\n-        use libc;\n-        pub fn default_stat() -> libc::stat {\n-            libc::stat {\n-                st_dev: 0,\n-                st_ino: 0,\n-                st_mode: 0,\n-                st_nlink: 0,\n-                st_uid: 0,\n-                st_gid: 0,\n-                st_rdev: 0,\n-                st_size: 0,\n-                st_atime: 0,\n-                st_mtime: 0,\n-                st_ctime: 0,\n-            }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::{GenericPath, PosixPath, WindowsPath};\n@@ -921,7 +699,7 @@ mod tests {\n         let path: PosixPath = PosixPath::new(input.to_c_str());\n         assert_eq!(path.as_vec(), input.as_bytes());\n \n-        let input = \"\\\\foo\\\\bar\\\\baz\";\n+        let input = r\"\\foo\\bar\\baz\";\n         let path: WindowsPath = WindowsPath::new(input.to_c_str());\n         assert_eq!(path.as_str().unwrap(), input.as_slice());\n     }"}, {"sha": "d92c2974f76918ab05f8a984e4763542a7803534", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -25,7 +25,7 @@ use vec::{CopyableVector, RSplitIterator, SplitIterator, Vector, VectorVector};\n use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n \n #[cfg(not(target_os = \"win32\"))]\n-use libc;\n+use rt::io::{FileStat, file, io_error};\n \n /// Iterator that yields successive components of a Path as &[u8]\n pub type ComponentIter<'self> = SplitIterator<'self, u8>;\n@@ -445,16 +445,13 @@ static dot_dot_static: &'static [u8] = bytes!(\"..\");\n // Stat support\n #[cfg(not(target_os = \"win32\"))]\n impl Path {\n-    /// Calls stat() on the represented file and returns the resulting libc::stat\n-    pub fn stat(&self) -> Option<libc::stat> {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        do self.with_c_str |buf| {\n-            let mut st = super::stat::arch::default_stat();\n-            match unsafe { libc::stat(buf as *libc::c_char, &mut st) } {\n-                0 => Some(st),\n-                _ => None\n-            }\n+    /// Calls stat() on the represented file and returns the resulting rt::io::FileStat\n+    pub fn stat(&self) -> Option<FileStat> {\n+        let mut file_stat: Option<FileStat> = None;\n+        do io_error::cond.trap(|_| { /* Ignore error, will return None */ }).inside {\n+            file_stat = file::stat(self);\n         }\n+        file_stat\n     }\n \n     /// Returns whether the represented file exists\n@@ -466,18 +463,18 @@ impl Path {\n     }\n \n     /// Returns the filesize of the represented file\n-    pub fn get_size(&self) -> Option<i64> {\n+    pub fn get_size(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some(st.st_size as i64)\n+            Some(st) => Some(st.size)\n         }\n     }\n \n     /// Returns the mode of the represented file\n     pub fn get_mode(&self) -> Option<uint> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some(st.st_mode as uint)\n+            Some(st) => Some(st.mode as uint)\n         }\n     }\n }\n@@ -486,54 +483,27 @@ impl Path {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n impl Path {\n-    /// Returns the atime of the represented file, as (secs, nsecs)\n-    pub fn get_atime(&self) -> Option<(i64, int)> {\n-        match self.stat() {\n-            None => None,\n-            Some(st) => Some((st.st_atime as i64, st.st_atime_nsec as int))\n-        }\n-    }\n-\n-    /// Returns the mtime of the represented file, as (secs, nsecs)\n-    pub fn get_mtime(&self) -> Option<(i64, int)> {\n+    /// Returns the atime of the represented file, as msecs\n+    pub fn get_atime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_mtime as i64, st.st_mtime_nsec as int))\n+            Some(st) => Some(st.accessed)\n         }\n     }\n \n-    /// Returns the ctime of the represented file, as (secs, nsecs)\n-    pub fn get_ctime(&self) -> Option<(i64, int)> {\n+    /// Returns the mtime of the represented file, as msecs\n+    pub fn get_mtime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_ctime as i64, st.st_ctime_nsec as int))\n-        }\n-    }\n-}\n-\n-#[cfg(unix)]\n-impl Path {\n-    /// Calls lstat() on the represented file and returns the resulting libc::stat\n-    pub fn lstat(&self) -> Option<libc::stat> {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        do self.with_c_str |buf| {\n-            let mut st = super::stat::arch::default_stat();\n-            match unsafe { libc::lstat(buf, &mut st) } {\n-                0 => Some(st),\n-                _ => None\n-            }\n+            Some(st) => Some(st.modified)\n         }\n     }\n-}\n \n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"macos\")]\n-impl Path {\n-    /// Returns the birthtime of the represented file\n-    pub fn get_birthtime(&self) -> Option<(i64, int)> {\n+    /// Returns the ctime of the represented file, as msecs\n+    pub fn get_ctime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_birthtime as i64, st.st_birthtime_nsec as int))\n+            Some(st) => Some(st.created)\n         }\n     }\n }"}, {"sha": "dfd654ac13c73fe2a18d35b06711e357f4bc44ae", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -24,7 +24,7 @@ use vec::Vector;\n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};\n \n #[cfg(target_os = \"win32\")]\n-use libc;\n+use rt::io::{FileStat, file, io_error};\n \n /// Iterator that yields successive components of a Path as &str\n ///\n@@ -1059,16 +1059,13 @@ fn prefix_is_sep(p: Option<PathPrefix>, c: u8) -> bool {\n // Stat support\n #[cfg(target_os = \"win32\")]\n impl Path {\n-    /// Calls stat() on the represented file and returns the resulting libc::stat\n-    pub fn stat(&self) -> Option<libc::stat> {\n-        #[fixed_stack_segment]; #[inline(never)];\n-        do self.with_c_str |buf| {\n-            let mut st = super::stat::arch::default_stat();\n-            match unsafe { libc::stat(buf, &mut st) } {\n-                0 => Some(st),\n-                _ => None\n-            }\n+    /// Calls stat() on the represented file and returns the resulting rt::io::FileStat\n+    pub fn stat(&self) -> Option<FileStat> {\n+        let mut file_stat: Option<FileStat> = None;\n+        do io_error::cond.trap(|_| { /* Ignore error, will return None */ }).inside {\n+            file_stat = file::stat(self);\n         }\n+        file_stat\n     }\n \n     /// Returns whether the represented file exists\n@@ -1080,48 +1077,42 @@ impl Path {\n     }\n \n     /// Returns the filesize of the represented file\n-    pub fn get_size(&self) -> Option<i64> {\n+    pub fn get_size(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some(st.st_size as i64)\n+            Some(st) => Some(st.size)\n         }\n     }\n \n     /// Returns the mode of the represented file\n     pub fn get_mode(&self) -> Option<uint> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some(st.st_mode as uint)\n+            Some(st) => Some(st.mode as uint)\n         }\n     }\n \n-    /// Returns the atime of the represented file, as (secs, nsecs)\n-    ///\n-    /// nsecs is always 0\n-    pub fn get_atime(&self) -> Option<(i64, int)> {\n+    /// Returns the atime of the represented file, as msecs\n+    pub fn get_atime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_atime as i64, 0))\n+            Some(st) => Some(st.accessed)\n         }\n     }\n \n-    /// Returns the mtime of the represented file, as (secs, nsecs)\n-    ///\n-    /// nsecs is always 0\n-    pub fn get_mtime(&self) -> Option<(i64, int)> {\n+    /// Returns the mtime of the represented file, as msecs\n+    pub fn get_mtime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_mtime as i64, 0))\n+            Some(st) => Some(st.modified)\n         }\n     }\n \n-    /// Returns the ctime of the represented file, as (secs, nsecs)\n-    ///\n-    /// nsecs is always 0\n-    pub fn get_ctime(&self) -> Option<(i64, int)> {\n+    /// Returns the ctime of the represented file, as msecs\n+    pub fn get_ctime(&self) -> Option<u64> {\n         match self.stat() {\n             None => None,\n-            Some(st) => Some((st.st_ctime as i64, 0))\n+            Some(st) => Some(st.created)\n         }\n     }\n }"}, {"sha": "e25b03be361a5c48745910dafae7932078c10665", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -59,8 +59,8 @@ use path::Path;\n ///     }).inside {\n ///         let stream = match open(p, Create, ReadWrite) {\n ///             Some(s) => s,\n-///             None => fail!(\"whoops! I'm sure this raised, anyways..\");\n-///         }\n+///             None => fail!(\"whoops! I'm sure this raised, anyways..\")\n+///         };\n ///         // do some stuff with that stream\n ///\n ///         // the file stream will be closed at the end of this block"}, {"sha": "97d44da765a5a64a8c065a16b3144d78c67d08a1", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -654,6 +654,12 @@ pub struct FileStat {\n     is_file: bool,\n     /// `true` if the file pointed at by the `PathInfo` is a directory\n     is_dir: bool,\n+    /// The file pointed at by the `PathInfo`'s device\n+    device: u64,\n+    /// The file pointed at by the `PathInfo`'s mode\n+    mode: u64,\n+    /// The file pointed at by the `PathInfo`'s inode\n+    inode: u64,\n     /// The file pointed at by the `PathInfo`'s size in bytes\n     size: u64,\n     /// The file pointed at by the `PathInfo`'s creation time"}, {"sha": "c7e51b3485dd9817b40b57fd8596ca23cbf63933", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -635,6 +635,9 @@ impl IoFactory for UvIoFactory {\n                                 path: Path::new(path_str.as_slice()),\n                                 is_file: stat.is_file(),\n                                 is_dir: stat.is_dir(),\n+                                device: stat.st_dev,\n+                                mode: stat.st_mode,\n+                                inode: stat.st_ino,\n                                 size: stat.st_size,\n                                 created: stat.st_ctim.tv_sec as u64,\n                                 modified: stat.st_mtim.tv_sec as u64,"}, {"sha": "36e73a6dd51b93b920be44042a372622dc699c42", "filename": "src/libstd/run.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60245b9290388671edac86d6db1619f60a9ccb68/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=60245b9290388671edac86d6db1619f60a9ccb68", "patch": "@@ -584,8 +584,8 @@ mod tests {\n         let parent_stat = parent_dir.stat().unwrap();\n         let child_stat = child_dir.stat().unwrap();\n \n-        assert_eq!(parent_stat.st_dev, child_stat.st_dev);\n-        assert_eq!(parent_stat.st_ino, child_stat.st_ino);\n+        assert_eq!(parent_stat.device, child_stat.device);\n+        assert_eq!(parent_stat.inode, child_stat.inode);\n     }\n \n     #[test]\n@@ -601,8 +601,8 @@ mod tests {\n         let parent_stat = parent_dir.stat().unwrap();\n         let child_stat = child_dir.stat().unwrap();\n \n-        assert_eq!(parent_stat.st_dev, child_stat.st_dev);\n-        assert_eq!(parent_stat.st_ino, child_stat.st_ino);\n+        assert_eq!(parent_stat.device, child_stat.device);\n+        assert_eq!(parent_stat.inode, child_stat.inode);\n     }\n \n     #[cfg(unix,not(target_os=\"android\"))]"}]}