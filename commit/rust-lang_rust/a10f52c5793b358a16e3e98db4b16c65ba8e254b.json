{"sha": "a10f52c5793b358a16e3e98db4b16c65ba8e254b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMGY1MmM1NzkzYjM1OGExNmUzZTk4ZGI0YjE2YzY1YmE4ZTI1NGI=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T23:43:22Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-12T23:49:49Z"}, "message": "Revert linked failure (rust_port locking)\n\nThis reverts commit 343e9de8ef4ee9727f027c896ce99f09611b9603.", "tree": {"sha": "67e53933ce262ab82e2179841f9fc400db72a840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e53933ce262ab82e2179841f9fc400db72a840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a10f52c5793b358a16e3e98db4b16c65ba8e254b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a10f52c5793b358a16e3e98db4b16c65ba8e254b", "html_url": "https://github.com/rust-lang/rust/commit/a10f52c5793b358a16e3e98db4b16c65ba8e254b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a10f52c5793b358a16e3e98db4b16c65ba8e254b/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5724c6454950617c292daba89cdb9a3b4c862430", "url": "https://api.github.com/repos/rust-lang/rust/commits/5724c6454950617c292daba89cdb9a3b4c862430", "html_url": "https://github.com/rust-lang/rust/commit/5724c6454950617c292daba89cdb9a3b4c862430"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "f1a40508acad383cb536f11172e0e7d98e1cb3da", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=a10f52c5793b358a16e3e98db4b16c65ba8e254b", "patch": "@@ -26,11 +26,9 @@ void rust_port::deref() {\n     scoped_lock with(ref_lock);\n     ref_count--;\n     if (!ref_count) {\n-        // The port owner is waiting for the port to be detached (if it\n-        // hasn't already been killed)\n-        scoped_lock with(task->lifecycle_lock);\n         if (task->blocked_on(&detach_cond)) {\n-            task->wakeup_inner(&detach_cond);\n+            // The port owner is waiting for the port to be detached\n+            task->wakeup(&detach_cond);\n         }\n     }\n }\n@@ -66,15 +64,12 @@ void rust_port::send(void *sptr) {\n         assert(!buffer.is_empty() &&\n                \"rust_chan::transmit with nothing to send.\");\n \n-        {\n-            scoped_lock with(task->lifecycle_lock);\n-            if (task->blocked_on(this)) {\n-                KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n-                buffer.dequeue(task->rendezvous_ptr);\n-                task->rendezvous_ptr = 0;\n-                task->wakeup_inner(this);\n-                did_rendezvous = true;\n-            }\n+        if (task->blocked_on(this)) {\n+            KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n+            buffer.dequeue(task->rendezvous_ptr);\n+            task->rendezvous_ptr = 0;\n+            task->wakeup(this);\n+            did_rendezvous = true;\n         }\n     }\n \n@@ -83,8 +78,11 @@ void rust_port::send(void *sptr) {\n         // it may be waiting on a group of ports\n \n         rust_port_selector *port_selector = task->get_port_selector();\n-        // The port selector will check if the task is blocked, not us.\n-        port_selector->msg_sent_on(this);\n+        // This check is not definitive. The port selector will take a lock\n+        // and check again whether the task is still blocked.\n+        if (task->blocked_on(port_selector)) {\n+            port_selector->msg_sent_on(this);\n+        }\n     }\n }\n "}, {"sha": "7b3b45788f73bc8c3bbb5455a23754438127bf03", "filename": "src/rt/rust_port_selector.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=a10f52c5793b358a16e3e98db4b16c65ba8e254b", "patch": "@@ -75,7 +75,7 @@ rust_port_selector::msg_sent_on(rust_port *port) {\n \n     // Prevent two ports from trying to wake up the task\n     // simultaneously\n-    scoped_lock with(task->lifecycle_lock);\n+    scoped_lock with(rendezvous_lock);\n \n     if (task->blocked_on(this)) {\n         for (size_t i = 0; i < n_ports; i++) {\n@@ -85,7 +85,7 @@ rust_port_selector::msg_sent_on(rust_port *port) {\n                 n_ports = 0;\n                 *task->rendezvous_ptr = (uintptr_t) port;\n                 task->rendezvous_ptr = NULL;\n-                task->wakeup_inner(this);\n+                task->wakeup(this);\n                 return;\n             }\n         }"}, {"sha": "8dbf0c403293256dab5f1aa77ac85e313ed1c2d5", "filename": "src/rt/rust_port_selector.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port_selector.h", "raw_url": "https://github.com/rust-lang/rust/raw/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_port_selector.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.h?ref=a10f52c5793b358a16e3e98db4b16c65ba8e254b", "patch": "@@ -9,6 +9,7 @@ class rust_port_selector : public rust_cond {\n  private:\n     rust_port **ports;\n     size_t n_ports;\n+    lock_and_signal rendezvous_lock;\n \n  public:\n     rust_port_selector();"}, {"sha": "fa05a71374556bf6051239f98f2023e331651546", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a10f52c5793b358a16e3e98db4b16c65ba8e254b", "patch": "@@ -243,7 +243,7 @@ rust_task::must_fail_from_being_killed_inner() {\n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n-    // FIXME (#2875): clean this up\n+    // FIXME (#2787): clean this up\n     if (must_fail_from_being_killed()) {\n         {\n             scoped_lock with(lifecycle_lock);\n@@ -346,11 +346,12 @@ void rust_task::assert_is_running()\n     assert(state == task_state_running);\n }\n \n-// FIXME (#2851) Remove this code when rust_port goes away?\n+// FIXME (#2851, #2787): This is only used by rust_port/rust_port selector,\n+// and is inherently racy. Get rid of it.\n bool\n rust_task::blocked_on(rust_cond *on)\n {\n-    lifecycle_lock.must_have_lock();\n+    scoped_lock with(lifecycle_lock);\n     return cond == on;\n }\n "}, {"sha": "ba327822c3751c3e7121626af5991d54c59f514f", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/a10f52c5793b358a16e3e98db4b16c65ba8e254b/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=a10f52c5793b358a16e3e98db4b16c65ba8e254b", "patch": "@@ -226,11 +226,8 @@ rust_task : public kernel_owned<rust_task>\n                                char const *file,\n                                size_t line);\n \n-    friend class rust_port;\n-    friend class rust_port_selector;\n     bool block_inner(rust_cond *on, const char* name);\n     void wakeup_inner(rust_cond *from);\n-    bool blocked_on(rust_cond *cond);\n \n public:\n \n@@ -246,6 +243,7 @@ rust_task : public kernel_owned<rust_task>\n                void *args);\n     void start();\n     void assert_is_running();\n+    bool blocked_on(rust_cond *cond); // FIXME (#2851) Get rid of this.\n \n     void *malloc(size_t sz, const char *tag, type_desc *td=0);\n     void *realloc(void *data, size_t sz);\n@@ -437,7 +435,7 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n     bool had_reentered_rust_stack = reentered_rust_stack;\n     {\n-        // FIXME (#2875) This must be racy. Figure it out.\n+        // FIXME (#2787) This must be racy. Figure it out.\n         scoped_lock with(lifecycle_lock);\n         reentered_rust_stack = true;\n     }"}]}