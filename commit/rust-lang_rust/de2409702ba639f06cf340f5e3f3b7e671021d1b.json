{"sha": "de2409702ba639f06cf340f5e3f3b7e671021d1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjQwOTcwMmJhNjM5ZjA2Y2YzNDBmNWUzZjNiN2U2NzEwMjFkMWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-20T10:16:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-20T10:16:06Z"}, "message": "Merge #2877\n\n2877: \"Insert explicit type \" assist fix #2869, fix typo r=matklad a=TomasKralCZ\n\nSo this was quite straightforward. I basically looked at how the other assists work and tried doing something simillar. I also fixed a typo in the other assist.\n\nCo-authored-by: TomasKralCZ <tomas@kral.hk>", "tree": {"sha": "252a7b57f2a057540ce2ec554678bde15ab69ca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/252a7b57f2a057540ce2ec554678bde15ab69ca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de2409702ba639f06cf340f5e3f3b7e671021d1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeJX3nCRBK7hj4Ov3rIwAAdHIIAA4mrJAN4AlQOH/kRrEpd2js\nMwYZ+EaYdIOdGtEYMxfSpalOVEyrc458iZqXmxov/DZ0h+CwZ4WzLRM4CmYVmD8e\ny/q7QXeJGQXi1G8M4ArtWEDh3lUNzreo2MhqbRYNsyNbPWBWV69bNWriGhtk5ylr\n6yBOLfgl69NycL4hHhFNwVyzwp+siWL1U1payRefVhARtV971c5JWjdt47UDHYyH\nBxZSuO3iETUSRmi4Qw/4Vt/7jMR55aGUI7H37ijLAJCDCNbdE6DCjqbJ5/DhbUMy\n5oifYNX+BypjLZo3zoJLF+wYqr21OOUilxpr7orVP9RdjjVIbX+S/bmY1BBnVSI=\n=CgYG\n-----END PGP SIGNATURE-----\n", "payload": "tree 252a7b57f2a057540ce2ec554678bde15ab69ca0\nparent 648241ee930de08ba70b0b5c2172dfb3cc7a34c6\nparent 72792f6bc5cc3c81b53fa8e71304b0f7321f8e22\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579515366 +0000\ncommitter GitHub <noreply@github.com> 1579515366 +0000\n\nMerge #2877\n\n2877: \"Insert explicit type \" assist fix #2869, fix typo r=matklad a=TomasKralCZ\n\nSo this was quite straightforward. I basically looked at how the other assists work and tried doing something simillar. I also fixed a typo in the other assist.\n\nCo-authored-by: TomasKralCZ <tomas@kral.hk>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de2409702ba639f06cf340f5e3f3b7e671021d1b", "html_url": "https://github.com/rust-lang/rust/commit/de2409702ba639f06cf340f5e3f3b7e671021d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de2409702ba639f06cf340f5e3f3b7e671021d1b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "648241ee930de08ba70b0b5c2172dfb3cc7a34c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/648241ee930de08ba70b0b5c2172dfb3cc7a34c6", "html_url": "https://github.com/rust-lang/rust/commit/648241ee930de08ba70b0b5c2172dfb3cc7a34c6"}, {"sha": "72792f6bc5cc3c81b53fa8e71304b0f7321f8e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/72792f6bc5cc3c81b53fa8e71304b0f7321f8e22", "html_url": "https://github.com/rust-lang/rust/commit/72792f6bc5cc3c81b53fa8e71304b0f7321f8e22"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "38a351a547ec8f60635259f156e2f4e7c0e1cd15", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=de2409702ba639f06cf340f5e3f3b7e671021d1b", "patch": "@@ -1,7 +1,7 @@\n use hir::{db::HirDatabase, HirDisplay};\n use ra_syntax::{\n     ast::{self, AstNode, LetStmt, NameOwner},\n-    T,\n+    TextRange, T,\n };\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -34,6 +34,14 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n+    // Assist should only be applicable if cursor is between 'let' and '='\n+    let stmt_range = stmt.syntax().text_range();\n+    let eq_range = stmt.eq_token()?.text_range();\n+    let let_range = TextRange::from_to(stmt_range.start(), eq_range.start());\n+    let cursor_in_range = ctx.frange.range.is_subrange(&let_range);\n+    if !cursor_in_range {\n+        return None;\n+    }\n     // Assist not applicable if the type has already been specified\n     if stmt.syntax().children_with_tokens().any(|child| child.kind() == T![:]) {\n         return None;\n@@ -109,4 +117,20 @@ mod tests {\n     fn add_explicit_type_not_applicable_if_specified_ty_is_tuple() {\n         check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: (i32, i32) = (3, 4); }\");\n     }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_cursor_after_equals() {\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            \"fn f() {let a =<|> match 1 {2 => 3, 3 => 5};}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_cursor_before_let() {\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            \"fn f() <|>{let a = match 1 {2 => 3, 3 => 5};}\",\n+        )\n+    }\n }"}, {"sha": "d0c5c3b8c05731d282ef98d2ff5135c266782094", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=de2409702ba639f06cf340f5e3f3b7e671021d1b", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     (1 + 2) * 4;\n // }\n // ```\n-pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn inline_local_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,\n@@ -117,7 +117,7 @@ mod tests {\n     #[test]\n     fn test_inline_let_bind_literal_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -151,7 +151,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_bin_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -185,7 +185,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_function_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize) {}\n fn foo() {\n@@ -219,7 +219,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_cast_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn bar(a: usize): usize { a }\n fn foo() {\n@@ -253,7 +253,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_block_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = { 10 + 1 };\n@@ -285,7 +285,7 @@ fn foo() {\n     #[test]\n     fn test_inline_let_bind_paren_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = ( 10 + 1 );\n@@ -317,7 +317,7 @@ fn foo() {\n     #[test]\n     fn test_not_inline_mut_variable() {\n         check_assist_not_applicable(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let mut a<|> = 1 + 1;\n@@ -329,7 +329,7 @@ fn foo() {\n     #[test]\n     fn test_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = bar(10 + 1);\n@@ -347,7 +347,7 @@ fn foo() {\n     #[test]\n     fn test_index_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let x = vec![1, 2, 3];\n@@ -367,7 +367,7 @@ fn foo() {\n     #[test]\n     fn test_method_call_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let bar = vec![1];\n@@ -387,7 +387,7 @@ fn foo() {\n     #[test]\n     fn test_field_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n struct Bar {\n     foo: usize\n@@ -415,7 +415,7 @@ fn foo() {\n     #[test]\n     fn test_try_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n@@ -437,7 +437,7 @@ fn foo() -> Option<usize> {\n     #[test]\n     fn test_ref_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let bar = 10;\n@@ -455,7 +455,7 @@ fn foo() {\n     #[test]\n     fn test_tuple_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = (10, 20);\n@@ -471,7 +471,7 @@ fn foo() {\n     #[test]\n     fn test_array_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = [1, 2, 3];\n@@ -487,7 +487,7 @@ fn foo() {\n     #[test]\n     fn test_paren() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = (10 + 20);\n@@ -505,7 +505,7 @@ fn foo() {\n     #[test]\n     fn test_path_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let d = 10;\n@@ -525,7 +525,7 @@ fn foo() {\n     #[test]\n     fn test_block_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = { 10 };\n@@ -543,7 +543,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_different_expr1() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 10 + 20;\n@@ -565,7 +565,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_for_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = vec![10, 20];\n@@ -581,7 +581,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_while_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;\n@@ -597,7 +597,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_break_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 + 1;\n@@ -617,7 +617,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_return_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;\n@@ -633,7 +633,7 @@ fn foo() {\n     #[test]\n     fn test_used_in_match_expr() {\n         check_assist(\n-            inline_local_varialbe,\n+            inline_local_variable,\n             \"\n fn foo() {\n     let a<|> = 1 > 0;"}, {"sha": "3337805a55aa5fb41c0902c652b1e55725c0373f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=de2409702ba639f06cf340f5e3f3b7e671021d1b", "patch": "@@ -157,7 +157,7 @@ mod assists {\n             add_import::add_import,\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n-            inline_local_variable::inline_local_varialbe,\n+            inline_local_variable::inline_local_variable,\n             move_guard::move_guard_to_arm_body,\n             move_guard::move_arm_cond_to_match_guard,\n             move_bounds::move_bounds_to_where_clause,"}, {"sha": "cb0aee42259253585608e012aba372ad9bcb48f7", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2409702ba639f06cf340f5e3f3b7e671021d1b/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=de2409702ba639f06cf340f5e3f3b7e671021d1b", "patch": "@@ -234,6 +234,10 @@ impl ast::LetStmt {\n             Some(node) => node.kind() == T![;],\n         }\n     }\n+\n+    pub fn eq_token(&self) -> Option<SyntaxToken> {\n+        self.syntax().children_with_tokens().find(|t| t.kind() == EQ).and_then(|it| it.into_token())\n+    }\n }\n \n impl ast::ExprStmt {"}]}