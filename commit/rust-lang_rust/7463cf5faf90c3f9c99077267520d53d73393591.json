{"sha": "7463cf5faf90c3f9c99077267520d53d73393591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjNjZjVmYWY5MGMzZjljOTkwNzcyNjc1MjBkNTNkNzMzOTM1OTE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-13T21:15:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-13T21:15:00Z"}, "message": "Rollup merge of #42496 - Razaekel:feature/integer_max-min, r=BurntSushi\n\nAdd max and min to Ord\n\nPursuant to issue #25663, this PR adds max and min methods with default implementations to std::cmp::Ord. It also modifies std::cmp::max|min to internally alias to Ord::max|min, so that any overrides of the default implementations are automatically used by std::cmp::max|min.\n\nCloses #25663", "tree": {"sha": "625a705feecd4b55440294bc8226ad1da1d7bb4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625a705feecd4b55440294bc8226ad1da1d7bb4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7463cf5faf90c3f9c99077267520d53d73393591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7463cf5faf90c3f9c99077267520d53d73393591", "html_url": "https://github.com/rust-lang/rust/commit/7463cf5faf90c3f9c99077267520d53d73393591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7463cf5faf90c3f9c99077267520d53d73393591/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017", "html_url": "https://github.com/rust-lang/rust/commit/78d5d3723567e57e82ba65d73d2bc8bbe7f5c017"}, {"sha": "a32ffc679702e3ae307c7fc20873c9e970a8894c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a32ffc679702e3ae307c7fc20873c9e970a8894c", "html_url": "https://github.com/rust-lang/rust/commit/a32ffc679702e3ae307c7fc20873c9e970a8894c"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "b278b5dbb2ca6dfdd5b5763a18c458ca452c5836", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7463cf5faf90c3f9c99077267520d53d73393591/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/7463cf5faf90c3f9c99077267520d53d73393591/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=7463cf5faf90c3f9c99077267520d53d73393591", "patch": "@@ -165,6 +165,7 @@\n     - [n16](library-features/n16.md)\n     - [never_type_impls](library-features/never-type-impls.md)\n     - [nonzero](library-features/nonzero.md)\n+    - [ord_max_min](library-features/ord-max-min.md)\n     - [offset_to](library-features/offset-to.md)\n     - [once_poison](library-features/once-poison.md)\n     - [oom](library-features/oom.md)"}, {"sha": "564cd1ac30b26514f88772c53915876d0f54397f", "filename": "src/doc/unstable-book/src/library-features/ord-max-min.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7463cf5faf90c3f9c99077267520d53d73393591/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ford-max-min.md", "raw_url": "https://github.com/rust-lang/rust/raw/7463cf5faf90c3f9c99077267520d53d73393591/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ford-max-min.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ford-max-min.md?ref=7463cf5faf90c3f9c99077267520d53d73393591", "patch": "@@ -0,0 +1,7 @@\n+# `ord-max-min`\n+\n+The tracking issue for this feature is: [#25663]\n+\n+[#25663]: https://github.com/rust-lang/rust/issues/25663\n+\n+------------------------"}, {"sha": "6f35d0417f18b1986f6db9042df62c09b625fa2b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=7463cf5faf90c3f9c99077267520d53d73393591", "patch": "@@ -443,6 +443,42 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cmp(&self, other: &Self) -> Ordering;\n+\n+    /// Compares and returns the maximum of two values.\n+    ///\n+    /// Returns the second argument if the comparison determines them to be equal.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ord_max_min)]\n+    ///\n+    /// assert_eq!(2, 1.max(2));\n+    /// assert_eq!(2, 2.max(2));\n+    /// ```\n+    #[unstable(feature = \"ord_max_min\", issue = \"25663\")]\n+    fn max(self, other: Self) -> Self\n+    where Self: Sized {\n+        if other >= self { other } else { self }\n+    }\n+\n+    /// Compares and returns the minimum of two values.\n+    ///\n+    /// Returns the first argument if the comparison determines them to be equal.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ord_max_min)]\n+    ///\n+    /// assert_eq!(1, 1.min(2));\n+    /// assert_eq!(2, 2.min(2));\n+    /// ```\n+    #[unstable(feature = \"ord_max_min\", issue = \"25663\")]\n+    fn min(self, other: Self) -> Self\n+    where Self: Sized {\n+        if self <= other { self } else { other }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -678,6 +714,8 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n ///\n /// Returns the first argument if the comparison determines them to be equal.\n ///\n+/// Internally uses an alias to `Ord::min`.\n+///\n /// # Examples\n ///\n /// ```\n@@ -689,13 +727,15 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n-    if v1 <= v2 { v1 } else { v2 }\n+    v1.min(v2)\n }\n \n /// Compares and returns the maximum of two values.\n ///\n /// Returns the second argument if the comparison determines them to be equal.\n ///\n+/// Internally uses an alias to `Ord::max`.\n+///\n /// # Examples\n ///\n /// ```\n@@ -707,7 +747,7 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n-    if v2 >= v1 { v2 } else { v1 }\n+    v1.max(v2)\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "8c5179f59932bba13ef4636260099ae16aabed1c", "filename": "src/libcore/tests/cmp.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=7463cf5faf90c3f9c99077267520d53d73393591", "patch": "@@ -28,6 +28,16 @@ fn test_mut_int_totalord() {\n     assert_eq!((&mut 12).cmp(&&mut -5), Greater);\n }\n \n+#[test]\n+fn test_ord_max_min() {\n+    assert_eq!(1.max(2), 2);\n+    assert_eq!(2.max(1), 2);\n+    assert_eq!(1.min(2), 1);\n+    assert_eq!(2.min(1), 1);\n+    assert_eq!(1.max(1), 1);\n+    assert_eq!(1.min(1), 1);\n+}\n+\n #[test]\n fn test_ordering_reverse() {\n     assert_eq!(Less.reverse(), Greater);"}, {"sha": "77a9307f43ecf97375ea03c0cf4d1b85ccd8bf19", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7463cf5faf90c3f9c99077267520d53d73393591/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=7463cf5faf90c3f9c99077267520d53d73393591", "patch": "@@ -26,6 +26,7 @@\n #![feature(iter_rfind)]\n #![feature(libc)]\n #![feature(nonzero)]\n+#![feature(ord_max_min)]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(sip_hash_13)]"}]}