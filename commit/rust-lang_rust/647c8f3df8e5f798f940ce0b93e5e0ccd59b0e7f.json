{"sha": "647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2M4ZjNkZjhlNWY3OThmOTQwY2UwYjkzZTVlMGNjZDU5YjBlN2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T14:22:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "reduce duplication in hover", "tree": {"sha": "b8e4deaa77f4648c5645fe6caa8e66e298b0d2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e4deaa77f4648c5645fe6caa8e66e298b0d2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f", "html_url": "https://github.com/rust-lang/rust/commit/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46bc8675edd403ffcd8963e4f26447b283e9d09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46bc8675edd403ffcd8963e4f26447b283e9d09e", "html_url": "https://github.com/rust-lang/rust/commit/46bc8675edd403ffcd8963e4f26447b283e9d09e"}], "stats": {"total": 80, "additions": 24, "deletions": 56}, "files": [{"sha": "0f68cacca0a9823adeb5b1fc14c7c73c806b8b95", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 24, "deletions": 56, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=647c8f3df8e5f798f940ce0b93e5e0ccd59b0e7f", "patch": "@@ -1,6 +1,7 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, ast::{self, DocCommentsOwner},\n+    AstNode, TreeArc,\n+    ast::{self, DocCommentsOwner},\n     algo::{find_covering_element, find_node_at_offset, ancestors_at_offset, visit::{visitor, Visitor}},\n };\n use hir::HirDisplay;\n@@ -95,10 +96,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n \n         match classify_name_ref(db, &analyzer, name_ref) {\n-            Some(Method(it)) => {\n-                let src = it.source(db);\n-                res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()));\n-            }\n+            Some(Method(it)) => res.extend(from_def_source(db, it)),\n             Some(Macro(it)) => {\n                 let it = it.source(db).1;\n                 res.extend(hover_text(it.doc_comment_text(), None));\n@@ -110,14 +108,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 }\n             }\n             Some(AssocItem(it)) => match it {\n-                hir::ImplItem::Method(it) => {\n-                    let src = it.source(db);\n-                    res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                }\n-                hir::ImplItem::Const(it) => {\n-                    let src = it.source(db);\n-                    res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                }\n+                hir::ImplItem::Method(it) => res.extend(from_def_source(db, it)),\n+                hir::ImplItem::Const(it) => res.extend(from_def_source(db, it)),\n                 hir::ImplItem::TypeAlias(it) => {\n                     let it = it.source(db).1;\n                     res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n@@ -131,34 +123,16 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                             res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                         }\n                     }\n-                    hir::ModuleDef::Function(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n-                    hir::ModuleDef::Struct(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n-                    hir::ModuleDef::Union(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                    }\n-                    hir::ModuleDef::Enum(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n+                    hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Struct(it) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Union(it) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Enum(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::EnumVariant(it) => {\n                         let src = it.source(db);\n                         res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n-                    hir::ModuleDef::Const(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n-                    hir::ModuleDef::Static(it) => {\n-                        let src = it.source(db);\n-                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n-                    }\n+                    hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n+                    hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n                     hir::ModuleDef::Trait(it) => {\n                         let it = it.source(db).1;\n                         res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n@@ -175,24 +149,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {\n                     match adt_def {\n-                        hir::AdtDef::Struct(it) => {\n-                            let src = it.source(db);\n-                            res.extend(hover_text(\n-                                src.ast.doc_comment_text(),\n-                                src.ast.short_label(),\n-                            ))\n-                        }\n-                        hir::AdtDef::Union(it) => {\n-                            let it = it.source(db).1;\n-                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                        }\n-                        hir::AdtDef::Enum(it) => {\n-                            let src = it.source(db);\n-                            res.extend(hover_text(\n-                                src.ast.doc_comment_text(),\n-                                src.ast.short_label(),\n-                            ))\n-                        }\n+                        hir::AdtDef::Struct(it) => res.extend(from_def_source(db, it)),\n+                        hir::AdtDef::Union(it) => res.extend(from_def_source(db, it)),\n+                        hir::AdtDef::Enum(it) => res.extend(from_def_source(db, it)),\n                     }\n                 }\n             }\n@@ -276,7 +235,16 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         return None;\n     }\n     let res = RangeInfo::new(range, res);\n-    Some(res)\n+    return Some(res);\n+\n+    fn from_def_source<A, D>(db: &RootDatabase, def: D) -> Option<String>\n+    where\n+        D: hir::HasSource<Ast = TreeArc<A>>,\n+        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+    {\n+        let src = def.source(db);\n+        hover_text(src.ast.doc_comment_text(), src.ast.short_label())\n+    }\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {"}]}