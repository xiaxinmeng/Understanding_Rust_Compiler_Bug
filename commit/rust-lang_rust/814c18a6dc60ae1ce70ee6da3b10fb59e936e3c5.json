{"sha": "814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "node_id": "C_kwDOAAsO6NoAKDgxNGMxOGE2ZGM2MGFlMWNlNzBlZTZkYTNiMTBmYjU5ZTkzNmUzYzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-09T23:24:14Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-09T23:34:39Z"}, "message": "better suggestion for int to wide ptr cast", "tree": {"sha": "c001d9f173a80c47c4fb61a536ecd30da169e75d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c001d9f173a80c47c4fb61a536ecd30da169e75d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "html_url": "https://github.com/rust-lang/rust/commit/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "458262b1315e0de7be940fe95e111bb045e4a2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/458262b1315e0de7be940fe95e111bb045e4a2a4", "html_url": "https://github.com/rust-lang/rust/commit/458262b1315e0de7be940fe95e111bb045e4a2a4"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "d3e9820834ab9310ca54a214ae0a775a56cdf9af", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "patch": "@@ -165,6 +165,12 @@ pub enum CastError {\n     NonScalar,\n     UnknownExprPtrKind,\n     UnknownCastPtrKind,\n+    /// Cast of int to (possibly) fat raw pointer.\n+    ///\n+    /// Argument is the specific name of the metadata in plain words, such as \"a vtable\"\n+    /// or \"a length\". If this argument is None, then the metadata is unknown, for example,\n+    /// when we're typechecking a type parameter with a ?Sized bound.\n+    IntToFatCast(Option<&'static str>),\n }\n \n impl From<ErrorGuaranteed> for CastError {\n@@ -522,6 +528,35 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 .diagnostic()\n                 .emit();\n             }\n+            CastError::IntToFatCast(known_metadata) => {\n+                let mut err = struct_span_err!(\n+                    fcx.tcx.sess,\n+                    self.cast_span,\n+                    E0606,\n+                    \"cannot cast `{}` to a pointer that {} wide\",\n+                    fcx.ty_to_string(self.expr_ty),\n+                    if known_metadata.is_some() { \"is\" } else { \"may be\" }\n+                );\n+\n+                err.span_label(\n+                    self.cast_span,\n+                    format!(\n+                        \"creating a `{}` requires both an address and {}\",\n+                        self.cast_ty,\n+                        known_metadata.unwrap_or(\"type-specific metadata\"),\n+                    ),\n+                );\n+\n+                if fcx.tcx.sess.is_nightly_build() {\n+                    err.span_label(\n+                        self.expr.span,\n+                        \"consider casting this expression to `*const ()`, \\\n+                        then using `core::ptr::from_raw_parts`\",\n+                    );\n+                }\n+\n+                err.emit();\n+            }\n             CastError::UnknownCastPtrKind | CastError::UnknownExprPtrKind => {\n                 let unknown_cast_to = match e {\n                     CastError::UnknownCastPtrKind => true,\n@@ -900,7 +935,13 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         match fcx.pointer_kind(m_cast.ty, self.span)? {\n             None => Err(CastError::UnknownCastPtrKind),\n             Some(PointerKind::Thin) => Ok(CastKind::AddrPtrCast),\n-            _ => Err(CastError::IllegalCast),\n+            Some(PointerKind::Vtable(_)) => Err(CastError::IntToFatCast(Some(\"a vtable\"))),\n+            Some(PointerKind::Length) => Err(CastError::IntToFatCast(Some(\"a length\"))),\n+            Some(\n+                PointerKind::OfProjection(_)\n+                | PointerKind::OfOpaque(_, _)\n+                | PointerKind::OfParam(_),\n+            ) => Err(CastError::IntToFatCast(None)),\n         }\n     }\n "}, {"sha": "b5276dc619bfb4c1835ff99ffae403b9fec0afdc", "filename": "src/test/ui/cast/fat-ptr-cast.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.rs?ref=814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "patch": "@@ -19,6 +19,15 @@ fn main() {\n     q as *const [i32]; //~ ERROR cannot cast\n \n     // #21397\n-    let t: *mut (dyn Trait + 'static) = 0 as *mut _; //~ ERROR casting\n-    let mut fail: *const str = 0 as *const str; //~ ERROR casting\n+    let t: *mut (dyn Trait + 'static) = 0 as *mut _;\n+    //~^ ERROR cannot cast `usize` to a pointer that is wide\n+    let mut fail: *const str = 0 as *const str;\n+    //~^ ERROR cannot cast `usize` to a pointer that is wide\n+    let mut fail2: *const str = 0isize as *const str;\n+    //~^ ERROR cannot cast `isize` to a pointer that is wide\n+}\n+\n+fn foo<T: ?Sized>() {\n+    let s = 0 as *const T;\n+    //~^ ERROR cannot cast `usize` to a pointer that may be wide\n }"}, {"sha": "18e7b68ff3c22ad1c37e86661e08d22025118acc", "filename": "src/test/ui/cast/fat-ptr-cast.stderr", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffat-ptr-cast.stderr?ref=814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "patch": "@@ -50,19 +50,39 @@ error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]\n LL |     q as *const [i32];\n    |     ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*mut (dyn Trait + 'static)` is invalid\n-  --> $DIR/fat-ptr-cast.rs:22:41\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:22:46\n    |\n LL |     let t: *mut (dyn Trait + 'static) = 0 as *mut _;\n-   |                                         ^^^^^^^^^^^\n+   |                                         -    ^^^^^^ creating a `*mut (dyn Trait + 'static)` requires both an address and a vtable\n+   |                                         |\n+   |                                         consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n-error[E0606]: casting `usize` as `*const str` is invalid\n-  --> $DIR/fat-ptr-cast.rs:23:32\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:24:37\n    |\n LL |     let mut fail: *const str = 0 as *const str;\n-   |                                ^^^^^^^^^^^^^^^\n+   |                                -    ^^^^^^^^^^ creating a `*const str` requires both an address and a length\n+   |                                |\n+   |                                consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n-error: aborting due to 9 previous errors\n+error[E0606]: cannot cast `isize` to a pointer that is wide\n+  --> $DIR/fat-ptr-cast.rs:26:43\n+   |\n+LL |     let mut fail2: *const str = 0isize as *const str;\n+   |                                 ------    ^^^^^^^^^^ creating a `*const str` requires both an address and a length\n+   |                                 |\n+   |                                 consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+\n+error[E0606]: cannot cast `usize` to a pointer that may be wide\n+  --> $DIR/fat-ptr-cast.rs:31:18\n+   |\n+LL |     let s = 0 as *const T;\n+   |             -    ^^^^^^^^ creating a `*const T` requires both an address and type-specific metadata\n+   |             |\n+   |             consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n+\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0605, E0606, E0607.\n For more information about an error, try `rustc --explain E0605`."}, {"sha": "57222f45947b41d8e9d8dea3f3fb863d750f98ac", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "patch": "@@ -48,7 +48,7 @@ fn main()\n     let _ = E::A as *const u8; //~ ERROR is invalid\n     let _ = 'a' as *const u8; //~ ERROR is invalid\n \n-    let _ = 42usize as *const [u8]; //~ ERROR is invalid\n+    let _ = 42usize as *const [u8]; //~ ERROR cannot cast `usize` to a pointer that is wide\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const dyn Foo; //~ ERROR the size for values of type\n     let _ = foo as *const str; //~ ERROR is invalid"}, {"sha": "5f11e4ded8004e9b9552e0dc8bb9d39692c5a254", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=814c18a6dc60ae1ce70ee6da3b10fb59e936e3c5", "patch": "@@ -148,11 +148,13 @@ error[E0606]: casting `char` as `*const u8` is invalid\n LL |     let _ = 'a' as *const u8;\n    |             ^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*const [u8]` is invalid\n-  --> $DIR/cast-rfc0401.rs:51:13\n+error[E0606]: cannot cast `usize` to a pointer that is wide\n+  --> $DIR/cast-rfc0401.rs:51:24\n    |\n LL |     let _ = 42usize as *const [u8];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |             -------    ^^^^^^^^^^^ creating a `*const [u8]` requires both an address and a length\n+   |             |\n+   |             consider casting this expression to `*const ()`, then using `core::ptr::from_raw_parts`\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/cast-rfc0401.rs:52:13"}]}