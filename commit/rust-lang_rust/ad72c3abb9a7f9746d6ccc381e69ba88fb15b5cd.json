{"sha": "ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzJjM2FiYjlhN2Y5NzQ2ZDZjY2MzODFlNjliYTg4ZmIxNWI1Y2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T09:26:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T15:29:10Z"}, "message": "parser: inline parse_assoc_macro_invoc", "tree": {"sha": "554681e88448fae767ba8c04025cf01f3ec48135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554681e88448fae767ba8c04025cf01f3ec48135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd", "html_url": "https://github.com/rust-lang/rust/commit/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaaf0ba072815d275820d8ac85ece6eeb9182321", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaf0ba072815d275820d8ac85ece6eeb9182321", "html_url": "https://github.com/rust-lang/rust/commit/aaaf0ba072815d275820d8ac85ece6eeb9182321"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "500aaaf43b92a3ddc669bb75c005f145bf9cc14e", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=ad72c3abb9a7f9746d6ccc381e69ba88fb15b5cd", "patch": "@@ -333,24 +333,6 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n-    /// Parses a macro invocation inside a `trait`, `impl`, or `extern` block.\n-    fn parse_assoc_macro_invoc(\n-        &mut self,\n-        item_kind: &str,\n-        vis: &Visibility,\n-        at_end: &mut bool,\n-    ) -> PResult<'a, Option<Mac>> {\n-        if self.isnt_macro_invocation() {\n-            Err(self.missing_assoc_item_kind_err(item_kind, self.prev_span))\n-        } else if self.token.is_path_start() {\n-            let mac = self.parse_item_macro(vis)?;\n-            *at_end = true;\n-            Ok(Some(mac))\n-        } else {\n-            Ok(None)\n-        }\n-    }\n-\n     fn missing_assoc_item_kind_err(\n         &self,\n         item_type: &str,\n@@ -690,7 +672,11 @@ impl<'a> Parser<'a> {\n             (ident, AssocItemKind::Fn(sig, body), generics)\n         } else if self.check_keyword(kw::Const) {\n             self.parse_assoc_const()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", &vis, at_end)? {\n+        } else if self.isnt_macro_invocation() {\n+            return Err(self.missing_assoc_item_kind_err(\"associated\", self.prev_span));\n+        } else if self.token.is_path_start() {\n+            let mac = self.parse_item_macro(&vis)?;\n+            *at_end = true;\n             (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n         } else {\n             self.recover_attrs_no_item(&attrs)?;\n@@ -913,7 +899,11 @@ impl<'a> Parser<'a> {\n                 )\n                 .emit();\n             self.parse_item_foreign_static()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", &vis, at_end)? {\n+        } else if self.isnt_macro_invocation() {\n+            return Err(self.missing_assoc_item_kind_err(\"extern\", self.prev_span));\n+        } else if self.token.is_path_start() {\n+            let mac = self.parse_item_macro(&vis)?;\n+            *at_end = true;\n             (Ident::invalid(), ForeignItemKind::Macro(mac))\n         } else {\n             self.recover_attrs_no_item(&attrs)?;"}]}