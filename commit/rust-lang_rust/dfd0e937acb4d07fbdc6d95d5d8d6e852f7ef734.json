{"sha": "dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDBlOTM3YWNiNGQwN2ZiZGM2ZDk1ZDVkOGQ2ZTg1MmY3ZWY3MzQ=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-25T17:46:11Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: replace unreachable! with bug!()", "tree": {"sha": "6c802ace3b3d832b2e5174cbad69751811cb66ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c802ace3b3d832b2e5174cbad69751811cb66ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "html_url": "https://github.com/rust-lang/rust/commit/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcdaccfbbec562e8fb927359deada166d15dcf58", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdaccfbbec562e8fb927359deada166d15dcf58", "html_url": "https://github.com/rust-lang/rust/commit/bcdaccfbbec562e8fb927359deada166d15dcf58"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "141556c102d01b6daf9f753d109811ec725b2e34", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                         // quick check to see if this variable was\n                         // created since the snapshot started or not.\n                         let escaping_type = match self.values.get(vid.index as usize).value {\n-                            Bounded { .. } => unreachable!(),\n+                            Bounded { .. } => bug!(),\n                             Known(ty) => ty,\n                         };\n                         escaping_types.push(escaping_type);"}, {"sha": "1eb0a9956d09843fa5ddbee6ea1d2a767e0f1813", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -724,12 +724,12 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         let fn_body_id = {\n             let fn_expr = match self.tcx().map.find(upvar_id.closure_expr_id) {\n                 Some(ast_map::NodeExpr(e)) => e,\n-                _ => unreachable!()\n+                _ => bug!()\n             };\n \n             match fn_expr.node {\n                 hir::ExprClosure(_, _, ref body) => body.id,\n-                _ => unreachable!()\n+                _ => bug!()\n             }\n         };\n \n@@ -1453,10 +1453,10 @@ impl<'tcx> cmt_<'tcx> {\n                         match inner.cat {\n                             Categorization::Deref(ref inner, _, _) => inner.clone(),\n                             Categorization::Upvar(..) => inner.clone(),\n-                            _ => unreachable!()\n+                            _ => bug!()\n                         }\n                     }\n-                    _ => unreachable!()\n+                    _ => bug!()\n                 })\n             }\n             NoteNone => None\n@@ -1485,7 +1485,7 @@ impl<'tcx> cmt_<'tcx> {\n                     Some(&Categorization::Upvar(ref var)) => {\n                         var.to_string()\n                     }\n-                    Some(_) => unreachable!(),\n+                    Some(_) => bug!(),\n                     None => {\n                         match pk {\n                             Implicit(..) => {"}, {"sha": "7a607e2419daa0b147ef4a669a868d6b0015e2fd", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -385,8 +385,8 @@ impl RegionMaps {\n             }\n             Entry::Vacant(v) => {\n                 if self.code_extents.borrow().len() > 0xffffffffusize {\n-                    unreachable!() // should pass a sess,\n-                                   // but this isn't the only place\n+                    bug!() // should pass a sess,\n+                           // but this isn't the only place\n                 }\n                 let idx = CodeExtent(self.code_extents.borrow().len() as u32);\n                 info!(\"CodeExtent({}) = {:?} [parent={}]\", idx.0, e, parent.0);\n@@ -601,12 +601,12 @@ impl RegionMaps {\n                         scope_a\n                     } else {\n                         // neither fn encloses the other\n-                        unreachable!()\n+                        bug!()\n                     }\n                 }\n                 _ => {\n                     // root ids are always Misc right now\n-                    unreachable!()\n+                    bug!()\n                 }\n             };\n         }"}, {"sha": "a33ee6bd204eb85165d1dcdd428cfcbdb780aa02", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -1016,7 +1016,7 @@ fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n         Struct(node_id) | Tuple(node_id) | Array(node_id, _) | Repeat(node_id, _) =>\n             write!(fmt, \"{}\", node_to_string(node_id)),\n         Char(c) => write!(fmt, \"{:?}\", c),\n-        Dummy => unreachable!(),\n+        Dummy => bug!(),\n     }\n }\n "}, {"sha": "4d4ba50bd4a79fe583843ddf747fb4e11db8244a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -362,7 +362,7 @@ macro_rules! options {\n                                                              value, $outputname,\n                                                              key, type_desc))\n                         }\n-                        (None, None) => unreachable!()\n+                        (None, None) => bug!()\n                     }\n                 }\n                 found = true;"}, {"sha": "f15b9ee44ce5293480e29c80d72196168da1ffe9", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -201,7 +201,7 @@ pub fn report_overflow_error<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n \n     err.emit();\n     infcx.tcx.sess.abort_if_errors();\n-    unreachable!();\n+    bug!();\n }\n \n /// Reports that a cycle was detected which led to overflow and halts\n@@ -323,7 +323,7 @@ pub fn try_report_overflow_error_type_of_infinite_size<'a, 'tcx>(\n     }\n     err.emit();\n     infcx.tcx.sess.abort_if_errors();\n-    unreachable!();\n+    bug!();\n }\n \n pub fn recursive_type_with_infinite_size_error<'tcx>(tcx: &TyCtxt<'tcx>,"}, {"sha": "7635ff1eb4cb750deec24110ea48718ec1cb366d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -1870,7 +1870,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::BoundSized => ok_if(types),\n \n                 // Shouldn't be coming through here.\n-                ty::BoundSend | ty::BoundSync => unreachable!(),\n+                ty::BoundSend | ty::BoundSync => bug!(),\n             }\n         }\n     }\n@@ -2660,7 +2660,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     vec![inner_target]));\n             }\n \n-            _ => unreachable!()\n+            _ => bug!()\n         };\n \n         Ok(VtableBuiltinData { nested: nested })"}, {"sha": "191c261b7e3546f899a3becc2d01de47d38e7615", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> Decodable for &'tcx ClosureSubsts<'tcx> {\n                                                               Box::new(closure_substs));\n             match ty.sty {\n                 TyClosure(_, ref closure_substs) => Ok(&**closure_substs),\n-                _ => unreachable!()\n+                _ => bug!()\n             }\n         })\n     }\n@@ -467,7 +467,7 @@ impl<'tcx> FnOutput<'tcx> {\n     pub fn unwrap(self) -> Ty<'tcx> {\n         match self {\n             ty::FnConverging(t) => t,\n-            ty::FnDiverging => unreachable!()\n+            ty::FnDiverging => bug!()\n         }\n     }\n "}, {"sha": "e5f2e5fc70ad53f9e8afbe5e7461592b2ad1ac5b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "patch": "@@ -62,7 +62,7 @@ impl IntTypeExt for attr::IntType {\n             SignedInt(ast::IntTy::Is) => match tcx.sess.target.int_type {\n                 ast::IntTy::I32 => ConstInt::Isize(ConstIsize::Is32(0)),\n                 ast::IntTy::I64 => ConstInt::Isize(ConstIsize::Is64(0)),\n-                _ => unreachable!(),\n+                _ => bug!(),\n             },\n             UnsignedInt(ast::UintTy::U8)  => ConstInt::U8(0),\n             UnsignedInt(ast::UintTy::U16) => ConstInt::U16(0),\n@@ -71,7 +71,7 @@ impl IntTypeExt for attr::IntType {\n             UnsignedInt(ast::UintTy::Us) => match tcx.sess.target.uint_type {\n                 ast::UintTy::U32 => ConstInt::Usize(ConstUsize::Us32(0)),\n                 ast::UintTy::U64 => ConstInt::Usize(ConstUsize::Us64(0)),\n-                _ => unreachable!(),\n+                _ => bug!(),\n             },\n         }\n     }\n@@ -453,7 +453,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         hash!(p.idx);\n                         hash!(p.name.as_str());\n                     }\n-                    TyInfer(_) => unreachable!(),\n+                    TyInfer(_) => bug!(),\n                     TyError => byte!(21),\n                     TyClosure(d, _) => {\n                         byte!(22);"}]}