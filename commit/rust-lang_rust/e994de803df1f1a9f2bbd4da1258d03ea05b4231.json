{"sha": "e994de803df1f1a9f2bbd4da1258d03ea05b4231", "node_id": "C_kwDOAAsO6NoAKGU5OTRkZTgwM2RmMWYxYTlmMmJiZDRkYTEyNThkMDNlYTA1YjQyMzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-10T23:35:51Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-15T17:46:05Z"}, "message": "Equate full fn signatures to infer all region variables", "tree": {"sha": "ecd05e7c1f134e8778d7f9fe4e13e77c1fa7b143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd05e7c1f134e8778d7f9fe4e13e77c1fa7b143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e994de803df1f1a9f2bbd4da1258d03ea05b4231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e994de803df1f1a9f2bbd4da1258d03ea05b4231", "html_url": "https://github.com/rust-lang/rust/commit/e994de803df1f1a9f2bbd4da1258d03ea05b4231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e994de803df1f1a9f2bbd4da1258d03ea05b4231/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb20758257a5efe790e27460df53c12bf1c90403", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb20758257a5efe790e27460df53c12bf1c90403", "html_url": "https://github.com/rust-lang/rust/commit/cb20758257a5efe790e27460df53c12bf1c90403"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "6ee534363855a3ba9248a4abf84dff5454d433df", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e994de803df1f1a9f2bbd4da1258d03ea05b4231/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e994de803df1f1a9f2bbd4da1258d03ea05b4231/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e994de803df1f1a9f2bbd4da1258d03ea05b4231", "patch": "@@ -465,30 +465,30 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let ocx = ObligationCtxt::new(infcx);\n \n     let norm_cause = ObligationCause::misc(return_span, impl_m_hir_id);\n-    let impl_return_ty = ocx.normalize(\n+    let impl_sig = ocx.normalize(\n         norm_cause.clone(),\n         param_env,\n-        infcx\n-            .replace_bound_vars_with_fresh_vars(\n-                return_span,\n-                infer::HigherRankedType,\n-                tcx.fn_sig(impl_m.def_id),\n-            )\n-            .output(),\n+        infcx.replace_bound_vars_with_fresh_vars(\n+            return_span,\n+            infer::HigherRankedType,\n+            tcx.fn_sig(impl_m.def_id),\n+        ),\n     );\n+    let impl_return_ty = impl_sig.output();\n \n     let mut collector = ImplTraitInTraitCollector::new(&ocx, return_span, param_env, impl_m_hir_id);\n-    let unnormalized_trait_return_ty = tcx\n+    let unnormalized_trait_sig = tcx\n         .liberate_late_bound_regions(\n             impl_m.def_id,\n             tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n-        .output()\n         .fold_with(&mut collector);\n-    let trait_return_ty =\n-        ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_return_ty);\n+    let trait_sig = ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_sig);\n+    let trait_return_ty = trait_sig.output();\n \n-    let wf_tys = FxHashSet::from_iter([unnormalized_trait_return_ty, trait_return_ty]);\n+    let wf_tys = FxHashSet::from_iter(\n+        unnormalized_trait_sig.inputs_and_output.iter().chain(trait_sig.inputs_and_output.iter()),\n+    );\n \n     match infcx.at(&cause, param_env).eq(trait_return_ty, impl_return_ty) {\n         Ok(infer::InferOk { value: (), obligations }) => {\n@@ -521,6 +521,26 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n         }\n     }\n \n+    // Unify the whole function signature. We need to do this to fully infer\n+    // the lifetimes of the return type, but do this after unifying just the\n+    // return types, since we want to avoid duplicating errors from\n+    // `compare_predicate_entailment`.\n+    match infcx\n+        .at(&cause, param_env)\n+        .eq(tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig)), tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig)))\n+    {\n+        Ok(infer::InferOk { value: (), obligations }) => {\n+            ocx.register_obligations(obligations);\n+        }\n+        Err(terr) => {\n+            let guar = tcx.sess.delay_span_bug(\n+                return_span,\n+                format!(\"could not unify `{trait_sig}` and `{impl_sig}`: {terr:?}\"),\n+            );\n+            return Err(guar);\n+        }\n+    }\n+\n     // Check that all obligations are satisfied by the implementation's\n     // RPITs.\n     let errors = ocx.select_all_or_error();"}]}