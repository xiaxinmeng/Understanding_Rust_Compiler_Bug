{"sha": "750f04d30973b5615e54ee27c7336846d19943ee", "node_id": "C_kwDOAAsO6NoAKDc1MGYwNGQzMDk3M2I1NjE1ZTU0ZWUyN2M3MzM2ODQ2ZDE5OTQzZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-03T20:17:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-07T23:57:53Z"}, "message": "Implement special-cased projection error message for some common traits", "tree": {"sha": "c0d03c74353fea2b68e41fd39032a3e2679d22d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0d03c74353fea2b68e41fd39032a3e2679d22d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750f04d30973b5615e54ee27c7336846d19943ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750f04d30973b5615e54ee27c7336846d19943ee", "html_url": "https://github.com/rust-lang/rust/commit/750f04d30973b5615e54ee27c7336846d19943ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750f04d30973b5615e54ee27c7336846d19943ee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d394408fb38c4de61f765a3ed5189d2731a1da91", "url": "https://api.github.com/repos/rust-lang/rust/commits/d394408fb38c4de61f765a3ed5189d2731a1da91", "html_url": "https://github.com/rust-lang/rust/commit/d394408fb38c4de61f765a3ed5189d2731a1da91"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "911fb094b0cbe0169ded2776a5ab51af264fa5da", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1315,6 +1315,13 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         error: &MismatchedProjectionTypes<'tcx>,\n     );\n \n+    fn maybe_detailed_projection_msg(\n+        &self,\n+        pred: ty::ProjectionPredicate<'tcx>,\n+        normalized_ty: ty::Term<'tcx>,\n+        expected_ty: ty::Term<'tcx>,\n+    ) -> Option<String>;\n+\n     fn fuzzy_match_tys(\n         &self,\n         a: Ty<'tcx>,\n@@ -1542,23 +1549,19 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                     data.term,\n                 ) {\n-                    values = Some(infer::ValuePairs::Terms(ExpectedFound::new(\n-                        is_normalized_ty_expected,\n-                        normalized_ty,\n-                        data.term,\n-                    )));\n+                    values = Some((data, is_normalized_ty_expected, normalized_ty, data.term));\n                     err_buf = error;\n                     err = &err_buf;\n                 }\n             }\n \n-            let mut diag = struct_span_err!(\n-                self.tcx.sess,\n-                obligation.cause.span,\n-                E0271,\n-                \"type mismatch resolving `{}`\",\n-                predicate\n-            );\n+            let msg = values\n+                .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n+                    self.maybe_detailed_projection_msg(predicate, normalized_ty, expected_ty)\n+                })\n+                .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n+            let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n+\n             let secondary_span = match predicate.kind().skip_binder() {\n                 ty::PredicateKind::Projection(proj) => self\n                     .tcx\n@@ -1596,7 +1599,13 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 &mut diag,\n                 &obligation.cause,\n                 secondary_span,\n-                values,\n+                values.map(|(_, is_normalized_ty_expected, normalized_ty, term)| {\n+                    infer::ValuePairs::Terms(ExpectedFound::new(\n+                        is_normalized_ty_expected,\n+                        normalized_ty,\n+                        term,\n+                    ))\n+                }),\n                 err,\n                 true,\n                 false,\n@@ -1606,6 +1615,33 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n+    fn maybe_detailed_projection_msg(\n+        &self,\n+        pred: ty::ProjectionPredicate<'tcx>,\n+        normalized_ty: ty::Term<'tcx>,\n+        expected_ty: ty::Term<'tcx>,\n+    ) -> Option<String> {\n+        let trait_def_id = pred.projection_ty.trait_def_id(self.tcx);\n+        let self_ty = pred.projection_ty.self_ty();\n+\n+        if Some(pred.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output() {\n+            Some(format!(\n+                \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it actually returns `{normalized_ty}`\",\n+                fn_kind = self_ty.prefix_string(self.tcx)\n+            ))\n+        } else if Some(trait_def_id) == self.tcx.lang_items().future_trait() {\n+            Some(format!(\n+                \"expected `{self_ty}` to be a future that yields `{expected_ty}`, but it actually yields `{normalized_ty}`\"\n+            ))\n+        } else if Some(trait_def_id) == self.tcx.get_diagnostic_item(sym::Iterator) {\n+            Some(format!(\n+                \"expected `{self_ty}` to be an iterator of `{expected_ty}`, but it actually returns items of `{normalized_ty}`\"\n+            ))\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn fuzzy_match_tys(\n         &self,\n         mut a: Ty<'tcx>,"}, {"sha": "525c4c81ed9781f363a1ebb1f8dc1fb63bae9cab", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -4,5 +4,5 @@ trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n-    //~^ ERROR type mismatch\n+    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator of `i32`, but it actually returns items of `u32`\n }"}, {"sha": "f7a1603844be7ce26c8e3d8d6d58be2e12253f75", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as Iterator>::Item == i32`\n+error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator of `i32`, but it actually returns items of `u32`\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();"}, {"sha": "3f8cb7a529174c2ae52379c2f6a6253705654804", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -15,7 +15,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch\n+    //~^ ERROR expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n+    //~^ ERROR expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "3d9adc04e17b3c2d6d2e890db8f453f5ad254a08", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n+error[E0271]: expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = u8> as Future>::Output == ()`\n+error[E0271]: expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "19d7ff804e40cbd97304c85cae2b1919c5b679e3", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     let v = Unit2.m(\n         //~^ ERROR type mismatch\n         L {\n-        //~^ ERROR type mismatch\n+        //~^ ERROR to be a closure that returns `Unit3`, but it actually returns `Unit4`\n             f : |x| { drop(x); Unit4 }\n         });\n }"}, {"sha": "e3055c1265eb7c9cc917df25997058a5ac8daaa2", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -22,7 +22,7 @@ LL |     where\n LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n-error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20] as FnOnce<((&'r u8,),)>>::Output == Unit3`\n+error[E0271]: expected `[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]` to be a closure that returns `Unit3`, but it actually returns `Unit4`\n   --> $DIR/issue-62203-hrtb-ice.rs:40:9\n    |\n LL |       let v = Unit2.m("}, {"sha": "2d2b8192adc05180edacb8089f6e03d2cf7d6a70", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -7,7 +7,7 @@ type F = impl core::future::Future<Output = u8>;\n struct Bug {\n     V1: [(); {\n         fn concrete_use() -> F {\n-            //~^ ERROR type mismatch\n+            //~^ ERROR expected `impl Future<Output = ()>` to be a future that yields `u8`, but it actually yields `()`\n             async {}\n         }\n         let f: F = async { 1 };"}, {"sha": "f98655e9dffce9c70f45be0ae2deea376bdc4dde", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -16,7 +16,7 @@ LL |         let f: F = async { 1 };\n LL |     }],\n    |     - value is dropped here\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = ()> as Future>::Output == u8`\n+error[E0271]: expected `impl Future<Output = ()>` to be a future that yields `u8`, but it actually yields `()`\n   --> $DIR/issue-78722.rs:9:30\n    |\n LL |         fn concrete_use() -> F {"}, {"sha": "23b3f4fd82507eb0d03c0bbbe31b336243294474", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -27,7 +27,7 @@ fn baz(n: bool) -> i32 {\n \n const fn return_ty_mismatch() {\n     const_eval_select((1,), foo, bar);\n-    //~^ ERROR type mismatch\n+    //~^ ERROR expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it actually returns `bool`\n }\n \n const fn args_ty_mismatch() {"}, {"sha": "efdb5c86508dca86a6fd3772195c5e87bceeb61d", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -51,7 +51,7 @@ note: required by a bound in `const_eval_select`\n LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0271]: type mismatch resolving `<fn(i32) -> bool {bar} as FnOnce<(i32,)>>::Output == i32`\n+error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it actually returns `bool`\n   --> $DIR/const-eval-select-bad.rs:29:5\n    |\n LL |     const_eval_select((1,), foo, bar);"}, {"sha": "04e19c41756c7cda076c8d06db5c39d1d62c5fc8", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -8,7 +8,7 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n         false\n     })\n         .cloned()\n-        //~^ ERROR type mismatch resolving\n+        //~^ ERROR to be an iterator of `&_`, but it actually returns items of `u8`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "43011d0d3554b6da28437477a2a005ac20b4eae1", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]> as Iterator>::Item == &_`\n+error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>` to be an iterator of `&_`, but it actually returns items of `u8`\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()"}, {"sha": "906f77559b4f08f2d738b2a4069e79d1ba1dc2b3", "filename": "src/test/ui/issues/issue-33941.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -3,7 +3,7 @@\n use std::collections::HashMap;\n \n fn main() {\n-    for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n-    //~^ ERROR type mismatch\n-    //~| ERROR type mismatch\n+    for _ in HashMap::new().iter().cloned() {} //~ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+    //~^ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+    //~| ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n }"}, {"sha": "750f14c8239012ff45690eb7e6f01e2539b1bafb", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n@@ -12,7 +12,7 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n@@ -23,7 +23,7 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n-error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}"}, {"sha": "e1b6fee2cccbe410f56ead75d546e7f52c68d93a", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47] as FnOnce<()>>::Output == ()`\n+error[E0271]: expected `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to be a closure that returns `()`, but it actually returns `!`\n   --> $DIR/fallback-closure-wrap.rs:18:31\n    |\n LL |       let error = Closure::wrap(Box::new(move || {"}, {"sha": "e9c343efb66d2ee00db6cfef0273b6a808fc90b5", "filename": "src/test/ui/never_type/fallback-closure-wrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -16,7 +16,7 @@ use std::marker::PhantomData;\n \n fn main() {\n     let error = Closure::wrap(Box::new(move || {\n-        //[fallback]~^ ERROR type mismatch resolving\n+        //[fallback]~^ to be a closure that returns `()`, but it actually returns `!`\n         panic!(\"Can't connect to server.\");\n     }) as Box<dyn FnMut()>);\n }"}, {"sha": "925f84db37ad02fa0fde069dbf31b7507ef75fad", "filename": "src/test/ui/traits/assoc-type-in-superbad.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -9,7 +9,8 @@ pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n }\n \n impl Foo for IntoIter<i32> {\n-    type Key = u32; //~ ERROR type mismatch\n+    type Key = u32;\n+    //~^ ERROR expected `std::vec::IntoIter<i32>` to be an iterator of `u32`, but it actually returns items of `i32`\n }\n \n fn main() {"}, {"sha": "db691210b9c176a7941669a8633cd7264ea1abb6", "filename": "src/test/ui/traits/assoc-type-in-superbad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<std::vec::IntoIter<i32> as Iterator>::Item == u32`\n+error[E0271]: expected `std::vec::IntoIter<i32>` to be an iterator of `u32`, but it actually returns items of `i32`\n   --> $DIR/assoc-type-in-superbad.rs:12:16\n    |\n LL |     type Key = u32;"}, {"sha": "639f3b72165038d5c4fca92fc748e3f1e4850081", "filename": "src/test/ui/type-alias-impl-trait/issue-57961.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -8,7 +8,7 @@ trait Foo {\n \n impl Foo for () {\n     type Bar = std::vec::IntoIter<u32>;\n-    //~^ ERROR type mismatch resolving `<std::vec::IntoIter<u32> as Iterator>::Item == X\n+    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator of `X`, but it actually returns items of `u32`\n }\n \n fn incoherent() {"}, {"sha": "907f10cc9a5f46269f159ba89c782657de2440eb", "filename": "src/test/ui/type-alias-impl-trait/issue-57961.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as Iterator>::Item == X`\n+error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator of `X`, but it actually returns items of `u32`\n   --> $DIR/issue-57961.rs:10:16\n    |\n LL | type X = impl Sized;"}, {"sha": "a2f29afd94c46129452d66c32d63b424b9bb3227", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -9,5 +9,5 @@ async fn test() {}\n #[allow(unused_must_use)]\n fn main() {\n     Box::new(test) as AsyncFnPtr;\n-    //~^ ERROR type mismatch\n+    //~^ ERROR expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it actually returns `impl Future<Output = ()>`\n }"}, {"sha": "5c8aae0da2e77599df879fed144eed635be81ff4", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<fn() -> impl Future<Output = ()> {test} as FnOnce<()>>::Output == Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it actually returns `impl Future<Output = ()>`\n   --> $DIR/issue-98604.rs:11:5\n    |\n LL |     Box::new(test) as AsyncFnPtr;"}, {"sha": "2f4cf7a052146553ba10f4e45d2acb8036b8718e", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -2,7 +2,7 @@ fn hi() -> impl Sized { std::ptr::null::<u8>() }\n \n fn main() {\n     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n-    //~^ ERROR type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+    //~^ ERROR expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it actually returns `impl Sized`\n     let boxed = b();\n     let null = *boxed;\n     println!(\"{null:?}\");"}, {"sha": "c5eed7561c0df15452512be0f1de08a0361cc340", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750f04d30973b5615e54ee27c7336846d19943ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=750f04d30973b5615e54ee27c7336846d19943ee", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<fn() -> impl Sized {hi} as FnOnce<()>>::Output == Box<u8>`\n+error[E0271]: expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it actually returns `impl Sized`\n   --> $DIR/issue-98608.rs:4:39\n    |\n LL | fn hi() -> impl Sized { std::ptr::null::<u8>() }"}]}