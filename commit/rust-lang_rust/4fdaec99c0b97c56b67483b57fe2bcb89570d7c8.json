{"sha": "4fdaec99c0b97c56b67483b57fe2bcb89570d7c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZGFlYzk5YzBiOTdjNTZiNjc0ODNiNTdmZTJiY2I4OTU3MGQ3Yzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-10T17:28:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-10T17:28:50Z"}, "message": "simiplify", "tree": {"sha": "bda5c9cccae5835990e89ffbd5671dad8f248706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda5c9cccae5835990e89ffbd5671dad8f248706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8", "html_url": "https://github.com/rust-lang/rust/commit/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5198cd6dc0572ffaddcdea29d5541085ec5300", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5198cd6dc0572ffaddcdea29d5541085ec5300", "html_url": "https://github.com/rust-lang/rust/commit/6e5198cd6dc0572ffaddcdea29d5541085ec5300"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "78df96880611febb2146762b14bad8374d9dc677", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdaec99c0b97c56b67483b57fe2bcb89570d7c8/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=4fdaec99c0b97c56b67483b57fe2bcb89570d7c8", "patch": "@@ -354,20 +354,6 @@ fn expand_subtree(\n     Ok(tt::Subtree { delimiter: template.delimiter, token_trees: buf })\n }\n \n-/// Reduce single token subtree to single token\n-/// In `tt` matcher case, all tt tokens will be braced by a Delimiter::None\n-/// which makes all sort of problems.\n-fn reduce_single_token(mut subtree: tt::Subtree) -> tt::TokenTree {\n-    if subtree.delimiter != tt::Delimiter::None || subtree.token_trees.len() != 1 {\n-        return subtree.into();\n-    }\n-\n-    match subtree.token_trees.pop().unwrap() {\n-        tt::TokenTree::Subtree(subtree) => reduce_single_token(subtree),\n-        tt::TokenTree::Leaf(token) => token.into(),\n-    }\n-}\n-\n fn expand_tt(template: &crate::TokenTree, ctx: &mut ExpandCtx) -> Result<Fragment, ExpandError> {\n     let res: tt::TokenTree = match template {\n         crate::TokenTree::Subtree(subtree) => expand_subtree(subtree, ctx)?.into(),\n@@ -454,7 +440,7 @@ fn expand_tt(template: &crate::TokenTree, ctx: &mut ExpandCtx) -> Result<Fragmen\n \n             // Check if it is a single token subtree without any delimiter\n             // e.g {Delimiter:None> ['>'] /Delimiter:None>}\n-            reduce_single_token(tt::Subtree { delimiter: tt::Delimiter::None, token_trees: buf })\n+            tt::Subtree { delimiter: tt::Delimiter::None, token_trees: buf }.into()\n         }\n         crate::TokenTree::Leaf(leaf) => match leaf {\n             crate::Leaf::Ident(ident) => {\n@@ -497,16 +483,7 @@ fn expand_tt(template: &crate::TokenTree, ctx: &mut ExpandCtx) -> Result<Fragmen\n                 } else {\n                     let fragment = ctx.bindings.get(&v.text, &ctx.nesting)?.clone();\n                     ctx.var_expanded = true;\n-                    match fragment {\n-                        Fragment::Tokens(tt) => {\n-                            if let tt::TokenTree::Subtree(subtree) = tt {\n-                                reduce_single_token(subtree)\n-                            } else {\n-                                tt\n-                            }\n-                        }\n-                        Fragment::Ast(_) => return Ok(fragment),\n-                    }\n+                    return Ok(fragment);\n                 }\n             }\n             crate::Leaf::Literal(l) => tt::Leaf::from(tt::Literal { text: l.text.clone() }).into(),"}]}