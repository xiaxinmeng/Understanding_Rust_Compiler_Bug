{"sha": "c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzJlODIzY2IzYWU1Y2RlMDc3ZTYzN2UzZjUzODNhMDQ0ZGUwZjQ=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T06:05:19Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T06:05:19Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang-nursery/rustfmt into config", "tree": {"sha": "7a7854c75305701942984dfb34bb318472019bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a7854c75305701942984dfb34bb318472019bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "html_url": "https://github.com/rust-lang/rust/commit/c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c8fb4e7663687d2822c5e6d41c47f1143aef0f", "html_url": "https://github.com/rust-lang/rust/commit/31c8fb4e7663687d2822c5e6d41c47f1143aef0f"}, {"sha": "330605db8cb04fc7f6204b3614c8c717aa58f381", "url": "https://api.github.com/repos/rust-lang/rust/commits/330605db8cb04fc7f6204b3614c8c717aa58f381", "html_url": "https://github.com/rust-lang/rust/commit/330605db8cb04fc7f6204b3614c8c717aa58f381"}], "stats": {"total": 507, "additions": 265, "deletions": 242}, "files": [{"sha": "fc82d6570ab7064751670ca5153801663ac81c0a", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -11,15 +11,15 @@ dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -154,12 +154,12 @@ dependencies = [\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.2\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.2\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -184,12 +184,12 @@ dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"strings\"\n-version = \"0.0.1\"\n+version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -257,7 +257,7 @@ dependencies = [\n \n [[package]]\n name = \"thread-id\"\n-version = \"3.0.0\"\n+version = \"3.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -269,21 +269,21 @@ name = \"thread_local\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"toml\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -350,21 +350,21 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n-\"checksum serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b46a59dd63931010fdb1d88538513f3279090d88b5c22ef4fe8440cfffcc6e3\"\n-\"checksum serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c06b68790963518008b8ae0152d48be4bbbe77015d2c717f6282eea1824be9a\"\n+\"checksum serde 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38a3db3a5757f68069aba764b793823ea9fb9717c42c016f8903f8add50f508a\"\n+\"checksum serde_derive 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e46ef71ee001a4279a4513e79a6ebbb59da3a4987bf77a6df2e5534cd6f21d82\"\n \"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n-\"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n+\"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867cc5c2d7140ae7eaad2ae9e8bf39cb18a67ca651b7834f88d46ca98faadb9c\"\n \"checksum syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13ad4762fe52abc9f4008e85c4fb1b1fe3aa91ccb99ff4826a439c7c598e1047\"\n \"checksum syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e0e4dbae163dd98989464c23dd503161b338790640e11537686f2ef0f25c791\"\n \"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n-\"checksum thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4437c97558c70d129e40629a5b385b3fb1ffac301e63941335e4d354081ec14a\"\n+\"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n-\"checksum toml 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3063405db158de3dce8efad5fc89cf1baffb9501a3647dc9505ba109694ce31f\"\n-\"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n+\"checksum toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cc5dbfb20a481e64b99eb7ae280859ec76730c7191570ba5edaa962394edb0a\"\n+\"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\""}, {"sha": "1dd674204c8accc770552bfe24d9f5af5467065d", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -26,7 +26,7 @@ serde_json = \"1.0\"\n unicode-segmentation = \"1.0.0\"\n regex = \"0.2\"\n term = \"0.4\"\n-strings = \"0.0.1\"\n+strings = \"0.1\"\n diff = \"0.1\"\n syntex_syntax = \"0.58\"\n syntex_errors = \"0.58\""}, {"sha": "fa4e9d6c4e2392859cc4020be2faafbb4ead00f0", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -5,6 +5,11 @@ A tool for formatting Rust code according to style guidelines.\n If you'd like to help out (and you should, it's a fun project!), see\n [Contributing.md](Contributing.md).\n \n+If you want latest and greatest, you should use the [libsyntax](https://github.com/rust-lang-nursery/rustfmt/tree/libsyntax)\n+branch. It supports some newer Rust syntax which is missing from master and\n+fixes some bugs. However, it links against libsyntax from the Rust compiler, so\n+you must be using a nightly version of Rust to use it.\n+\n ## Quick start\n \n To install:"}, {"sha": "209c0eb138238fb644813411f00576906bc450ff", "filename": "src/chains.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -174,7 +174,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let almost_total = rewrites[..rewrites.len() - 1]\n         .iter()\n         .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n-    let one_line_len = rewrites.iter().fold(0, |a, r| a + r.len()) + parent_rewrite.len();\n+    let one_line_len = rewrites.iter().fold(0, |a, r| a + first_line_width(r)) +\n+                       parent_rewrite.len();\n \n     let veto_single_line = if one_line_len > context.config.chain_one_line_max() {\n         if rewrites.len() > 1 {\n@@ -248,13 +249,11 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n // True if the chain is only `?`s.\n fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n-    exprs\n-        .iter()\n-        .all(|e| if let ast::ExprKind::Try(_) = e.node {\n-                 true\n-             } else {\n-                 false\n-             })\n+    exprs.iter().all(|e| if let ast::ExprKind::Try(_) = e.node {\n+                         true\n+                     } else {\n+                         false\n+                     })\n }\n \n pub fn rewrite_try(expr: &ast::Expr,"}, {"sha": "066c7faa43e0e1393015825195f60db40138440a", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -1044,11 +1044,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             let between_kwd_else_block_comment =\n                 extract_comment(between_kwd_else_block, context, shape);\n \n-            let after_else =\n-                mk_sp(context\n-                          .codemap\n-                          .span_after(mk_sp(self.block.span.hi, else_block.span.lo), \"else\"),\n-                      else_block.span.lo);\n+            let after_else = mk_sp(context.codemap.span_after(mk_sp(self.block.span.hi,\n+                                                                    else_block.span.lo),\n+                                                              \"else\"),\n+                                   else_block.span.lo);\n             let after_else_comment = extract_comment(after_else, context, shape);\n \n             let between_sep = match context.config.control_brace_style() {"}, {"sha": "953aecb330507675cfe4a1175a9e5d85ee7f7ddc", "filename": "src/items.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -457,11 +457,8 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let indent = self.block_indent;\n-        let mut result = try_opt!(field\n-                                      .node\n-                                      .attrs\n-                                      .rewrite(&self.get_context(),\n-                                               Shape::indented(indent, self.config)));\n+        let mut result = try_opt!(field.node.attrs.rewrite(&self.get_context(),\n+                                                           Shape::indented(indent, self.config)));\n         if !result.is_empty() {\n             result.push('\\n');\n             result.push_str(&indent.to_string(self.config));\n@@ -1203,9 +1200,9 @@ impl Rewrite for ast::StructField {\n \n         let name = self.ident;\n         let vis = format_visibility(&self.vis);\n-        let mut attr_str =\n-            try_opt!(self.attrs\n-                         .rewrite(context, Shape::indented(shape.indent, context.config)));\n+        let mut attr_str = try_opt!(self.attrs.rewrite(context,\n+                                                       Shape::indented(shape.indent,\n+                                                                       context.config)));\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n             attr_str.push_str(&shape.indent.to_string(context.config));\n@@ -1225,9 +1222,9 @@ impl Rewrite for ast::StructField {\n \n         let last_line_width = last_line_width(&result) + type_annotation_spacing.1.len();\n         let budget = try_opt!(shape.width.checked_sub(last_line_width));\n-        let ty_rewritten = self.ty\n-            .rewrite(context,\n-                     Shape::legacy(budget, shape.indent + last_line_width));\n+        let ty_rewritten =\n+            self.ty.rewrite(context,\n+                            Shape::legacy(budget, shape.indent + last_line_width));\n         match ty_rewritten {\n             Some(ref ty) if ty.contains('\\n') => {\n                 let new_ty = rewrite_type_in_next_line();\n@@ -1381,9 +1378,8 @@ impl Rewrite for ast::FunctionRetTy {\n impl Rewrite for ast::Arg {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         if is_named_arg(self) {\n-            let mut result = try_opt!(self.pat\n-                                          .rewrite(context,\n-                                                   Shape::legacy(shape.width, shape.indent)));\n+            let mut result = try_opt!(self.pat.rewrite(context,\n+                                                       Shape::legacy(shape.width, shape.indent)));\n \n             if self.ty.node != ast::TyKind::Infer {\n                 if context.config.space_before_type_annotation() {\n@@ -1394,10 +1390,9 @@ impl Rewrite for ast::Arg {\n                     result.push_str(\" \");\n                 }\n                 let max_width = try_opt!(shape.width.checked_sub(result.len()));\n-                let ty_str = try_opt!(self.ty\n-                                          .rewrite(context,\n-                                                   Shape::legacy(max_width,\n-                                                                 shape.indent + result.len())));\n+                let ty_str = try_opt!(self.ty.rewrite(context,\n+                                                      Shape::legacy(max_width,\n+                                                                    shape.indent + result.len())));\n                 result.push_str(&ty_str);\n             }\n \n@@ -1626,7 +1621,8 @@ fn rewrite_fn_base(context: &RewriteContext,\n                                         fd.variadic,\n                                         generics_str.contains('\\n')));\n \n-    let multi_line_arg_str = arg_str.contains('\\n');\n+    let multi_line_arg_str = arg_str.contains('\\n') ||\n+                             arg_str.chars().last().map_or(false, |c| c == ',');\n \n     let put_args_in_block = match context.config.fn_args_layout() {\n         IndentStyle::Block => multi_line_arg_str || generics_str.contains('\\n'),\n@@ -1697,9 +1693,8 @@ fn rewrite_fn_base(context: &RewriteContext,\n         if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-            let ret_str = try_opt!(fd.output\n-                                       .rewrite(context,\n-                                                Shape::indented(ret_indent, context.config)));\n+            let ret_str = try_opt!(fd.output.rewrite(context,\n+                                                     Shape::indented(ret_indent, context.config)));\n             result.push_str(&ret_str);\n         } else {\n             result.push_str(&ret_str);\n@@ -1859,12 +1854,16 @@ fn rewrite_args(context: &RewriteContext,\n         arg_items.extend(more_items);\n     }\n \n+    let fits_in_one_line = !generics_str_contains_newline &&\n+                           (arg_items.len() == 0 ||\n+                            arg_items.len() == 1 && arg_item_strs[0].len() <= one_line_budget);\n+\n     for (item, arg) in arg_items.iter_mut().zip(arg_item_strs) {\n         item.item = Some(arg);\n     }\n \n     let (indent, trailing_comma, end_with_newline) = match context.config.fn_args_layout() {\n-        IndentStyle::Block if !generics_str_contains_newline && arg_items.len() <= 1 => {\n+        IndentStyle::Block if fits_in_one_line => {\n             (indent.block_indent(context.config), SeparatorTactic::Never, true)\n         }\n         IndentStyle::Block => {\n@@ -1989,16 +1988,14 @@ fn rewrite_generics(context: &RewriteContext,\n         .map(|ty_param| ty_param.rewrite(context, Shape::legacy(h_budget, offset)));\n \n     // Extract comments between generics.\n-    let lt_spans = lifetimes\n-        .iter()\n-        .map(|l| {\n-                 let hi = if l.bounds.is_empty() {\n-                     l.lifetime.span.hi\n-                 } else {\n-                     l.bounds[l.bounds.len() - 1].span.hi\n-                 };\n-                 mk_sp(l.lifetime.span.lo, hi)\n-             });\n+    let lt_spans = lifetimes.iter().map(|l| {\n+                                            let hi = if l.bounds.is_empty() {\n+                                                l.lifetime.span.hi\n+                                            } else {\n+                                                l.bounds[l.bounds.len() - 1].span.hi\n+                                            };\n+                                            mk_sp(l.lifetime.span.lo, hi)\n+                                        });\n     let ty_spans = tys.iter().map(span_for_ty_param);\n \n     let items = itemize_list(context.codemap,"}, {"sha": "a48f9a382e6a50451b8558a5f3cb09e964f286b6", "filename": "src/lists.rs", "status": "modified", "additions": 102, "deletions": 104, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -339,116 +339,114 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n     fn next(&mut self) -> Option<Self::Item> {\n         let white_space: &[_] = &[' ', '\\t'];\n \n-        self.inner\n-            .next()\n-            .map(|item| {\n-                let mut new_lines = false;\n-                // Pre-comment\n-                let pre_snippet = self.codemap\n-                    .span_to_snippet(codemap::mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n-                    .unwrap();\n-                let trimmed_pre_snippet = pre_snippet.trim();\n-                let has_pre_comment = trimmed_pre_snippet.contains(\"//\") ||\n-                                      trimmed_pre_snippet.contains(\"/*\");\n-                let pre_comment = if has_pre_comment {\n-                    Some(trimmed_pre_snippet.to_owned())\n-                } else {\n-                    None\n-                };\n-\n-                // Post-comment\n-                let next_start = match self.inner.peek() {\n-                    Some(next_item) => (self.get_lo)(next_item),\n-                    None => self.next_span_start,\n-                };\n-                let post_snippet = self.codemap\n-                    .span_to_snippet(codemap::mk_sp((self.get_hi)(&item), next_start))\n-                    .unwrap();\n-\n-                let comment_end = match self.inner.peek() {\n-                    Some(..) => {\n-                        let mut block_open_index = post_snippet.find(\"/*\");\n-                        // check if it realy is a block comment (and not //*)\n-                        if let Some(i) = block_open_index {\n-                            if i > 0 && &post_snippet[i - 1..i] == \"/\" {\n-                                block_open_index = None;\n-                            }\n-                        }\n-                        let newline_index = post_snippet.find('\\n');\n-                        let separator_index = post_snippet.find_uncommented(\",\").unwrap();\n-\n-                        match (block_open_index, newline_index) {\n-                            // Separator before comment, with the next item on same line.\n-                            // Comment belongs to next item.\n-                            (Some(i), None) if i > separator_index => separator_index + 1,\n-                            // Block-style post-comment before the separator.\n-                            (Some(i), None) => {\n-                                cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n-                                         separator_index + 1)\n-                            }\n-                            // Block-style post-comment. Either before or after the separator.\n-                            (Some(i), Some(j)) if i < j => {\n-                                cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n-                                         separator_index + 1)\n-                            }\n-                            // Potential *single* line comment.\n-                            (_, Some(j)) if j > separator_index => j + 1,\n-                            _ => post_snippet.len(),\n+        self.inner.next().map(|item| {\n+            let mut new_lines = false;\n+            // Pre-comment\n+            let pre_snippet = self.codemap\n+                .span_to_snippet(codemap::mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n+                .unwrap();\n+            let trimmed_pre_snippet = pre_snippet.trim();\n+            let has_pre_comment = trimmed_pre_snippet.contains(\"//\") ||\n+                                  trimmed_pre_snippet.contains(\"/*\");\n+            let pre_comment = if has_pre_comment {\n+                Some(trimmed_pre_snippet.to_owned())\n+            } else {\n+                None\n+            };\n+\n+            // Post-comment\n+            let next_start = match self.inner.peek() {\n+                Some(next_item) => (self.get_lo)(next_item),\n+                None => self.next_span_start,\n+            };\n+            let post_snippet = self.codemap\n+                .span_to_snippet(codemap::mk_sp((self.get_hi)(&item), next_start))\n+                .unwrap();\n+\n+            let comment_end = match self.inner.peek() {\n+                Some(..) => {\n+                    let mut block_open_index = post_snippet.find(\"/*\");\n+                    // check if it realy is a block comment (and not //*)\n+                    if let Some(i) = block_open_index {\n+                        if i > 0 && &post_snippet[i - 1..i] == \"/\" {\n+                            block_open_index = None;\n                         }\n                     }\n-                    None => {\n-                        post_snippet\n-                            .find_uncommented(self.terminator)\n-                            .unwrap_or(post_snippet.len())\n-                    }\n-                };\n-\n-                if !post_snippet.is_empty() && comment_end > 0 {\n-                    // Account for extra whitespace between items. This is fiddly\n-                    // because of the way we divide pre- and post- comments.\n-\n-                    // Everything from the separator to the next item.\n-                    let test_snippet = &post_snippet[comment_end - 1..];\n-                    let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n-                    // From the end of the first line of comments.\n-                    let test_snippet = &test_snippet[first_newline..];\n-                    let first = test_snippet\n-                        .find(|c: char| !c.is_whitespace())\n-                        .unwrap_or(test_snippet.len());\n-                    // From the end of the first line of comments to the next non-whitespace char.\n-                    let test_snippet = &test_snippet[..first];\n-\n-                    if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n-                        // There were multiple line breaks which got trimmed to nothing.\n-                        new_lines = true;\n+                    let newline_index = post_snippet.find('\\n');\n+                    let separator_index = post_snippet.find_uncommented(\",\").unwrap();\n+\n+                    match (block_open_index, newline_index) {\n+                        // Separator before comment, with the next item on same line.\n+                        // Comment belongs to next item.\n+                        (Some(i), None) if i > separator_index => separator_index + 1,\n+                        // Block-style post-comment before the separator.\n+                        (Some(i), None) => {\n+                            cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n+                                     separator_index + 1)\n+                        }\n+                        // Block-style post-comment. Either before or after the separator.\n+                        (Some(i), Some(j)) if i < j => {\n+                            cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n+                                     separator_index + 1)\n+                        }\n+                        // Potential *single* line comment.\n+                        (_, Some(j)) if j > separator_index => j + 1,\n+                        _ => post_snippet.len(),\n                     }\n                 }\n-\n-                // Cleanup post-comment: strip separators and whitespace.\n-                self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n-                let post_snippet = post_snippet[..comment_end].trim();\n-\n-                let post_snippet_trimmed = if post_snippet.starts_with(',') {\n-                    post_snippet[1..].trim_matches(white_space)\n-                } else if post_snippet.ends_with(',') {\n-                    post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n-                } else {\n+                None => {\n                     post_snippet\n-                };\n-\n-                let post_comment = if !post_snippet_trimmed.is_empty() {\n-                    Some(post_snippet_trimmed.to_owned())\n-                } else {\n-                    None\n-                };\n-\n-                ListItem {\n-                    pre_comment: pre_comment,\n-                    item: (self.get_item_string)(&item),\n-                    post_comment: post_comment,\n-                    new_lines: new_lines,\n+                        .find_uncommented(self.terminator)\n+                        .unwrap_or(post_snippet.len())\n+                }\n+            };\n+\n+            if !post_snippet.is_empty() && comment_end > 0 {\n+                // Account for extra whitespace between items. This is fiddly\n+                // because of the way we divide pre- and post- comments.\n+\n+                // Everything from the separator to the next item.\n+                let test_snippet = &post_snippet[comment_end - 1..];\n+                let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments.\n+                let test_snippet = &test_snippet[first_newline..];\n+                let first = test_snippet\n+                    .find(|c: char| !c.is_whitespace())\n+                    .unwrap_or(test_snippet.len());\n+                // From the end of the first line of comments to the next non-whitespace char.\n+                let test_snippet = &test_snippet[..first];\n+\n+                if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n+                    // There were multiple line breaks which got trimmed to nothing.\n+                    new_lines = true;\n                 }\n-            })\n+            }\n+\n+            // Cleanup post-comment: strip separators and whitespace.\n+            self.prev_span_end = (self.get_hi)(&item) + BytePos(comment_end as u32);\n+            let post_snippet = post_snippet[..comment_end].trim();\n+\n+            let post_snippet_trimmed = if post_snippet.starts_with(',') {\n+                post_snippet[1..].trim_matches(white_space)\n+            } else if post_snippet.ends_with(',') {\n+                post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space)\n+            } else {\n+                post_snippet\n+            };\n+\n+            let post_comment = if !post_snippet_trimmed.is_empty() {\n+                Some(post_snippet_trimmed.to_owned())\n+            } else {\n+                None\n+            };\n+\n+            ListItem {\n+                pre_comment: pre_comment,\n+                item: (self.get_item_string)(&item),\n+                post_comment: post_comment,\n+                new_lines: new_lines,\n+            }\n+        })\n     }\n }\n "}, {"sha": "b5644fb014c5c876dfb0db7be5270c69594d96ee", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -159,15 +159,13 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             // Format macro invocation as array literal.\n             let extra_offset = macro_name.len();\n             let shape = try_opt!(shape.shrink_left(extra_offset));\n-            let rewrite = try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                                 mk_sp(context\n-                                                           .codemap\n-                                                           .span_after(mac.span,\n-                                                                       original_style\n-                                                                           .opener()),\n-                                                       mac.span.hi - BytePos(1)),\n-                                                 context,\n-                                                 shape));\n+            let rewrite =\n+                try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n+                                       mk_sp(context.codemap.span_after(mac.span,\n+                                                                        original_style.opener()),\n+                                             mac.span.hi - BytePos(1)),\n+                                       context,\n+                                       shape));\n \n             Some(format!(\"{}{}\", macro_name, rewrite))\n         }"}, {"sha": "2f4dda2a1b4514eb307ac1d30d751eea0dc0b924", "filename": "src/missed_spans.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -158,13 +158,12 @@ impl<'a> FmtVisitor<'a> {\n                                                         self.config.max_width() -\n                                                         self.block_indent.width());\n \n-                    self.buffer\n-                        .push_str(&rewrite_comment(subslice,\n-                                                   false,\n-                                                   Shape::legacy(comment_width,\n-                                                                 self.block_indent),\n-                                                   self.config)\n-                                          .unwrap());\n+                    self.buffer.push_str(&rewrite_comment(subslice,\n+                                                          false,\n+                                                          Shape::legacy(comment_width,\n+                                                                        self.block_indent),\n+                                                          self.config)\n+                                                 .unwrap());\n \n                     last_wspace = None;\n                     line_start = offset + subslice.len();"}, {"sha": "a404e441bc1fb8b0279e32f16fc7193dd0ece80e", "filename": "src/patterns.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -39,11 +39,10 @@ impl Rewrite for Pat {\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n                         // 3 - ` @ `.\n-                        let width = try_opt!(shape\n-                                                 .width\n-                                                 .checked_sub(prefix.len() + mut_infix.len() +\n-                                                              id_str.len() +\n-                                                              3));\n+                        let width = try_opt!(shape.width.checked_sub(prefix.len() +\n+                                                                     mut_infix.len() +\n+                                                                     id_str.len() +\n+                                                                     3));\n                         format!(\" @ {}\",\n                                 try_opt!(p.rewrite(context, Shape::legacy(width, shape.indent))))\n                     }\n@@ -331,13 +330,11 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n fn count_wildcard_suffix_len(items: &[ListItem]) -> usize {\n     let mut suffix_len = 0;\n \n-    for item in items\n-            .iter()\n-            .rev()\n-            .take_while(|i| match i.item {\n-                            Some(ref internal_string) if internal_string == \"_\" => true,\n-                            _ => false,\n-                        }) {\n+    for item in items.iter().rev().take_while(|i| match i.item {\n+                                                  Some(ref internal_string) if internal_string ==\n+                                                                               \"_\" => true,\n+                                                  _ => false,\n+                                              }) {\n         suffix_len += 1;\n \n         if item.pre_comment.is_some() || item.post_comment.is_some() {"}, {"sha": "ffa9639005a0b0117d59c0e4b52b42491c50b987", "filename": "src/types.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -163,11 +163,10 @@ impl<'a> Rewrite for SegmentParam<'a> {\n                     TypeDensity::Compressed => format!(\"{}=\", binding.ident),\n                 };\n                 let budget = try_opt!(shape.width.checked_sub(result.len()));\n-                let rewrite =\n-                    try_opt!(binding\n-                                 .ty\n-                                 .rewrite(context,\n-                                          Shape::legacy(budget, shape.indent + result.len())));\n+                let rewrite = try_opt!(binding.ty.rewrite(context,\n+                                                          Shape::legacy(budget,\n+                                                                        shape.indent +\n+                                                                        result.len())));\n                 result.push_str(&rewrite);\n                 Some(result)\n             }\n@@ -563,10 +562,10 @@ impl Rewrite for ast::PolyTraitRef {\n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;\n             let max_path_width = try_opt!(shape.width.checked_sub(extra_offset));\n-            let path_str = try_opt!(self.trait_ref\n-                                        .rewrite(context,\n-                                                 Shape::legacy(max_path_width,\n-                                                               shape.indent + extra_offset)));\n+            let path_str = try_opt!(self.trait_ref.rewrite(context,\n+                                                           Shape::legacy(max_path_width,\n+                                                                         shape.indent +\n+                                                                         extra_offset)));\n \n             Some(if context.config.spaces_within_angle_brackets() && lifetime_str.len() > 0 {\n                      format!(\"for< {} > {}\", lifetime_str, path_str)\n@@ -613,22 +612,20 @@ impl Rewrite for ast::Ty {\n                              format!(\"&{} {}{}\",\n                                      lt_str,\n                                      mut_str,\n-                                     try_opt!(mt.ty\n-                                                  .rewrite(context,\n-                                                           Shape::legacy(budget,\n-                                                                         shape.indent + 2 +\n-                                                                         mut_len +\n-                                                                         lt_len))))\n+                                     try_opt!(mt.ty.rewrite(context,\n+                                                            Shape::legacy(budget,\n+                                                                          shape.indent + 2 +\n+                                                                          mut_len +\n+                                                                          lt_len))))\n                          }\n                          None => {\n                              let budget = try_opt!(shape.width.checked_sub(1 + mut_len));\n                              format!(\"&{}{}\",\n                                      mut_str,\n-                                     try_opt!(mt.ty\n-                                                  .rewrite(context,\n-                                                           Shape::legacy(budget,\n-                                                                         shape.indent + 1 +\n-                                                                         mut_len))))\n+                                     try_opt!(mt.ty.rewrite(context,\n+                                                            Shape::legacy(budget,\n+                                                                          shape.indent + 1 +\n+                                                                          mut_len))))\n                          }\n                      })\n             }"}, {"sha": "eb09b941c33370c279333004b0f987f990cdd63c", "filename": "tests/source/configs-fn_args_layout-block.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsource%2Fconfigs-fn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsource%2Fconfigs-fn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_args_layout-block.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -8,3 +8,9 @@ fn lorem(ipsum: usize) {}\n fn lorem(ipsum: usize, dolor: usize, sit: usize, amet: usize, consectetur: usize, adipiscing: usize, elit: usize) {\n     // body\n }\n+\n+// #1441\n+extern \"system\" {\n+    pub fn GetConsoleHistoryInfo(console_history_info: *mut ConsoleHistoryInfo) -> Boooooooooooooool;\n+}\n+"}, {"sha": "9d2964fc77cc7520bf24ca15a4aaa12b008ced8d", "filename": "tests/source/issue-1366.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsource%2Fissue-1366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsource%2Fissue-1366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1366.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    fn f() -> Option<i32> {\n+        Some(\"fffffffsssssssssddddssssfffffddddff\").map(|s| s).map(|s| s.to_string()).map(|res| {\n+            match Some(res) {\n+                Some(ref s) if s == \"\" => 41,\n+                Some(_) => 42,\n+                _ => 43,\n+            }\n+        })\n+    }\n+    println!(\"{:?}\", f())\n+}"}, {"sha": "58e44ee538100fc397e24674c6f964991c145335", "filename": "tests/system.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -303,21 +303,18 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .map(|line| line.expect(\"Failed getting line\"))\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n-            regex\n-                .captures_iter(&line)\n-                .next()\n-                .map(|capture| {\n-                    (capture\n-                         .get(1)\n-                         .expect(\"Couldn't unwrap capture\")\n-                         .as_str()\n-                         .to_owned(),\n-                     capture\n-                         .get(2)\n-                         .expect(\"Couldn't unwrap capture\")\n-                         .as_str()\n-                         .to_owned())\n-                })\n+            regex.captures_iter(&line).next().map(|capture| {\n+                (capture\n+                     .get(1)\n+                     .expect(\"Couldn't unwrap capture\")\n+                     .as_str()\n+                     .to_owned(),\n+                 capture\n+                     .get(2)\n+                     .expect(\"Couldn't unwrap capture\")\n+                     .as_str()\n+                     .to_owned())\n+            })\n         })\n         .collect()\n }"}, {"sha": "586d118b210df64adc3be73ea68eec5ab8e4b2b0", "filename": "tests/target/configs-fn_args_layout-block.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_args_layout-block.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -16,3 +16,10 @@ fn lorem(\n ) {\n     // body\n }\n+\n+// #1441\n+extern \"system\" {\n+    pub fn GetConsoleHistoryInfo(\n+        console_history_info: *mut ConsoleHistoryInfo,\n+    ) -> Boooooooooooooool;\n+}"}, {"sha": "927aabc5018646269b70d12417383a9cd7bede20", "filename": "tests/target/issue-1366.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Fissue-1366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Fissue-1366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1366.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    fn f() -> Option<i32> {\n+        Some(\"fffffffsssssssssddddssssfffffddddff\")\n+            .map(|s| s)\n+            .map(|s| s.to_string())\n+            .map(|res| match Some(res) {\n+                     Some(ref s) if s == \"\" => 41,\n+                     Some(_) => 42,\n+                     _ => 43,\n+                 })\n+    }\n+    println!(\"{:?}\", f())\n+}"}, {"sha": "2d3b52da72a4dfefc36ad838d5d9a500f366eb81", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2e823cb3ae5cde077e637e3f5383a044de0f4/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=c3c2e823cb3ae5cde077e637e3f5383a044de0f4", "patch": "@@ -29,14 +29,13 @@ fn b() {\n }\n \n fn issue550() {\n-    self.visitor\n-        .visit_volume(self.level.sector_id(sector),\n-                      (floor_y,\n-                       if is_sky_flat(ceil_tex) {\n-                           from_wad_height(self.height_range.1)\n-                       } else {\n-                           ceil_y\n-                       }));\n+    self.visitor.visit_volume(self.level.sector_id(sector),\n+                              (floor_y,\n+                               if is_sky_flat(ceil_tex) {\n+                                   from_wad_height(self.height_range.1)\n+                               } else {\n+                                   ceil_y\n+                               }));\n }\n \n fn issue775() {"}]}