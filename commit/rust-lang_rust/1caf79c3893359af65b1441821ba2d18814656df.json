{"sha": "1caf79c3893359af65b1441821ba2d18814656df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWY3OWMzODkzMzU5YWY2NWIxNDQxODIxYmEyZDE4ODE0NjU2ZGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-26T19:11:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T19:11:47Z"}, "message": "Merge #9014\n\n9014: simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d63bfa5a27928f55828c7c38b669e2105bb9baf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63bfa5a27928f55828c7c38b669e2105bb9baf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1caf79c3893359af65b1441821ba2d18814656df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrp1zCRBK7hj4Ov3rIwAA5jMIADH2NNYP5vj2fRRU6uHRT4gi\nCSsHDeC1tT4WMbM86RzsDHQe4ebiaXUI6pCGUyCJIffMwQe9iCcmLd2+au0TkUqz\nJSqYbyPK2EhoHINFtC3T59fWHvOFlSg9NYPiEMG8k5cm2LWUzAH3/7ZcfyZc3IOE\nUaMfy2R8eUtZgifjIJVhYsUaNAhFKIldGdf5cbw13pY8TFelNnYH5fg8sqm3XvMf\njfk5EeUQByMCeii2ASQ7w0SByvGJG+fkIhuXXMd62wuBBbDaVgQ1+mKs6PnENrHP\nOfpDKA+rQlU8wb1kk6Ge6R9BgWynpc8TI1cmhtezgiVLB174h6d8lFfoY/cHcN4=\n=FBJy\n-----END PGP SIGNATURE-----\n", "payload": "tree d63bfa5a27928f55828c7c38b669e2105bb9baf9\nparent bb1c7fc0cfe24a8477d943faa932992b9cd48957\nparent 26e784a575c760087bdb321932e823ad27046024\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622056307 +0000\ncommitter GitHub <noreply@github.com> 1622056307 +0000\n\nMerge #9014\n\n9014: simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1caf79c3893359af65b1441821ba2d18814656df", "html_url": "https://github.com/rust-lang/rust/commit/1caf79c3893359af65b1441821ba2d18814656df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1caf79c3893359af65b1441821ba2d18814656df/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1c7fc0cfe24a8477d943faa932992b9cd48957", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1c7fc0cfe24a8477d943faa932992b9cd48957", "html_url": "https://github.com/rust-lang/rust/commit/bb1c7fc0cfe24a8477d943faa932992b9cd48957"}, {"sha": "26e784a575c760087bdb321932e823ad27046024", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e784a575c760087bdb321932e823ad27046024", "html_url": "https://github.com/rust-lang/rust/commit/26e784a575c760087bdb321932e823ad27046024"}], "stats": {"total": 112, "additions": 44, "deletions": 68}, "files": [{"sha": "37a0504150c9facc9e36396f68d3ae14f626b313", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=1caf79c3893359af65b1441821ba2d18814656df", "patch": "@@ -308,7 +308,11 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n+        if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n+            resolve_hir_path_qualifier(db, &self.resolver, &hir_path)\n+        } else {\n+            resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n+        }\n     }\n \n     pub(crate) fn record_literal_missing_fields("}, {"sha": "d2d0e4a98f363243814237aae44db9f058584b9c", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=1caf79c3893359af65b1441821ba2d18814656df", "patch": "@@ -2,7 +2,7 @@\n \n use std::iter;\n \n-use syntax::SyntaxKind;\n+use syntax::{SyntaxKind, T};\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n@@ -54,7 +54,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"where\", \"where \");\n         return;\n     }\n-    if ctx.unsafe_is_prev {\n+    if ctx.previous_token_is(T![unsafe]) {\n         if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n             add_keyword(ctx, acc, \"fn\", \"fn $0() {}\")\n         }\n@@ -92,7 +92,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"for\", \"for $1 in $0 {}\");\n     }\n \n-    if ctx.if_is_prev || ctx.block_expr_parent {\n+    if ctx.previous_token_is(T![if]) || ctx.previous_token_is(T![while]) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"let\", \"let \");\n     }\n "}, {"sha": "85c7edabb6358a3335b57992e37be263d7dacf30", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=1caf79c3893359af65b1441821ba2d18814656df", "patch": "@@ -1,25 +1,26 @@\n //! See `CompletionContext` structure.\n \n use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n-use ide_db::base_db::{FilePosition, SourceDatabase};\n-use ide_db::{call_info::ActiveParameter, RootDatabase};\n+use ide_db::{\n+    base_db::{FilePosition, SourceDatabase},\n+    call_info::ActiveParameter,\n+    RootDatabase,\n+};\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOrNameRef, NameOwner},\n     match_ast, AstNode, NodeOrToken,\n-    SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TextRange, TextSize,\n+    SyntaxKind::{self, *},\n+    SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n-\n use text_edit::Indel;\n \n use crate::{\n     patterns::{\n-        fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n-        has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n-        has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n-        has_trait_parent, if_is_prev, inside_impl_trait_block, is_in_loop_body, is_match_arm,\n-        unsafe_is_prev,\n+        for_is_prev2, has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n+        has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n+        has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, inside_impl_trait_block,\n+        is_in_loop_body, is_match_arm, previous_token,\n     },\n     CompletionConfig,\n };\n@@ -81,25 +82,26 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n+    pub(super) locals: Vec<(String, Local)>,\n+\n     pub(super) mod_declaration_under_caret: Option<ast::Module>,\n-    pub(super) unsafe_is_prev: bool,\n-    pub(super) if_is_prev: bool,\n+    pub(super) has_trait_parent: bool,\n+    pub(super) has_impl_parent: bool,\n+\n+    // keyword patterns\n+    pub(super) previous_token: Option<SyntaxToken>,\n     pub(super) block_expr_parent: bool,\n     pub(super) bind_pat_parent: bool,\n     pub(super) ref_pat_parent: bool,\n     pub(super) in_loop_body: bool,\n-    pub(super) has_trait_parent: bool,\n-    pub(super) has_impl_parent: bool,\n-    pub(super) inside_impl_trait_block: bool,\n     pub(super) has_field_list_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n     pub(super) has_item_list_or_source_file_parent: bool,\n-    pub(super) for_is_prev2: bool,\n-    pub(super) fn_is_prev: bool,\n     pub(super) incomplete_let: bool,\n-    pub(super) locals: Vec<(String, Local)>,\n+\n+    no_completion_required: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -175,22 +177,19 @@ impl<'a> CompletionContext<'a> {\n             has_type_args: false,\n             attribute_under_caret: None,\n             mod_declaration_under_caret: None,\n-            unsafe_is_prev: false,\n-            if_is_prev: false,\n+            previous_token: None,\n             block_expr_parent: false,\n             bind_pat_parent: false,\n             ref_pat_parent: false,\n             in_loop_body: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n-            inside_impl_trait_block: false,\n             has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n             is_match_arm: false,\n             has_item_list_or_source_file_parent: false,\n-            for_is_prev2: false,\n-            fn_is_prev: false,\n+            no_completion_required: false,\n             incomplete_let: false,\n             locals,\n         };\n@@ -245,7 +244,7 @@ impl<'a> CompletionContext<'a> {\n     ///   Exception for this case is `impl Trait for Foo`, where we would like to hint trait method names.\n     /// - `for _ i$0` -- obviously, it'll be \"in\" keyword.\n     pub(crate) fn no_completion_required(&self) -> bool {\n-        (self.fn_is_prev && !self.inside_impl_trait_block) || self.for_is_prev2\n+        self.no_completion_required\n     }\n \n     /// The range of the identifier that is being completed.\n@@ -264,33 +263,39 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n+    pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {\n+        self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n+    }\n+\n     fn fill_keyword_patterns(&mut self, file_with_fake_ident: &SyntaxNode, offset: TextSize) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n+        self.previous_token = previous_token(syntax_element.clone());\n         self.block_expr_parent = has_block_expr_parent(syntax_element.clone());\n-        self.unsafe_is_prev = unsafe_is_prev(syntax_element.clone());\n-        self.if_is_prev = if_is_prev(syntax_element.clone());\n         self.bind_pat_parent = has_bind_pat_parent(syntax_element.clone());\n         self.ref_pat_parent = has_ref_parent(syntax_element.clone());\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.has_trait_parent = has_trait_parent(syntax_element.clone());\n         self.has_impl_parent = has_impl_parent(syntax_element.clone());\n-        self.inside_impl_trait_block = inside_impl_trait_block(syntax_element.clone());\n         self.has_field_list_parent = has_field_list_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());\n         self.is_match_arm = is_match_arm(syntax_element.clone());\n+\n         self.has_item_list_or_source_file_parent =\n             has_item_list_or_source_file_parent(syntax_element.clone());\n         self.mod_declaration_under_caret =\n             find_node_at_offset::<ast::Module>(&file_with_fake_ident, offset)\n                 .filter(|module| module.item_list().is_none());\n-        self.for_is_prev2 = for_is_prev2(syntax_element.clone());\n-        self.fn_is_prev = fn_is_prev(syntax_element.clone());\n         self.incomplete_let =\n             syntax_element.ancestors().take(6).find_map(ast::LetStmt::cast).map_or(false, |it| {\n                 it.syntax().text_range().end() == syntax_element.text_range().end()\n             });\n+\n+        let inside_impl_trait_block = inside_impl_trait_block(syntax_element.clone());\n+        let fn_is_prev = self.previous_token_is(T![fn]);\n+        let for_is_prev2 = for_is_prev2(syntax_element.clone());\n+        self.no_completion_required = (fn_is_prev && !inside_impl_trait_block) || for_is_prev2;\n     }\n \n     fn fill_impl_def(&mut self) {"}, {"sha": "3d8a83ed872019c4ca2349f4f12c3c56b8af95cb", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caf79c3893359af65b1441821ba2d18814656df/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=1caf79c3893359af65b1441821ba2d18814656df", "patch": "@@ -115,36 +115,8 @@ fn test_is_match_arm() {\n     check_pattern_is_applicable(r\"fn my_fn() { match () { () => m$0 } }\", is_match_arm);\n }\n \n-pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n-    element\n-        .into_token()\n-        .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == T![unsafe])\n-        .is_some()\n-}\n-#[test]\n-fn test_unsafe_is_prev() {\n-    check_pattern_is_applicable(r\"unsafe i$0\", unsafe_is_prev);\n-}\n-\n-pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n-    element\n-        .into_token()\n-        .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == T![if])\n-        .is_some()\n-}\n-\n-pub(crate) fn fn_is_prev(element: SyntaxElement) -> bool {\n-    element\n-        .into_token()\n-        .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == T![fn])\n-        .is_some()\n-}\n-#[test]\n-fn test_fn_is_prev() {\n-    check_pattern_is_applicable(r\"fn l$0\", fn_is_prev);\n+pub(crate) fn previous_token(element: SyntaxElement) -> Option<SyntaxToken> {\n+    element.into_token().and_then(|it| previous_non_trivia_token(it))\n }\n \n /// Check if the token previous to the previous one is `for`.\n@@ -162,11 +134,6 @@ fn test_for_is_prev2() {\n     check_pattern_is_applicable(r\"for i i$0\", for_is_prev2);\n }\n \n-#[test]\n-fn test_if_is_prev() {\n-    check_pattern_is_applicable(r\"if l$0\", if_is_prev);\n-}\n-\n pub(crate) fn has_trait_as_prev_sibling(element: SyntaxElement) -> bool {\n     previous_sibling_or_ancestor_sibling(element).filter(|it| it.kind() == TRAIT).is_some()\n }"}]}