{"sha": "032156210deaf71fddc4f8577fa2b541606ed547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMjE1NjIxMGRlYWY3MWZkZGM0Zjg1NzdmYTJiNTQxNjA2ZWQ1NDc=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-02-28T11:23:07Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-04T18:40:00Z"}, "message": "Use `Item::is_*` methods consistently", "tree": {"sha": "bc2a785d7ba19e776e5298e90ae333f5d5f4fa0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc2a785d7ba19e776e5298e90ae333f5d5f4fa0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032156210deaf71fddc4f8577fa2b541606ed547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032156210deaf71fddc4f8577fa2b541606ed547", "html_url": "https://github.com/rust-lang/rust/commit/032156210deaf71fddc4f8577fa2b541606ed547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032156210deaf71fddc4f8577fa2b541606ed547/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a28b69948e13ec09a8a7701fa4d9001e880ad5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a28b69948e13ec09a8a7701fa4d9001e880ad5f", "html_url": "https://github.com/rust-lang/rust/commit/2a28b69948e13ec09a8a7701fa4d9001e880ad5f"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "c2a37a555d6935765ec02b8c253dd35e975d0381", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/032156210deaf71fddc4f8577fa2b541606ed547/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032156210deaf71fddc4f8577fa2b541606ed547/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=032156210deaf71fddc4f8577fa2b541606ed547", "patch": "@@ -175,9 +175,8 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             };\n             let mut tmp = Vec::new();\n             for child in &mut m.items {\n-                match child.inner {\n-                    ModuleItem(..) => {}\n-                    _ => continue,\n+                if !child.is_mod() {\n+                    continue;\n                 }\n                 let prim = match PrimitiveType::find(&child.attrs) {\n                     Some(prim) => prim,\n@@ -272,7 +271,12 @@ impl Item {\n     pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n         self.attrs.value(\"doc\")\n     }\n-\n+    pub fn is_crate(&self) -> bool {\n+        match self.inner {\n+            ModuleItem(Module { items: _, is_crate: true }) => true,\n+            _ => false\n+        }\n+    }\n     pub fn is_mod(&self) -> bool {\n         match self.inner { ModuleItem(..) => true, _ => false }\n     }\n@@ -288,6 +292,18 @@ impl Item {\n     pub fn is_fn(&self) -> bool {\n         match self.inner { FunctionItem(..) => true, _ => false }\n     }\n+    pub fn is_associated_type(&self) -> bool {\n+        match self.inner { AssociatedTypeItem(..) => true, _ => false }\n+    }\n+    pub fn is_associated_const(&self) -> bool {\n+        match self.inner { AssociatedConstItem(..) => true, _ => false }\n+    }\n+    pub fn is_method(&self) -> bool {\n+        match self.inner { MethodItem(..) => true, _ => false }\n+    }\n+    pub fn is_ty_method(&self) -> bool {\n+        match self.inner { TyMethodItem(..) => true, _ => false }\n+    }\n \n     pub fn stability_class(&self) -> String {\n         self.stability.as_ref().map(|ref s| {"}, {"sha": "88f21b67a5ac64727192482a6563f5ce91d19257", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/032156210deaf71fddc4f8577fa2b541606ed547/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032156210deaf71fddc4f8577fa2b541606ed547/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=032156210deaf71fddc4f8577fa2b541606ed547", "patch": "@@ -1266,11 +1266,7 @@ impl Context {\n             }\n             title.push_str(\" - Rust\");\n             let tyname = shortty(it).to_static_str();\n-            let is_crate = match it.inner {\n-                clean::ModuleItem(clean::Module { items: _, is_crate: true }) => true,\n-                _ => false\n-            };\n-            let desc = if is_crate {\n+            let desc = if it.is_crate() {\n                 format!(\"API documentation for the Rust `{}` crate.\",\n                         cx.layout.krate)\n             } else {\n@@ -1891,18 +1887,10 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                   bounds,\n                   WhereClause(&t.generics)));\n \n-    let types = t.items.iter().filter(|m| {\n-        match m.inner { clean::AssociatedTypeItem(..) => true, _ => false }\n-    }).collect::<Vec<_>>();\n-    let consts = t.items.iter().filter(|m| {\n-        match m.inner { clean::AssociatedConstItem(..) => true, _ => false }\n-    }).collect::<Vec<_>>();\n-    let required = t.items.iter().filter(|m| {\n-        match m.inner { clean::TyMethodItem(_) => true, _ => false }\n-    }).collect::<Vec<_>>();\n-    let provided = t.items.iter().filter(|m| {\n-        match m.inner { clean::MethodItem(_) => true, _ => false }\n-    }).collect::<Vec<_>>();\n+    let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n+    let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n+    let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n+    let provided = t.items.iter().filter(|m| m.is_method()).collect::<Vec<_>>();\n \n     if t.items.is_empty() {\n         try!(write!(w, \"{{ }}\"));\n@@ -2600,7 +2588,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n         try!(write!(fmt, \"</p>\"));\n \n         // sidebar refers to the enclosing module, not this module\n-        let relpath = if shortty(it) == ItemType::Module { \"../\" } else { \"\" };\n+        let relpath = if it.is_mod() { \"../\" } else { \"\" };\n         try!(write!(fmt,\n                     \"<script>window.sidebarCurrent = {{\\\n                         name: '{name}', \\"}]}