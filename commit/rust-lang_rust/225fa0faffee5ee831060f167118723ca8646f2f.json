{"sha": "225fa0faffee5ee831060f167118723ca8646f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNWZhMGZhZmZlZTVlZTgzMTA2MGYxNjcxMTg3MjNjYTg2NDZmMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-13T13:50:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-13T22:22:45Z"}, "message": "dump outputs, diff on UI test failure", "tree": {"sha": "a1f33a503a8577ce4ba01aa429cfd45a9e74b970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f33a503a8577ce4ba01aa429cfd45a9e74b970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225fa0faffee5ee831060f167118723ca8646f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225fa0faffee5ee831060f167118723ca8646f2f", "html_url": "https://github.com/rust-lang/rust/commit/225fa0faffee5ee831060f167118723ca8646f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225fa0faffee5ee831060f167118723ca8646f2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6", "html_url": "https://github.com/rust-lang/rust/commit/cb112dc8cfe105b9eec2a3e1b59dd66eca386ee6"}], "stats": {"total": 112, "additions": 98, "deletions": 14}, "files": [{"sha": "cc687b532047e616ac3adc874afb676b3b1006f3", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=225fa0faffee5ee831060f167118723ca8646f2f", "patch": "@@ -50,6 +50,7 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n mod raise_fd_limit;\n+mod uidiff;\n \n fn main() {\n     #[cfg(cargobuild)]"}, {"sha": "d97e96da16d4c598cbe3f76fc4a0cb266ac38d0c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=225fa0faffee5ee831060f167118723ca8646f2f", "patch": "@@ -18,6 +18,7 @@ use header::TestProps;\n use header;\n use procsrv;\n use test::TestPaths;\n+use uidiff;\n use util::logv;\n \n use std::env;\n@@ -2115,8 +2116,8 @@ actual:\\n\\\n         let normalized_stderr = self.normalize_output(&proc_res.stderr);\n \n         let mut errors = 0;\n-        errors += self.compare_output(\"stdout\", normalized_stdout.as_bytes(), &expected_stdout);\n-        errors += self.compare_output(\"stderr\", normalized_stderr.as_bytes(), &expected_stderr);\n+        errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n+        errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n \n         if errors > 0 {\n             println!(\"To update references, run this command from build directory:\");\n@@ -2127,15 +2128,18 @@ actual:\\n\\\n                      self.config.src_base.display(),\n                      self.config.build_base.display(),\n                      relative_path_to_file.display());\n-            self.fatal(&format!(\"{} errors occurred comparing output.\", errors));\n+            self.fatal_proc_rec(&format!(\"{} errors occurred comparing output.\", errors),\n+                                &proc_res);\n         }\n     }\n \n     fn normalize_output(&self, output: &str) -> String {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         let parent_dir_str = parent_dir.display().to_string();\n         output.replace(&parent_dir_str, \"$DIR\")\n-              .replace(\"\\\\\", \"/\") // windows, you know.\n+              .replace(\"\\\\\", \"/\") // normalize for paths on windows\n+              .replace(\"\\r\\n\", \"\\n\") // normalize for linebreaks on windows\n+              .replace(\"\\t\", \"\\\\t\") // makes tabs visible\n     }\n \n     fn expected_output_path(&self, kind: &str) -> PathBuf {\n@@ -2146,31 +2150,34 @@ actual:\\n\\\n         self.testpaths.file.with_extension(extension)\n     }\n \n-    fn load_expected_output(&self, path: &Path) -> Vec<u8> {\n+    fn load_expected_output(&self, path: &Path) -> String {\n         if !path.exists() {\n-            return vec![];\n+            return String::new();\n         }\n \n-        let mut result = Vec::new();\n-        match File::open(path).and_then(|mut f| f.read_to_end(&mut result)) {\n+        let mut result = String::new();\n+        match File::open(path).and_then(|mut f| f.read_to_string(&mut result)) {\n             Ok(_) => result,\n             Err(e) => {\n                 self.fatal(&format!(\"failed to load expected output from `{}`: {}\", path.display(), e))\n             }\n         }\n     }\n \n-    fn compare_output(&self, kind: &str, actual: &[u8], expected: &[u8]) -> usize {\n-        if self.config.verbose {\n-            println!(\"normalized {}:\\n{}\\n\", kind, str::from_utf8(actual).unwrap_or(\"not utf8\"));\n-            println!(\"expected {}:\\n{}\\n\", kind, str::from_utf8(expected).unwrap_or(\"not utf8\"));\n-        }\n+    fn compare_output(&self, kind: &str, actual: &str, expected: &str) -> usize {\n         if actual == expected {\n             return 0;\n         }\n \n+        println!(\"normalized {}:\\n{}\\n\", kind, actual);\n+        println!(\"expected {}:\\n{}\\n\", kind, expected);\n+        println!(\"diff of {}:\\n\", kind);\n+        for line in uidiff::diff_lines(actual, expected) {\n+            println!(\"{}\", line);\n+        }\n+\n         let output_file = self.output_base_name().with_extension(kind);\n-        match File::create(&output_file).and_then(|mut f| f.write_all(actual)) {\n+        match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => { }\n             Err(e) => {\n                 self.fatal(&format!(\"failed to write {} to `{}`: {}\","}, {"sha": "66573393971c4c6692ce2549017f28e7680b19db", "filename": "src/tools/compiletest/src/uidiff.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fuidiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225fa0faffee5ee831060f167118723ca8646f2f/src%2Ftools%2Fcompiletest%2Fsrc%2Fuidiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fuidiff.rs?ref=225fa0faffee5ee831060f167118723ca8646f2f", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Code for checking whether the output of the compiler matches what is\n+//! expected.\n+\n+pub fn diff_lines(actual: &str, expected: &str) -> Vec<String> {\n+    // mega simplistic diff algorithm that just prints the things added/removed\n+    zip_all(actual.lines(), expected.lines()).enumerate().filter_map(|(i, (a,e))| {\n+        match (a, e) {\n+            (Some(a), Some(e)) => {\n+                if lines_match(e, a) {\n+                    None\n+                } else {\n+                    Some(format!(\"{:3} - |{}|\\n    + |{}|\\n\", i, e, a))\n+                }\n+            },\n+            (Some(a), None) => {\n+                Some(format!(\"{:3} -\\n    + |{}|\\n\", i, a))\n+            },\n+            (None, Some(e)) => {\n+                Some(format!(\"{:3} - |{}|\\n    +\\n\", i, e))\n+            },\n+            (None, None) => panic!(\"Cannot get here\")\n+        }\n+    }).collect()\n+}\n+\n+fn lines_match(expected: &str, mut actual: &str) -> bool {\n+    for (i, part) in expected.split(\"[..]\").enumerate() {\n+        match actual.find(part) {\n+            Some(j) => {\n+                if i == 0 && j != 0 {\n+                    return false\n+                }\n+                actual = &actual[j + part.len()..];\n+            }\n+            None => {\n+                return false\n+            }\n+        }\n+    }\n+    actual.is_empty() || expected.ends_with(\"[..]\")\n+}\n+\n+struct ZipAll<I1: Iterator, I2: Iterator> {\n+    first: I1,\n+    second: I2,\n+}\n+\n+impl<T, I1: Iterator<Item=T>, I2: Iterator<Item=T>> Iterator for ZipAll<I1, I2> {\n+    type Item = (Option<T>, Option<T>);\n+    fn next(&mut self) -> Option<(Option<T>, Option<T>)> {\n+        let first = self.first.next();\n+        let second = self.second.next();\n+\n+        match (first, second) {\n+            (None, None) => None,\n+            (a, b) => Some((a, b))\n+        }\n+    }\n+}\n+\n+fn zip_all<T, I1: Iterator<Item=T>, I2: Iterator<Item=T>>(a: I1, b: I2) -> ZipAll<I1, I2> {\n+    ZipAll {\n+        first: a,\n+        second: b,\n+    }\n+}"}]}