{"sha": "e7e96921c28ab8d29b6ee61053152eead822f09a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTk2OTIxYzI4YWI4ZDI5YjZlZTYxMDUzMTUyZWVhZDgyMmYwOWE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-12-01T21:48:55Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-12-01T21:48:55Z"}, "message": "remove some uses of try!", "tree": {"sha": "5bae3427908b3bbb1a68bddee9906f7eb4e3c60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bae3427908b3bbb1a68bddee9906f7eb4e3c60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e96921c28ab8d29b6ee61053152eead822f09a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e96921c28ab8d29b6ee61053152eead822f09a", "html_url": "https://github.com/rust-lang/rust/commit/e7e96921c28ab8d29b6ee61053152eead822f09a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e96921c28ab8d29b6ee61053152eead822f09a/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48ab693d1ce99f30c0cf9abdf45c209824fe825", "url": "https://api.github.com/repos/rust-lang/rust/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "html_url": "https://github.com/rust-lang/rust/commit/d48ab693d1ce99f30c0cf9abdf45c209824fe825"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "d5d6f3342c6c15ff8a5665ed949c8b75d8c320e0", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -914,13 +914,13 @@ fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()>\n     }\n     if let Ok(m) = fs::symlink_metadata(dst) {\n         if m.file_type().is_dir() {\n-            try!(fs::remove_dir_all(dst));\n+            fs::remove_dir_all(dst)?;\n         } else {\n             // handle directory junctions on windows by falling back to\n             // `remove_dir`.\n-            try!(fs::remove_file(dst).or_else(|_| {\n+            fs::remove_file(dst).or_else(|_| {\n                 fs::remove_dir(dst)\n-            }));\n+            })?;\n         }\n     }\n "}, {"sha": "be24ae0ce664815e96f42e65c00cd094e2bd6a47", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -203,11 +203,11 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n         // We're using low-level APIs to create the junction, and these are more\n         // picky about paths. For example, forward slashes cannot be used as a\n         // path separator, so we should try to canonicalize the path first.\n-        let target = try!(fs::canonicalize(target));\n+        let target = fs::canonicalize(target)?;\n \n-        try!(fs::create_dir(junction));\n+        fs::create_dir(junction)?;\n \n-        let path = try!(to_u16s(junction));\n+        let path = to_u16s(junction)?;\n \n         unsafe {\n             let h = CreateFileW(path.as_ptr(),"}, {"sha": "8b1855800c2fd25bddb976ac69698d3de3d9a507", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -278,14 +278,14 @@ macro_rules! debug_assert_ne {\n ///\n /// // The previous method of quick returning Errors\n /// fn write_to_file_using_try() -> Result<(), MyError> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n-///     try!(file.write_all(b\"This is a list of my best friends.\"));\n+///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n+///     r#try!(file.write_all(b\"This is a list of my best friends.\"));\n ///     Ok(())\n /// }\n ///\n /// // This is equivalent to:\n /// fn write_to_file_using_match() -> Result<(), MyError> {\n-///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     let mut file = r#try!(File::create(\"my_best_friends.txt\"));\n ///     match file.write_all(b\"This is a list of my best friends.\") {\n ///         Ok(v) => v,\n ///         Err(e) => return Err(From::from(e)),\n@@ -296,14 +296,14 @@ macro_rules! debug_assert_ne {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"?\")]\n-macro_rules! try {\n+macro_rules! r#try {\n     ($expr:expr) => (match $expr {\n         $crate::result::Result::Ok(val) => val,\n         $crate::result::Result::Err(err) => {\n             return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     });\n-    ($expr:expr,) => (try!($expr));\n+    ($expr:expr,) => (r#try!($expr));\n }\n \n /// Write formatted data into a buffer."}, {"sha": "75cdefaf49f0042f523a6d7bfdaa135f1f87169e", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -659,7 +659,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n     let mut session_directories = FxHashSet::default();\n     let mut lock_files = FxHashSet::default();\n \n-    for dir_entry in try!(crate_directory.read_dir()) {\n+    for dir_entry in crate_directory.read_dir()? {\n         let dir_entry = match dir_entry {\n             Ok(dir_entry) => dir_entry,\n             _ => {\n@@ -887,7 +887,7 @@ fn all_except_most_recent(deletion_candidates: Vec<(SystemTime, PathBuf, Option<\n /// into the '\\\\?\\' format, which supports much longer paths.\n fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n     if p.exists() {\n-        let canonicalized = try!(p.canonicalize());\n+        let canonicalized = p.canonicalize()?;\n         std_fs::remove_dir_all(canonicalized)\n     } else {\n         Ok(())\n@@ -896,7 +896,7 @@ fn safe_remove_dir_all(p: &Path) -> io::Result<()> {\n \n fn safe_remove_file(p: &Path) -> io::Result<()> {\n     if p.exists() {\n-        let canonicalized = try!(p.canonicalize());\n+        let canonicalized = p.canonicalize()?;\n         std_fs::remove_file(canonicalized)\n     } else {\n         Ok(())"}, {"sha": "7fe27e97d3d3bab0488e05d0a0a237b0f5980da2", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -128,7 +128,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                                 proj: &PlaceProjection<'tcx>)\n                                 -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n-        let base = try!(self.move_path_for(&proj.base));\n+        let base = self.move_path_for(&proj.base)?;\n         let mir = self.builder.mir;\n         let tcx = self.builder.tcx;\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);"}, {"sha": "1c654bf91925e89c8bd71ee9ec86c00207abde54", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -995,7 +995,7 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(linker, optional);\n-        try!(key!(lld_flavor, LldFlavor));\n+        key!(lld_flavor, LldFlavor)?;\n         key!(pre_link_args, link_args);\n         key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n@@ -1038,7 +1038,7 @@ impl Target {\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n         key!(needs_plt, bool);\n-        try!(key!(relro_level, RelroLevel));\n+        key!(relro_level, RelroLevel)?;\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n@@ -1048,7 +1048,7 @@ impl Target {\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         key!(atomic_cas, bool);\n-        try!(key!(panic_strategy, PanicStrategy));\n+        key!(panic_strategy, PanicStrategy)?;\n         key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);"}, {"sha": "7d054a347f4c31f5cc5fe051e0ecbf1b7ab20fdf", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -2065,7 +2065,7 @@ impl DirBuilder {\n             Err(e) => return Err(e),\n         }\n         match path.parent() {\n-            Some(p) => try!(self.create_dir_all(p)),\n+            Some(p) => self.create_dir_all(p)?,\n             None => return Err(io::Error::new(io::ErrorKind::Other, \"failed to create whole tree\")),\n         }\n         match self.inner.mkdir(path) {"}, {"sha": "c3a94698a0f3648093f614149b96b6a25482a0bc", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -48,7 +48,7 @@ pub fn get(handle: c::DWORD) -> io::Result<Output> {\n }\n \n fn write(handle: c::DWORD, data: &[u8]) -> io::Result<usize> {\n-    let handle = match try!(get(handle)) {\n+    let handle = match get(handle)? {\n         Output::Console(c) => c,\n         Output::Pipe(p) => {\n             let handle = Handle::new(p);\n@@ -99,7 +99,7 @@ impl Stdin {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        let handle = match try!(get(c::STD_INPUT_HANDLE)) {\n+        let handle = match get(c::STD_INPUT_HANDLE)? {\n             Output::Console(c) => c,\n             Output::Pipe(p) => {\n                 let handle = Handle::new(p);"}, {"sha": "48f15f5298bec6ce467a639d43b0bb3ce64a07d6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -3145,7 +3145,7 @@ impl<'a> Parser<'a> {\n                     RangeLimits::Closed\n                 };\n \n-                let r = try!(self.mk_range(Some(lhs), rhs, limits));\n+                let r = self.mk_range(Some(lhs), rhs, limits)?;\n                 lhs = self.mk_expr(lhs_span.to(rhs_span), r, ThinVec::new());\n                 break\n             }\n@@ -3353,9 +3353,7 @@ impl<'a> Parser<'a> {\n             RangeLimits::Closed\n         };\n \n-        let r = try!(self.mk_range(None,\n-                                   opt_end,\n-                                   limits));\n+        let r = self.mk_range(None, opt_end, limits)?;\n         Ok(self.mk_expr(lo.to(hi), r, attrs))\n     }\n "}, {"sha": "828e5d5988707b8a5400bd7715dd9070b58d4131", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -1525,7 +1525,7 @@ impl<'a> State<'a> {\n \n     pub fn print_defaultness(&mut self, defaultness: ast::Defaultness) -> io::Result<()> {\n         if let ast::Defaultness::Default = defaultness {\n-            try!(self.word_nbsp(\"default\"));\n+            self.word_nbsp(\"default\")?;\n         }\n         Ok(())\n     }"}, {"sha": "9c854019de6f85e9997d9d5db9d2847aa8342452", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e96921c28ab8d29b6ee61053152eead822f09a/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=e7e96921c28ab8d29b6ee61053152eead822f09a", "patch": "@@ -264,7 +264,7 @@ pub mod printf {\n             match *self {\n                 Num::Num(n) => write!(s, \"{}\", n),\n                 Num::Arg(n) => {\n-                    let n = try!(n.checked_sub(1).ok_or(::std::fmt::Error));\n+                    let n = n.checked_sub(1).ok_or(::std::fmt::Error)?;\n                     write!(s, \"{}$\", n)\n                 },\n                 Num::Next => write!(s, \"*\"),"}]}