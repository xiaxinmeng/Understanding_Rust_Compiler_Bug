{"sha": "0ef65780ca1c23ddb4d0cfb294704e51c4f418f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZjY1NzgwY2ExYzIzZGRiNGQwY2ZiMjk0NzA0ZTUxYzRmNDE4Zjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-14T00:39:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-14T00:39:35Z"}, "message": "rustc: Check patterns before arm blocks in alt expressions; this will be needed for binding type resolution", "tree": {"sha": "56b155b84c02d6c7fe0a5c2d353195099047d283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b155b84c02d6c7fe0a5c2d353195099047d283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7", "html_url": "https://github.com/rust-lang/rust/commit/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4", "html_url": "https://github.com/rust-lang/rust/commit/29e6d7a4adb1536d6f51b8d5fd7966113681bbc4"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "85ee74dac9a08b984528e50685e4fdc154621aab", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef65780ca1c23ddb4d0cfb294704e51c4f418f7/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0ef65780ca1c23ddb4d0cfb294704e51c4f418f7", "patch": "@@ -1581,6 +1581,10 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     check (fcx.ccx.item_types.contains_key(variant_id));\n                     t = fcx.ccx.item_types.get(variant_id);\n                 }\n+                case (ast.def_binding(?id)) {\n+                    check (fcx.locals.contains_key(id));\n+                    t = fcx.locals.get(id);\n+                }\n                 case (_) {\n                     // FIXME: handle other names.\n                     fcx.ccx.sess.unimpl(\"definition variant for: \"\n@@ -1674,30 +1678,48 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n         case (ast.expr_alt(?expr, ?arms, _)) {\n             auto expr_0 = check_expr(fcx, expr);\n+\n+            // Typecheck the patterns first, so that we get types for all the\n+            // bindings.\n             auto pattern_ty = expr_ty(expr_0);\n-            auto result_ty = next_ty_var(fcx);\n \n-            let vec[ast.arm] arms_0 = vec();\n+            let vec[@ast.pat] pats_0 = vec();\n             for (ast.arm arm in arms) {\n                 auto pat_0 = check_pat(fcx, arm.pat);\n                 pattern_ty = demand(fcx, pat_0.span, pattern_ty,\n                                     pat_ty(pat_0));\n+                pats_0 += vec(pat_0);\n+            }\n+\n+            let vec[@ast.pat] pats_1 = vec();\n+            for (@ast.pat pat_0 in pats_0) {\n+                pats_1 += vec(demand_pat(fcx, pattern_ty, pat_0));\n+            }\n+\n+            // Now typecheck the blocks.\n+            auto result_ty = next_ty_var(fcx);\n+\n+            let vec[ast.block] blocks_0 = vec();\n+            for (ast.arm arm in arms) {\n                 auto block_0 = check_block(fcx, arm.block);\n                 result_ty = demand(fcx, block_0.span, result_ty,\n                                    block_ty(block_0));\n-                arms_0 += vec(rec(pat=pat_0, block=block_0, index=arm.index));\n+                blocks_0 += vec(block_0);\n             }\n \n-            auto expr_1 = demand_expr(fcx, pattern_ty, expr);\n-\n             let vec[ast.arm] arms_1 = vec();\n-            for (ast.arm arm_0 in arms_0) {\n-                auto pat_1 = demand_pat(fcx, pattern_ty, arm_0.pat);\n-                auto block_1 = demand_block(fcx, result_ty, arm_0.block);\n-                auto arm_1 = rec(pat=pat_1, block=block_1, index=arm_0.index);\n+            auto i = 0u;\n+            for (ast.block block_0 in blocks_0) {\n+                auto block_1 = demand_block(fcx, result_ty, block_0);\n+                auto pat_1 = pats_1.(i);\n+                auto arm = arms.(i);\n+                auto arm_1 = rec(pat=pat_1, block=block_1, index=arm.index);\n                 arms_1 += vec(arm_1);\n+                i += 1u;\n             }\n \n+            auto expr_1 = demand_expr(fcx, pattern_ty, expr_0);\n+\n             auto ann = ast.ann_type(result_ty);\n             ret @fold.respan[ast.expr_](expr.span,\n                                         ast.expr_alt(expr_1, arms_1, ann));"}]}