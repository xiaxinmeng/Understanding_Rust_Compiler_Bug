{"sha": "976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "node_id": "C_kwDOAAsO6NoAKDk3NmFkZjNkNmRlNWViNzA4Y2Q5YjM0NmU3NzQ5ZWIyY2FjMDBlYTk", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-26T17:54:59Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-05-26T17:55:02Z"}, "message": "better `TyKind::Debug`", "tree": {"sha": "57a9851167d5f43022fc2dac75380fbd7d0c2216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a9851167d5f43022fc2dac75380fbd7d0c2216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "html_url": "https://github.com/rust-lang/rust/commit/976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917b0b6c70f078cb08bbb0080c9379e4487353c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/917b0b6c70f078cb08bbb0080c9379e4487353c3", "html_url": "https://github.com/rust-lang/rust/commit/917b0b6c70f078cb08bbb0080c9379e4487353c3"}], "stats": {"total": 254, "additions": 176, "deletions": 78}, "files": [{"sha": "0cde46ae4c2abbe1b076527c642e4a2ba4255e25", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -115,6 +115,16 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type FreeRegion = ty::FreeRegion;\n     type RegionVid = ty::RegionVid;\n     type PlaceholderRegion = ty::PlaceholderRegion;\n+\n+    fn ty_and_mut_to_parts(\n+        TypeAndMut { ty, mutbl }: TypeAndMut<'tcx>,\n+    ) -> (Self::Ty, Self::Mutability) {\n+        (ty, mutbl)\n+    }\n+\n+    fn mutability_is_mut(mutbl: Self::Mutability) -> bool {\n+        mutbl.is_mut()\n+    }\n }\n \n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;"}, {"sha": "025432fcaa80297c3c35a5a94ccb1991b9c72272", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -1496,7 +1496,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n /// identified by both a universe, as well as a name residing within that universe. Distinct bound\n /// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n #[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,"}, {"sha": "1c216960d118e7b62d36378c4701cdd29bfb7ff9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 19, "deletions": 43, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -685,29 +685,30 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n-                let verbose = self.should_print_verbose();\n+                if self.should_print_verbose() {\n+                    p!(write(\"{:?}\", ty.kind()));\n+                    return Ok(self);\n+                }\n+\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n                     } else {\n-                        if verbose {\n-                            p!(write(\"{:?}\", infer_ty))\n-                        } else {\n-                            p!(write(\"{}\", infer_ty))\n-                        }\n+                        p!(write(\"{}\", infer_ty))\n                     }\n                 } else {\n-                    if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n+                    p!(write(\"{}\", infer_ty))\n                 }\n             }\n             ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n+                ty::BoundTyKind::Anon => {\n+                    rustc_type_ir::debug_bound_var(&mut self, debruijn, bound_ty.var)?\n+                }\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n-                    true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n-                    true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n-                    false => p!(write(\"{}\", s)),\n+                    true => p!(write(\"{:?}\", ty.kind())),\n+                    false => p!(write(\"{s}\")),\n                 },\n             },\n             ty::Adt(def, substs) => {\n@@ -740,10 +741,11 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n-                ty::BoundTyKind::Anon => {\n-                    debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound.var)?;\n-                }\n-                ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n+                ty::BoundTyKind::Anon => p!(write(\"{placeholder:?}\")),\n+                ty::BoundTyKind::Param(_, name) => match self.should_print_verbose() {\n+                    true => p!(write(\"{:?}\", ty.kind())),\n+                    false => p!(write(\"{name}\")),\n+                },\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n@@ -1372,11 +1374,9 @@ pub trait PrettyPrinter<'tcx>:\n             }\n \n             ty::ConstKind::Bound(debruijn, bound_var) => {\n-                debug_bound_var(&mut self, debruijn, bound_var)?\n+                rustc_type_ir::debug_bound_var(&mut self, debruijn, bound_var)?\n             }\n-            ty::ConstKind::Placeholder(placeholder) => {\n-                debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound)?;\n-            },\n+            ty::ConstKind::Placeholder(placeholder) => p!(write(\"{placeholder:?}\")),\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n             ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n@@ -3065,27 +3065,3 @@ pub struct OpaqueFnEntry<'tcx> {\n     fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     return_ty: Option<ty::Binder<'tcx, Term<'tcx>>>,\n }\n-\n-pub fn debug_bound_var<T: std::fmt::Write>(\n-    fmt: &mut T,\n-    debruijn: ty::DebruijnIndex,\n-    var: ty::BoundVar,\n-) -> Result<(), std::fmt::Error> {\n-    if debruijn == ty::INNERMOST {\n-        write!(fmt, \"^{}\", var.index())\n-    } else {\n-        write!(fmt, \"^{}_{}\", debruijn.index(), var.index())\n-    }\n-}\n-\n-pub fn debug_placeholder_var<T: std::fmt::Write>(\n-    fmt: &mut T,\n-    universe: ty::UniverseIndex,\n-    bound: ty::BoundVar,\n-) -> Result<(), std::fmt::Error> {\n-    if universe == ty::UniverseIndex::ROOT {\n-        write!(fmt, \"!{}\", bound.index())\n-    } else {\n-        write!(fmt, \"!{}_{}\", universe.index(), bound.index())\n-    }\n-}"}, {"sha": "a965450d27d43830b31538461b174afc3e8b46f2", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -88,7 +88,35 @@ impl fmt::Debug for ty::FreeRegion {\n \n impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"({:?}; c_variadic: {})->{:?}\", self.inputs(), self.c_variadic, self.output())\n+        let ty::FnSig { inputs_and_output: _, c_variadic, unsafety, abi } = self;\n+\n+        write!(f, \"{}\", unsafety.prefix_str())?;\n+        match abi {\n+            rustc_target::spec::abi::Abi::Rust => (),\n+            abi => write!(f, \"extern \\\"{abi:?}\\\" \")?,\n+        };\n+\n+        write!(f, \"fn(\")?;\n+        let inputs = self.inputs();\n+        match inputs.len() {\n+            0 if *c_variadic => write!(f, \"...)\")?,\n+            0 => write!(f, \")\")?,\n+            _ => {\n+                for ty in &self.inputs()[0..(self.inputs().len() - 1)] {\n+                    write!(f, \"{ty:?}, \")?;\n+                }\n+                write!(f, \"{:?}\", self.inputs().last().unwrap())?;\n+                if *c_variadic {\n+                    write!(f, \"...\")?;\n+                }\n+                write!(f, \")\")?;\n+            }\n+        }\n+\n+        match self.output().kind() {\n+            ty::Tuple(list) if list.is_empty() => Ok(()),\n+            _ => write!(f, \" -> {:?}\", self.output()),\n+        }\n     }\n }\n \n@@ -216,20 +244,37 @@ impl<'tcx> fmt::Debug for ty::ConstKind<'tcx> {\n         match self {\n             Param(param) => write!(f, \"{param:?}\"),\n             Infer(var) => write!(f, \"{var:?}\"),\n-            Bound(debruijn, var) => ty::print::debug_bound_var(f, *debruijn, *var),\n-            Placeholder(placeholder) => {\n-                ty::print::debug_placeholder_var(f, placeholder.universe, placeholder.bound)\n-            }\n+            Bound(debruijn, var) => rustc_type_ir::debug_bound_var(f, *debruijn, *var),\n+            Placeholder(placeholder) => write!(f, \"{placeholder:?}\"),\n             Unevaluated(uv) => {\n                 f.debug_tuple(\"Unevaluated\").field(&uv.substs).field(&uv.def).finish()\n             }\n             Value(valtree) => write!(f, \"{valtree:?}\"),\n-            Error(_) => write!(f, \"[const error]\"),\n+            Error(_) => write!(f, \"{{const error}}\"),\n             Expr(expr) => write!(f, \"{expr:?}\"),\n         }\n     }\n }\n \n+impl fmt::Debug for ty::BoundTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.kind {\n+            ty::BoundTyKind::Anon => write!(f, \"{:?}\", self.var),\n+            ty::BoundTyKind::Param(_, sym) => write!(f, \"{sym:?}\"),\n+        }\n+    }\n+}\n+\n+impl<T: fmt::Debug> fmt::Debug for ty::Placeholder<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.universe == ty::UniverseIndex::ROOT {\n+            write!(f, \"!{:?}\", self.bound)\n+        } else {\n+            write!(f, \"!{}_{:?}\", self.universe.index(), self.bound)\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Atomic structs\n //\n@@ -294,6 +339,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AliasRelationDirection,\n     crate::ty::Placeholder<crate::ty::BoundRegion>,\n     crate::ty::Placeholder<crate::ty::BoundTy>,\n+    crate::ty::Placeholder<ty::BoundVar>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,\n@@ -310,7 +356,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     interpret::Scalar,\n     rustc_target::abi::Size,\n     ty::BoundVar,\n-    ty::Placeholder<ty::BoundVar>,\n }\n \n TrivialTypeTraversalAndLiftImpls! {"}, {"sha": "0b722d9368bc49227a21329614d31e515092fb16", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -1511,10 +1511,11 @@ impl Atom for RegionVid {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"{}\"]\n     pub struct BoundVar {}\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,"}, {"sha": "ae16fbb162e5c01f83fb69fb8162805a40330204", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -52,7 +52,7 @@ pub trait Interner: Sized {\n     type PolyFnSig: Clone + Debug + Hash + Ord;\n     type ListBinderExistentialPredicate: Clone + Debug + Hash + Ord;\n     type BinderListTy: Clone + Debug + Hash + Ord;\n-    type ListTy: Clone + Debug + Hash + Ord;\n+    type ListTy: Clone + Debug + Hash + Ord + IntoIterator<Item = Self::Ty>;\n     type AliasTy: Clone + Debug + Hash + Ord;\n     type ParamTy: Clone + Debug + Hash + Ord;\n     type BoundTy: Clone + Debug + Hash + Ord;\n@@ -67,6 +67,9 @@ pub trait Interner: Sized {\n     type FreeRegion: Clone + Debug + Hash + Ord;\n     type RegionVid: Clone + Debug + Hash + Ord;\n     type PlaceholderRegion: Clone + Debug + Hash + Ord;\n+\n+    fn ty_and_mut_to_parts(ty_and_mut: Self::TypeAndMut) -> (Self::Ty, Self::Mutability);\n+    fn mutability_is_mut(mutbl: Self::Mutability) -> bool;\n }\n \n /// Imagine you have a function `F: FnOnce(&[T]) -> R`, plus an iterator `iter`\n@@ -390,7 +393,19 @@ impl DebruijnIndex {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+pub fn debug_bound_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    debruijn: DebruijnIndex,\n+    var: impl std::fmt::Debug,\n+) -> Result<(), std::fmt::Error> {\n+    if debruijn == INNERMOST {\n+        write!(fmt, \"^{:?}\", var)\n+    } else {\n+        write!(fmt, \"^{}_{:?}\", debruijn.index(), var)\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum IntTy {\n     Isize,\n@@ -448,7 +463,7 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum UintTy {\n     Usize,\n@@ -506,7 +521,7 @@ impl UintTy {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum FloatTy {\n     F32,"}, {"sha": "553d7f31b2d19e6e8cdf79b2213f923347da3582", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -4,11 +4,12 @@\n \n use crate::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::visit::{TypeVisitable, TypeVisitor};\n-use crate::Interner;\n+use crate::{FloatTy, IntTy, Interner, UintTy};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_data_structures::sync::Lrc;\n use rustc_index::{Idx, IndexVec};\n \n+use core::fmt;\n use std::ops::ControlFlow;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -163,3 +164,21 @@ impl<I: Interner, T: TypeVisitable<I>, Ix: Idx> TypeVisitable<I> for IndexVec<Ix\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n+\n+impl fmt::Debug for IntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}\n+\n+impl fmt::Debug for UintTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}\n+\n+impl fmt::Debug for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}"}, {"sha": "fa18f921ee4ba5a98083522fc935c545cd7a4e15", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -294,7 +294,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Str => Str,\n             Array(t, c) => Array(t.clone(), c.clone()),\n             Slice(t) => Slice(t.clone()),\n-            RawPtr(t) => RawPtr(t.clone()),\n+            RawPtr(p) => RawPtr(p.clone()),\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n@@ -499,33 +499,65 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n impl<I: Interner> fmt::Debug for TyKind<I> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Bool => f.write_str(\"Bool\"),\n-            Char => f.write_str(\"Char\"),\n-            Int(i) => f.debug_tuple_field1_finish(\"Int\", i),\n-            Uint(u) => f.debug_tuple_field1_finish(\"Uint\", u),\n-            Float(float) => f.debug_tuple_field1_finish(\"Float\", float),\n+            Bool => write!(f, \"bool\"),\n+            Char => write!(f, \"char\"),\n+            Int(i) => write!(f, \"{i:?}\"),\n+            Uint(u) => write!(f, \"{u:?}\"),\n+            Float(float) => write!(f, \"{float:?}\"),\n             Adt(d, s) => f.debug_tuple_field2_finish(\"Adt\", d, s),\n             Foreign(d) => f.debug_tuple_field1_finish(\"Foreign\", d),\n-            Str => f.write_str(\"Str\"),\n-            Array(t, c) => f.debug_tuple_field2_finish(\"Array\", t, c),\n-            Slice(t) => f.debug_tuple_field1_finish(\"Slice\", t),\n-            RawPtr(t) => f.debug_tuple_field1_finish(\"RawPtr\", t),\n-            Ref(r, t, m) => f.debug_tuple_field3_finish(\"Ref\", r, t, m),\n+            Str => write!(f, \"str\"),\n+            Array(t, c) => write!(f, \"[{t:?}; {c:?}]\"),\n+            Slice(t) => write!(f, \"[{t:?}]\"),\n+            RawPtr(p) => {\n+                let (ty, mutbl) = I::ty_and_mut_to_parts(p.clone());\n+                match I::mutability_is_mut(mutbl) {\n+                    true => write!(f, \"*mut \"),\n+                    false => write!(f, \"*const \"),\n+                }?;\n+                write!(f, \"{ty:?}\")\n+            }\n+            Ref(r, t, m) => match I::mutability_is_mut(m.clone()) {\n+                true => write!(f, \"&{r:?} mut {t:?}\"),\n+                false => write!(f, \"&{r:?} {t:?}\"),\n+            },\n             FnDef(d, s) => f.debug_tuple_field2_finish(\"FnDef\", d, s),\n-            FnPtr(s) => f.debug_tuple_field1_finish(\"FnPtr\", s),\n-            Dynamic(p, r, repr) => f.debug_tuple_field3_finish(\"Dynamic\", p, r, repr),\n+            FnPtr(s) => write!(f, \"{s:?}\"),\n+            Dynamic(p, r, repr) => match repr {\n+                DynKind::Dyn => write!(f, \"dyn {p:?} + {r:?}\"),\n+                DynKind::DynStar => write!(f, \"dyn* {p:?} + {r:?}\"),\n+            },\n             Closure(d, s) => f.debug_tuple_field2_finish(\"Closure\", d, s),\n             Generator(d, s, m) => f.debug_tuple_field3_finish(\"Generator\", d, s, m),\n             GeneratorWitness(g) => f.debug_tuple_field1_finish(\"GeneratorWitness\", g),\n             GeneratorWitnessMIR(d, s) => f.debug_tuple_field2_finish(\"GeneratorWitnessMIR\", d, s),\n-            Never => f.write_str(\"Never\"),\n-            Tuple(t) => f.debug_tuple_field1_finish(\"Tuple\", t),\n+            Never => write!(f, \"!\"),\n+            Tuple(t) => {\n+                let mut iter = t.clone().into_iter();\n+\n+                write!(f, \"(\")?;\n+\n+                match iter.next() {\n+                    None => return write!(f, \")\"),\n+                    Some(ty) => write!(f, \"{ty:?}\")?,\n+                };\n+\n+                match iter.next() {\n+                    None => return write!(f, \",)\"),\n+                    Some(ty) => write!(f, \"{ty:?})\")?,\n+                }\n+\n+                for ty in iter {\n+                    write!(f, \", {ty:?}\")?;\n+                }\n+                write!(f, \")\")\n+            }\n             Alias(i, a) => f.debug_tuple_field2_finish(\"Alias\", i, a),\n-            Param(p) => f.debug_tuple_field1_finish(\"Param\", p),\n-            Bound(d, b) => f.debug_tuple_field2_finish(\"Bound\", d, b),\n-            Placeholder(p) => f.debug_tuple_field1_finish(\"Placeholder\", p),\n-            Infer(t) => f.debug_tuple_field1_finish(\"Infer\", t),\n-            TyKind::Error(e) => f.debug_tuple_field1_finish(\"Error\", e),\n+            Param(p) => write!(f, \"{p:?}\"),\n+            Bound(d, b) => crate::debug_bound_var(f, *d, b),\n+            Placeholder(p) => write!(f, \"{p:?}\"),\n+            Infer(t) => write!(f, \"{t:?}\"),\n+            TyKind::Error(_) => write!(f, \"{{type error}}\"),\n         }\n     }\n }"}, {"sha": "b0aa44b56aa95906d3f6aa918440650a5a3c0f70", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/976adf3d6de5eb708cd9b346e7749eb2cac00ea9/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=976adf3d6de5eb708cd9b346e7749eb2cac00ea9", "patch": "@@ -1,7 +1,7 @@\n DefId(0:3 ~ thir_flat[7b97]::main):\n Thir {\n     body_type: Fn(\n-        ([]; c_variadic: false)->(),\n+        fn(),\n     ),\n     arms: [],\n     blocks: ["}]}