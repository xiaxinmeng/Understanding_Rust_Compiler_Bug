{"sha": "423a712a16233277e22fec707d9aca8a0a83aa2d", "node_id": "C_kwDOAAsO6NoAKDQyM2E3MTJhMTYyMzMyNzdlMjJmZWM3MDdkOWFjYThhMGE4M2FhMmQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T18:38:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T21:01:19Z"}, "message": "Fix lints.", "tree": {"sha": "2ab4c5dd1f1d494d3867e2628114a73ba3275b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ab4c5dd1f1d494d3867e2628114a73ba3275b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423a712a16233277e22fec707d9aca8a0a83aa2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423a712a16233277e22fec707d9aca8a0a83aa2d", "html_url": "https://github.com/rust-lang/rust/commit/423a712a16233277e22fec707d9aca8a0a83aa2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423a712a16233277e22fec707d9aca8a0a83aa2d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daccecc0ecc344c43413fd499026bf6c6248bebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/daccecc0ecc344c43413fd499026bf6c6248bebc", "html_url": "https://github.com/rust-lang/rust/commit/daccecc0ecc344c43413fd499026bf6c6248bebc"}], "stats": {"total": 175, "additions": 79, "deletions": 96}, "files": [{"sha": "68658e2616e9b76c697e1166374a1ebbbc09f05f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -486,9 +486,6 @@ declare_lint! {\n pub struct MissingDoc {\n     /// Stack of whether `#[doc(hidden)]` is set at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n-\n-    /// Private traits or trait items that leaked through. Don't check their methods.\n-    private_traits: FxHashSet<hir::HirId>,\n }\n \n impl_lint_pass!(MissingDoc => [MISSING_DOCS]);\n@@ -519,7 +516,7 @@ fn has_doc(attr: &ast::Attribute) -> bool {\n \n impl MissingDoc {\n     pub fn new() -> MissingDoc {\n-        MissingDoc { doc_hidden_stack: vec![false], private_traits: FxHashSet::default() }\n+        MissingDoc { doc_hidden_stack: vec![false] }\n     }\n \n     fn doc_hidden(&self) -> bool {\n@@ -597,36 +594,16 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         match it.kind {\n-            hir::ItemKind::Trait(.., trait_item_refs) => {\n+            hir::ItemKind::Trait(..) => {\n                 // Issue #11592: traits are always considered exported, even when private.\n                 if cx.tcx.visibility(it.def_id)\n                     == ty::Visibility::Restricted(\n                         cx.tcx.parent_module_from_def_id(it.def_id).to_def_id(),\n                     )\n                 {\n-                    self.private_traits.insert(it.hir_id());\n-                    for trait_item_ref in trait_item_refs {\n-                        self.private_traits.insert(trait_item_ref.id.hir_id());\n-                    }\n                     return;\n                 }\n             }\n-            hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), items, .. }) => {\n-                // If the trait is private, add the impl items to `private_traits` so they don't get\n-                // reported for missing docs.\n-                let real_trait = trait_ref.path.res.def_id();\n-                let Some(def_id) = real_trait.as_local() else { return };\n-                if cx.tcx.visibility(def_id)\n-                    == ty::Visibility::Restricted(\n-                        cx.tcx.parent_module_from_def_id(it.def_id).to_def_id(),\n-                    )\n-                {\n-                    for impl_item_ref in items {\n-                        self.private_traits.insert(impl_item_ref.id.hir_id());\n-                    }\n-                }\n-                return;\n-            }\n             hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Fn(..)\n             | hir::ItemKind::Macro(..)\n@@ -646,10 +623,6 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_>, trait_item: &hir::TraitItem<'_>) {\n-        if self.private_traits.contains(&trait_item.hir_id()) {\n-            return;\n-        }\n-\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, trait_item.def_id, trait_item.span, article, desc);\n@@ -1389,15 +1362,16 @@ impl UnreachablePub {\n         cx: &LateContext<'_>,\n         what: &str,\n         def_id: LocalDefId,\n+        span: Span,\n         vis_span: Span,\n         exportable: bool,\n     ) {\n         let mut applicability = Applicability::MachineApplicable;\n-        if !cx.access_levels.is_reachable(def_id) {\n+        if cx.tcx.visibility(def_id).is_public() && !cx.access_levels.is_reachable(def_id) {\n             if vis_span.from_expansion() {\n                 applicability = Applicability::MaybeIncorrect;\n             }\n-            let def_span = cx.tcx.def_span(def_id);\n+            let def_span = cx.tcx.sess.source_map().guess_head_span(span);\n             cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {\n                 let mut err = lint.build(&format!(\"unreachable `pub` {}\", what));\n                 let replacement = if cx.tcx.features().crate_visibility_modifier {\n@@ -1424,27 +1398,40 @@ impl UnreachablePub {\n \n impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-        if cx.tcx.visibility(item.def_id).is_public() {\n-            self.perform_lint(cx, \"item\", item.def_id, item.vis_span, true);\n+        // Do not warn for fake `use` statements.\n+        if let hir::ItemKind::Use(_, hir::UseKind::ListStem) = &item.kind {\n+            return;\n         }\n+        self.perform_lint(cx, \"item\", item.def_id, item.span, item.vis_span, true);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'tcx>) {\n-        if cx.tcx.visibility(foreign_item.def_id).is_public() {\n-            self.perform_lint(cx, \"item\", foreign_item.def_id, foreign_item.vis_span, true);\n-        }\n+        self.perform_lint(\n+            cx,\n+            \"item\",\n+            foreign_item.def_id,\n+            foreign_item.span,\n+            foreign_item.vis_span,\n+            true,\n+        );\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         let def_id = cx.tcx.hir().local_def_id(field.hir_id);\n-        if cx.tcx.visibility(def_id).is_public() {\n-            self.perform_lint(cx, \"field\", def_id, field.vis_span, false);\n-        }\n+        self.perform_lint(cx, \"field\", def_id, field.span, field.vis_span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {\n-        if cx.tcx.visibility(impl_item.def_id).is_public() {\n-            self.perform_lint(cx, \"item\", impl_item.def_id, impl_item.vis_span, false);\n+        // Only lint inherent impl items.\n+        if cx.tcx.associated_item(impl_item.def_id).trait_item_def_id.is_none() {\n+            self.perform_lint(\n+                cx,\n+                \"item\",\n+                impl_item.def_id,\n+                impl_item.span,\n+                impl_item.vis_span,\n+                false,\n+            );\n         }\n     }\n }"}, {"sha": "b661f6f9d729eaa31020189d6d53e01dfa971924", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -45,8 +45,6 @@ struct MarkSymbolVisitor<'tcx> {\n     live_symbols: FxHashSet<LocalDefId>,\n     repr_has_repr_c: bool,\n     in_pat: bool,\n-    inherited_pub_visibility: bool,\n-    pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n@@ -284,33 +282,23 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n \n         let had_repr_c = self.repr_has_repr_c;\n-        let had_inherited_pub_visibility = self.inherited_pub_visibility;\n-        let had_pub_visibility = self.pub_visibility;\n         self.repr_has_repr_c = false;\n-        self.inherited_pub_visibility = false;\n-        self.pub_visibility = false;\n         match node {\n-            Node::Item(item) => {\n-                self.pub_visibility = self.tcx.visibility(item.def_id).is_public();\n+            Node::Item(item) => match item.kind {\n+                hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n+                    let def = self.tcx.adt_def(item.def_id);\n+                    self.repr_has_repr_c = def.repr().c();\n \n-                match item.kind {\n-                    hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                        let def = self.tcx.adt_def(item.def_id);\n-                        self.repr_has_repr_c = def.repr().c();\n-\n-                        intravisit::walk_item(self, &item);\n-                    }\n-                    hir::ItemKind::Enum(..) => {\n-                        self.inherited_pub_visibility = self.pub_visibility;\n-\n-                        intravisit::walk_item(self, &item);\n-                    }\n-                    hir::ItemKind::ForeignMod { .. } => {}\n-                    _ => {\n-                        intravisit::walk_item(self, &item);\n-                    }\n+                    intravisit::walk_item(self, &item);\n                 }\n-            }\n+                hir::ItemKind::Enum(..) => {\n+                    intravisit::walk_item(self, &item);\n+                }\n+                hir::ItemKind::ForeignMod { .. } => {}\n+                _ => {\n+                    intravisit::walk_item(self, &item);\n+                }\n+            },\n             Node::TraitItem(trait_item) => {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n@@ -322,8 +310,6 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n             _ => {}\n         }\n-        self.pub_visibility = had_pub_visibility;\n-        self.inherited_pub_visibility = had_inherited_pub_visibility;\n         self.repr_has_repr_c = had_repr_c;\n     }\n \n@@ -356,19 +342,14 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     ) {\n         let tcx = self.tcx;\n         let has_repr_c = self.repr_has_repr_c;\n-        let inherited_pub_visibility = self.inherited_pub_visibility;\n-        let pub_visibility = self.pub_visibility;\n         let live_fields = def.fields().iter().filter_map(|f| {\n             let def_id = tcx.hir().local_def_id(f.hir_id);\n             if has_repr_c {\n                 return Some(def_id);\n             }\n-            if !pub_visibility {\n+            if !tcx.visibility(f.hir_id.owner).is_public() {\n                 return None;\n             }\n-            if inherited_pub_visibility {\n-                return Some(def_id);\n-            }\n             if tcx.visibility(def_id).is_public() { Some(def_id) } else { None }\n         });\n         self.live_symbols.extend(live_fields);\n@@ -612,8 +593,6 @@ fn live_symbols_and_ignored_derived_traits<'tcx>(\n         live_symbols: Default::default(),\n         repr_has_repr_c: false,\n         in_pat: false,\n-        inherited_pub_visibility: false,\n-        pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n         ignored_derived_traits: FxHashMap::default(),"}, {"sha": "27b42a8ac15212fd8f58ee42c887f1a6ebc930ee", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -1982,7 +1982,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n                 //   Visibility on them should have no effect, but to avoid the visibility\n                 //   query failing on some items, we provide it for opaque types as well.\n                 | Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),\n+                    kind: hir::ItemKind::Use(_, hir::UseKind::ListStem) | hir::ItemKind::OpaqueTy(..),\n                     ..\n                 }) => ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id()),\n                 // Visibilities of trait impl items are inherited from their traits"}, {"sha": "3cb38d94009e4299c31cc63537b18933d0d4de2f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -458,6 +458,14 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let mut source = module_path.pop().unwrap();\n                 let mut type_ns_only = false;\n \n+                self.r.visibilities.insert(self.r.local_def_id(id), vis);\n+                if id1 != ast::DUMMY_NODE_ID {\n+                    self.r.visibilities.insert(self.r.local_def_id(id1), vis);\n+                }\n+                if id2 != ast::DUMMY_NODE_ID {\n+                    self.r.visibilities.insert(self.r.local_def_id(id2), vis);\n+                }\n+\n                 if nested {\n                     // Correctly handle `self`\n                     if source.ident.name == kw::SelfLower {\n@@ -564,7 +572,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     additional_ids: (id1, id2),\n                 };\n \n-                self.r.visibilities.insert(self.r.local_def_id(id), vis);\n                 self.add_import(\n                     module_path,\n                     kind,"}, {"sha": "4dc951985ae4d14a398d223b9ade6a4eb71f9bfb", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -26,6 +26,11 @@ mod private_mod {\n         pub fn count_neutrons(&self) -> usize { self.neutrons } //~ WARNING unreachable_pub\n         pub(crate) fn count_electrons(&self) -> usize { self.electrons }\n     }\n+    impl Clone for Hydrogen {\n+        fn clone(&self) -> Hydrogen {\n+            Hydrogen { neutrons: self.neutrons, electrons: self.electrons }\n+        }\n+    }\n \n     pub enum Helium {} //~ WARNING unreachable_pub\n     pub union Lithium { c1: usize, c2: u8 } //~ WARNING unreachable_pub"}, {"sha": "6c05a030138bc04bdd72ba4b85eccc720a7d3e1f", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -50,7 +50,7 @@ LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         help: consider restricting its visibility: `pub(crate)`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:30:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:35:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:31:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:36:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:32:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:37:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:33:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:38:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:34:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:39:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:35:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:40:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:36:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:41:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:39:47\n+  --> $DIR/unreachable_pub-pub_crate.rs:44:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = note: this warning originates in the macro `define_empty_struct_with_visibility` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:45:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:50:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "39e2b5961563087de4d246cdcf8234d19609002d", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -22,6 +22,11 @@ mod private_mod {\n         pub fn count_neutrons(&self) -> usize { self.neutrons } //~ WARNING unreachable_pub\n         crate fn count_electrons(&self) -> usize { self.electrons }\n     }\n+    impl Clone for Hydrogen {\n+        fn clone(&self) -> Hydrogen {\n+            Hydrogen { neutrons: self.neutrons, electrons: self.electrons }\n+        }\n+    }\n \n     pub enum Helium {} //~ WARNING unreachable_pub\n     pub union Lithium { c1: usize, c2: u8 } //~ WARNING unreachable_pub"}, {"sha": "e8e55be5a478007c9f5b22373203f9820daa20cc", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/423a712a16233277e22fec707d9aca8a0a83aa2d/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=423a712a16233277e22fec707d9aca8a0a83aa2d", "patch": "@@ -50,7 +50,7 @@ LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:26:5\n+  --> $DIR/unreachable_pub.rs:31:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:27:5\n+  --> $DIR/unreachable_pub.rs:32:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:28:5\n+  --> $DIR/unreachable_pub.rs:33:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:29:5\n+  --> $DIR/unreachable_pub.rs:34:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:30:5\n+  --> $DIR/unreachable_pub.rs:35:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:31:5\n+  --> $DIR/unreachable_pub.rs:36:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:32:5\n+  --> $DIR/unreachable_pub.rs:37:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:35:47\n+  --> $DIR/unreachable_pub.rs:40:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = note: this warning originates in the macro `define_empty_struct_with_visibility` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:41:9\n+  --> $DIR/unreachable_pub.rs:46:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}]}