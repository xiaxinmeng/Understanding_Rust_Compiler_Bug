{"sha": "654519d3c5cd0bdece35a3282bdb433bf945ee57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDUxOWQzYzVjZDBiZGVjZTM1YTMyODJiZGI0MzNiZjk0NWVlNTc=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T07:58:55Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T08:05:59Z"}, "message": "use PanicInfo and UnsupportedOpInfo", "tree": {"sha": "60e15e52b7915f0f54476937b2cdd3de000784a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60e15e52b7915f0f54476937b2cdd3de000784a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654519d3c5cd0bdece35a3282bdb433bf945ee57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654519d3c5cd0bdece35a3282bdb433bf945ee57", "html_url": "https://github.com/rust-lang/rust/commit/654519d3c5cd0bdece35a3282bdb433bf945ee57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654519d3c5cd0bdece35a3282bdb433bf945ee57/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9d0faff28cff0290d76c2cda175bb8a79b293b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9d0faff28cff0290d76c2cda175bb8a79b293b", "html_url": "https://github.com/rust-lang/rust/commit/8e9d0faff28cff0290d76c2cda175bb8a79b293b"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "5a464ddd383ceff86f8132306f984ddcd3b69716", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -237,7 +237,7 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum PanicMessage<O> {\n+pub enum PanicInfo<O> {\n     Panic {\n         msg: Symbol,\n         line: u32,\n@@ -257,14 +257,14 @@ pub enum PanicMessage<O> {\n }\n \n /// Type for MIR `Assert` terminator error messages.\n-pub type AssertMessage<'tcx> = PanicMessage<mir::Operand<'tcx>>;\n+pub type AssertMessage<'tcx> = PanicInfo<mir::Operand<'tcx>>;\n \n-impl<O> PanicMessage<O> {\n+impl<O> PanicInfo<O> {\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n     /// The caller is expected to handle `Panic` and `BoundsCheck` separately.\n     pub fn description(&self) -> &'static str {\n-        use PanicMessage::*;\n+        use PanicInfo::*;\n         match self {\n             Overflow(mir::BinOp::Add) =>\n                 \"attempt to add with overflow\",\n@@ -293,14 +293,14 @@ impl<O> PanicMessage<O> {\n             GeneratorResumedAfterPanic =>\n                 \"generator resumed after panicking\",\n             Panic { .. } | BoundsCheck { .. } =>\n-                bug!(\"Unexpected PanicMessage\"),\n+                bug!(\"Unexpected PanicInfo\"),\n         }\n     }\n }\n \n-impl<O: fmt::Debug> fmt::Debug for PanicMessage<O> {\n+impl<O: fmt::Debug> fmt::Debug for PanicInfo<O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use PanicMessage::*;\n+        use PanicInfo::*;\n         match self {\n             Panic { ref msg, line, col, ref file } =>\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n@@ -568,7 +568,7 @@ impl fmt::Debug for ResourceExhaustionInfo {\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InterpError<'tcx> {\n     /// The program panicked.\n-    Panic(PanicMessage<u64>),\n+    Panic(PanicInfo<u64>),\n     /// The program caused undefined behavior.\n     UndefinedBehaviour(UndefinedBehaviourInfo),\n     /// The program did something the interpreter does not support (some of these *might* be UB"}, {"sha": "4b09da87d314bfc68f8e3f40ccf1d15dfe6a8f9e", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -31,7 +31,7 @@ macro_rules! err_ub {\n macro_rules! err_panic {\n     ($($tt:tt)*) => {\n         Err($crate::mir::interpret::InterpError::Panic(\n-            $crate::mir::interpret::PanicMessage::$($tt)*\n+            $crate::mir::interpret::PanicInfo::$($tt)*\n         ).into())\n     };\n }\n@@ -52,7 +52,7 @@ mod pointer;\n \n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n-    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicMessage, UnsupportedInfo,\n+    FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicInfo, UnsupportedInfo,\n     InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviourInfo,\n };\n "}, {"sha": "1e2ec08301cf91f544aa4515dd818de05ce13ede", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n-use crate::mir::interpret::{ConstValue, PanicMessage, Scalar};\n+use crate::mir::interpret::{ConstValue, PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -3152,7 +3152,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             }\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                use PanicMessage::*;\n+                use PanicInfo::*;\n                 let msg = match msg {\n                     BoundsCheck { ref len, ref index } =>\n                         BoundsCheck {\n@@ -3200,7 +3200,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             }\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    use PanicMessage::*;\n+                    use PanicInfo::*;\n                     match msg {\n                         BoundsCheck { ref len, ref index } =>\n                             len.visit_with(visitor) || index.visit_with(visitor),"}, {"sha": "ee4ecb6762c96a674267956c295876663027d92b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -514,7 +514,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::interpret::PanicMessage::*;\n+                use crate::mir::interpret::PanicInfo::*;\n                 match msg {\n                     BoundsCheck { len, index } => {\n                         self.visit_operand(len, location);"}, {"sha": "006ebcbdec6727797112984932f2ebc0e8430d52", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -2,7 +2,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n-use rustc::mir::interpret::PanicMessage;\n+use rustc::mir::interpret::PanicInfo;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n use crate::base;\n@@ -368,7 +368,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let PanicMessage::OverflowNeg = *msg {\n+            if let PanicInfo::OverflowNeg = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -403,7 +403,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match msg {\n-            PanicMessage::BoundsCheck { ref len, ref index } => {\n+            PanicInfo::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n "}, {"sha": "2be39799b5273c23d65b8e4d39db44d5f5779b7f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -733,8 +733,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(loc, (cond, span), flow_state);\n-                use rustc::mir::interpret::PanicMessage;\n-                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::PanicInfo;\n+                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(loc, (len, span), flow_state);\n                     self.consume_operand(loc, (index, span), flow_state);\n                 }"}, {"sha": "631a81421131c334290d06af2ef8ddcb157f5b2e", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -207,8 +207,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(location, cond);\n-                use rustc::mir::interpret::PanicMessage;\n-                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n+                use rustc::mir::interpret::PanicInfo;\n+                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(location, len);\n                     self.consume_operand(location, index);\n                 }"}, {"sha": "f10d505fe89830ca6e46e74371268c6f3eca1d2e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -26,7 +26,7 @@ use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::mir::interpret::{ConstValue, PanicMessage};\n+use rustc::mir::interpret::{ConstValue, PanicInfo};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n use rustc::mir::*;\n@@ -1632,7 +1632,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let PanicMessage::BoundsCheck { ref len, ref index } = *msg {\n+                if let PanicInfo::BoundsCheck { ref len, ref index } = *msg {\n                     if len.ty(body, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "7005f274e0e7def29f39b88d373595e4b1751c67", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::{PanicMessage::BoundsCheck};\n+use rustc::mir::interpret::{PanicInfo::BoundsCheck};\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n "}, {"sha": "ec061e74535778d7865c0f2b18700f9ed73e0982", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::PanicMessage;\n+use rustc::mir::interpret::PanicInfo;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        PanicMessage::OverflowNeg,\n+                        PanicInfo::OverflowNeg,\n                         expr_span,\n                     );\n                 }\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = PanicMessage::Overflow(op);\n+            let err = PanicInfo::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -412,11 +412,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let zero_err = if op == BinOp::Div {\n-                    PanicMessage::DivisionByZero\n+                    PanicInfo::DivisionByZero\n                 } else {\n-                    PanicMessage::RemainderByZero\n+                    PanicInfo::RemainderByZero\n                 };\n-                let overflow_err = PanicMessage::Overflow(op);\n+                let overflow_err = PanicInfo::Overflow(op);\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);"}, {"sha": "9605395b84b177f5c2e3ced1200e8beefaf89f06", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n-    InterpResult, InterpError, Scalar, PanicMessage, UnsupportedInfo::*,\n+    InterpResult, InterpError, Scalar, PanicInfo, UnsupportedInfo::*,\n };\n \n use super::{\n@@ -250,7 +250,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic(PanicMessage::Panic { msg, file, line, col }).into());\n+            return Err(InterpError::Panic(PanicInfo::Panic { msg, file, line, col }).into());\n         } else if Some(def_id) == self.tcx.lang_items().begin_panic_fn() {\n             assert!(args.len() == 2);\n             // &'static str, &(&'static str, u32, u32)\n@@ -268,7 +268,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(InterpError::Panic(PanicMessage::Panic { msg, file, line, col }).into());\n+            return Err(InterpError::Panic(PanicInfo::Panic { msg, file, line, col }).into());\n         } else {\n             return Ok(false);\n         }"}, {"sha": "14b92f2b3d49d350420f21d615cedadef3fe3de9", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -136,7 +136,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     self.goto_block(Some(target))?;\n                 } else {\n                     // Compute error message\n-                    use rustc::mir::interpret::PanicMessage::*;\n+                    use rustc::mir::interpret::PanicInfo::*;\n                     return match msg {\n                         BoundsCheck { ref len, ref index } => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)"}, {"sha": "ec8a33f7a43fa0b96302f738da9952b619c657bc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -13,7 +13,7 @@ use rustc::mir::{\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n };\n-use rustc::mir::interpret::{Scalar, GlobalId, InterpResult, InterpError, PanicMessage};\n+use rustc::mir::interpret::{Scalar, GlobalId, InterpResult, InterpError, PanicInfo};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -526,7 +526,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = InterpError::Panic(PanicMessage::Overflow(op)).into();\n+                        let err = InterpError::Panic(PanicInfo::Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -763,12 +763,12 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             .as_local_hir_id(self.source.def_id())\n                             .expect(\"some part of a failing const eval must be local\");\n                         let msg = match msg {\n-                            PanicMessage::Overflow(_) |\n-                            PanicMessage::OverflowNeg |\n-                            PanicMessage::DivisionByZero |\n-                            PanicMessage::RemainderByZero =>\n+                            PanicInfo::Overflow(_) |\n+                            PanicInfo::OverflowNeg |\n+                            PanicInfo::DivisionByZero |\n+                            PanicInfo::RemainderByZero =>\n                                 msg.description().to_owned(),\n-                            PanicMessage::BoundsCheck { ref len, ref index } => {\n+                            PanicInfo::BoundsCheck { ref len, ref index } => {\n                                 let len = self\n                                     .eval_operand(len, source_info)\n                                     .expect(\"len must be const\");"}, {"sha": "94bb70e10aa53bda6d01b87dd69ef95704592f46", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654519d3c5cd0bdece35a3282bdb433bf945ee57/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=654519d3c5cd0bdece35a3282bdb433bf945ee57", "patch": "@@ -1016,7 +1016,7 @@ fn create_generator_resume_function<'tcx>(\n \n     let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n \n-    use rustc::mir::interpret::PanicMessage::{\n+    use rustc::mir::interpret::PanicInfo::{\n         GeneratorResumedAfterPanic,\n         GeneratorResumedAfterReturn,\n     };"}]}