{"sha": "797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2Q4ZWE0Nzg5YzY0YmIyMDg2OWZhN2ZiMGMxNWUyYzA5NDMyY2Y=", "commit": {"author": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2019-02-28T06:32:13Z"}, "committer": {"name": "Tim", "email": "t.diekmann.3dv@gmail.com", "date": "2019-02-28T06:32:13Z"}, "message": "Make `Unique::as_ptr`, `NonNull::dangling` and `NonNull::cast` const\n\nMake `Unique::as_ptr` const without feature attribute as it's unstable\nMake `NonNull::dangling` and `NonNull::cast` const with `feature = \"const_ptr_nonnull\"`", "tree": {"sha": "ff34a53df2421ef0eb7d617dba224eed0e09f28f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff34a53df2421ef0eb7d617dba224eed0e09f28f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "html_url": "https://github.com/rust-lang/rust/commit/797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/comments", "author": null, "committer": null, "parents": [{"sha": "7e001e5c6c7c090b41416a57d4be412ed3ccd937", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e001e5c6c7c090b41416a57d4be412ed3ccd937", "html_url": "https://github.com/rust-lang/rust/commit/7e001e5c6c7c090b41416a57d4be412ed3ccd937"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "3e1773ff9d25ccd37c86660f2ee5faefe6926350", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -2790,7 +2790,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    pub fn as_ptr(self) -> *mut T {\n+    pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n     }\n \n@@ -2903,7 +2903,8 @@ impl<T: Sized> NonNull<T> {\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub fn dangling() -> Self {\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_nonnull\"))]\n+    pub const fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n             NonNull::new_unchecked(ptr)\n@@ -2966,7 +2967,8 @@ impl<T: ?Sized> NonNull<T> {\n     /// Cast to a pointer of another type\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn cast<U>(self) -> NonNull<U> {\n+    #[cfg_attr(not(stage0), rustc_const_unstable(feature = \"const_ptr_nonnull\"))]\n+    pub const fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)\n         }"}, {"sha": "91624e92fbe753ad0801e589095e72f008ab8465", "filename": "src/test/run-pass/consts/const-ptr-nonnull.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-nonnull.rs?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(const_ptr_nonnull)]\n+\n+use std::ptr::NonNull;\n+\n+const DANGLING: NonNull<u32> = NonNull::dangling();\n+const CASTED: NonNull<u32> = NonNull::cast(NonNull::<i32>::dangling());\n+\n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n+pub fn main() {\n+    assert_eq!(DANGLING, ident(NonNull::dangling()));\n+    assert_eq!(CASTED, ident(NonNull::dangling()));\n+}"}, {"sha": "eb371ab184166491e039136ed2d4ae954be90c8d", "filename": "src/test/run-pass/consts/const-ptr-unique.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-ptr-unique.rs?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+#![feature(ptr_internals)]\n+\n+use std::ptr::Unique;\n+\n+const PTR: *mut u32 = Unique::empty().as_ptr();\n+\n+fn ident<T>(ident: T) -> T {\n+    ident\n+}\n+\n+pub fn main() {\n+    assert_eq!(PTR, ident(Unique::<u32>::empty().as_ptr()));\n+}"}, {"sha": "54e743aa32e232d4d421f9c85e6f819214277e80", "filename": "src/test/ui/consts/const-ptr-nonnull.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.rs?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,11 @@\n+use std::ptr::NonNull;\n+\n+fn main() {\n+    let x: &'static NonNull<u32> = &(NonNull::dangling());\n+    //~^ ERROR borrowed value does not live long enough\n+\n+    let mut i: i32 = 10;\n+    let non_null = NonNull::new(&mut i).unwrap();\n+    let x: &'static NonNull<u32> = &(non_null.cast());\n+    //~^ ERROR borrowed value does not live long enough\n+}"}, {"sha": "a9476dda6d3203308f97073d0f78413b04fa58eb", "filename": "src/test/ui/consts/const-ptr-nonnull.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-nonnull.stderr?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,25 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-nonnull.rs:4:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(NonNull::dangling());\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-nonnull.rs:9:37\n+   |\n+LL |     let x: &'static NonNull<u32> = &(non_null.cast());\n+   |                                     ^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "be44a24181606d30baf6d8fade61e3ad9f3c9d1c", "filename": "src/test/ui/consts/const-ptr-unique.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.rs?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,10 @@\n+#![feature(ptr_internals)]\n+\n+use std::ptr::Unique;\n+\n+fn main() {\n+    let mut i: u32 = 10;\n+    let unique = Unique::new(&mut i).unwrap();\n+    let x: &'static *mut u32 = &(unique.as_ptr());\n+    //~^ ERROR borrowed value does not live long enough\n+}"}, {"sha": "141465bf184d0ef7ce6e309a522d2690c448700b", "filename": "src/test/ui/consts/const-ptr-unique.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/797d8ea4789c64bb20869fa7fb0c15e2c09432cf/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique.stderr?ref=797d8ea4789c64bb20869fa7fb0c15e2c09432cf", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/const-ptr-unique.rs:8:33\n+   |\n+LL |     let x: &'static *mut u32 = &(unique.as_ptr());\n+   |                                 ^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR borrowed value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}