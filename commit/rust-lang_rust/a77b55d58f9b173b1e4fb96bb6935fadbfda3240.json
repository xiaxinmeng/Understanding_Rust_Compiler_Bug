{"sha": "a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2I1NWQ1OGY5YjE3M2IxZTRmYjk2YmI2OTM1ZmFkYmZkYTMyNDA=", "commit": {"author": {"name": "Justin LeFebvre", "email": "jstnlefebvre@gmail.com", "date": "2016-09-06T05:04:07Z"}, "committer": {"name": "Justin LeFebvre", "email": "jstnlefebvre@gmail.com", "date": "2016-09-07T00:39:58Z"}, "message": "remove the extraneous not_equal implementation for slices.", "tree": {"sha": "71a2899ae7c4abc87cfdf96dc0e562f37c5c5490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a2899ae7c4abc87cfdf96dc0e562f37c5c5490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "html_url": "https://github.com/rust-lang/rust/commit/a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77b55d58f9b173b1e4fb96bb6935fadbfda3240/comments", "author": {"login": "jstnlef", "id": 1276131, "node_id": "MDQ6VXNlcjEyNzYxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1276131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstnlef", "html_url": "https://github.com/jstnlef", "followers_url": "https://api.github.com/users/jstnlef/followers", "following_url": "https://api.github.com/users/jstnlef/following{/other_user}", "gists_url": "https://api.github.com/users/jstnlef/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstnlef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstnlef/subscriptions", "organizations_url": "https://api.github.com/users/jstnlef/orgs", "repos_url": "https://api.github.com/users/jstnlef/repos", "events_url": "https://api.github.com/users/jstnlef/events{/privacy}", "received_events_url": "https://api.github.com/users/jstnlef/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jstnlef", "id": 1276131, "node_id": "MDQ6VXNlcjEyNzYxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1276131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstnlef", "html_url": "https://github.com/jstnlef", "followers_url": "https://api.github.com/users/jstnlef/followers", "following_url": "https://api.github.com/users/jstnlef/following{/other_user}", "gists_url": "https://api.github.com/users/jstnlef/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstnlef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstnlef/subscriptions", "organizations_url": "https://api.github.com/users/jstnlef/orgs", "repos_url": "https://api.github.com/users/jstnlef/repos", "events_url": "https://api.github.com/users/jstnlef/events{/privacy}", "received_events_url": "https://api.github.com/users/jstnlef/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "923bac45964940c56ab1075fb7980896de1eb620", "url": "https://api.github.com/repos/rust-lang/rust/commits/923bac45964940c56ab1075fb7980896de1eb620", "html_url": "https://github.com/rust-lang/rust/commit/923bac45964940c56ab1075fb7980896de1eb620"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "b22bdb43414fd751e591dcbae835dd6741a9e3e7", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a77b55d58f9b173b1e4fb96bb6935fadbfda3240/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77b55d58f9b173b1e4fb96bb6935fadbfda3240/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a77b55d58f9b173b1e4fb96bb6935fadbfda3240", "patch": "@@ -1821,7 +1821,8 @@ impl<T: PartialOrd> PartialOrd for [T] {\n // intermediate trait for specialization of slice's PartialEq\n trait SlicePartialEq<B> {\n     fn equal(&self, other: &[B]) -> bool;\n-    fn not_equal(&self, other: &[B]) -> bool;\n+\n+    fn not_equal(&self, other: &[B]) -> bool { !self.equal(other) }\n }\n \n // Generic slice equality\n@@ -1841,20 +1842,6 @@ impl<A, B> SlicePartialEq<B> for [A]\n \n         true\n     }\n-\n-    default fn not_equal(&self, other: &[B]) -> bool {\n-        if self.len() != other.len() {\n-            return true;\n-        }\n-\n-        for i in 0..self.len() {\n-            if self[i].ne(&other[i]) {\n-                return true;\n-            }\n-        }\n-\n-        false\n-    }\n }\n \n // Use memcmp for bytewise equality when the types allow\n@@ -1874,10 +1861,6 @@ impl<A> SlicePartialEq<A> for [A]\n                    other.as_ptr() as *const u8, size) == 0\n         }\n     }\n-\n-    fn not_equal(&self, other: &[A]) -> bool {\n-        !self.equal(other)\n-    }\n }\n \n #[doc(hidden)]"}]}