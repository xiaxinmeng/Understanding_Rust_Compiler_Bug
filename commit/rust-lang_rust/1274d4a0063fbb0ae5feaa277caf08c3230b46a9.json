{"sha": "1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNzRkNGEwMDYzZmJiMGFlNWZlYWEyNzdjYWYwOGMzMjMwYjQ2YTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T20:10:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:36:00Z"}, "message": "test: Fix tests. rs=tests", "tree": {"sha": "edbef2ad552d29c1500c42e8036aee72bffa8490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edbef2ad552d29c1500c42e8036aee72bffa8490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "html_url": "https://github.com/rust-lang/rust/commit/1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34749c28908997f8c58a646c9238c3dd8ea1103", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34749c28908997f8c58a646c9238c3dd8ea1103", "html_url": "https://github.com/rust-lang/rust/commit/a34749c28908997f8c58a646c9238c3dd8ea1103"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "1b5d03d9eb8cdaff3e1bde5302bd359a30b7b6e4", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -507,7 +507,7 @@ impl<T> BaseIter<T> for @mut DList<T> {\n     * allow for e.g. breadth-first search with in-place enqueues), but\n     * removing the current node is forbidden.\n     */\n-    pure fn each(&self, f: fn(v: &T) -> bool) {\n+    pure fn each(&self, f: &fn(v: &T) -> bool) {\n         let mut link = self.peek_n();\n         while option::is_some(&link) {\n             let nobe = option::get(link);"}, {"sha": "1dd30edcc980bb51d3a9abca0e6945dd19f80830", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n \n-struct S(())\n+pub struct S(());\n \n pub impl S {\n     fn foo() { }\n }\n \n-trait T {\n+pub trait T {\n     fn bar();\n }\n "}, {"sha": "95ff995258fad17ec76dc79a8e1e8f1bcf1d3593", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     fn f(f: extern fn(extern fn(extern fn()))) {\n     }\n \n-    fn g(f: extern fn(fn())) {\n+    fn g(f: extern fn(&fn())) {\n     }\n \n     f(g);"}, {"sha": "a35d88a76f393c20c2b105e38bd790804545d374", "filename": "src/test/compile-fail/borrowck-assign-to-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-enum.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -12,5 +12,5 @@ struct foo(int);\n \n fn main() {\n     let x = foo(3);\n-    *x = 4; //~ ERROR assigning to enum content\n+    *x = 4; //~ ERROR assigning to anonymous field\n }"}, {"sha": "520772f1ceea9e821e448b63c73bfe1e48745f4f", "filename": "src/test/compile-fail/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move-2.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -28,5 +28,5 @@ struct wrapper(noncopyable);\n \n fn main() {\n     let x1 = wrapper(noncopyable());\n-    let _x2 = *x1; //~ ERROR moving out of enum content\n+    let _x2 = *x1; //~ ERROR moving out of anonymous field\n }"}, {"sha": "2f174671bd9858001d66a7830d8879014123535c", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -11,7 +11,7 @@\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-enum t(@t); //~ ERROR this type cannot be instantiated\n+struct t(@t); //~ ERROR this type cannot be instantiated\n \n trait to_str_2 {\n     fn to_str() -> ~str;"}, {"sha": "50674ac81fecfa15cdbfb01f632a6bc11678a895", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -17,41 +17,41 @@ fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n     // subtype::<T1>(of::<T2>()) will typecheck\n     // iff T1 <: T2.\n \n-    subtype::<fn(&a/T)>(\n-        of::<fn(&a/T)>());\n+    subtype::<&fn(&a/T)>(\n+        of::<&fn(&a/T)>());\n \n-    subtype::<fn(&a/T)>(\n-        of::<fn(&b/T)>());\n+    subtype::<&fn(&a/T)>(\n+        of::<&fn(&b/T)>());\n \n-    subtype::<fn(&b/T)>(\n-        of::<fn(&x/T)>());\n+    subtype::<&fn(&b/T)>(\n+        of::<&fn(&x/T)>());\n \n-    subtype::<fn(&x/T)>(\n-        of::<fn(&b/T)>());  //~ ERROR mismatched types\n+    subtype::<&fn(&x/T)>(\n+        of::<&fn(&b/T)>());  //~ ERROR mismatched types\n \n-    subtype::<fn(&a/T, &b/T)>(\n-        of::<fn(&a/T, &a/T)>());\n+    subtype::<&fn(&a/T, &b/T)>(\n+        of::<&fn(&a/T, &a/T)>());\n \n-    subtype::<fn(&a/T, &a/T)>(\n-        of::<fn(&a/T, &b/T)>()); //~ ERROR mismatched types\n+    subtype::<&fn(&a/T, &a/T)>(\n+        of::<&fn(&a/T, &b/T)>()); //~ ERROR mismatched types\n \n-    subtype::<fn(&a/T, &b/T)>(\n-        of::<fn(&x/T, &y/T)>());\n+    subtype::<&fn(&a/T, &b/T)>(\n+        of::<&fn(&x/T, &y/T)>());\n \n-    subtype::<fn(&x/T, &y/T)>(\n-        of::<fn(&a/T, &b/T)>()); //~ ERROR mismatched types\n+    subtype::<&fn(&x/T, &y/T)>(\n+        of::<&fn(&a/T, &b/T)>()); //~ ERROR mismatched types\n \n-    subtype::<fn(&x/T) -> @fn(&a/T)>(\n-        of::<fn(&x/T) -> @fn(&a/T)>());\n+    subtype::<&fn(&x/T) -> @fn(&a/T)>(\n+        of::<&fn(&x/T) -> @fn(&a/T)>());\n \n-    subtype::<fn(&a/T) -> @fn(&a/T)>(\n-        of::<fn(&a/T) -> @fn(&b/T)>()); //~ ERROR mismatched types\n+    subtype::<&fn(&a/T) -> @fn(&a/T)>(\n+        of::<&fn(&a/T) -> @fn(&b/T)>()); //~ ERROR mismatched types\n \n-    subtype::<fn(&a/T) -> @fn(&a/T)>(\n-        of::<fn(&x/T) -> @fn(&b/T)>()); //~ ERROR mismatched types\n+    subtype::<&fn(&a/T) -> @fn(&a/T)>(\n+        of::<&fn(&x/T) -> @fn(&b/T)>()); //~ ERROR mismatched types\n \n-    subtype::<fn(&a/T) -> @fn(&b/T)>(\n-        of::<fn(&a/T) -> @fn(&a/T)>());\n+    subtype::<&fn(&a/T) -> @fn(&b/T)>(\n+        of::<&fn(&a/T) -> @fn(&a/T)>());\n }\n \n fn main() {}"}, {"sha": "a6556895dda3362a3680512c47d4617bcd88e186", "filename": "src/test/run-pass/issue-1458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1274d4a0063fbb0ae5feaa277caf08c3230b46a9/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1458.rs?ref=1274d4a0063fbb0ae5feaa277caf08c3230b46a9", "patch": "@@ -12,7 +12,7 @@ fn plus_one(f: &fn() -> int) -> int {\n   return f() + 1;\n }\n \n-fn ret_plus_one() -> extern fn(fn() -> int) -> int {\n+fn ret_plus_one() -> extern fn(&fn() -> int) -> int {\n   return plus_one;\n }\n "}]}