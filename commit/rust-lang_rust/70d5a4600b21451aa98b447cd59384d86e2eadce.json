{"sha": "70d5a4600b21451aa98b447cd59384d86e2eadce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDVhNDYwMGIyMTQ1MWFhOThiNDQ3Y2Q1OTM4NGQ4NmUyZWFkY2U=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-01T09:57:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-03-01T09:57:25Z"}, "message": "Specialize Zip::nth for TrustedRandomAccess\n\nMakes the bench asked about on URLO 58x faster :)", "tree": {"sha": "5d1a396c78855cb8a510c3e69282f129c19cb4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1a396c78855cb8a510c3e69282f129c19cb4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d5a4600b21451aa98b447cd59384d86e2eadce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d5a4600b21451aa98b447cd59384d86e2eadce", "html_url": "https://github.com/rust-lang/rust/commit/70d5a4600b21451aa98b447cd59384d86e2eadce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d5a4600b21451aa98b447cd59384d86e2eadce/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85417f5938023d1491b44d94da705f539bb8b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85417f5938023d1491b44d94da705f539bb8b17", "html_url": "https://github.com/rust-lang/rust/commit/a85417f5938023d1491b44d94da705f539bb8b17"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "6c597301ac2045cfeea0158268455c9d6eb19364", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=70d5a4600b21451aa98b447cd59384d86e2eadce", "patch": "@@ -281,3 +281,32 @@ bench_sums! {\n     bench_take_while_chain_ref_sum,\n     (0i64..1000000).chain(1000000..).take_while(|&x| x < 1111111)\n }\n+\n+// Checks whether Skip<Zip<A,B>> is as fast as Zip<Skip<A>, Skip<B>>, from\n+// https://users.rust-lang.org/t/performance-difference-between-iterator-zip-and-skip-order/15743\n+#[bench]\n+fn bench_zip_then_skip(b: &mut Bencher) {\n+    let v: Vec<_> = (0..100_000).collect();\n+    let t: Vec<_> = (0..100_000).collect();\n+\n+    b.iter(|| {\n+        let s = v.iter().zip(t.iter()).skip(10000)\n+            .take_while(|t| *t.0 < 10100)\n+            .map(|(a, b)| *a + *b)\n+            .sum::<u64>();\n+        assert_eq!(s, 2009900);\n+    });\n+}\n+#[bench]\n+fn bench_skip_then_zip(b: &mut Bencher) {\n+    let v: Vec<_> = (0..100_000).collect();\n+    let t: Vec<_> = (0..100_000).collect();\n+\n+    b.iter(|| {\n+        let s = v.iter().skip(10000).zip(t.iter().skip(10000))\n+            .take_while(|t| *t.0 < 10100)\n+            .map(|(a, b)| *a + *b)\n+            .sum::<u64>();\n+        assert_eq!(s, 2009900);\n+    });\n+}"}, {"sha": "533ff388b760443fdd57a322412be028309f490d", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=70d5a4600b21451aa98b447cd59384d86e2eadce", "patch": "@@ -1045,6 +1045,11 @@ impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         ZipImpl::size_hint(self)\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        ZipImpl::nth(self, n)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1065,6 +1070,14 @@ trait ZipImpl<A, B> {\n     fn new(a: A, b: B) -> Self;\n     fn next(&mut self) -> Option<Self::Item>;\n     fn size_hint(&self) -> (usize, Option<usize>);\n+    fn nth(&mut self, n: usize) -> Option<Self::Item>;\n+    fn super_nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+        while let Some(x) = self.next() {\n+            if n == 0 { return Some(x) }\n+            n -= 1;\n+        }\n+        None\n+    }\n     fn next_back(&mut self) -> Option<Self::Item>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n               B: DoubleEndedIterator + ExactSizeIterator;\n@@ -1094,6 +1107,12 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         })\n     }\n \n+    #[inline]\n+    default fn nth(&mut self, n: usize) -> Option<Self::Item>\n+    {\n+        self.super_nth(n)\n+    }\n+\n     #[inline]\n     default fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n@@ -1174,6 +1193,25 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         (len, Some(len))\n     }\n \n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item>\n+    {\n+        let delta = cmp::min(n, self.len - self.index);\n+        let end = self.index + delta;\n+        while self.index < end {\n+            let i = self.index;\n+            self.index += 1;\n+            if A::may_have_side_effect() {\n+                unsafe { self.a.get_unchecked(i); }\n+            }\n+            if B::may_have_side_effect() {\n+                unsafe { self.b.get_unchecked(i); }\n+            }\n+        }\n+\n+        self.super_nth(n - delta)\n+    }\n+\n     #[inline]\n     fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n         where A: DoubleEndedIterator + ExactSizeIterator,"}, {"sha": "5e2fef95d260614bcc6b7ff618e2478681eda344", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d5a4600b21451aa98b447cd59384d86e2eadce/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=70d5a4600b21451aa98b447cd59384d86e2eadce", "patch": "@@ -144,6 +144,23 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_zip_nth() {\n+    let xs = [0, 1, 2, 4, 5];\n+    let ys = [10, 11, 12];\n+\n+    let mut it = xs.iter().zip(&ys);\n+    assert_eq!(it.nth(0), Some((&0, &10)));\n+    assert_eq!(it.nth(1), Some((&2, &12)));\n+    assert_eq!(it.nth(0), None);\n+\n+    let mut it = xs.iter().zip(&ys);\n+    assert_eq!(it.nth(3), None);\n+\n+    let mut it = ys.iter().zip(&xs);\n+    assert_eq!(it.nth(3), None);\n+}\n+\n #[test]\n fn test_iterator_step_by() {\n     // Identity"}]}