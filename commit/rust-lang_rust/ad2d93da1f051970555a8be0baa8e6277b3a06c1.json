{"sha": "ad2d93da1f051970555a8be0baa8e6277b3a06c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMmQ5M2RhMWYwNTE5NzA1NTVhOGJlMGJhYThlNjI3N2IzYTA2YzE=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-26T18:14:12Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-26T18:14:12Z"}, "message": "Apply suggested changes", "tree": {"sha": "d362a34e82ce88f8920edce076e412ada1e9b240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d362a34e82ce88f8920edce076e412ada1e9b240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad2d93da1f051970555a8be0baa8e6277b3a06c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2d93da1f051970555a8be0baa8e6277b3a06c1", "html_url": "https://github.com/rust-lang/rust/commit/ad2d93da1f051970555a8be0baa8e6277b3a06c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad2d93da1f051970555a8be0baa8e6277b3a06c1/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e6deefee8dc68fc35bdfe5effbfdb517b03f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e6deefee8dc68fc35bdfe5effbfdb517b03f9c", "html_url": "https://github.com/rust-lang/rust/commit/75e6deefee8dc68fc35bdfe5effbfdb517b03f9c"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "fa885ce2e7cdfb4ded4be2cd0090a3cc352746e7", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -46,6 +46,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n+#![feature(int_error_matching)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "9ff2b7f08fe04d824ec93c59803c0e7848fab481", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -50,8 +50,10 @@ fn update_limit(\n                     let error_str = match e.kind() {\n                         IntErrorKind::PosOverflow => \"`limit` is too large\",\n                         IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n-                        IntErrorKind::InvalidDigit(_) => \"not a valid integer\",\n-                        IntErrorKind::NegOverflow => bug!(\"`limit` should never underflow\"),\n+                        IntErrorKind::InvalidDigit => \"not a valid integer\",\n+                        IntErrorKind::NegOverflow => {\n+                            bug!(\"`limit` should never negatively underflow\")\n+                        }\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };"}, {"sha": "d67ad30e123f95fd5564e7f54cd428810bed6584", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -151,6 +151,7 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(int_error_matching)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]"}, {"sha": "9d8c8c862911c21bac4ce60cb482912ed41ea289", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -77,20 +77,26 @@ pub struct ParseIntError {\n /// # Example\n ///\n /// ```\n+/// #![feature(int_error_matching)]\n+///\n /// # fn main() {\n /// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n ///     println!(\"Failed conversion to i32: {:?}\", e.kind());\n /// }\n /// # }\n /// ```\n-#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+#[unstable(\n+    feature = \"int_error_matching\",\n+    reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+    issue = \"22639\"\n+)]\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[non_exhaustive]\n pub enum IntErrorKind {\n     /// Value being parsed is empty.\n     ///\n     /// Among other causes, this variant will be constructed when parsing an empty string.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Empty,\n     /// Contains an invalid digit in its context.\n     ///\n@@ -99,25 +105,26 @@ pub enum IntErrorKind {\n     ///\n     /// This variant is also constructed when a `+` or `-` is misplaced within a string\n     /// either on its own or in the middle of a number.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n-    InvalidDigit(#[stable(feature = \"int_error_matching\", since = \"1.47.0\")] char),\n+    InvalidDigit,\n     /// Integer is too large to store in target integer type.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     PosOverflow,\n     /// Integer is too small to store in target integer type.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     NegOverflow,\n     /// Value was Zero\n     ///\n     /// This variant will be emitted when the parsing string has a value of zero, which\n     /// would be illegal for non-zero types.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Zero,\n }\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+    #[unstable(\n+        feature = \"int_error_matching\",\n+        reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+        issue = \"22639\"\n+    )]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind\n     }\n@@ -131,7 +138,7 @@ impl ParseIntError {\n     pub fn __description(&self) -> &str {\n         match self.kind {\n             IntErrorKind::Empty => \"cannot parse integer from empty string\",\n-            IntErrorKind::InvalidDigit(_) => \"invalid digit found in string\",\n+            IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n             IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n             IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n             IntErrorKind::Zero => \"number would be zero for non-zero type\","}, {"sha": "71448a622c09e0bb03a88830239118a390bd3388", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -63,7 +63,12 @@ pub use nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, No\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use error::TryFromIntError;\n \n-#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+#[unstable(\n+    feature = \"int_error_matching\",\n+    reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+    issue = \"22639\"\n+)]\n pub use error::IntErrorKind;\n \n macro_rules! usize_isize_to_xe_bytes_doc {\n@@ -831,7 +836,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n \n     let (is_positive, digits) = match src[0] {\n         b'+' | b'-' if src[1..].is_empty() => {\n-            return Err(PIE { kind: InvalidDigit(src[0] as char) });\n+            return Err(PIE { kind: InvalidDigit });\n         }\n         b'+' => (true, &src[1..]),\n         b'-' if is_signed_ty => (false, &src[1..]),\n@@ -844,7 +849,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         for &c in digits {\n             let x = match (c as char).to_digit(radix) {\n                 Some(x) => x,\n-                None => return Err(PIE { kind: InvalidDigit(c as char) }),\n+                None => return Err(PIE { kind: InvalidDigit }),\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n@@ -860,7 +865,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n         for &c in digits {\n             let x = match (c as char).to_digit(radix) {\n                 Some(x) => x,\n-                None => return Err(PIE { kind: InvalidDigit(c as char) }),\n+                None => return Err(PIE { kind: InvalidDigit }),\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,"}, {"sha": "d8b36beb3e0856585939f7e91f7b24497751fc3f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -37,6 +37,7 @@\n #![feature(try_trait)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n+#![feature(int_error_matching)]\n #![feature(array_value_iter)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]"}, {"sha": "fb1293c99bba934748dd13362c0a994eea41d833", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -131,7 +131,7 @@ fn test_from_str() {\n     assert_eq!(\"0\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()), Some(IntErrorKind::Zero));\n     assert_eq!(\n         \"-1\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::InvalidDigit('-'))\n+        Some(IntErrorKind::InvalidDigit)\n     );\n     assert_eq!(\n         \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),"}, {"sha": "7c25c32fb40a717cc67741aff69a546098f3125e", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -118,14 +118,14 @@ fn test_leading_plus() {\n \n #[test]\n fn test_invalid() {\n-    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit('-')));\n-    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit('+')));\n-    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit('\u00d0')));\n-    test_parse::<u8>(\"123Hello\", Err(IntErrorKind::InvalidDigit('H')));\n-    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit('-')));\n-    test_parse::<i8>(\"-\", Err(IntErrorKind::InvalidDigit('-')));\n-    test_parse::<i8>(\"+\", Err(IntErrorKind::InvalidDigit('+')));\n-    test_parse::<u8>(\"-1\", Err(IntErrorKind::InvalidDigit('-')));\n+    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"123Hello\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"-\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"+\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"-1\", Err(IntErrorKind::InvalidDigit));\n }\n \n #[test]"}, {"sha": "ac0075ad129c5778e0fe27ace2057edfac1366f1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -264,6 +264,7 @@\n #![feature(global_asm)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n+#![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n #![feature(lang_items)]"}, {"sha": "0f1c59626859411ee501d47abe7715d19c63ff02", "filename": "library/std/src/num.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fstd%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad2d93da1f051970555a8be0baa8e6277b3a06c1/library%2Fstd%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnum.rs?ref=ad2d93da1f051970555a8be0baa8e6277b3a06c1", "patch": "@@ -22,7 +22,12 @@ pub use core::num::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8,\n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use core::num::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n \n-#[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n+#[unstable(\n+    feature = \"int_error_matching\",\n+    reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+    issue = \"22639\"\n+)]\n pub use core::num::IntErrorKind;\n \n #[cfg(test)]"}]}