{"sha": "953f024793dab92745fee9cd2c4dee6a60451771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1M2YwMjQ3OTNkYWI5Mjc0NWZlZTljZDJjNGRlZTZhNjA0NTE3NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T09:48:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-15T09:48:15Z"}, "message": "Auto merge of #6586 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: FP fix: [`needless_return`] no longer triggers inside macros.", "tree": {"sha": "e0484caad6b7c9d06752ff68ba7e2969dce40008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0484caad6b7c9d06752ff68ba7e2969dce40008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953f024793dab92745fee9cd2c4dee6a60451771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953f024793dab92745fee9cd2c4dee6a60451771", "html_url": "https://github.com/rust-lang/rust/commit/953f024793dab92745fee9cd2c4dee6a60451771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953f024793dab92745fee9cd2c4dee6a60451771/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00586dfdcd10c37cb8b132c72ed0558304955042", "url": "https://api.github.com/repos/rust-lang/rust/commits/00586dfdcd10c37cb8b132c72ed0558304955042", "html_url": "https://github.com/rust-lang/rust/commit/00586dfdcd10c37cb8b132c72ed0558304955042"}, {"sha": "f18cf82ca8764d6b0b07549cdba25b91bd0243fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18cf82ca8764d6b0b07549cdba25b91bd0243fa", "html_url": "https://github.com/rust-lang/rust/commit/f18cf82ca8764d6b0b07549cdba25b91bd0243fa"}], "stats": {"total": 471, "additions": 258, "deletions": 213}, "files": [{"sha": "aa431f0596cca9c12ac22d5a7f35d173a64e445c", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,8 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind, PatKind, UnOp};\n+use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -102,31 +101,22 @@ enum AssertKind {\n /// Check if the expression matches\n ///\n /// ```rust,ignore\n-/// match { let _t = !c; _t } {\n-///     true => {\n-///         {\n-///             ::std::rt::begin_panic(message, _)\n-///         }\n-///     }\n-///     _ => { }\n-/// };\n+/// if !c {\n+///   {\n+///     ::std::rt::begin_panic(message, _)\n+///   }\n+/// }\n /// ```\n ///\n /// where `message` is any expression and `c` is a constant bool.\n fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<AssertKind> {\n     if_chain! {\n-        if let ExprKind::Match(ref expr, ref arms, _) = expr.kind;\n-        // matches { let _t = expr; _t }\n-        if let ExprKind::DropTemps(ref expr) = expr.kind;\n-        if let ExprKind::Unary(UnOp::UnNot, ref expr) = expr.kind;\n+        if let ExprKind::If(ref cond, ref then, _) = expr.kind;\n+        if let ExprKind::Unary(UnOp::UnNot, ref expr) = cond.kind;\n         // bind the first argument of the `assert!` macro\n         if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.typeck_results(), expr);\n-        // arm 1 pattern\n-        if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n-        if let ExprKind::Lit(ref lit) = lit_expr.kind;\n-        if let LitKind::Bool(true) = lit.node;\n-        // arm 1 block\n-        if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n+        // block\n+        if let ExprKind::Block(ref block, _) = then.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n         // inner block is optional. unwrap it if it exists, or use the expression as is otherwise."}, {"sha": "4efca10bcdf13d650cdff8067231ae3f8f32d4f5", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, higher, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n+use crate::utils::{differing_macro_contexts, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n-        if let Some((cond, _, _)) = higher::if_block(&expr) {\n+        if let ExprKind::If(cond, _, _) = &expr.kind {\n             if let ExprKind::Block(block, _) = &cond.kind {\n                 if block.rules == BlockCheckMode::DefaultBlock {\n                     if block.stmts.is_empty() {"}, {"sha": "b3ebdf4ca30d8d21119c6559b51f9782456d2bc2", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -147,6 +147,9 @@ impl<'tcx> Visitor<'tcx> for CCHelper {\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         walk_expr(self, e);\n         match e.kind {\n+            ExprKind::If(_, _, _) => {\n+                self.cc += 1;\n+            },\n             ExprKind::Match(_, ref arms, _) => {\n                 if arms.len() > 1 {\n                     self.cc += 1;"}, {"sha": "166eadf86c177f49aa221145bcfaf4ba6c5342c3", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::utils::{clip, higher, sext, unsext};\n+use crate::utils::{clip, sext, unsext};\n use if_chain::if_chain;\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_data_structures::sync::Lrc;\n@@ -228,9 +228,6 @@ pub struct ConstEvalLateContext<'a, 'tcx> {\n impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     /// Simple constant folding: Insert an expression, get a constant or none.\n     pub fn expr(&mut self, e: &Expr<'_>) -> Option<Constant> {\n-        if let Some((ref cond, ref then, otherwise)) = higher::if_block(&e) {\n-            return self.ifthenelse(cond, then, otherwise);\n-        }\n         match e.kind {\n             ExprKind::Path(ref qpath) => self.fetch_path(qpath, e.hir_id, self.typeck_results.expr_ty(e)),\n             ExprKind::Block(ref block, _) => self.block(block),\n@@ -249,6 +246,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 UnOp::UnNeg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n                 UnOp::UnDeref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n             }),\n+            ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, *otherwise),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),\n             ExprKind::Call(ref callee, ref args) => {\n                 // We only handle a few const functions for now."}, {"sha": "944aaafb46de59e5748f60d3f1773a8e71f87657", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n-use crate::utils::{get_parent_expr, higher, if_sequence, span_lint_and_note};\n-use rustc_hir::{Block, Expr};\n+use crate::utils::{get_parent_expr, if_sequence, span_lint_and_note};\n+use rustc_hir::{Block, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -109,11 +109,13 @@ impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !expr.span.from_expansion() {\n             // skip ifs directly in else, it will be checked in the parent if\n-            if let Some(expr) = get_parent_expr(cx, expr) {\n-                if let Some((_, _, Some(ref else_expr))) = higher::if_block(&expr) {\n-                    if else_expr.hir_id == expr.hir_id {\n-                        return;\n-                    }\n+            if let Some(&Expr {\n+                kind: ExprKind::If(_, _, Some(ref else_expr)),\n+                ..\n+            }) = get_parent_expr(cx, expr)\n+            {\n+                if else_expr.hir_id == expr.hir_id {\n+                    return;\n                 }\n             }\n "}, {"sha": "48899b33899370b0afd37f57f8281d2a7bc41d15", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -33,10 +33,10 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n "}, {"sha": "b1e363663bb27fd8fd5a051960fbc6e953e5ba39", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -7,7 +7,7 @@ use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -164,10 +164,10 @@ declare_lint_pass!(Derive => [\n \n impl<'tcx> LateLintPass<'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);"}, {"sha": "f518da55cd76fcb014202e5c4f5ca2f65ad22759", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -182,11 +182,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                     lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n                 }\n             },\n-            hir::ItemKind::Impl {\n-                of_trait: ref trait_ref,\n-                ..\n-            } => {\n-                self.in_trait_impl = trait_ref.is_some();\n+            hir::ItemKind::Impl(ref impl_) => {\n+                self.in_trait_impl = impl_.of_trait.is_some();\n             },\n             _ => {},\n         }"}, {"sha": "37948e06869c3bfc4100d814663dd00c823dc37f", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{get_item_name, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -54,7 +54,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some((ref check, ref then_block, ref else_block)) = higher::if_block(&expr) {\n+        if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.kind {\n             if let ExprKind::Unary(UnOp::UnNot, ref check) = check.kind {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`"}, {"sha": "40e93da8dffb4624e3c8457fae6e07fcacaf558f", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::intravisit;\n-use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, ItemKind, Node};\n+use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TraitRef, Ty};\n@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         let mut trait_self_ty = None;\n         if let Some(Node::Item(item)) = parent_node {\n             // If the method is an impl for a trait, don't warn.\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n \n@@ -181,7 +181,6 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 if is_non_trait_box(cmt.place.ty()) && !self.is_large_box(cmt.place.ty()) {\n                     self.set.insert(cmt.hir_id);\n                 }\n-                return;\n             }\n         }\n     }"}, {"sha": "9f389c8d2f9e71fc472c74258dd8f0351164a90f", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -57,11 +57,11 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl{ items: impl_items, .. } = item.kind;\n+            if let hir::ItemKind::Impl(impl_) = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {\n-                lint_impl_body(cx, item.span, impl_items);\n+                lint_impl_body(cx, item.span, impl_.items);\n             }\n         }\n     }"}, {"sha": "ffef78aac806770f6108d9f5c17c17359aab1855", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{\n     constant, constant_simple, Constant,\n     Constant::{Int, F32, F64},\n };\n-use crate::utils::{eq_expr_value, get_parent_expr, higher, numeric_literal, span_lint_and_sugg, sugg};\n+use crate::utils::{eq_expr_value, get_parent_expr, numeric_literal, span_lint_and_sugg, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n@@ -556,11 +556,11 @@ fn are_negated<'a>(cx: &LateContext<'_>, expr1: &'a Expr<'a>, expr2: &'a Expr<'a\n \n fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n-        if let Some((cond, body, Some(else_body))) = higher::if_block(&expr);\n+        if let ExprKind::If(cond, body, else_body) = expr.kind;\n         if let ExprKind::Block(block, _) = body.kind;\n         if block.stmts.is_empty();\n         if let Some(if_body_expr) = block.expr;\n-        if let ExprKind::Block(else_block, _) = else_body.kind;\n+        if let Some(ExprKind::Block(else_block, _)) = else_body.map(|el| &el.kind);\n         if else_block.stmts.is_empty();\n         if let Some(else_body_expr) = else_block.expr;\n         if let Some((if_expr_positive, body)) = are_negated(cx, if_body_expr, else_body_expr);"}, {"sha": "109d90ff772b57b8172761cb06c353283304fdf0", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -81,6 +81,13 @@ fn expr_match(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 lint(cx, expr.span, break_expr.span, LINT_BREAK);\n             }\n         },\n+        ExprKind::If(.., if_expr, else_expr) => {\n+            expr_match(cx, if_expr);\n+\n+            if let Some(else_expr) = else_expr {\n+                expr_match(cx, else_expr);\n+            }\n+        },\n         ExprKind::Match(.., arms, source) => {\n             let check_all_arms = match source {\n                 MatchSource::IfLetDesugar {"}, {"sha": "16e162badb5ee64a0172a3e23810490e13e2624b", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{higher, in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             return;\n         }\n         if_chain! {\n-            if let Some((ref cond, ref then, None)) = higher::if_block(&expr);\n+            if let ExprKind::If(cond, then, None) = &expr.kind;\n \n             // Check if the conditional expression is a binary operation\n             if let ExprKind::Binary(ref cond_op, ref cond_left, ref cond_right) = cond.kind;"}, {"sha": "ea26c84cde16a93260f18c9f73c90e0d29c81991", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -2,7 +2,7 @@\n \n use crate::utils::{in_macro, span_lint_and_then};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{def_id, Crate, Item, ItemKind};\n+use rustc_hir::{def_id, Crate, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -49,11 +49,11 @@ impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             ref generics,\n             of_trait: None,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)"}, {"sha": "e95caf6a35f900915920278e03abc2489bd4750d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, ImplItemRef, Item, ItemKind, TraitItemRef};\n+use rustc_hir::{AssocItemKind, BinOpKind, Expr, ExprKind, Impl, ImplItemRef, Item, ItemKind, TraitItemRef};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -115,11 +115,11 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n \n         match item.kind {\n             ItemKind::Trait(_, _, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n-            ItemKind::Impl {\n+            ItemKind::Impl(Impl {\n                 of_trait: None,\n                 items: ref impl_items,\n                 ..\n-            } => check_impl_items(cx, item, impl_items),\n+            }) => check_impl_items(cx, item, impl_items),\n             _ => (),\n         }\n     }"}, {"sha": "db717cd1240a41b38a9f1d871595f3561b02c2b0", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n+use crate::utils::{qpath_res, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -64,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::StmtKind::Local(ref local) = stmt.kind;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n-                if let Some((ref cond, ref then, ref else_)) = higher::if_block(&if_);\n+                if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.kind;\n                 if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);"}, {"sha": "1c5ab2874b0481f92114eb50413e99bfec6f50f6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -742,6 +742,14 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n         },\n+        ExprKind::If(ref e, ref e2, ref e3) => {\n+            let e1 = never_loop_expr(e, main_loop_id);\n+            let e2 = never_loop_expr(e2, main_loop_id);\n+            let e3 = e3\n+                .as_ref()\n+                .map_or(NeverLoopResult::Otherwise, |e| never_loop_expr(e, main_loop_id));\n+            combine_seq(e1, combine_branches(e2, e3))\n+        },\n         ExprKind::Match(ref e, ref arms, _) => {\n             let e = never_loop_expr(e, main_loop_id);\n             if arms.is_empty() {\n@@ -2594,7 +2602,7 @@ fn is_loop(expr: &Expr<'_>) -> bool {\n }\n \n fn is_conditional(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Match(..))\n+    matches!(expr.kind, ExprKind::If(..) | ExprKind::Match(..))\n }\n \n fn is_nested(cx: &LateContext<'_>, match_expr: &Expr<'_>, iter_expr: &Expr<'_>) -> bool {"}, {"sha": "a0cfe145a301cb68649f8ab1f8bf23d35296d4aa", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n         }\n \n         if_chain! {\n-            if let Some((cond, then, _)) = higher::if_block(&expr);\n+            if let ExprKind::If(cond, then, _) = &expr.kind;\n             if let ExprKind::MethodCall(_, _, [target_arg, pattern], _) = cond.kind;\n             if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(cond.hir_id);\n             if let ExprKind::Path(target_path) = &target_arg.kind;"}, {"sha": "79aec928d298b7462e3fdc3e0e2356ccc331c9ce", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1626,7 +1626,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let self_ty = cx.tcx.type_of(def_id);\n \n         // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return;\n         }\n \n@@ -2048,6 +2048,7 @@ fn lint_expect_fun_call(\n             hir::ExprKind::Call(..)\n             | hir::ExprKind::MethodCall(..)\n             // These variants are debatable or require further examination\n+            | hir::ExprKind::If(..)\n             | hir::ExprKind::Match(..)\n             | hir::ExprKind::Block{ .. } => true,\n             _ => false,"}, {"sha": "d98e6160d308561d2b1f115c1ce5e5372e3ba27f", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -90,6 +90,12 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n             }\n             (found_mapping, found_filtering)\n         },\n+        // There must be an else_arm or there will be a type error\n+        hir::ExprKind::If(_, ref if_arm, Some(ref else_arm)) => {\n+            let if_check = check_expression(cx, arg_id, if_arm);\n+            let else_check = check_expression(cx, arg_id, else_arm);\n+            (if_check.0 | else_check.0, if_check.1 | else_check.1)\n+        },\n         hir::ExprKind::Path(path) if match_qpath(path, &paths::OPTION_NONE) => (false, true),\n         _ => (true, true),\n     }"}, {"sha": "d795f12645794e2a2f6de2389e62737e8b8ae919", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -3,9 +3,7 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    higher, is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg,\n-};\n+use crate::utils::{is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -71,7 +69,7 @@ declare_lint_pass!(NeedlessBool => [NEEDLESS_BOOL]);\n impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use self::Expression::{Bool, RetBool};\n-        if let Some((ref pred, ref then_block, Some(ref else_expr))) = higher::if_block(&e) {\n+        if let ExprKind::If(ref pred, ref then_block, Some(ref else_expr)) = e.kind {\n             let reduce = |ret, not| {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let snip = Sugg::hir_with_applicability(cx, pred, \"<predicate>\", &mut applicability);"}, {"sha": "c8f89f8046c856b992ef771679026b0a1a1fc4bf", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, ItemKind, Node, PatKind, QPath, TyKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n@@ -93,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "bd3dac663fe273514bfc7c7c8fe75ef5ffa9f56a", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -60,9 +60,9 @@ impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if let hir::ItemKind::Impl {\n+        if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None, items, ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {"}, {"sha": "3a9aa6ced03ba7558d89d7c3ee82af6ce46dca6d", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -7,7 +7,7 @@ use std::ptr;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{\n-    BodyId, Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n+    BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n@@ -275,10 +275,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {\n-                ItemKind::Impl {\n+                ItemKind::Impl(Impl {\n                     of_trait: Some(of_trait_ref),\n                     ..\n-                } => {\n+                }) => {\n                     if_chain! {\n                         // Lint a trait impl item only when the definition is a generic type,\n                         // assuming a assoc const is not meant to be a interior mutable type.\n@@ -317,7 +317,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         }\n                     }\n                 },\n-                ItemKind::Impl { of_trait: None, .. } => {\n+                ItemKind::Impl(Impl { of_trait: None, .. }) => {\n                     let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n                     // Normalize assoc types originated from generic params.\n                     let normalized = cx.tcx.normalize_erasing_regions(cx.param_env, ty);"}, {"sha": "7bdf975ffd446f82a9c97d0009565f8e084c9364", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -109,25 +109,30 @@ fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n /// it in curly braces. Otherwise, we don't.\n fn should_wrap_in_braces(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n+        let mut should_wrap = false;\n+\n         if let Some(Expr {\n             kind:\n                 ExprKind::Match(\n                     _,\n                     arms,\n-                    MatchSource::IfDesugar {\n-                        contains_else_clause: true,\n-                    }\n-                    | MatchSource::IfLetDesugar {\n+                    MatchSource::IfLetDesugar {\n                         contains_else_clause: true,\n                     },\n                 ),\n             ..\n         }) = parent.expr\n         {\n-            expr.hir_id == arms[1].body.hir_id\n-        } else {\n-            false\n+            should_wrap = expr.hir_id == arms[1].body.hir_id;\n+        } else if let Some(Expr {\n+            kind: ExprKind::If(_, _, Some(else_clause)),\n+            ..\n+        }) = parent.expr\n+        {\n+            should_wrap = expr.hir_id == else_clause.hir_id;\n         }\n+\n+        should_wrap\n     })\n }\n "}, {"sha": "ed314937ce8beb219ef18d8c407f71acd048e870", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{is_automatically_derived, span_lint_hir};\n use if_chain::if_chain;\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -34,7 +34,7 @@ declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl{ of_trait: Some(ref trait_ref), items: impl_items, .. } = item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "d96a9b025f0890e449db1954d9eca346e5cfeac2", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::attr;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, ItemKind, MutTy, Mutability, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -246,7 +246,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "c6329a1381c909977e947e8f2cda63545bd1d590", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -8,8 +8,8 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n-    Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n+    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, Impl, ImplItem, ImplItemKind, Item,\n+    ItemKind, Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -132,7 +132,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n-                if let ItemKind::Impl { of_trait: Some(_), .. } = it.kind {\n+                if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }"}, {"sha": "6c480d48c7561245a0ab0150e49edcf1a5803f1b", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -8,7 +8,7 @@ use rustc_span::sym;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    eq_expr_value, higher, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n+    eq_expr_value, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n     span_lint_and_sugg,\n };\n \n@@ -50,7 +50,7 @@ impl QuestionMark {\n     /// If it matches, it will suggest to use the question mark operator instead\n     fn check_is_none_and_early_return_none(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let Some((if_expr, body, else_)) = higher::if_block(&expr);\n+            if let ExprKind::If(if_expr, body, else_) = &expr.kind;\n             if let ExprKind::MethodCall(segment, _, args, _) = &if_expr.kind;\n             if segment.ident.name == sym!(is_none);\n             if Self::expression_returns_none(cx, body);"}, {"sha": "63548d8fdb438f9546ceba10953573319811118c", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -184,6 +184,14 @@ fn check_final_expr<'tcx>(\n         ExprKind::Block(ref block, _) => {\n             check_block_return(cx, block);\n         },\n+        ExprKind::If(_, then, else_clause_opt) => {\n+            if let ExprKind::Block(ref ifblock, _) = then.kind {\n+                check_block_return(cx, ifblock);\n+            }\n+            if let Some(else_clause) = else_clause_opt {\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n+            }\n+        },\n         // a match expr, check all arms\n         // an if/if let expr, check both exprs\n         // note, if without else is going to be a type checking error anyways\n@@ -194,10 +202,7 @@ fn check_final_expr<'tcx>(\n                     check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n                 }\n             },\n-            MatchSource::IfDesugar {\n-                contains_else_clause: true,\n-            }\n-            | MatchSource::IfLetDesugar {\n+            MatchSource::IfLetDesugar {\n                 contains_else_clause: true,\n             } => {\n                 if let ExprKind::Block(ref ifblock, _) = arms[0].body.kind {\n@@ -212,6 +217,9 @@ fn check_final_expr<'tcx>(\n }\n \n fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Span>, replacement: RetReplacement) {\n+    if ret_span.from_expansion() {\n+        return;\n+    }\n     match inner_span {\n         Some(inner_span) => {\n             if in_external_macro(cx.tcx.sess, inner_span) || inner_span.from_expansion() {"}, {"sha": "44e739725c82055a5f991fe7f41ccc630fe13590", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{get_trait_def_id, paths, span_lint};\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -22,11 +22,11 @@ declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'tcx> LateLintPass<'tcx> for SerdeAPI {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(Impl {\n             of_trait: Some(ref trait_ref),\n             items,\n             ..\n-        } = item.kind\n+        }) = item.kind\n         {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {"}, {"sha": "24da056770c9d18366936e92f3440655ab70e1ae", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -333,6 +333,13 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n                 check_expr(cx, e, bindings)\n             }\n         },\n+        ExprKind::If(ref cond, ref then, ref otherwise) => {\n+            check_expr(cx, cond, bindings);\n+            check_expr(cx, &**then, bindings);\n+            if let Some(ref o) = *otherwise {\n+                check_expr(cx, o, bindings);\n+            }\n+        },\n         ExprKind::Match(ref init, arms, _) => {\n             check_expr(cx, init, bindings);\n             let len = bindings.len();"}, {"sha": "c53727ba160046861e6d446e428482f5b0986837", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind};\n+use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -111,7 +111,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n \n fn is_display_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     if_chain! {\n-        if let ItemKind::Impl { of_trait: Some(trait_ref), .. } = &item.kind;\n+        if let ItemKind::Impl(Impl { of_trait: Some(trait_ref), .. }) = &item.kind;\n         if let Some(did) = trait_ref.trait_def_id();\n         then {\n             match_def_path(cx, did, &paths::DISPLAY_TRAIT)"}, {"sha": "3b5a83d2a0bec7f0767718965bf42d845c101520", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -260,7 +260,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n-            if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n                 return;\n             }\n         }\n@@ -2572,21 +2572,16 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n         }\n \n         match item.kind {\n-            ItemKind::Impl {\n-                ref generics,\n-                self_ty: ref ty,\n-                ref items,\n-                ..\n-            } => {\n+            ItemKind::Impl(ref impl_) => {\n                 let mut vis = ImplicitHasherTypeVisitor::new(cx);\n-                vis.visit_ty(ty);\n+                vis.visit_ty(impl_.self_ty);\n \n                 for target in &vis.found {\n                     if differing_macro_contexts(item.span, target.span()) {\n                         return;\n                     }\n \n-                    let generics_suggestion_span = generics.span.substitute_dummy({\n+                    let generics_suggestion_span = impl_.generics.span.substitute_dummy({\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)));\n                         if let Some(pos) = pos {\n@@ -2597,7 +2592,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                     });\n \n                     let mut ctr_vis = ImplicitHasherConstructorVisitor::new(cx, target);\n-                    for item in items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n+                    for item in impl_.items.iter().map(|item| cx.tcx.hir().impl_item(item.id)) {\n                         ctr_vis.visit_impl_item(item);\n                     }\n \n@@ -2610,7 +2605,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                             target.type_name()\n                         ),\n                         move |diag| {\n-                            suggestion(cx, diag, generics.span, generics_suggestion_span, target, ctr_vis);\n+                            suggestion(cx, diag, impl_.generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n                     );\n                 }"}, {"sha": "8ac5dd696b7620d85216c281603c286582ed5411", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -5,7 +5,7 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n-use rustc_hir::{Body, ExprKind, FnDecl, HirId, ItemKind, Node};\n+use rustc_hir::{Body, ExprKind, FnDecl, HirId, Impl, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n             if matches!(\n                 item.kind,\n-                ItemKind::Impl { of_trait: Some(_), .. } | ItemKind::Trait(..)\n+                ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)\n             ) {\n                 return;\n             }"}, {"sha": "5349c4f7eb8a78251c51bd412f3171afdb46dd1a", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Path};\n+use rustc_hir::{HirId, Impl, ImplItem, ImplItemKind, ItemKind, Path};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         let assoc_item = cx.tcx.associated_item(def_id);\n         if_chain! {\n-            if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n+            if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n             let body = cx.tcx.hir().body(*body_id);"}, {"sha": "b82909eaea604fd780e6709967469dd20b08c960", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,6 +1,5 @@\n use crate::utils::{\n-    differing_macro_contexts, higher::if_block, is_type_diagnostic_item, span_lint_and_then,\n-    usage::is_potentially_mutated,\n+    differing_macro_contexts, is_type_diagnostic_item, span_lint_and_then, usage::is_potentially_mutated,\n };\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n@@ -158,7 +157,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         if in_external_macro(self.cx.tcx.sess, expr.span) {\n             return;\n         }\n-        if let Some((cond, then, els)) = if_block(&expr) {\n+        if let ExprKind::If(cond, then, els) = &expr.kind {\n             walk_expr(self, cond);\n             self.visit_branch(cond, then, false);\n             if let Some(els) = els {"}, {"sha": "72d1ca7392913f77040ef91ef531418c14e91640", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -181,8 +181,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl{ self_ty: ref item_type, items: refs, .. } = item.kind;\n-            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n+            if let ItemKind::Impl(impl_) = &item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, ref item_path)) = impl_.self_ty.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n                 let should_check = parameters.as_ref().map_or(\n@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     let impl_trait_ref = cx.tcx.impl_trait_ref(impl_def_id);\n \n                     if let Some(impl_trait_ref) = impl_trait_ref {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             if let ImplItemKind::Fn(FnSig{ decl: impl_decl, .. }, impl_body_id)\n                                     = &impl_item.kind {\n@@ -213,7 +213,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                             }\n                         }\n                     } else {\n-                        for impl_item_ref in refs {\n+                        for impl_item_ref in impl_.items {\n                             let impl_item = cx.tcx.hir().impl_item(impl_item_ref.id);\n                             visitor.visit_impl_item(impl_item);\n                         }"}, {"sha": "eac5d0aa3ee9d88203cd0af1023d5a7d39e94196", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -556,7 +556,7 @@ pub fn eq_mac_args(l: &MacArgs, r: &MacArgs) -> bool {\n     match (l, r) {\n         (Empty, Empty) => true,\n         (Delimited(_, ld, lts), Delimited(_, rd, rts)) => ld == rd && lts.eq_unspanned(rts),\n-        (Eq(_, lts), Eq(_, rts)) => lts.eq_unspanned(rts),\n+        (Eq(_, lt), Eq(_, rt)) => lt.kind == rt.kind,\n         _ => false,\n     }\n }"}, {"sha": "43afa65de3e5518a1bf9c701c1dddf224d7f8775", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::utils::{get_attr, higher};\n+use crate::utils::get_attr;\n use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n@@ -201,32 +201,6 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n \n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n-        // handle if desugarings\n-        // TODO add more desugarings here\n-        if let Some((cond, then, opt_else)) = higher::if_block(&expr) {\n-            let cond_pat = self.next(\"cond\");\n-            let then_pat = self.next(\"then\");\n-            if let Some(else_) = opt_else {\n-                let else_pat = self.next(\"else_\");\n-                println!(\n-                    \"    if let Some((ref {}, ref {}, Some({}))) = higher::if_block(&{});\",\n-                    cond_pat, then_pat, else_pat, self.current\n-                );\n-                self.current = else_pat;\n-                self.visit_expr(else_);\n-            } else {\n-                println!(\n-                    \"    if let Some((ref {}, ref {}, None)) = higher::if_block(&{});\",\n-                    cond_pat, then_pat, self.current\n-                );\n-            }\n-            self.current = cond_pat;\n-            self.visit_expr(cond);\n-            self.current = then_pat;\n-            self.visit_expr(then);\n-            return;\n-        }\n-\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.kind\", self.current);\n         match expr.kind {\n@@ -351,6 +325,25 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = body_pat;\n                 self.visit_block(body);\n             },\n+            ExprKind::If(ref cond, ref then, ref opt_else) => {\n+                let cond_pat = self.next(\"cond\");\n+                let then_pat = self.next(\"then\");\n+                if let Some(ref else_) = *opt_else {\n+                    let else_pat = self.next(\"else_\");\n+                    println!(\n+                        \"If(ref {}, ref {}, Some(ref {})) = {};\",\n+                        cond_pat, then_pat, else_pat, current\n+                    );\n+                    self.current = else_pat;\n+                    self.visit_expr(else_);\n+                } else {\n+                    println!(\"If(ref {}, ref {}, None) = {};\", cond_pat, then_pat, current);\n+                }\n+                self.current = cond_pat;\n+                self.visit_expr(cond);\n+                self.current = then_pat;\n+                self.visit_expr(then);\n+            },\n             ExprKind::Match(ref expr, ref arms, desugaring) => {\n                 let des = desugaring_name(desugaring);\n                 let expr_pat = self.next(\"expr\");\n@@ -743,10 +736,6 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             contains_else_clause\n         ),\n         hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n-        hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n-            \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n-            contains_else_clause\n-        ),\n         hir::MatchSource::AwaitDesugar => \"MatchSource::AwaitDesugar\".to_string(),\n     }\n }"}, {"sha": "2f157c5030f4466be1ba2cd83068702e95f85210", "filename": "clippy_lints/src/utils/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Feager_or_lazy.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -62,6 +62,7 @@ fn identify_some_pure_patterns(expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(..)\n         | ExprKind::DropTemps(..)\n         | ExprKind::Loop(..)\n+        | ExprKind::If(..)\n         | ExprKind::Match(..)\n         | ExprKind::Closure(..)\n         | ExprKind::Block(..)"}, {"sha": "9b3585865da3236c0c7523a2a1058131b5b21542", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -170,33 +170,6 @@ pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<\n     None\n }\n \n-/// Recover the essential nodes of a desugared if block\n-/// `if cond { then } else { els }` becomes `(cond, then, Some(els))`\n-pub fn if_block<'tcx>(\n-    expr: &'tcx hir::Expr<'tcx>,\n-) -> Option<(\n-    &'tcx hir::Expr<'tcx>,\n-    &'tcx hir::Expr<'tcx>,\n-    Option<&'tcx hir::Expr<'tcx>>,\n-)> {\n-    if let hir::ExprKind::Match(ref cond, ref arms, hir::MatchSource::IfDesugar { contains_else_clause }) = expr.kind {\n-        let cond = if let hir::ExprKind::DropTemps(ref cond) = cond.kind {\n-            cond\n-        } else {\n-            panic!(\"If block desugar must contain DropTemps\");\n-        };\n-        let then = &arms[0].body;\n-        let els = if contains_else_clause {\n-            Some(&*arms[1].body)\n-        } else {\n-            None\n-        };\n-        Some((cond, then, els))\n-    } else {\n-        None\n-    }\n-}\n-\n /// Represent the pre-expansion arguments of a `vec!` invocation.\n pub enum VecArgs<'a> {\n     /// `vec![elem; len]`\n@@ -267,12 +240,11 @@ pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx\n \n     if let ExprKind::Block(ref block, _) = e.kind {\n         if block.stmts.len() == 1 {\n-            if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind {\n+            if let StmtKind::Semi(ref matchexpr) = block.stmts.get(0)?.kind {\n                 // macros with unique arg: `{debug_}assert!` (e.g., `debug_assert!(some_condition)`)\n                 if_chain! {\n-                    if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n-                    if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n-                    if let ExprKind::Unary(UnOp::UnNot, condition) = droptmp.kind;\n+                    if let ExprKind::If(ref clause, _, _)  = matchexpr.kind;\n+                    if let ExprKind::Unary(UnOp::UnNot, condition) = clause.kind;\n                     then {\n                         return Some(vec![condition]);\n                     }"}, {"sha": "10120a8805db25b6c64b618fac0568a075458fb8", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -119,6 +119,9 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             (&ExprKind::Index(ref la, ref li), &ExprKind::Index(ref ra, ref ri)) => {\n                 self.eq_expr(la, ra) && self.eq_expr(li, ri)\n             },\n+            (&ExprKind::If(ref lc, ref lt, ref le), &ExprKind::If(ref rc, ref rt, ref re)) => {\n+                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+            },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n                 lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n@@ -563,6 +566,15 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(i.ident.name);\n                 }\n             },\n+            ExprKind::If(ref cond, ref then, ref else_opt) => {\n+                let c: fn(_, _, _) -> _ = ExprKind::If;\n+                c.hash(&mut self.s);\n+                self.hash_expr(cond);\n+                self.hash_expr(&**then);\n+                if let Some(ref e) = *else_opt {\n+                    self.hash_expr(e);\n+                }\n+            },\n             ExprKind::Match(ref e, arms, ref s) => {\n                 self.hash_expr(e);\n \n@@ -743,7 +755,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                     for segment in path.segments {\n                         segment.ident.name.hash(&mut self.s);\n-                        self.hash_generic_args(segment.generic_args().args);\n+                        self.hash_generic_args(segment.args().args);\n                     }\n                 },\n                 QPath::TypeRelative(ref ty, ref segment) => {"}, {"sha": "9bec24be9e4ebc7e89da87cd09837b517733c0ce", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -213,6 +213,15 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n         hir::ExprKind::Loop(..) => {\n             println!(\"{}Loop\", ind);\n         },\n+        hir::ExprKind::If(ref cond, _, ref else_opt) => {\n+            println!(\"{}If\", ind);\n+            println!(\"{}condition:\", ind);\n+            print_expr(cx, cond, indent + 1);\n+            if let Some(ref els) = *else_opt {\n+                println!(\"{}else:\", ind);\n+                print_expr(cx, els, indent + 1);\n+            }\n+        },\n         hir::ExprKind::Match(ref cond, _, ref source) => {\n             println!(\"{}Match\", ind);\n             println!(\"{}condition:\", ind);\n@@ -423,13 +432,13 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n         hir::ItemKind::TraitAlias(..) => {\n             println!(\"trait alias\");\n         },\n-        hir::ItemKind::Impl {\n+        hir::ItemKind::Impl(hir::Impl {\n             of_trait: Some(ref _trait_ref),\n             ..\n-        } => {\n+        }) => {\n             println!(\"trait impl\");\n         },\n-        hir::ItemKind::Impl { of_trait: None, .. } => {\n+        hir::ItemKind::Impl(hir::Impl { of_trait: None, .. }) => {\n             println!(\"impl\");\n         },\n     }"}, {"sha": "7aa17520ba79f3070d206eb851cb5aa8bfff6c42", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -377,11 +377,11 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n         } else if is_expn_of(item.span, \"impl_lint_pass\").is_some()\n             || is_expn_of(item.span, \"declare_lint_pass\").is_some()\n         {\n-            if let hir::ItemKind::Impl {\n+            if let hir::ItemKind::Impl(hir::Impl {\n                 of_trait: None,\n                 items: ref impl_item_refs,\n                 ..\n-            } = item.kind\n+            }) = item.kind\n             {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,"}, {"sha": "548c4f7510ad5f169554e50182faf0db7943934c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -439,8 +439,8 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     if_chain! {\n         if parent_impl != hir::CRATE_HIR_ID;\n         if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n-        if let hir::ItemKind::Impl{ of_trait: trait_ref, .. } = &item.kind;\n-        then { return trait_ref.as_ref(); }\n+        if let hir::ItemKind::Impl(impl_) = &item.kind;\n+        then { return impl_.of_trait.as_ref(); }\n     }\n     None\n }\n@@ -1405,7 +1405,7 @@ pub fn if_sequence<'tcx>(\n     let mut conds = SmallVec::new();\n     let mut blocks: SmallVec<[&Block<'_>; 1]> = SmallVec::new();\n \n-    while let Some((ref cond, ref then_expr, ref else_expr)) = higher::if_block(&expr) {\n+    while let ExprKind::If(ref cond, ref then_expr, ref else_expr) = expr.kind {\n         conds.push(&**cond);\n         if let ExprKind::Block(ref block, _) = then_expr.kind {\n             blocks.push(block);\n@@ -1434,12 +1434,13 @@ pub fn parent_node_is_if_expr(expr: &Expr<'_>, cx: &LateContext<'_>) -> bool {\n     let map = cx.tcx.hir();\n     let parent_id = map.get_parent_node(expr.hir_id);\n     let parent_node = map.get(parent_id);\n-\n-    match parent_node {\n-        Node::Expr(e) => higher::if_block(&e).is_some(),\n-        Node::Arm(e) => higher::if_block(&e.body).is_some(),\n-        _ => false,\n-    }\n+    matches!(\n+        parent_node,\n+        Node::Expr(Expr {\n+            kind: ExprKind::If(_, _, _),\n+            ..\n+        })\n+    )\n }\n \n // Finds the attribute with the given name, if any\n@@ -1530,7 +1531,7 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-        matches!(item.kind, ItemKind::Impl { of_trait: Some(_), .. })\n+        matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false\n     }"}, {"sha": "03678db575f0daceef3b58445d55d80c0172b6fd", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -103,6 +103,7 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n+            | hir::ExprKind::If(..)\n             | hir::ExprKind::Closure(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),"}, {"sha": "ebf69df31ca41e3702b00a1a91461b980ede5e72", "filename": "clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -101,6 +101,13 @@ where\n                 }\n             } else {\n                 match expr.kind {\n+                    hir::ExprKind::If(cond, then, else_opt) => {\n+                        self.inside_stmt(true).visit_expr(cond);\n+                        self.visit_expr(then);\n+                        if let Some(el) = else_opt {\n+                            self.visit_expr(el);\n+                        }\n+                    },\n                     hir::ExprKind::Match(cond, arms, _) => {\n                         self.inside_stmt(true).visit_expr(cond);\n                         for arm in arms {"}, {"sha": "9761e822a7a007ab55d9601b084e1b7aab8dca99", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -62,7 +62,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n     if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n-        if let ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+        if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }\n     }"}, {"sha": "72935072f8cdd8197181979da474f679f87dd221", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-01-02\"\n+channel = \"nightly-2021-01-15\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "cac64a3f40b41fbd3052577107cdb6fd8cb86779", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -1,7 +1,7 @@\n if_chain! {\n     if let StmtKind::Local(ref local) = stmt.kind;\n     if let Some(ref init) = local.init;\n-    if let Some((ref cond, ref then, Some(else_))) = higher::if_block(&init);\n+    if let ExprKind::If(ref cond, ref then, Some(ref else_)) = init.kind;\n     if let ExprKind::Block(ref block) = else_.kind;\n     if let Some(trailing_expr) = &block.expr;\n     if block.stmts.len() == 1;"}, {"sha": "86bfc5b4bb28377f1b462b6d87eb22de2bb8e2cb", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -86,6 +86,21 @@ fn borrows_but_not_last(value: bool) -> String {\n     }\n }\n \n+macro_rules! needed_return {\n+    ($e:expr) => {\n+        if $e > 3 {\n+            return;\n+        }\n+    };\n+}\n+\n+fn test_return_in_macro() {\n+    // This will return and the macro below won't be executed. Removing the `return` from the macro\n+    // will change semantics.\n+    needed_return!(10);\n+    needed_return!(0);\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "51061370dfe74a8f6f2f0d9388e94ebeb4cd99ec", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -86,6 +86,21 @@ fn borrows_but_not_last(value: bool) -> String {\n     }\n }\n \n+macro_rules! needed_return {\n+    ($e:expr) => {\n+        if $e > 3 {\n+            return;\n+        }\n+    };\n+}\n+\n+fn test_return_in_macro() {\n+    // This will return and the macro below won't be executed. Removing the `return` from the macro\n+    // will change semantics.\n+    needed_return!(10);\n+    needed_return!(0);\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_no_semicolon();"}, {"sha": "a17f043737d4e009fae59b46d62399e6c8ae3a5d", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:9:9\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`"}, {"sha": "76b6126c76c6a640b98491587f721a592aece397", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953f024793dab92745fee9cd2c4dee6a60451771/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=953f024793dab92745fee9cd2c4dee6a60451771", "patch": "@@ -28,10 +28,11 @@ fn check_that_clippy_has_the_same_major_version_as_rustc() {\n     let clippy_minor = clippy_version.minor;\n     let clippy_patch = clippy_version.patch;\n \n-    // get the rustc version\n-    // this way the rust-toolchain file version is honored\n+    // get the rustc version either from the rustc installed with the toolchain file or from\n+    // `RUSTC_REAL` if Clippy is build in the Rust repo with `./x.py`.\n+    let rustc = std::env::var(\"RUSTC_REAL\").unwrap_or_else(|_| \"rustc\".to_string());\n     let rustc_version = String::from_utf8(\n-        std::process::Command::new(\"rustc\")\n+        std::process::Command::new(&rustc)\n             .arg(\"--version\")\n             .output()\n             .expect(\"failed to run `rustc --version`\")"}]}