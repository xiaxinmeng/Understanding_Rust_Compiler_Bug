{"sha": "6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzg3MmExNGM3M2E3NGM1NWUwODU0NjQxZjRkZmU1ZTNiNzAwMGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-10T18:01:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-15T15:17:21Z"}, "message": "Make the libstd build script smaller\n\nRemove all rustc-link-lib from the std build script. Also remove use of\nfeature = \"restricted-std\" where not necessary.", "tree": {"sha": "9624e44dbd356489fd6e3913097f8d7bd61a0736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9624e44dbd356489fd6e3913097f8d7bd61a0736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "html_url": "https://github.com/rust-lang/rust/commit/6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9cf7c923eb01146971429044f216a3ca905e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9cf7c923eb01146971429044f216a3ca905e06", "html_url": "https://github.com/rust-lang/rust/commit/cf9cf7c923eb01146971429044f216a3ca905e06"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "f730569f74b0ee8273a02f0053108a7fd2162f5d", "filename": "library/std/build.rs", "status": "modified", "additions": 14, "deletions": 57, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "patch": "@@ -3,66 +3,23 @@ use std::env;\n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n-    if target.contains(\"linux\") {\n-        if target.contains(\"android\") {\n-            println!(\"cargo:rustc-link-lib=dl\");\n-            println!(\"cargo:rustc-link-lib=log\");\n-            println!(\"cargo:rustc-link-lib=gcc\");\n-        }\n-    } else if target.contains(\"freebsd\") {\n-        println!(\"cargo:rustc-link-lib=execinfo\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n+    if target.contains(\"freebsd\") {\n         if env::var(\"RUST_STD_FREEBSD_12_ABI\").is_ok() {\n             println!(\"cargo:rustc-cfg=freebsd12\");\n         }\n-    } else if target.contains(\"netbsd\") {\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=rt\");\n-    } else if target.contains(\"dragonfly\") || target.contains(\"openbsd\") {\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-    } else if target.contains(\"solaris\") {\n-        println!(\"cargo:rustc-link-lib=socket\");\n-        println!(\"cargo:rustc-link-lib=posix4\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"illumos\") {\n-        println!(\"cargo:rustc-link-lib=socket\");\n-        println!(\"cargo:rustc-link-lib=posix4\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-        println!(\"cargo:rustc-link-lib=nsl\");\n-        // Use libumem for the (malloc-compatible) allocator\n-        println!(\"cargo:rustc-link-lib=umem\");\n-    } else if target.contains(\"apple-darwin\") {\n-        println!(\"cargo:rustc-link-lib=System\");\n-\n-        // res_init and friends require -lresolv on macOS/iOS.\n-        // See #41582 and http://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"apple-ios\") {\n-        println!(\"cargo:rustc-link-lib=System\");\n-        println!(\"cargo:rustc-link-lib=objc\");\n-        println!(\"cargo:rustc-link-lib=framework=Security\");\n-        println!(\"cargo:rustc-link-lib=framework=Foundation\");\n-        println!(\"cargo:rustc-link-lib=resolv\");\n-    } else if target.contains(\"uwp\") {\n-        println!(\"cargo:rustc-link-lib=ws2_32\");\n-        // For BCryptGenRandom\n-        println!(\"cargo:rustc-link-lib=bcrypt\");\n-    } else if target.contains(\"windows\") {\n-        println!(\"cargo:rustc-link-lib=advapi32\");\n-        println!(\"cargo:rustc-link-lib=ws2_32\");\n-        println!(\"cargo:rustc-link-lib=userenv\");\n-    } else if target.contains(\"fuchsia\") {\n-        println!(\"cargo:rustc-link-lib=zircon\");\n-        println!(\"cargo:rustc-link-lib=fdio\");\n-    } else if target.contains(\"cloudabi\") {\n-        if cfg!(feature = \"backtrace\") {\n-            println!(\"cargo:rustc-link-lib=unwind\");\n-        }\n-        println!(\"cargo:rustc-link-lib=c\");\n-        println!(\"cargo:rustc-link-lib=compiler_rt\");\n-    } else if (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n+    } else if target.contains(\"linux\")\n+        || target.contains(\"netbsd\")\n+        || target.contains(\"dragonfly\")\n+        || target.contains(\"openbsd\")\n+        || target.contains(\"solaris\")\n+        || target.contains(\"illumos\")\n+        || target.contains(\"apple-darwin\")\n+        || target.contains(\"apple-ios\")\n+        || target.contains(\"uwp\")\n+        || target.contains(\"windows\")\n+        || target.contains(\"fuchsia\")\n+        || target.contains(\"cloudabi\")\n+        || (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n         || target.contains(\"hermit\")\n         || target.contains(\"l4re\")\n         || target.contains(\"redox\")"}, {"sha": "b73fb6ea8290a0b8601e0dff9e1d3be81de25c4e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "patch": "@@ -563,5 +563,5 @@ include!(\"keyword_docs.rs\");\n // This is required to avoid an unstable error when `restricted-std` is not\n // enabled. The use of #![feature(restricted_std)] in rustc-std-workspace-std\n // is unconditional, so the unstable feature needs to be defined somewhere.\n-#[cfg_attr(not(feature = \"restricted-std\"), unstable(feature = \"restricted_std\", issue = \"none\"))]\n+#[unstable(feature = \"restricted_std\", issue = \"none\")]\n mod __restricted_std_workaround {}"}, {"sha": "b4a9246ca4e0def0b56fce39aaccc189cfecc60a", "filename": "library/std/src/sys/cloudabi/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs?ref=6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "patch": "@@ -66,3 +66,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n         v.assume_init()\n     }\n }\n+\n+#[cfg_attr(feature = \"backtrace\", link(name = \"unwind\"))]\n+#[link(name = \"c\")]\n+#[link(name = \"compiler_rt\")]\n+extern \"C\" {}"}, {"sha": "5437fd51c633ec0e7cee6b6fc7474a266fb3eb3f", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "patch": "@@ -234,3 +234,55 @@ pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n pub fn abort_internal() -> ! {\n     unsafe { libc::abort() }\n }\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"android\")] {\n+        #[link(name = \"dl\")]\n+        #[link(name = \"log\")]\n+        #[link(name = \"gcc\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"freebsd\")] {\n+        #[link(name = \"execinfo\")]\n+        #[link(name = \"pthread\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"netbsd\")] {\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"rt\")]\n+        extern \"C\" {}\n+    } else if #[cfg(any(target_os = \"dragonfly\", target_os = \"openbsd\"))] {\n+        #[link(name = \"pthread\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"solaris\")] {\n+        #[link(name = \"socket\")]\n+        #[link(name = \"posix4\")]\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"illumos\")] {\n+        #[link(name = \"socket\")]\n+        #[link(name = \"posix4\")]\n+        #[link(name = \"pthread\")]\n+        #[link(name = \"resolv\")]\n+        #[link(name = \"nsl\")]\n+        // Use libumem for the (malloc-compatible) allocator\n+        #[link(name = \"umem\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"macos\")] {\n+        #[link(name = \"System\")]\n+        // res_init and friends require -lresolv on macOS/iOS.\n+        // See #41582 and http://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"ios\")] {\n+        #[link(name = \"System\")]\n+        #[link(name = \"objc\")]\n+        #[link(name = \"Security\", kind = \"framework\")]\n+        #[link(name = \"Foundation\", kind = \"framework\")]\n+        #[link(name = \"resolv\")]\n+        extern \"C\" {}\n+    } else if #[cfg(target_os = \"fuchsia\")] {\n+        #[link(name = \"zircon\")]\n+        #[link(name = \"fdio\")]\n+        extern \"C\" {}\n+    }\n+}"}, {"sha": "c36c6196d79e0d766fc1cfa554df706ebca83b3a", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3872a14c73a74c55e0854641f4dfe5e3b7000e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=6f3872a14c73a74c55e0854641f4dfe5e3b7000e", "patch": "@@ -270,3 +270,17 @@ pub fn abort_internal() -> ! {\n     }\n     crate::intrinsics::abort();\n }\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_vendor = \"uwp\")] {\n+        #[link(name = \"ws2_32\")]\n+        // For BCryptGenRandom\n+        #[link(name = \"bcrypt\")]\n+        extern \"C\" {}\n+    } else {\n+        #[link(name = \"advapi32\")]\n+        #[link(name = \"ws2_32\")]\n+        #[link(name = \"userenv\")]\n+        extern \"C\" {}\n+    }\n+}"}]}