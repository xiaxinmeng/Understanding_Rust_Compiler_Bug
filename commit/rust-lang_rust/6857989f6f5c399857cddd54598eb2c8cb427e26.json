{"sha": "6857989f6f5c399857cddd54598eb2c8cb427e26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NTc5ODlmNmY1YzM5OTg1N2NkZGQ1NDU5OGViMmM4Y2I0MjdlMjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-09T16:29:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-09T16:30:46Z"}, "message": "Fix \"no value set for FileTextQuery(FileId(..))\"", "tree": {"sha": "7e812577ff0116ae303b1bb2b710ffd8e19cc352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e812577ff0116ae303b1bb2b710ffd8e19cc352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6857989f6f5c399857cddd54598eb2c8cb427e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6857989f6f5c399857cddd54598eb2c8cb427e26", "html_url": "https://github.com/rust-lang/rust/commit/6857989f6f5c399857cddd54598eb2c8cb427e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6857989f6f5c399857cddd54598eb2c8cb427e26/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb", "html_url": "https://github.com/rust-lang/rust/commit/42be522c80cf0cc2d49b60f3c1d66afdc51fcbbb"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "e5ab6c73bba96511561f42cbe002302b5a7aa423", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=6857989f6f5c399857cddd54598eb2c8cb427e26", "patch": "@@ -73,7 +73,7 @@ fn load(\n             }\n             vfs::loader::Message::Loaded { files } => {\n                 for (path, contents) in files {\n-                    vfs.set_file_contents(path.into(), contents)\n+                    vfs.set_file_contents(path.into(), contents);\n                 }\n             }\n         }"}, {"sha": "d7f8374af7d5003bceda60aa71f6daa758527ebd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6857989f6f5c399857cddd54598eb2c8cb427e26", "patch": "@@ -255,7 +255,7 @@ impl GlobalState {\n                             for (path, contents) in files {\n                                 let path = VfsPath::from(path);\n                                 if !self.mem_docs.contains_key(&path) {\n-                                    vfs.set_file_contents(path, contents)\n+                                    vfs.set_file_contents(path, contents);\n                                 }\n                             }\n                         }\n@@ -503,11 +503,21 @@ impl GlobalState {\n                     {\n                         log::error!(\"duplicate DidOpenTextDocument: {}\", path)\n                     }\n-                    this.vfs\n+                    let changed = this\n+                        .vfs\n                         .write()\n                         .0\n                         .set_file_contents(path, Some(params.text_document.text.into_bytes()));\n-                    this.maybe_update_diagnostics();\n+\n+                    // If the VFS contents are unchanged, update diagnostics, since `handle_event`\n+                    // won't see any changes. This avoids missing diagnostics when opening a file.\n+                    //\n+                    // If the file *was* changed, `handle_event` will already recompute and send\n+                    // diagnostics. We can't do it here, since the *current* file contents might be\n+                    // unset in salsa, since the VFS change hasn't been applied to the database yet.\n+                    if !changed {\n+                        this.maybe_update_diagnostics();\n+                    }\n                 }\n                 Ok(())\n             })?"}, {"sha": "a2c6a34000957a5a02509c0e7252b641d61fe96c", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6857989f6f5c399857cddd54598eb2c8cb427e26/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=6857989f6f5c399857cddd54598eb2c8cb427e26", "patch": "@@ -99,18 +99,19 @@ impl Vfs {\n                 (file_id, path)\n             })\n     }\n-    pub fn set_file_contents(&mut self, path: VfsPath, contents: Option<Vec<u8>>) {\n+    pub fn set_file_contents(&mut self, path: VfsPath, contents: Option<Vec<u8>>) -> bool {\n         let file_id = self.alloc_file_id(path);\n         let change_kind = match (&self.get(file_id), &contents) {\n-            (None, None) => return,\n+            (None, None) => return false,\n             (None, Some(_)) => ChangeKind::Create,\n             (Some(_), None) => ChangeKind::Delete,\n-            (Some(old), Some(new)) if old == new => return,\n+            (Some(old), Some(new)) if old == new => return false,\n             (Some(_), Some(_)) => ChangeKind::Modify,\n         };\n \n         *self.get_mut(file_id) = contents;\n-        self.changes.push(ChangedFile { file_id, change_kind })\n+        self.changes.push(ChangedFile { file_id, change_kind });\n+        true\n     }\n     pub fn has_changes(&self) -> bool {\n         !self.changes.is_empty()"}]}