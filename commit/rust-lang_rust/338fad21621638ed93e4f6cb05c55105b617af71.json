{"sha": "338fad21621638ed93e4f6cb05c55105b617af71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGZhZDIxNjIxNjM4ZWQ5M2U0ZjZjYjA1YzU1MTA1YjYxN2FmNzE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-09T09:22:54Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-14T02:14:32Z"}, "message": "Remove unused code from rustc_query_system", "tree": {"sha": "ef429202fa5d33f819d616e552fbf1a6c596959e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef429202fa5d33f819d616e552fbf1a6c596959e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338fad21621638ed93e4f6cb05c55105b617af71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338fad21621638ed93e4f6cb05c55105b617af71", "html_url": "https://github.com/rust-lang/rust/commit/338fad21621638ed93e4f6cb05c55105b617af71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338fad21621638ed93e4f6cb05c55105b617af71/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c", "html_url": "https://github.com/rust-lang/rust/commit/9ed2177d86f7d80dbd6ce23ab009cd3dc716492c"}], "stats": {"total": 28, "additions": 1, "deletions": 27}, "files": [{"sha": "7808a28dff0b7ed220cb17f4eb0359f437b8c484", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=338fad21621638ed93e4f6cb05c55105b617af71", "patch": "@@ -165,10 +165,6 @@ impl WorkProductId {\n         cgu_name.hash(&mut hasher);\n         WorkProductId { hash: hasher.finish() }\n     }\n-\n-    pub fn from_fingerprint(fingerprint: Fingerprint) -> WorkProductId {\n-        WorkProductId { hash: fingerprint }\n-    }\n }\n \n impl<HCX> HashStable<HCX> for WorkProductId {"}, {"sha": "85335f0ba50c2a5db1bafc607749955122e4bd32", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=338fad21621638ed93e4f6cb05c55105b617af71", "patch": "@@ -402,11 +402,6 @@ impl<K: DepKind> DepGraph<K> {\n         self.data.as_ref().unwrap().previous.fingerprint_of(dep_node)\n     }\n \n-    #[inline]\n-    pub fn prev_dep_node_index_of(&self, dep_node: &DepNode<K>) -> SerializedDepNodeIndex {\n-        self.data.as_ref().unwrap().previous.node_to_index(dep_node)\n-    }\n-\n     /// Checks whether a previous work product exists for `v` and, if\n     /// so, return the path that leads to it. Used to skip doing work.\n     pub fn previous_work_product(&self, v: &WorkProductId) -> Option<WorkProduct> {"}, {"sha": "a27b716b95aee5fcbc0e84ef11676c6b71e9db0c", "filename": "compiler/rustc_query_system/src/dep_graph/query.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338fad21621638ed93e4f6cb05c55105b617af71/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs?ref=338fad21621638ed93e4f6cb05c55105b617af71", "patch": "@@ -1,7 +1,5 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::graph::implementation::{\n-    Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n-};\n+use rustc_data_structures::graph::implementation::{Direction, Graph, NodeIndex, INCOMING};\n \n use super::{DepKind, DepNode};\n \n@@ -52,23 +50,8 @@ impl<K: DepKind> DepGraphQuery<K> {\n         }\n     }\n \n-    /// All nodes reachable from `node`. In other words, things that\n-    /// will have to be recomputed if `node` changes.\n-    pub fn transitive_successors(&self, node: &DepNode<K>) -> Vec<&DepNode<K>> {\n-        self.reachable_nodes(node, OUTGOING)\n-    }\n-\n     /// All nodes that can reach `node`.\n     pub fn transitive_predecessors(&self, node: &DepNode<K>) -> Vec<&DepNode<K>> {\n         self.reachable_nodes(node, INCOMING)\n     }\n-\n-    /// Just the outgoing edges from `node`.\n-    pub fn immediate_successors(&self, node: &DepNode<K>) -> Vec<&DepNode<K>> {\n-        if let Some(&index) = self.indices.get(&node) {\n-            self.graph.successor_nodes(index).map(|s| self.graph.node_data(s)).collect()\n-        } else {\n-            vec![]\n-        }\n-    }\n }"}]}