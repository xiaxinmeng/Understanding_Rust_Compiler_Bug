{"sha": "fe83ef323cec57465948bdba654201eed22c3355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlODNlZjMyM2NlYzU3NDY1OTQ4YmRiYTY1NDIwMWVlZDIyYzMzNTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T11:09:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-23T11:09:17Z"}, "message": "also run compile-fail tests with and without optimizations", "tree": {"sha": "7c91415a3b3f20b733bea79c6420c4c87a3a0321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c91415a3b3f20b733bea79c6420c4c87a3a0321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe83ef323cec57465948bdba654201eed22c3355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe83ef323cec57465948bdba654201eed22c3355", "html_url": "https://github.com/rust-lang/rust/commit/fe83ef323cec57465948bdba654201eed22c3355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe83ef323cec57465948bdba654201eed22c3355/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc328f6374263f0c4aa9f37b9965e25b25b0515f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc328f6374263f0c4aa9f37b9965e25b25b0515f", "html_url": "https://github.com/rust-lang/rust/commit/cc328f6374263f0c4aa9f37b9965e25b25b0515f"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "316316351863ac4754f00e44d0d8aa48c0e47bef", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -446,6 +446,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 // A mut got transmuted to shr.  High time we freeze this location!\n                 // Make this a delayed reborrow.  Redundant reborows to shr are okay,\n                 // so we do not have to be worried about doing too much.\n+                // FIXME: Reconsider if we really want to mutate things while doing just a deref,\n+                // which, in particular, validation does.\n                 trace!(\"tag_dereference: Lazy freezing of {:?}\", ptr);\n                 return self.tag_reference(ptr, pointee_ty, size, ref_kind);\n             }"}, {"sha": "83132195fe465e349266602dd25db39a43a2d177", "filename": "tests/compile-fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -1,3 +1,6 @@\n+// With optimizations, we just store a raw in `x`, and there is no problem.\n+// compile-flags: -Zmir-opt-level=0\n+\n #![allow(unused_variables)]\n \n // This makes a ref that was passed to us via &mut alias with things it should not alias with"}, {"sha": "9e94aa8885d2c6d92c921cd8785172ff811cc7a0", "filename": "tests/compile-fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: Without retagging, optimization kills finding this problem\n+// compile-flags: -Zmir-opt-level=0\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "9fbcec4a8ef80eb7b19cf3b20236fbcc0583aa98", "filename": "tests/compile-fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -1,3 +1,6 @@\n+// FIXME: Without retagging, optimization kills finding this problem\n+// compile-flags: -Zmir-opt-level=0\n+\n #![allow(unused_variables)]\n \n mod safe {"}, {"sha": "ac9c3397f5348618480950bb089f848745091194", "filename": "tests/compile-fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fillegal_write2.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -1,3 +1,6 @@\n+// The reborow gets optimized away, so we can only detect this issue without optimizations\n+// compile-flags: -Zmir-opt-level=0\n+\n #![allow(unused_variables)]\n \n fn main() {"}, {"sha": "8070f817bcf6a72159a453b7a107b055d6b24ed4", "filename": "tests/compiletest.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -37,7 +37,7 @@ fn have_fullmir() -> bool {\n     std::env::var(\"MIRI_SYSROOT\").is_ok() || rustc_test_suite().is_some()\n }\n \n-fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool) {\n+fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n         eprintln!(\"{}\", format!(\n             \"## Skipping compile-fail tests in {} against miri for target {} due to missing mir\",\n@@ -47,24 +47,34 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n         return;\n     }\n \n+    let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\"{}\", format!(\n-        \"## Running compile-fail tests in {} against miri for target {}\",\n+        \"## Running compile-fail tests in {} against miri for target {}{}\",\n         path,\n-        target\n+        target,\n+        opt_str\n     ).green().bold());\n+\n+    let mut flags = Vec::new();\n+    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"-Zmir-emit-validate=1\".to_owned());\n+    if opt {\n+        // Optimizing too aggressivley makes UB detection harder, but test at least\n+        // the default value.\n+        flags.push(\"-Zmir-opt-level=1\".to_owned());\n+    } else {\n+        flags.push(\"-Zmir-opt-level=0\".to_owned());\n+    }\n+\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n-    let mut flags = Vec::new();\n     if rustc_test_suite().is_some() {\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n-    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n-    flags.push(\"-Zmir-opt-level=0\".to_owned()); // optimization circumvents some stacked borrow checks\n-    flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n@@ -88,19 +98,11 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         target,\n         opt_str\n     ).green().bold());\n-    let mut config = compiletest::Config::default().tempdir();\n-    config.mode = \"ui\".parse().expect(\"Invalid mode\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.host = host.to_owned();\n-    config.rustc_path = miri_path();\n-    if rustc_test_suite().is_some() {\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n-    }\n+\n     let mut flags = Vec::new();\n     flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     if opt {\n         // FIXME: Using level 1 (instead of 3) for now, as the optimizer is pretty broken\n         // and crashes...\n@@ -109,8 +111,17 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     } else {\n         flags.push(\"-Zmir-opt-level=0\".to_owned());\n-        // For now, only validate without optimizations.  Inlining breaks validation.\n-        flags.push(\"-Zmir-emit-validate=1\".to_owned());\n+    }\n+\n+    let mut config = compiletest::Config::default().tempdir();\n+    config.mode = \"ui\".parse().expect(\"Invalid mode\");\n+    config.src_base = PathBuf::from(path);\n+    config.target = target.to_owned();\n+    config.host = host.to_owned();\n+    config.rustc_path = miri_path();\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n     }\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n@@ -173,13 +184,13 @@ fn run_pass_miri(opt: bool) {\n     miri_pass(&sysroot, \"tests/run-pass-fullmir\", &host, &host, true, opt);\n }\n \n-fn compile_fail_miri() {\n+fn compile_fail_miri(opt: bool) {\n     let sysroot = get_sysroot();\n     let host = get_host();\n \n     // FIXME: run tests for other targets, too\n-    compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, false);\n-    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n+    compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, false, opt);\n+    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true, opt);\n }\n \n #[test]\n@@ -191,5 +202,6 @@ fn test() {\n     run_pass_miri(false);\n     run_pass_miri(true);\n \n-    compile_fail_miri();\n+    compile_fail_miri(false);\n+    compile_fail_miri(true);\n }"}, {"sha": "0264099eb68dc338a95acba2c16bb75cabf3aff8", "filename": "tests/run-pass-fullmir/integer-ops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe83ef323cec57465948bdba654201eed22c3355/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe83ef323cec57465948bdba654201eed22c3355/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Finteger-ops.rs?ref=fe83ef323cec57465948bdba654201eed22c3355", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: remove -Zmir-opt-level once https://github.com/rust-lang/rust/issues/43359 is fixed\n-// compile-flags: -Zmir-opt-level=0\n-\n use std::i32;\n \n pub fn main() {"}]}