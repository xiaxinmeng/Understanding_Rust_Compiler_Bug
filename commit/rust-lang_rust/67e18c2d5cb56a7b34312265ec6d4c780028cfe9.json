{"sha": "67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTE4YzJkNWNiNTZhN2IzNDMxMjI2NWVjNmQ0Yzc4MDAyOGNmZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T15:05:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-01T15:05:16Z"}, "message": "Auto merge of #5993 - taiki-e:default_trait_access, r=phansch\n\ndefault_trait_access: Fix wrong suggestion\n\nhttps://github.com/rust-lang/rust-clippy/issues/5975#issuecomment-683751131\n> I think the underlying problem is clippy suggests code with complete parameters, not clippy triggers this lint even for complex types. AFAIK, If code compiles with `Default::default`, it doesn't need to specify any parameters, as type inference is working. (So, in this case, `default_trait_access` should suggest `RefCell::default`.)\n\nFixes #5975 Fixes #5990\n\nchangelog: `default_trait_access`: fixed wrong suggestion", "tree": {"sha": "432e0723fa55d33e1e22ed8cc9f692206ab04d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432e0723fa55d33e1e22ed8cc9f692206ab04d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "html_url": "https://github.com/rust-lang/rust/commit/67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066f105d679d2c120ad92baf19a10337c446e794", "url": "https://api.github.com/repos/rust-lang/rust/commits/066f105d679d2c120ad92baf19a10337c446e794", "html_url": "https://github.com/rust-lang/rust/commit/066f105d679d2c120ad92baf19a10337c446e794"}, {"sha": "8b0aa6a00b19b8e47a72157ec8e8f9e9060cb2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0aa6a00b19b8e47a72157ec8e8f9e9060cb2fb", "html_url": "https://github.com/rust-lang/rust/commit/8b0aa6a00b19b8e47a72157ec8e8f9e9060cb2fb"}], "stats": {"total": 141, "additions": 127, "deletions": 14}, "files": [{"sha": "0b0a13078768b8827a2c17ac40e1e812f7bf5ee1", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "patch": "@@ -55,8 +55,8 @@ impl<'tcx> LateLintPass<'tcx> for DefaultTraitAccess {\n                         // TODO: Work out a way to put \"whatever the imported way of referencing\n                         // this type in this file\" rather than a fully-qualified type.\n                         let expr_ty = cx.typeck_results().expr_ty(expr);\n-                        if let ty::Adt(..) = expr_ty.kind {\n-                            let replacement = format!(\"{}::default()\", expr_ty);\n+                        if let ty::Adt(def, ..) = expr_ty.kind {\n+                            let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did));\n                             span_lint_and_sugg(\n                                 cx,\n                                 DEFAULT_TRAIT_ACCESS,"}, {"sha": "d05567a3f82493cf908778222291721a5555d7a5", "filename": "tests/ui/default_trait_access.fixed", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "patch": "@@ -0,0 +1,106 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n+\n+use std::default;\n+use std::default::Default as D2;\n+use std::string;\n+\n+fn main() {\n+    let s1: String = std::string::String::default();\n+\n+    let s2 = String::default();\n+\n+    let s3: String = std::string::String::default();\n+\n+    let s4: String = std::string::String::default();\n+\n+    let s5 = string::String::default();\n+\n+    let s6: String = std::string::String::default();\n+\n+    let s7 = std::string::String::default();\n+\n+    let s8: String = DefaultFactory::make_t_badly();\n+\n+    let s9: String = DefaultFactory::make_t_nicely();\n+\n+    let s10 = DerivedDefault::default();\n+\n+    let s11: GenericDerivedDefault<String> = GenericDerivedDefault::default();\n+\n+    let s12 = GenericDerivedDefault::<String>::default();\n+\n+    let s13 = TupleDerivedDefault::default();\n+\n+    let s14: TupleDerivedDefault = TupleDerivedDefault::default();\n+\n+    let s15: ArrayDerivedDefault = ArrayDerivedDefault::default();\n+\n+    let s16 = ArrayDerivedDefault::default();\n+\n+    let s17: TupleStructDerivedDefault = TupleStructDerivedDefault::default();\n+\n+    let s18 = TupleStructDerivedDefault::default();\n+\n+    let s19 = <DerivedDefault as Default>::default();\n+\n+    println!(\n+        \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}], [{:?}]\",\n+        s1,\n+        s2,\n+        s3,\n+        s4,\n+        s5,\n+        s6,\n+        s7,\n+        s8,\n+        s9,\n+        s10,\n+        s11,\n+        s12,\n+        s13,\n+        s14,\n+        s15,\n+        s16,\n+        s17,\n+        s18,\n+        s19,\n+    );\n+}\n+\n+struct DefaultFactory;\n+\n+impl DefaultFactory {\n+    pub fn make_t_badly<T: Default>() -> T {\n+        Default::default()\n+    }\n+\n+    pub fn make_t_nicely<T: Default>() -> T {\n+        T::default()\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct DerivedDefault {\n+    pub s: String,\n+}\n+\n+#[derive(Debug, Default)]\n+struct GenericDerivedDefault<T: Default + std::fmt::Debug> {\n+    pub s: T,\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleDerivedDefault {\n+    pub s: (String, String),\n+}\n+\n+#[derive(Debug, Default)]\n+struct ArrayDerivedDefault {\n+    pub s: [String; 10],\n+}\n+\n+#[derive(Debug, Default)]\n+struct TupleStructDerivedDefault(String);"}, {"sha": "447e70c0bbbea74d9fbe5958e3f3aceb9c60a64c", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "patch": "@@ -1,4 +1,7 @@\n-#![warn(clippy::default_trait_access)]\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![deny(clippy::default_trait_access)]\n \n use std::default;\n use std::default::Default as D2;"}, {"sha": "df8a5b94ddcf3c81468744a3263fdd0b316964c5", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e18c2d5cb56a7b34312265ec6d4c780028cfe9/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=67e18c2d5cb56a7b34312265ec6d4c780028cfe9", "patch": "@@ -1,49 +1,53 @@\n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:8:22\n+  --> $DIR/default_trait_access.rs:11:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n-   = note: `-D clippy::default-trait-access` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/default_trait_access.rs:4:9\n+   |\n+LL | #![deny(clippy::default_trait_access)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:12:22\n+  --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:14:22\n+  --> $DIR/default_trait_access.rs:17:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:18:22\n+  --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:28:46\n+error: calling `GenericDerivedDefault::default()` is more clear than this expression\n+  --> $DIR/default_trait_access.rs:31:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n-   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n+   |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault::default()`\n \n error: calling `TupleDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:34:36\n+  --> $DIR/default_trait_access.rs:37:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:36:36\n+  --> $DIR/default_trait_access.rs:39:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:40:42\n+  --> $DIR/default_trait_access.rs:43:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`"}]}