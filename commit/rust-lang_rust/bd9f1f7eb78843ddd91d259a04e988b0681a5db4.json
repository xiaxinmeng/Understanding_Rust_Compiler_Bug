{"sha": "bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOWYxZjdlYjc4ODQzZGRkOTFkMjU5YTA0ZTk4OGIwNjgxYTVkYjQ=", "commit": {"author": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-06T14:17:35Z"}, "committer": {"name": "Fedor Sakharov", "email": "fedor.sakharov@gmail.com", "date": "2020-05-06T14:35:22Z"}, "message": "Fix rename of enum variant visible from module", "tree": {"sha": "e9fcabf13e376266b3a7065743fa3392dfdb53e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9fcabf13e376266b3a7065743fa3392dfdb53e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEOrvX5g4uaJk/ZAnkk9Q25ma/D+4FAl6yyy8ACgkQk9Q25ma/\nD+7dZwv+JKNX+Z7SHylpo0+Ko5qBIDsso5Aa3JilfuogzqpiecHKmAfYok42+T9g\nuvDne1L3c5J54r1s00BQ8dTBjvH+YLTgToYyR37wYbDiOCyobJFnDLofb99QFP1x\nz3582+S5d08hig12hdqhX6TRLszq5NzaZXzex5gcNZhrwjcPnaRNyvobhLAgiCJS\nhDq3i6KX3WIIwVCHFovl82FdNhqfMTeOlEeHigIDMk6w3G0PbRU4idVhKff/sJXJ\n3zjrQDjEKsZbQDbP1d6Q+buJAKVKn23S+J/uacgVBAr+Lpuhcar/gn+wApzr4tyC\nvrwXneX52UR006zdMgDFysmgmbp/cW4hTUEhGzBIInCIxyhyUj2TJ08AVGvk1qRc\nMqagJ1vXsvT/DszLzn92dH1z896VLKslJUDOJXAD2yYizB5rELoIJ5mHInuYNRLo\niLjBHaGIXyxpty4weAdw1AGgPYIV4OJZhEgeKfFjbZgNoo8BuK3s5WLfptvD2brs\nmrzhZ7S5\n=dkYA\n-----END PGP SIGNATURE-----", "payload": "tree e9fcabf13e376266b3a7065743fa3392dfdb53e9\nparent efd8e34c396f1524623a495e47111f1047cf2879\nauthor Fedor Sakharov <fedor.sakharov@gmail.com> 1588774655 +0300\ncommitter Fedor Sakharov <fedor.sakharov@gmail.com> 1588775722 +0300\n\nFix rename of enum variant visible from module\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "html_url": "https://github.com/rust-lang/rust/commit/bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/comments", "author": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "montekki", "id": 56672, "node_id": "MDQ6VXNlcjU2Njcy", "avatar_url": "https://avatars.githubusercontent.com/u/56672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/montekki", "html_url": "https://github.com/montekki", "followers_url": "https://api.github.com/users/montekki/followers", "following_url": "https://api.github.com/users/montekki/following{/other_user}", "gists_url": "https://api.github.com/users/montekki/gists{/gist_id}", "starred_url": "https://api.github.com/users/montekki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/montekki/subscriptions", "organizations_url": "https://api.github.com/users/montekki/orgs", "repos_url": "https://api.github.com/users/montekki/repos", "events_url": "https://api.github.com/users/montekki/events{/privacy}", "received_events_url": "https://api.github.com/users/montekki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd8e34c396f1524623a495e47111f1047cf2879", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8e34c396f1524623a495e47111f1047cf2879", "html_url": "https://github.com/rust-lang/rust/commit/efd8e34c396f1524623a495e47111f1047cf2879"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "7eba0b23363c0c50c7b7ca8998fceebd77241826", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "patch": "@@ -474,6 +474,13 @@ impl EnumVariant {\n     }\n }\n \n+impl HasVisibility for EnumVariant {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        let visibility = &db.enum_data(self.parent.id).visibility;\n+        visibility.resolve(db.upcast(), &self.parent.id.resolver(db.upcast()))\n+    }\n+}\n+\n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum Adt {"}, {"sha": "0fda4d6c975c235ed2c29646f1c5e481dd862d47", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "patch": "@@ -33,6 +33,7 @@ pub struct StructData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub name: Name,\n+    pub visibility: RawVisibility,\n     pub variants: Arena<EnumVariantData>,\n }\n \n@@ -91,7 +92,8 @@ impl EnumData {\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n         lower_enum(db, &mut trace, &src, e.lookup(db).container.module(db));\n-        Arc::new(EnumData { name, variants: trace.into_arena() })\n+        let visibility = RawVisibility::from_ast(db, src.with_value(src.value.visibility()));\n+        Arc::new(EnumData { name, visibility, variants: trace.into_arena() })\n     }\n \n     pub fn variant(&self, name: &Name) -> Option<LocalEnumVariantId> {"}, {"sha": "2cbb82c1a494b5362b21ef8b7bc757925715bda5", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "patch": "@@ -712,6 +712,68 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn test_enum_variant_from_module_1() {\n+        test_rename(\n+            r#\"\n+    mod foo {\n+        pub enum Foo {\n+            Bar<|>,\n+        }\n+    }\n+\n+    fn func(f: foo::Foo) {\n+        match f {\n+            foo::Foo::Bar => {}\n+        }\n+    }\n+    \"#,\n+            \"Baz\",\n+            r#\"\n+    mod foo {\n+        pub enum Foo {\n+            Baz,\n+        }\n+    }\n+\n+    fn func(f: foo::Foo) {\n+        match f {\n+            foo::Foo::Baz => {}\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_enum_variant_from_module_2() {\n+        test_rename(\n+            r#\"\n+    mod foo {\n+        pub struct Foo {\n+            pub bar<|>: uint,\n+        }\n+    }\n+\n+    fn foo(f: foo::Foo) {\n+        let _ = f.bar;\n+    }\n+    \"#,\n+            \"baz\",\n+            r#\"\n+    mod foo {\n+        pub struct Foo {\n+            pub baz: uint,\n+        }\n+    }\n+\n+    fn foo(f: foo::Foo) {\n+        let _ = f.baz;\n+    }\n+    \"#,\n+        );\n+    }\n+\n     fn test_rename(text: &str, new_name: &str, expected: &str) {\n         let (analysis, position) = single_file_with_position(text);\n         let source_change = analysis.rename(position, new_name).unwrap();"}, {"sha": "2e2850efbd7729d2b41c23743c78dc204a7fd373", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9f1f7eb78843ddd91d259a04e988b0681a5db4/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=bd9f1f7eb78843ddd91d259a04e988b0681a5db4", "patch": "@@ -47,7 +47,10 @@ impl Definition {\n         match self {\n             Definition::Macro(_) => None,\n             Definition::Field(sf) => Some(sf.visibility(db)),\n-            Definition::ModuleDef(def) => module?.visibility_of(db, def),\n+            Definition::ModuleDef(def) => match def {\n+                ModuleDef::EnumVariant(id) => Some(id.visibility(db)),\n+                _ => module?.visibility_of(db, def),\n+            },\n             Definition::SelfType(_) => None,\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,"}]}