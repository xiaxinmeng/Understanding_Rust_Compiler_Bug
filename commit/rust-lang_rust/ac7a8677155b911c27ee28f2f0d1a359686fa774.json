{"sha": "ac7a8677155b911c27ee28f2f0d1a359686fa774", "node_id": "C_kwDOAAsO6NoAKGFjN2E4Njc3MTU1YjkxMWMyN2VlMjhmMmYwZDFhMzU5Njg2ZmE3NzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T20:23:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T20:23:06Z"}, "message": "Rollup merge of #91907 - lcnr:const-arg-infer, r=BoxyUwU\n\nAllow `_` as the length of array types and repeat expressions\n\nr? `@BoxyUwU` cc `@varkor`", "tree": {"sha": "597cb35450fbc6fc014ca4ac8a51a3aef08d9153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/597cb35450fbc6fc014ca4ac8a51a3aef08d9153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac7a8677155b911c27ee28f2f0d1a359686fa774", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1KyqCRBK7hj4Ov3rIwAAn5gIAFX41Bj9d9NK9RnOrzNTd3+m\n1mUTNeUvHA6LGQbgy4sbUwU2VSaDXHXgrDDfmHq9J6wTd1xxx12hiq3P3ODSr+WH\nw5k+L8akdRkqqg2Cm5w7WWfiv4TIuY71ZZunwO1tgG5YxjOeyiCbDS91xxeY6MAW\nmXEqiKaW6r9pqy5mQWF6gVANciKGKw5CX77RIj5f3frJCP2rFpPJgYYTip4IeY5W\nAyH765oNCIfCE3tHw3rNg36Cks+kwG/bRXMx02otQUIMyEB1+qMaGGjKuKxyt8zx\ntfu+82k/mEqnEmytZAWj7BVvJIvMGGx9LTWGCeXa+P7i4hR5Kg+MGp3I7O/fDxk=\n=1mAx\n-----END PGP SIGNATURE-----\n", "payload": "tree 597cb35450fbc6fc014ca4ac8a51a3aef08d9153\nparent d49c692eeba97381570f0a0f3167b4c44c80bc0a\nparent a02bf76c9667ad7a25df3b672b3748398451a3d0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641327786 +0100\ncommitter GitHub <noreply@github.com> 1641327786 +0100\n\nRollup merge of #91907 - lcnr:const-arg-infer, r=BoxyUwU\n\nAllow `_` as the length of array types and repeat expressions\n\nr? `@BoxyUwU` cc `@varkor`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7a8677155b911c27ee28f2f0d1a359686fa774", "html_url": "https://github.com/rust-lang/rust/commit/ac7a8677155b911c27ee28f2f0d1a359686fa774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac7a8677155b911c27ee28f2f0d1a359686fa774/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49c692eeba97381570f0a0f3167b4c44c80bc0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49c692eeba97381570f0a0f3167b4c44c80bc0a", "html_url": "https://github.com/rust-lang/rust/commit/d49c692eeba97381570f0a0f3167b4c44c80bc0a"}, {"sha": "a02bf76c9667ad7a25df3b672b3748398451a3d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02bf76c9667ad7a25df3b672b3748398451a3d0", "html_url": "https://github.com/rust-lang/rust/commit/a02bf76c9667ad7a25df3b672b3748398451a3d0"}], "stats": {"total": 353, "additions": 268, "deletions": 85}, "files": [{"sha": "75f384405bb2b5c434940ae89f634d5a6aea57d5", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -34,7 +34,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Repeat(ref expr, ref count) => {\n                     let expr = self.lower_expr(expr);\n-                    let count = self.lower_anon_const(count);\n+                    let count = self.lower_array_length(count);\n                     hir::ExprKind::Repeat(expr, count)\n                 }\n                 ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),"}, {"sha": "35eb716949a13ccf38368ef890119a70e14a3854", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -56,6 +56,7 @@ use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::LintBuffer;\n+use rustc_session::parse::feature_err;\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n@@ -1248,7 +1249,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 ))\n             }\n             TyKind::Array(ref ty, ref length) => {\n-                hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_anon_const(length))\n+                hir::TyKind::Array(self.lower_ty(ty, itctx), self.lower_array_length(length))\n             }\n             TyKind::Typeof(ref expr) => hir::TyKind::Typeof(self.lower_anon_const(expr)),\n             TyKind::TraitObject(ref bounds, kind) => {\n@@ -2039,6 +2040,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.expr_block(block, AttrVec::new())\n     }\n \n+    fn lower_array_length(&mut self, c: &AnonConst) -> hir::ArrayLen {\n+        match c.value.kind {\n+            ExprKind::Underscore => {\n+                if self.sess.features_untracked().generic_arg_infer {\n+                    hir::ArrayLen::Infer(self.lower_node_id(c.id), c.value.span)\n+                } else {\n+                    feature_err(\n+                        &self.sess.parse_sess,\n+                        sym::generic_arg_infer,\n+                        c.value.span,\n+                        \"using `_` for array lengths is unstable\",\n+                    )\n+                    .emit();\n+                    hir::ArrayLen::Body(self.lower_anon_const(c))\n+                }\n+            }\n+            _ => hir::ArrayLen::Body(self.lower_anon_const(c)),\n+        }\n+    }\n+\n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| hir::AnonConst {\n             hir_id: this.lower_node_id(c.id),"}, {"sha": "d59756239d9dad7377fe5b5c8b24abfe08eb0e77", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -1407,6 +1407,20 @@ impl fmt::Display for ConstContext {\n /// A literal.\n pub type Lit = Spanned<LitKind>;\n \n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n+pub enum ArrayLen {\n+    Infer(HirId, Span),\n+    Body(AnonConst),\n+}\n+\n+impl ArrayLen {\n+    pub fn hir_id(&self) -> HirId {\n+        match self {\n+            &ArrayLen::Infer(hir_id, _) | &ArrayLen::Body(AnonConst { hir_id, body: _ }) => hir_id,\n+        }\n+    }\n+}\n+\n /// A constant (expression) that's not an item or associated item,\n /// but needs its own `DefId` for type-checking, const-eval, etc.\n /// These are usually found nested inside types (e.g., array lengths)\n@@ -1756,7 +1770,7 @@ pub enum ExprKind<'hir> {\n     ///\n     /// E.g., `[1; 5]`. The first expression is the element\n     /// to be repeated; the second is the number of times to repeat it.\n-    Repeat(&'hir Expr<'hir>, AnonConst),\n+    Repeat(&'hir Expr<'hir>, ArrayLen),\n \n     /// A suspension point for generators (i.e., `yield <expr>`).\n     Yield(&'hir Expr<'hir>, YieldSource),\n@@ -2266,7 +2280,7 @@ pub enum TyKind<'hir> {\n     /// A variable length slice (i.e., `[T]`).\n     Slice(&'hir Ty<'hir>),\n     /// A fixed length array (i.e., `[T; n]`).\n-    Array(&'hir Ty<'hir>, AnonConst),\n+    Array(&'hir Ty<'hir>, ArrayLen),\n     /// A raw pointer (i.e., `*const T` or `*mut T`).\n     Ptr(MutTy<'hir>),\n     /// A reference (i.e., `&'a T` or `&'a mut T`)."}, {"sha": "d0eee422202afff8a23a2e114c42c013f0859749", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -383,6 +383,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_pat(&mut self, p: &'v Pat<'v>) {\n         walk_pat(self, p)\n     }\n+    fn visit_array_length(&mut self, len: &'v ArrayLen) {\n+        walk_array_len(self, len)\n+    }\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n@@ -753,7 +756,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n-            visitor.visit_anon_const(length)\n+            visitor.visit_array_length(length)\n         }\n         TyKind::TraitObject(bounds, ref lifetime, _syntax) => {\n             for bound in bounds {\n@@ -1124,6 +1127,13 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n     }\n }\n \n+pub fn walk_array_len<'v, V: Visitor<'v>>(visitor: &mut V, len: &'v ArrayLen) {\n+    match len {\n+        &ArrayLen::Infer(hir_id, _span) => visitor.visit_id(hir_id),\n+        ArrayLen::Body(c) => visitor.visit_anon_const(c),\n+    }\n+}\n+\n pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonConst) {\n     visitor.visit_id(constant.hir_id);\n     visitor.visit_nested_body(constant.body);\n@@ -1147,7 +1157,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n-            visitor.visit_anon_const(count)\n+            visitor.visit_array_length(count)\n         }\n         ExprKind::Struct(ref qpath, fields, ref optional_base) => {\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);"}, {"sha": "4c9e2d7fe42b11f49f98b624aa54f238437f2e3c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -358,7 +358,7 @@ impl<'a> State<'a> {\n                 self.word(\"[\");\n                 self.print_type(&ty);\n                 self.word(\"; \");\n-                self.print_anon_const(length);\n+                self.print_array_length(length);\n                 self.word(\"]\");\n             }\n             hir::TyKind::Typeof(ref e) => {\n@@ -1065,6 +1065,13 @@ impl<'a> State<'a> {\n         self.print_else(elseopt)\n     }\n \n+    pub fn print_array_length(&mut self, len: &hir::ArrayLen) {\n+        match len {\n+            hir::ArrayLen::Infer(_, _) => self.word(\"_\"),\n+            hir::ArrayLen::Body(ct) => self.print_anon_const(ct),\n+        }\n+    }\n+\n     pub fn print_anon_const(&mut self, constant: &hir::AnonConst) {\n         self.ann.nested(self, Nested::Body(constant.body))\n     }\n@@ -1140,12 +1147,12 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::AnonConst) {\n+    fn print_expr_repeat(&mut self, element: &hir::Expr<'_>, count: &hir::ArrayLen) {\n         self.ibox(INDENT_UNIT);\n         self.word(\"[\");\n         self.print_expr(element);\n         self.word_space(\";\");\n-        self.print_anon_const(count);\n+        self.print_array_length(count);\n         self.word(\"]\");\n         self.end()\n     }"}, {"sha": "bdde6b4a356c195206cb146b006d1df6946aa919", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -583,9 +583,12 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::ConstBlock { value }\n             }\n             // Now comes the rote stuff:\n-            hir::ExprKind::Repeat(ref v, ref count) => {\n-                let count_def_id = self.tcx.hir().local_def_id(count.hir_id);\n-                let count = ty::Const::from_anon_const(self.tcx, count_def_id);\n+            hir::ExprKind::Repeat(ref v, _) => {\n+                let ty = self.typeck_results().expr_ty(expr);\n+                let count = match ty.kind() {\n+                    ty::Array(_, ct) => ct,\n+                    _ => span_bug!(expr.span, \"unexpected repeat expr ty: {:?}\", ty),\n+                };\n \n                 ExprKind::Repeat { value: self.mirror_expr(v), count }\n             }"}, {"sha": "23f5b17fa78893187e796d3fe5c5fa452041cb27", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -1326,12 +1326,18 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 }\n                 intravisit::walk_qpath(self, path, t.hir_id, t.span);\n             }\n-            hir::TyKind::Array(ref ty, ref anon_const) => {\n+            hir::TyKind::Array(ref ty, ref length) => {\n                 self.visit_ty(ty);\n                 let map = self.tcx.hir();\n-                self.nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n-                    v.visit_expr(&map.body(anon_const.body).value)\n-                });\n+                match length {\n+                    // FIXME(generic_arg_infer): We probably want to\n+                    // output the inferred type here? :shrug:\n+                    hir::ArrayLen::Infer(..) => {}\n+                    hir::ArrayLen::Body(anon_const) => self\n+                        .nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n+                            v.visit_expr(&map.body(anon_const.body).value)\n+                        }),\n+                }\n             }\n             hir::TyKind::OpaqueDef(item_id, _) => {\n                 let item = self.tcx.hir().item(item_id);\n@@ -1390,12 +1396,18 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     v.visit_expr(&body.value)\n                 });\n             }\n-            hir::ExprKind::Repeat(ref expr, ref anon_const) => {\n+            hir::ExprKind::Repeat(ref expr, ref length) => {\n                 self.visit_expr(expr);\n                 let map = self.tcx.hir();\n-                self.nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n-                    v.visit_expr(&map.body(anon_const.body).value)\n-                });\n+                match length {\n+                    // FIXME(generic_arg_infer): We probably want to\n+                    // output the inferred type here? :shrug:\n+                    hir::ArrayLen::Infer(..) => {}\n+                    hir::ArrayLen::Body(anon_const) => self\n+                        .nest_typeck_results(self.tcx.hir().local_def_id(anon_const.hir_id), |v| {\n+                            v.visit_expr(&map.body(anon_const.body).value)\n+                        }),\n+                }\n             }\n             // In particular, we take this branch for call and path expressions,\n             // where we'll index the idents involved just by continuing to walk."}, {"sha": "4971bb6d1aad7bff565fd43bf957cfae6b7620cd", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -310,9 +310,9 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let nested = bounds_to_string(&bounds);\n                 Ok(text_sig(nested))\n             }\n-            hir::TyKind::Array(ref ty, ref anon_const) => {\n+            hir::TyKind::Array(ref ty, ref length) => {\n                 let nested_ty = ty.make(offset + 1, id, scx)?;\n-                let expr = id_to_string(&scx.tcx.hir(), anon_const.body.hir_id).replace('\\n', \" \");\n+                let expr = id_to_string(&scx.tcx.hir(), length.hir_id()).replace('\\n', \" \");\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }"}, {"sha": "956696546da8ef9a9298bab17427d54f17c522ca", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -104,7 +104,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n                 GenericParamDefKind::Const { .. },\n             ) if tcx.type_of(param.def_id) == tcx.types.usize => {\n-                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id));\n+                let snippet = sess.source_map().span_to_snippet(tcx.hir().span(len.hir_id()));\n                 if let Ok(snippet) = snippet {\n                     err.span_suggestion(\n                         arg.span(),"}, {"sha": "8226ffbccc4316a53244c4facc3f6243cd0915ee", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -2363,8 +2363,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.normalize_ty(span, tcx.at(span).type_of(def_id).subst(tcx, substs))\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n-                let length_def_id = tcx.hir().local_def_id(length.hir_id);\n-                let length = ty::Const::from_anon_const(tcx, length_def_id);\n+                let length = match length {\n+                    &hir::ArrayLen::Infer(_, span) => self.ct_infer(tcx.types.usize, None, span),\n+                    hir::ArrayLen::Body(constant) => {\n+                        let length_def_id = tcx.hir().local_def_id(constant.hir_id);\n+                        ty::Const::from_anon_const(tcx, length_def_id)\n+                    }\n+                };\n+\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }"}, {"sha": "621938c9b783d2b81f0f01e051017e1aa0acd4ab", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -1238,12 +1238,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_expr_repeat(\n         &self,\n         element: &'tcx hir::Expr<'tcx>,\n-        count: &'tcx hir::AnonConst,\n+        count: &'tcx hir::ArrayLen,\n         expected: Expectation<'tcx>,\n         _expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let count = self.to_const(count);\n+        let count = self.array_length_to_const(count);\n \n         let uty = match expected {\n             ExpectHasType(uty) => match *uty.kind() {"}, {"sha": "1aca2911533ad0d8af297a55205011aca1bffe71", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -498,6 +498,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n+    pub fn array_length_to_const(&self, length: &hir::ArrayLen) -> &'tcx ty::Const<'tcx> {\n+        match length {\n+            &hir::ArrayLen::Infer(_, span) => self.ct_infer(self.tcx.types.usize, None, span),\n+            hir::ArrayLen::Body(anon_const) => self.to_const(anon_const),\n+        }\n+    }\n+\n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);"}, {"sha": "e1fef84d9d9298955fddc268785efe5369f0fc33", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -182,7 +182,7 @@ crate fn placeholder_type_error<'tcx>(\n         sugg.push((span, format!(\", {}\", type_name)));\n     }\n \n-    let mut err = bad_placeholder_type(tcx, placeholder_types, kind);\n+    let mut err = bad_placeholder(tcx, \"type\", placeholder_types, kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -314,8 +314,9 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n-fn bad_placeholder_type<'tcx>(\n+fn bad_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    placeholder_kind: &'static str,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n ) -> rustc_errors::DiagnosticBuilder<'tcx> {\n@@ -326,7 +327,8 @@ fn bad_placeholder_type<'tcx>(\n         tcx.sess,\n         spans.clone(),\n         E0121,\n-        \"the type placeholder `_` is not allowed within types on item signatures for {}\",\n+        \"the {} placeholder `_` is not allowed within types on item signatures for {}\",\n+        placeholder_kind,\n         kind\n     );\n     for span in spans {\n@@ -393,7 +395,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder_type(self.tcx(), vec![span], \"generic\").emit();\n+        bad_placeholder(self.tcx(), \"const\", vec![span], \"generic\").emit();\n         // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n@@ -1482,7 +1484,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n                     // as they shouldn't be able to cause query cycle errors.\n                     Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n-                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n+                        if constant.hir_id() == hir_id =>\n+                    {\n+                        Some(parent_def_id.to_def_id())\n+                    }\n+                    Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n                         if constant.hir_id == hir_id =>\n                     {\n                         Some(parent_def_id.to_def_id())\n@@ -1788,7 +1794,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n+                    let mut diag = bad_placeholder(tcx, \"type\", visitor.0, \"return type\");\n                     let ret_ty = fn_sig.skip_binder().output();\n                     if !ret_ty.references_error() {\n                         if !ret_ty.is_closure() {"}, {"sha": "04e887bf7420f80a893c6856af57b133a8e9e653", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n use super::ItemCtxt;\n-use super::{bad_placeholder_type, is_suggestable_infer_ty};\n+use super::{bad_placeholder, is_suggestable_infer_ty};\n \n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n@@ -490,7 +490,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n-                    if constant.hir_id == hir_id =>\n+                    if constant.hir_id() == hir_id =>\n                 {\n                     tcx.types.usize\n                 }\n@@ -788,7 +788,7 @@ fn infer_placeholder_type<'a>(\n             err.emit();\n         }\n         None => {\n-            let mut diag = bad_placeholder_type(tcx, vec![span], kind);\n+            let mut diag = bad_placeholder(tcx, \"type\", vec![span], kind);\n \n             if !ty.references_error() {\n                 let mut mk_nameable = MakeNameable::new(tcx);"}, {"sha": "d80e79d164a78e3e8d2e3c0d3028cf5e5af1020d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -1350,17 +1350,23 @@ impl Clean<Type> for hir::Ty<'_> {\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n-                let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n-                // as we currently do not supply the parent generics to anonymous constants\n-                // but do allow `ConstKind::Param`.\n-                //\n-                // `const_eval_poly` tries to to first substitute generic parameters which\n-                // results in an ICE while manually constructing the constant and using `eval`\n-                // does nothing for `ConstKind::Param`.\n-                let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n-                let param_env = cx.tcx.param_env(def_id);\n-                let length = print_const(cx, ct.eval(cx.tcx, param_env));\n+                let length = match length {\n+                    hir::ArrayLen::Infer(_, _) => \"_\".to_string(),\n+                    hir::ArrayLen::Body(anon_const) => {\n+                        let def_id = cx.tcx.hir().local_def_id(anon_const.hir_id);\n+                        // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n+                        // as we currently do not supply the parent generics to anonymous constants\n+                        // but do allow `ConstKind::Param`.\n+                        //\n+                        // `const_eval_poly` tries to to first substitute generic parameters which\n+                        // results in an ICE while manually constructing the constant and using `eval`\n+                        // does nothing for `ConstKind::Param`.\n+                        let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n+                        let param_env = cx.tcx.param_env(def_id);\n+                        print_const(cx, ct.eval(cx.tcx, param_env))\n+                    }\n+                };\n+\n                 Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(tys) => Tuple(tys.iter().map(|x| x.clean(cx)).collect()),"}, {"sha": "56b88a426a1a8256623c64b31cd1091a7eae6c0f", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -0,0 +1,12 @@\n+// To avoid having to `or` gate `_` as an expr.\n+#![feature(generic_arg_infer)]\n+\n+fn foo() -> [u8; _] {\n+    //~^ ERROR the const placeholder `_` is not allowed within types on item signatures for generics\n+    // FIXME(generic_arg_infer): this error message should say in the return type or sth like that.\n+    [0; 3]\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "eaa12b4192dc60c4b55e68a91a274806913b01fb", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -0,0 +1,9 @@\n+error[E0121]: the const placeholder `_` is not allowed within types on item signatures for generics\n+  --> $DIR/array-in-sig.rs:4:18\n+   |\n+LL | fn foo() -> [u8; _] {\n+   |                  ^ not allowed in type signatures\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "d3e53d7a89267c7c467428d350401cda3f902730", "filename": "src/test/ui/const-generics/generic_arg_infer/array-repeat-expr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-repeat-expr.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+// To avoid having to `or` gate `_` as an expr.\n+#![feature(generic_arg_infer)]\n+\n+fn foo() -> [u8; 3] {\n+    let x: [u8; _] = [0; _];\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!([0; _], foo());\n+}"}, {"sha": "29aa0f59d74380eab6a225c26e5786d7bb37c3c1", "filename": "src/test/ui/const-generics/generic_arg_infer/infer-arg-test.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -18,7 +18,5 @@ fn main() {\n   let a: All<_, _, _>;\n   all_fn();\n   let v: [u8; _];\n-  //~^ ERROR in expressions\n   let v: [u8; 10] = [0; _];\n-  //~^ ERROR in expressions\n }", "previous_filename": "src/test/ui/inference/infer-arg-test.rs"}, {"sha": "e6d0c743d01b9b6395228a081528f474ab02fe3c", "filename": "src/test/ui/const-generics/generic_arg_infer/infer-arg-test.stderr", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer-arg-test.stderr?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -10,18 +10,6 @@ error: expected identifier, found reserved identifier `_`\n LL | fn bad_infer_fn<_>() {}\n    |                 ^ expected identifier, found reserved identifier\n \n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/infer-arg-test.rs:20:15\n-   |\n-LL |   let v: [u8; _];\n-   |               ^ `_` not allowed here\n-\n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/infer-arg-test.rs:22:25\n-   |\n-LL |   let v: [u8; 10] = [0; _];\n-   |                         ^ `_` not allowed here\n-\n error[E0392]: parameter `_` is never used\n   --> $DIR/infer-arg-test.rs:7:17\n    |\n@@ -31,6 +19,6 @@ LL | struct BadInfer<_>;\n    = help: consider removing `_`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `_` to be a const parameter, use `const _: usize` instead\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0392`.", "previous_filename": "src/test/ui/inference/infer-arg-test.stderr"}, {"sha": "49eede4794b37728d65ff03f6b9c4cf62412512a", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -1,12 +1,43 @@\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/feature-gate-generic_arg_infer.rs:11:27\n+   |\n+LL |     let _x: [u8; 3] = [0; _];\n+   |                           ^\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/feature-gate-generic_arg_infer.rs:11:27\n+   |\n+LL |     let _x: [u8; 3] = [0; _];\n+   |                           ^ `_` not allowed here\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/feature-gate-generic_arg_infer.rs:14:18\n+   |\n+LL |     let _y: [u8; _] = [0; 3];\n+   |                  ^\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/feature-gate-generic_arg_infer.rs:14:18\n+   |\n+LL |     let _y: [u8; _] = [0; 3];\n+   |                  ^ `_` not allowed here\n+\n error[E0747]: type provided when a constant was expected\n-  --> $DIR/feature-gate-generic_arg_infer.rs:11:20\n+  --> $DIR/feature-gate-generic_arg_infer.rs:20:20\n    |\n LL |     let _x = foo::<_>([1,2]);\n    |                    ^\n    |\n    = help: const arguments cannot yet be inferred with `_`\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0747`.\n+Some errors have detailed explanations: E0658, E0747.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "afd14b7843e20fd169c52d1d71c962672980fe84", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -7,7 +7,17 @@ fn foo<const N: usize>(_: [u8; N]) -> [u8; N] {\n   [0; N]\n }\n \n+fn bar() {\n+    let _x: [u8; 3] = [0; _];\n+    //[normal]~^ ERROR: using `_` for array lengths is unstable\n+    //[normal]~| ERROR: in expressions, `_` can only be used on the left-hand side of an assignment\n+    let _y: [u8; _] = [0; 3];\n+    //[normal]~^ ERROR: using `_` for array lengths is unstable\n+    //[normal]~| ERROR: in expressions, `_` can only be used on the left-hand side of an assignment\n+}\n+\n fn main() {\n     let _x = foo::<_>([1,2]);\n     //[normal]~^ ERROR: type provided when a constant was expected\n+    let _y = bar();\n }"}, {"sha": "af36f7267004d3c71db87e595e016f981f7ec942", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -59,6 +59,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n         if let ItemKind::Struct(data, _) = &item.kind;\n         if let Some(last_field) = data.fields().last();\n         if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n+        if let rustc_hir::ArrayLen::Body(length) = length;\n \n         // Then check if that that array zero-sized\n         let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);"}, {"sha": "9b06ca4e824932c7492d25f9e8421c231c9b6e73", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -567,7 +567,14 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 bind!(self, value, length);\n                 kind!(\"Repeat({value}, {length})\");\n                 self.expr(value);\n-                self.body(field!(length.body));\n+                match length.value {\n+                    ArrayLen::Infer(..) => out!(\"if let ArrayLen::Infer(..) = length;\"),\n+                    ArrayLen::Body(anon_const) => {\n+                        bind!(self, anon_const);\n+                        out!(\"if let ArrayLen::Body({anon_const}) = {length};\");\n+                        self.body(field!(anon_const.body));\n+                    }\n+                }\n             },\n             ExprKind::Err => kind!(\"Err\"),\n             ExprKind::DropTemps(expr) => {"}, {"sha": "c96766e56784f2b4fc3fce17403dea3153fc6266", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -334,12 +334,17 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n             println!(\"{}anon_const:\", ind);\n             print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n         },\n-        hir::ExprKind::Repeat(val, ref anon_const) => {\n+        hir::ExprKind::Repeat(val, length) => {\n             println!(\"{}Repeat\", ind);\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+            match length {\n+                hir::ArrayLen::Infer(_, _) => println!(\"{}repeat count: _\", ind),\n+                hir::ArrayLen::Body(anon_const) => {\n+                    print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1)\n+                }\n+            }\n         },\n         hir::ExprKind::Err => {\n             println!(\"{}Err\", ind);"}, {"sha": "ac2b1a0259e3e8546d731b525f1f40e2138aaf80", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirIdMap;\n use rustc_hir::{\n     BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n     InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n-    StmtKind, Ty, TyKind, TypeBinding,\n+    StmtKind, Ty, TyKind, TypeBinding, ArrayLen\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -170,6 +170,14 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n+            match (left, right) {\n+                (ArrayLen::Infer(..), ArrayLen::Infer(..)) => true,\n+                (ArrayLen::Body(l_ct), ArrayLen::Body(r_ct)) => self.eq_body(l_ct.body, r_ct.body),\n+                (_, _) => false,\n+            }\n+    }\n+\n     pub fn eq_body(&mut self, left: BodyId, right: BodyId) -> bool {\n         let cx = self.inner.cx;\n         let eval_const = |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n@@ -194,8 +202,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n \n         let is_eq = match (\n-            &reduce_exprkind(self.inner.cx, &left.kind),\n-            &reduce_exprkind(self.inner.cx, &right.kind),\n+            reduce_exprkind(self.inner.cx, &left.kind),\n+            reduce_exprkind(self.inner.cx, &right.kind),\n         ) {\n             (&ExprKind::AddrOf(lb, l_mut, le), &ExprKind::AddrOf(rb, r_mut, re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n@@ -232,7 +240,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             },\n             (&ExprKind::Index(la, li), &ExprKind::Index(ra, ri)) => self.eq_expr(la, ra) && self.eq_expr(li, ri),\n             (&ExprKind::If(lc, lt, ref le), &ExprKind::If(rc, rt, ref re)) => {\n-                self.eq_expr(lc, rc) && self.eq_expr(&**lt, &**rt) && both(le, re, |l, r| self.eq_expr(l, r))\n+                self.eq_expr(lc, rc) && self.eq_expr(lt, rt) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Let(l), &ExprKind::Let(r)) => {\n                 self.eq_pat(l.pat, r.pat) && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && self.eq_expr(l.init, r.init)\n@@ -253,8 +261,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::MethodCall(l_path, _, l_args, _), &ExprKind::MethodCall(r_path, _, r_args, _)) => {\n                 self.inner.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprKind::Repeat(le, ref ll_id), &ExprKind::Repeat(re, ref rl_id)) => {\n-                self.eq_expr(le, re) && self.eq_body(ll_id.body, rl_id.body)\n+            (&ExprKind::Repeat(le, ll), &ExprKind::Repeat(re, rl)) => {\n+                self.eq_expr(le, re) && self.eq_array_length(ll, rl)\n             },\n             (&ExprKind::Ret(ref l), &ExprKind::Ret(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprKind::Path(ref l), &ExprKind::Path(ref r)) => self.eq_qpath(l, r),\n@@ -391,8 +399,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n     fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyKind::Array(lt, ref ll_id), &TyKind::Array(rt, ref rl_id)) => {\n-                self.eq_ty(lt, rt) && self.eq_body(ll_id.body, rl_id.body)\n+            (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => {\n+                self.eq_ty(lt, rt) && self.eq_array_length(ll, rl)\n             },\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n                 l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n@@ -714,9 +722,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             ExprKind::ConstBlock(ref l_id) => {\n                 self.hash_body(l_id.body);\n             },\n-            ExprKind::Repeat(e, ref l_id) => {\n+            ExprKind::Repeat(e, len) => {\n                 self.hash_expr(e);\n-                self.hash_body(l_id.body);\n+                self.hash_array_length(len);\n             },\n             ExprKind::Ret(ref e) => {\n                 if let Some(e) = *e {\n@@ -906,9 +914,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n-            TyKind::Array(ty, anon_const) => {\n+            &TyKind::Array(ty, len) => {\n                 self.hash_ty(ty);\n-                self.hash_body(anon_const.body);\n+                self.hash_array_length(len);\n             },\n             TyKind::Ptr(ref mut_ty) => {\n                 self.hash_ty(mut_ty.ty);\n@@ -953,6 +961,13 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n+    pub fn hash_array_length(&mut self, length: ArrayLen) {\n+        match length {\n+            ArrayLen::Infer(..) => {}\n+            ArrayLen::Body(anon_const) => self.hash_body(anon_const.body),\n+        }\n+    }\n+\n     pub fn hash_body(&mut self, body_id: BodyId) {\n         // swap out TypeckResults when hashing a body\n         let old_maybe_typeck_results = self.maybe_typeck_results.replace(self.cx.tcx.typeck_body(body_id));"}, {"sha": "9179e67c4f4eec8a323c85e25fb5f3e3c2d4fcaf", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -79,7 +79,7 @@ use rustc_hir::{\n     def, Arm, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n     ForeignItem, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local,\n     MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem,\n-    TraitItemKind, TraitRef, TyKind, UnOp,\n+    TraitItemKind, TraitRef, TyKind, UnOp, ArrayLen\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -703,8 +703,9 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             _ => false,\n         },\n         ExprKind::Tup(items) | ExprKind::Array(items) => items.iter().all(|x| is_default_equivalent(cx, x)),\n-        ExprKind::Repeat(x, y) => if_chain! {\n-            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(y.body).value.kind;\n+        ExprKind::Repeat(x, len) => if_chain! {\n+            if let ArrayLen::Body(len) = len;\n+            if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind;\n             if let LitKind::Int(v, _) = const_lit.node;\n             if v <= 32 && is_default_equivalent(cx, x);\n             then {"}, {"sha": "471bbce4f4185e2184ca058174d6cfe5480b8006", "filename": "src/tools/clippy/tests/ui/author/repeat.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Frepeat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ac7a8677155b911c27ee28f2f0d1a359686fa774/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Frepeat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauthor%2Frepeat.stdout?ref=ac7a8677155b911c27ee28f2f0d1a359686fa774", "patch": "@@ -2,7 +2,8 @@ if_chain! {\n     if let ExprKind::Repeat(value, length) = expr.kind;\n     if let ExprKind::Lit(ref lit) = value.kind;\n     if let LitKind::Int(1, LitIntType::Unsigned(UintTy::U8)) = lit.node;\n-    let expr1 = &cx.tcx.hir().body(length.body).value;\n+    if let ArrayLen::Body(anon_const) = length;\n+    let expr1 = &cx.tcx.hir().body(anon_const.body).value;\n     if let ExprKind::Lit(ref lit1) = expr1.kind;\n     if let LitKind::Int(5, LitIntType::Unsuffixed) = lit1.node;\n     then {"}]}