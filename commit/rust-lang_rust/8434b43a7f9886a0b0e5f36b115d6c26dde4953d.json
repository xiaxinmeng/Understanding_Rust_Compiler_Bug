{"sha": "8434b43a7f9886a0b0e5f36b115d6c26dde4953d", "node_id": "C_kwDOAAsO6NoAKDg0MzRiNDNhN2Y5ODg2YTBiMGU1ZjM2YjExNWQ2YzI2ZGRlNDk1M2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-24T23:57:26Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-26T03:14:26Z"}, "message": "Report the right fulfillment errors", "tree": {"sha": "a26268a5804e38fa261c6cc4d74a149bb3c8557e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a26268a5804e38fa261c6cc4d74a149bb3c8557e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8434b43a7f9886a0b0e5f36b115d6c26dde4953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8434b43a7f9886a0b0e5f36b115d6c26dde4953d", "html_url": "https://github.com/rust-lang/rust/commit/8434b43a7f9886a0b0e5f36b115d6c26dde4953d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8434b43a7f9886a0b0e5f36b115d6c26dde4953d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a17174ee639f8e0a3cee307d5685d38beb474ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a17174ee639f8e0a3cee307d5685d38beb474ba", "html_url": "https://github.com/rust-lang/rust/commit/2a17174ee639f8e0a3cee307d5685d38beb474ba"}], "stats": {"total": 67, "additions": 57, "deletions": 10}, "files": [{"sha": "278024b22760a754a8634d5cd16b58f583948da6", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8434b43a7f9886a0b0e5f36b115d6c26dde4953d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8434b43a7f9886a0b0e5f36b115d6c26dde4953d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=8434b43a7f9886a0b0e5f36b115d6c26dde4953d", "patch": "@@ -1,13 +1,14 @@\n use std::mem;\n \n-use super::{Certainty, InferCtxtEvalExt};\n-use rustc_infer::{\n-    infer::InferCtxt,\n-    traits::{\n-        query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n-        SelectionError, TraitEngine,\n-    },\n+use rustc_infer::infer::InferCtxt;\n+use rustc_infer::traits::{\n+    query::NoSolution, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n+    PredicateObligation, SelectionError, TraitEngine,\n };\n+use rustc_middle::ty;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n+\n+use super::{Certainty, InferCtxtEvalExt};\n \n /// A trait engine using the new trait solver.\n ///\n@@ -70,9 +71,55 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                     Err(NoSolution) => {\n                         errors.push(FulfillmentError {\n                             obligation: obligation.clone(),\n-                            code: FulfillmentErrorCode::CodeSelectionError(\n-                                SelectionError::Unimplemented,\n-                            ),\n+                            code: match goal.predicate.kind().skip_binder() {\n+                                ty::PredicateKind::Clause(ty::Clause::Projection(_)) => {\n+                                    FulfillmentErrorCode::CodeProjectionError(\n+                                        // FIXME: This could be a `Sorts` if the term is a type\n+                                        MismatchedProjectionTypes { err: TypeError::Mismatch },\n+                                    )\n+                                }\n+                                ty::PredicateKind::Subtype(pred) => {\n+                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                        goal.predicate.kind().rebind((pred.a, pred.b)),\n+                                    );\n+                                    let expected_found = ExpectedFound::new(true, a, b);\n+                                    FulfillmentErrorCode::CodeSubtypeError(\n+                                        expected_found,\n+                                        TypeError::Sorts(expected_found),\n+                                    )\n+                                }\n+                                ty::PredicateKind::Coerce(pred) => {\n+                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                        goal.predicate.kind().rebind((pred.a, pred.b)),\n+                                    );\n+                                    let expected_found = ExpectedFound::new(false, a, b);\n+                                    FulfillmentErrorCode::CodeSubtypeError(\n+                                        expected_found,\n+                                        TypeError::Sorts(expected_found),\n+                                    )\n+                                }\n+                                ty::PredicateKind::ConstEquate(a, b) => {\n+                                    let (a, b) = infcx.replace_bound_vars_with_placeholders(\n+                                        goal.predicate.kind().rebind((a, b)),\n+                                    );\n+                                    let expected_found = ExpectedFound::new(true, a, b);\n+                                    FulfillmentErrorCode::CodeConstEquateError(\n+                                        expected_found,\n+                                        TypeError::ConstMismatch(expected_found),\n+                                    )\n+                                }\n+                                ty::PredicateKind::Clause(_)\n+                                | ty::PredicateKind::WellFormed(_)\n+                                | ty::PredicateKind::ObjectSafe(_)\n+                                | ty::PredicateKind::ClosureKind(_, _, _)\n+                                | ty::PredicateKind::ConstEvaluatable(_)\n+                                | ty::PredicateKind::TypeWellFormedFromEnv(_)\n+                                | ty::PredicateKind::Ambiguous => {\n+                                    FulfillmentErrorCode::CodeSelectionError(\n+                                        SelectionError::Unimplemented,\n+                                    )\n+                                }\n+                            },\n                             root_obligation: obligation,\n                         });\n                         continue;"}]}