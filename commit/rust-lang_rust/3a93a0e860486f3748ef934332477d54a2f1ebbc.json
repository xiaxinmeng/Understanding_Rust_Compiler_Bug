{"sha": "3a93a0e860486f3748ef934332477d54a2f1ebbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTNhMGU4NjA0ODZmMzc0OGVmOTM0MzMyNDc3ZDU0YTJmMWViYmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T17:19:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T17:19:14Z"}, "message": "HAIR lowering: improve code quality for slices", "tree": {"sha": "84c8257aa9441ec8a84b58cfce51e5beb643795f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c8257aa9441ec8a84b58cfce51e5beb643795f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a93a0e860486f3748ef934332477d54a2f1ebbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a93a0e860486f3748ef934332477d54a2f1ebbc", "html_url": "https://github.com/rust-lang/rust/commit/3a93a0e860486f3748ef934332477d54a2f1ebbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a93a0e860486f3748ef934332477d54a2f1ebbc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de96d37fbcc54978458c18f5067cd9817669bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de96d37fbcc54978458c18f5067cd9817669bc8", "html_url": "https://github.com/rust-lang/rust/commit/0de96d37fbcc54978458c18f5067cd9817669bc8"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "48e5ee48a024b34cfb93693eb8fdc635cf6de492", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3a93a0e860486f3748ef934332477d54a2f1ebbc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a93a0e860486f3748ef934332477d54a2f1ebbc/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=3a93a0e860486f3748ef934332477d54a2f1ebbc", "patch": "@@ -557,14 +557,13 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     ty::Slice(..) |\n                     ty::Array(..) =>\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),\n-                    ty::Error => { // Avoid ICE\n-                        return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n-                    }\n-                    _ =>\n-                        span_bug!(\n-                            pat.span,\n-                            \"unexpanded type for vector pattern: {:?}\",\n-                            ty),\n+                    // Avoid ICE\n+                    ty::Error => return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) },\n+                    _ => span_bug!(\n+                        pat.span,\n+                        \"unexpanded type for vector pattern: {:?}\",\n+                        ty\n+                    ),\n                 }\n             }\n \n@@ -698,9 +697,8 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         &mut self,\n         prefix: Vec<Pat<'tcx>>,\n         slice: Option<Pat<'tcx>>,\n-        suffix: Vec<Pat<'tcx>>)\n-        -> (Vec<Pat<'tcx>>, Option<Pat<'tcx>>, Vec<Pat<'tcx>>)\n-    {\n+        suffix: Vec<Pat<'tcx>>,\n+    ) -> (Vec<Pat<'tcx>>, Option<Pat<'tcx>>, Vec<Pat<'tcx>>) {\n         let orig_slice = match slice {\n             Some(orig_slice) => orig_slice,\n             None => return (prefix, slice, suffix)\n@@ -734,31 +732,24 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         prefix: &'tcx [P<hir::Pat>],\n         slice: &'tcx Option<P<hir::Pat>>,\n-        suffix: &'tcx [P<hir::Pat>])\n-        -> PatKind<'tcx>\n-    {\n+        suffix: &'tcx [P<hir::Pat>],\n+    ) -> PatKind<'tcx> {\n         let prefix = self.lower_patterns(prefix);\n         let slice = self.lower_opt_pattern(slice);\n         let suffix = self.lower_patterns(suffix);\n-        let (prefix, slice, suffix) =\n-            self.flatten_nested_slice_patterns(prefix, slice, suffix);\n+        let (prefix, slice, suffix) = self.flatten_nested_slice_patterns(prefix, slice, suffix);\n \n+        // Some validation:\n         match ty.kind {\n-            ty::Slice(..) => {\n-                // matching a slice or fixed-length array\n-                PatKind::Slice { prefix: prefix, slice: slice, suffix: suffix }\n-            }\n-\n+            // Matching a slice, `[T]`.\n+            ty::Slice(..) => PatKind::Slice { prefix, slice, suffix },\n+            // Fixed-length array, `[T; len]`.\n             ty::Array(_, len) => {\n-                // fixed-length array\n                 let len = len.eval_usize(self.tcx, self.param_env);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n-                PatKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n-            }\n-\n-            _ => {\n-                span_bug!(span, \"bad slice pattern type {:?}\", ty);\n+                PatKind::Array { prefix, slice, suffix }\n             }\n+            _ => span_bug!(span, \"bad slice pattern type {:?}\", ty),\n         }\n     }\n "}]}