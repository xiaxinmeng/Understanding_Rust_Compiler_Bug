{"sha": "64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YTNhNDE2OWMwOGRkOGY5Njg3NjA1ZjI1NmU3ZTFlZWFhMDdjZTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T21:15:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: Get rid of calls to `token::ident_to_str` in debug info", "tree": {"sha": "63cd901fd1e271fcc9b7e486bc57479436c7a5b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63cd901fd1e271fcc9b7e486bc57479436c7a5b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "html_url": "https://github.com/rust-lang/rust/commit/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f86855ddd8231b28b2c89bbcf7f9a7ed1324a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f86855ddd8231b28b2c89bbcf7f9a7ed1324a4", "html_url": "https://github.com/rust-lang/rust/commit/21f86855ddd8231b28b2c89bbcf7f9a7ed1324a4"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "2611076f15de95d2e79731a8f7621e61ae49cfa7", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a3a4169c08dd8f9687605f256e7e1eeaa07ce0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=64a3a4169c08dd8f9687605f256e7e1eeaa07ce0", "patch": "@@ -622,7 +622,8 @@ pub fn create_function_debug_context(cx: &CrateContext,\n     };\n \n     // get_template_parameters() will append a `<...>` clause to the function name if necessary.\n-    let mut function_name = token::ident_to_str(&ident).to_owned();\n+    let function_name_string = token::get_ident(ident.name);\n+    let mut function_name = function_name_string.get().to_owned();\n     let template_parameters = get_template_parameters(cx,\n                                                       generics,\n                                                       param_substs,\n@@ -791,7 +792,9 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n                 let ident = special_idents::type_self;\n \n-                let param_metadata = token::ident_to_str(&ident).with_c_str(|name| {\n+                let param_metadata_string = token::get_ident(ident.name);\n+                let param_metadata = param_metadata_string.get()\n+                                                          .with_c_str(|name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),\n@@ -829,7 +832,9 @@ pub fn create_function_debug_context(cx: &CrateContext,\n             // Again, only create type information if extra_debuginfo is enabled\n             if cx.sess.opts.extra_debuginfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n-                let param_metadata = token::ident_to_str(&ident).with_c_str(|name| {\n+                let param_metadata_string = token::get_ident(ident.name);\n+                let param_metadata = param_metadata_string.get()\n+                                                          .with_c_str(|name| {\n                     unsafe {\n                         llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                             DIB(cx),\n@@ -934,7 +939,8 @@ fn declare_local(bcx: &Block,\n     let filename = span_start(cx, span).file.name.clone();\n     let file_metadata = file_metadata(cx, filename);\n \n-    let name: &str = token::ident_to_str(&variable_ident);\n+    let variable_ident_string = token::get_ident(variable_ident.name);\n+    let name: &str = variable_ident_string.get();\n     let loc = span_start(cx, span);\n     let type_metadata = type_metadata(cx, variable_type, span);\n \n@@ -1363,7 +1369,8 @@ fn describe_enum_variant(cx: &CrateContext,\n                          file_metadata: DIFile,\n                          span: Span)\n                       -> (DICompositeType, Type, @MemberDescriptionFactory) {\n-    let variant_name = token::ident_to_str(&variant_info.name);\n+    let variant_info_string = token::get_ident(variant_info.name.name);\n+    let variant_name = variant_info_string.get();\n     let variant_llvm_type = Type::struct_(struct_def.fields.map(|&t| type_of::type_of(cx, t)),\n                                           struct_def.packed);\n     // Could some consistency checks here: size, align, field count, discr type\n@@ -1458,7 +1465,8 @@ fn prepare_enum_metadata(cx: &CrateContext,\n     let enumerators_metadata: ~[DIDescriptor] = variants\n         .iter()\n         .map(|v| {\n-            let name: &str = token::ident_to_str(&v.name);\n+            let string = token::get_ident(v.name.name);\n+            let name: &str = string.get();\n             let discriminant_value = v.disr_val as c_ulonglong;\n \n             name.with_c_str(|name| {\n@@ -2002,9 +2010,10 @@ fn trait_metadata(cx: &CrateContext,\n     // the trait's methods.\n     let path = ty::item_path(cx.tcx, def_id);\n     let ident = path.last().unwrap().ident();\n+    let ident_string = token::get_ident(ident.name);\n     let name = ppaux::trait_store_to_str(cx.tcx, trait_store) +\n                ppaux::mutability_to_str(mutability) +\n-               token::ident_to_str(&ident);\n+               ident_string.get();\n     // Add type and region parameters\n     let name = ppaux::parameterized(cx.tcx, name, &substs.regions,\n                                     substs.tps, def_id, true);\n@@ -2761,8 +2770,10 @@ impl NamespaceTreeNode {\n                 }\n                 None => {}\n             }\n-            let name = token::ident_to_str(&node.ident);\n-            output.push_str(format!(\"{}{}\", name.len(), name));\n+            let string = token::get_ident(node.ident.name);\n+            output.push_str(format!(\"{}{}\",\n+                                    string.get().len(),\n+                                    string.get()));\n         }\n     }\n }\n@@ -2813,7 +2824,8 @@ fn namespace_for_item(cx: &CrateContext,\n                     Some(node) => node.scope,\n                     None => ptr::null()\n                 };\n-                let namespace_name = token::ident_to_str(&ident);\n+                let namespace_name_string = token::get_ident(ident.name);\n+                let namespace_name = namespace_name_string.get();\n \n                 let namespace_metadata = unsafe {\n                     namespace_name.with_c_str(|namespace_name| {"}]}