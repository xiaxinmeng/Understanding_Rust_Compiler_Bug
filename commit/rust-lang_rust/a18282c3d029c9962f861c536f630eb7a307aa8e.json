{"sha": "a18282c3d029c9962f861c536f630eb7a307aa8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODI4MmMzZDAyOWM5OTYyZjg2MWM1MzZmNjMwZWI3YTMwN2FhOGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-07T17:47:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-09T17:27:10Z"}, "message": "Remove eof() from io::Reader", "tree": {"sha": "88bd8e2cb0c71065c28d15efb6711977285dee20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88bd8e2cb0c71065c28d15efb6711977285dee20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18282c3d029c9962f861c536f630eb7a307aa8e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18282c3d029c9962f861c536f630eb7a307aa8e", "html_url": "https://github.com/rust-lang/rust/commit/a18282c3d029c9962f861c536f630eb7a307aa8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18282c3d029c9962f861c536f630eb7a307aa8e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd11fe17c7cf3661905c952d8233527abbff4c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd11fe17c7cf3661905c952d8233527abbff4c11", "html_url": "https://github.com/rust-lang/rust/commit/dd11fe17c7cf3661905c952d8233527abbff4c11"}], "stats": {"total": 163, "additions": 19, "deletions": 144}, "files": [{"sha": "d19181ab9f182e02df3daa0177fcda1be222291a", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -788,7 +788,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    if pos == len && rdr.eof() {\n+    if pos == len && rdr.tell() as uint == format.len() {\n         Ok(Tm {\n             tm_sec: tm.tm_sec,\n             tm_min: tm.tm_min,"}, {"sha": "49290434785cf3633d8123afd71382733c26c8da", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -114,7 +114,6 @@ impl io::Reader for FileDesc {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n         match self.inner_read(buf) { Ok(n) => Some(n), Err(..) => None }\n     }\n-    fn eof(&mut self) -> bool { false }\n }\n \n impl io::Writer for FileDesc {"}, {"sha": "d0894bef413487683f39c635f2f4deedd0c79910", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -66,7 +66,8 @@ pub struct BufferedReader<R> {\n     priv inner: R,\n     priv buf: ~[u8],\n     priv pos: uint,\n-    priv cap: uint\n+    priv cap: uint,\n+    priv eof: bool,\n }\n \n impl<R: Reader> BufferedReader<R> {\n@@ -84,7 +85,8 @@ impl<R: Reader> BufferedReader<R> {\n             inner: inner,\n             buf: buf,\n             pos: 0,\n-            cap: 0\n+            cap: 0,\n+            eof: false,\n         }\n     }\n \n@@ -113,7 +115,7 @@ impl<R: Reader> Buffer for BufferedReader<R> {\n                     self.pos = 0;\n                     self.cap = cap;\n                 }\n-                None => {}\n+                None => { self.eof = true; }\n             }\n         }\n         return self.buf.slice(self.pos, self.cap);\n@@ -134,15 +136,11 @@ impl<R: Reader> Reader for BufferedReader<R> {\n             nread\n         };\n         self.pos += nread;\n-        if nread == 0 && self.inner.eof() && buf.len() != 0 {\n-                return None;\n+        if nread == 0 && buf.len() != 0 && self.eof {\n+            return None;\n         }\n         Some(nread)\n     }\n-\n-    fn eof(&mut self) -> bool {\n-        self.pos == self.cap && self.inner.eof()\n-    }\n }\n \n /// Wraps a Writer and buffers output to it\n@@ -270,7 +268,6 @@ impl<W> InternalBufferedWriter<W> {\n \n impl<W: Reader> Reader for InternalBufferedWriter<W> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.get_mut_ref().inner.read(buf) }\n-    fn eof(&mut self) -> bool { self.get_mut_ref().inner.eof() }\n }\n \n /// Wraps a Stream and buffers input and output to and from it\n@@ -325,7 +322,6 @@ impl<S: Stream> Buffer for BufferedStream<S> {\n \n impl<S: Stream> Reader for BufferedStream<S> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.inner.read(buf) }\n-    fn eof(&mut self) -> bool { self.inner.eof() }\n }\n \n impl<S: Stream> Writer for BufferedStream<S> {\n@@ -351,10 +347,6 @@ mod test {\n         fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n             None\n         }\n-\n-        fn eof(&mut self) -> bool {\n-            true\n-        }\n     }\n \n     impl Writer for NullStream {\n@@ -370,10 +362,6 @@ mod test {\n         fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n             self.lengths.shift_opt()\n         }\n-\n-        fn eof(&mut self) -> bool {\n-            self.lengths.len() == 0\n-        }\n     }\n \n     #[test]\n@@ -385,24 +373,20 @@ mod test {\n         let nread = reader.read(buf);\n         assert_eq!(Some(2), nread);\n         assert_eq!([0, 1, 0], buf);\n-        assert!(!reader.eof());\n \n         let mut buf = [0];\n         let nread = reader.read(buf);\n         assert_eq!(Some(1), nread);\n         assert_eq!([2], buf);\n-        assert!(!reader.eof());\n \n         let mut buf = [0, 0, 0];\n         let nread = reader.read(buf);\n         assert_eq!(Some(1), nread);\n         assert_eq!([3, 0, 0], buf);\n-        assert!(!reader.eof());\n \n         let nread = reader.read(buf);\n         assert_eq!(Some(1), nread);\n         assert_eq!([4, 0, 0], buf);\n-        assert!(reader.eof());\n \n         assert_eq!(None, reader.read(buf));\n     }\n@@ -466,13 +450,11 @@ mod test {\n \n         impl io::Reader for S {\n             fn read(&mut self, _: &mut [u8]) -> Option<uint> { None }\n-            fn eof(&mut self) -> bool { true }\n         }\n \n         let mut stream = BufferedStream::new(S);\n         let mut buf = [];\n         stream.read(buf);\n-        stream.eof();\n         stream.write(buf);\n         stream.flush();\n     }\n@@ -539,6 +521,7 @@ mod test {\n         assert_eq!(reader.read(buf), Some(2));\n         assert_eq!(reader.read(buf), Some(0));\n         assert_eq!(reader.read(buf), Some(1));\n+        assert_eq!(reader.read(buf), Some(0));\n         assert_eq!(reader.read(buf), None);\n     }\n "}, {"sha": "e15b9a861ca1bfd7a0cbd160c253aa073019f152", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -77,8 +77,6 @@ impl Reader for PortReader {\n             Some(num_read)\n         }\n     }\n-\n-    fn eof(&mut self) -> bool { self.closed }\n }\n \n /// Allows writing to a chan.\n@@ -133,22 +131,17 @@ mod test {\n         let mut reader = PortReader::new(port);\n         let mut buf = ~[0u8, ..3];\n \n-        assert_eq!(false, reader.eof());\n \n         assert_eq!(Some(0), reader.read([]));\n-        assert_eq!(false, reader.eof());\n \n         assert_eq!(Some(3), reader.read(buf));\n-        assert_eq!(false, reader.eof());\n         assert_eq!(~[1,2,3], buf);\n \n         assert_eq!(Some(3), reader.read(buf));\n-        assert_eq!(false, reader.eof());\n         assert_eq!(~[4,5,6], buf);\n \n         assert_eq!(Some(2), reader.read(buf));\n         assert_eq!(~[7,8,6], buf);\n-        assert_eq!(true, reader.eof());\n \n         let mut err = None;\n         let result = io::io_error::cond.trap(|io::standard_error(k, _, _)| {\n@@ -158,7 +151,6 @@ mod test {\n         });\n         assert_eq!(Some(io::EndOfFile), err);\n         assert_eq!(None, result);\n-        assert_eq!(true, reader.eof());\n         assert_eq!(~[7,8,6], buf);\n \n         // Ensure it continues to fail in the same way.\n@@ -170,7 +162,6 @@ mod test {\n         });\n         assert_eq!(Some(io::EndOfFile), err);\n         assert_eq!(None, result);\n-        assert_eq!(true, reader.eof());\n         assert_eq!(~[7,8,6], buf);\n     }\n "}, {"sha": "09876f15a8b43a40bc9a2d000d5536bb1da5c60e", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -150,9 +150,6 @@ mod test {\n                 Some(1)\n             }\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     struct EofReader;\n@@ -161,9 +158,6 @@ mod test {\n         fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n             None\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     struct ErroringReader;\n@@ -173,9 +167,6 @@ mod test {\n             io_error::cond.raise(placeholder_error());\n             None\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     struct PartialReader {\n@@ -195,9 +186,6 @@ mod test {\n                 Some(2)\n             }\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     struct ErroringLaterReader {\n@@ -215,9 +203,6 @@ mod test {\n                 None\n             }\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     struct ThreeChunkReader {\n@@ -240,9 +225,6 @@ mod test {\n                 None\n             }\n         }\n-        fn eof(&mut self) -> bool {\n-            false\n-        }\n     }\n \n     #[test]"}, {"sha": "0cf00b2c1a9a7099c77bd3eca927d447d7321887", "filename": "src/libstd/io/flate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fflate.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -49,6 +49,4 @@ impl<R: Reader> InflateReader<R> {\n \n impl<R: Reader> Reader for InflateReader<R> {\n     fn read(&mut self, _buf: &mut [u8]) -> Option<uint> { fail!() }\n-\n-    fn eof(&mut self) -> bool { fail!() }\n }"}, {"sha": "a3f84fe2afa3b714f4d14b244c343d06f1d48ff1", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -205,6 +205,14 @@ impl File {\n     pub fn truncate(&mut self, size: i64) {\n         self.fd.truncate(size).map_err(|e| io_error::cond.raise(e));\n     }\n+\n+    /// Tests whether this stream has reached EOF.\n+    ///\n+    /// If true, then this file will no longer continue to return data via\n+    /// `read`.\n+    pub fn eof(&self) -> bool {\n+        self.last_nread == 0\n+    }\n }\n \n /// Unlink a file from the underlying filesystem.\n@@ -597,8 +605,6 @@ impl Reader for File {\n             }\n         }\n     }\n-\n-    fn eof(&mut self) -> bool { self.last_nread == 0 }\n }\n \n impl Writer for File {"}, {"sha": "53aa176134d3a63edec9323358bbfd4e76e4bdd8", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -124,7 +124,7 @@ impl MemReader {\n \n impl Reader for MemReader {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        { if self.eof() { return None; } }\n+        if self.pos == self.buf.len() { return None }\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n@@ -138,8 +138,6 @@ impl Reader for MemReader {\n \n         return Some(write_len);\n     }\n-\n-    fn eof(&mut self) -> bool { self.pos == self.buf.len() }\n }\n \n impl Seek for MemReader {\n@@ -222,7 +220,7 @@ impl<'a> BufReader<'a> {\n \n impl<'a> Reader for BufReader<'a> {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> {\n-        { if self.eof() { return None; } }\n+        if self.pos == self.buf.len() { return None }\n \n         let write_len = min(buf.len(), self.buf.len() - self.pos);\n         {\n@@ -236,8 +234,6 @@ impl<'a> Reader for BufReader<'a> {\n \n         return Some(write_len);\n      }\n-\n-    fn eof(&mut self) -> bool { self.pos == self.buf.len() }\n }\n \n impl<'a> Seek for BufReader<'a> {\n@@ -369,9 +365,7 @@ mod test {\n         assert_eq!(buf, [1, 2, 3, 4]);\n         assert_eq!(reader.read(buf), Some(3));\n         assert_eq!(buf.slice(0, 3), [5, 6, 7]);\n-        assert!(reader.eof());\n         assert_eq!(reader.read(buf), None);\n-        assert!(reader.eof());\n     }\n \n     #[test]\n@@ -391,9 +385,7 @@ mod test {\n         assert_eq!(buf, [1, 2, 3, 4]);\n         assert_eq!(reader.read(buf), Some(3));\n         assert_eq!(buf.slice(0, 3), [5, 6, 7]);\n-        assert!(reader.eof());\n         assert_eq!(reader.read(buf), None);\n-        assert!(reader.eof());\n     }\n \n     #[test]"}, {"sha": "3ab710e9356e68e7d4f01dd6817549dbb990ea58", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -502,26 +502,6 @@ pub trait Reader {\n     /// Is it actually possible for 0 bytes to be read successfully?\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint>;\n \n-    /// Return whether the Reader has reached the end of the stream.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// use std::io;\n-    /// # let _g = ::std::io::ignore_io_error();\n-    /// let mut reader = io::stdin();\n-    ///\n-    /// let mut bytes = [0, .. 10];\n-    /// reader.read(bytes);\n-    ///\n-    /// if reader.eof() { println(\"stdin() had at most 10 bytes of data.\"); }\n-    /// ```\n-    ///\n-    /// # Failure\n-    ///\n-    /// Returns `true` on failure.\n-    fn eof(&mut self) -> bool;\n-\n     // Convenient helper methods based on the above methods\n \n     /// Reads a single byte. Returns `None` on EOF.\n@@ -864,12 +844,10 @@ pub trait Reader {\n \n impl Reader for ~Reader {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.read(buf) }\n-    fn eof(&mut self) -> bool { self.eof() }\n }\n \n impl<'a> Reader for &'a mut Reader {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.read(buf) }\n-    fn eof(&mut self) -> bool { self.eof() }\n }\n \n fn extend_sign(val: u64, nbytes: uint) -> i64 {"}, {"sha": "023a9bddca96e6e6ae8b2fc108de7371a314dba2", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -67,8 +67,6 @@ impl Reader for TcpStream {\n             }\n         }\n     }\n-\n-    fn eof(&mut self) -> bool { fail!() }\n }\n \n impl Writer for TcpStream {"}, {"sha": "8a866c2a3573bf04fe11973a51197eb80808268a", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -86,8 +86,6 @@ impl Reader for UdpStream {\n             }\n         })\n     }\n-\n-    fn eof(&mut self) -> bool { fail!() }\n }\n \n impl Writer for UdpStream {"}, {"sha": "232ca6705973298cc92539f37d329f329140af1d", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -67,7 +67,6 @@ impl UnixStream {\n \n impl Reader for UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> Option<uint> { self.obj.read(buf) }\n-    fn eof(&mut self) -> bool { self.obj.eof() }\n }\n \n impl Writer for UnixStream {"}, {"sha": "e2eec652d9dedd4c3e6d493b0f43d81dcf8cd8d8", "filename": "src/libstd/io/option.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Foption.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -48,16 +48,6 @@ impl<R: Reader> Reader for Option<R> {\n             }\n         }\n     }\n-\n-    fn eof(&mut self) -> bool {\n-        match *self {\n-            Some(ref mut reader) => reader.eof(),\n-            None => {\n-                io_error::cond.raise(prev_io_error());\n-                true\n-            }\n-        }\n-    }\n }\n \n impl<S: Seek> Seek for Option<S> {\n@@ -145,7 +135,6 @@ mod test {\n         let mut buf = [0, 0];\n         reader.read(buf);\n         assert_eq!(buf, [0, 1]);\n-        assert!(!reader.eof());\n     }\n \n     #[test]\n@@ -161,14 +150,5 @@ mod test {\n             reader.read(buf);\n         });\n         assert!(called);\n-\n-        let mut called = false;\n-        io_error::cond.trap(|err| {\n-            assert_eq!(err.kind, PreviousIoError);\n-            called = true;\n-        }).inside(|| {\n-            assert!(reader.eof());\n-        });\n-        assert!(called);\n     }\n }"}, {"sha": "799adff37e37f911d7c365ce510a06141ad26e6f", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -66,8 +66,6 @@ impl Reader for PipeStream {\n             }\n         }\n     }\n-\n-    fn eof(&mut self) -> bool { false }\n }\n \n impl Writer for PipeStream {"}, {"sha": "f3177276bc286fb495a3f00020c0c64bc884f8e9", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -272,8 +272,6 @@ impl Reader for StdReader {\n             }\n         }\n     }\n-\n-    fn eof(&mut self) -> bool { false }\n }\n \n /// Representation of a writer to a standard output stream"}, {"sha": "612c757ad4c8c86918a82c111dd83554d1df2171", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18282c3d029c9962f861c536f630eb7a307aa8e/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a18282c3d029c9962f861c536f630eb7a307aa8e", "patch": "@@ -36,10 +36,6 @@ impl<'a, R: Reader> Reader for LimitReader<'a, R> {\n             len\n         })\n     }\n-\n-    fn eof(&mut self) -> bool {\n-        self.limit == 0 || self.inner.eof()\n-    }\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n@@ -59,11 +55,6 @@ impl Reader for ZeroReader {\n         buf.set_memory(0);\n         Some(buf.len())\n     }\n-\n-    #[inline]\n-    fn eof(&mut self) -> bool {\n-        false\n-    }\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n@@ -74,11 +65,6 @@ impl Reader for NullReader {\n     fn read(&mut self, _buf: &mut [u8]) -> Option<uint> {\n         None\n     }\n-\n-    #[inline]\n-    fn eof(&mut self) -> bool {\n-        true\n-    }\n }\n \n /// A `Writer` which multiplexes writes to a set of `Writers`.\n@@ -140,10 +126,6 @@ impl<R: Reader, I: Iterator<R>> Reader for ChainedReader<I, R> {\n         }\n         None\n     }\n-\n-    fn eof(&mut self) -> bool {\n-        self.cur_reader.is_none()\n-    }\n }\n \n /// A `Reader` which forwards input from another `Reader`, passing it along to\n@@ -174,10 +156,6 @@ impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {\n             len\n         })\n     }\n-\n-    fn eof(&mut self) -> bool {\n-        self.reader.eof()\n-    }\n }\n \n /// Copies all data from a `Reader` to a `Writer`.\n@@ -204,7 +182,6 @@ mod test {\n             let mut r = LimitReader::new(&mut r, 4);\n             assert_eq!(~[0, 1, 2], r.read_to_end());\n         }\n-        assert!(r.eof());\n     }\n \n     #[test]\n@@ -238,7 +215,6 @@ mod test {\n         let mut r = NullReader;\n         let mut buf = ~[0];\n         assert_eq!(r.read(buf), None);\n-        assert!(r.eof());\n     }\n \n     #[test]\n@@ -289,7 +265,6 @@ mod test {\n         let mut r = MemReader::new(~[0, 1, 2, 3, 4]);\n         let mut w = MemWriter::new();\n         copy(&mut r, &mut w);\n-        assert!(r.eof());\n         assert_eq!(~[0, 1, 2, 3, 4], w.unwrap());\n     }\n }"}]}