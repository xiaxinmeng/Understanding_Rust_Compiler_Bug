{"sha": "1008150b1c681d156920ca6f6e2c7403064819a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDgxNTBiMWM2ODFkMTU2OTIwY2E2ZjZlMmM3NDAzMDY0ODE5YTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-13T02:33:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-13T02:33:43Z"}, "message": "Rollup merge of #59057 - czipperz:standardize_range_documentation, r=shepmaster\n\nStandardize `Range*` documentation\n\nThis updates the final example in the documentation for the types\n`Range`, `RangeFrom`, `RangeFull`, `RangeInclusive`, `RangeTo`,\n`RangeToInclusive`.", "tree": {"sha": "2efc9469150964b6afde1e2251430435cbfb360e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2efc9469150964b6afde1e2251430435cbfb360e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1008150b1c681d156920ca6f6e2c7403064819a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJciGwHCRBK7hj4Ov3rIwAAdHIIAE6InYCiVXUkcFHIKzOY8+8/\nd+T826mEFDBrVHDKcQFMDOS0sNZxfamL1Nsw4k5wEEqkEMZ/7h6glVBahfgYwwR2\npdjeWthVqafgilOqdDQgH3nERefsbOc7ZxMIhwG52cfO0sMI1NMnC/I1JZ3IEXgb\nuOkNfETmgNRJV1bPZ89cko5onN9t63CVYnylTeSJRKM3Z46yOHccWzB2no+MasDu\nSw24TQ+82D1i5QVbPURzIKrQVyyXI5frRAjE/GIIco2+Fd0Q4mWHugfvN92b81nR\n2+0uYATtilt/pN1PDlsF3f9NpL7LyeI4BeeSMGlroE54mb8ap4EuL8NX2s0blsc=\n=vNuj\n-----END PGP SIGNATURE-----\n", "payload": "tree 2efc9469150964b6afde1e2251430435cbfb360e\nparent 68abd9a99976a84cca6dcb5459cc3bc279470b4c\nparent c46f75882f2c16de5956b64d186fea2968c303b6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552444423 +0100\ncommitter GitHub <noreply@github.com> 1552444423 +0100\n\nRollup merge of #59057 - czipperz:standardize_range_documentation, r=shepmaster\n\nStandardize `Range*` documentation\n\nThis updates the final example in the documentation for the types\n`Range`, `RangeFrom`, `RangeFull`, `RangeInclusive`, `RangeTo`,\n`RangeToInclusive`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1008150b1c681d156920ca6f6e2c7403064819a3", "html_url": "https://github.com/rust-lang/rust/commit/1008150b1c681d156920ca6f6e2c7403064819a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1008150b1c681d156920ca6f6e2c7403064819a3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68abd9a99976a84cca6dcb5459cc3bc279470b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68abd9a99976a84cca6dcb5459cc3bc279470b4c", "html_url": "https://github.com/rust-lang/rust/commit/68abd9a99976a84cca6dcb5459cc3bc279470b4c"}, {"sha": "c46f75882f2c16de5956b64d186fea2968c303b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f75882f2c16de5956b64d186fea2968c303b6", "html_url": "https://github.com/rust-lang/rust/commit/c46f75882f2c16de5956b64d186fea2968c303b6"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "81a8d001dd9cb4237d256eb9b470c5ece38012c7", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1008150b1c681d156920ca6f6e2c7403064819a3/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008150b1c681d156920ca6f6e2c7403064819a3/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=1008150b1c681d156920ca6f6e2c7403064819a3", "patch": "@@ -26,11 +26,13 @@ use hash::{Hash, Hasher};\n /// Used as a [slicing index], `RangeFull` produces the full array as a slice.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);  // RangeFull\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);\n-/// assert_eq!(arr[1.. ], [  1,2,3]);\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);  // RangeFull\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n@@ -60,11 +62,13 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!((3..5), std::ops::Range { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..6).sum());\n ///\n-/// let arr = ['a', 'b', 'c', 'd'];\n-/// assert_eq!(arr[ .. ], ['a', 'b', 'c', 'd']);\n-/// assert_eq!(arr[ ..3], ['a', 'b', 'c',    ]);\n-/// assert_eq!(arr[1.. ], [     'b', 'c', 'd']);\n-/// assert_eq!(arr[1..3], [     'b', 'c'     ]);  // Range\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);  // Range\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n@@ -160,11 +164,13 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// assert_eq!((2..), std::ops::RangeFrom { start: 2 });\n /// assert_eq!(2 + 3 + 4, (2..).take(3).sum());\n ///\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);\n-/// assert_eq!(arr[1.. ], [  1,2,3]);  // RangeFrom\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);  // RangeFrom\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n@@ -240,11 +246,13 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// elements before the index indicated by `end`.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ .. ], [0,1,2,3]);\n-/// assert_eq!(arr[ ..3], [0,1,2  ]);  // RangeTo\n-/// assert_eq!(arr[1.. ], [  1,2,3]);\n-/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);  // RangeTo\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n@@ -312,9 +320,13 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n ///\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ ..=2], [0,1,2  ]);\n-/// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n #[derive(Clone)]  // not Copy -- see #27186\n@@ -569,9 +581,13 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// array elements up to and including the index indicated by `end`.\n ///\n /// ```\n-/// let arr = [0, 1, 2, 3];\n-/// assert_eq!(arr[ ..=2], [0,1,2  ]);  // RangeToInclusive\n-/// assert_eq!(arr[1..=2], [  1,2  ]);\n+/// let arr = [0, 1, 2, 3, 4];\n+/// assert_eq!(arr[ ..  ], [0,1,2,3,4]);\n+/// assert_eq!(arr[ .. 3], [0,1,2    ]);\n+/// assert_eq!(arr[ ..=3], [0,1,2,3  ]);  // RangeToInclusive\n+/// assert_eq!(arr[1..  ], [  1,2,3,4]);\n+/// assert_eq!(arr[1.. 3], [  1,2    ]);\n+/// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n ///\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n@@ -676,7 +692,7 @@ pub enum Bound<T> {\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n /// `RangeBounds` is implemented by Rust's built-in range types, produced\n-/// by range syntax like `..`, `a..`, `..b` or `c..d`.\n+/// by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`.\n pub trait RangeBounds<T: ?Sized> {\n     /// Start index bound.\n     ///"}]}