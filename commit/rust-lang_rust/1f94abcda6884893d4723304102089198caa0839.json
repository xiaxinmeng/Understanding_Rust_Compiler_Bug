{"sha": "1f94abcda6884893d4723304102089198caa0839", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTRhYmNkYTY4ODQ4OTNkNDcyMzMwNDEwMjA4OTE5OGNhYTA4Mzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-06T05:02:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-06T05:02:35Z"}, "message": "Auto merge of #87808 - JohnTitor:rollup-qqp79xs, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #87561 (thread set_name haiku implementation.)\n - #87715 (Add long error explanation for E0625)\n - #87727 (explicit_generic_args_with_impl_trait: fix min expected number of generics)\n - #87742 (Validate FFI-safety warnings on naked functions)\n - #87756 (Add back -Zno-profiler-runtime)\n - #87759 (Re-use std::sealed::Sealed in os/linux/process.)\n - #87760 (Promote `aarch64-apple-ios-sim` to Tier 2)\n - #87770 (permit drop impls with generic constants in where clauses)\n - #87780 (alloc: Use intra doc links for the reserve function)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2cfbf1e075cd38233c4e2c4c00aed145d2fbe340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfbf1e075cd38233c4e2c4c00aed145d2fbe340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f94abcda6884893d4723304102089198caa0839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f94abcda6884893d4723304102089198caa0839", "html_url": "https://github.com/rust-lang/rust/commit/1f94abcda6884893d4723304102089198caa0839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f94abcda6884893d4723304102089198caa0839/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7129033b429d75709d71fb6bf66c0cce2fec77c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7129033b429d75709d71fb6bf66c0cce2fec77c1", "html_url": "https://github.com/rust-lang/rust/commit/7129033b429d75709d71fb6bf66c0cce2fec77c1"}, {"sha": "b98c388352f711f160af94a446c4d4bb3ade7aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b98c388352f711f160af94a446c4d4bb3ade7aad", "html_url": "https://github.com/rust-lang/rust/commit/b98c388352f711f160af94a446c4d4bb3ade7aad"}], "stats": {"total": 225, "additions": 179, "deletions": 46}, "files": [{"sha": "719c2c6768bc8f07198ef213825e8a8215a815ef", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -359,6 +359,7 @@ E0621: include_str!(\"./error_codes/E0621.md\"),\n E0622: include_str!(\"./error_codes/E0622.md\"),\n E0623: include_str!(\"./error_codes/E0623.md\"),\n E0624: include_str!(\"./error_codes/E0624.md\"),\n+E0625: include_str!(\"./error_codes/E0625.md\"),\n E0626: include_str!(\"./error_codes/E0626.md\"),\n E0627: include_str!(\"./error_codes/E0627.md\"),\n E0628: include_str!(\"./error_codes/E0628.md\"),\n@@ -622,7 +623,6 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n //  E0611, // merged into E0616\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n-    E0625, // thread-local statics cannot be accessed at compile-time\n //  E0629, // missing 'feature' (rustc_const_unstable)\n //  E0630, // rustc_const_unstable attribute must be paired with stable/unstable\n            // attribute"}, {"sha": "7db857723ccbb11881ad551771aa224a90e6c316", "filename": "compiler/rustc_error_codes/src/error_codes/E0625.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0625.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0625.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0625.md?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,28 @@\n+A compile-time const variable is referring to a thread-local static variable.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0625\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static X: usize = 12;\n+\n+const Y: usize = 2 * X;\n+```\n+\n+Static and const variables can refer to other const variables but a const\n+variable cannot refer to a thread-local static variable. In this example,\n+`Y` cannot refer to `X`. To fix this, the value can be extracted as a const\n+and then used:\n+\n+```\n+#![feature(thread_local)]\n+\n+const C: usize = 12;\n+\n+#[thread_local]\n+static X: usize = C;\n+\n+const Y: usize = 2 * C;\n+```"}, {"sha": "b896143400698745985faaabf8bda2b2109ebeb9", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -740,6 +740,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n+    tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(plt, Some(true));\n@@ -748,7 +749,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(print_fuel, Some(\"abc\".to_string()));\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n-    tracked!(profiler_runtime, None);\n+    tracked!(profiler_runtime, \"abc\".to_string());\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));"}, {"sha": "394cb8389357f2f02633f06c2cf2f4f58b2a9748", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -777,19 +777,17 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n-        let profiler_runtime = &self.sess.opts.debugging_opts.profiler_runtime;\n-\n-        if !(profiler_runtime.is_some()\n-            && (self.sess.instrument_coverage()\n+        if self.sess.opts.debugging_opts.no_profiler_runtime\n+            || !(self.sess.instrument_coverage()\n                 || self.sess.opts.debugging_opts.profile\n-                || self.sess.opts.cg.profile_generate.enabled()))\n+                || self.sess.opts.cg.profile_generate.enabled())\n         {\n             return;\n         }\n \n         info!(\"loading profiler\");\n \n-        let name = Symbol::intern(profiler_runtime.as_ref().unwrap());\n+        let name = Symbol::intern(&self.sess.opts.debugging_opts.profiler_runtime);\n         if name == sym::profiler_builtins && self.sess.contains_name(&krate.attrs, sym::no_core) {\n             self.sess.err(\n                 \"`profiler_builtins` crate (required by compiler options) \\"}, {"sha": "cf8577a26cf714fd6c31b056e753b3c51208982f", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -1103,8 +1103,8 @@ impl CrateError {\n                         if sess.is_nightly_build() {\n                             err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n                         }\n-                    } else if Some(crate_name)\n-                        == sess.opts.debugging_opts.profiler_runtime.as_deref().map(Symbol::intern)\n+                    } else if crate_name\n+                        == Symbol::intern(&sess.opts.debugging_opts.profiler_runtime)\n                     {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n                     }"}, {"sha": "95a7b0994b8ade388b041d22c910f94d1265f10f", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -1172,6 +1172,8 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n+        \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],\n         \"normalize associated items in rustdoc when generating documentation\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1217,8 +1219,8 @@ options! {\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"file path to emit profiling data at runtime when using 'profile' \\\n         (default based on relative source path)\"),\n-    profiler_runtime: Option<String> = (Some(String::from(\"profiler_builtins\")), parse_opt_string, [TRACKED],\n-        \"name of the profiler runtime crate to automatically inject, or None to disable\"),\n+    profiler_runtime: String = (String::from(\"profiler_builtins\"), parse_string, [TRACKED],\n+        \"name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "fd0544a47bb7c3e6ed06a3bc34b600e9d9c4cd8b", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -613,7 +613,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 param_counts.consts + named_type_param_count\n                     - default_counts.types\n                     - default_counts.consts\n-                    - synth_type_param_count\n             };\n             debug!(\"expected_min: {:?}\", expected_min);\n             debug!(\"arg_counts.lifetimes: {:?}\", gen_args.num_lifetime_params());"}, {"sha": "17f5020300d40c10b23af50e3198376ee2dc5a91", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -218,9 +218,9 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n         // This closure is a more robust way to check `Predicate` equality\n         // than simple `==` checks (which were the previous implementation).\n-        // It relies on `ty::relate` for `TraitPredicate` and `ProjectionPredicate`\n-        // (which implement the Relate trait), while delegating on simple equality\n-        // for the other `Predicate`.\n+        // It relies on `ty::relate` for `TraitPredicate`, `ProjectionPredicate`,\n+        // `ConstEvaluatable` and `TypeOutlives` (which implement the Relate trait),\n+        // while delegating on simple equality for the other `Predicate`.\n         // This implementation solves (Issue #59497) and (Issue #58311).\n         // It is unclear to me at the moment whether the approach based on `relate`\n         // could be extended easily also to the other `Predicate`.\n@@ -235,6 +235,13 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n+                (\n+                    ty::PredicateKind::ConstEvaluatable(def_a, substs_a),\n+                    ty::PredicateKind::ConstEvaluatable(def_b, substs_b),\n+                ) => tcx.try_unify_abstract_consts(((def_a, substs_a), (def_b, substs_b))),\n+                (ty::PredicateKind::TypeOutlives(a), ty::PredicateKind::TypeOutlives(b)) => {\n+                    relator.relate(predicate.rebind(a.0), p.rebind(b.0)).is_ok()\n+                }\n                 _ => predicate == p,\n             }\n         };"}, {"sha": "6bbddeb69b2966b2fd820ae6172891332d9abcdf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -697,7 +697,9 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer `reserve` if future insertions are expected.\n+    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    ///\n+    /// [`reserve`]: VecDeque::reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "a6b8bdef89c116e109fab3a79f82fb050ad48db4", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -1035,7 +1035,9 @@ impl String {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer `reserve` if future insertions are expected.\n+    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    ///\n+    /// [`reserve`]: String::reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "c54c91509d48b0bd58176798a7806bfe082fcf58", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -811,7 +811,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer `reserve` if future insertions are expected.\n+    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    ///\n+    /// [`reserve`]: Vec::reserve\n     ///\n     /// # Panics\n     ///\n@@ -875,7 +877,9 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer `reserve` if future insertions are expected.\n+    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    ///\n+    /// [`reserve`]: Vec::reserve\n     ///\n     /// # Errors\n     ///"}, {"sha": "84735345ac3b693cfd4bcbc7a96293480d398ab7", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -271,7 +271,9 @@ impl OsString {\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n-    /// minimal. Prefer reserve if future insertions are expected.\n+    /// minimal. Prefer [`reserve`] if future insertions are expected.\n+    ///\n+    /// [`reserve`]: OsString::reserve\n     ///\n     /// # Examples\n     ///"}, {"sha": "6daff0f003c8fb03cff4667e8f09868baadfcec3", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -5,6 +5,7 @@\n use crate::io::Result;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::process;\n+use crate::sealed::Sealed;\n #[cfg(not(doc))]\n use crate::sys::fd::FileDesc;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n@@ -84,15 +85,10 @@ impl IntoRawFd for PidFd {\n     }\n }\n \n-mod private_child_ext {\n-    pub trait Sealed {}\n-    impl Sealed for crate::process::Child {}\n-}\n-\n /// Os-specific extensions for [`Child`]\n ///\n /// [`Child`]: process::Child\n-pub trait ChildExt: private_child_ext::Sealed {\n+pub trait ChildExt: Sealed {\n     /// Obtains a reference to the [`PidFd`] created for this [`Child`], if available.\n     ///\n     /// A pidfd will only be available if its creation was requested with\n@@ -120,15 +116,10 @@ pub trait ChildExt: private_child_ext::Sealed {\n     fn take_pidfd(&mut self) -> Result<PidFd>;\n }\n \n-mod private_command_ext {\n-    pub trait Sealed {}\n-    impl Sealed for crate::process::Command {}\n-}\n-\n /// Os-specific extensions for [`Command`]\n ///\n /// [`Command`]: process::Command\n-pub trait CommandExt: private_command_ext::Sealed {\n+pub trait CommandExt: Sealed {\n     /// Sets whether a [`PidFd`](struct@PidFd) should be created for the [`Child`]\n     /// spawned by this [`Command`].\n     /// By default, no pidfd will be created."}, {"sha": "d3e271df8d8ccc1835ccca4137413075e5561257", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -205,6 +205,10 @@ pub struct Child {\n     pub stderr: Option<ChildStderr>,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for Child {}\n+\n impl AsInner<imp::Process> for Child {\n     fn as_inner(&self) -> &imp::Process {\n         &self.handle"}, {"sha": "bc61f472a2b0501fcbda5f5e4c01a3a61ed58fee", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -164,16 +164,23 @@ impl Thread {\n         }\n     }\n \n+    #[cfg(target_os = \"haiku\")]\n+    pub fn set_name(name: &CStr) {\n+        unsafe {\n+            let thread_self = libc::find_thread(ptr::null_mut());\n+            libc::rename_thread(thread_self, name.as_ptr());\n+        }\n+    }\n+\n     #[cfg(any(\n         target_env = \"newlib\",\n-        target_os = \"haiku\",\n         target_os = \"l4re\",\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\"\n     ))]\n     pub fn set_name(_name: &CStr) {\n-        // Newlib, Haiku, Emscripten, and VxWorks have no way to set a thread name.\n+        // Newlib, Emscripten, and VxWorks have no way to set a thread name.\n     }\n \n     pub fn sleep(dur: Duration) {"}, {"sha": "b265760dc57579637f48d87d1e7f75807b5f6cc6", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -165,6 +165,7 @@ target | std | notes\n `wasm32-unknown-unknown` | \u2713 | WebAssembly\n `wasm32-wasi` | \u2713 | WebAssembly with WASI\n `x86_64-apple-ios` | \u2713 | 64-bit x86 iOS\n+[`aarch64-apple-ios-sim`](platform-support/aarch64-apple-ios-sim.md) | \u2713 |  | Apple iOS Simulator on ARM64\n `x86_64-fortanix-unknown-sgx` | \u2713 | [Fortanix ABI] for 64-bit Intel SGX\n `x86_64-fuchsia` | \u2713 | 64-bit Fuchsia\n `x86_64-linux-android` | \u2713 | 64-bit x86 Android\n@@ -196,7 +197,6 @@ host tools.\n target | std | host | notes\n -------|:---:|:----:|-------\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n-[`aarch64-apple-ios-sim`](platform-support/aarch64-apple-ios-sim.md) | \u2713 |  | Apple iOS Simulator on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |"}, {"sha": "3f29e2c5e1f7a3a2b242a32ed044b2a67c89eb7b", "filename": "src/doc/rustc/src/platform-support/aarch64-apple-ios-sim.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -1,6 +1,6 @@\n # aarch64-apple-ios-sim\n \n-**Tier: 3**\n+**Tier: 2**\n \n Apple iOS Simulator on ARM64.\n \n@@ -39,17 +39,16 @@ Currently there is no support to run the rustc test suite for this target.\n \n *Note: Building for this target requires the corresponding iOS SDK, as provided by Xcode 12+.*\n \n-If `rustc` has support for that target and the library artifacts are available,\n-then Rust programs can be built for that target:\n+From Rust Nightly 1.56.0 (2021-08-03) on the artifacts are shipped pre-compiled:\n \n ```text\n-rustc --target aarch64-apple-ios-sim your-code.rs\n+rustup target add aarch64-apple-ios-sim --toolchain nightly\n ```\n \n-On Rust Nightly it is possible to build without the target artifacts available:\n+Rust programs can be built for that target:\n \n ```text\n-cargo build -Z build-std --target aarch64-apple-ios-sim\n+rustc --target aarch64-apple-ios-sim your-code.rs\n ```\n \n There is no easy way to run simple programs in the iOS simulator."}, {"sha": "5b2a8ed3034a6cffe1714af6c75902063079cece", "filename": "src/test/ui/asm/naked-functions-ffi.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// only-x86_64\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![crate_type = \"lib\"]\n+\n+#[naked]\n+pub extern \"C\" fn naked(p: char) -> u128 {\n+    //~^ WARN uses type `char`\n+    //~| WARN uses type `u128`\n+    unsafe { asm!(\"\", options(noreturn)); }\n+}"}, {"sha": "a6772badeb65f50870eab9169a755f30978c5608", "filename": "src/test/ui/asm/naked-functions-ffi.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-ffi.stderr?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,20 @@\n+warning: `extern` fn uses type `char`, which is not FFI-safe\n+  --> $DIR/naked-functions-ffi.rs:8:28\n+   |\n+LL | pub extern \"C\" fn naked(p: char) -> u128 {\n+   |                            ^^^^ not FFI-safe\n+   |\n+   = note: `#[warn(improper_ctypes_definitions)]` on by default\n+   = help: consider using `u32` or `libc::wchar_t` instead\n+   = note: the `char` type has no C equivalent\n+\n+warning: `extern` fn uses type `u128`, which is not FFI-safe\n+  --> $DIR/naked-functions-ffi.rs:8:37\n+   |\n+LL | pub extern \"C\" fn naked(p: char) -> u128 {\n+   |                                     ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "41fb5d70afd6ee5a25eb4eba346f7080320e1187", "filename": "src/test/ui/const-generics/const_evaluatable_checked/drop_impl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,16 @@\n+//check-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>\n+where\n+    [(); N + 1]: ;\n+\n+impl<const N: usize> Drop for Foo<N>\n+where\n+    [(); N + 1]: ,\n+{\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}, {"sha": "3add0429d2d5819d44370454d31ab7310a2a77f4", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -1,12 +1,12 @@\n-error[E0107]: this function takes at most 1 generic argument but 2 generic arguments were supplied\n+error[E0107]: this function takes 1 generic argument but 2 generic arguments were supplied\n   --> $DIR/explicit-generic-args-for-impl.rs:6:5\n    |\n LL |     foo::<str, String>(\"\".to_string());\n    |     ^^^        ------ help: remove this generic argument\n    |     |\n-   |     expected at most 1 generic argument\n+   |     expected 1 generic argument\n    |\n-note: function defined here, with at most 1 generic parameter: `T`\n+note: function defined here, with 1 generic parameter: `T`\n   --> $DIR/explicit-generic-args-for-impl.rs:3:4\n    |\n LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}"}, {"sha": "e2ee63821ae740633d6568171b978b5261d3b0f5", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/issue-87718.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn f<T: ?Sized>(_: impl AsRef<T>, _: impl AsRef<T>) {}\n+\n+fn main() {\n+    f::<[u8]>(\"a\", b\"a\");\n+}"}, {"sha": "ffb0582fe8df4113e23526686ace57ea95d39dc2", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,8 @@\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n+\n+fn main() {\n+    f::<[u8]>(\"a\", b\"a\");\n+    //~^ ERROR: this function takes 2 generic arguments but 1 generic argument was supplied\n+}"}, {"sha": "233b47445db029b26b30703ac5a1600bd2d84358", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -0,0 +1,21 @@\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+  --> $DIR/not-enough-args.rs:6:5\n+   |\n+LL |     f::<[u8]>(\"a\", b\"a\");\n+   |     ^   ---- supplied 1 generic argument\n+   |     |\n+   |     expected 2 generic arguments\n+   |\n+note: function defined here, with 2 generic parameters: `T`, `U`\n+  --> $DIR/not-enough-args.rs:3:4\n+   |\n+LL | fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n+   |    ^ -          -\n+help: add missing generic argument\n+   |\n+LL |     f::<[u8], U>(\"a\", b\"a\");\n+   |             ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "fd967604624cb9ca863f40e90670e16201a9e89a", "filename": "src/test/ui/thread-local-in-ctfe.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.stderr?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -30,3 +30,4 @@ LL |     A\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0625`."}, {"sha": "712050a25fcfe59a8c4eca01bf7bb95207ed2294", "filename": "src/test/ui/thread-local-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fthread-local-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f94abcda6884893d4723304102089198caa0839/src%2Ftest%2Fui%2Fthread-local-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-static.stderr?ref=1f94abcda6884893d4723304102089198caa0839", "patch": "@@ -40,5 +40,5 @@ LL |     std::mem::swap(x, &mut STATIC_VAR_2)\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0013, E0133, E0658.\n+Some errors have detailed explanations: E0013, E0133, E0625, E0658.\n For more information about an error, try `rustc --explain E0013`."}]}