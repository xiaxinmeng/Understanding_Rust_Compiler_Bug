{"sha": "312eafe91677441f2efdccd27db44b4e0bf8710c", "node_id": "C_kwDOAAsO6NoAKDMxMmVhZmU5MTY3NzQ0MWYyZWZkY2NkMjdkYjQ0YjRlMGJmODcxMGM", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-17T07:00:24Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-17T07:02:49Z"}, "message": "maybe this is better??", "tree": {"sha": "3347223433f68873aaa4b4a5b80a1bbbf4aeb398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3347223433f68873aaa4b4a5b80a1bbbf4aeb398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312eafe91677441f2efdccd27db44b4e0bf8710c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312eafe91677441f2efdccd27db44b4e0bf8710c", "html_url": "https://github.com/rust-lang/rust/commit/312eafe91677441f2efdccd27db44b4e0bf8710c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312eafe91677441f2efdccd27db44b4e0bf8710c/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbc4b935679c142a6b45d9ebaf27e05254e8081", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbc4b935679c142a6b45d9ebaf27e05254e8081", "html_url": "https://github.com/rust-lang/rust/commit/4fbc4b935679c142a6b45d9ebaf27e05254e8081"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "e9ace855fc35dee7bebd79aa834dbd836e02d181", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=312eafe91677441f2efdccd27db44b4e0bf8710c", "patch": "@@ -401,24 +401,14 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter) -> Result<(), Hir\n \n impl HirDisplay for Const {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        let module_id = self.module(f.db).id;\n-        write_visibility(module_id, self.visibility(f.db), f)?;\n+        write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n         let data = f.db.const_data(self.id);\n         write!(f, \"const \")?;\n         match &data.name {\n             Some(name) => write!(f, \"{}: \", name)?,\n             None => write!(f, \"_: \")?,\n         }\n         data.type_ref.hir_fmt(f)?;\n-        let ast_id_map = f.db.ast_id_map(data.file_id);\n-        let ast_node = ast_id_map.get(data.ast_id);\n-        if let Some(syntax_node) = f.db.parse_or_expand(data.file_id) {\n-            let ast_node = ast_node.to_node(&syntax_node);\n-            if let Some(body) = ast_node.body() {\n-                write!(f, \" = {}\", body)?;\n-            }\n-        }\n-\n         Ok(())\n     }\n }"}, {"sha": "ee7270f29596a80bae152db2d5bd9fb9b973c0d2", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=312eafe91677441f2efdccd27db44b4e0bf8710c", "patch": "@@ -1457,6 +1457,17 @@ impl Const {\n         db.const_data(self.id).name.clone()\n     }\n \n+    pub fn value(self, db: &dyn HirDatabase) -> Option<ast::Expr> {\n+        let loc = self.id.lookup(db.upcast());\n+        let item_tree = loc.id.item_tree(db.upcast());\n+        let ast_id = item_tree[loc.id.value].ast_id;\n+        let ast_id_map = db.ast_id_map(loc.id.file_id());\n+        let ast_ptr = ast_id_map.get(ast_id);\n+        let syntax_node = db.parse_or_expand(loc.id.file_id())?;\n+        let ast_node = ast_ptr.to_node(&syntax_node);\n+        ast_node.body()\n+    }\n+\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let data = db.const_data(self.id);\n         let resolver = self.id.resolver(db.upcast());"}, {"sha": "f4d0c3af90badd404a4e62aa7b6451f91a04cc42", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=312eafe91677441f2efdccd27db44b4e0bf8710c", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_expand::{ast_id_map::FileAstId, name::Name, HirFileId, InFile};\n+use hir_expand::{name::Name, InFile};\n use syntax::ast;\n \n use crate::{\n@@ -255,8 +255,6 @@ pub struct ConstData {\n     pub name: Option<Name>,\n     pub type_ref: Interned<TypeRef>,\n     pub visibility: RawVisibility,\n-    pub ast_id: FileAstId<ast::Const>,\n-    pub file_id: HirFileId,\n }\n \n impl ConstData {\n@@ -269,8 +267,6 @@ impl ConstData {\n             name: konst.name.clone(),\n             type_ref: konst.type_ref.clone(),\n             visibility: item_tree[konst.visibility].clone(),\n-            ast_id: konst.ast_id.clone(),\n-            file_id: loc.id.file_id(),\n         })\n     }\n }"}, {"sha": "46fe7f2b7d2394fb9ca39b687172071e1b2b3c96", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312eafe91677441f2efdccd27db44b4e0bf8710c/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=312eafe91677441f2efdccd27db44b4e0bf8710c", "patch": "@@ -1,6 +1,6 @@\n //! Logic for rendering the different hover messages\n use either::Either;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n+use hir::{AsAssocItem, Const, HasAttrs, HasSource, HirDisplay, Semantics, TypeInfo};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::Definition,\n@@ -352,7 +352,7 @@ pub(super) fn definition(\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_docs(db, it),\n         Definition::Variant(it) => label_and_docs(db, it),\n-        Definition::Const(it) => label_and_docs(db, it),\n+        Definition::Const(it) => const_label_value_and_docs(db, it),\n         Definition::Static(it) => label_and_docs(db, it),\n         Definition::Trait(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_docs(db, it),\n@@ -381,6 +381,21 @@ where\n     (label, docs)\n }\n \n+fn const_label_value_and_docs(\n+    db: &RootDatabase,\n+    konst: Const,\n+) -> (String, Option<hir::Documentation>) {\n+    let label = if let Some(expr) = konst.value(db) {\n+        format!(\"{} = {}\", konst.display(db), expr)\n+    } else {\n+        konst.display(db).to_string()\n+    };\n+\n+    let docs = konst.attrs(db).docs();\n+\n+    (label, docs)\n+}\n+\n fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     if let Definition::GenericParam(_) = def {\n         return None;"}]}