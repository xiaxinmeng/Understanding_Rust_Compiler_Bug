{"sha": "155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWI0YjFjNWZmZjZhMmE1YTg3ZGUyNWUyZmJlOGM5Njc0M2VmYjI=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-25T17:51:11Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-26T01:45:38Z"}, "message": "Module overview for std::os::windows:ffi", "tree": {"sha": "772007d3a133954baf3eb82392ac85cfd03e4249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/772007d3a133954baf3eb82392ac85cfd03e4249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "html_url": "https://github.com/rust-lang/rust/commit/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5e18f322818f54cd9764031979f29b89a3e80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5e18f322818f54cd9764031979f29b89a3e80d", "html_url": "https://github.com/rust-lang/rust/commit/3c5e18f322818f54cd9764031979f29b89a3e80d"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "376e13e3b034bbdd0f40f69d5ea922f906b1749f", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "patch": "@@ -92,7 +92,7 @@\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n-//! * [`OsStr`] represents a borrowed reference to a string in a format that\n+//! * [`OsStr`] represents a borrowed string slice in a format that\n //! can be passed to the operating system.  It can be converted into\n //! an UTF-8 Rust string slice in a similar way to `OsString`.\n //!"}, {"sha": "d6b8896ac096d2e8caf3594a9b6459dfae69e8cb", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=155b4b1c5fff6a2a5a87de25e2fbe8c96743efb2", "patch": "@@ -9,6 +9,62 @@\n // except according to those terms.\n \n //! Windows-specific extensions to the primitives in the `std::ffi` module.\n+//!\n+//! # Overview\n+//!\n+//! For historical reasons, the Windows API uses a form of potentially\n+//! ill-formed UTF-16 encoding for strings.  Specifically, the 16-bit\n+//! code units in Windows strings may contain [isolated surrogate code\n+//! points which are not paired together][ill-formed-utf-16].  The\n+//! Unicode standard requires that surrogate code points (those in the\n+//! range U+D800 to U+DFFF) always be *paired*, because in the UTF-16\n+//! encoding a *surrogate code unit pair* is used to encode a single\n+//! character.  For compatibility with code that does not enforce\n+//! these pairings, Windows does not enforce them, either.\n+//!\n+//! While it is not always possible to convert such a string losslessly into\n+//! a valid UTF-16 string (or even UTF-8), it is often desirable to be\n+//! able to round-trip such a string from and to Windows APIs\n+//! losslessly.  For example, some Rust code may be \"bridging\" some\n+//! Windows APIs together, just passing `WCHAR` strings among those\n+//! APIs without ever really looking into the strings.\n+//!\n+//! If Rust code *does* need to look into those strings, it can\n+//! convert them to valid UTF-8, possibly lossily, by substituting\n+//! invalid sequences with U+FFFD REPLACEMENT CHARACTER, as is\n+//! conventionally done in other Rust APIs that deal with string\n+//! encodings.\n+//!\n+//! # `OsStringExt` and `OsStrExt`\n+//!\n+//! [`OsString`] is the Rust wrapper for owned strings in the\n+//! preferred representation of the operating system.  On Windows,\n+//! this struct gets augmented with an implementation of the\n+//! [`OsStringExt`] trait, which has a [`from_wide`] method.  This\n+//! lets you create an [`OsString`] from a `&[u16]` slice; presumably\n+//! you get such a slice out of a `WCHAR` Windows API.\n+//!\n+//! Similarly, [`OsStr`] is the Rust wrapper for borrowed strings from\n+//! preferred representation of the operating system.  On Windows, the\n+//! [`OsStrExt`] trait provides the [`encode_wide`] method, which\n+//! outputs an [`EncodeWide`] iterator.  You can [`collect`] this\n+//! iterator, for example, to obtain a `Vec<u16>`; you can later get a\n+//! pointer to this vector's contents and feed it to Windows APIs.\n+//!\n+//! These traits, along with [`OsString`] and [`OsStr`], work in\n+//! conjunction so that it is possible to **round-trip** strings from\n+//! Windows and back, with no loss of data, even if the strings are\n+//! ill-formed UTF-16.\n+//!\n+//! [ill-formed-utf-16]: https://simonsapin.github.io/wtf-8/#ill-formed-utf-16\n+//! [`OsString`]: ../../../ffi/struct.OsString.html\n+//! [`OsStr`]: ../../../ffi/struct.OsStr.html\n+//! [`OsStringExt`]: trait.OsStringExt.html\n+//! [`OsStrExt`]: trait.OsStrExt.html\n+//! [`EncodeWide`]: struct.EncodeWide.html\n+//! [`from_wide`]: trait.OsStringExt.html#tymethod.from_wide\n+//! [`encode_wide`]: trait.OsStrExt.html#tymethod.encode_wide\n+//! [`collect`]: ../../../iter/trait.Iterator.html#method.collect\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}