{"sha": "2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjBmNjQ3MjJhOTJkZmZhMTJkNDNhNGMwMzgzYTlkNzZiZWNiY2M=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-19T16:03:10Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-27T09:56:43Z"}, "message": "Move linux-specific futex code into `sys` module.", "tree": {"sha": "451f908baef6eef53f4538eba2e37ed983c76efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451f908baef6eef53f4538eba2e37ed983c76efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "html_url": "https://github.com/rust-lang/rust/commit/2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "568d9696e90d6bd8125d59cebf13b3af624abd31", "url": "https://api.github.com/repos/rust-lang/rust/commits/568d9696e90d6bd8125d59cebf13b3af624abd31", "html_url": "https://github.com/rust-lang/rust/commit/568d9696e90d6bd8125d59cebf13b3af624abd31"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "6af06aa5f7ee475067826e0e2cfc638fa710e090", "filename": "library/std/src/sys/unix/futex.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "patch": "@@ -0,0 +1,38 @@\n+#![cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+\n+use crate::sync::atomic::AtomicI32;\n+use crate::time::Duration;\n+\n+pub fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n+    let timespec;\n+    let timespec_ptr = match timeout {\n+        Some(timeout) => {\n+            timespec = libc::timespec {\n+                tv_sec: timeout.as_secs() as _,\n+                tv_nsec: timeout.subsec_nanos() as _,\n+            };\n+            &timespec as *const libc::timespec\n+        }\n+        None => crate::ptr::null(),\n+    };\n+    unsafe {\n+        libc::syscall(\n+            libc::SYS_futex,\n+            futex as *const AtomicI32,\n+            libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n+            expected,\n+            timespec_ptr,\n+        );\n+    }\n+}\n+\n+pub fn futex_wake(futex: &AtomicI32) {\n+    unsafe {\n+        libc::syscall(\n+            libc::SYS_futex,\n+            futex as *const AtomicI32,\n+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n+            1,\n+        );\n+    }\n+}"}, {"sha": "6c623e21099f04ca1d320fe693454a1d4933b2ac", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "patch": "@@ -49,6 +49,7 @@ pub mod env;\n pub mod ext;\n pub mod fd;\n pub mod fs;\n+pub mod futex;\n pub mod io;\n #[cfg(target_os = \"l4re\")]\n mod l4re;"}, {"sha": "2d7a77705080662625b0cc7b248cc20fe06f4b96", "filename": "library/std/src/thread/parker/futex.rs", "status": "renamed", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs?ref=2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "patch": "@@ -1,5 +1,6 @@\n use crate::sync::atomic::AtomicI32;\n use crate::sync::atomic::Ordering::{Acquire, Release};\n+use crate::sys::futex::{futex_wait, futex_wake};\n use crate::time::Duration;\n \n const PARKED: i32 = -1;\n@@ -70,37 +71,3 @@ impl Parker {\n         }\n     }\n }\n-\n-fn futex_wait(futex: &AtomicI32, expected: i32, timeout: Option<Duration>) {\n-    let timespec;\n-    let timespec_ptr = match timeout {\n-        Some(timeout) => {\n-            timespec = libc::timespec {\n-                tv_sec: timeout.as_secs() as _,\n-                tv_nsec: timeout.subsec_nanos() as _,\n-            };\n-            &timespec as *const libc::timespec\n-        }\n-        None => crate::ptr::null(),\n-    };\n-    unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicI32,\n-            libc::FUTEX_WAIT | libc::FUTEX_PRIVATE_FLAG,\n-            expected,\n-            timespec_ptr,\n-        );\n-    }\n-}\n-\n-fn futex_wake(futex: &AtomicI32) {\n-    unsafe {\n-        libc::syscall(\n-            libc::SYS_futex,\n-            futex as *const AtomicI32,\n-            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,\n-            1,\n-        );\n-    }\n-}", "previous_filename": "library/std/src/thread/parker/linux.rs"}, {"sha": "23c17c8e2cf26108e6049121c1d4ae61bbc192fa", "filename": "library/std/src/thread/parker/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0f64722a92dffa12d43a4c0383a9d76becbcc/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Fmod.rs?ref=2cf0f64722a92dffa12d43a4c0383a9d76becbcc", "patch": "@@ -1,7 +1,7 @@\n cfg_if::cfg_if! {\n     if #[cfg(any(target_os = \"linux\", target_os = \"android\"))] {\n-        mod linux;\n-        pub use linux::Parker;\n+        mod futex;\n+        pub use futex::Parker;\n     } else {\n         mod generic;\n         pub use generic::Parker;"}]}