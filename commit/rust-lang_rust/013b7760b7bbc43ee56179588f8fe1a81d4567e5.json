{"sha": "013b7760b7bbc43ee56179588f8fe1a81d4567e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxM2I3NzYwYjdiYmM0M2VlNTYxNzk1ODhmOGZlMWE4MWQ0NTY3ZTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-10T00:21:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:15Z"}, "message": "core: Turn task::unkillable, etc. into no-ops in newsched. #6377\n\nNot necessary just yet but they make ARC not work.", "tree": {"sha": "8b59c3c10dbfed9dd219ad468f017a22dde79bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b59c3c10dbfed9dd219ad468f017a22dde79bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/013b7760b7bbc43ee56179588f8fe1a81d4567e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/013b7760b7bbc43ee56179588f8fe1a81d4567e5", "html_url": "https://github.com/rust-lang/rust/commit/013b7760b7bbc43ee56179588f8fe1a81d4567e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/013b7760b7bbc43ee56179588f8fe1a81d4567e5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afcf4f2639ea58f847d0c7260a46d65738179fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/afcf4f2639ea58f847d0c7260a46d65738179fae", "html_url": "https://github.com/rust-lang/rust/commit/afcf4f2639ea58f847d0c7260a46d65738179fae"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "3e2e10504cf9b25252e445415af0df63b36b720b", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/013b7760b7bbc43ee56179588f8fe1a81d4567e5/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013b7760b7bbc43ee56179588f8fe1a81d4567e5/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=013b7760b7bbc43ee56179588f8fe1a81d4567e5", "patch": "@@ -113,7 +113,6 @@ mod local_heap;\n pub mod logging;\n \n /// Tools for testing the runtime\n-#[cfg(test)]\n pub mod test;\n \n /// Reference counting"}, {"sha": "a6edee38e188a6668d0b5fdd6c76e9a63ca9de88", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/013b7760b7bbc43ee56179588f8fe1a81d4567e5/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013b7760b7bbc43ee56179588f8fe1a81d4567e5/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=013b7760b7bbc43ee56179588f8fe1a81d4567e5", "patch": "@@ -43,6 +43,7 @@ use task::rt::{task_id, sched_id};\n use util;\n use util::replace;\n use unstable::finally::Finally;\n+use rt::{context, OldTaskContext};\n \n #[cfg(test)] use comm::SharedChan;\n \n@@ -558,23 +559,33 @@ pub fn get_scheduler() -> Scheduler {\n  * ~~~\n  */\n pub unsafe fn unkillable<U>(f: &fn() -> U) -> U {\n-    let t = rt::rust_get_task();\n-    do (|| {\n-        rt::rust_task_inhibit_kill(t);\n+    if context() == OldTaskContext {\n+        let t = rt::rust_get_task();\n+        do (|| {\n+            rt::rust_task_inhibit_kill(t);\n+            f()\n+        }).finally {\n+            rt::rust_task_allow_kill(t);\n+        }\n+    } else {\n+        // FIXME #6377\n         f()\n-    }).finally {\n-        rt::rust_task_allow_kill(t);\n     }\n }\n \n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n-    let t = rt::rust_get_task();\n-    do (|| {\n-        rt::rust_task_allow_kill(t);\n+    if context() == OldTaskContext {\n+        let t = rt::rust_get_task();\n+        do (|| {\n+            rt::rust_task_allow_kill(t);\n+            f()\n+        }).finally {\n+            rt::rust_task_inhibit_kill(t);\n+        }\n+    } else {\n+        // FIXME #6377\n         f()\n-    }).finally {\n-        rt::rust_task_inhibit_kill(t);\n     }\n }\n \n@@ -583,14 +594,19 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n  * For use with exclusive ARCs, which use pthread mutexes directly.\n  */\n pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n-    let t = rt::rust_get_task();\n-    do (|| {\n-        rt::rust_task_inhibit_kill(t);\n-        rt::rust_task_inhibit_yield(t);\n+    if context() == OldTaskContext {\n+        let t = rt::rust_get_task();\n+        do (|| {\n+            rt::rust_task_inhibit_kill(t);\n+            rt::rust_task_inhibit_yield(t);\n+            f()\n+        }).finally {\n+            rt::rust_task_allow_yield(t);\n+            rt::rust_task_allow_kill(t);\n+        }\n+    } else {\n+        // FIXME #6377\n         f()\n-    }).finally {\n-        rt::rust_task_allow_yield(t);\n-        rt::rust_task_allow_kill(t);\n     }\n }\n "}]}