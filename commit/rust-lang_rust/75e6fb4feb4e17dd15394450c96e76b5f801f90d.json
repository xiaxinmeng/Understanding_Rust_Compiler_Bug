{"sha": "75e6fb4feb4e17dd15394450c96e76b5f801f90d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTZmYjRmZWI0ZTE3ZGQxNTM5NDQ1MGM5NmU3NmI1ZjgwMWY5MGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T10:31:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T07:59:29Z"}, "message": "Fix monomorphization of resource constructors", "tree": {"sha": "3904a9d5c49f02837a82c10764605cf1f9b3c1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3904a9d5c49f02837a82c10764605cf1f9b3c1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e6fb4feb4e17dd15394450c96e76b5f801f90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e6fb4feb4e17dd15394450c96e76b5f801f90d", "html_url": "https://github.com/rust-lang/rust/commit/75e6fb4feb4e17dd15394450c96e76b5f801f90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e6fb4feb4e17dd15394450c96e76b5f801f90d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e5da379dd1a90d469fda9b771989d74924b0474", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5da379dd1a90d469fda9b771989d74924b0474", "html_url": "https://github.com/rust-lang/rust/commit/0e5da379dd1a90d469fda9b771989d74924b0474"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "1754cdaca0315e3fa20595c72c3de598a9301b29", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/75e6fb4feb4e17dd15394450c96e76b5f801f90d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e6fb4feb4e17dd15394450c96e76b5f801f90d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=75e6fb4feb4e17dd15394450c96e76b5f801f90d", "patch": "@@ -2137,6 +2137,11 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n       ast_map::node_method(m, _, pt) { (pt, m.ident) }\n       // We can't monomorphize native functions\n       ast_map::node_native_item(_, _, _) { ret none; }\n+      ast_map::node_ctor(i) {\n+        alt check ccx.tcx.items.get(i.id) {\n+          ast_map::node_item(i, pt) { (pt, i.ident) }\n+        }\n+      }\n       _ { fail \"unexpected node type\"; }\n     };\n     let pt = *pt + [path_name(ccx.names(name))];\n@@ -2146,26 +2151,37 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n \n     let psubsts = some({tys: substs, dicts: dicts, bounds: tpt.bounds});\n     alt check map_node {\n-      ast_map::node_item(@{node: ast::item_fn(decl, _, body), _}, _) {\n+      ast_map::node_item(i@@{node: ast::item_fn(decl, _, body), _}, _) {\n+        set_inline_hint_if_appr(i.attrs, lldecl);\n         trans_fn(ccx, pt, decl, body, lldecl, no_self, [],\n                  psubsts, fn_id.node, none);\n       }\n-      ast_map::node_item(@{node: ast::item_res(decl, _, _, _, _), _}, _) {\n-        trans_res_ctor(ccx, pt, decl, fn_id.node, [], psubsts, lldecl);\n-      }\n       ast_map::node_variant(v, enum_item, _) {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));\n         let this_tv = option::get(vec::find(*tvs, {|tv|\n             tv.id.node == fn_id.node}));\n+        set_inline_hint(lldecl);\n         trans_enum_variant(ccx, enum_item.id, v, this_tv.disr_val,\n                            (*tvs).len() == 1u, [], psubsts, lldecl);\n       }\n       ast_map::node_method(mth, impl_def_id, _) {\n+        set_inline_hint_if_appr(mth.attrs, lldecl);\n         let selfty = ty::node_id_to_type(ccx.tcx, mth.self_id);\n         let selfty = ty::substitute_type_params(ccx.tcx, substs, selfty);\n         trans_fn(ccx, pt, mth.decl, mth.body, lldecl,\n                  impl_self(selfty), [], psubsts, fn_id.node, none);\n       }\n+      ast_map::node_ctor(i) {\n+        alt check ccx.tcx.items.get(i.id) {\n+          ast_map::node_item(@{node: ast::item_res(decl, _, _, _, _), _}, _) {\n+            set_inline_hint(lldecl);\n+            trans_res_ctor(ccx, pt, decl, fn_id.node, [], psubsts, lldecl);\n+          }\n+          ast_map::node_item(@{node: ast::item_class(_, _, ctor), _}, _) {\n+            ccx.sess.unimpl(\"monomorphic class constructor\");\n+          }\n+        }\n+      }\n     }\n     some({llfn: lldecl, fty: mono_ty})\n }\n@@ -4433,6 +4449,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         native::trans_native_mod(ccx, native_mod, abi);\n       }\n       ast::item_class(tps, items, ctor) {\n+        // FIXME factor our ctor translation, call from monomorphic_fn\n         let llctor_decl = get_item_val(ccx, ctor.node.id);\n         // Translate the ctor\n         // First, add a preamble that"}]}