{"sha": "81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "node_id": "C_kwDOAAsO6NoAKDgxZjNhZTg5OTdlOWU1ODA2ZGFkYzVjMmVmMjc4NjQwN2MxZjc5NWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-20T09:21:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T09:21:13Z"}, "message": "Rollup merge of #90628 - ken-matsui:clarify-error-messages-caused-by-reexporting-pub-crate-visibility-to-outside, r=oli-obk\n\nClarify error messages caused by re-exporting `pub(crate)` visibility to outside\n\nThis PR clarifies error messages and suggestions caused by re-exporting pub(crate) visibility outside the crate.\n\nHere is a small example ([Rust Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e2cd0bd4422d4f20e6522dcbad167d3b)):\n\n```rust\nmod m {\n    pub(crate) enum E {}\n}\npub use m::E;\n\nfn main() {}\n```\n\nThis code is compiled to:\n\n```\nerror[E0365]: `E` is private, and cannot be re-exported\n --> prog.rs:4:9\n  |\n4 | pub use m::E;\n  |         ^^^^ re-export of private `E`\n  |\n  = note: consider declaring type or module `E` with `pub`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0365`.\n```\n\nHowever, enum `E` is actually public to the crate, not private totally\u2014nevertheless, rustc treats `pub(crate)` and private visibility as the same on the error messages. They are not clear and should be segmented distinctly.\n\nBy applying changes in this PR, the error message below will be the following message that would be clearer:\n\n```\nerror[E0365]: `E` is only public to inside of the crate, and cannot be re-exported outside\n --> prog.rs:4:9\n  |\n4 | pub use m::E;\n  |         ^^^^ re-export of crate public `E`\n  |\n  = note: consider declaring type or module `E` with `pub`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0365`.\n```", "tree": {"sha": "e197faa06772da97214638287370d5a5216ced2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e197faa06772da97214638287370d5a5216ced2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmL4JCRBK7hj4Ov3rIwAApF0IAHaJX9i7F9UxJE0OZHxQb4D+\nfqSycCCDnkA9WlPizRB//pQO/wiIYTAq3p4YWbOB/WuLbZTo6yscrfRhALZ9yMpv\nF7qWpnf5PlyY0yJidO5frUG/UxISeEw8xUrgSDCVKZCPeDVLo3GaaNeQCyd9kycR\nPgZS31CSeskBYs1xFrsKur0DNzPIELPVesbopqEx1LlcrBhCnJpCbCjr38DIrBJo\nq8JssEsuNvdcwi/Aa/Kd+iL7pxEzFZIJPlE5DO1wuuC+tFWXfEyFCNTR9/NP7zyF\nd0Vlx0AJzKqzvtuCl2I69/dkumqMu8SW6cfDTf3rN0SRemI2h7WU+RwX6NqVxUA=\n=JFCg\n-----END PGP SIGNATURE-----\n", "payload": "tree e197faa06772da97214638287370d5a5216ced2b\nparent 7354bb331e6a88e63c89a3d92c47dcc5afc274f8\nparent 33ab5123e2ac51e312f72e2d689aa57a8483c2ac\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637400073 +0100\ncommitter GitHub <noreply@github.com> 1637400073 +0100\n\nRollup merge of #90628 - ken-matsui:clarify-error-messages-caused-by-reexporting-pub-crate-visibility-to-outside, r=oli-obk\n\nClarify error messages caused by re-exporting `pub(crate)` visibility to outside\n\nThis PR clarifies error messages and suggestions caused by re-exporting pub(crate) visibility outside the crate.\n\nHere is a small example ([Rust Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e2cd0bd4422d4f20e6522dcbad167d3b)):\n\n```rust\nmod m {\n    pub(crate) enum E {}\n}\npub use m::E;\n\nfn main() {}\n```\n\nThis code is compiled to:\n\n```\nerror[E0365]: `E` is private, and cannot be re-exported\n --> prog.rs:4:9\n  |\n4 | pub use m::E;\n  |         ^^^^ re-export of private `E`\n  |\n  = note: consider declaring type or module `E` with `pub`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0365`.\n```\n\nHowever, enum `E` is actually public to the crate, not private totally\u2014nevertheless, rustc treats `pub(crate)` and private visibility as the same on the error messages. They are not clear and should be segmented distinctly.\n\nBy applying changes in this PR, the error message below will be the following message that would be clearer:\n\n```\nerror[E0365]: `E` is only public to inside of the crate, and cannot be re-exported outside\n --> prog.rs:4:9\n  |\n4 | pub use m::E;\n  |         ^^^^ re-export of crate public `E`\n  |\n  = note: consider declaring type or module `E` with `pub`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0365`.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "html_url": "https://github.com/rust-lang/rust/commit/81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7354bb331e6a88e63c89a3d92c47dcc5afc274f8", "html_url": "https://github.com/rust-lang/rust/commit/7354bb331e6a88e63c89a3d92c47dcc5afc274f8"}, {"sha": "33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ab5123e2ac51e312f72e2d689aa57a8483c2ac", "html_url": "https://github.com/rust-lang/rust/commit/33ab5123e2ac51e312f72e2d689aa57a8483c2ac"}], "stats": {"total": 366, "additions": 334, "deletions": 32}, "files": [{"sha": "bf4cece8bde8d7f563c247fd7927732cb2d752e8", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -1180,11 +1180,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut reexport_error = None;\n         let mut any_successful_reexport = false;\n+        let mut crate_private_reexport = false;\n         self.r.per_ns(|this, ns| {\n             if let Ok(binding) = source_bindings[ns].get() {\n                 let vis = import.vis.get();\n                 if !binding.vis.is_at_least(vis, &*this) {\n                     reexport_error = Some((ns, binding));\n+                    if let ty::Visibility::Restricted(binding_def_id) = binding.vis {\n+                        if binding_def_id.is_top_level_module() {\n+                            crate_private_reexport = true;\n+                        }\n+                    }\n                 } else {\n                     any_successful_reexport = true;\n                 }\n@@ -1207,24 +1213,34 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     import.span,\n                     &msg,\n                 );\n-            } else if ns == TypeNS {\n-                struct_span_err!(\n-                    self.r.session,\n-                    import.span,\n-                    E0365,\n-                    \"`{}` is private, and cannot be re-exported\",\n-                    ident\n-                )\n-                .span_label(import.span, format!(\"re-export of private `{}`\", ident))\n-                .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n-                .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", ident,);\n-                struct_span_err!(self.r.session, import.span, E0364, \"{}\", &msg)\n-                    .span_note(import.span, &note_msg)\n-                    .emit();\n+                let error_msg = if crate_private_reexport {\n+                    format!(\n+                        \"`{}` is only public within the crate, and cannot be re-exported outside\",\n+                        ident\n+                    )\n+                } else {\n+                    format!(\"`{}` is private, and cannot be re-exported\", ident)\n+                };\n+\n+                if ns == TypeNS {\n+                    let label_msg = if crate_private_reexport {\n+                        format!(\"re-export of crate public `{}`\", ident)\n+                    } else {\n+                        format!(\"re-export of private `{}`\", ident)\n+                    };\n+\n+                    struct_span_err!(self.r.session, import.span, E0365, \"{}\", error_msg)\n+                        .span_label(import.span, label_msg)\n+                        .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n+                        .emit();\n+                } else {\n+                    let note_msg =\n+                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n+                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n+                        .span_note(import.span, &note_msg)\n+                        .emit();\n+                }\n             }\n         }\n "}, {"sha": "464109247c9bab81b2d77a4e5b8940b5e162ddab", "filename": "src/test/ui/error-codes/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -3,6 +3,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n+//~^ ERROR `foo` is only public within the crate, and cannot be re-exported outside [E0365]\n \n fn main() {}"}, {"sha": "5bfcf1394d9fe3a7006e7e765402f03a7826f08f", "filename": "src/test/ui/error-codes/E0365.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -1,8 +1,8 @@\n-error[E0365]: `foo` is private, and cannot be re-exported\n+error[E0365]: `foo` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/E0365.rs:5:9\n    |\n LL | pub use foo as foo2;\n-   |         ^^^^^^^^^^^ re-export of private `foo`\n+   |         ^^^^^^^^^^^ re-export of crate public `foo`\n    |\n    = note: consider declaring type or module `foo` with `pub`\n "}, {"sha": "0a20f5fe98562f6827ee378aa57d66c77a0991df", "filename": "src/test/ui/modules/issue-56411.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -5,7 +5,7 @@ macro_rules! import {\n             mod $name;\n             pub use self::$name;\n             //~^ ERROR the name `issue_56411_aux` is defined multiple times\n-            //~| ERROR `issue_56411_aux` is private, and cannot be re-exported\n+            //~| ERROR `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n \n         )*\n     }"}, {"sha": "6732a8a3d7324ea383bf5bb7181954bfba5a66d9", "filename": "src/test/ui/modules/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -15,11 +15,11 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n    = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n+error[E0365]: `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/issue-56411.rs:6:21\n    |\n LL |             pub use self::$name;\n-   |                     ^^^^^^^^^^^ re-export of private `issue_56411_aux`\n+   |                     ^^^^^^^^^^^ re-export of crate public `issue_56411_aux`\n ...\n LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------ in this macro invocation"}, {"sha": "fa4f88666d8647e315de03edad9ab0c5bbc0f920", "filename": "src/test/ui/privacy/crate-private-reexport.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -0,0 +1,66 @@\n+fn f1() {}\n+enum E1 { V }\n+struct S1 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m1 {\n+    pub use ::f1; //~ ERROR `f1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S1; //~ ERROR `S1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1; //~ ERROR `E1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+pub(crate) fn f2() {}\n+pub(crate) enum E2 {\n+    V\n+}\n+pub(crate) struct S2 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m2 {\n+    pub use ::f2; //~ ERROR `f2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S2; //~ ERROR `S2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2; //~ ERROR `E2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+mod m3 {\n+    pub(crate) fn f3() {}\n+    pub(crate) enum E3 {\n+        V\n+    }\n+    pub(crate) struct S3 {\n+        #[rustfmt::skip]\n+        bar: i32,\n+    }\n+}\n+pub use m3::f3; //~ ERROR `f3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::S3; //~ ERROR `S3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3; //~ ERROR `E3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+\n+pub(self) fn f4() {}\n+pub use ::f4 as f5; //~ ERROR `f4` is only public within the crate, and cannot be re-exported outside\n+\n+pub mod m10 {\n+    pub mod m {\n+        pub(super) fn f6() {}\n+        pub(crate) fn f7() {}\n+        pub(in crate::m10) fn f8() {}\n+    }\n+    pub use self::m::f6; //~ ERROR `f6` is private, and cannot be re-exported\n+    pub use self::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+    pub use self::m::f8; //~ ERROR `f8` is private, and cannot be re-exported\n+}\n+pub use m10::m::f6; //~ ERROR function `f6` is private\n+pub use m10::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+pub use m10::m::f8; //~ ERROR function `f8` is private\n+\n+pub mod m11 {\n+    pub(self) fn f9() {}\n+}\n+pub use m11::f9; //~ ERROR function `f9` is private\n+\n+fn main() {}"}, {"sha": "66e11e8210771b79a7b137c2c206007d57c77774", "filename": "src/test/ui/privacy/crate-private-reexport.stderr", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -0,0 +1,220 @@\n+error[E0364]: `f1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+   |\n+note: consider marking `f1` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+\n+error[E0365]: `S1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:9:13\n+   |\n+LL |     pub use ::S1;\n+   |             ^^^^ re-export of crate public `S1`\n+   |\n+   = note: consider declaring type or module `S1` with `pub`\n+\n+error[E0365]: `E1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:10:13\n+   |\n+LL |     pub use ::E1;\n+   |             ^^^^ re-export of crate public `E1`\n+   |\n+   = note: consider declaring type or module `E1` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+   |\n+note: consider marking `f2` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+\n+error[E0365]: `S2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:24:13\n+   |\n+LL |     pub use ::S2;\n+   |             ^^^^ re-export of crate public `S2`\n+   |\n+   = note: consider declaring type or module `S2` with `pub`\n+\n+error[E0365]: `E2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:25:13\n+   |\n+LL |     pub use ::E2;\n+   |             ^^^^ re-export of crate public `E2`\n+   |\n+   = note: consider declaring type or module `E2` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+   |\n+note: consider marking `f3` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+\n+error[E0365]: `S3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:40:9\n+   |\n+LL | pub use m3::S3;\n+   |         ^^^^^^ re-export of crate public `S3`\n+   |\n+   = note: consider declaring type or module `S3` with `pub`\n+\n+error[E0365]: `E3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:41:9\n+   |\n+LL | pub use m3::E3;\n+   |         ^^^^^^ re-export of crate public `E3`\n+   |\n+   = note: consider declaring type or module `E3` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+\n+error[E0364]: `f4` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f4` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+\n+error[E0364]: `f6` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f6` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f8` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f8` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+\n+error[E0603]: function `f6` is private\n+  --> $DIR/crate-private-reexport.rs:57:17\n+   |\n+LL | pub use m10::m::f6;\n+   |                 ^^ private function\n+   |\n+note: the function `f6` is defined here\n+  --> $DIR/crate-private-reexport.rs:49:9\n+   |\n+LL |         pub(super) fn f6() {}\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f8` is private\n+  --> $DIR/crate-private-reexport.rs:59:17\n+   |\n+LL | pub use m10::m::f8;\n+   |                 ^^ private function\n+   |\n+note: the function `f8` is defined here\n+  --> $DIR/crate-private-reexport.rs:51:9\n+   |\n+LL |         pub(in crate::m10) fn f8() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f9` is private\n+  --> $DIR/crate-private-reexport.rs:64:14\n+   |\n+LL | pub use m11::f9;\n+   |              ^^ private function\n+   |\n+note: the function `f9` is defined here\n+  --> $DIR/crate-private-reexport.rs:62:5\n+   |\n+LL |     pub(self) fn f9() {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+\n+Some errors have detailed explanations: E0364, E0365, E0603.\n+For more information about an error, try `rustc --explain E0364`."}, {"sha": "6882844602286deef9c7eaa6f6f4bad96c60dc68", "filename": "src/test/ui/privacy/private-variant-reexport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -1,13 +1,13 @@\n mod m1 {\n-    pub use ::E::V; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::{V}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V::{self}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n #[deny(unused_imports)]"}, {"sha": "78771ee30d314a29c00d7a91d2d90bcbbfb78a69", "filename": "src/test/ui/privacy/private-variant-reexport.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:2:13\n    |\n LL |     pub use ::E::V;\n@@ -10,7 +10,7 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::V;\n    |             ^^^^^^\n \n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:6:19\n    |\n LL |     pub use ::E::{V};\n@@ -22,11 +22,11 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::{V};\n    |                   ^\n \n-error[E0365]: `V` is private, and cannot be re-exported\n+error[E0365]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:10:22\n    |\n LL |     pub use ::E::V::{self};\n-   |                      ^^^^ re-export of private `V`\n+   |                      ^^^^ re-export of crate public `V`\n    |\n    = note: consider declaring type or module `V` with `pub`\n "}, {"sha": "2d9a6a9a924998fec8b3e91b0b8f659e9ca42105", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -8,7 +8,7 @@ mod m1 {\n \n     use legacy_macro as _; // OK\n     pub(crate) use legacy_macro as _; // OK\n-    pub use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+    pub use legacy_macro as _; //~ ERROR `legacy_macro` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {"}, {"sha": "9e48e26b1dfd30451d279d5fd3421ff377aa4b1e", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f3ae8997e9e5806dadc5c2ef2786407c1f795d/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=81f3ae8997e9e5806dadc5c2ef2786407c1f795d", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/macro-rules.rs:11:13\n    |\n LL |     pub use legacy_macro as _;"}]}