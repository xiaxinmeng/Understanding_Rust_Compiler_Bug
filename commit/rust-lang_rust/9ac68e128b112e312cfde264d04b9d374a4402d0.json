{"sha": "9ac68e128b112e312cfde264d04b9d374a4402d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzY4ZTEyOGIxMTJlMzEyY2ZkZTI2NGQwNGI5ZDM3NGE0NDAyZDA=", "commit": {"author": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2020-02-05T04:04:29Z"}, "committer": {"name": "David Renshaw", "email": "dwrenshaw@gmail.com", "date": "2020-02-05T04:04:29Z"}, "message": "stop using BytePos for computing spans in librustc_parse/parser/mod.rs", "tree": {"sha": "abf90b10c9847af25bde9537b5956a0b0b7ca2b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf90b10c9847af25bde9537b5956a0b0b7ca2b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac68e128b112e312cfde264d04b9d374a4402d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac68e128b112e312cfde264d04b9d374a4402d0", "html_url": "https://github.com/rust-lang/rust/commit/9ac68e128b112e312cfde264d04b9d374a4402d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac68e128b112e312cfde264d04b9d374a4402d0/comments", "author": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwrensha", "id": 495768, "node_id": "MDQ6VXNlcjQ5NTc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/495768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrensha", "html_url": "https://github.com/dwrensha", "followers_url": "https://api.github.com/users/dwrensha/followers", "following_url": "https://api.github.com/users/dwrensha/following{/other_user}", "gists_url": "https://api.github.com/users/dwrensha/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrensha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrensha/subscriptions", "organizations_url": "https://api.github.com/users/dwrensha/orgs", "repos_url": "https://api.github.com/users/dwrensha/repos", "events_url": "https://api.github.com/users/dwrensha/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrensha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9290dceee2cb6b882b26ec6e294560e51ef0853", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9290dceee2cb6b882b26ec6e294560e51ef0853", "html_url": "https://github.com/rust-lang/rust/commit/c9290dceee2cb6b882b26ec6e294560e51ef0853"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "825607a234859c8cf4757c4a1480ceb8c1e13b32", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9ac68e128b112e312cfde264d04b9d374a4402d0/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac68e128b112e312cfde264d04b9d374a4402d0/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=9ac68e128b112e312cfde264d04b9d374a4402d0", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n+use rustc_span::{FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::ptr::P;\n@@ -615,8 +615,8 @@ impl<'a> Parser<'a> {\n                 true\n             }\n             token::BinOpEq(token::Plus) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                self.bump_with(token::Eq, span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(token::Eq, self.token.span.with_lo(start_point.hi()));\n                 true\n             }\n             _ => false,\n@@ -633,8 +633,9 @@ impl<'a> Parser<'a> {\n                 Ok(())\n             }\n             token::AndAnd => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Ok(self.bump_with(token::BinOp(token::And), span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Ok(self\n+                    .bump_with(token::BinOp(token::And), self.token.span.with_lo(start_point.hi())))\n             }\n             _ => self.unexpected(),\n         }\n@@ -650,8 +651,9 @@ impl<'a> Parser<'a> {\n                 Ok(())\n             }\n             token::OrOr => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Ok(self.bump_with(token::BinOp(token::Or), span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Ok(self\n+                    .bump_with(token::BinOp(token::Or), self.token.span.with_lo(start_point.hi())))\n             }\n             _ => self.unexpected(),\n         }\n@@ -671,13 +673,16 @@ impl<'a> Parser<'a> {\n                 true\n             }\n             token::BinOp(token::Shl) => {\n-                let span = self.sess.source_map().next_point(self.token.span);\n-                self.bump_with(token::Lt, span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(token::Lt, self.token.span.with_lo(start_point.hi()));\n                 true\n             }\n             token::LArrow => {\n-                let span = self.sess.source_map().next_point(self.token.span);\n-                self.bump_with(token::BinOp(token::Minus), span);\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                self.bump_with(\n+                    token::BinOp(token::Minus),\n+                    self.token.span.with_lo(start_point.hi()),\n+                );\n                 true\n             }\n             _ => false,\n@@ -707,16 +712,16 @@ impl<'a> Parser<'a> {\n                 Some(())\n             }\n             token::BinOp(token::Shr) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Gt, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Gt, self.token.span.with_lo(start_point.hi())))\n             }\n             token::BinOpEq(token::Shr) => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Ge, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Ge, self.token.span.with_lo(start_point.hi())))\n             }\n             token::Ge => {\n-                let span = self.token.span.with_lo(self.token.span.lo() + BytePos(1));\n-                Some(self.bump_with(token::Eq, span))\n+                let start_point = self.sess.source_map().start_point(self.token.span);\n+                Some(self.bump_with(token::Eq, self.token.span.with_lo(start_point.hi())))\n             }\n             _ => None,\n         };"}, {"sha": "090b41d839f82b68c11fe38111b9fda254aa39b0", "filename": "src/test/ui/parser/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9ac68e128b112e312cfde264d04b9d374a4402d0/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac68e128b112e312cfde264d04b9d374a4402d0/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr?ref=9ac68e128b112e312cfde264d04b9d374a4402d0"}]}