{"sha": "19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTg0OGQyZWFlMzgyNGMxNGJkMGU3ZjM3YjA5NjIxNWY0YzVhMWY=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-19T18:08:21Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@protonmail.ch", "date": "2019-07-19T20:24:56Z"}, "message": "normalize use of backticks in compiler messages for librustc_metadata\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "ec5860c7dcd3b687c045c2de741a4b30352ec1dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5860c7dcd3b687c045c2de741a4b30352ec1dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEExrhwoK6DmrCETV5+4ilOki9MVuUFAl0yJxgACgkQ4ilOki9M\nVuXWQwv/QYq3rOQc4XBpfQejX0O2YXQM1gANxoAzBgaWfZVyHvmigIjQmoOpDKst\nJHJcSis5akhgRkjo/5gh+xQxIucpOklt66sXnTroMDJkEZXnCqrJMFA9jgxAU9L+\nQvu+DFaKrwCly8rCf+upNnmkCNDZ3KAIDw6YqWC1f370x5MjkYSiXrolqPbmDAUD\n3F/GFtmnd8zsUH7/DD7TMuBNBdbLAbe+kqUjRIZhpWWLX4K+RSAP3uRTMD9pnS4z\nBo1lqZ9MudqRdEET4E2Kq/+gnywvfV+1TKJpRjcERS2LkmyRBwNq3Ph2etJvM0cU\neIhxq9OZyl9trsWH7oqaLsdGuXVa9+51vV3PPhheM9ptzwRD3FZyO4a7xNk2szc/\nSsZ/f8EhVDbhoqOtW8bUNiMvwWpdiAOje4VFUHx+ZZkROFyT48o+dlXRxEB23LOW\na/iWGfp0FxtowuKDgD/QuX1r+XNrboAZWYghuMAxkhpXWkyQipKsvGxNQlE0hk7v\n7BujXJHT\n=DhbC\n-----END PGP SIGNATURE-----", "payload": "tree ec5860c7dcd3b687c045c2de741a4b30352ec1dd\nparent 527dce7137f7a3c7bf47d9a503abf25f88ea22de\nauthor Samy Kacimi <samy.kacimi@protonmail.ch> 1563559701 +0200\ncommitter Samy Kacimi <samy.kacimi@protonmail.ch> 1563567896 +0200\n\nnormalize use of backticks in compiler messages for librustc_metadata\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "html_url": "https://github.com/rust-lang/rust/commit/19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/comments", "author": null, "committer": null, "parents": [{"sha": "527dce7137f7a3c7bf47d9a503abf25f88ea22de", "url": "https://api.github.com/repos/rust-lang/rust/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "html_url": "https://github.com/rust-lang/rust/commit/527dce7137f7a3c7bf47d9a503abf25f88ea22de"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "126cfec157ff383cacc9d1d5b096e584e954daa5", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -938,14 +938,14 @@ impl<'a> CrateLoader<'a> {\n             }\n             match global_allocator {\n                 Some(Some(other_crate)) => {\n-                    self.sess.err(&format!(\"the #[global_allocator] in {} \\\n+                    self.sess.err(&format!(\"the `#[global_allocator]` in {} \\\n                                             conflicts with this global \\\n                                             allocator in: {}\",\n                                            other_crate,\n                                            data.root.name));\n                 }\n                 Some(None) => {\n-                    self.sess.err(&format!(\"the #[global_allocator] in this \\\n+                    self.sess.err(&format!(\"the `#[global_allocator]` in this \\\n                                             crate conflicts with global \\\n                                             allocator in: {}\", data.root.name));\n                 }\n@@ -971,7 +971,7 @@ impl<'a> CrateLoader<'a> {\n         if !has_default {\n             self.sess.err(\"no global memory allocator found but one is \\\n                            required; link to std or \\\n-                           add #[global_allocator] to a static item \\\n+                           add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n         self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));"}, {"sha": "909fca2ab586f2e983894772c5cf87231422616d", "filename": "src/librustc_metadata/error_codes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ferror_codes.rs?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -7,7 +7,8 @@ E0454: r##\"\n A link name was given with an empty name. Erroneous code example:\n \n ```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n-#[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n+#[link(name = \"\")] extern {}\n+// error: `#[link(name = \"\")]` given with empty name\n ```\n \n The rust compiler cannot link to an external library if you don't give it its\n@@ -61,7 +62,7 @@ A link was used without a name parameter. Erroneous code example:\n \n ```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n #[link(kind = \"dylib\")] extern {}\n-// error: #[link(...)] specified without `name = \"foo\"`\n+// error: `#[link(...)]` specified without `name = \"foo\"`\n ```\n \n Please add the name parameter to allow the rust compiler to find the library"}, {"sha": "66971bb6f8b1c914b168596451f8142d6b94a16f", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -102,7 +102,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                     match item.value_str() {\n                         Some(s) => lib.wasm_import_module = Some(s),\n                         None => {\n-                            let msg = \"must be of the form #[link(wasm_import_module = \\\"...\\\")]\";\n+                            let msg = \"must be of the form `#[link(wasm_import_module = \\\"...\\\")]`\";\n                             self.tcx.sess.span_err(item.span(), msg);\n                         }\n                     }\n@@ -117,7 +117,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n             let requires_name = kind_specified || lib.wasm_import_module.is_none();\n             if lib.name.is_none() && requires_name {\n                 struct_span_err!(self.tcx.sess, m.span, E0459,\n-                                 \"#[link(...)] specified without \\\n+                                 \"`#[link(...)]` specified without \\\n                                   `name = \\\"foo\\\"`\")\n                     .span_label(m.span, \"missing `name` argument\")\n                     .emit();\n@@ -136,7 +136,7 @@ impl Collector<'tcx> {\n             match span {\n                 Some(span) => {\n                     struct_span_err!(self.tcx.sess, span, E0454,\n-                                     \"#[link(name = \\\"\\\")] given with empty name\")\n+                                     \"`#[link(name = \\\"\\\")]` given with empty name\")\n                         .span_label(span, \"empty name given\")\n                         .emit();\n                 }\n@@ -187,7 +187,7 @@ impl Collector<'tcx> {\n                         &format!(\"an empty renaming target was specified for library `{}`\",name));\n                 } else if !any_duplicate {\n                     self.tcx.sess.err(&format!(\"renaming of the library `{}` was specified, \\\n-                                                however this crate contains no #[link(...)] \\\n+                                                however this crate contains no `#[link(...)]` \\\n                                                 attributes referencing this library.\", name));\n                 } else if renames.contains(name) {\n                     self.tcx.sess.err(&format!(\"multiple renamings were \\"}, {"sha": "6dfefe19c7fa4f688ae7cd38666b1db888942d8d", "filename": "src/test/ui/allocator/two-allocators2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,6 +1,6 @@\n // aux-build:system-allocator.rs\n // no-prefer-dynamic\n-// error-pattern: the #[global_allocator] in\n+// error-pattern: the `#[global_allocator]` in\n \n extern crate system_allocator;\n "}, {"sha": "b1fb4421ea048eb666650105f6f50a1493a9cb23", "filename": "src/test/ui/allocator/two-allocators2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error: the #[global_allocator] in this crate conflicts with global allocator in: system_allocator\n+error: the `#[global_allocator]` in this crate conflicts with global allocator in: system_allocator\n \n error: aborting due to previous error\n "}, {"sha": "31dea2d4478f7a943ef5804d9cecc66be7833c93", "filename": "src/test/ui/allocator/two-allocators3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,7 +1,7 @@\n // aux-build:system-allocator.rs\n // aux-build:system-allocator2.rs\n // no-prefer-dynamic\n-// error-pattern: the #[global_allocator] in\n+// error-pattern: the `#[global_allocator]` in\n \n \n extern crate system_allocator;"}, {"sha": "ecffb192e2acb5fdfd7dd3de022aa32a3f638cd2", "filename": "src/test/ui/allocator/two-allocators3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error: the #[global_allocator] in system_allocator conflicts with this global allocator in: system_allocator2\n+error: the `#[global_allocator]` in system_allocator conflicts with this global allocator in: system_allocator2\n \n error: aborting due to previous error\n "}, {"sha": "525c605a9cf6722026301272898cfa509a3d37a1", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,10 +1,10 @@\n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/bad-extern-link-attrs.rs:1:1\n    |\n LL | #[link()]\n    | ^^^^^^^^^ missing `name` argument\n \n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/bad-extern-link-attrs.rs:2:1\n    |\n LL | #[link(name = \"\")]"}, {"sha": "b9d1841f16ca374496887a76b74c8c773b771131", "filename": "src/test/ui/empty/empty-linkname.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/empty-linkname.rs:1:1\n    |\n LL | #[link(name = \"\")]"}, {"sha": "499162694e57dfbc903faa51e73ae99e98c7d00e", "filename": "src/test/ui/error-codes/E0454.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/E0454.rs:1:1\n    |\n LL | #[link(name = \"\")] extern {}"}, {"sha": "51f7764aaf283412bb3231fe8820d0ba57435b5f", "filename": "src/test/ui/error-codes/E0458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -6,7 +6,7 @@ LL | #[link(kind = \"wonderful_unicorn\")] extern {}\n    |        |\n    |        unknown kind\n \n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0458.rs:1:1\n    |\n LL | #[link(kind = \"wonderful_unicorn\")] extern {}"}, {"sha": "c618fea9afc8a2e0689257eba33c5f80dc74a6cb", "filename": "src/test/ui/error-codes/E0459.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0459.rs:1:1\n    |\n LL | #[link(kind = \"dylib\")] extern {}"}, {"sha": "59648c42a5f3151a06a6aba9d8d2d8c83568ada1", "filename": "src/test/ui/missing/missing-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error: no global memory allocator found but one is required; link to std or add #[global_allocator] to a static item that implements the GlobalAlloc trait.\n+error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait.\n \n error: aborting due to previous error\n "}, {"sha": "d836741f9eddfca0f42a2b80a278f6a9a3180ace", "filename": "src/test/ui/rfc1717/missing-link-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,4 +1,4 @@\n-error: renaming of the library `foo` was specified, however this crate contains no #[link(...)] attributes referencing this library.\n+error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library.\n \n error: aborting due to previous error\n "}, {"sha": "47d6cb6899723c4b2bcd2b4b5d937ea714928081", "filename": "src/test/ui/wasm-import-module.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fwasm-import-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a848d2eae3824c14bd0e7f37b096215f4c5a1f/src%2Ftest%2Fui%2Fwasm-import-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-import-module.stderr?ref=19a848d2eae3824c14bd0e7f37b096215f4c5a1f", "patch": "@@ -1,16 +1,16 @@\n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:1:22\n    |\n LL | #[link(name = \"...\", wasm_import_module)]\n    |                      ^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:4:22\n    |\n LL | #[link(name = \"...\", wasm_import_module(x))]\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:7:22\n    |\n LL | #[link(name = \"...\", wasm_import_module())]"}]}