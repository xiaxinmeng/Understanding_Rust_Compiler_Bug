{"sha": "d12a5c3a5294ee87715b64986d524090f003e76d", "node_id": "C_kwDOAAsO6NoAKGQxMmE1YzNhNTI5NGVlODc3MTViNjQ5ODZkNTI0MDkwZjAwM2U3NmQ", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2022-01-21T17:24:43Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-06-06T14:16:01Z"}, "message": "Book: Split up and rewrite installation and usage", "tree": {"sha": "00f0cc42d1dabe2a372a22d0e360e7bcaeda2cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f0cc42d1dabe2a372a22d0e360e7bcaeda2cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12a5c3a5294ee87715b64986d524090f003e76d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmKeDCYACgkQHKDfKvWd\naKVSvhAA15NfP7wYSKGWy0/le8kqBvIFx9jgeiEZ91Lo8gGniztlQj6R9Y7hnrUF\naikizM9vYJFydAoEGul5sVtjEEi9d7wzvQP8KS3930gRa8HpIvu+t8rebH06Vbkh\nptnmrrOEdZ9yAuwKa71QAZWwJdWmoe/I8XCzh3VJeQPIFreQGyNKdmhE3WS/ocna\nuWc6Bss8XgpnRPF/wtDfkGR5sbew0osIhVQvBLt3ytGPA9jds9I7Th1I1d/90B04\n3a5hS6WURnpKZpaif/9sUuXitjg38R2G1vxBCX9883P3WXrpukVpPsX401B4KQNn\ndXDWIYgm4aUd4gn55h3VHLYZlytgGYp4seX18/LASadVhCRqhF6AcKxw6NRPQfEx\njPlgM7hjcxFA/R/NpF7on+4gLN1t3UGopz4KgU+C6ciGA36m0X1ZHzMQz4rvdGFn\nEe21A4wQsejgrKOW944q/U/ZACUVBopOyxDH37uTb/vPGsMVcR6B9cY7BEQijxYk\nGeA2/kEis6m6laiybmz8yf0/3XzVu5q9tl/tqWJFWirxr1HDBI+wuGPUXJp02GDm\n4jo0ByOpjiB13HAElDqDI3Ln1oIkt24u2J+TA2t9M9oVvrmcDHGpgZxp+Vbw/Jz2\ntVI+Iu6v1ppR4r6cl38JMAKrxzGuYSi+S2EAjCPPP44fjgaWcdE=\n=NqPd\n-----END PGP SIGNATURE-----", "payload": "tree 00f0cc42d1dabe2a372a22d0e360e7bcaeda2cb6\nparent 404432b7918dc54c190a9197c88e4c6a5bec3aaa\nauthor flip1995 <philipp.krones@embecosm.com> 1642785883 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1654524961 +0200\n\nBook: Split up and rewrite installation and usage\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12a5c3a5294ee87715b64986d524090f003e76d", "html_url": "https://github.com/rust-lang/rust/commit/d12a5c3a5294ee87715b64986d524090f003e76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12a5c3a5294ee87715b64986d524090f003e76d/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404432b7918dc54c190a9197c88e4c6a5bec3aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/404432b7918dc54c190a9197c88e4c6a5bec3aaa", "html_url": "https://github.com/rust-lang/rust/commit/404432b7918dc54c190a9197c88e4c6a5bec3aaa"}], "stats": {"total": 275, "additions": 177, "deletions": 98}, "files": [{"sha": "db937f95d224e80f44e59d9fd6273eba84bb5106", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=d12a5c3a5294ee87715b64986d524090f003e76d", "patch": "@@ -2,7 +2,8 @@\n \n [Introduction](README.md)\n \n-- [Installation and Usage](installation_and_usage.md)\n+- [Installation](installation.md)\n+- [Usage](usage.md)\n - [Configuration](configuration.md)\n - [Clippy's Lints](lints/README.md)\n     - [Correctness]()"}, {"sha": "257fa0f8df41abe06ad2e621887a04332b4a2671", "filename": "book/src/continuous_integration/README.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2FREADME.md?ref=d12a5c3a5294ee87715b64986d524090f003e76d", "patch": "@@ -1,5 +1 @@\n # Continuous Integration\n-\n-- [Travis CI](travis.md)\n-- [Github Actions](github_actions.md)\n-- [Gitlab](gitlab.md)"}, {"sha": "85b9ed53daeafde3135c07424c10982449178b84", "filename": "book/src/continuous_integration/travis.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "raw_url": "https://github.com/rust-lang/rust/raw/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md?ref=d12a5c3a5294ee87715b64986d524090f003e76d", "patch": "@@ -18,8 +18,3 @@ script:\n   - cargo test\n   # etc.\n ```\n-\n-Note that adding `-D warnings` will cause your build to fail if **any** warnings are found in your code.\n-That includes warnings found by rustc (e.g. `dead_code`, etc.). If you want to avoid this and only cause\n-an error for Clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command\n-line. (You can swap `clippy::all` with the specific lint category you are targeting.)"}, {"sha": "b2a28d0be622f1874e15f922d487016710ddd248", "filename": "book/src/installation.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Finstallation.md", "raw_url": "https://github.com/rust-lang/rust/raw/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Finstallation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finstallation.md?ref=d12a5c3a5294ee87715b64986d524090f003e76d", "patch": "@@ -0,0 +1,24 @@\n+# Installation\n+\n+If you're using `rustup` to install and manage you're Rust toolchains, Clippy is\n+usually **already installed**. In that case you can skip this chapter and go to\n+the [Usage] chapter.\n+\n+> Note: If you used the `minimal` profile when installing a Rust toolchain,\n+> Clippy is not automatically installed.\n+\n+## Using Rustup\n+\n+If Clippy was not installed for a toolchain, it can be installed with\n+\n+```\n+$ rustup component add clippy [--toolchain=<name>]\n+```\n+\n+## From Source\n+\n+Take a look at the [Basics] chapter in the Clippy developer guide to find step\n+by step instructions on how to build and install Clippy from source.\n+\n+[Basics]: development/basics.md#install-from-source\n+[Usage]: usage.md"}, {"sha": "8982e0f10378c9449e031c31284b78d3eb97d06e", "filename": "book/src/installation_and_usage.md", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/404432b7918dc54c190a9197c88e4c6a5bec3aaa/book%2Fsrc%2Finstallation_and_usage.md", "raw_url": "https://github.com/rust-lang/rust/raw/404432b7918dc54c190a9197c88e4c6a5bec3aaa/book%2Fsrc%2Finstallation_and_usage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finstallation_and_usage.md?ref=404432b7918dc54c190a9197c88e4c6a5bec3aaa", "patch": "@@ -1,88 +0,0 @@\n-# Installation and Usage\n-\n-Below are instructions on how to use Clippy as a subcommand, compiled from source\n-or in Travis CI. Note that Clippy is installed as a \n-[component](https://rust-lang.github.io/rustup/concepts/components.html?highlight=clippy#components) as part of the \n-[rustup](https://rust-lang.github.io/rustup/installation/index.html) installation.\n-\n-### As a cargo subcommand (`cargo clippy`)\n-\n-One way to use Clippy is by installing Clippy through rustup as a cargo\n-subcommand.\n-\n-#### Step 1: Install rustup\n-\n-You can install [rustup](https://rustup.rs/) on supported platforms. This will help\n-us install Clippy and its dependencies.\n-\n-If you already have rustup installed, update to ensure you have the latest\n-rustup and compiler:\n-\n-```terminal\n-rustup update\n-```\n-\n-#### Step 2: Install Clippy\n-\n-Once you have rustup and the latest stable release (at least Rust 1.29) installed, run the following command:\n-\n-```terminal\n-rustup component add clippy\n-```\n-If it says that it can't find the `clippy` component, please run `rustup self update`.\n-\n-#### Step 3: Run Clippy\n-\n-Now you can run Clippy by invoking the following command:\n-\n-```terminal\n-cargo clippy\n-```\n-\n-#### Automatically applying Clippy suggestions\n-\n-Clippy can automatically apply some lint suggestions.\n-Note that this is still experimental and only supported on the nightly channel:\n-\n-```terminal\n-cargo clippy --fix\n-```\n-\n-#### Workspaces\n-\n-All the usual workspace options should work with Clippy. For example the following command\n-will run Clippy on the `example` crate:\n-\n-```terminal\n-cargo clippy -p example\n-```\n-\n-As with `cargo check`, this includes dependencies that are members of the workspace, like path dependencies.\n-If you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n-\n-```terminal\n-cargo clippy -p example --no-deps \n-```\n-\n-### As a rustc replacement (`clippy-driver`)\n-\n-Clippy can also be used in projects that do not use cargo. To do so, you will need to replace\n-your `rustc` compilation commands with `clippy-driver`. For example, if your project runs:\n-\n-```terminal\n-rustc --edition 2018 -Cpanic=abort foo.rs\n-```\n-\n-Then, to enable Clippy, you will need to call:\n-\n-```terminal\n-clippy-driver --edition 2018 -Cpanic=abort foo.rs\n-```\n-\n-Note that `rustc` will still run, i.e. it will still emit the output files it normally does.\n-\n-### Continuous Integration\n-\n-Adding Clippy to your continuous integration pipeline is a great way to automate the linting process. See the\n-[Continuous Integration](continuous_integration) chapter for more information.\n-"}, {"sha": "337680aa3139b3921d9f959aa25b167f4a2bad55", "filename": "book/src/usage.md", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/d12a5c3a5294ee87715b64986d524090f003e76d/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=d12a5c3a5294ee87715b64986d524090f003e76d", "patch": "@@ -0,0 +1,151 @@\n+# Usage\n+\n+This chapter describes how to use Clippy to get the most out of it. Clippy can\n+be used as a `cargo` subcommand or, like `rustc`, directly with the\n+`clippy-driver` binary.\n+\n+> _Note:_ This chapter assumes that you have Clippy installed already. If you're\n+> not sure, take a look at the [Installation] chapter.\n+\n+## Cargo subcommand\n+\n+The easiest and most common way to run Clippy is through `cargo`. To do that,\n+just run\n+\n+```bash\n+cargo clippy\n+```\n+\n+### Lint configuration\n+\n+The above command will run the default set of lints, which are included in the\n+lint group `clippy::all`. You might want to use even more lints or you might not\n+agree with every Clippy lint, and for that there are ways to configure lint\n+levels.\n+\n+> _Note:_ Clippy is meant to be used with a generous sprinkling of\n+> `#[allow(..)]`s through your code. So if you disagree with a lint, don't feel\n+> bad disabling them for parts of your code or the whole project.\n+\n+#### Command line\n+\n+You can configure lint levels on the command line by adding\n+`-A/W/D clippy::lint_name` like this:\n+\n+```bash\n+cargo clippy -- -Aclippy::style -Wclippy::double_neg -Dclippy::perf\n+```\n+\n+For [CI] all warnings can be elevated to errors which will inturn fail\n+the build and cause Clippy to exit with a code other than `0`.\n+\n+```\n+cargo clippy -- -Dwarnings\n+```\n+\n+> _Note:_ Adding `-D warnings` will cause your build to fail if **any** warnings\n+> are found in your code. That includes warnings found by rustc (e.g.\n+> `dead_code`, etc.).\n+\n+For more information on configuring lint levels, see the [rustc documentation].\n+\n+[rustc documentation]: https://doc.rust-lang.org/rustc/lints/levels.html#configuring-warning-levels\n+\n+#### Even more lints\n+\n+Clippy has lint groups which are allow-by-default. This means, that you will\n+have to enable the lints in those groups manually.\n+\n+For a full list of all lints with their description and examples, please refere\n+to [Clippy's lint list]. The two most important allow-by-default groups are\n+described below:\n+\n+[Clippy's lint list]: https://rust-lang.github.io/rust-clippy/master/index.html\n+\n+##### `clippy::pedantic`\n+\n+The first group is the `pedantic` group. This group contains really opinionated\n+lints, that may have some intentional false positives in order to prevent false\n+negatives. So while this group is ready to be used in production, you can expect\n+to sprinkle multiple `#[allow(..)]`s in your code. If you find any false\n+positives, you're still welcome to report them to us for future improvements.\n+\n+> FYI: Clippy uses the whole group to lint itself.\n+\n+##### `clippy::restriction`\n+\n+The second group is the `restriction` group. This group contains lints that\n+\"restrict\" the language in some way. For example the `clippy::unwrap` lint from\n+this group won't allow you to use `.unwrap()` in your code. You may want to look\n+through the lints in this group and enable the ones that fit your need.\n+\n+> _Note:_ You shouldn't enable the whole lint group, but cherry-pick lints from\n+> this group. Some lints in this group will even contradict other Clippy lints!\n+\n+#### Too many lints\n+\n+The most opinionated warn-by-default group of Clippy is the `clippy::style`\n+group. Some people prefer to disable this group completely and then cherry-pick\n+some lints they like from this group. The same is of course possible with every\n+other of Clippy's lint groups.\n+\n+> _Note:_ We try to keep the warn-by-default groups free from false positives\n+> (FP). If you find that a lint wrongly triggers, please report it in an issue\n+> (if there isn't an issue for that FP already)\n+\n+#### Source Code\n+\n+You can configure lint levels in source code the same way you can configure\n+`rustc` lints:\n+\n+```rust\n+#![allow(clippy::style)]\n+\n+#[warn(clippy::double_neg)]\n+fn main() {\n+    let x = 1;\n+    let y = --x;\n+    //      ^^ warning: double negation\n+}\n+```\n+\n+### Automatically applying Clippy suggestions\n+\n+Clippy can automatically apply some lint suggestions, just like the compiler.\n+\n+```terminal\n+cargo clippy --fix\n+```\n+\n+### Workspaces\n+\n+All the usual workspace options should work with Clippy. For example the\n+following command will run Clippy on the `example` crate in your workspace:\n+\n+```terminal\n+cargo clippy -p example\n+```\n+\n+As with `cargo check`, this includes dependencies that are members of the\n+workspace, like path dependencies. If you want to run Clippy **only** on the\n+given crate, use the `--no-deps` option like this:\n+\n+```terminal\n+cargo clippy -p example -- --no-deps\n+```\n+\n+## Using Clippy without `cargo`: `clippy-driver`\n+\n+Clippy can also be used in projects that do not use cargo. To do so, run\n+`clippy-driver` with the same arguments you use for `rustc`. For example:\n+\n+```terminal\n+clippy-driver --edition 2018 -Cpanic=abort foo.rs\n+```\n+\n+> _Note:_ `clippy-driver` is designed for running Clippy and should not be used\n+> as a general replacement for `rustc`. `clippy-driver` may produce artifacts\n+> that are not optimized as expected, for example.\n+\n+[Installation]: installation.md\n+[CI]: continuous_integration"}]}