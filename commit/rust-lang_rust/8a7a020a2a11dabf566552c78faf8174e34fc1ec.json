{"sha": "8a7a020a2a11dabf566552c78faf8174e34fc1ec", "node_id": "C_kwDOAAsO6NoAKDhhN2EwMjBhMmExMWRhYmY1NjY1NTJjNzhmYWY4MTc0ZTM0ZmMxZWM", "commit": {"author": {"name": "John Bobbo", "email": "johnbobbo59@gmail.com", "date": "2023-04-20T00:18:51Z"}, "committer": {"name": "John Bobbo", "email": "johnbobbo59@gmail.com", "date": "2023-04-20T01:21:40Z"}, "message": "Remove a few uses of dynamic dispatch during\nmonomorphization/partitioning with the use of\nan enum.", "tree": {"sha": "d9b875d9394789eb9f5af35339b3dfec7deadad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b875d9394789eb9f5af35339b3dfec7deadad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7a020a2a11dabf566552c78faf8174e34fc1ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIzBAABCgAdFiEEu0LRcQjLMkxoGLxM1bHKheRsRwkFAmRAk6UACgkQ1bHKheRs\nRwm4pBAAoBxo9CIAjeVdNCQ44Nzv5OjsEOulS91qf7a1yR4f6GW/9MDKrta3BZVS\np611+2Inb5bC7REx7zP4yEHfgZIFNjk/PVQNU8OmHnIrSj2neqYKXHZ3G0giytuc\nlHBkTv854nyJg3s++FQPIpMJXnENgPFt7Fhc2lhJdeguYZ1oHy1oFQrYIQIse0Bh\nw+iOhvY1xm+zsyhxInKkdbspecPe418QLduy/jVGhWrmRwCZC5IdeC4WKEXof6Az\nXwU+nEoJM/6Umypcg/QpCwbPFzsx8Sgz6bNq7iI6UwKT/5raL8bS7/qSyRmF48X1\nO+tSRnNhCj0CubnfZTAY2pwbbHiuUBx2o/9drb0YxYn9gkLhgBXEObZnH7zCUaxK\nRvua8yDGABda5hSHY5tdY8EQHh6fi2yYR2/DEXKTUDRGazRYU9WQVKuD4Z0O4Bh6\nSCIbVhR150T308nmzis3YPaWCihZ/t+F7estvw4Ip9MCffe3TF6I3XPfUNzzRHKZ\nHlRKWwZqKvIZtzK0Kp32azqoNxh/GEVcldUAMfwL4fUUtHh1vcZqgcqcGXagfbpW\nKGXkauDAqz49ARKfK3Cu3coeUkscdhE0RTwt/5TqqgD63uYyVWC86dXkKcIBDFky\nBKkLHt37rIiWSIRSUsR/maHnxOJxbHUBDInTyTfDRNFsnJF2G5w=\n=MOPQ\n-----END PGP SIGNATURE-----", "payload": "tree d9b875d9394789eb9f5af35339b3dfec7deadad1\nparent 39c6804b92aa202369e402525cee329556bc1db0\nauthor John Bobbo <johnbobbo59@gmail.com> 1681949931 -0700\ncommitter John Bobbo <johnbobbo59@gmail.com> 1681953700 -0700\n\nRemove a few uses of dynamic dispatch during\nmonomorphization/partitioning with the use of\nan enum.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7a020a2a11dabf566552c78faf8174e34fc1ec", "html_url": "https://github.com/rust-lang/rust/commit/8a7a020a2a11dabf566552c78faf8174e34fc1ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7a020a2a11dabf566552c78faf8174e34fc1ec/comments", "author": {"login": "JohnBobbo96", "id": 113238176, "node_id": "U_kgDOBr_goA", "avatar_url": "https://avatars.githubusercontent.com/u/113238176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnBobbo96", "html_url": "https://github.com/JohnBobbo96", "followers_url": "https://api.github.com/users/JohnBobbo96/followers", "following_url": "https://api.github.com/users/JohnBobbo96/following{/other_user}", "gists_url": "https://api.github.com/users/JohnBobbo96/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnBobbo96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnBobbo96/subscriptions", "organizations_url": "https://api.github.com/users/JohnBobbo96/orgs", "repos_url": "https://api.github.com/users/JohnBobbo96/repos", "events_url": "https://api.github.com/users/JohnBobbo96/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnBobbo96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnBobbo96", "id": 113238176, "node_id": "U_kgDOBr_goA", "avatar_url": "https://avatars.githubusercontent.com/u/113238176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnBobbo96", "html_url": "https://github.com/JohnBobbo96", "followers_url": "https://api.github.com/users/JohnBobbo96/followers", "following_url": "https://api.github.com/users/JohnBobbo96/following{/other_user}", "gists_url": "https://api.github.com/users/JohnBobbo96/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnBobbo96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnBobbo96/subscriptions", "organizations_url": "https://api.github.com/users/JohnBobbo96/orgs", "repos_url": "https://api.github.com/users/JohnBobbo96/repos", "events_url": "https://api.github.com/users/JohnBobbo96/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnBobbo96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c6804b92aa202369e402525cee329556bc1db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c6804b92aa202369e402525cee329556bc1db0", "html_url": "https://github.com/rust-lang/rust/commit/39c6804b92aa202369e402525cee329556bc1db0"}], "stats": {"total": 111, "additions": 91, "deletions": 20}, "files": [{"sha": "4f2c2ea425f39f831eb28a5a4ae735fbd9d17efb", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a7a020a2a11dabf566552c78faf8174e34fc1ec/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7a020a2a11dabf566552c78faf8174e34fc1ec/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=8a7a020a2a11dabf566552c78faf8174e34fc1ec", "patch": "@@ -16,17 +16,20 @@ use super::PartitioningCx;\n use crate::collector::InliningMap;\n use crate::partitioning::merging;\n use crate::partitioning::{\n-    MonoItemPlacement, Partitioner, PostInliningPartitioning, PreInliningPartitioning,\n+    MonoItemPlacement, Partition, PostInliningPartitioning, PreInliningPartitioning,\n };\n \n pub struct DefaultPartitioning;\n \n-impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n-    fn place_root_mono_items(\n+impl<'tcx> Partition<'tcx> for DefaultPartitioning {\n+    fn place_root_mono_items<I>(\n         &mut self,\n         cx: &PartitioningCx<'_, 'tcx>,\n-        mono_items: &mut dyn Iterator<Item = MonoItem<'tcx>>,\n-    ) -> PreInliningPartitioning<'tcx> {\n+        mono_items: &mut I,\n+    ) -> PreInliningPartitioning<'tcx>\n+    where\n+        I: Iterator<Item = MonoItem<'tcx>>,\n+    {\n         let mut roots = FxHashSet::default();\n         let mut codegen_units = FxHashMap::default();\n         let is_incremental_build = cx.tcx.sess.opts.incremental.is_some();"}, {"sha": "993e35c7fd251e37486131be97b39480bdc2b924", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 83, "deletions": 15, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8a7a020a2a11dabf566552c78faf8174e34fc1ec/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7a020a2a11dabf566552c78faf8174e34fc1ec/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=8a7a020a2a11dabf566552c78faf8174e34fc1ec", "patch": "@@ -118,18 +118,81 @@ use crate::errors::{\n     CouldntDumpMonoStats, SymbolAlreadyDefined, UnknownCguCollectionMode, UnknownPartitionStrategy,\n };\n \n+enum Partitioner {\n+    Default(default::DefaultPartitioning),\n+    // Other partitioning strategies can go here.\n+    Unknown,\n+}\n+\n+impl<'tcx> Partition<'tcx> for Partitioner {\n+    fn place_root_mono_items<I>(\n+        &mut self,\n+        cx: &PartitioningCx<'_, 'tcx>,\n+        mono_items: &mut I,\n+    ) -> PreInliningPartitioning<'tcx>\n+    where\n+        I: Iterator<Item = MonoItem<'tcx>>,\n+    {\n+        match self {\n+            Partitioner::Default(partitioner) => partitioner.place_root_mono_items(cx, mono_items),\n+            Partitioner::Unknown => cx.tcx.sess.emit_fatal(UnknownPartitionStrategy),\n+        }\n+    }\n+\n+    fn merge_codegen_units(\n+        &mut self,\n+        cx: &PartitioningCx<'_, 'tcx>,\n+        initial_partitioning: &mut PreInliningPartitioning<'tcx>,\n+    ) {\n+        match self {\n+            Partitioner::Default(partitioner) => {\n+                partitioner.merge_codegen_units(cx, initial_partitioning)\n+            }\n+            Partitioner::Unknown => cx.tcx.sess.emit_fatal(UnknownPartitionStrategy),\n+        }\n+    }\n+\n+    fn place_inlined_mono_items(\n+        &mut self,\n+        cx: &PartitioningCx<'_, 'tcx>,\n+        initial_partitioning: PreInliningPartitioning<'tcx>,\n+    ) -> PostInliningPartitioning<'tcx> {\n+        match self {\n+            Partitioner::Default(partitioner) => {\n+                partitioner.place_inlined_mono_items(cx, initial_partitioning)\n+            }\n+            Partitioner::Unknown => cx.tcx.sess.emit_fatal(UnknownPartitionStrategy),\n+        }\n+    }\n+\n+    fn internalize_symbols(\n+        &mut self,\n+        cx: &PartitioningCx<'_, 'tcx>,\n+        post_inlining_partitioning: &mut PostInliningPartitioning<'tcx>,\n+    ) {\n+        match self {\n+            Partitioner::Default(partitioner) => {\n+                partitioner.internalize_symbols(cx, post_inlining_partitioning)\n+            }\n+            Partitioner::Unknown => cx.tcx.sess.emit_fatal(UnknownPartitionStrategy),\n+        }\n+    }\n+}\n+\n pub struct PartitioningCx<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     target_cgu_count: usize,\n     inlining_map: &'a InliningMap<'tcx>,\n }\n \n-trait Partitioner<'tcx> {\n-    fn place_root_mono_items(\n+trait Partition<'tcx> {\n+    fn place_root_mono_items<I>(\n         &mut self,\n         cx: &PartitioningCx<'_, 'tcx>,\n-        mono_items: &mut dyn Iterator<Item = MonoItem<'tcx>>,\n-    ) -> PreInliningPartitioning<'tcx>;\n+        mono_items: &mut I,\n+    ) -> PreInliningPartitioning<'tcx>\n+    where\n+        I: Iterator<Item = MonoItem<'tcx>>;\n \n     fn merge_codegen_units(\n         &mut self,\n@@ -150,26 +213,27 @@ trait Partitioner<'tcx> {\n     );\n }\n \n-fn get_partitioner<'tcx>(tcx: TyCtxt<'tcx>) -> Box<dyn Partitioner<'tcx>> {\n+fn get_partitioner(tcx: TyCtxt<'_>) -> Partitioner {\n     let strategy = match &tcx.sess.opts.unstable_opts.cgu_partitioning_strategy {\n         None => \"default\",\n         Some(s) => &s[..],\n     };\n \n     match strategy {\n-        \"default\" => Box::new(default::DefaultPartitioning),\n-        _ => {\n-            tcx.sess.emit_fatal(UnknownPartitionStrategy);\n-        }\n+        \"default\" => Partitioner::Default(default::DefaultPartitioning),\n+        _ => Partitioner::Unknown,\n     }\n }\n \n-pub fn partition<'tcx>(\n+pub fn partition<'tcx, I>(\n     tcx: TyCtxt<'tcx>,\n-    mono_items: &mut dyn Iterator<Item = MonoItem<'tcx>>,\n+    mono_items: &mut I,\n     max_cgu_count: usize,\n     inlining_map: &InliningMap<'tcx>,\n-) -> Vec<CodegenUnit<'tcx>> {\n+) -> Vec<CodegenUnit<'tcx>>\n+where\n+    I: Iterator<Item = MonoItem<'tcx>>,\n+{\n     let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning\");\n \n     let mut partitioner = get_partitioner(tcx);\n@@ -182,7 +246,9 @@ pub fn partition<'tcx>(\n         partitioner.place_root_mono_items(cx, mono_items)\n     };\n \n-    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.create_size_estimate(tcx));\n+    for cgu in &mut initial_partitioning.codegen_units {\n+        cgu.create_size_estimate(tcx);\n+    }\n \n     debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n \n@@ -202,7 +268,9 @@ pub fn partition<'tcx>(\n         partitioner.place_inlined_mono_items(cx, initial_partitioning)\n     };\n \n-    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.create_size_estimate(tcx));\n+    for cgu in &mut post_inlining.codegen_units {\n+        cgu.create_size_estimate(tcx);\n+    }\n \n     debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n \n@@ -380,7 +448,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n             || {\n                 let mut codegen_units = partition(\n                     tcx,\n-                    &mut items.iter().cloned(),\n+                    &mut items.iter().copied(),\n                     tcx.sess.codegen_units(),\n                     &inlining_map,\n                 );"}]}