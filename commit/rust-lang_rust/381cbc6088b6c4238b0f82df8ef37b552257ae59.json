{"sha": "381cbc6088b6c4238b0f82df8ef37b552257ae59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MWNiYzYwODhiNmM0MjM4YjBmODJkZjhlZjM3YjU1MjI1N2FlNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T20:14:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T20:14:01Z"}, "message": "Minor cleanups", "tree": {"sha": "f9ac229d271d9b6d3b0ffc764dbbf25d2cd838c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ac229d271d9b6d3b0ffc764dbbf25d2cd838c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/381cbc6088b6c4238b0f82df8ef37b552257ae59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/381cbc6088b6c4238b0f82df8ef37b552257ae59", "html_url": "https://github.com/rust-lang/rust/commit/381cbc6088b6c4238b0f82df8ef37b552257ae59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/381cbc6088b6c4238b0f82df8ef37b552257ae59/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38741f681c173a96e991dc3c213d4c85dc5a8af", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38741f681c173a96e991dc3c213d4c85dc5a8af", "html_url": "https://github.com/rust-lang/rust/commit/d38741f681c173a96e991dc3c213d4c85dc5a8af"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "89547ce035bc54960b2a76b2c5d611ee839a89e0", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/381cbc6088b6c4238b0f82df8ef37b552257ae59/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381cbc6088b6c4238b0f82df8ef37b552257ae59/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=381cbc6088b6c4238b0f82df8ef37b552257ae59", "patch": "@@ -42,7 +42,6 @@ impl AssistInfo {\n     }\n }\n \n-pub(crate) type AssistHandler = fn(AssistCtx) -> Option<Assist>;\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///"}, {"sha": "ad85f5553b806594305bdbe5ba3b9cb54987c234", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/381cbc6088b6c4238b0f82df8ef37b552257ae59/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/381cbc6088b6c4238b0f82df8ef37b552257ae59/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=381cbc6088b6c4238b0f82df8ef37b552257ae59", "patch": "@@ -23,7 +23,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextSize};\n use ra_text_edit::TextEdit;\n \n-pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n+pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -109,7 +109,9 @@ pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssi\n }\n \n mod handlers {\n-    use crate::AssistHandler;\n+    use crate::{Assist, AssistCtx};\n+\n+    pub(crate) type Handler = fn(AssistCtx) -> Option<Assist>;\n \n     mod add_custom_impl;\n     mod add_derive;\n@@ -145,12 +147,13 @@ mod handlers {\n     mod reorder_fields;\n     mod unwrap_block;\n \n-    pub(crate) fn all() -> &'static [AssistHandler] {\n+    pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_custom_impl::add_custom_impl,\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n+            add_from_impl_for_enum::add_from_impl_for_enum,\n             add_function::add_function,\n             add_impl::add_impl,\n             add_new::add_new,\n@@ -176,17 +179,18 @@ mod handlers {\n             raw_string::remove_hash,\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n+            reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n-            add_from_impl_for_enum::add_from_impl_for_enum,\n             unwrap_block::unwrap_block,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n-            reorder_fields::reorder_fields,\n+            // Are you sure you want to add new assist here, and not to the\n+            // sorted list above?\n         ]\n     }\n }"}]}