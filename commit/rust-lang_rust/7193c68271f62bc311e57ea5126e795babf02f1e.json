{"sha": "7193c68271f62bc311e57ea5126e795babf02f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOTNjNjgyNzFmNjJiYzMxMWU1N2VhNTEyNmU3OTViYWJmMDJmMWU=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-08-03T04:16:36Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-08-03T04:16:36Z"}, "message": "Store map of region variable ids to lookups in nll visitor and remove reference to mir", "tree": {"sha": "fc7e668a919d01a3a1e92beaace54883ef18618a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7e668a919d01a3a1e92beaace54883ef18618a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7193c68271f62bc311e57ea5126e795babf02f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7193c68271f62bc311e57ea5126e795babf02f1e", "html_url": "https://github.com/rust-lang/rust/commit/7193c68271f62bc311e57ea5126e795babf02f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7193c68271f62bc311e57ea5126e795babf02f1e/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2f6c7302cd81040d77e35aabac376bc33e4512", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2f6c7302cd81040d77e35aabac376bc33e4512", "html_url": "https://github.com/rust-lang/rust/commit/5b2f6c7302cd81040d77e35aabac376bc33e4512"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "2b3bb098a80220837c476ea2f356071bca182dd6", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7193c68271f62bc311e57ea5126e795babf02f1e/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7193c68271f62bc311e57ea5126e795babf02f1e/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=7193c68271f62bc311e57ea5126e795babf02f1e", "patch": "@@ -741,6 +741,7 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n+#[derive(Copy, Clone, Debug)]\n pub enum Lookup {\n     Loc(Location),\n     Src(SourceInfo),"}, {"sha": "9699495eb0ef64b3c494f55c92eb3f9cc5c814b3", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7193c68271f62bc311e57ea5126e795babf02f1e/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7193c68271f62bc311e57ea5126e795babf02f1e/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=7193c68271f62bc311e57ea5126e795babf02f1e", "patch": "@@ -9,58 +9,78 @@\n // except according to those terms.\n \n use rustc::ty::TypeFoldable;\n-use rustc::ty::subst::Substs;\n-use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n+use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::{Ty, TyCtxt, ClosureSubsts, RegionVid, RegionKind};\n use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::infer::{self, InferCtxt};\n-use syntax_pos::Span;\n+use syntax_pos::DUMMY_SP;\n+use std::collections::HashMap;\n \n #[allow(dead_code)]\n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    pub lookup_map: HashMap<RegionVid, Lookup>,\n     infcx: InferCtxt<'a, 'gcx, 'tcx>,\n-    source: &'a Mir<'tcx>\n }\n \n impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n-    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>, source: &'a Mir<'tcx>) -> Self {\n+    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n         NLLVisitor {\n             infcx: infcx,\n-            source: source,\n+            lookup_map: HashMap::new(),\n         }\n     }\n \n-    fn renumber_regions<T>(&self, value: &T, span: Span) -> T where T: TypeFoldable<'tcx> {\n+    fn renumber_regions<T>(&self, value: &T) -> T where T: TypeFoldable<'tcx> {\n         self.infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n-            self.infcx.next_region_var(infer::MiscVariable(span))\n+            self.infcx.next_region_var(infer::MiscVariable(DUMMY_SP))\n         })\n     }\n-}\n \n-fn span_from_location<'tcx>(source: &Mir<'tcx>, location: Location) -> Span {\n-    source[location.block].statements[location.statement_index].source_info.span\n+    fn store_region(&mut self, region: &RegionKind, lookup: Lookup) {\n+        if let RegionKind::ReVar(rid) = *region {\n+            self.lookup_map.entry(rid).or_insert(lookup);\n+        }\n+    }\n+\n+    fn store_ty_regions(&mut self, ty: &Ty<'tcx>, lookup: Lookup) {\n+        for region in ty.regions() {\n+            self.store_region(region, lookup);\n+        }\n+    }\n+\n+    fn store_kind_regions(&mut self, kind: &'tcx Kind, lookup: Lookup) {\n+        if let Some(ty) = kind.as_type() {\n+            self.store_ty_regions(&ty, lookup);\n+        } else if let Some(region) = kind.as_region() {\n+            self.store_region(region, lookup);\n+        }\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, lookup: Lookup) {\n         let old_ty = *ty;\n-        let span = match lookup {\n-            Lookup::Loc(location) => span_from_location(self.source, location),\n-            Lookup::Src(source_info) => source_info.span,\n-        };\n-        *ty = self.renumber_regions(&old_ty, span);\n+        *ty = self.renumber_regions(&old_ty);\n+        self.store_ty_regions(ty, lookup);\n     }\n \n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n-        *substs = self.renumber_regions(&{*substs}, span_from_location(self.source, location));\n+        *substs = self.renumber_regions(&{*substs});\n+        let lookup = Lookup::Loc(location);\n+        for kind in *substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         match *rvalue {\n             Rvalue::Ref(ref mut r, _, _) => {\n                 let old_r = *r;\n-                *r = self.renumber_regions(&old_r, span_from_location(self.source, location));\n+                *r = self.renumber_regions(&old_r);\n+                let lookup = Lookup::Loc(location);\n+                self.store_region(r, lookup);\n             }\n             Rvalue::Use(..) |\n             Rvalue::Repeat(..) |\n@@ -81,7 +101,11 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n     fn visit_closure_substs(&mut self,\n                             substs: &mut ClosureSubsts<'tcx>,\n                             location: Location) {\n-        *substs = self.renumber_regions(substs, span_from_location(self.source, location));\n+        *substs = self.renumber_regions(substs);\n+        let lookup = Lookup::Loc(location);\n+        for kind in substs.substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n     }\n \n     fn visit_statement(&mut self,\n@@ -108,14 +132,9 @@ impl MirPass for NLL {\n         }\n \n         tcx.infer_ctxt().enter(|infcx| {\n-            // Clone mir so we can mutate it without disturbing the rest\n-            // of the compiler\n+            // Clone mir so we can mutate it without disturbing the rest of the compiler\n             let mut renumbered_mir = mir.clone();\n-\n-            // Note that we're using the passed-in mir for the visitor. This is\n-            // so we can lookup locations during traversal without worrying about\n-            // maintaing both a mutable and immutable reference to the same object\n-            let mut visitor = NLLVisitor::new(infcx, &mir);\n+            let mut visitor = NLLVisitor::new(infcx);\n             visitor.visit_mir(&mut renumbered_mir);\n         })\n     }"}]}