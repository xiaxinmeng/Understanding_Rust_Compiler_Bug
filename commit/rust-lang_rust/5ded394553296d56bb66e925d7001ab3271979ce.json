{"sha": "5ded394553296d56bb66e925d7001ab3271979ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZWQzOTQ1NTMyOTZkNTZiYjY2ZTkyNWQ3MDAxYWIzMjcxOTc5Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T08:05:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T08:05:27Z"}, "message": "Auto merge of #77606 - JohnTitor:rollup-7rgahdt, r=JohnTitor\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #76388 (Add a note about the panic behavior of math operations on time objects)\n - #76855 (Revamp rustdoc docs about documentation using `cfg`)\n - #76995 (Reduce boilerplate with the matches! macro)\n - #77228 (Add missing examples for MaybeUninit)\n - #77528 (Avoid unchecked casts in net parser)\n - #77534 (Disallow overriding forbid in same scope)\n - #77555 (Allow anyone to set regression labels)\n - #77558 (Rename bootstrap/defaults/{config.toml.PROFILE => config.PROFILE.toml})\n - #77559 (Fix rustdoc warnings about invalid Rust syntax)\n - #77560 (Fix LitKind's byte buffer to use refcounted slice)\n - #77573 (Hint doc use convert::identity relative link)\n - #77587 (Fix span for unicode escape suggestion.)\n - #77591 (Record `expansion_that_defined` into crate metadata)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "f770a439c36866d01c22f34d8e615e096fe3354d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f770a439c36866d01c22f34d8e615e096fe3354d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ded394553296d56bb66e925d7001ab3271979ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ded394553296d56bb66e925d7001ab3271979ce", "html_url": "https://github.com/rust-lang/rust/commit/5ded394553296d56bb66e925d7001ab3271979ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ded394553296d56bb66e925d7001ab3271979ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1dfd2490a6cb456b92e469fa550dc217e20ad6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1dfd2490a6cb456b92e469fa550dc217e20ad6d", "html_url": "https://github.com/rust-lang/rust/commit/a1dfd2490a6cb456b92e469fa550dc217e20ad6d"}, {"sha": "552933b79d3927dc8df63389417982513156a5eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/552933b79d3927dc8df63389417982513156a5eb", "html_url": "https://github.com/rust-lang/rust/commit/552933b79d3927dc8df63389417982513156a5eb"}], "stats": {"total": 898, "additions": 512, "deletions": 386}, "files": [{"sha": "492d5788fc04f46abe01076aa7527e8f878f6a04", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1606,7 +1606,7 @@ pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),\n     /// A byte string (`b\"foo\"`).\n-    ByteStr(Lrc<Vec<u8>>),\n+    ByteStr(Lrc<[u8]>),\n     /// A byte char (`b'f'`).\n     Byte(u8),\n     /// A character literal (`'a'`)."}, {"sha": "f6f1ad0a9c3f22f24c329fddb28e0a323bd0e1fc", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -4,7 +4,6 @@ use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n use crate::tokenstream::TokenTree;\n \n-use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -108,7 +107,7 @@ impl LitKind {\n                 });\n                 error?;\n                 buf.shrink_to_fit();\n-                LitKind::ByteStr(Lrc::new(buf))\n+                LitKind::ByteStr(buf.into())\n             }\n             token::ByteStrRaw(_) => {\n                 let s = symbol.as_str();\n@@ -128,7 +127,7 @@ impl LitKind {\n                     symbol.to_string().into_bytes()\n                 };\n \n-                LitKind::ByteStr(Lrc::new(bytes))\n+                LitKind::ByteStr(bytes.into())\n             }\n             token::Err => LitKind::Err(symbol),\n         })"}, {"sha": "f76bbd8381940630bd1bbfbdda3da0018a5bab96", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -13,8 +13,6 @@ use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n use std::rc::Rc;\n \n-use rustc_data_structures::sync::Lrc;\n-\n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include\n // a given file into the current one.\n@@ -216,7 +214,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes)))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "222333a578b7dfae78b1e4c281ff19f2874621cf", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -10,6 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::lint::LevelSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n use rustc_middle::ty::query::Providers;\n@@ -95,6 +96,44 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n+    /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n+    /// (e.g. if a forbid was already inserted on the same scope), then emits a\n+    /// diagnostic with no change to `specs`.\n+    fn insert_spec(\n+        &mut self,\n+        specs: &mut FxHashMap<LintId, LevelSource>,\n+        id: LintId,\n+        (level, src): LevelSource,\n+    ) {\n+        if let Some((old_level, old_src)) = specs.get(&id) {\n+            if old_level == &Level::Forbid && level != Level::Forbid {\n+                let mut diag_builder = struct_span_err!(\n+                    self.sess,\n+                    src.span(),\n+                    E0453,\n+                    \"{}({}) incompatible with previous forbid in same scope\",\n+                    level.as_str(),\n+                    src.name(),\n+                );\n+                match *old_src {\n+                    LintSource::Default => {}\n+                    LintSource::Node(_, forbid_source_span, reason) => {\n+                        diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n+                        if let Some(rationale) = reason {\n+                            diag_builder.note(&rationale.as_str());\n+                        }\n+                    }\n+                    LintSource::CommandLine(_) => {\n+                        diag_builder.note(\"`forbid` lint level was set on command line\");\n+                    }\n+                }\n+                diag_builder.emit();\n+                return;\n+            }\n+        }\n+        specs.insert(id, (level, src));\n+    }\n+\n     /// Pushes a list of AST lint attributes onto this context.\n     ///\n     /// This function will return a `BuilderPush` object which should be passed\n@@ -109,7 +148,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub fn push(\n+    pub(crate) fn push(\n         &mut self,\n         attrs: &[ast::Attribute],\n         store: &LintStore,\n@@ -221,7 +260,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         let src = LintSource::Node(name, li.span(), reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n-                            specs.insert(id, (level, src));\n+                            self.insert_spec(&mut specs, id, (level, src));\n                         }\n                     }\n \n@@ -235,7 +274,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    specs.insert(*id, (level, src));\n+                                    self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                             }\n                             Err((Some(ids), new_lint_name)) => {\n@@ -272,7 +311,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    specs.insert(*id, (level, src));\n+                                    self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n                             }\n                             Err((None, _)) => {"}, {"sha": "8b11d2c913ac2e0fe45856ebf7a115b4a00c03fe", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1011,6 +1011,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))\n     }\n \n+    fn get_expn_that_defined(&self, id: DefIndex, sess: &Session) -> ExpnId {\n+        self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))\n+    }\n+\n     /// Iterates over all the stability attributes in the given crate.\n     fn get_lib_features(&self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\""}, {"sha": "578ce382912f0a25c357b8f94bcf0a01f1f82847", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -238,6 +238,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n \n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n+    expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "4350ac5c27a88813ec9919b900548b5d103412ff", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -747,6 +747,7 @@ impl EncodeContext<'a, 'tcx> {\n             ty::Visibility::from_hir(enum_vis, enum_id, self.tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -883,6 +884,7 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.visibility[def_id] <- field.vis);\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- variant_data.fields()[field_index].attrs);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -924,6 +926,7 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n         record!(self.tables.visibility[def_id] <- ctor_vis);\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -1339,6 +1342,7 @@ impl EncodeContext<'a, 'tcx> {\n             ty::Visibility::from_hir(&item.vis, item.hir_id, tcx));\n         record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n+        record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n             hir::ItemKind::ForeignMod(ref fm) => record!(self.tables.children[def_id] <-"}, {"sha": "9e26d02e4e16d7c1e19397ea6f3096e55cbca0a9", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -294,6 +294,7 @@ define_tables! {\n     variances: Table<DefIndex, Lazy<[ty::Variance]>>,\n     generics: Table<DefIndex, Lazy<ty::Generics>>,\n     explicit_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n+    expn_that_defined: Table<DefIndex, Lazy<ExpnId>>,\n     // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n     // doesn't handle shorthands in its own (de)serialization impls,\n     // as it's an `enum` for which we want to derive (de)serialization,"}, {"sha": "57f03c2a5cf54c54745b584ce048f0e01dc99659", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -535,15 +535,15 @@ impl<'hir> Map<'hir> {\n             Some(Node::Binding(_)) => (),\n             _ => return false,\n         }\n-        match self.find(self.get_parent_node(id)) {\n+        matches!(\n+            self.find(self.get_parent_node(id)),\n             Some(\n                 Node::Item(_)\n                 | Node::TraitItem(_)\n                 | Node::ImplItem(_)\n                 | Node::Expr(Expr { kind: ExprKind::Closure(..), .. }),\n-            ) => true,\n-            _ => false,\n-        }\n+            )\n+        )\n     }\n \n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n@@ -554,10 +554,10 @@ impl<'hir> Map<'hir> {\n \n     /// Whether `hir_id` corresponds to a `mod` or a crate.\n     pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n-        match self.get_entry(hir_id).node {\n-            Node::Item(Item { kind: ItemKind::Mod(_), .. }) | Node::Crate(..) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self.get_entry(hir_id).node,\n+            Node::Item(Item { kind: ItemKind::Mod(_), .. }) | Node::Crate(..)\n+        )\n     }\n \n     /// Retrieves the `HirId` for `id`'s enclosing method, unless there's a"}, {"sha": "91e1d6e0b0b7286a076dd35af4607ad59ba41c57", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -9,7 +9,7 @@ use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n@@ -25,6 +25,24 @@ pub enum LintSource {\n     CommandLine(Symbol),\n }\n \n+impl LintSource {\n+    pub fn name(&self) -> Symbol {\n+        match *self {\n+            LintSource::Default => symbol::kw::Default,\n+            LintSource::Node(name, _, _) => name,\n+            LintSource::CommandLine(name) => name,\n+        }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        match *self {\n+            LintSource::Default => DUMMY_SP,\n+            LintSource::Node(_, span, _) => span,\n+            LintSource::CommandLine(_) => DUMMY_SP,\n+        }\n+    }\n+}\n+\n pub type LevelSource = (Level, LintSource);\n \n pub struct LintLevelSets {"}, {"sha": "b5beb3babe2392625421d0129dab5dc43b7c2237", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -486,10 +486,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         // `main as fn() == main as fn()` is false, while `let x = main as fn(); x == x` is true.\n         // However, formatting code relies on function identity (see #58320), so we only do\n         // this for generic functions.  Lifetime parameters are ignored.\n-        let is_generic = instance.substs.into_iter().any(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(_) => false,\n-            _ => true,\n-        });\n+        let is_generic = instance\n+            .substs\n+            .into_iter()\n+            .any(|kind| !matches!(kind.unpack(), GenericArgKind::Lifetime(_)));\n         if is_generic {\n             // Get a fresh ID.\n             let mut alloc_map = self.alloc_map.lock();"}, {"sha": "3751249853fdac55338d8208b024086ea1ef5801", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -445,19 +445,13 @@ impl<'tcx, Tag> Scalar<Tag> {\n     /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_bits(self) -> bool {\n-        match self {\n-            Scalar::Raw { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, Scalar::Raw { .. })\n     }\n \n     /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_ptr(self) -> bool {\n-        match self {\n-            Scalar::Ptr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, Scalar::Ptr(_))\n     }\n \n     pub fn to_bool(self) -> InterpResult<'tcx, bool> {"}, {"sha": "da7677f802bda22fd715e2535601da15d8338d7a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 31, "deletions": 42, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -971,67 +971,59 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// - `let x = ...`,\n     /// - or `match ... { C(x) => ... }`\n     pub fn can_be_made_mutable(&self) -> bool {\n-        match self.local_info {\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n-                binding_mode: ty::BindingMode::BindByValue(_),\n-                opt_ty_info: _,\n-                opt_match_place: _,\n-                pat_span: _,\n-            })))) => true,\n-\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n-                ImplicitSelfKind::Imm,\n-            )))) => true,\n-\n-            _ => false,\n-        }\n+        matches!(\n+            self.local_info,\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                BindingForm::Var(VarBindingForm {\n+                    binding_mode: ty::BindingMode::BindByValue(_),\n+                    opt_ty_info: _,\n+                    opt_match_place: _,\n+                    pat_span: _,\n+                })\n+                | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n+            )))\n+        )\n     }\n \n     /// Returns `true` if local is definitely not a `ref ident` or\n     /// `ref mut ident` binding. (Such bindings cannot be made into\n     /// mutable bindings, but the inverse does not necessarily hold).\n     pub fn is_nonref_binding(&self) -> bool {\n-        match self.local_info {\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n-                binding_mode: ty::BindingMode::BindByValue(_),\n-                opt_ty_info: _,\n-                opt_match_place: _,\n-                pat_span: _,\n-            })))) => true,\n-\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(_)))) => true,\n-\n-            _ => false,\n-        }\n+        matches!(\n+            self.local_info,\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                BindingForm::Var(VarBindingForm {\n+                    binding_mode: ty::BindingMode::BindByValue(_),\n+                    opt_ty_info: _,\n+                    opt_match_place: _,\n+                    pat_span: _,\n+                })\n+                | BindingForm::ImplicitSelf(_),\n+            )))\n+        )\n     }\n \n     /// Returns `true` if this variable is a named variable or function\n     /// parameter declared by the user.\n     #[inline]\n     pub fn is_user_variable(&self) -> bool {\n-        match self.local_info {\n-            Some(box LocalInfo::User(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.local_info, Some(box LocalInfo::User(_)))\n     }\n \n     /// Returns `true` if this is a reference to a variable bound in a `match`\n     /// expression that is used to access said variable for the guard of the\n     /// match arm.\n     pub fn is_ref_for_guard(&self) -> bool {\n-        match self.local_info {\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard))) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self.local_info,\n+            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)))\n+        )\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n     /// access that static\n     pub fn is_ref_to_static(&self) -> bool {\n-        match self.local_info {\n-            Some(box LocalInfo::StaticRef { .. }) => true,\n-            _ => false,\n-        }\n+        matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n@@ -2164,10 +2156,7 @@ pub enum BinOp {\n impl BinOp {\n     pub fn is_checkable(self) -> bool {\n         use self::BinOp::*;\n-        match self {\n-            Add | Sub | Mul | Shl | Shr => true,\n-            _ => false,\n-        }\n+        matches!(self, Add | Sub | Mul | Shl | Shr)\n     }\n }\n "}, {"sha": "9a6bfa101899a97880eff62d4d32a6047af5b9b5", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1164,82 +1164,63 @@ pub enum PlaceContext {\n impl PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n     pub fn is_drop(&self) -> bool {\n-        match *self {\n-            PlaceContext::MutatingUse(MutatingUseContext::Drop) => true,\n-            _ => false,\n-        }\n+        matches!(self, PlaceContext::MutatingUse(MutatingUseContext::Drop))\n     }\n \n     /// Returns `true` if this place context represents a borrow.\n     pub fn is_borrow(&self) -> bool {\n-        match *self {\n+        matches!(\n+            self,\n             PlaceContext::NonMutatingUse(\n                 NonMutatingUseContext::SharedBorrow\n-                | NonMutatingUseContext::ShallowBorrow\n-                | NonMutatingUseContext::UniqueBorrow,\n-            )\n-            | PlaceContext::MutatingUse(MutatingUseContext::Borrow) => true,\n-            _ => false,\n-        }\n+                    | NonMutatingUseContext::ShallowBorrow\n+                    | NonMutatingUseContext::UniqueBorrow\n+            ) | PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n+        )\n     }\n \n     /// Returns `true` if this place context represents a storage live or storage dead marker.\n     pub fn is_storage_marker(&self) -> bool {\n-        match *self {\n-            PlaceContext::NonUse(NonUseContext::StorageLive | NonUseContext::StorageDead) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            PlaceContext::NonUse(NonUseContext::StorageLive | NonUseContext::StorageDead)\n+        )\n     }\n \n     /// Returns `true` if this place context represents a storage live marker.\n     pub fn is_storage_live_marker(&self) -> bool {\n-        match *self {\n-            PlaceContext::NonUse(NonUseContext::StorageLive) => true,\n-            _ => false,\n-        }\n+        matches!(self, PlaceContext::NonUse(NonUseContext::StorageLive))\n     }\n \n     /// Returns `true` if this place context represents a storage dead marker.\n     pub fn is_storage_dead_marker(&self) -> bool {\n-        match *self {\n-            PlaceContext::NonUse(NonUseContext::StorageDead) => true,\n-            _ => false,\n-        }\n+        matches!(self, PlaceContext::NonUse(NonUseContext::StorageDead))\n     }\n \n     /// Returns `true` if this place context represents a use that potentially changes the value.\n     pub fn is_mutating_use(&self) -> bool {\n-        match *self {\n-            PlaceContext::MutatingUse(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, PlaceContext::MutatingUse(..))\n     }\n \n     /// Returns `true` if this place context represents a use that does not change the value.\n     pub fn is_nonmutating_use(&self) -> bool {\n-        match *self {\n-            PlaceContext::NonMutatingUse(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, PlaceContext::NonMutatingUse(..))\n     }\n \n     /// Returns `true` if this place context represents a use.\n     pub fn is_use(&self) -> bool {\n-        match *self {\n-            PlaceContext::NonUse(..) => false,\n-            _ => true,\n-        }\n+        !matches!(self, PlaceContext::NonUse(..))\n     }\n \n     /// Returns `true` if this place context represents an assignment statement.\n     pub fn is_place_assignment(&self) -> bool {\n-        match *self {\n+        matches!(\n+            self,\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n-                | MutatingUseContext::Call\n-                | MutatingUseContext::AsmOutput,\n-            ) => true,\n-            _ => false,\n-        }\n+                    | MutatingUseContext::Call\n+                    | MutatingUseContext::AsmOutput,\n+            )\n+        )\n     }\n }"}, {"sha": "fe115bbb9c334896f6a273c28bac2f8bbe436669", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -191,6 +191,11 @@ rustc_queries! {\n             eval_always\n             desc { |tcx| \"parent module of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n+\n+        /// Internal helper query. Use `tcx.expansion_that_defined` instead\n+        query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n+            desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n+        }\n     }\n \n     Codegen {"}, {"sha": "ec6010e6eecf453fec73674cc58ac576329575a2", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -79,10 +79,7 @@ pub enum Node {\n \n impl<'tcx> Node {\n     pub fn is_from_trait(&self) -> bool {\n-        match *self {\n-            Node::Trait(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, Node::Trait(..))\n     }\n \n     /// Iterate over the items defined directly by the given (impl or trait) node."}, {"sha": "89d0e139551226e5565e9296aa60bb2085d91b8d", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -85,10 +85,7 @@ pub struct Adjustment<'tcx> {\n \n impl Adjustment<'tcx> {\n     pub fn is_region_borrow(&self) -> bool {\n-        match self.kind {\n-            Adjust::Borrow(AutoBorrow::Ref(..)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, Adjust::Borrow(AutoBorrow::Ref(..)))\n     }\n }\n "}, {"sha": "e67a76f0111a099181e83b75bfc8415ea6f2b405", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -588,10 +588,7 @@ impl<'tcx> TypeckResults<'tcx> {\n             return false;\n         }\n \n-        match self.type_dependent_defs().get(expr.hir_id) {\n-            Some(Ok((DefKind::AssocFn, _))) => true,\n-            _ => false,\n-        }\n+        matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))\n     }\n \n     pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {"}, {"sha": "65703d04c7040439a9633106337253b27ab280f4", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -11,21 +11,16 @@ use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n     pub fn is_primitive_ty(&self) -> bool {\n-        match self.kind() {\n-            Bool\n-            | Char\n-            | Str\n-            | Int(_)\n-            | Uint(_)\n-            | Float(_)\n+        matches!(\n+            self.kind(),\n+            Bool | Char | Str | Int(_) | Uint(_) | Float(_)\n             | Infer(\n                 InferTy::IntVar(_)\n                 | InferTy::FloatVar(_)\n                 | InferTy::FreshIntTy(_)\n-                | InferTy::FreshFloatTy(_),\n-            ) => true,\n-            _ => false,\n-        }\n+                | InferTy::FreshFloatTy(_)\n+            )\n+        )\n     }\n \n     /// Whether the type is succinctly representable as a type instead of just referred to with a\n@@ -64,11 +59,16 @@ impl<'tcx> TyS<'tcx> {\n \n     /// Whether the type can be safely suggested during error recovery.\n     pub fn is_suggestable(&self) -> bool {\n-        match self.kind() {\n-            Opaque(..) | FnDef(..) | FnPtr(..) | Dynamic(..) | Closure(..) | Infer(..)\n-            | Projection(..) => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self.kind(),\n+            Opaque(..)\n+                | FnDef(..)\n+                | FnPtr(..)\n+                | Dynamic(..)\n+                | Closure(..)\n+                | Infer(..)\n+                | Projection(..)\n+        )\n     }\n }\n "}, {"sha": "f8e8c209d373d0965aec3374ba81b5ce46028d21", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -184,10 +184,10 @@ impl<'tcx> InstanceDef<'tcx> {\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n             _ => return true,\n         };\n-        match tcx.def_key(def_id).disambiguated_data.data {\n-            DefPathData::Ctor | DefPathData::ClosureExpr => true,\n-            _ => false,\n-        }\n+        matches!(\n+            tcx.def_key(def_id).disambiguated_data.data,\n+            DefPathData::Ctor | DefPathData::ClosureExpr\n+        )\n     }\n \n     /// Returns `true` if the machine code for this instance is instantiated in"}, {"sha": "f6f71d002a88a2164e468934542bd24115fe30b4", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -2610,10 +2610,7 @@ where\n             target.target_os == \"linux\" && target.arch == \"sparc64\" && target_env_gnu_like;\n         let linux_powerpc_gnu_like =\n             target.target_os == \"linux\" && target.arch == \"powerpc\" && target_env_gnu_like;\n-        let rust_abi = match sig.abi {\n-            RustIntrinsic | PlatformIntrinsic | Rust | RustCall => true,\n-            _ => false,\n-        };\n+        let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n         // Handle safe Rust thin and fat pointers.\n         let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,"}, {"sha": "f069faed9e200101e591b49259ec80e1905a6dfe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -2681,15 +2681,15 @@ impl<'tcx> ClosureKind {\n     /// Returns `true` if a type that impls this closure kind\n     /// must also implement `other`.\n     pub fn extends(self, other: ty::ClosureKind) -> bool {\n-        match (self, other) {\n-            (ClosureKind::Fn, ClosureKind::Fn) => true,\n-            (ClosureKind::Fn, ClosureKind::FnMut) => true,\n-            (ClosureKind::Fn, ClosureKind::FnOnce) => true,\n-            (ClosureKind::FnMut, ClosureKind::FnMut) => true,\n-            (ClosureKind::FnMut, ClosureKind::FnOnce) => true,\n-            (ClosureKind::FnOnce, ClosureKind::FnOnce) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            (self, other),\n+            (ClosureKind::Fn, ClosureKind::Fn)\n+                | (ClosureKind::Fn, ClosureKind::FnMut)\n+                | (ClosureKind::Fn, ClosureKind::FnOnce)\n+                | (ClosureKind::FnMut, ClosureKind::FnMut)\n+                | (ClosureKind::FnMut, ClosureKind::FnOnce)\n+                | (ClosureKind::FnOnce, ClosureKind::FnOnce)\n+        )\n     }\n \n     /// Returns the representative scalar type for this closure kind.\n@@ -2815,15 +2815,15 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {\n         let is_associated_item = if let Some(def_id) = def_id.as_local() {\n-            match self.hir().get(self.hir().local_def_id_to_hir_id(def_id)) {\n-                Node::TraitItem(_) | Node::ImplItem(_) => true,\n-                _ => false,\n-            }\n+            matches!(\n+                self.hir().get(self.hir().local_def_id_to_hir_id(def_id)),\n+                Node::TraitItem(_) | Node::ImplItem(_)\n+            )\n         } else {\n-            match self.def_kind(def_id) {\n-                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n-                _ => false,\n-            }\n+            matches!(\n+                self.def_kind(def_id),\n+                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy\n+            )\n         };\n \n         is_associated_item.then(|| self.associated_item(def_id))\n@@ -3034,10 +3034,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .hygienic_eq(def_name.span.ctxt(), self.expansion_that_defined(def_parent_def_id))\n     }\n \n-    fn expansion_that_defined(self, scope: DefId) -> ExpnId {\n+    pub fn expansion_that_defined(self, scope: DefId) -> ExpnId {\n         match scope.as_local() {\n+            // Parsing and expansion aren't incremental, so we don't\n+            // need to go through a query for the same-crate case.\n             Some(scope) => self.hir().definitions().expansion_that_defined(scope),\n-            None => ExpnId::root(),\n+            None => self.expn_that_defined(scope),\n         }\n     }\n "}, {"sha": "5cba451ea6e3c7071462b48b41da5d637c73a8f7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 32, "deletions": 113, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1763,10 +1763,7 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_never(&self) -> bool {\n-        match self.kind() {\n-            Never => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Never)\n     }\n \n     /// Checks whether a type is definitely uninhabited. This is\n@@ -1823,34 +1820,22 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_adt(&self) -> bool {\n-        match self.kind() {\n-            Adt(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Adt(..))\n     }\n \n     #[inline]\n     pub fn is_ref(&self) -> bool {\n-        match self.kind() {\n-            Ref(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Ref(..))\n     }\n \n     #[inline]\n     pub fn is_ty_var(&self) -> bool {\n-        match self.kind() {\n-            Infer(TyVar(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Infer(TyVar(_)))\n     }\n \n     #[inline]\n     pub fn is_ty_infer(&self) -> bool {\n-        match self.kind() {\n-            Infer(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Infer(_))\n     }\n \n     #[inline]\n@@ -1880,20 +1865,14 @@ impl<'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn is_slice(&self) -> bool {\n         match self.kind() {\n-            RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => match ty.kind() {\n-                Slice(_) | Str => true,\n-                _ => false,\n-            },\n+            RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),\n             _ => false,\n         }\n     }\n \n     #[inline]\n     pub fn is_array(&self) -> bool {\n-        match self.kind() {\n-            Array(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Array(..))\n     }\n \n     #[inline]\n@@ -1940,27 +1919,21 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_region_ptr(&self) -> bool {\n-        match self.kind() {\n-            Ref(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Ref(..))\n     }\n \n     #[inline]\n     pub fn is_mutable_ptr(&self) -> bool {\n-        match self.kind() {\n+        matches!(\n+            self.kind(),\n             RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })\n-            | Ref(_, _, hir::Mutability::Mut) => true,\n-            _ => false,\n-        }\n+                | Ref(_, _, hir::Mutability::Mut)\n+        )\n     }\n \n     #[inline]\n     pub fn is_unsafe_ptr(&self) -> bool {\n-        match self.kind() {\n-            RawPtr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), RawPtr(_))\n     }\n \n     /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).\n@@ -1990,35 +1963,22 @@ impl<'tcx> TyS<'tcx> {\n     /// contents are abstract to rustc.)\n     #[inline]\n     pub fn is_scalar(&self) -> bool {\n-        match self.kind() {\n-            Bool\n-            | Char\n-            | Int(_)\n-            | Float(_)\n-            | Uint(_)\n+        matches!(\n+            self.kind(),\n+            Bool | Char | Int(_) | Float(_) | Uint(_) | FnDef(..) | FnPtr(_) | RawPtr(_)\n             | Infer(IntVar(_) | FloatVar(_))\n-            | FnDef(..)\n-            | FnPtr(_)\n-            | RawPtr(_) => true,\n-            _ => false,\n-        }\n+        )\n     }\n \n     /// Returns `true` if this type is a floating point type.\n     #[inline]\n     pub fn is_floating_point(&self) -> bool {\n-        match self.kind() {\n-            Float(_) | Infer(FloatVar(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Float(_) | Infer(FloatVar(_)))\n     }\n \n     #[inline]\n     pub fn is_trait(&self) -> bool {\n-        match self.kind() {\n-            Dynamic(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Dynamic(..))\n     }\n \n     #[inline]\n@@ -2031,52 +1991,32 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_closure(&self) -> bool {\n-        match self.kind() {\n-            Closure(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Closure(..))\n     }\n \n     #[inline]\n     pub fn is_generator(&self) -> bool {\n-        match self.kind() {\n-            Generator(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Generator(..))\n     }\n \n     #[inline]\n     pub fn is_integral(&self) -> bool {\n-        match self.kind() {\n-            Infer(IntVar(_)) | Int(_) | Uint(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))\n     }\n \n     #[inline]\n     pub fn is_fresh_ty(&self) -> bool {\n-        match self.kind() {\n-            Infer(FreshTy(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Infer(FreshTy(_)))\n     }\n \n     #[inline]\n     pub fn is_fresh(&self) -> bool {\n-        match self.kind() {\n-            Infer(FreshTy(_)) => true,\n-            Infer(FreshIntTy(_)) => true,\n-            Infer(FreshFloatTy(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))\n     }\n \n     #[inline]\n     pub fn is_char(&self) -> bool {\n-        match self.kind() {\n-            Char => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Char)\n     }\n \n     #[inline]\n@@ -2086,34 +2026,22 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_signed(&self) -> bool {\n-        match self.kind() {\n-            Int(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Int(_))\n     }\n \n     #[inline]\n     pub fn is_ptr_sized_integral(&self) -> bool {\n-        match self.kind() {\n-            Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Int(ast::IntTy::Isize) | Uint(ast::UintTy::Usize))\n     }\n \n     #[inline]\n     pub fn is_machine(&self) -> bool {\n-        match self.kind() {\n-            Int(..) | Uint(..) | Float(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Int(..) | Uint(..) | Float(..))\n     }\n \n     #[inline]\n     pub fn has_concrete_skeleton(&self) -> bool {\n-        match self.kind() {\n-            Param(_) | Infer(_) | Error(_) => false,\n-            _ => true,\n-        }\n+        !matches!(self.kind(), Param(_) | Infer(_) | Error(_))\n     }\n \n     /// Returns the type and mutability of `*ty`.\n@@ -2156,26 +2084,17 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_fn(&self) -> bool {\n-        match self.kind() {\n-            FnDef(..) | FnPtr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), FnDef(..) | FnPtr(_))\n     }\n \n     #[inline]\n     pub fn is_fn_ptr(&self) -> bool {\n-        match self.kind() {\n-            FnPtr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), FnPtr(_))\n     }\n \n     #[inline]\n     pub fn is_impl_trait(&self) -> bool {\n-        match self.kind() {\n-            Opaque(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind(), Opaque(..))\n     }\n \n     #[inline]"}, {"sha": "47726632727d02ab3a95bcc04f989aba10ff5a6c", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1225,7 +1225,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    ///     <T as Foo<'0>>::Item: '1\n+    /// ```ignore (internal compiler representation so lifetime syntax is invalid)\n+    /// <T as Foo<'0>>::Item: '1\n+    /// ```\n     ///\n     /// In particular, this routine winds up being important when\n     /// there are bounds like `where <T as Foo<'a>>::Item: 'b` in the"}, {"sha": "bd7c25bf25043469df03d7c6c627a49b2dee2418", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -671,7 +671,8 @@ pub fn write_allocations<'tcx>(\n /// Dumps the size and metadata and content of an allocation to the given writer.\n /// The expectation is that the caller first prints other relevant metadata, so the exact\n /// format of this function is (*without* leading or trailing newline):\n-/// ```\n+///\n+/// ```text\n /// size: {}, align: {}) {\n ///     <bytes>\n /// }"}, {"sha": "b71ff6e7557496ac2b5cddbce0390efa4dc3c29f", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -31,7 +31,7 @@ crate fn lit_to_const<'tcx>(\n         (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n-            let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n+            let allocation = Allocation::from_byte_aligned_bytes(data as &[u8]);\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }"}, {"sha": "47d317f918865ce72c8a7d49e184ef720ef23d64", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -181,10 +181,9 @@ pub(crate) fn emit_unescape_error(\n \n             if suggestion_len > 0 {\n                 suggestion.push('}');\n-                let lo = char_span.lo();\n-                let hi = lo + BytePos(suggestion_len as u32);\n+                let hi = char_span.lo() + BytePos(suggestion_len as u32);\n                 diag.span_suggestion(\n-                    span.with_lo(lo).with_hi(hi),\n+                    span.with_hi(hi),\n                     \"format of unicode escape sequences uses braces\",\n                     suggestion,\n                     Applicability::MaybeIncorrect,"}, {"sha": "618f3e045e7125c8f448b54a03540523dbb80601", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -38,13 +38,13 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// then `substs` would be `['a, T]`.\n     pub substs: SubstsRef<'tcx>,\n \n-    /// The span of this particular definition of the opaque type.  So\n+    /// The span of this particular definition of the opaque type. So\n     /// for example:\n     ///\n-    /// ```\n+    /// ```ignore (incomplete snippet)\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n-    ///             ^^^ This is the span we are looking for!\n+    /// //          ^^^ This is the span we are looking for!\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}, {"sha": "179e383be2e2bb9cfcf638a74493f04cd06de30e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1275,7 +1275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are fields which aren't provided.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: missing field `you_can_use_this_field` in initializer of `foo::Foo`\n     ///  --> src/main.rs:8:5\n     ///   |\n@@ -1327,7 +1327,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Report an error for a struct field expression when there are no visible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n     ///  --> src/main.rs:8:5\n     ///   |"}, {"sha": "53bc2069b76ce34e08b0f192c5a306a3596f4f85", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1381,7 +1381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Returns a diagnostic reporting a struct pattern which is missing an `..` due to\n     /// inaccessible fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: pattern requires `..` due to inaccessible fields\n     ///   --> src/main.rs:10:9\n     ///    |\n@@ -1431,7 +1431,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Returns a diagnostic reporting a struct pattern which does not mention some fields.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error[E0027]: pattern does not mention field `you_cant_use_this_field`\n     ///   --> src/main.rs:15:9\n     ///    |"}, {"sha": "454fb34e77e495f9d11468895c8efd917934d555", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -98,8 +98,6 @@ pub fn spin_loop() {\n /// An identity function that *__hints__* to the compiler to be maximally pessimistic about what\n /// `black_box` could do.\n ///\n-/// [`std::convert::identity`]: https://doc.rust-lang.org/core/convert/fn.identity.html\n-///\n /// Unlike [`std::convert::identity`], a Rust compiler is encouraged to assume that `black_box` can\n /// use `dummy` in any possible valid way that Rust code is allowed to without introducing undefined\n /// behavior in the calling code. This property makes `black_box` useful for writing code in which\n@@ -108,6 +106,8 @@ pub fn spin_loop() {\n /// Note however, that `black_box` is only (and can only be) provided on a \"best-effort\" basis. The\n /// extent to which it can block optimisations may vary depending upon the platform and code-gen\n /// backend used. Programs cannot rely on `black_box` for *correctness* in any way.\n+///\n+/// [`std::convert::identity`]: crate::convert::identity\n #[cfg_attr(not(miri), inline)]\n #[cfg_attr(miri, inline(never))]\n #[unstable(feature = \"test\", issue = \"50297\")]"}, {"sha": "862c452a4348082098dab16edbcdfc245d6124d7", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -246,6 +246,14 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let v: MaybeUninit<Vec<u8>> = MaybeUninit::new(vec![42]);\n+    /// ```\n+    ///\n     /// [`assume_init`]: MaybeUninit::assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n@@ -259,9 +267,15 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     ///\n-    /// See the [type-level documentation][type] for some examples.\n+    /// See the [type-level documentation][MaybeUninit] for some examples.\n     ///\n-    /// [type]: union.MaybeUninit.html\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let v: MaybeUninit<String> = MaybeUninit::uninit();\n+    /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]"}, {"sha": "3a5fd8f6f5d0ed371a5e6208f62dfee485de0f74", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -6,11 +6,34 @@\n #[cfg(test)]\n mod tests;\n \n+use crate::convert::TryInto as _;\n use crate::error::Error;\n use crate::fmt;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};\n use crate::str::FromStr;\n \n+trait ReadNumberHelper: crate::marker::Sized {\n+    const ZERO: Self;\n+    fn checked_mul(&self, other: u32) -> Option<Self>;\n+    fn checked_add(&self, other: u32) -> Option<Self>;\n+}\n+\n+macro_rules! impl_helper {\n+    ($($t:ty)*) => ($(impl ReadNumberHelper for $t {\n+        const ZERO: Self = 0;\n+        #[inline]\n+        fn checked_mul(&self, other: u32) -> Option<Self> {\n+            Self::checked_mul(*self, other.try_into().ok()?)\n+        }\n+        #[inline]\n+        fn checked_add(&self, other: u32) -> Option<Self> {\n+            Self::checked_add(*self, other.try_into().ok()?)\n+        }\n+    })*)\n+}\n+\n+impl_helper! { u8 u16 }\n+\n struct Parser<'a> {\n     // parsing as ASCII, so can use byte array\n     state: &'a [u8],\n@@ -21,10 +44,6 @@ impl<'a> Parser<'a> {\n         Parser { state: input.as_bytes() }\n     }\n \n-    fn is_eof(&self) -> bool {\n-        self.state.is_empty()\n-    }\n-\n     /// Run a parser, and restore the pre-parse state if it fails\n     fn read_atomically<T, F>(&mut self, inner: F) -> Option<T>\n     where\n@@ -40,26 +59,19 @@ impl<'a> Parser<'a> {\n \n     /// Run a parser, but fail if the entire input wasn't consumed.\n     /// Doesn't run atomically.\n-    fn read_till_eof<T, F>(&mut self, inner: F) -> Option<T>\n-    where\n-        F: FnOnce(&mut Parser<'_>) -> Option<T>,\n-    {\n-        inner(self).filter(|_| self.is_eof())\n-    }\n-\n-    /// Same as read_till_eof, but returns a Result<AddrParseError> on failure\n     fn parse_with<T, F>(&mut self, inner: F) -> Result<T, AddrParseError>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n-        self.read_till_eof(inner).ok_or(AddrParseError(()))\n+        let result = inner(self);\n+        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(()))\n     }\n \n     /// Read the next character from the input\n     fn read_char(&mut self) -> Option<char> {\n         self.state.split_first().map(|(&b, tail)| {\n             self.state = tail;\n-            b as char\n+            char::from(b)\n         })\n     }\n \n@@ -84,25 +96,26 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    // Read a single digit in the given radix. For instance, 0-9 in radix 10;\n-    // 0-9A-F in radix 16.\n-    fn read_digit(&mut self, radix: u32) -> Option<u32> {\n-        self.read_atomically(move |p| p.read_char()?.to_digit(radix))\n-    }\n-\n     // Read a number off the front of the input in the given radix, stopping\n     // at the first non-digit character or eof. Fails if the number has more\n-    // digits than max_digits, or the value is >= upto, or if there is no number.\n-    fn read_number(&mut self, radix: u32, max_digits: u32, upto: u32) -> Option<u32> {\n+    // digits than max_digits or if there is no number.\n+    fn read_number<T: ReadNumberHelper>(\n+        &mut self,\n+        radix: u32,\n+        max_digits: Option<usize>,\n+    ) -> Option<T> {\n         self.read_atomically(move |p| {\n-            let mut result = 0;\n+            let mut result = T::ZERO;\n             let mut digit_count = 0;\n \n-            while let Some(digit) = p.read_digit(radix) {\n-                result = (result * radix) + digit;\n+            while let Some(digit) = p.read_atomically(|p| p.read_char()?.to_digit(radix)) {\n+                result = result.checked_mul(radix)?;\n+                result = result.checked_add(digit)?;\n                 digit_count += 1;\n-                if digit_count > max_digits || result >= upto {\n-                    return None;\n+                if let Some(max_digits) = max_digits {\n+                    if digit_count > max_digits {\n+                        return None;\n+                    }\n                 }\n             }\n \n@@ -116,7 +129,7 @@ impl<'a> Parser<'a> {\n             let mut groups = [0; 4];\n \n             for (i, slot) in groups.iter_mut().enumerate() {\n-                *slot = p.read_separator('.', i, |p| p.read_number(10, 3, 0x100))? as u8;\n+                *slot = p.read_separator('.', i, |p| p.read_number(10, None))?;\n             }\n \n             Some(groups.into())\n@@ -140,17 +153,17 @@ impl<'a> Parser<'a> {\n                     let ipv4 = p.read_separator(':', i, |p| p.read_ipv4_addr());\n \n                     if let Some(v4_addr) = ipv4 {\n-                        let octets = v4_addr.octets();\n-                        groups[i + 0] = ((octets[0] as u16) << 8) | (octets[1] as u16);\n-                        groups[i + 1] = ((octets[2] as u16) << 8) | (octets[3] as u16);\n+                        let [one, two, three, four] = v4_addr.octets();\n+                        groups[i + 0] = u16::from_be_bytes([one, two]);\n+                        groups[i + 1] = u16::from_be_bytes([three, four]);\n                         return (i + 2, true);\n                     }\n                 }\n \n-                let group = p.read_separator(':', i, |p| p.read_number(16, 4, 0x10000));\n+                let group = p.read_separator(':', i, |p| p.read_number(16, Some(4)));\n \n                 match group {\n-                    Some(g) => *slot = g as u16,\n+                    Some(g) => *slot = g,\n                     None => return (i, false),\n                 }\n             }\n@@ -195,12 +208,11 @@ impl<'a> Parser<'a> {\n         self.read_ipv4_addr().map(IpAddr::V4).or_else(move || self.read_ipv6_addr().map(IpAddr::V6))\n     }\n \n-    /// Read a : followed by a port in base 10\n+    /// Read a : followed by a port in base 10.\n     fn read_port(&mut self) -> Option<u16> {\n         self.read_atomically(|p| {\n             let _ = p.read_given_char(':')?;\n-            let port = p.read_number(10, 5, 0x10000)?;\n-            Some(port as u16)\n+            p.read_number(10, None)\n         })\n     }\n "}, {"sha": "64d7898f030151e2f03946623c7f34c4b7217b31", "filename": "library/std/src/time.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -100,6 +100,11 @@ pub use core::time::Duration;\n /// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n+///\n+/// > Note: mathematical operations like [`add`] may panic if the underlying\n+/// > structure cannot represent the new point in time.\n+///\n+/// [`add`]: Instant::add\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n@@ -174,6 +179,11 @@ pub struct Instant(time::Instant);\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time.\n+///\n+/// > Note: mathematical operations like [`add`] may panic if the underlying\n+/// > structure cannot represent the new point in time.\n+///\n+/// [`add`]: SystemTime::add\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);"}, {"sha": "7c12642da3551cb4a27447b3f6e9fd8d6910c38d", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -7,6 +7,8 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n ## [Non-breaking changes since the last major version]\n \n - `x.py check` needs opt-in to check tests (--all-targets) [#77473](https://github.com/rust-lang/rust/pull/77473)\n+- The default bootstrap profiles are now located at `bootstrap/defaults/config.$PROFILE.toml` (previously they were located at `bootstrap/defaults/config.toml.$PROFILE`) [#77558](https://github.com/rust-lang/rust/pull/77558)\n+\n \n ## [Version 2] - 2020-09-25\n "}, {"sha": "6265bbaf5c22c5af508cc71b091ffb6670c64469", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -574,7 +574,7 @@ impl Config {\n             include_path.push(\"src\");\n             include_path.push(\"bootstrap\");\n             include_path.push(\"defaults\");\n-            include_path.push(format!(\"config.toml.{}\", include));\n+            include_path.push(format!(\"config.{}.toml\", include));\n             let included_toml = get_toml(&include_path);\n             toml.merge(included_toml);\n         }"}, {"sha": "a9505922ca7fc9a81232ae8404320503f838bc6c", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=5ded394553296d56bb66e925d7001ab3271979ce", "previous_filename": "src/bootstrap/defaults/config.toml.codegen"}, {"sha": "4772de8a2cb22c27a40890009555f54a7ecda134", "filename": "src/bootstrap/defaults/config.compiler.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml?ref=5ded394553296d56bb66e925d7001ab3271979ce", "previous_filename": "src/bootstrap/defaults/config.toml.compiler"}, {"sha": "e4316f4d8644050ea15b0d803351b76874967bde", "filename": "src/bootstrap/defaults/config.library.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.library.toml?ref=5ded394553296d56bb66e925d7001ab3271979ce", "previous_filename": "src/bootstrap/defaults/config.toml.library"}, {"sha": "6647061d88fcbc99005ed446871d4ab2c420273c", "filename": "src/bootstrap/defaults/config.user.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.user.toml?ref=5ded394553296d56bb66e925d7001ab3271979ce", "previous_filename": "src/bootstrap/defaults/config.toml.user"}, {"sha": "8a77641fbfefb334f0f1c3843e5c86ae20faac15", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -20,7 +20,7 @@ pub fn setup(src_path: &Path, include_name: &str) {\n             file.display()\n         );\n         println!(\n-            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.toml.{}\",\n+            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.{}.toml\",\n             src_path.display(),\n             include_name\n         );\n@@ -36,7 +36,7 @@ pub fn setup(src_path: &Path, include_name: &str) {\n     t!(fs::write(path, settings));\n \n     let include_path =\n-        format!(\"{}/src/bootstrap/defaults/config.toml.{}\", src_path.display(), include_name);\n+        format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), include_name);\n     println!(\"`x.py` will now use the configuration at {}\", include_path);\n \n     let suggestions = match include_name {"}, {"sha": "8be9489c617507e28c6360645bf4c2e67b884058", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -2,7 +2,7 @@\n \n The features listed on this page fall outside the rest of the main categories.\n \n-## `#[cfg(doc)]`: Documenting platform-/feature-specific information\n+## `#[cfg(doc)]`: Documenting platform-specific or feature-specific information\n \n For conditional compilation, Rustdoc treats your crate the same way the compiler does. Only things\n from the host target are available (or from the given `--target` if present), and everything else is\n@@ -17,7 +17,7 @@ with other `#[cfg]` filters on it, you can write something like `#[cfg(any(windo\n This will preserve the item either when built normally on Windows, or when being documented\n anywhere.\n \n-Please note that this feature is not passed to doctests.\n+Please note that this `cfg` is not passed to doctests.\n \n Example:\n \n@@ -33,6 +33,40 @@ pub struct UnixToken;\n Here, the respective tokens can only be used by dependent crates on their respective platforms, but\n they will both appear in documentation.\n \n+### Interactions between platform-specific docs\n+\n+Rustdoc does not have a magic way to compile documentation 'as-if' you'd run it once for each\n+platform (such a magic wand has been called the ['holy grail of rustdoc'][#1998]). Instead,\n+it sees *all* of your code at once, the same way the Rust compiler would if you passed it\n+`--cfg doc`. However, Rustdoc has a trick up its sleeve to handle platform-specific code if it\n+*does* receive it.\n+\n+To document your crate, Rustdoc only needs to know the public signature of your functions.\n+In particular, it doesn't have to know how any of your functions are implemented, so it ignores\n+all type errors and name resolution errors with function bodies. Note that this does *not*\n+work for anything outside a function body: since Rustdoc documents your types, it has to\n+know what those types are! For example, this code will work regardless of the platform:\n+\n+<!-- `ignore` because doc-tests are run with `rustc`, not `rustdoc` -->\n+```ignore\n+pub fn f() {\n+    use std::os::windows::ffi::OsStrExt;\n+}\n+```\n+\n+but this will not, because the unknown type is part of the function signature:\n+\n+```ignore\n+pub fn f() -> std::os::windows::ffi::EncodeWide<'static> {\n+    unimplemented!()\n+}\n+```\n+\n+For a more realistic example of code this allows, see [the rustdoc test suite][realistic-async].\n+\n+[#1998]: https://github.com/rust-lang/rust/issues/1998\n+[realistic-async]: https://github.com/rust-lang/rust/blob/b146000e910ccd60bdcde89363cb6aa14ecc0d95/src/test/rustdoc-ui/error-in-impl-trait/realistic-async.rs\n+\n ## Add aliases for an item in documentation search\n \n This feature allows you to add alias(es) to an item when using the `rustdoc` search through the"}, {"sha": "16157a4b080f197fd200fddf4bd7efd8072ea2c9", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -43,28 +43,16 @@ plain text.\n These features operate by extending the `#[doc]` attribute, and thus can be caught by the compiler\n and enabled with a `#![feature(...)]` attribute in your crate.\n \n-### Documenting platform-/feature-specific information\n+### `#[doc(cfg)]`: Recording what platforms or features are required for code to be present\n \n-Because of the way Rustdoc documents a crate, the documentation it creates is specific to the target\n-rustc compiles for. Anything that's specific to any other target is dropped via `#[cfg]` attribute\n-processing early in the compilation process. However, Rustdoc has a trick up its sleeve to handle\n-platform-specific code if it *does* receive it.\n+You can use `#[doc(cfg(...))]` to tell Rustdoc exactly which platform items appear on.\n+This has two effects:\n \n-Because Rustdoc doesn't need to fully compile a crate to binary, it replaces function bodies with\n-`loop {}` to prevent having to process more than necessary. This means that any code within a\n-function that requires platform-specific pieces is ignored. Combined with a special attribute,\n-`#[doc(cfg(...))]`, you can tell Rustdoc exactly which platform something is supposed to run on,\n-ensuring that doctests are only run on the appropriate platforms.\n-\n-The `#[doc(cfg(...))]` attribute has another effect: When Rustdoc renders documentation for that\n-item, it will be accompanied by a banner explaining that the item is only available on certain\n-platforms.\n-\n-For Rustdoc to document an item, it needs to see it, regardless of what platform it's currently\n-running on. To aid this, Rustdoc sets the flag `#[cfg(doc)]` when running on your crate.\n-Combining this with the target platform of a given item allows it to appear when building your crate\n-normally on that platform, as well as when building documentation anywhere.\n+1. doctests will only run on the appropriate platforms, and\n+2. When Rustdoc renders documentation for that item, it will be accompanied by a banner explaining\n+   that the item is only available on certain platforms.\n \n+`#[doc(cfg)]` is intended to be used alongside [`#[cfg(doc)]`][cfg-doc].\n For example, `#[cfg(any(windows, doc))]` will preserve the item either on Windows or during the\n documentation process. Then, adding a new attribute `#[doc(cfg(windows))]` will tell Rustdoc that\n the item is supposed to be used on Windows. For example:\n@@ -81,6 +69,12 @@ pub struct WindowsToken;\n #[cfg(any(unix, doc))]\n #[doc(cfg(unix))]\n pub struct UnixToken;\n+\n+/// Token struct that is only available with the `serde` feature\n+#[cfg(feature = \"serde\")]\n+#[doc(cfg(feature = \"serde\"))]\n+#[derive(serde::Deserialize)]\n+pub struct SerdeToken;\n ```\n \n In this sample, the tokens will only appear on their respective platforms, but they will both appear\n@@ -90,6 +84,7 @@ in documentation.\n `#![feature(doc_cfg)]` feature gate. For more information, see [its chapter in the Unstable\n Book][unstable-doc-cfg] and [its tracking issue][issue-doc-cfg].\n \n+[cfg-doc]: ./advanced-features.md\n [unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n [issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781\n "}, {"sha": "c421fe49ef0a4897c9b035b04e5841976dc5a372", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -2,9 +2,7 @@ error: incorrect unicode escape sequence\n   --> $DIR/format-string-error-2.rs:77:20\n    |\n LL |     println!(\"\\x7B}\\u8 {\", 1);\n-   |                    ^^-\n-   |                      |\n-   |                      help: format of unicode escape sequences uses braces: `\\u{8}`\n+   |                    ^^^ help: format of unicode escape sequences uses braces: `\\u{8}`\n \n error: invalid format string: expected `'}'`, found `'a'`\n   --> $DIR/format-string-error-2.rs:5:5"}, {"sha": "f7e9b8013188573bac47038f2c8542275944bd64", "filename": "src/test/ui/hygiene/auxiliary/def-site-async-await.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fdef-site-async-await.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -0,0 +1,7 @@\n+// edition:2018\n+\n+extern crate opaque_hygiene;\n+\n+pub async fn serve() {\n+    opaque_hygiene::make_it!();\n+}"}, {"sha": "7730f91bd6a0378f73a89d3ed92eb0611603e149", "filename": "src/test/ui/hygiene/auxiliary/opaque-hygiene.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fauxiliary%2Fopaque-hygiene.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -0,0 +1,21 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro_quote)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, quote};\n+\n+#[proc_macro]\n+pub fn make_it(input: TokenStream) -> TokenStream {\n+    // `quote!` applies def-site hygiene\n+    quote! {\n+        trait Foo {\n+            fn my_fn(&self) {}\n+        }\n+\n+        impl<T> Foo for T {}\n+        \"a\".my_fn();\n+    }\n+}"}, {"sha": "2af60ff6f53b6640ce14a4bb5547a3d76745d31d", "filename": "src/test/ui/hygiene/issue-77523-def-site-async-await.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-77523-def-site-async-await.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+// aux-build:opaque-hygiene.rs\n+// aux-build:def-site-async-await.rs\n+\n+// Regression test for issue #77523\n+// Tests that we don't ICE when an unusual combination\n+// of def-site hygiene and cross-crate monomorphization occurs.\n+\n+extern crate def_site_async_await;\n+\n+use std::future::Future;\n+\n+fn mk_ctxt() -> std::task::Context<'static> {\n+    panic!()\n+}\n+\n+fn main() {\n+    Box::pin(def_site_async_await::serve()).as_mut().poll(&mut mk_ctxt());\n+}"}, {"sha": "8e25227b59e631769aee9020aa6ffc9fb45ba90b", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -0,0 +1,49 @@\n+// This test is checking that you cannot override a `forbid` by adding in other\n+// attributes later in the same scope. (We already ensure that you cannot\n+// override it in nested scopes).\n+\n+// If you turn off deduplicate diagnostics (which rustc turns on by default but\n+// compiletest turns off when it runs ui tests), then the errors are\n+// (unfortunately) repeated here because the checking is done as we read in the\n+// errors, and curretly that happens two or three different times, depending on\n+// compiler flags.\n+//\n+// I decided avoiding the redundant output was not worth the time in engineering\n+// effort for bug like this, which 1. end users are unlikely to run into in the\n+// first place, and 2. they won't see the redundant output anyway.\n+\n+// compile-flags: -Z deduplicate-diagnostics=yes\n+\n+fn forbid_first(num: i32) -> i32 {\n+    #![forbid(unused)]\n+    #![deny(unused)]\n+    //~^ ERROR: deny(unused) incompatible with previous forbid in same scope [E0453]\n+    #![warn(unused)]\n+    //~^ ERROR: warn(unused) incompatible with previous forbid in same scope [E0453]\n+    #![allow(unused)]\n+    //~^ ERROR: allow(unused) incompatible with previous forbid in same scope [E0453]\n+\n+    num * num\n+}\n+\n+fn forbid_last(num: i32) -> i32 {\n+    #![deny(unused)]\n+    #![warn(unused)]\n+    #![allow(unused)]\n+    #![forbid(unused)]\n+\n+    num * num\n+}\n+\n+fn forbid_multiple(num: i32) -> i32 {\n+    #![forbid(unused)]\n+    #![forbid(unused)]\n+\n+    num * num\n+}\n+\n+fn main() {\n+    forbid_first(10);\n+    forbid_last(10);\n+    forbid_multiple(10);\n+}"}, {"sha": "3951c511bf432eff079e221f105568e07752460f", "filename": "src/test/ui/lint/issue-70819-dont-override-forbid-in-same-scope.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-70819-dont-override-forbid-in-same-scope.stderr?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -0,0 +1,29 @@\n+error[E0453]: deny(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:19:13\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+LL |     #![deny(unused)]\n+   |             ^^^^^^\n+\n+error[E0453]: warn(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:21:13\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+...\n+LL |     #![warn(unused)]\n+   |             ^^^^^^\n+\n+error[E0453]: allow(unused) incompatible with previous forbid in same scope\n+  --> $DIR/issue-70819-dont-override-forbid-in-same-scope.rs:23:14\n+   |\n+LL |     #![forbid(unused)]\n+   |               ------ `forbid` level set here\n+...\n+LL |     #![allow(unused)]\n+   |              ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "8c924ad0330e9e8f92ab01555414ac3f3ce5fb71", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -80,9 +80,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:32:14\n    |\n LL |     let _ = \"\\u8f\";\n-   |              ^^--\n-   |                |\n-   |                help: format of unicode escape sequences uses braces: `\\u{8f}`\n+   |              ^^^-\n+   |              |\n+   |              help: format of unicode escape sequences uses braces: `\\u{8f}`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "a547d09d04822f08e2fb3bb41ea22fe75ed20b2f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -8,25 +8,25 @@ extern \"C\" {\n         #[allow(unused_mut)] a: i32,\n         #[cfg(something)] b: i32,\n         #[cfg_attr(something, cfg(nothing))] c: i32,\n-        #[deny(unused_mut)] d: i32,\n-        #[forbid(unused_mut)] #[warn(unused_mut)] ...\n+        #[forbid(unused_mut)] d: i32,\n+        #[deny(unused_mut)] #[warn(unused_mut)] ...\n     );\n }\n \n type FnType = fn(\n     #[allow(unused_mut)] a: i32,\n     #[cfg(something)] b: i32,\n     #[cfg_attr(something, cfg(nothing))] c: i32,\n-    #[deny(unused_mut)] d: i32,\n-    #[forbid(unused_mut)] #[warn(unused_mut)] e: i32\n+    #[forbid(unused_mut)] d: i32,\n+    #[deny(unused_mut)] #[warn(unused_mut)] e: i32\n );\n \n pub fn foo(\n     #[allow(unused_mut)] a: i32,\n     #[cfg(something)] b: i32,\n     #[cfg_attr(something, cfg(nothing))] c: i32,\n-    #[deny(unused_mut)] d: i32,\n-    #[forbid(unused_mut)] #[warn(unused_mut)] _e: i32\n+    #[forbid(unused_mut)] d: i32,\n+    #[deny(unused_mut)] #[warn(unused_mut)] _e: i32\n ) {}\n \n // self"}, {"sha": "062c9bd2d9e6c9eb83770ec5c342a4d48bd1da46", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -155,7 +155,7 @@ pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n-        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::from(s.as_slice())),\n+        LitKind::ByteStr(ref s) => Constant::Binary(Lrc::clone(s)),\n         LitKind::Char(c) => Constant::Char(c),\n         LitKind::Int(n, _) => Constant::Int(n),\n         LitKind::Float(ref is, LitFloatType::Suffixed(fty)) => match fty {"}, {"sha": "32685038067d6e257f4d9a61f16c2c7bcbe47627", "filename": "src/tools/clippy/tests/ui/attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.rs?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -3,7 +3,6 @@\n // Test that the whole restriction group is not enabled\n #![warn(clippy::restriction)]\n #![deny(clippy::restriction)]\n-#![forbid(clippy::restriction)]\n #![allow(clippy::missing_docs_in_private_items, clippy::panic, clippy::unreachable)]\n \n #[inline(always)]"}, {"sha": "4324984dd60eb854d431d593729b7b5807938c39", "filename": "src/tools/clippy/tests/ui/attrs.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fattrs.stderr?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -1,21 +1,21 @@\n error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n-  --> $DIR/attrs.rs:9:1\n+  --> $DIR/attrs.rs:8:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:29:14\n+  --> $DIR/attrs.rs:28:14\n    |\n LL | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n-  --> $DIR/attrs.rs:32:14\n+  --> $DIR/attrs.rs:31:14\n    |\n LL | #[deprecated(since = \"1\")]\n    |              ^^^^^^^^^^^\n@@ -37,13 +37,5 @@ LL | #![deny(clippy::restriction)]\n    |\n    = help: try enabling only the lints you really need\n \n-error: restriction lints are not meant to be all enabled\n-  --> $DIR/attrs.rs:6:11\n-   |\n-LL | #![forbid(clippy::restriction)]\n-   |           ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try enabling only the lints you really need\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "8b7b536bcbf3c00eadafdae75bd13b51cd88aff1", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ded394553296d56bb66e925d7001ab3271979ce/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ded394553296d56bb66e925d7001ab3271979ce/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=5ded394553296d56bb66e925d7001ab3271979ce", "patch": "@@ -3,6 +3,7 @@ allow-unauthenticated = [\n     \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\", \"F-*\",\n     \"D-*\",\n     \"requires-nightly\",\n+    \"regression-*\",\n     # I-* without I-nominated\n     \"I-*\", \"!I-nominated\",\n     \"AsyncAwait-OnDeck\","}]}