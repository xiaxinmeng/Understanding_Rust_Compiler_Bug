{"sha": "bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZThhOTFmMzRlNjNhNGVkODdhNmQ2MzUxYmY2N2E4MjMwNmFmYmQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-07-26T00:10:05Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-07-26T00:26:12Z"}, "message": "std::ops::Try impl for std::task::Poll", "tree": {"sha": "d861034f58c0a2f1b6e22d005ed777f6fb7c50c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d861034f58c0a2f1b6e22d005ed777f6fb7c50c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "html_url": "https://github.com/rust-lang/rust/commit/bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bce8a91f34e63a4ed87a6d6351bf67a82306afbd/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fefe81605d6111faa8dbb3635ab2c51d59de740a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefe81605d6111faa8dbb3635ab2c51d59de740a", "html_url": "https://github.com/rust-lang/rust/commit/fefe81605d6111faa8dbb3635ab2c51d59de740a"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "fb027efc6dca0c1a269c0bd15f223aa5e3389252", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bce8a91f34e63a4ed87a6d6351bf67a82306afbd/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce8a91f34e63a4ed87a6d6351bf67a82306afbd/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "patch": "@@ -12,6 +12,9 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n+use ops::Try;\n+use result::Result;\n+\n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n@@ -39,6 +42,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Ready`\n+    #[inline]\n     pub fn is_ready(&self) -> bool {\n         match *self {\n             Poll::Ready(_) => true,\n@@ -47,6 +51,7 @@ impl<T> Poll<T> {\n     }\n \n     /// Returns whether this is `Poll::Pending`\n+    #[inline]\n     pub fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n@@ -81,3 +86,52 @@ impl<T> From<T> for Poll<T> {\n         Poll::Ready(t)\n     }\n }\n+\n+impl<T, E> Try for Poll<Result<T, E>> {\n+    type Ok = Poll<T>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Ok(x)) => Ok(Poll::Ready(x)),\n+            Poll::Ready(Err(e)) => Err(e),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Err(e))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(Ok)\n+    }\n+}\n+\n+impl<T, E> Try for Poll<Option<Result<T, E>>> {\n+    type Ok = Poll<Option<T>>;\n+    type Error = E;\n+\n+    #[inline]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        match self {\n+            Poll::Ready(Some(Ok(x))) => Ok(Poll::Ready(Some(x))),\n+            Poll::Ready(Some(Err(e))) => Err(e),\n+            Poll::Ready(None) => Ok(Poll::Ready(None)),\n+            Poll::Pending => Ok(Poll::Pending),\n+        }\n+    }\n+\n+    #[inline]\n+    fn from_error(e: Self::Error) -> Self {\n+        Poll::Ready(Some(Err(e)))\n+    }\n+\n+    #[inline]\n+    fn from_ok(x: Self::Ok) -> Self {\n+        x.map(|x| x.map(Ok))\n+    }\n+}"}, {"sha": "0cb058c2b0b6e03f8ca50116dfb08d9a2f341990", "filename": "src/test/ui/try-poll.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bce8a91f34e63a4ed87a6d6351bf67a82306afbd/src%2Ftest%2Fui%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bce8a91f34e63a4ed87a6d6351bf67a82306afbd/src%2Ftest%2Fui%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-poll.rs?ref=bce8a91f34e63a4ed87a6d6351bf67a82306afbd", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![allow(dead_code, unused)]\n+#![feature(futures_api)]\n+\n+use std::task::Poll;\n+\n+struct K;\n+struct E;\n+\n+fn as_result() -> Result<(), E> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Ok(())\n+}\n+\n+fn as_poll_result() -> Poll<Result<(), E>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Ok(()))\n+}\n+\n+fn as_poll_option_result() -> Poll<Option<Result<(), E>>> {\n+    // From Result\n+    let K = Ok::<K, E>(K)?;\n+\n+    // From Poll<Result>\n+    let _: Poll<K> = Poll::Ready::<Result<K, E>>(Ok(K))?;\n+\n+    // From Poll<Option<Result>>\n+    let _: Poll<Option<K>> = Poll::Ready::<Option<Result<K, E>>>(None)?;\n+\n+    Poll::Ready(Some(Ok(())))\n+}\n+\n+fn main() {\n+}"}]}