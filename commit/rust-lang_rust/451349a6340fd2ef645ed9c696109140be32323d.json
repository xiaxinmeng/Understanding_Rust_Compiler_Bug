{"sha": "451349a6340fd2ef645ed9c696109140be32323d", "node_id": "C_kwDOAAsO6NoAKDQ1MTM0OWE2MzQwZmQyZWY2NDVlZDljNjk2MTA5MTQwYmUzMjMyM2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-30T20:50:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T20:50:58Z"}, "message": "Rollup merge of #99889 - compiler-errors:cleanup-ti, r=cjgillot\n\nRemove `parent_pat` from `TopInfo`\n\nWe can get the parent pat from the hir map.", "tree": {"sha": "39da698636f965f578df8c26215317f6500e66b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39da698636f965f578df8c26215317f6500e66b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451349a6340fd2ef645ed9c696109140be32323d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5ZmyCRBK7hj4Ov3rIwAAcaAIAB2P6YinwtmzCfeQY8w7iFpg\nCTKXBFhKC9ymATTPmhl5iG9B5GNmeqps8XtwTfnWy8c/n0XiYZrSBLD7XS0zq08l\ns4T4McH1jSrBTNoAS/v7PEkh+k3pIwnlgSjeSEPmBYr1ZiBjgZh26FN8pUeUbiRy\nzGwk4yzu0E0Dt0tmjf8HjLu4+2Fj9MMXsOdh9cr6StN4xthlZ2T0CeUaAm4ZJ9S6\nbqGtsVOThuava2nP+nFN3gMR/zUH6U/dYKj1mcO8uXrxMX6pntkUPE6uvlRXof4s\ns6JcdzcotWVdwNijZx0LNuwnAawR5dp+Dk+agsgO2tBvetPTg+N6W0Bq1U8TXjs=\n=tv55\n-----END PGP SIGNATURE-----\n", "payload": "tree 39da698636f965f578df8c26215317f6500e66b0\nparent 852bf84c7baae184de43e9f3a7f7011c679d1aa7\nparent 940ec1e51725a63c80f42f02735e87a12c9c5edb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659214258 +0200\ncommitter GitHub <noreply@github.com> 1659214258 +0200\n\nRollup merge of #99889 - compiler-errors:cleanup-ti, r=cjgillot\n\nRemove `parent_pat` from `TopInfo`\n\nWe can get the parent pat from the hir map.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451349a6340fd2ef645ed9c696109140be32323d", "html_url": "https://github.com/rust-lang/rust/commit/451349a6340fd2ef645ed9c696109140be32323d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451349a6340fd2ef645ed9c696109140be32323d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852bf84c7baae184de43e9f3a7f7011c679d1aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/852bf84c7baae184de43e9f3a7f7011c679d1aa7", "html_url": "https://github.com/rust-lang/rust/commit/852bf84c7baae184de43e9f3a7f7011c679d1aa7"}, {"sha": "940ec1e51725a63c80f42f02735e87a12c9c5edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/940ec1e51725a63c80f42f02735e87a12c9c5edb", "html_url": "https://github.com/rust-lang/rust/commit/940ec1e51725a63c80f42f02735e87a12c9c5edb"}], "stats": {"total": 54, "additions": 18, "deletions": 36}, "files": [{"sha": "837c323553c60e698349a6023a7162fae81824b7", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/451349a6340fd2ef645ed9c696109140be32323d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451349a6340fd2ef645ed9c696109140be32323d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=451349a6340fd2ef645ed9c696109140be32323d", "patch": "@@ -72,22 +72,6 @@ struct TopInfo<'tcx> {\n     ///              found type `std::result::Result<_, _>`\n     /// ```\n     span: Option<Span>,\n-    /// This refers to the parent pattern. Used to provide extra diagnostic information on errors.\n-    /// ```text\n-    /// error[E0308]: mismatched types\n-    ///   --> $DIR/const-in-struct-pat.rs:8:17\n-    ///   |\n-    /// L | struct f;\n-    ///   | --------- unit struct defined here\n-    /// ...\n-    /// L |     let Thing { f } = t;\n-    ///   |                 ^\n-    ///   |                 |\n-    ///   |                 expected struct `std::string::String`, found struct `f`\n-    ///   |                 `f` is interpreted as a unit struct, not a new binding\n-    ///   |                 help: bind the struct field to a different name instead: `f: other_f`\n-    /// ```\n-    parent_pat: Option<&'tcx Pat<'tcx>>,\n }\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n@@ -147,7 +131,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Option<Span>,\n         origin_expr: bool,\n     ) {\n-        let info = TopInfo { expected, origin_expr, span, parent_pat: None };\n+        let info = TopInfo { expected, origin_expr, span };\n         self.check_pat(pat, expected, INITIAL_BM, info);\n     }\n \n@@ -190,9 +174,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n             PatKind::Or(pats) => {\n-                let parent_pat = Some(pat);\n                 for pat in pats {\n-                    self.check_pat(pat, expected, def_bm, TopInfo { parent_pat, ..ti });\n+                    self.check_pat(pat, expected, def_bm, ti);\n                 }\n                 expected\n             }\n@@ -621,7 +604,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let Some(p) = sub {\n-            self.check_pat(p, expected, def_bm, TopInfo { parent_pat: Some(pat), ..ti });\n+            self.check_pat(p, expected, def_bm, ti);\n         }\n \n         local_ty\n@@ -782,7 +765,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let Some((variant, pat_ty)) = self.check_struct_path(qpath, pat.hir_id) else {\n             let err = self.tcx.ty_error();\n             for field in fields {\n-                let ti = TopInfo { parent_pat: Some(pat), ..ti };\n+                let ti = ti;\n                 self.check_pat(field.pat, err, def_bm, ti);\n             }\n             return err;\n@@ -799,11 +782,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_pat_path<'b>(\n+    fn check_pat_path(\n         &self,\n-        pat: &Pat<'_>,\n+        pat: &Pat<'tcx>,\n         qpath: &hir::QPath<'_>,\n-        path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n+        path_resolution: (Res, Option<Ty<'tcx>>, &'tcx [hir::PathSegment<'tcx>]),\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n@@ -837,7 +820,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(err) =\n             self.demand_suptype_with_origin(&self.pattern_cause(ti, pat.span), expected, pat_ty)\n         {\n-            self.emit_bad_pat_path(err, pat.span, res, pat_res, pat_ty, segments, ti.parent_pat);\n+            self.emit_bad_pat_path(err, pat, res, pat_res, pat_ty, segments);\n         }\n         pat_ty\n     }\n@@ -876,16 +859,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn emit_bad_pat_path<'b>(\n+    fn emit_bad_pat_path(\n         &self,\n         mut e: DiagnosticBuilder<'_, ErrorGuaranteed>,\n-        pat_span: Span,\n+        pat: &hir::Pat<'tcx>,\n         res: Res,\n         pat_res: Res,\n         pat_ty: Ty<'tcx>,\n-        segments: &'b [hir::PathSegment<'b>],\n-        parent_pat: Option<&Pat<'_>>,\n+        segments: &'tcx [hir::PathSegment<'tcx>],\n     ) {\n+        let pat_span = pat.span;\n         if let Some(span) = self.tcx.hir().res_span(pat_res) {\n             e.span_label(span, &format!(\"{} defined here\", res.descr()));\n             if let [hir::PathSegment { ident, .. }] = &*segments {\n@@ -898,8 +881,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                match parent_pat {\n-                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => {\n+                match self.tcx.hir().get(self.tcx.hir().get_parent_node(pat.hir_id)) {\n+                    hir::Node::Pat(Pat { kind: hir::PatKind::Struct(..), .. }) => {\n                         e.span_suggestion_verbose(\n                             ident.span.shrink_to_hi(),\n                             \"bind the struct field to a different name instead\",\n@@ -960,9 +943,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let on_error = || {\n-            let parent_pat = Some(pat);\n             for pat in subpats {\n-                self.check_pat(pat, tcx.ty_error(), def_bm, TopInfo { parent_pat, ..ti });\n+                self.check_pat(pat, tcx.ty_error(), def_bm, ti);\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n@@ -1046,7 +1028,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(variant.fields.len(), ddpos) {\n                 let field_ty = self.field_ty(subpat.span, &variant.fields[i], substs);\n-                self.check_pat(subpat, field_ty, def_bm, TopInfo { parent_pat: Some(pat), ..ti });\n+                self.check_pat(subpat, field_ty, def_bm, ti);\n \n                 self.tcx.check_stability(\n                     variant.fields[i].did,\n@@ -1324,7 +1306,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             };\n \n-            self.check_pat(field.pat, field_ty, def_bm, TopInfo { parent_pat: Some(pat), ..ti });\n+            self.check_pat(field.pat, field_ty, def_bm, ti);\n         }\n \n         let mut unmentioned_fields = variant\n@@ -1936,7 +1918,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let err = tcx.ty_error();\n             (err, err)\n         };\n-        self.check_pat(inner, inner_ty, def_bm, TopInfo { parent_pat: Some(pat), ..ti });\n+        self.check_pat(inner, inner_ty, def_bm, ti);\n         rptr_ty\n     }\n "}]}