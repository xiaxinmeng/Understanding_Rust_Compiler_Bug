{"sha": "99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Y2MzNWRhZWZmNDUyOTdlZTMwNmVjODdjNWY0YmZlNGY1N2FkZjQ=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-07-22T20:21:06Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-03T18:29:24Z"}, "message": "update polonius-engine to 0.13\n\nand update fact generation to the new relation names", "tree": {"sha": "436b82100dfaa8a9311ed7a16f4683a913979481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/436b82100dfaa8a9311ed7a16f4683a913979481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "html_url": "https://github.com/rust-lang/rust/commit/99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c", "html_url": "https://github.com/rust-lang/rust/commit/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "4c50dc50136faac43e0e714d6b01907e4e5a3763", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -2618,9 +2618,9 @@ checksum = \"d36492546b6af1463394d46f0c834346f31548646f6ba10849802c9c9a27ac33\"\n \n [[package]]\n name = \"polonius-engine\"\n-version = \"0.12.1\"\n+version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ef2558a4b464e185b36ee08a2937ebb62ea5464c38856cfb1465c97cb38db52d\"\n+checksum = \"c4e8e505342045d397d0b6674dcb82d6faf5cf40484d30eeb88fc82ef14e903f\"\n dependencies = [\n  \"datafrog\",\n  \"log\","}, {"sha": "2403ce2d24f559bc3bc3205d955e704fc28fa283", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -11,7 +11,7 @@ rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.1\"\n-polonius-engine = \"0.12.0\"\n+polonius-engine = \"0.13.0\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "7656cf38cc14caf0280eb60e9d8873db7d28e467", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -12,7 +12,7 @@ rustc_graphviz = { path = \"../rustc_graphviz\" }\n gsgdt = \"0.1.2\"\n itertools = \"0.9\"\n tracing = \"0.1\"\n-polonius-engine = \"0.12.0\"\n+polonius-engine = \"0.13.0\"\n regex = \"1\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "c84928523d9d6106a997d3a44e23c2d1a23f458e", "filename": "compiler/rustc_mir/src/borrow_check/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fconstraint_generation.rs?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -224,7 +224,7 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n \n                             if places_conflict {\n                                 let location_index = self.location_table.mid_index(location);\n-                                all_facts.killed.push((borrow_index, location_index));\n+                                all_facts.loan_killed_at.push((borrow_index, location_index));\n                             }\n                         }\n                     }\n@@ -243,10 +243,10 @@ fn record_killed_borrows_for_local(\n     location: Location,\n ) {\n     if let Some(borrow_indices) = borrow_set.local_map.get(&local) {\n-        all_facts.killed.reserve(borrow_indices.len());\n+        all_facts.loan_killed_at.reserve(borrow_indices.len());\n         for &borrow_index in borrow_indices {\n             let location_index = location_table.mid_index(location);\n-            all_facts.killed.push((borrow_index, location_index));\n+            all_facts.loan_killed_at.push((borrow_index, location_index));\n         }\n     }\n }"}, {"sha": "bff8dab404903488ad0e1104b095e69c37193782", "filename": "compiler/rustc_mir/src/borrow_check/facts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ffacts.rs?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -64,13 +64,12 @@ impl AllFactsExt for AllFacts {\n         }\n         write_facts_to_path! {\n             wr.write_facts_to_path(self.[\n-                borrow_region,\n+                loan_issued_at,\n                 universal_region,\n-                placeholder,\n                 cfg_edge,\n-                killed,\n-                outlives,\n-                invalidates,\n+                loan_killed_at,\n+                subset_base,\n+                loan_invalidated_at,\n                 var_used_at,\n                 var_defined_at,\n                 var_dropped_at,\n@@ -81,7 +80,8 @@ impl AllFactsExt for AllFacts {\n                 path_assigned_at_base,\n                 path_moved_at_base,\n                 path_accessed_at_base,\n-                known_subset,\n+                known_placeholder_subset,\n+                placeholder,\n             ])\n         }\n         Ok(())"}, {"sha": "b83a427f4757475e80d00ec88afc03d4983b21e0", "filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Finvalidation.rs?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -179,7 +179,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let resume = self.location_table.start_index(resume.start_location());\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n-                        self.all_facts.invalidates.push((resume, i));\n+                        self.all_facts.loan_invalidated_at.push((resume, i));\n                     }\n                 }\n \n@@ -191,7 +191,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 let start = self.location_table.start_index(location);\n                 for (i, data) in borrow_set.iter_enumerated() {\n                     if borrow_of_local_data(data.borrowed_place) {\n-                        self.all_facts.invalidates.push((start, i));\n+                        self.all_facts.loan_invalidated_at.push((start, i));\n                     }\n                 }\n             }\n@@ -420,26 +420,26 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n \n                         // Unique and mutable borrows are invalidated by reads from any\n                         // involved path\n-                        this.generate_invalidates(borrow_index, location);\n+                        this.emit_loan_invalidated_at(borrow_index, location);\n                     }\n \n                     (Reservation(_) | Activation(_, _) | Write(_), _) => {\n                         // unique or mutable borrows are invalidated by writes.\n                         // Reservations count as writes since we need to check\n                         // that activating the borrow will be OK\n                         // FIXME(bob_twinkles) is this actually the right thing to do?\n-                        this.generate_invalidates(borrow_index, location);\n+                        this.emit_loan_invalidated_at(borrow_index, location);\n                     }\n                 }\n                 Control::Continue\n             },\n         );\n     }\n \n-    /// Generates a new `invalidates(L, B)` fact.\n-    fn generate_invalidates(&mut self, b: BorrowIndex, l: Location) {\n+    /// Generates a new `loan_invalidated_at(L, B)` fact.\n+    fn emit_loan_invalidated_at(&mut self, b: BorrowIndex, l: Location) {\n         let lidx = self.location_table.start_index(l);\n-        self.all_facts.invalidates.push((lidx, b));\n+        self.all_facts.loan_invalidated_at.push((lidx, b));\n     }\n \n     fn check_activations(&mut self, location: Location) {"}, {"sha": "95854b146a998d97ff5532916035342db342723d", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -216,14 +216,15 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         }\n \n         // 2: the universal region relations `outlives` constraints are emitted as\n-        //  `known_subset` facts.\n+        //  `known_placeholder_subset` facts.\n         for (fr1, fr2) in universal_region_relations.known_outlives() {\n             if fr1 != fr2 {\n                 debug!(\n-                    \"compute_regions: emitting polonius `known_subset` fr1={:?}, fr2={:?}\",\n+                    \"compute_regions: emitting polonius `known_placeholder_subset` \\\n+                     fr1={:?}, fr2={:?}\",\n                     fr1, fr2\n                 );\n-                all_facts.known_subset.push((*fr1, *fr2));\n+                all_facts.known_placeholder_subset.push((*fr1, *fr2));\n             }\n         }\n     }"}, {"sha": "76732c5c5ce3f0198644dd709a591a3c9bdebc59", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99cc35daeff45297ee306ec87c5f4bfe4f57adf4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=99cc35daeff45297ee306ec87c5f4bfe4f57adf4", "patch": "@@ -272,7 +272,7 @@ fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {\n     if let Some(facts) = cx.all_facts {\n         let _prof_timer = typeck.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n         let location_table = cx.location_table;\n-        facts.outlives.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(\n+        facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(\n             |constraint: &OutlivesConstraint<'_>| {\n                 if let Some(from_location) = constraint.locations.from_location() {\n                     Either::Left(iter::once((\n@@ -2461,7 +2461,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =\n             self.borrowck_context;\n \n-        // In Polonius mode, we also push a `borrow_region` fact\n+        // In Polonius mode, we also push a `loan_issued_at` fact\n         // linking the loan to the region (in some cases, though,\n         // there is no loan associated with this borrow expression --\n         // that occurs when we are borrowing an unsafe place, for\n@@ -2470,7 +2470,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             let _prof_timer = self.infcx.tcx.prof.generic_activity(\"polonius_fact_generation\");\n             if let Some(borrow_index) = borrow_set.get_index_of(&location) {\n                 let region_vid = borrow_region.to_region_vid();\n-                all_facts.borrow_region.push((\n+                all_facts.loan_issued_at.push((\n                     region_vid,\n                     borrow_index,\n                     location_table.mid_index(location),"}]}