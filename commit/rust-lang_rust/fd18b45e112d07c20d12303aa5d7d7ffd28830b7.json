{"sha": "fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "node_id": "C_kwDOAAsO6NoAKGZkMThiNDVlMTEyZDA3YzIwZDEyMzAzYWE1ZDdkN2ZmZDI4ODMwYjc", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-12-02T17:17:32Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2021-12-03T01:31:38Z"}, "message": "Update passes with new interface", "tree": {"sha": "539aa8d26fb7341c8f5f989b44bf831570da82c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/539aa8d26fb7341c8f5f989b44bf831570da82c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "html_url": "https://github.com/rust-lang/rust/commit/fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a501b131ae99cb139b0843125f27d548b4cd1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a501b131ae99cb139b0843125f27d548b4cd1b", "html_url": "https://github.com/rust-lang/rust/commit/c1a501b131ae99cb139b0843125f27d548b4cd1b"}], "stats": {"total": 239, "additions": 141, "deletions": 98}, "files": [{"sha": "3c06074a1b33f3444135479ead69243299b626cc", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -41,6 +41,10 @@ pub struct PromoteTemps<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::ConstPromotion)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         //"}, {"sha": "1746d5ee38b926808fa9b04fb2c1bff079c2fb10", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -20,6 +20,7 @@ use crate::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n \n pub struct SanityCheck;\n \n+// FIXME: This should be a `MirLint`, but it needs to be moved back to `rustc_mir_transform` first.\n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         use crate::has_rustc_mir_with;"}, {"sha": "84ae2a2fbd094efcfdc0053bfebee2344e672fbf", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -58,11 +58,11 @@ fn may_be_reference(ty: Ty<'tcx>) -> bool {\n }\n \n impl<'tcx> MirPass<'tcx> for AddRetag {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.debugging_opts.mir_emit_retag\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // We need an `AllCallEdges` pass before we can do any work.\n         super::add_call_guards::AllCallEdges.run_pass(tcx, body);\n "}, {"sha": "6f0d03068f566aa4b4b742bef3ba0fb4bea089ce", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -6,12 +6,12 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::CONST_ITEM_MUTATION;\n use rustc_span::def_id::DefId;\n \n-use crate::MirPass;\n+use crate::MirLint;\n \n pub struct CheckConstItemMutation;\n \n-impl<'tcx> MirPass<'tcx> for CheckConstItemMutation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for CheckConstItemMutation {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let mut checker = ConstMutationChecker { body, tcx, target_local: None };\n         checker.visit_body(&body);\n     }"}, {"sha": "31d547103095f7f6e9fe2e2b73cbf70facbeee5b", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -7,16 +7,16 @@ use rustc_session::lint::builtin::UNALIGNED_REFERENCES;\n use rustc_span::symbol::sym;\n \n use crate::util;\n-use crate::MirPass;\n+use crate::MirLint;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { unsafe_derive_on_repr_packed, ..*providers };\n }\n \n pub struct CheckPackedRef;\n \n-impl<'tcx> MirPass<'tcx> for CheckPackedRef {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for CheckPackedRef {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let param_env = tcx.param_env(body.source.def_id());\n         let source_info = SourceInfo::outermost(body.span);\n         let mut checker = PackedRefChecker { body, tcx, param_env, source_info };"}, {"sha": "3613fa4560d6c1ebbe9a947858977c317cce259f", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -15,11 +15,11 @@ use rustc_index::{bit_set::BitSet, vec::IndexVec};\n pub struct ConstDebugInfo;\n \n impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() > 0\n+    }\n \n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running ConstDebugInfo on {:?}\", body.source);\n \n         for (local, constant) in find_optimization_oportunities(body) {"}, {"sha": "beb158dd25828da7aa54f748d6ac1786f13a69ac", "filename": "compiler/rustc_mir_transform/src/const_goto.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_goto.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -27,10 +27,11 @@ use super::simplify::{simplify_cfg, simplify_locals};\n pub struct ConstGoto;\n \n impl<'tcx> MirPass<'tcx> for ConstGoto {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n         trace!(\"Running ConstGoto on {:?}\", body.source);\n         let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         let mut opt_finder ="}, {"sha": "1fb69f081e5a8cc4f037061a103f6757606f5b98", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -62,6 +62,13 @@ macro_rules! throw_machine_stop_str {\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n+    fn is_enabled(&self, _sess: &rustc_session::Session) -> bool {\n+        // FIXME(#70073): Unlike the other passes in \"optimizations\", this one emits errors, so it\n+        // runs even when MIR optimizations are disabled. We should separate the lint out from the\n+        // transform and move the lint as early in the pipeline as possible.\n+        true\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // will be evaluated by miri and produce its errors there\n         if body.source.promoted.is_some() {"}, {"sha": "bba188bd3935075a77b6788c25f0c69c39119fec", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -49,6 +49,10 @@ impl Error {\n pub struct InstrumentCoverage;\n \n impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.instrument_coverage()\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, mir_body: &mut mir::Body<'tcx>) {\n         let mir_source = mir_body.source;\n "}, {"sha": "993c8eef711ce66224308c807c259abb2a5930c9", "filename": "compiler/rustc_mir_transform/src/deduplicate_blocks.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduplicate_blocks.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -15,10 +15,11 @@ use super::simplify::simplify_cfg;\n pub struct DeduplicateBlocks;\n \n impl<'tcx> MirPass<'tcx> for DeduplicateBlocks {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n         debug!(\"Running DeduplicateBlocks on `{:?}`\", body.source);\n         let duplicates = find_duplicates(body);\n         let has_opts_to_apply = !duplicates.is_empty();"}, {"sha": "bee15f8c982146ea27fb7f855bcc8bb2aee879a7", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -124,18 +124,15 @@ const MAX_BLOCKS: usize = 250;\n pub struct DestinationPropagation;\n \n impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        //  FIXME(#79191, #82678)\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n-\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        //  FIXME(#79191, #82678): This is unsound.\n+        //\n         // Only run at mir-opt-level=3 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n \n         let candidates = find_candidates(tcx, body);"}, {"sha": "62e82aca262073cb99b17bda75865d42569d6ab7", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -25,16 +25,14 @@ use super::simplify::simplify_cfg;\n pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         //  FIXME(#78496)\n-        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n-            return;\n-        }\n+        sess.opts.debugging_opts.unsound_mir_opts && sess.mir_opt_level() >= 3\n+    }\n \n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);\n+\n         // we are only interested in this bb if the terminator is a switchInt\n         let bbs_with_switch =\n             body.basic_blocks().iter_enumerated().filter(|(_, bb)| is_switch(bb.terminator()));"}, {"sha": "af13c734e5b9a399720552ffd3fcc4e88f675403", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -19,6 +19,10 @@ use std::fmt;\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::DropLowering)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", body.source, body.span);\n "}, {"sha": "c05dc39afc47e329cae2c583bd19baadba8d8eaa", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -11,12 +11,12 @@ use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n \n-use crate::MirPass;\n+use crate::MirLint;\n \n pub struct FunctionItemReferences;\n \n-impl<'tcx> MirPass<'tcx> for FunctionItemReferences {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+impl<'tcx> MirLint<'tcx> for FunctionItemReferences {\n+    fn run_lint(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n         let mut checker = FunctionItemRefChecker { tcx, body };\n         checker.visit_body(&body);\n     }"}, {"sha": "5376855035e71d3f1f35bd78ba0dfd2edac39e1a", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -1232,6 +1232,10 @@ fn create_cases<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n+    fn phase_change(&self) -> Option<MirPhase> {\n+        Some(MirPhase::GeneratorLowering)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty() {\n             yield_ty"}, {"sha": "62686b0b7185498af9683bba56dd24013bf5f44d", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -37,21 +37,16 @@ struct CallSite<'tcx> {\n     source_info: SourceInfo,\n }\n \n-/// Returns true if MIR inlining is enabled in the current compilation session.\n-crate fn is_enabled(tcx: TyCtxt<'_>) -> bool {\n-    if let Some(enabled) = tcx.sess.opts.debugging_opts.inline_mir {\n-        return enabled;\n-    }\n-\n-    tcx.sess.mir_opt_level() >= 3\n-}\n-\n impl<'tcx> MirPass<'tcx> for Inline {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !is_enabled(tcx) {\n-            return;\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        if let Some(enabled) = sess.opts.debugging_opts.inline_mir {\n+            return enabled;\n         }\n \n+        sess.opts.mir_opt_level() >= 3\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let span = trace_span!(\"inline\", body = %tcx.def_path_str(body.source.def_id()));\n         let _guard = span.enter();\n         if inline(tcx, body) {"}, {"sha": "c5adc241664d246ff17831f073bd8e7432927bee", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -11,6 +11,10 @@ use rustc_middle::ty::{self, TyCtxt};\n pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let ctx = InstCombineContext { tcx, local_decls };"}, {"sha": "4ef35a0cd36cee21942f016c45cf4265b4cc7db3", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -290,12 +290,12 @@ fn mir_const<'tcx>(\n         MirPhase::Const,\n         &[&[\n             // MIR-level lints.\n-            &check_packed_ref::CheckPackedRef,\n-            &check_const_item_mutation::CheckConstItemMutation,\n-            &function_item_references::FunctionItemReferences,\n+            &Lint(check_packed_ref::CheckPackedRef),\n+            &Lint(check_const_item_mutation::CheckConstItemMutation),\n+            &Lint(function_item_references::FunctionItemReferences),\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n-            &rustc_peek::SanityCheck,\n+            &rustc_peek::SanityCheck, // Just a lint\n         ]],\n     );\n     tcx.alloc_steal_mir(body)\n@@ -443,7 +443,7 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n         let def = ty::WithOptConstParam::unknown(did);\n \n         // Do not compute the mir call graph without said call graph actually being used.\n-        if inline::is_enabled(tcx) {\n+        if inline::Inline.is_enabled(&tcx.sess) {\n             let _ = tcx.mir_inliner_callees(ty::InstanceDef::Item(def));\n         }\n     }"}, {"sha": "c8297744873087256dc9c4e2eb66582303b37af5", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -10,6 +10,10 @@ use rustc_middle::ty::{self, TyCtxt};\n pub struct LowerSliceLenCalls;\n \n impl<'tcx> MirPass<'tcx> for LowerSliceLenCalls {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         lower_slice_len_calls(tcx, body)\n     }"}, {"sha": "3c14a324c36ff2bacac3a60ee3e41efa393429da", "filename": "compiler/rustc_mir_transform/src/match_branches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmatch_branches.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -40,11 +40,11 @@ pub struct MatchBranchSimplification;\n /// ```\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 3 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 3\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n         let param_env = tcx.param_env(def_id);\n "}, {"sha": "22b6dead99c501972358f35be9f8df0d9f42a1d8", "filename": "compiler/rustc_mir_transform/src/multiple_return_terminators.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fmultiple_return_terminators.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -9,11 +9,11 @@ use rustc_middle::ty::TyCtxt;\n pub struct MultipleReturnTerminators;\n \n impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // find basic blocks with no statement and a return terminator\n         let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n         let def_id = body.source.def_id();"}, {"sha": "0fd9e0352a24978a6a39d9abb3c1dedb62a00d35", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -14,11 +14,11 @@ const MAX_NUM_LOCALS: usize = 3000;\n pub struct NormalizeArrayLen;\n \n impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // early returns for edge cases of highly unrolled functions\n         if body.basic_blocks().len() > MAX_NUM_BLOCKS {\n             return;"}, {"sha": "88ec34b73ec401a833e4bb5a9777492731130c8f", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -33,11 +33,11 @@ use crate::MirPass;\n pub struct RenameReturnPlace;\n \n impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() == 0 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n         let def_id = body.source.def_id();\n         let returned_local = match local_eligible_for_nrvo(body) {\n             Some(l) => l,"}, {"sha": "2a73e341f1653f77984b618e1d6e05501a1b7ee5", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -10,18 +10,14 @@ use rustc_target::spec::PanicStrategy;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n-pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n-        return;\n+impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.panic_strategy() != PanicStrategy::Abort\n     }\n-    debug!(\"remove_noop_landing_pads({:?})\", body);\n-\n-    RemoveNoopLandingPads.remove_nop_landing_pads(body)\n-}\n \n-impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        remove_noop_landing_pads(tcx, body);\n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(\"remove_noop_landing_pads({:?})\", body);\n+        self.remove_nop_landing_pads(body)\n     }\n }\n "}, {"sha": "c9b6e1459d3233e2017ad35a336893b117a01688", "filename": "compiler/rustc_mir_transform/src/remove_storage_markers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_storage_markers.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -7,6 +7,10 @@ use rustc_middle::ty::TyCtxt;\n pub struct RemoveStorageMarkers;\n \n impl<'tcx> MirPass<'tcx> for RemoveStorageMarkers {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         if tcx.sess.emit_lifetime_markers() {\n             return;"}, {"sha": "1d912e6140989b7205866dc5433d587d8aac821e", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -8,6 +8,10 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n pub struct RemoveZsts;\n \n impl<'tcx> MirPass<'tcx> for RemoveZsts {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Avoid query cycles (generators require optimized MIR for layout).\n         if tcx.type_of(body.source.def_id()).is_generator() {"}, {"sha": "a717dd3e0cd8a6686de92de311770ff0c179d7ec", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -8,15 +8,18 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n pub struct RevealAll;\n \n impl<'tcx> MirPass<'tcx> for RevealAll {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.opts.mir_opt_level() >= 3 || super::inline::Inline.is_enabled(sess)\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        // This pass must run before inlining, since we insert callee bodies in RevealAll mode.\n         // Do not apply this transformation to generators.\n-        if (tcx.sess.mir_opt_level() >= 3 || super::inline::is_enabled(tcx))\n-            && body.generator.is_none()\n-        {\n-            let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-            RevealAllVisitor { tcx, param_env }.visit_body(body);\n+        if body.generator.is_some() {\n+            return;\n         }\n+\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+        RevealAllVisitor { tcx, param_env }.visit_body(body);\n     }\n }\n "}, {"sha": "7450d53ba717ee3ee3cb6d025b51e88cc51d374a", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -45,11 +45,11 @@ use smallvec::SmallVec;\n pub struct SeparateConstSwitch;\n \n impl<'tcx> MirPass<'tcx> for SeparateConstSwitch {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // If execution did something, applying a simplification layer\n         // helps later passes optimize the copy away.\n         if separate_const_switch(body) > 0 {"}, {"sha": "677869a0bdb6ad4add198e258b318c12d1026cc1", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -368,6 +368,10 @@ fn save_unreachable_coverage(\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running SimplifyLocals on {:?}\", body.source);\n         simplify_locals(body, tcx);"}, {"sha": "3bd68e8210d5b1663f925c24d70cd17208a2777a", "filename": "compiler/rustc_mir_transform/src/simplify_comparison_integral.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_comparison_integral.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -26,6 +26,10 @@ use rustc_middle::{\n pub struct SimplifyComparisonIntegral;\n \n impl<'tcx> MirPass<'tcx> for SimplifyComparisonIntegral {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"Running SimplifyComparisonIntegral on {:?}\", body.source);\n "}, {"sha": "77bc209539b34133a3aaff29739ae22dce4bc276", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -70,6 +70,10 @@ fn variant_discriminants<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() > 0\n+    }\n+\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         if body.source.promoted.is_some() {\n             return;"}, {"sha": "37071ba611708dda99ccd2d9b09ed72ebeb5abe0", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18b45e112d07c20d12303aa5d7d7ffd28830b7/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=fd18b45e112d07c20d12303aa5d7d7ffd28830b7", "patch": "@@ -11,13 +11,13 @@ use rustc_middle::ty::TyCtxt;\n pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.mir_opt_level() < 4 {\n-            // Enable only under -Zmir-opt-level=4 as in some cases (check the deeply-nested-opt\n-            // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n-            return;\n-        }\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        // Enable only under -Zmir-opt-level=4 as in some cases (check the deeply-nested-opt\n+        // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n+        sess.mir_opt_level() >= 4\n+    }\n \n+    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let mut unreachable_blocks = FxHashSet::default();\n         let mut replacements = FxHashMap::default();\n "}]}