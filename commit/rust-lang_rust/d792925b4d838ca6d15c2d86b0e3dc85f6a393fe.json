{"sha": "d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTI5MjViNGQ4MzhjYTZkMTVjMmQ4NmIwZTNkYzg1ZjZhMzkzZmU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-14T19:06:10Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:48:43Z"}, "message": "Shim some of the old std::simd functionality.\n\nOverload the operators using the traits so that things mostly keep\nworking during the deprecation period.", "tree": {"sha": "b7cfc0bd92d17f7e231d765954f9f19aea2665e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7cfc0bd92d17f7e231d765954f9f19aea2665e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "html_url": "https://github.com/rust-lang/rust/commit/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "html_url": "https://github.com/rust-lang/rust/commit/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "e226e9fa1549b6eaad23f4708cdc21d887dadeea", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "patch": "@@ -79,7 +79,7 @@\n #![feature(reflect)]\n #![feature(rustc_attrs)]\n #![cfg_attr(stage0, feature(simd))]\n-#![cfg_attr(not(stage0), feature(repr_simd))]\n+#![cfg_attr(not(stage0), feature(repr_simd, platform_intrinsics))]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n "}, {"sha": "fb39b3accc34454fc86758548a6d4bc9bcda872f", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "patch": "@@ -10,25 +10,12 @@\n \n //! SIMD vectors.\n //!\n-//! These types can be used for accessing basic SIMD operations. Each of them\n-//! implements the standard arithmetic operator traits (Add, Sub, Mul, Div,\n-//! Rem, Shl, Shr) through compiler magic, rather than explicitly. Currently\n+//! These types can be used for accessing basic SIMD operations. Currently\n //! comparison operators are not implemented. To use SSE3+, you must enable\n //! the features, like `-C target-feature=sse3,sse4.1,sse4.2`, or a more\n //! specific `target-cpu`. No other SIMD intrinsics or high-level wrappers are\n //! provided beyond this module.\n //!\n-//! ```rust\n-//! #![feature(core_simd)]\n-//!\n-//! fn main() {\n-//!     use std::simd::f32x4;\n-//!     let a = f32x4(40.0, 41.0, 42.0, 43.0);\n-//!     let b = f32x4(1.0, 1.1, 3.4, 9.8);\n-//!     println!(\"{:?}\", a + b);\n-//! }\n-//! ```\n-//!\n //! # Stability Note\n //!\n //! These are all experimental. The interface may change entirely, without\n@@ -44,6 +31,30 @@\n #![allow(missing_docs)]\n #![allow(deprecated)]\n \n+use ops::{Add, Sub, Mul, Div, Shl, Shr, BitAnd, BitOr, BitXor};\n+\n+// FIXME(stage0): the contents of macro can be inlined.\n+// ABIs are verified as valid as soon as they are parsed, i.e. before\n+// `cfg` stripping. The `platform-intrinsic` ABI is new, so stage0\n+// doesn't know about it, but it still errors out when it hits it\n+// (despite this being in a `cfg(not(stage0))` module).\n+macro_rules! argh {\n+    () => {\n+        extern \"platform-intrinsic\" {\n+            fn simd_add<T>(x: T, y: T) -> T;\n+            fn simd_sub<T>(x: T, y: T) -> T;\n+            fn simd_mul<T>(x: T, y: T) -> T;\n+            fn simd_div<T>(x: T, y: T) -> T;\n+            fn simd_shl<T>(x: T, y: T) -> T;\n+            fn simd_shr<T>(x: T, y: T) -> T;\n+            fn simd_and<T>(x: T, y: T) -> T;\n+            fn simd_or<T>(x: T, y: T) -> T;\n+            fn simd_xor<T>(x: T, y: T) -> T;\n+        }\n+    }\n+}\n+argh!();\n+\n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n@@ -101,3 +112,32 @@ pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);\n+\n+macro_rules! impl_traits {\n+    ($($trayt: ident, $method: ident, $func: ident: $($ty: ty),*;)*) => {\n+        $($(\n+            impl $trayt<$ty> for $ty {\n+                type Output = Self;\n+                fn $method(self, other: Self) -> Self {\n+                    unsafe {\n+                        $func(self, other)\n+                    }\n+                }\n+            }\n+            )*)*\n+    }\n+}\n+\n+impl_traits! {\n+    Add, add, simd_add: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2;\n+    Sub, sub, simd_sub: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2;\n+    Mul, mul, simd_mul: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2;\n+\n+    Div, div, simd_div: f32x4, f64x2;\n+\n+    Shl, shl, simd_shl: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2;\n+    Shr, shr, simd_shr: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2;\n+    BitAnd, bitand, simd_and: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2;\n+    BitOr, bitor, simd_or: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2;\n+    BitXor, bitxor, simd_xor: u8x16, u16x8, u32x4, u64x2, i8x16, i16x8, i32x4, i64x2;\n+}"}, {"sha": "a6c77eaf7c63091839277a74df50700125029bbe", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d792925b4d838ca6d15c2d86b0e3dc85f6a393fe/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=d792925b4d838ca6d15c2d86b0e3dc85f6a393fe", "patch": "@@ -91,7 +91,7 @@ fn mult<F>(v: &[f64], out: &mut [f64], start: usize, a: F)\n         for (j, chunk) in v.chunks(2).enumerate().map(|(j, s)| (2 * j, s)) {\n             let top = f64x2(chunk[0], chunk[1]);\n             let bot = f64x2(a(i, j), a(i, j + 1));\n-            sum += top / bot;\n+            sum = sum + top / bot;\n         }\n         let f64x2(a, b) = sum;\n         *slot = a + b;"}]}