{"sha": "e568e98063bea3864162cdcfda7bc200c7f09669", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjhlOTgwNjNiZWEzODY0MTYyY2RjZmRhN2JjMjAwYzdmMDk2Njk=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-06T14:00:35Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-24T12:59:07Z"}, "message": "Move codegen_llvm::common::ty_fn_sig into rustc::ty::Instance.", "tree": {"sha": "cbc63b40449e7be6973f459df8ff1ef8327da5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc63b40449e7be6973f459df8ff1ef8327da5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e568e98063bea3864162cdcfda7bc200c7f09669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e568e98063bea3864162cdcfda7bc200c7f09669", "html_url": "https://github.com/rust-lang/rust/commit/e568e98063bea3864162cdcfda7bc200c7f09669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e568e98063bea3864162cdcfda7bc200c7f09669/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b", "html_url": "https://github.com/rust-lang/rust/commit/06b6b1c79088a2697c38cd1719ebe0ce13e67d0b"}], "stats": {"total": 160, "additions": 73, "deletions": 87}, "files": [{"sha": "041565c8b5a07ba6834e2e5bebbabf52373adf44", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::Unsafety;\n use hir::def_id::DefId;\n-use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n+use ty::{self, Ty, PolyFnSig, TypeFoldable, Substs, TyCtxt};\n use traits;\n use rustc_target::spec::abi::Abi;\n use util::ppaux;\n \n use std::fmt;\n+use std::iter;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct Instance<'tcx> {\n@@ -59,6 +61,65 @@ impl<'a, 'tcx> Instance<'tcx> {\n             &ty,\n         )\n     }\n+\n+    fn fn_sig_noadjust(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> PolyFnSig<'tcx> {\n+        let ty = self.ty(tcx);\n+        match ty.sty {\n+            ty::FnDef(..) |\n+            // Shims currently have type FnPtr. Not sure this should remain.\n+            ty::FnPtr(_) => ty.fn_sig(tcx),\n+            ty::Closure(def_id, substs) => {\n+                let sig = substs.closure_sig(def_id, tcx);\n+\n+                let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+                sig.map_bound(|sig| tcx.mk_fn_sig(\n+                    iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n+                    sig.output(),\n+                    sig.variadic,\n+                    sig.unsafety,\n+                    sig.abi\n+                ))\n+            }\n+            ty::Generator(def_id, substs, _) => {\n+                let sig = substs.poly_sig(def_id, tcx);\n+\n+                let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n+                let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n+\n+                sig.map_bound(|sig| {\n+                    let state_did = tcx.lang_items().gen_state().unwrap();\n+                    let state_adt_ref = tcx.adt_def(state_did);\n+                    let state_substs = tcx.intern_substs(&[\n+                        sig.yield_ty.into(),\n+                        sig.return_ty.into(),\n+                    ]);\n+                    let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                    tcx.mk_fn_sig(iter::once(env_ty),\n+                        ret_ty,\n+                        false,\n+                        Unsafety::Normal,\n+                        Abi::Rust\n+                    )\n+                })\n+            }\n+            _ => bug!(\"unexpected type {:?} in Instance::fn_sig_noadjust\", ty)\n+        }\n+    }\n+\n+    pub fn fn_sig(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let mut fn_sig = self.fn_sig_noadjust(tcx);\n+        if let InstanceDef::VtableShim(..) = self.def {\n+            // Modify fn(self, ...) to fn(self: *mut Self, ...)\n+            fn_sig = fn_sig.map_bound(|mut fn_sig| {\n+                let mut inputs_and_output = fn_sig.inputs_and_output.to_vec();\n+                inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);\n+                fn_sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+                fn_sig\n+            });\n+        }\n+        fn_sig\n+    }\n }\n \n impl<'tcx> InstanceDef<'tcx> {"}, {"sha": "7c7662a88de535a1af92a71c40a0617a185fa058", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, AttributePlace};\n use base;\n use builder::{Builder, MemFlags};\n-use common::{ty_fn_sig, C_usize};\n+use common::C_usize;\n use context::CodegenCx;\n use mir::place::PlaceRef;\n use mir::operand::OperandValue;\n@@ -283,8 +283,7 @@ pub trait FnTypeExt<'tcx> {\n \n impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n     fn of_instance(cx: &CodegenCx<'ll, 'tcx>, instance: &ty::Instance<'tcx>) -> Self {\n-        let fn_ty = instance.ty(cx.tcx);\n-        let sig = ty_fn_sig(cx, fn_ty);\n+        let sig = instance.fn_sig(cx.tcx);\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         FnType::new(cx, sig, &[])\n     }"}, {"sha": "0932ceec9060f7d3454f70378f261bbeb873dd2d", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -56,7 +56,7 @@ use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_usize};\n use rustc_mir::monomorphize::collector::{self, MonoItemCollectionMode};\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n-use common::{self, C_struct_in_context, C_array, val_ty};\n+use common::{C_struct_in_context, C_array, val_ty};\n use consts;\n use context::CodegenCx;\n use debuginfo;\n@@ -491,8 +491,7 @@ pub fn codegen_instance<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, instance: Instance<'\n     // release builds.\n     info!(\"codegen_instance({})\", instance);\n \n-    let fn_ty = instance.ty(cx.tcx);\n-    let sig = common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim());\n+    let sig = instance.fn_sig(cx.tcx);\n     let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n     let lldecl = cx.instances.borrow().get(&instance).cloned().unwrap_or_else(||"}, {"sha": "7300bac96182b53bbdd6ddfc9e6d48e05dc9d1a4", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -47,16 +47,16 @@ pub fn get_fn(\n     assert!(!instance.substs.has_escaping_regions());\n     assert!(!instance.substs.has_param_types());\n \n-    let fn_ty = instance.ty(cx.tcx);\n+    let sig = instance.fn_sig(cx.tcx);\n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n \n     let sym = tcx.symbol_name(instance).as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n     // Create a fn pointer with the substituted signature.\n-    let fn_ptr_ty = tcx.mk_fn_ptr(common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim()));\n+    let fn_ptr_ty = tcx.mk_fn_ptr(sig);\n     let llptrty = cx.layout_of(fn_ptr_ty).llvm_type(cx);\n \n     let llfn = if let Some(llfn) = declare::get_declared_value(cx, &sym) {\n@@ -91,7 +91,7 @@ pub fn get_fn(\n             llfn\n         }\n     } else {\n-        let llfn = declare::declare_fn(cx, &sym, common::ty_fn_sig_vtable(cx, fn_ty, instance.is_vtable_shim()));\n+        let llfn = declare::declare_fn(cx, &sym, sig);\n         assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n "}, {"sha": "c9b464fd8f3dd48482fa3a307a3f55b0c0bc7856", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -30,9 +30,7 @@ use rustc::ty::layout::{HasDataLayout, LayoutOf};\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n-use std::iter;\n \n-use rustc_target::spec::abi::Abi;\n use syntax::symbol::LocalInternedString;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -404,71 +402,3 @@ pub fn shift_mask_val(\n         _ => bug!(\"shift_mask_val: expected Integer or Vector, found {:?}\", kind),\n     }\n }\n-\n-pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                           ty: Ty<'tcx>)\n-                           -> ty::PolyFnSig<'tcx>\n-{\n-    match ty.sty {\n-        ty::FnDef(..) |\n-        // Shims currently have type FnPtr. Not sure this should remain.\n-        ty::FnPtr(_) => ty.fn_sig(cx.tcx),\n-        ty::Closure(def_id, substs) => {\n-            let tcx = cx.tcx;\n-            let sig = substs.closure_sig(def_id, tcx);\n-\n-            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n-            sig.map_bound(|sig| tcx.mk_fn_sig(\n-                iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n-                sig.output(),\n-                sig.variadic,\n-                sig.unsafety,\n-                sig.abi\n-            ))\n-        }\n-        ty::Generator(def_id, substs, _) => {\n-            let tcx = cx.tcx;\n-            let sig = substs.poly_sig(def_id, cx.tcx);\n-\n-            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-            let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n-\n-            sig.map_bound(|sig| {\n-                let state_did = tcx.lang_items().gen_state().unwrap();\n-                let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.intern_substs(&[\n-                    sig.yield_ty.into(),\n-                    sig.return_ty.into(),\n-                ]);\n-                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n-\n-                tcx.mk_fn_sig(iter::once(env_ty),\n-                    ret_ty,\n-                    false,\n-                    hir::Unsafety::Normal,\n-                    Abi::Rust\n-                )\n-            })\n-        }\n-        _ => bug!(\"unexpected type {:?} to ty_fn_sig\", ty)\n-    }\n-}\n-\n-pub fn ty_fn_sig_vtable<'a, 'tcx>(\n-    cx: &CodegenCx<'a, 'tcx>,\n-    ty: Ty<'tcx>,\n-    is_vtable_shim: bool\n-    ) -> ty::PolyFnSig<'tcx>\n-{\n-    let mut fn_sig = ty_fn_sig(cx, ty);\n-    if is_vtable_shim {\n-        // Modify fn(self, ...) to fn(self: *mut Self, ...)\n-        fn_sig = fn_sig.map_bound(|mut fn_sig| {\n-            let mut inputs_and_output = fn_sig.inputs_and_output.to_vec();\n-            inputs_and_output[0] = cx.tcx.mk_mut_ptr(inputs_and_output[0]);\n-            fn_sig.inputs_and_output = cx.tcx.intern_type_list(&inputs_and_output);\n-            fn_sig\n-        });\n-    }\n-    fn_sig\n-}"}, {"sha": "d98b7869ae98e3dfa9a54b8895a5390559db503f", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -298,8 +298,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 };\n                 let (drop_fn, fn_ty) = match ty.sty {\n                     ty::Dynamic(..) => {\n-                        let fn_ty = drop_fn.ty(bx.cx.tcx);\n-                        let sig = common::ty_fn_sig(bx.cx, fn_ty);\n+                        let sig = drop_fn.fn_sig(bx.cx.tcx);\n                         let sig = bx.tcx().normalize_erasing_late_bound_regions(\n                             ty::ParamEnv::reveal_all(),\n                             &sig,"}, {"sha": "91c1ccbe00213dd6e53176c60544aa314df4064e", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568e98063bea3864162cdcfda7bc200c7f09669/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=e568e98063bea3864162cdcfda7bc200c7f09669", "patch": "@@ -17,7 +17,6 @@\n use asm;\n use attributes;\n use base;\n-use common;\n use consts;\n use context::CodegenCx;\n use declare;\n@@ -154,8 +153,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     assert!(!instance.substs.needs_infer() &&\n             !instance.substs.has_param_types());\n \n-    let mono_ty = instance.ty(cx.tcx);\n-    let mono_sig = common::ty_fn_sig_vtable(cx, mono_ty, instance.is_vtable_shim());\n+    let mono_sig = instance.fn_sig(cx.tcx);\n     let attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n     let lldecl = declare::declare_fn(cx, symbol_name, mono_sig);\n     unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n@@ -180,7 +178,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n     }\n \n-    debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n+    debug!(\"predefine_fn: mono_sig = {:?} instance = {:?}\", mono_sig, instance);\n     if instance.def.is_inline(cx.tcx) {\n         attributes::inline(cx, lldecl, attributes::InlineAttr::Hint);\n     }"}]}