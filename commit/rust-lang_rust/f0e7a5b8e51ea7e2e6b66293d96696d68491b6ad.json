{"sha": "f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTdhNWI4ZTUxZWE3ZTJlNmI2NjI5M2Q5NjY5NmQ2ODQ5MWI2YWQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-01T09:14:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-01T09:14:04Z"}, "message": "Prevent suggestions from being emitted if all possible locations are inside expansions", "tree": {"sha": "7d1c5799b28a807e97ddc8d1106749074c460183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d1c5799b28a807e97ddc8d1106749074c460183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmpJPkACgkQpp+NIls6\n19ldmw/9FTP6G2z/gQE+K3sHdc4BdmH+9Aairn+LjtvVSOL/hrT1EhtC4uCs4O2u\n+QuyEU7LmmaWTf9AZ8MrIS37xvaBhcu1DhW8s3c4nslhylHHau1c2hD0UgUM3pQz\n4BLHg0m9fBRO9qjHfYJsMqs35ciG0vV2mhsN/QB5aR2/prwvRbQc7HY3w2HJH7Uu\nQPeArWWFX3Xr11/I8fmG667nSeXKE8+/6/iZ7o7XEk1gTrfEvuB7dHSSH2rClIpQ\nvyHkJLZcouSL7yNQZqsHR/oskWKiuWCAv8BFJJLnxsbSXnoiJKyRyUDYjJrEdS9e\nOyFjPctWTBtuGTirl+wslrWeV0/4eu4vhkPQULcmE7zdK9jK4dSlsiPKkmk4dre6\n+qA/TwXP5g3Ek3Q5mTaoD+KteVBLmexpjF+QNEfVUnEPYoGqJ6uHelziogNOr5P2\n/m2gmwpPFaxLfNpEpTkSzzRpNb4RPeV3Q9oR4EHbCZN+iEJxvx5wjmZf7+7xV37M\n3Vm33lBrwKXy6PllZHg/NnfjGCTakIzom5HXW3k/53rmSLE/9PoTBPwhA5TPoaL7\n+tRdZwG1cSYGIEUW77tLejBTT1+VdxROE0BihroTmGgyT30YGxzVZJMwBzf04SOB\n/Uv8VXInRFJPmY49H0g+DIY49oAhnzC5ghZAnLoItT+SB96HnNE=\n=zD+A\n-----END PGP SIGNATURE-----", "payload": "tree 7d1c5799b28a807e97ddc8d1106749074c460183\nparent 74748b11bb313d2df6ffec0192fee344b3f7562d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504257244 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1504257244 +0200\n\nPrevent suggestions from being emitted if all possible locations are inside expansions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "html_url": "https://github.com/rust-lang/rust/commit/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74748b11bb313d2df6ffec0192fee344b3f7562d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74748b11bb313d2df6ffec0192fee344b3f7562d", "html_url": "https://github.com/rust-lang/rust/commit/74748b11bb313d2df6ffec0192fee344b3f7562d"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "d23c7f199a5a1e2c64aaa777da285809ae0d5702", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f0e7a5b8e51ea7e2e6b66293d96696d68491b6ad", "patch": "@@ -631,7 +631,6 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                 },\n             }\n         }\n-        assert!(self.span.is_some(), \"a file can't have no items and emit suggestions\");\n     }\n }\n \n@@ -3562,8 +3561,7 @@ impl<'a> Resolver<'a> {\n             };\n             visit::walk_crate(&mut finder, krate);\n             if !candidates.is_empty() {\n-                let span = finder.span.expect(\"did not find module\");\n-                show_candidates(&mut err, span, &candidates, better, finder.found_use);\n+                show_candidates(&mut err, finder.span, &candidates, better, finder.found_use);\n             }\n             err.emit();\n         }\n@@ -3757,7 +3755,8 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n fn show_candidates(err: &mut DiagnosticBuilder,\n-                   span: Span,\n+                   // This is `None` if all placement locations are inside expansions\n+                   span: Option<Span>,\n                    candidates: &[ImportSuggestion],\n                    better: bool,\n                    found_use: bool) {\n@@ -3775,18 +3774,27 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n     };\n     let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n \n-    for candidate in &mut path_strings {\n-        // produce an additional newline to separate the new use statement\n-        // from the directly following item.\n-        let additional_newline = if found_use {\n-            \"\"\n-        } else {\n-            \"\\n\"\n-        };\n-        *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n-    }\n+    if let Some(span) = span {\n+        for candidate in &mut path_strings {\n+            // produce an additional newline to separate the new use statement\n+            // from the directly following item.\n+            let additional_newline = if found_use {\n+                \"\"\n+            } else {\n+                \"\\n\"\n+            };\n+            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n+        }\n \n-    err.span_suggestions(span, &msg, path_strings);\n+        err.span_suggestions(span, &msg, path_strings);\n+    } else {\n+        let mut msg = msg;\n+        msg.push(':');\n+        for candidate in path_strings {\n+            msg.push('\\n');\n+            msg.push_str(&candidate);\n+        }\n+    }\n }\n \n /// A somewhat inefficient routine to obtain the name of a module."}]}