{"sha": "e0e598bb7611c73f190d71bf8def2feba4e19255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTU5OGJiNzYxMWM3M2YxOTBkNzFiZjhkZWYyZmViYTRlMTkyNTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-26T11:32:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-26T11:32:24Z"}, "message": "Rollup merge of #51056 - tbu-:pr_once_new, r=dtolnay\n\nMention and use `Once::new` instead of `ONCE_INIT`", "tree": {"sha": "340df9abf85680d8265613fd271b52fef78487d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/340df9abf85680d8265613fd271b52fef78487d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e598bb7611c73f190d71bf8def2feba4e19255", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbCUXICRBK7hj4Ov3rIwAAdHIIABMssmCm+eaFx/HfeTAwjB4z\nNo7xwm8Kio7ufnj2jKS1GKoDORv4rQegNvYcggI2hBb0faxmvMfJ8gpskSHbtE+d\nO1u8oVoRG+i1US4Zwp+7kldNzggooBF5+5pdaM2qrdv9mJZAAAkM28lYaNL8oFXw\nF8TobsU+OIe34uzFWbO8v1hFO/H8a4TLJvmgFNAJlghNRrnavPl1GIPQ2Z4ZDqNL\nJHPEQVYjqbSaEb70Sd5E7pYjUoALn8tDW44LW+297t5gl8GEd9/8KhCTuhTpZfwo\nP5MPIs/Dp6Mrc+hOahHwLQCXqtb3+oTd3gRixGK5ZGb/Ti30HGaq/b9oNG19gcE=\n=2wUb\n-----END PGP SIGNATURE-----\n", "payload": "tree 340df9abf85680d8265613fd271b52fef78487d5\nparent 08b417084de9ec0241eae8315b6b3dff1fc6634e\nparent 2a900e2b84f33a10ef810d6e986fc3d3be0c432d\nauthor kennytm <kennytm@gmail.com> 1527334344 +0800\ncommitter GitHub <noreply@github.com> 1527334344 +0800\n\nRollup merge of #51056 - tbu-:pr_once_new, r=dtolnay\n\nMention and use `Once::new` instead of `ONCE_INIT`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e598bb7611c73f190d71bf8def2feba4e19255", "html_url": "https://github.com/rust-lang/rust/commit/e0e598bb7611c73f190d71bf8def2feba4e19255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e598bb7611c73f190d71bf8def2feba4e19255/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b417084de9ec0241eae8315b6b3dff1fc6634e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b417084de9ec0241eae8315b6b3dff1fc6634e", "html_url": "https://github.com/rust-lang/rust/commit/08b417084de9ec0241eae8315b6b3dff1fc6634e"}, {"sha": "2a900e2b84f33a10ef810d6e986fc3d3be0c432d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a900e2b84f33a10ef810d6e986fc3d3be0c432d", "html_url": "https://github.com/rust-lang/rust/commit/2a900e2b84f33a10ef810d6e986fc3d3be0c432d"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "7eb7be23128b3143ec4a0e0c833445b95a5cbcfa", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0e598bb7611c73f190d71bf8def2feba4e19255/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e598bb7611c73f190d71bf8def2feba4e19255/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=e0e598bb7611c73f190d71bf8def2feba4e19255", "patch": "@@ -73,16 +73,17 @@ use thread::{self, Thread};\n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n /// functionality. This type can only be constructed with the [`ONCE_INIT`]\n-/// value.\n+/// value or the equivalent [`Once::new`] constructor.\n ///\n /// [`ONCE_INIT`]: constant.ONCE_INIT.html\n+/// [`Once::new`]: struct.Once.html#method.new\n ///\n /// # Examples\n ///\n /// ```\n-/// use std::sync::{Once, ONCE_INIT};\n+/// use std::sync::Once;\n ///\n-/// static START: Once = ONCE_INIT;\n+/// static START: Once = Once::new();\n ///\n /// START.call_once(|| {\n ///     // run initialization here\n@@ -180,10 +181,10 @@ impl Once {\n     /// # Examples\n     ///\n     /// ```\n-    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::sync::Once;\n     ///\n     /// static mut VAL: usize = 0;\n-    /// static INIT: Once = ONCE_INIT;\n+    /// static INIT: Once = Once::new();\n     ///\n     /// // Accessing a `static mut` is unsafe much of the time, but if we do so\n     /// // in a synchronized fashion (e.g. write once or read all) then we're\n@@ -248,10 +249,10 @@ impl Once {\n     /// ```\n     /// #![feature(once_poison)]\n     ///\n-    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::sync::Once;\n     /// use std::thread;\n     ///\n-    /// static INIT: Once = ONCE_INIT;\n+    /// static INIT: Once = Once::new();\n     ///\n     /// // poison the once\n     /// let handle = thread::spawn(|| {\n@@ -431,10 +432,10 @@ impl OnceState {\n     /// ```\n     /// #![feature(once_poison)]\n     ///\n-    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::sync::Once;\n     /// use std::thread;\n     ///\n-    /// static INIT: Once = ONCE_INIT;\n+    /// static INIT: Once = Once::new();\n     ///\n     /// // poison the once\n     /// let handle = thread::spawn(|| {\n@@ -452,9 +453,9 @@ impl OnceState {\n     /// ```\n     /// #![feature(once_poison)]\n     ///\n-    /// use std::sync::{Once, ONCE_INIT};\n+    /// use std::sync::Once;\n     ///\n-    /// static INIT: Once = ONCE_INIT;\n+    /// static INIT: Once = Once::new();\n     ///\n     /// INIT.call_once_force(|state| {\n     ///     assert!(!state.poisoned());"}]}