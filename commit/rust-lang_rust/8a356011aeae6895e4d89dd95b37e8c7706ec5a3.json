{"sha": "8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzU2MDExYWVhZTY4OTVlNGQ4OWRkOTViMzdlOGM3NzA2ZWM1YTM=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T18:32:00Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:15:37Z"}, "message": "Remove duplicates", "tree": {"sha": "643536b8dccd9a05a0cc6c20a0161192da58beca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643536b8dccd9a05a0cc6c20a0161192da58beca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "html_url": "https://github.com/rust-lang/rust/commit/8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a356011aeae6895e4d89dd95b37e8c7706ec5a3/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f79d2f86af73da483f4fe8e2422c15c79221d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f79d2f86af73da483f4fe8e2422c15c79221d32", "html_url": "https://github.com/rust-lang/rust/commit/9f79d2f86af73da483f4fe8e2422c15c79221d32"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "f6d5de63f170b9fe7c61952ac405774c7443a4a2", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a356011aeae6895e4d89dd95b37e8c7706ec5a3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a356011aeae6895e4d89dd95b37e8c7706ec5a3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=8a356011aeae6895e4d89dd95b37e8c7706ec5a3", "patch": "@@ -24,6 +24,7 @@ use rustc::mir::{\n use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::{self, ErrorReported};\n use rustc_data_structures::bitvec::BitVector;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use std::fmt;\n use std::rc::Rc;\n@@ -66,6 +67,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// The constraints we have accumulated and used during solving.\n     constraints: IndexVec<ConstraintIndex, OutlivesConstraint>,\n+    seen_constraints: FxHashSet<(RegionVid, RegionVid)>,\n \n     /// Type constraints that we check after solving.\n     type_tests: Vec<TypeTest<'tcx>>,\n@@ -143,6 +145,12 @@ pub struct OutlivesConstraint {\n     pub span: Span,\n }\n \n+impl OutlivesConstraint {\n+    fn dedup_key(&self) -> (RegionVid, RegionVid) {\n+        (self.sup, self.sub)\n+    }\n+}\n+\n newtype_index!(ConstraintIndex { DEBUG_FORMAT = \"ConstraintIndex({})\" });\n \n /// A \"type test\" corresponds to an outlives constraint between a type\n@@ -266,11 +274,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             liveness_constraints: RegionValues::new(elements, num_region_variables),\n             inferred_values: None,\n             dependency_map: None,\n-            constraints: IndexVec::from_raw(outlives_constraints),\n+            constraints: Default::default(),\n+            seen_constraints: Default::default(),\n             type_tests,\n             universal_regions,\n         };\n \n+        for c in outlives_constraints {\n+            result.add_outlives_iner(c);\n+        }\n+\n         result.init_universal_regions();\n \n         result\n@@ -392,15 +405,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         sub: RegionVid,\n         point: Location,\n     ) {\n-        debug!(\"add_outlives({:?}: {:?} @ {:?}\", sup, sub, point);\n-        assert!(self.inferred_values.is_none(), \"values already inferred\");\n-        self.constraints.push(OutlivesConstraint {\n+        self.add_outlives_iner(OutlivesConstraint {\n             span,\n             sup,\n             sub,\n             point,\n             next: None,\n-        });\n+        })\n+    }\n+\n+    /// Indicates that the region variable `sup` must outlive `sub` is live at the point `point`.\n+    fn add_outlives_iner(\n+        &mut self,\n+        outlives_constraint: OutlivesConstraint\n+    ) {\n+        debug!(\"add_outlives({:?}: {:?} @ {:?}\", outlives_constraint.sup, outlives_constraint.sub, outlives_constraint.point);\n+        assert!(self.inferred_values.is_none(), \"values already inferred\");\n+        if outlives_constraint.sup == outlives_constraint.sub {\n+            // 'a: 'a is pretty uninteresting\n+            return;\n+        }\n+        if self.seen_constraints.insert(outlives_constraint.dedup_key()) {\n+            self.constraints.push(outlives_constraint);\n+        }\n     }\n \n     /// Perform region inference and report errors if we see any"}]}