{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "node_id": "C_kwDOAAsO6NoAKDY0YTdhYTcwMTZkZTMyZjRkOTkxYzMwYmZhNDBkMzkxMWUxOGEyMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T05:36:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-08T05:36:40Z"}, "message": "Auto merge of #97447 - nnethercote:improve-folding, r=jackh726\n\nFolding revamp\n\nr? `@ghost`", "tree": {"sha": "eb55803bf1359ae98f3e807f91655ca5395ed797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb55803bf1359ae98f3e807f91655ca5395ed797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47aee31b2a89cb7de97d779869a30b046632b6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/47aee31b2a89cb7de97d779869a30b046632b6af", "html_url": "https://github.com/rust-lang/rust/commit/47aee31b2a89cb7de97d779869a30b046632b6af"}, {"sha": "90db033955eaa000f8eea5691ea4297687a4dbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/90db033955eaa000f8eea5691ea4297687a4dbef", "html_url": "https://github.com/rust-lang/rust/commit/90db033955eaa000f8eea5691ea4297687a4dbef"}], "stats": {"total": 675, "additions": 315, "deletions": 360}, "files": [{"sha": "0fddafbee7960382a0ac19bd6575b6d0c9d86da1", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use std::convert::TryInto;\n use std::ops::ControlFlow;\n \n@@ -47,7 +47,7 @@ where\n                         match (is_used, subst.needs_subst()) {\n                             // Just in case there are closures or generators within this subst,\n                             // recurse.\n-                            (true, true) => return subst.super_visit_with(self),\n+                            (true, true) => return subst.visit_with(self),\n                             // Confirm that polymorphization replaced the parameter with\n                             // `ty::Param`/`ty::ConstKind::Param`.\n                             (false, true) if cfg!(debug_assertions) => match subst.unpack() {"}, {"sha": "076825771971abb33127444e2beb56df69667d25", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -11,7 +11,7 @@ use crate::infer::canonical::{\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n use std::sync::atomic::Ordering;"}, {"sha": "18fc1158b042d9036f939e95d5181d4eac3aa4ff", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -70,7 +70,7 @@ use rustc_middle::ty::{\n     self,\n     error::TypeError,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable,\n+    Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;"}, {"sha": "b856198cf3f7be1000fbbbf03a4fab7a3e35a00a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;"}, {"sha": "17d4bb1bcbe35aa9f28da2023c9954127399376e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperFoldable, TypeVisitor};\n use rustc_span::{Span, Symbol};\n \n use std::ops::ControlFlow;"}, {"sha": "edafee2df5765e3045e6f56c19ab471eb5dda4ae", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -34,7 +34,7 @@ use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {\n@@ -228,12 +228,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                     .probe_value(v)\n                     .val\n                     .known();\n-                return self.freshen_const(\n-                    opt_ct,\n-                    ty::InferConst::Var(v),\n-                    ty::InferConst::Fresh,\n-                    ct.ty(),\n-                );\n+                self.freshen_const(opt_ct, ty::InferConst::Var(v), ty::InferConst::Fresh, ct.ty())\n             }\n             ty::ConstKind::Infer(ty::InferConst::Fresh(i)) => {\n                 if i >= self.const_freshen_count {\n@@ -244,7 +239,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                         self.const_freshen_count,\n                     );\n                 }\n-                return ct;\n+                ct\n             }\n \n             ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n@@ -254,9 +249,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::ConstKind::Param(_)\n             | ty::ConstKind::Value(_)\n             | ty::ConstKind::Unevaluated(..)\n-            | ty::ConstKind::Error(_) => {}\n+            | ty::ConstKind::Error(_) => ct.super_fold_with(self),\n         }\n-\n-        ct.super_fold_with(self)\n     }\n }"}, {"sha": "1e6995db2698f71847ab4edf43962da47ee87c91", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n use super::type_variable::TypeVariableOrigin;"}, {"sha": "21208933d43408db98a4408b7cee3c533cc931b2", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKin\n use rustc_middle::mir::interpret::{ErrorHandled, EvalToConstValueResult};\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n pub use rustc_middle::ty::IntVarValue;"}, {"sha": "9b6e5c8a347afa2d5bc03eff10e67cdc31faa34f", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -27,7 +27,7 @@ use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;"}, {"sha": "80f6abbab3447d696f6cccd76d287e9675cc7b78", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n };\n use rustc_span::Span;\n \n@@ -470,7 +470,7 @@ where\n         &mut self,\n         t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n-        t.as_ref().skip_binder().visit_with(self);\n+        t.super_visit_with(self);\n         ControlFlow::CONTINUE\n     }\n "}, {"sha": "ce3c7328e2da26bd4d07dae990d4c6ecaaa707e4", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,7 +1,7 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeVisitor};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;"}, {"sha": "82ee4bb29e88b157c123d45aa4d32a30418693a6", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -60,10 +60,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n // TypeFoldable implementations.\n \n impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,\n             recursion_depth: self.recursion_depth,\n@@ -72,7 +69,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)\n     }"}, {"sha": "2a2dc6822ce16aff30e7452e5d73d1b6026fc7f0", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol, DUMMY_SP};"}, {"sha": "9e834d3ba1c2d93aa663223563ea614fa3181a48", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -30,14 +30,14 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n     s.bound_impl(\n         quote!(::rustc_middle::ty::fold::TypeFoldable<'tcx>),\n         quote! {\n-            fn try_super_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n+            fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,\n                 __folder: &mut __F\n             ) -> Result<Self, __F::Error> {\n                 Ok(match self { #body_fold })\n             }\n \n-            fn super_visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n+            fn visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n                 &self,\n                 __folder: &mut __F\n             ) -> ::std::ops::ControlFlow<__F::BreakTy> {"}, {"sha": "33b4dff977eb092d1d23d7328c5a7f94fb54959a", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -52,14 +52,14 @@ macro_rules! TrivialTypeFoldableImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n-                fn try_super_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n+                fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F\n                 ) -> ::std::result::Result<$ty, F::Error> {\n                     Ok(self)\n                 }\n \n-                fn super_visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n+                fn visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n@@ -95,14 +95,14 @@ macro_rules! EnumTypeFoldableImpl {\n         impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n-            fn try_super_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n+            fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                 self,\n                 folder: &mut V,\n             ) -> ::std::result::Result<Self, V::Error> {\n                 EnumTypeFoldableImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n             }\n \n-            fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n+            fn visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n             ) -> ::std::ops::ControlFlow<V::BreakTy> {"}, {"sha": "07ba3ce04089b154adacc46f0e1897c86c739267", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -7,7 +7,7 @@ use crate::mir::interpret::{ConstAllocation, ConstValue, GlobalAlloc, LitToConst\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n@@ -3399,20 +3399,14 @@ impl UserTypeProjection {\n TrivialTypeFoldableAndLiftImpls! { ProjectionKind, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {\n             base: self.base.try_fold_with(folder)?,\n             projs: self.projs.try_fold_with(folder)?,\n         })\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n-        &self,\n-        visitor: &mut Vs,\n-    ) -> ControlFlow<Vs::BreakTy> {\n+    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "4201b2d11ce2a5cab53e1f4ac2968380bb400886", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 28, "deletions": 46, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -16,10 +16,7 @@ TrivialTypeFoldableAndLiftImpls! {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         use crate::mir::TerminatorKind::*;\n \n         let kind = match self.kind {\n@@ -93,7 +90,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         Ok(Terminator { source_info: self.source_info, kind })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n@@ -144,50 +141,41 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(Place {\n             local: self.local.try_fold_with(folder)?,\n             projection: self.projection.try_fold_with(folder)?,\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.local.visit_with(visitor)?;\n         self.projection.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         use crate::mir::Rvalue::*;\n         Ok(match self {\n             Use(op) => Use(op.try_fold_with(folder)?),\n@@ -237,7 +225,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n@@ -288,18 +276,15 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(match self {\n             Operand::Copy(place) => Operand::Copy(place.try_fold_with(folder)?),\n             Operand::Move(place) => Operand::Move(place.try_fold_with(folder)?),\n             Operand::Constant(c) => Operand::Constant(c.try_fold_with(folder)?),\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n             Operand::Constant(ref c) => c.visit_with(visitor),\n@@ -308,10 +293,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         use crate::mir::ProjectionElem::*;\n \n         Ok(match self {\n@@ -326,10 +308,7 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         })\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(\n-        &self,\n-        visitor: &mut Vs,\n-    ) -> ControlFlow<Vs::BreakTy> {\n+    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         use crate::mir::ProjectionElem::*;\n \n         match self {\n@@ -341,44 +320,41 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Field {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(Constant {\n             span: self.span,\n             user_ty: self.user_ty.try_fold_with(folder)?,\n             literal: self.literal.try_fold_with(folder)?,\n         })\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.literal.visit_with(visitor)?;\n         self.user_ty.visit_with(visitor)\n     }\n@@ -390,6 +366,12 @@ impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n         folder.try_fold_mir_const(self)\n     }\n \n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_mir_const(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperFoldable<'tcx> for ConstantKind<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,"}, {"sha": "6d7e60ecc31be5b41c49f285abe1f6b4c1ecf5d1", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,5 +1,5 @@\n use crate::mir;\n-use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "5469aeb4c2ce057901bdcaf64fabbd7b3e87237a", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 93, "deletions": 63, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -15,39 +15,44 @@\n //! the ones containing the most important type-related information, such as\n //! `Ty`, `Predicate`, `Region`, and `Const`.\n //!\n-//! There are two traits involved in each traversal type.\n-//! - The first trait is `TypeFoldable`, which is implemented once for many\n-//!   types. This includes both (a) types of interest, and (b) all other\n-//!   relevant types, including generic containers like `Vec` and `Option`. It\n-//!   defines a \"skeleton\" of how they should be traversed, for both folding\n-//!   and visiting.\n-//! - The second trait is `TypeFolder`/`FallibleTypeFolder` (for\n-//!   infallible/fallible folding traversals) or `TypeVisitor` (for visiting\n-//!   traversals). One of these is implemented for each folder/visitor. This\n-//!   defines how types of interest are handled.\n+//! There are three traits involved in each traversal type.\n+//! - `TypeFoldable`. This is implemented once for many types. This includes\n+//!   both:\n+//!   - Types of interest, for which the the methods delegate to the\n+//!     folder/visitor.\n+//!   - All other types, including generic containers like `Vec` and `Option`.\n+//!     It defines a \"skeleton\" of how they should be traversed, for both\n+//!     folding and visiting.\n+//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n+//!   and defines the traversal \"skeleton\" for these types.\n+//! - `TypeFolder`/`FallibleTypeFolder` (for infallible/fallible folding\n+//!   traversals) or `TypeVisitor` (for visiting traversals). One of these is\n+//!   implemented for each folder/visitor. This defines how types of interest\n+//!   are folded/visited.\n //!\n //! This means each traversal is a mixture of (a) generic traversal operations,\n //! and (b) custom fold/visit operations that are specific to the\n //! folder/visitor.\n //! - The `TypeFoldable` impls handle most of the traversal, and call into\n //!   `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` when they encounter a\n //!   type of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may also call back into\n-//!   a `TypeFoldable` impl, because (a) the types of interest are recursive\n-//!   and can contain other types of interest, and (b) each folder/visitor\n-//!   might provide custom handling only for some types of interest, or only\n-//!   for some variants of each type of interest, and then use default\n-//!   traversal for the remaining cases.\n+//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may call into another\n+//!   `TypeFoldable` impl, because some of the types of interest are recursive\n+//!   and can contain other types of interest.\n+//! - A `TypeFolder`/`FallibleTypeFolder`/`TypeVisitor` may also call into\n+//!   a `TypeSuperFoldable` impl, because each folder/visitor might provide\n+//!   custom handling only for some types of interest, or only for some\n+//!   variants of each type of interest, and then use default traversal for the\n+//!   remaining cases.\n //!\n //! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n-//! TypeFoldable`, and an instance `S(ty, u)`, it would be visited like so:\n+//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be visited like so:\n //! ```text\n //! s.visit_with(visitor) calls\n-//! - s.super_visit_with(visitor) calls\n-//!   - ty.visit_with(visitor) calls\n-//!     - visitor.visit_ty(ty) may call\n-//!       - ty.super_visit_with(visitor)\n-//!   - u.visit_with(visitor)\n+//! - ty.visit_with(visitor) calls\n+//!   - visitor.visit_ty(ty) may call\n+//!     - ty.super_visit_with(visitor)\n+//! - u.visit_with(visitor)\n //! ```\n use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n@@ -66,18 +71,17 @@ use std::ops::ControlFlow;\n /// To implement this conveniently, use the derive macro located in\n /// `rustc_macros`.\n pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n-    /// The main entry point for folding. To fold a value `t` with a folder `f`\n+    /// The entry point for folding. To fold a value `t` with a folder `f`\n     /// call: `t.try_fold_with(f)`.\n     ///\n-    /// For types of interest (such as `Ty`), this default is overridden with a\n-    /// method that calls a folder method specifically for that type (such as\n+    /// For most types, this just traverses the value, calling `try_fold_with`\n+    /// on each field/element.\n+    ///\n+    /// For types of interest (such as `Ty`), the implementation of method\n+    /// calls a folder method specifically for that type (such as\n     /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n     /// to `TypeFolder`.\n-    ///\n-    /// For other types, this default is used.\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_super_fold_with(folder)\n-    }\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error>;\n \n     /// A convenient alternative to `try_fold_with` for use with infallible\n     /// folders. Do not override this method, to ensure coherence with\n@@ -86,40 +90,17 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.try_fold_with(folder).into_ok()\n     }\n \n-    /// Traverses the type in question, typically by calling `try_fold_with` on\n-    /// each field/element. This is true even for types of interest such as\n-    /// `Ty`. This should only be called within `TypeFolder` methods, when\n-    /// non-custom traversals are desired for types of interest.\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error>;\n-\n-    /// A convenient alternative to `try_super_fold_with` for use with\n-    /// infallible folders. Do not override this method, to ensure coherence\n-    /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n-        self.try_super_fold_with(folder).into_ok()\n-    }\n-\n     /// The entry point for visiting. To visit a value `t` with a visitor `v`\n     /// call: `t.visit_with(v)`.\n     ///\n-    /// For types of interest (such as `Ty`), this default is overridden with a\n-    /// method that calls a visitor method specifically for that type (such as\n+    /// For most types, this just traverses the value, calling `visit_with` on\n+    /// each field/element.\n+    ///\n+    /// For types of interest (such as `Ty`), the implementation of this method\n+    /// that calls a visitor method specifically for that type (such as\n     /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n     /// `TypeVisitor`.\n-    ///\n-    /// For other types, this default is used.\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.super_visit_with(visitor)\n-    }\n-\n-    /// Traverses the type in question, typically by calling `visit_with` on\n-    /// each field/element. This is true even for types of interest such as\n-    /// `Ty`. This should only be called within `TypeVisitor` methods, when\n-    /// non-custom traversals are desired for types of interest.\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n \n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n@@ -219,9 +200,40 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n+// This trait is implemented for types of interest.\n+pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n+    /// Provides a default fold for a type of interest. This should only be\n+    /// called within `TypeFolder` methods, when a non-custom traversal is\n+    /// desired for the value of the type of interest passed to that method.\n+    /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n+    /// `ty.try_super_fold_with(self)`, but any other folding should be done\n+    /// with `xyz.try_fold_with(self)`.\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error>;\n+\n+    /// A convenient alternative to `try_super_fold_with` for use with\n+    /// infallible folders. Do not override this method, to ensure coherence\n+    /// with `try_super_fold_with`.\n+    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+        self.try_super_fold_with(folder).into_ok()\n+    }\n+\n+    /// Provides a default visit for a type of interest. This should only be\n+    /// called within `TypeVisitor` methods, when a non-custom traversal is\n+    /// desired for the value of the type of interest passed to that method.\n+    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n+    /// `ty.super_visit_with(self)`, but any other visiting should be done\n+    /// with `xyz.visit_with(self)`.\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+}\n+\n /// This trait is implemented for every folding traversal. There is a fold\n /// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold.\n+/// that does an \"identity\" fold. Implementations of these methods often fall\n+/// back to a `super_fold_with` method if the primary argument doesn't\n+/// satisfy a particular condition.\n ///\n /// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n /// associated type is something other than the default `!`) then\n@@ -263,6 +275,13 @@ pub trait TypeFolder<'tcx>: Sized {\n         c.super_fold_with(self)\n     }\n \n+    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx>\n+    where\n+        Self: TypeFolder<'tcx, Error = !>,\n+    {\n+        uv.super_fold_with(self)\n+    }\n+\n     fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>\n     where\n         Self: TypeFolder<'tcx, Error = !>,\n@@ -305,6 +324,13 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n         c.try_super_fold_with(self)\n     }\n \n+    fn try_fold_unevaluated(\n+        &mut self,\n+        c: ty::Unevaluated<'tcx>,\n+    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+        c.try_super_fold_with(self)\n+    }\n+\n     fn try_fold_predicate(\n         &mut self,\n         p: ty::Predicate<'tcx>,\n@@ -385,13 +411,17 @@ pub trait TypeVisitor<'tcx>: Sized {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n         uv.super_visit_with(self)\n     }\n \n     fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         p.super_visit_with(self)\n     }\n+\n+    fn visit_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        c.super_visit_with(self)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -514,7 +544,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 t: &Binder<'tcx, T>,\n             ) -> ControlFlow<Self::BreakTy> {\n                 self.outer_index.shift_in(1);\n-                let result = t.as_ref().skip_binder().visit_with(self);\n+                let result = t.super_visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n@@ -1280,7 +1310,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n \n     #[inline]\n     #[instrument(level = \"trace\")]\n-    fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_unevaluated_const(uv);\n         trace!(r.flags=?flags);\n         if flags.intersects(self.flags) {"}, {"sha": "b7130e69f3501c5fd46097939d1d5518b3b3fdc0", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,7 +1,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{InternalSubsts, Subst};\n-use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};"}, {"sha": "48ac7ecdf050fe480ba275568d01185bc88fa3f2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -9,7 +9,9 @@\n //!\n //! [\"The `ty` module: representing types\"]: https://rustc-dev-guide.rust-lang.org/ty.html\n \n-pub use self::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor};\n+pub use self::fold::{\n+    FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -1434,7 +1436,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n-    fn try_super_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1445,7 +1447,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         ))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)?;\n         self.constness().visit_with(visitor)"}, {"sha": "7328b18a3283aedc3b5250e6af9b1a798578452a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,6 +1,9 @@\n use crate::mir::interpret::{AllocRange, ConstValue, GlobalAlloc, Pointer, Provenance, Scalar};\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{\n+    self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n+};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sso::SsoHashSet;"}, {"sha": "9759bec996e96db87557596af700d0da8ef1779f", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 96, "deletions": 138, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -4,7 +4,7 @@\n \n use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Term, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n@@ -672,27 +672,24 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n \n /// AdtDefs are basically the same as a DefId.\n impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        _folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(T, U), F::Error> {\n         Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n@@ -701,7 +698,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n     for (A, B, C)\n {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(A, B, C), F::Error> {\n@@ -712,7 +709,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n         ))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)?;\n         self.2.visit_with(visitor)\n@@ -734,7 +731,7 @@ EnumTypeFoldableImpl! {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -772,13 +769,13 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -816,123 +813,96 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        self.try_map_bound(|ty| ty.try_fold_with(folder))\n-    }\n-\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().0.visit_with(visitor)\n     }\n+}\n+\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_binder(self)\n+    }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.as_ref().0.visit_with(visitor)\n+        visitor.visit_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n \n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_binder(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_binder(self)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         use crate::ty::InstanceDef::*;\n         Ok(Self {\n             substs: self.substs.try_fold_with(folder)?,\n@@ -958,7 +928,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)?;\n         match self.def {\n@@ -980,19 +950,26 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.instance.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_ty(self)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_ty(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1037,10 +1014,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n     }\n \n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_ty(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -1082,50 +1055,36 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             | ty::Foreign(..) => ControlFlow::CONTINUE,\n         }\n     }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_region(self)\n+    }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_ty(*self)\n+        visitor.visit_region(*self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_region(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_region(*self)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n \n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        let new = self.kind().try_fold_with(folder)?;\n-        Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.kind().visit_with(visitor)\n-    }\n-\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n@@ -1139,33 +1098,51 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n+        let new = self.kind().try_fold_with(folder)?;\n+        Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.kind().visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_const(self)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_const(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1179,25 +1156,14 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n         }\n     }\n \n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        folder.try_fold_const(self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.val().visit_with(visitor)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_const(*self)\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(match self {\n             ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),\n             ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),\n@@ -1209,7 +1175,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         })\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n@@ -1223,19 +1189,26 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        _folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        folder.try_fold_unevaluated(self)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        visitor.visit_unevaluated(*self)\n+    }\n+}\n+\n+impl<'tcx> TypeSuperFoldable<'tcx> for ty::Unevaluated<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1247,42 +1220,27 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n         })\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_unevaluated_const(*self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(ty::Unevaluated {\n-            def: self.def,\n-            substs: self.substs.try_fold_with(folder)?,\n-            promoted: self.promoted,\n-        })\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(self.expand().try_fold_with(folder)?.shrink())\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        visitor.visit_unevaluated_const(self.expand())\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.substs.visit_with(visitor)\n+        self.expand().visit_with(visitor)\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE\n     }\n }"}, {"sha": "cc85859e1cc0a1892da8a633282104be8c4e37d9", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -7,7 +7,8 @@ use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeVisitor,\n+    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n+    TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n use polonius_engine::Atom;"}, {"sha": "88c88e357d9d9b0639db48e1c375fde97746a9c3", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -2,7 +2,9 @@\n \n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor};\n+use crate::ty::fold::{\n+    FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n@@ -196,18 +198,15 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n             GenericArgKind::Type(ty) => ty.try_fold_with(folder).map(Into::into),\n             GenericArgKind::Const(ct) => ct.try_fold_with(folder).map(Into::into),\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -425,10 +424,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n         // The match arms are in order of frequency. The 1, 2, and 0 cases are\n@@ -454,16 +450,13 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n         // When compiling stage 2, I get the following results:\n@@ -493,7 +486,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }"}, {"sha": "22cb46a4cbcc2728b24cc9652806474e7bdc7d5d", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,11 +1,12 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFolder};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n-use crate::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{\n+    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};"}, {"sha": "dc1f1c9927d5d5613b3adecf825fa9c43e0833e5", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{\n     self,\n-    fold::{TypeFoldable, TypeVisitor},\n+    fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor},\n     query::Providers,\n     subst::SubstsRef,\n     Const, Ty, TyCtxt,"}, {"sha": "e77e5a3ca022aa871a5c56700f77ab43f2f903d6", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -20,11 +20,10 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n use rustc_middle::span_bug;\n use rustc_middle::thir::abstract_const::Node as ACNode;\n-use rustc_middle::ty::fold::TypeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, Ident};\n@@ -181,7 +180,8 @@ where\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {\n         let tcx = self.def_id_visitor.tcx();\n-        // InternalSubsts are not visited here because they are visited below in `super_visit_with`.\n+        // InternalSubsts are not visited here because they are visited below\n+        // in `super_visit_with`.\n         match *ty.kind() {\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), ..)\n             | ty::Foreign(def_id)"}, {"sha": "c1faa15d43cbeac1ba17881e0a541c1416b92856", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt as _};\n use rustc_infer::traits::{Obligation, ObligationCause, TraitEngine};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, OpaqueHiddenType, OpaqueTypeKey, ToPredicate, Ty, TyCtxt};\n use rustc_span::Span;"}, {"sha": "4bcd3bdd1ef451c0778f672b50fde3abb83f8da2", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -6,7 +6,7 @@ use super::*;\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n-use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{Region, RegionVid, Term};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "255b52584edc69997d3623025ec3b5e537b894a5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -27,7 +27,7 @@ use rustc_infer::traits::TraitEngine;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n };"}, {"sha": "132c335a7e65d5e4dc3d09d71b9cf133c1482f79", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -18,7 +18,9 @@ use rustc_errors::{FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+};\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n@@ -814,10 +816,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_unevaluated_const(\n-            &mut self,\n-            uv: ty::Unevaluated<'tcx>,\n-        ) -> ControlFlow<Self::BreakTy> {\n+        fn visit_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //"}, {"sha": "9f75bdb2533e6dcfb72a6f2b541df606527021a6", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -514,7 +514,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                             self.selcx.infcx().report_overflow_error(&obligation, true);\n                         }\n \n-                        let substs = substs.super_fold_with(self);\n+                        let substs = substs.fold_with(self);\n                         let generic_ty = self.tcx().bound_type_of(def_id);\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.depth += 1;\n@@ -531,8 +531,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 // placeholders (see branch below). *Also*, we know that we can\n                 // register an obligation to *later* project, since we know\n                 // there won't be bound vars there.\n-\n-                let data = data.super_fold_with(self);\n+                let data = data.fold_with(self);\n                 let normalized_ty = if self.eager_inference_replacement {\n                     normalize_projection_type(\n                         self.selcx,\n@@ -581,7 +580,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 let infcx = self.selcx.infcx();\n                 let (data, mapped_regions, mapped_types, mapped_consts) =\n                     BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n-                let data = data.super_fold_with(self);\n+                let data = data.fold_with(self);\n                 let normalized_ty = opt_normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n@@ -671,7 +670,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n             universe_indices,\n         };\n \n-        let value = value.super_fold_with(&mut replacer);\n+        let value = value.fold_with(&mut replacer);\n \n         (value, replacer.mapped_regions, replacer.mapped_types, replacer.mapped_consts)\n     }\n@@ -794,7 +793,7 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n             universe_indices,\n             current_index: ty::INNERMOST,\n         };\n-        value.super_fold_with(&mut replacer)\n+        value.fold_with(&mut replacer)\n     }\n }\n "}, {"sha": "e9e2dca17e9e4a1c47819a06291286cce6acd2b2", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n@@ -205,7 +205,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),\n \n                     Reveal::All => {\n-                        let substs = substs.try_super_fold_with(self)?;\n+                        let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             let obligation = Obligation::with_depth(\n@@ -242,7 +242,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // we don't need to replace them with placeholders (see branch below).\n \n                 let tcx = self.infcx.tcx;\n-                let data = data.try_super_fold_with(self)?;\n+                let data = data.try_fold_with(self)?;\n \n                 let mut orig_values = OriginalQueryValues::default();\n                 // HACK(matthewjasper) `'static` is special-cased in selection,\n@@ -281,7 +281,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         &mut self.universes,\n                         data,\n                     );\n-                let data = data.try_super_fold_with(self)?;\n+                let data = data.try_fold_with(self)?;\n \n                 let mut orig_values = OriginalQueryValues::default();\n                 // HACK(matthewjasper) `'static` is special-cased in selection,\n@@ -334,7 +334,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         &mut self,\n         constant: mir::ConstantKind<'tcx>,\n     ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        let constant_kind = match constant {\n+        Ok(match constant {\n             mir::ConstantKind::Ty(c) => {\n                 let const_folded = c.try_fold_with(self)?;\n                 match const_folded.val() {\n@@ -347,8 +347,6 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 }\n             }\n             mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n-        };\n-\n-        Ok(constant_kind)\n+        })\n     }\n }"}, {"sha": "bc2ce31df6d93ea4013808238a42ad73269a7a2c", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n "}, {"sha": "3de2fa2215bb2d7e0df399e12f01862ac5e4ec6f", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -9,7 +9,7 @@\n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable,\n+    self, AssocItemContainer, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n };\n \n use rustc_ast::ast;"}, {"sha": "4fd512d7b8de25aabf8daecc515e1ad567db3d82", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -33,9 +33,10 @@\n \n use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n-use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+};\n use rustc_span::def_id::DefId;\n \n use chalk_ir::{FnSig, ForeignDefId};"}, {"sha": "9c450fe1e32a6eea5fc9b94454138eadf0c4b17b", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -3,7 +3,9 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};"}, {"sha": "80abb28ee58c1699fa48284a35bb1a1e74675783", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -17,11 +17,10 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnv, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};"}, {"sha": "17a1f619ee160507cd783fea1de8f13eb9076690", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -9,8 +9,9 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n-use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitor,\n+};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;"}, {"sha": "d506314eb939ee959e07ddb84267678245e4804f", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeVisitor,\n+    TypeSuperFoldable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};"}, {"sha": "dc135f002f483a789309750374ddbe245faea5ad", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;"}, {"sha": "9ddfc8d5cc82b8d9dc20dd46b1507238f3a49e02", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -9,7 +9,9 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n-use rustc_middle::ty::{self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitor,\n+};\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n@@ -439,7 +441,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n             }\n \n             match t.kind() {\n-                ty::Adt(def, substs) if def.is_phantom_data() => substs.super_visit_with(self),\n+                ty::Adt(def, substs) if def.is_phantom_data() => substs.visit_with(self),\n                 ty::Adt(def, substs) => {\n                     // @lcnr: This is the only place where cycles can happen. We avoid this\n                     // by only visiting each `DefId` once."}, {"sha": "451a953691bae8d958e1d15d5b4c08f352ce4d54", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "fc299057f4bf106649c4291e2663f6fd32f79848", "filename": "compiler/rustc_typeck/src/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fconstrained_generic_params.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::fold::{TypeFoldable, TypeSuperFoldable, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;"}, {"sha": "fb178cbd95e7befc5a7aa23097e7816085147228", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable};\n+use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable, TypeSuperFoldable};\n use rustc_trait_selection::traits::auto_trait::{self, AutoTraitResult};\n \n use std::fmt::Debug;"}, {"sha": "27678c8ba3c469af9d7af04de25d90bb3c6639e6", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a7aa7016de32f4d991c30bfa40d3911e18a213/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a7aa7016de32f4d991c30bfa40d3911e18a213/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=64a7aa7016de32f4d991c30bfa40d3911e18a213", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n \n use super::LET_UNIT_VALUE;\n "}]}