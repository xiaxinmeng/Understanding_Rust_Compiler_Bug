{"sha": "a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "node_id": "C_kwDOAAsO6NoAKGExNWNiNDkzNjI5NzFhMzYwYzVmZDBhZDg4ZTdhZGQzYmQ5YWM1ZDY", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2021-12-14T21:49:49Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2021-12-14T21:49:49Z"}, "message": "#91836: Clarify error on casting larger integers to char", "tree": {"sha": "228f630f6bb3f17835d96aebd8316ddc30bb2df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/228f630f6bb3f17835d96aebd8316ddc30bb2df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmG5Ea4ACgkQxBeqnEA5\n78+KKwgAiUnBL6Lo6pdeGxPS6HVHFe7p9ENv7F3sVUALTc8BvoX3sci5gguontNH\nhWkYgMGjr98Pk2BXnpigsqv3h3iM0ttUJG2IgwW2JAoJqupq1cmwh5WYs7sd2K9k\nn/xmcgIRv4lL5aBAegS6Q0aaISsAlzfYlPJNJEivmWh4c9vKArQE7VvbptWMGjor\nYkYrF11hUj/50E0jNFyPxgyu6TyVYmRrZgH4/7VpLu8eRChl+qsf7bahLbB10pkd\nU2l7mOm7BVXk/uUTjzBmxJaIezJiR0Pw5Oghiu1oeEUieWCY7LvepNqqRfKtRttx\n+SS1H8t38Emkne/a5WVZdXJGjtmN9w==\n=/Kkk\n-----END PGP SIGNATURE-----", "payload": "tree 228f630f6bb3f17835d96aebd8316ddc30bb2df7\nparent 06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27\nauthor George Bateman <george.bateman16@gmail.com> 1639518589 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1639518589 +0000\n\n#91836: Clarify error on casting larger integers to char\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "html_url": "https://github.com/rust-lang/rust/commit/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "html_url": "https://github.com/rust-lang/rust/commit/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "806f0001c60fda3ac92c55637efdcc4b6c79fdf2", "filename": "compiler/rustc_error_codes/src/error_codes/E0604.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "raw_url": "https://github.com/rust-lang/rust/raw/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md?ref=a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "patch": "@@ -6,11 +6,16 @@ Erroneous code example:\n 0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n ```\n \n-As the error message indicates, only `u8` can be cast into `char`. Example:\n+`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n+0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\n+those ranges so only `u8` may be cast to `char`.\n+\n+To allow larger values, use `char::from_u32`, which checks the value is valid.\n \n ```\n-let c = 86u8 as char; // ok!\n-assert_eq!(c, 'V');\n+assert_eq!(86u8 as char, 'V'); // ok!\n+assert_eq!(char::from_u32(0x3B1), Some('\u03b1')); // ok!\n+assert_eq!(char::from_u32(0xD800), None); // not a USV.\n ```\n \n For more information about casts, take a look at the Type cast section in"}, {"sha": "f6b5e0084d186aa4ebe43267ffd1cb6fdd9f6512", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "patch": "@@ -337,6 +337,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     self.expr_ty\n                 )\n                 .span_label(self.span, \"invalid cast\")\n+                .span_help(self.span, \"try `char::from_u32` instead\")\n                 .emit();\n             }\n             CastError::NonScalar => {"}]}