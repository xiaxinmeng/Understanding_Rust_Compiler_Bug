{"sha": "f8a7cc678db857ac177e177020e2bc051822f9a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YTdjYzY3OGRiODU3YWMxNzdlMTc3MDIwZTJiYzA1MTgyMmY5YTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-15T12:44:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-15T12:57:19Z"}, "message": "Document auto_import as a feature", "tree": {"sha": "40af7e0110d0c22df979c0f40c3cdcbce2599649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40af7e0110d0c22df979c0f40c3cdcbce2599649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a7cc678db857ac177e177020e2bc051822f9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a7cc678db857ac177e177020e2bc051822f9a5", "html_url": "https://github.com/rust-lang/rust/commit/f8a7cc678db857ac177e177020e2bc051822f9a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a7cc678db857ac177e177020e2bc051822f9a5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a38554f86e5e1b41b111ed8ccc688e84a9d5ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a38554f86e5e1b41b111ed8ccc688e84a9d5ae4", "html_url": "https://github.com/rust-lang/rust/commit/3a38554f86e5e1b41b111ed8ccc688e84a9d5ae4"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "4a7059c83da853f5d7d665fb518e984b036b8d05", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f8a7cc678db857ac177e177020e2bc051822f9a5/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a7cc678db857ac177e177020e2bc051822f9a5/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=f8a7cc678db857ac177e177020e2bc051822f9a5", "patch": "@@ -6,6 +6,61 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n \n+// Feature: Import Insertion\n+//\n+// Using the `auto-import` assist it is possible to insert missing imports for unresolved items.\n+// When inserting an import it will do so in a structured manner by keeping imports grouped,\n+// separated by a newline in the following order:\n+//\n+// - `std` and `core`\n+// - External Crates\n+// - Current Crate, paths prefixed by `crate`\n+// - Current Module, paths prefixed by `self`\n+// - Super Module, paths prefixed by `super`\n+//\n+// Example:\n+// ```rust\n+// use std::fs::File;\n+//\n+// use itertools::Itertools;\n+// use syntax::ast;\n+//\n+// use crate::utils::insert_use;\n+//\n+// use self::auto_import;\n+//\n+// use super::AssistContext;\n+// ```\n+//\n+// .Merge Behaviour\n+//\n+// It is possible to configure how use-trees are merged with the `importMergeBehaviour` setting.\n+// It has the following configurations:\n+//\n+// - `full`: This setting will cause auto-import to always completely merge use-trees that share the\n+//  same path prefix while also merging inner trees that share the same path-prefix. This kind of\n+//  nesting is only supported in Rust versions later than 1.24.\n+// - `last`: This setting will cause auto-import to merge use-trees as long as the resulting tree\n+//  will only contain a nesting of single segment paths at the very end.\n+// - `none`: This setting will cause auto-import to never merge use-trees keeping them as simple\n+//  paths.\n+//\n+// In `VS Code` the configuration for this is `rust-analyzer.assist.importMergeBehaviour`.\n+//\n+// .Import Prefix\n+//\n+// The style of imports in the same crate is configurable through the `importPrefix` setting.\n+// It has the following configurations:\n+//\n+// - `by_crate`: This setting will force paths to be always absolute, starting with the `crate`\n+//  prefix, unless the item is defined outside of the current crate.\n+// - `by_self`: This setting will force paths that are relative to the current module to always\n+//  start with `self`. This will result in paths that always start with either `crate`, `self`,\n+//  `super` or an extern crate identifier.\n+// - `plain`: This setting does not impose any restrictions in imports.\n+//\n+// In `VS Code` the configuration for this is `rust-analyzer.assist.importPrefix`.\n+\n // Assist: auto_import\n //\n // If the name is unresolved, provides all possible imports for it."}]}