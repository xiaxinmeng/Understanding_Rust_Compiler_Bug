{"sha": "3f7380ccec2ebb7809b05d43d6241206650ab02b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNzM4MGNjZWMyZWJiNzgwOWIwNWQ0M2Q2MjQxMjA2NjUwYWIwMmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-20T01:02:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-20T01:03:19Z"}, "message": "rustc: Change smallintmap to use an ivec and use it for the node type table. 3x typechecking speedup.", "tree": {"sha": "6e59e70722688190973ef371918629afd6f469f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e59e70722688190973ef371918629afd6f469f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7380ccec2ebb7809b05d43d6241206650ab02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7380ccec2ebb7809b05d43d6241206650ab02b", "html_url": "https://github.com/rust-lang/rust/commit/3f7380ccec2ebb7809b05d43d6241206650ab02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7380ccec2ebb7809b05d43d6241206650ab02b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cdef277b24e11ab48932c38a14aaa5bd5f19bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdef277b24e11ab48932c38a14aaa5bd5f19bfe", "html_url": "https://github.com/rust-lang/rust/commit/8cdef277b24e11ab48932c38a14aaa5bd5f19bfe"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "70071931732bd288fcba0ec0655f62f7d969136f", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3f7380ccec2ebb7809b05d43d6241206650ab02b", "patch": "@@ -352,7 +352,7 @@ type type_store = interner::interner[raw_t];\n type ty_param_substs_opt_and_ty = tup(option::t[vec[ty::t]], ty::t);\n \n type node_type_table =\n-    @mutable vec[mutable option::t[ty::ty_param_substs_opt_and_ty]];\n+    @smallintmap::smallintmap[ty::ty_param_substs_opt_and_ty];\n \n fn populate_type_store(&ctxt cx) {\n     intern(cx, ty_nil, none[str]);\n@@ -394,9 +394,8 @@ fn mk_rcache() -> creader_cache {\n }\n \n fn mk_ctxt(session::session s, resolve::def_map dm, constr_table cs) -> ctxt {\n-    let vec[mutable option::t[ty::ty_param_substs_opt_and_ty]] ntt_sub =\n-        [mutable ];\n-    let node_type_table ntt = @mutable ntt_sub;\n+    let node_type_table ntt =\n+        @smallintmap::mk[ty::ty_param_substs_opt_and_ty]();\n     auto tcache = new_def_hash[ty::ty_param_count_and_ty]();\n     auto items = new_def_hash[any_item]();\n     auto ts = @interner::mk[raw_t](hash_raw_ty, eq_raw_ty);\n@@ -1597,7 +1596,7 @@ fn ann_to_ty_param_substs_opt_and_ty(&ctxt cx, &ast::ann ann) ->\n    ty_param_substs_opt_and_ty {\n \n     // Pull out the node type table.\n-    alt ({ cx.node_types.(ann.id) }) {\n+    alt (smallintmap::find(*cx.node_types, ann.id)) {\n         case (none) {\n             cx.sess.bug(\"ann_to_ty_param_substs_opt_and_ty() called on an \" +\n                             \"untyped node\");"}, {"sha": "deb1f96eb18308997dbf1f5f9f1c4db9d2a71601", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3f7380ccec2ebb7809b05d43d6241206650ab02b", "patch": "@@ -42,6 +42,7 @@ import std::option;\n import std::option::none;\n import std::option::some;\n import std::option::from_maybe;\n+import std::smallintmap;\n import middle::tstate::ann::ts_ann;\n \n type ty_table = hashmap[ast::def_id, ty::t];\n@@ -385,12 +386,7 @@ fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast::ty ast_ty) -> ty::t {\n mod write {\n     fn inner(&node_type_table ntt, uint node_id,\n              &ty_param_substs_opt_and_ty tpot) {\n-        auto ntt_ = *ntt;\n-        vec::grow_set(ntt_,\n-                      node_id,\n-                      none[ty_param_substs_opt_and_ty],\n-                      some[ty_param_substs_opt_and_ty](tpot));\n-        *ntt = ntt_;\n+        smallintmap::insert(*ntt, node_id, tpot);\n     }\n \n     // Writes a type parameter count and type pair into the node type table.\n@@ -1173,13 +1169,6 @@ fn replace_expr_type(&@fn_ctxt fcx, &@ast::expr expr,\n     write::ty_fixup(fcx, ty::expr_ann(expr).id, tup(new_tps, new_tyt._1));\n }\n \n-fn replace_node_type_only(&ty::ctxt tcx, uint fixup, ty::t new_t) {\n-    auto fixup_opt = tcx.node_types.(fixup);\n-    auto tps = option::get[ty::ty_param_substs_opt_and_ty](fixup_opt)._0;\n-    tcx.node_types.(fixup) =\n-        some[ty::ty_param_substs_opt_and_ty](tup(tps, new_t));\n-}\n-\n \n // AST fragment checking\n fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {"}, {"sha": "0547c111d6578910ddea88d6bde0800b0c765d23", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=3f7380ccec2ebb7809b05d43d6241206650ab02b", "patch": "@@ -2,6 +2,7 @@\n \n import option::none;\n import option::some;\n+import uint::next_power_of_two;\n \n type operator2[T,U,V] = fn(&T, &U) -> V;\n \n@@ -110,7 +111,7 @@ fn slice_mut[T](&T[mutable?] v, uint start, uint end) -> T[mutable] {\n \n /// Expands the given vector in-place by appending `n` copies of `initval`.\n fn grow[T](&mutable T[] v, uint n, &T initval) {\n-    reserve(v, len(v) + n);\n+    reserve(v, next_power_of_two(len(v) + n));\n     let uint i = 0u;\n     while (i < n) {\n         v += ~[initval];\n@@ -120,7 +121,7 @@ fn grow[T](&mutable T[] v, uint n, &T initval) {\n \n // TODO: Remove me once we have slots.\n fn grow_mut[T](&mutable T[mutable] v, uint n, &T initval) {\n-    reserve(v, len(v) + n);\n+    reserve(v, next_power_of_two(len(v) + n));\n     let uint i = 0u;\n     while (i < n) {\n         v += ~[mutable initval];\n@@ -131,7 +132,7 @@ fn grow_mut[T](&mutable T[mutable] v, uint n, &T initval) {\n /// Calls `f` `n` times and appends the results of these calls to the given\n /// vector.\n fn grow_fn[T](&mutable T[] v, uint n, fn(uint)->T init_fn) {\n-    reserve(v, len(v) + n);\n+    reserve(v, next_power_of_two(len(v) + n));\n     let uint i = 0u;\n     while (i < n) {\n         v += ~[init_fn(i)];"}, {"sha": "b8cd89d0d24c8ba5fe94c0e4a15bade643c2255d", "filename": "src/lib/smallintmap.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Flib%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7380ccec2ebb7809b05d43d6241206650ab02b/src%2Flib%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsmallintmap.rs?ref=3f7380ccec2ebb7809b05d43d6241206650ab02b", "patch": "@@ -5,19 +5,21 @@\n import option::none;\n import option::some;\n \n-type smallintmap[T] = rec(mutable vec[mutable option::t[T]] v);\n+// FIXME: Should not be @; there's a bug somewhere in rustc that requires this\n+// to be.\n+type smallintmap[T] = @rec(mutable (option::t[T])[mutable] v);\n \n fn mk[T]() -> smallintmap[T] {\n-    let vec[mutable option::t[T]] v = [mutable ];\n-    ret rec(mutable v=v);\n+    let (option::t[T])[mutable] v = ~[mutable];\n+    ret @rec(mutable v=v);\n }\n \n fn insert[T](&smallintmap[T] m, uint key, &T val) {\n-    vec::grow_set[option::t[T]](m.v, key, none[T], some[T](val));\n+    ivec::grow_set[option::t[T]](m.v, key, none[T], some[T](val));\n }\n \n fn find[T](&smallintmap[T] m, uint key) -> option::t[T] {\n-    if (key < vec::len[option::t[T]](m.v)) { ret m.v.(key); }\n+    if (key < ivec::len[option::t[T]](m.v)) { ret m.v.(key); }\n     ret none[T];\n }\n \n@@ -36,7 +38,8 @@ fn contains_key[T](&smallintmap[T] m, uint key) -> bool {\n }\n \n fn truncate[T](&smallintmap[T] m, uint len) {\n-    m.v = vec::slice_mut[option::t[T]](m.v, 0u, len);\n+    m.v = ivec::slice_mut[option::t[T]](m.v, 0u, len);\n }\n \n-fn max_key[T](&smallintmap[T] m) -> uint { ret vec::len[option::t[T]](m.v); }\n\\ No newline at end of file\n+fn max_key[T](&smallintmap[T] m) -> uint { ret ivec::len[option::t[T]](m.v); }\n+"}]}