{"sha": "f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MGUyODVlMzA0ZjFmOGM1OGVhMGIxNDMyZDFmYWJkYTcyYWQwYzg=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-25T12:31:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T12:31:03Z"}, "message": "Rollup merge of #55173 - estebank:suggest-static, r=oli-obk\n\nSuggest appropriate syntax on missing lifetime specifier in return type\n\nSuggest using `'static` when a lifetime is missing in the return type\nwith a structured suggestion instead of a note.\n\nFix #55170.", "tree": {"sha": "00e8af0324268f5ecbb09d9a0ed9e76bdc7af80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e8af0324268f5ecbb09d9a0ed9e76bdc7af80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0beHCRBK7hj4Ov3rIwAAdHIIADsVzZTAgjCKEQ1tcSxHgkTX\ntu3aciB98BZ+mdCjYYn4qp4nyukfimXaUttVKiciKZS6IwKUtGDX0tOUx7EgrOv/\nF901/LEkbN+FBI24Sd4aGp5gC3x/uV1E0NvfuXjeNpRcZJbCiGc6wOIAprpF8YQ9\nrlez25lp5RmeRhcUeASW+59dTXjfFypTy9gjoGq1V5mBIseFoQ8QmtjAsrnezZVy\ngsdONKSGWCSFGyoQgSIXkH+WG5iNUO1aezdZzmj58FBZJgq6GCPg6xVTmNYeBc3Y\nbYTAnoSmUul19uj6txuU9TLXEoX1reDrDl0DplFK9GkZ/cpxpwn0ni4LngRTO70=\n=tvb3\n-----END PGP SIGNATURE-----\n", "payload": "tree 00e8af0324268f5ecbb09d9a0ed9e76bdc7af80a\nparent 6dfeb7602fed2678b5f18b1fb5fcb3c1e8c04ce2\nparent dd91c8fc5a7c097c508cdffdd236adc64dae01c9\nauthor Pietro Albini <pietro@pietroalbini.org> 1540470663 +0200\ncommitter GitHub <noreply@github.com> 1540470663 +0200\n\nRollup merge of #55173 - estebank:suggest-static, r=oli-obk\n\nSuggest appropriate syntax on missing lifetime specifier in return type\n\nSuggest using `'static` when a lifetime is missing in the return type\nwith a structured suggestion instead of a note.\n\nFix #55170.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "html_url": "https://github.com/rust-lang/rust/commit/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfeb7602fed2678b5f18b1fb5fcb3c1e8c04ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfeb7602fed2678b5f18b1fb5fcb3c1e8c04ce2", "html_url": "https://github.com/rust-lang/rust/commit/6dfeb7602fed2678b5f18b1fb5fcb3c1e8c04ce2"}, {"sha": "dd91c8fc5a7c097c508cdffdd236adc64dae01c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd91c8fc5a7c097c508cdffdd236adc64dae01c9", "html_url": "https://github.com/rust-lang/rust/commit/dd91c8fc5a7c097c508cdffdd236adc64dae01c9"}], "stats": {"total": 148, "additions": 103, "deletions": 45}, "files": [{"sha": "afb5f23db5b83d0c7a089632163dc059d90837f6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -1147,7 +1147,7 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n-                let span = t.span.shrink_to_lo();\n+                let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n                 let lifetime = match *region {\n                     Some(ref lt) => self.lower_lifetime(lt),\n                     None => self.elided_ref_lifetime(span),"}, {"sha": "361abb1689619e1cd92ee0557b54cfef1f17b292", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -2235,21 +2235,46 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let mut err = report_missing_lifetime_specifiers(self.tcx.sess, span, lifetime_refs.len());\n+        let mut add_label = true;\n \n         if let Some(params) = error {\n             if lifetime_refs.len() == 1 {\n-                self.report_elision_failure(&mut err, params);\n+                add_label = add_label && self.report_elision_failure(&mut err, params, span);\n             }\n         }\n+        if add_label {\n+            add_missing_lifetime_specifiers_label(&mut err, span, lifetime_refs.len());\n+        }\n \n         err.emit();\n     }\n \n+    fn suggest_lifetime(&self, db: &mut DiagnosticBuilder<'_>, span: Span, msg: &str) -> bool {\n+        match self.tcx.sess.source_map().span_to_snippet(span) {\n+            Ok(ref snippet) => {\n+                let (sugg, applicability) = if snippet == \"&\" {\n+                    (\"&'static \".to_owned(), Applicability::MachineApplicable)\n+                } else if snippet == \"'_\" {\n+                    (\"'static\".to_owned(), Applicability::MachineApplicable)\n+                } else {\n+                    (format!(\"{} + 'static\", snippet), Applicability::MaybeIncorrect)\n+                };\n+                db.span_suggestion_with_applicability(span, msg, sugg, applicability);\n+                false\n+            }\n+            Err(_) => {\n+                db.help(msg);\n+                true\n+            }\n+        }\n+    }\n+\n     fn report_elision_failure(\n         &mut self,\n         db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n-    ) {\n+        span: Span,\n+    ) -> bool {\n         let mut m = String::new();\n         let len = params.len();\n \n@@ -2304,33 +2329,32 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 \"this function's return type contains a borrowed value, but \\\n                  there is no value for it to be borrowed from\"\n             );\n-            help!(db, \"consider giving it a 'static lifetime\");\n+            self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\"\n             );\n-            help!(\n-                db,\n-                \"consider giving it an explicit bounded or 'static \\\n-                 lifetime\"\n-            );\n+            let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n+            self.suggest_lifetime(db, span, msg)\n         } else if elided_len == 1 {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value, but \\\n                  the signature does not say which {} it is borrowed from\",\n                 m\n             );\n+            true\n         } else {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value, but \\\n                  the signature does not say whether it is borrowed from {}\",\n                 m\n             );\n+            true\n         }\n     }\n \n@@ -2744,26 +2768,28 @@ fn insert_late_bound_lifetimes(\n     }\n }\n \n-pub fn report_missing_lifetime_specifiers(\n+fn report_missing_lifetime_specifiers(\n     sess: &Session,\n     span: Span,\n     count: usize,\n ) -> DiagnosticBuilder<'_> {\n-    let mut err = struct_span_err!(\n+    struct_span_err!(\n         sess,\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n         if count > 1 { \"s\" } else { \"\" }\n-    );\n+    )\n+}\n \n-    let msg: Cow<'static, str> = if count > 1 {\n-        format!(\"expected {} lifetime parameters\", count).into()\n+fn add_missing_lifetime_specifiers_label(\n+    err: &mut DiagnosticBuilder<'_>,\n+    span: Span,\n+    count: usize,\n+) {\n+    if count > 1 {\n+        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n     } else {\n-        \"expected lifetime parameter\".into()\n+        err.span_label(span, \"expected lifetime parameter\");\n     };\n-\n-    err.span_label(span, msg);\n-\n-    err\n }"}, {"sha": "6b9d4ebb2987dd3f53376c99909d0c3e09041e7c", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -2,10 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-binding-only.rs:62:23\n    |\n LL | fn elision<T: Fn() -> &i32>() {\n-   |                       ^ expected lifetime parameter\n+   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "7906f0a30e4eb33a33306e9db4b2a1b9c0f6a303", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -2,10 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-return-only.rs:44:23\n    |\n LL | fn elision(_: fn() -> &i32) {\n-   |                       ^ expected lifetime parameter\n+   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "9fc35eae7052f694483ade5c2f33d843d6b037fd", "filename": "src/test/ui/foreign-fn-return-lifetime.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+extern \"C\" {\n+    pub fn g(_: &u8) -> &u8; // OK\n+    pub fn f() -> &'static u8; //~ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "941e7e05a3635f47d4f7d381fa42e8e3abc12a0a", "filename": "src/test/ui/foreign-fn-return-lifetime.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n extern \"C\" {\n-    fn g(_: &u8) -> &u8; // OK\n-    fn f() -> &u8; //~ ERROR missing lifetime specifier\n+    pub fn g(_: &u8) -> &u8; // OK\n+    pub fn f() -> &u8; //~ ERROR missing lifetime specifier\n }\n \n fn main() {}"}, {"sha": "583487656f24d714fa9f2bdcd6f85b5acb80e4b1", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -1,11 +1,10 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/foreign-fn-return-lifetime.rs:13:15\n+  --> $DIR/foreign-fn-return-lifetime.rs:15:19\n    |\n-LL |     fn f() -> &u8; //~ ERROR missing lifetime specifier\n-   |               ^ expected lifetime parameter\n+LL |     pub fn f() -> &u8; //~ ERROR missing lifetime specifier\n+   |                   ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "e592452b899444676d4825e976716455949fa724", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -2,10 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-13497.rs:12:5\n    |\n LL |     &str //~ ERROR missing lifetime specifier\n-   |     ^ expected lifetime parameter\n+   |     ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "0ac6316f0dcf8da9a96d6930cb0f7a4385d25e32", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -10,19 +10,17 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:14:40\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ^ expected lifetime parameter\n+   |                                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:17:22\n    |\n LL | fn parse_type_3() -> &str { unimplemented!() }\n-   |                      ^ expected lifetime parameter\n+   |                      ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4c7a1b5ea9ff046c5b3168e8c9ee57a308890c1f", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -2,10 +2,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:12:11\n    |\n LL | fn f() -> &isize {    //~ ERROR missing lifetime specifier\n-   |           ^ expected lifetime parameter\n+   |           ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:33\n@@ -27,28 +26,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:31:20\n    |\n LL | fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n-   |                    ^ expected lifetime parameter\n+   |                    ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:44:24\n    |\n LL | fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n-   |                        ^ expected lifetime parameter\n+   |                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:50:49\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n-   |                                                 ^ expected lifetime parameter\n+   |                                                 ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eb959bfbcb533a706e632794ee6e35055e9efc80", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -0,0 +1,12 @@\n+trait Future {\n+    type Item;\n+    type Error;\n+}\n+\n+use std::error::Error;\n+\n+fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "b2a3d9a94361fdfb73f767c29248ddd8989c8ef7", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -0,0 +1,11 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n+   |\n+LL | fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+   |                                            ^^^^^ help: consider giving it a 'static lifetime: `Error + 'static`\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "e56d008d2665f9e6a06b442ea89839584d026569", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50e285e304f1f8c58ea0b1432d1fabda72ad0c8/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=f50e285e304f1f8c58ea0b1432d1fabda72ad0c8", "patch": "@@ -20,10 +20,9 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:20:29\n    |\n LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n-   |                             ^^ expected lifetime parameter\n+   |                             ^^ help: consider giving it a 'static lifetime: `'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:26:35"}]}