{"sha": "9e70c4778371130ecc9ac5f1aff24000411eabd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzBjNDc3ODM3MTEzMGVjYzlhYzVmMWFmZjI0MDAwNDExZWFiZDg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-12-11T05:07:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Remove unused param_env parameter", "tree": {"sha": "b6efd1d73833f5cc8644e2f435de5a9fbae99869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6efd1d73833f5cc8644e2f435de5a9fbae99869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e70c4778371130ecc9ac5f1aff24000411eabd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e70c4778371130ecc9ac5f1aff24000411eabd8", "html_url": "https://github.com/rust-lang/rust/commit/9e70c4778371130ecc9ac5f1aff24000411eabd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e70c4778371130ecc9ac5f1aff24000411eabd8/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "html_url": "https://github.com/rust-lang/rust/commit/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e"}], "stats": {"total": 56, "additions": 7, "deletions": 49}, "files": [{"sha": "67cd9c40db6550f74328c55270c815ca7f61a51c", "filename": "src/librustc_mir/borrow_check/constraint_generation.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconstraint_generation.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -16,7 +16,6 @@ use crate::borrow_check::{\n \n pub(super) fn generate_constraints<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     liveness_constraints: &mut LivenessValues<RegionVid>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n@@ -30,7 +29,6 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n         location_table,\n         all_facts,\n         body,\n-        param_env,\n     };\n \n     for (bb, data) in body.basic_blocks().iter_enumerated() {\n@@ -41,7 +39,6 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n /// 'cg = the duration of the constraint generation process itself.\n struct ConstraintGeneration<'cg, 'cx, 'tcx> {\n     infcx: &'cg InferCtxt<'cx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     all_facts: &'cg mut Option<AllFacts>,\n     location_table: &'cg LocationTable,\n     liveness_constraints: &'cg mut LivenessValues<RegionVid>,\n@@ -226,7 +223,6 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n                         for &borrow_index in borrow_indices {\n                             let places_conflict = places_conflict::places_conflict(\n                                 self.infcx.tcx,\n-                                self.param_env,\n                                 self.body,\n                                 &self.borrow_set.borrows[borrow_index].borrowed_place,\n                                 place,"}, {"sha": "bb56c11872a29039e086838627db5c0bab629ba5", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -3,7 +3,7 @@ use rustc::mir::TerminatorKind;\n use rustc::mir::{BasicBlock, Body, Location, Place, ReadOnlyBodyAndCache, Rvalue};\n use rustc::mir::{BorrowKind, Mutability, Operand};\n use rustc::mir::{Statement, StatementKind};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::TyCtxt;\n use rustc_data_structures::graph::dominators::Dominators;\n \n use crate::dataflow::indexes::BorrowIndex;\n@@ -16,7 +16,6 @@ use crate::borrow_check::{\n \n pub(super) fn generate_invalidates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n     body: ReadOnlyBodyAndCache<'_, 'tcx>,\n@@ -33,7 +32,6 @@ pub(super) fn generate_invalidates<'tcx>(\n         let mut ig = InvalidationGenerator {\n             all_facts,\n             borrow_set,\n-            param_env,\n             tcx,\n             location_table,\n             body: &body,\n@@ -45,7 +43,6 @@ pub(super) fn generate_invalidates<'tcx>(\n \n struct InvalidationGenerator<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     all_facts: &'cx mut AllFacts,\n     location_table: &'cx LocationTable,\n     body: &'cx Body<'tcx>,\n@@ -337,13 +334,11 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n         );\n         let tcx = self.tcx;\n         let body = self.body;\n-        let param_env = self.param_env;\n         let borrow_set = self.borrow_set.clone();\n         let indices = self.borrow_set.borrows.indices();\n         each_borrow_involving_path(\n             self,\n             tcx,\n-            param_env,\n             body,\n             location,\n             (sd, place),"}, {"sha": "5174f17ab883930c507cf5a457494c03a0894093", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -239,7 +239,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         def_id,\n         &attributes,\n         &dead_unwinds,\n-        Borrows::new(tcx, &body, param_env, regioncx.clone(), &borrow_set),\n+        Borrows::new(tcx, &body, regioncx.clone(), &borrow_set),\n         |rs, i| DebugFormatted::new(&rs.location(i)),\n     ));\n     let flow_uninits = FlowAtLocation::new(do_dataflow(\n@@ -275,7 +275,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         infcx,\n         body,\n         mir_def_id: def_id,\n-        param_env,\n         move_data: &mdpe.move_data,\n         location_table,\n         movable_generator,\n@@ -418,7 +417,6 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n     mir_def_id: DefId,\n-    param_env: ty::ParamEnv<'tcx>,\n     move_data: &'cx MoveData<'tcx>,\n \n     /// Map from MIR `Location` to `LocationIndex`; created\n@@ -926,13 +924,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let body = self.body;\n         let body: &Body<'_> = &body;\n-        let param_env = self.param_env;\n         let location_table = self.location_table.start_index(location);\n         let borrow_set = self.borrow_set.clone();\n         each_borrow_involving_path(\n             self,\n             tcx,\n-            param_env,\n             body,\n             location,\n             (sd, place_span.0),\n@@ -1412,7 +1408,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         if places_conflict::borrow_conflicts_with_place(\n             self.infcx.tcx,\n-            self.param_env,\n             &self.body,\n             place,\n             borrow.kind,"}, {"sha": "151a2c4c19a7dccee35547793c3c7808c1a6de62", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -231,7 +231,6 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     constraint_generation::generate_constraints(\n         infcx,\n-        param_env,\n         &mut liveness_constraints,\n         &mut all_facts,\n         location_table,\n@@ -253,14 +252,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     );\n \n     // Generate various additional constraints.\n-    invalidation::generate_invalidates(\n-        infcx.tcx,\n-        param_env,\n-        &mut all_facts,\n-        location_table,\n-        body,\n-        borrow_set,\n-    );\n+    invalidation::generate_invalidates(infcx.tcx, &mut all_facts, location_table, body, borrow_set);\n \n     // Dump facts if requested.\n     let polonius_output = all_facts.and_then(|all_facts| {"}, {"sha": "6fb0bbceb1b5111531b69796987b43f92b881bb8", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -4,7 +4,7 @@ use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::BorrowKind;\n use rustc::mir::{BasicBlock, Body, Location, Place, PlaceBase};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::TyCtxt;\n use rustc_data_structures::graph::dominators::Dominators;\n \n /// Returns `true` if the borrow represented by `kind` is\n@@ -25,7 +25,6 @@ pub(super) enum Control {\n pub(super) fn each_borrow_involving_path<'tcx, F, I, S>(\n     s: &mut S,\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     _location: Location,\n     access_place: (AccessDepth, &Place<'tcx>),\n@@ -48,7 +47,6 @@ pub(super) fn each_borrow_involving_path<'tcx, F, I, S>(\n \n         if places_conflict::borrow_conflicts_with_place(\n             tcx,\n-            param_env,\n             body,\n             &borrowed.borrowed_place,\n             borrowed.kind,"}, {"sha": "3988221e06383121d624b87efce37c149eff3d07", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -23,15 +23,13 @@ crate enum PlaceConflictBias {\n /// dataflow).\n crate fn places_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     access_place: &Place<'tcx>,\n     bias: PlaceConflictBias,\n ) -> bool {\n     borrow_conflicts_with_place(\n         tcx,\n-        param_env,\n         body,\n         borrow_place,\n         BorrowKind::Mut { allow_two_phase_borrow: true },\n@@ -47,7 +45,6 @@ crate fn places_conflict<'tcx>(\n /// order to make the conservative choice and preserve soundness.\n pub(super) fn borrow_conflicts_with_place<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n@@ -68,21 +65,11 @@ pub(super) fn borrow_conflicts_with_place<'tcx>(\n         }\n     }\n \n-    place_components_conflict(\n-        tcx,\n-        param_env,\n-        body,\n-        borrow_place,\n-        borrow_kind,\n-        access_place,\n-        access,\n-        bias,\n-    )\n+    place_components_conflict(tcx, body, borrow_place, borrow_kind, access_place, access, bias)\n }\n \n fn place_components_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n@@ -135,7 +122,7 @@ fn place_components_conflict<'tcx>(\n     let borrow_base = &borrow_place.base;\n     let access_base = access_place.base;\n \n-    match place_base_conflict(tcx, param_env, borrow_base, access_base) {\n+    match place_base_conflict(tcx, borrow_base, access_base) {\n         Overlap::Arbitrary => {\n             bug!(\"Two base can't return Arbitrary\");\n         }\n@@ -308,7 +295,6 @@ fn place_components_conflict<'tcx>(\n // between `elem1` and `elem2`.\n fn place_base_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    _param_env: ty::ParamEnv<'tcx>,\n     elem1: &PlaceBase<'tcx>,\n     elem2: &PlaceBase<'tcx>,\n ) -> Overlap {"}, {"sha": "583075980ec974d0e82ef91960b4c583b168a389", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70c4778371130ecc9ac5f1aff24000411eabd8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=9e70c4778371130ecc9ac5f1aff24000411eabd8", "patch": "@@ -1,6 +1,6 @@\n use rustc::mir::{self, Body, Location, Place, PlaceBase};\n use rustc::ty::RegionVid;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::TyCtxt;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n@@ -30,7 +30,6 @@ rustc_index::newtype_index! {\n pub struct Borrows<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n \n     borrow_set: Rc<BorrowSet<'tcx>>,\n     borrows_out_of_scope_at_location: FxHashMap<Location, Vec<BorrowIndex>>,\n@@ -134,7 +133,6 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n     crate fn new(\n         tcx: TyCtxt<'tcx>,\n         body: &'a Body<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n         nonlexical_regioncx: Rc<RegionInferenceContext<'tcx>>,\n         borrow_set: &Rc<BorrowSet<'tcx>>,\n     ) -> Self {\n@@ -156,7 +154,6 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         Borrows {\n             tcx,\n             body,\n-            param_env,\n             borrow_set: borrow_set.clone(),\n             borrows_out_of_scope_at_location,\n             _nonlexical_regioncx: nonlexical_regioncx,\n@@ -219,7 +216,6 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n             let definitely_conflicting_borrows = other_borrows_of_local.filter(|&&i| {\n                 places_conflict(\n                     self.tcx,\n-                    self.param_env,\n                     self.body,\n                     &self.borrow_set.borrows[i].borrowed_place,\n                     place,"}]}