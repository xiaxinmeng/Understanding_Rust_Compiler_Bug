{"sha": "3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmY2RiN2Q2YTc1OGFjNGVkMWYyN2ZjZGE3N2MzNzJlZGFhYjRjMDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-11T01:22:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-11T02:16:22Z"}, "message": "Adjust the die macro to only accept ~str and to work in statement position", "tree": {"sha": "de69a4a3cf7eef65c15ba3858df96220194e778e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de69a4a3cf7eef65c15ba3858df96220194e778e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "html_url": "https://github.com/rust-lang/rust/commit/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed686aeac4c717a85175a0f3b63d3ff50c2f50a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed686aeac4c717a85175a0f3b63d3ff50c2f50a7", "html_url": "https://github.com/rust-lang/rust/commit/ed686aeac4c717a85175a0f3b63d3ff50c2f50a7"}], "stats": {"total": 88, "additions": 66, "deletions": 22}, "files": [{"sha": "120103bd65683dcefd8050707977ee5d5114fa60", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -26,9 +26,6 @@ use gc::{cleanup_stack_for_failure, gc, Word};\n pub type rust_task = c_void;\n \n extern mod rustrt {\n-    #[rust_stack]\n-    fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n-\n     #[rust_stack]\n     fn rust_upcall_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n \n@@ -47,11 +44,7 @@ extern mod rustrt {\n // gather_rust_rtcalls.\n #[rt(fail_)]\n pub fn rt_fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n-    unsafe {\n-        cleanup_stack_for_failure();\n-        rustrt::rust_upcall_fail(expr, file, line);\n-        cast::transmute(())\n-    }\n+    sys::begin_unwind_(expr, file, line);\n }\n \n #[rt(fail_bounds_check)]"}, {"sha": "62ced6019517fc41d3a3f3511d8748eed61fec42", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -15,7 +15,7 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n-use libc::c_void;\n+use libc::{c_void, c_char, size_t};\n \n pub type FreeGlue = fn(*TypeDesc, *c_void);\n \n@@ -43,6 +43,11 @@ extern mod rusti {\n     fn min_align_of<T>() -> uint;\n }\n \n+extern mod rustrt {\n+    #[rust_stack]\n+    fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n+}\n+\n /// Compares contents of two pointers using the default method.\n /// Equivalent to `*x1 == *x2`.  Useful for hashtables.\n pub pure fn shape_eq<T:Eq>(x1: &T, x2: &T) -> bool {\n@@ -108,6 +113,28 @@ pub pure fn log_str<T>(t: &T) -> ~str {\n     }\n }\n \n+/** Initiate task failure */\n+pub pure fn begin_unwind(msg: ~str, file: ~str, line: uint) -> ! {\n+    do str::as_buf(msg) |msg_buf, _msg_len| {\n+        do str::as_buf(file) |file_buf, _file_len| {\n+            unsafe {\n+                let msg_buf = cast::transmute(msg_buf);\n+                let file_buf = cast::transmute(file_buf);\n+                begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+            }\n+        }\n+    }\n+}\n+\n+// XXX: Temorary until rt::rt_fail_ goes away\n+pub pure fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n+    unsafe {\n+        gc::cleanup_stack_for_failure();\n+        rustrt::rust_upcall_fail(msg, file, line);\n+        cast::transmute(())\n+    }\n+}\n+\n #[cfg(test)]\n pub mod tests {\n "}, {"sha": "e9d871752aae39b4f8c9baade8917999eb9ce485", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -378,21 +378,10 @@ fn core_macros() -> ~str {\n \n     macro_rules! die(\n         ($msg: expr) => (\n-            {\n-                do core::str::as_buf($msg) |msg_buf, _msg_len| {\n-                    do core::str::as_buf(file!()) |file_buf, _file_len| {\n-                        unsafe {\n-                            let msg_buf = core::cast::transmute(msg_buf);\n-                            let file_buf = core::cast::transmute(file_buf);\n-                            let line = line!() as core::libc::size_t;\n-                            core::rt::rt_fail_(msg_buf, file_buf, line)\n-                        }\n-                    }\n-                }\n-            }\n+            core::sys::begin_unwind($msg, file!(), line!())\n         );\n         () => (\n-            die!(\\\"explicit failure\\\")\n+            die!(~\\\"explicit failure\\\")\n         )\n     )\n }\";"}, {"sha": "bbda5332c770049df7bff3b1fb477548a6228bbb", "filename": "src/test/compile-fail/die-not-unique.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:mismatched types\n+\n+fn main() {\n+    die!(\"test\");\n+}"}, {"sha": "3d293fc805d5ae83eb659ea6cd45b71e72bbbbef", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:test\n+\n+fn main() {\n+    let i: int = die!(~\"test\");\n+}\n\\ No newline at end of file"}, {"sha": "67eb6e6323010f3fa85e5635f7ab4bfc8368f9f0", "filename": "src/test/run-fail/die-macro-pure.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-pure.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern:test\n+\n+pure fn f() {\n+    die!(~\"test\");\n+}\n+\n+fn main() {\n+    f();\n+}\n\\ No newline at end of file"}, {"sha": "0885c17e121747112b7e259b35415fa853f73cb4", "filename": "src/test/run-fail/die-macro.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-fail%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:test\n+\n+fn main() {\n+    die!(~\"test\");\n+}\n\\ No newline at end of file"}, {"sha": "59d297473fe94a7c02e40017c08e2071e5868e15", "filename": "src/test/run-pass/die-macro.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=3fcdb7d6a758ac4ed1f27fcda77c372edaab4c09", "patch": "@@ -0,0 +1,11 @@\n+// Just testing that die!() type checks in statement or expr\n+\n+fn f() {\n+    die!();\n+\n+    let x: int = die!();\n+}\n+\n+fn main() {\n+\n+}"}]}