{"sha": "b7e26c32a1acce673a53877ef474d8c5fa6aa475", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTI2YzMyYTFhY2NlNjczYTUzODc3ZWY0NzRkOGM1ZmE2YWE0NzU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-01T11:15:34Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-01T11:15:34Z"}, "message": "Merge #1067\n\n1067: Take number of arguments at the call-site into account for signature help r=matklad a=kjeremy\n\nFixes #1065\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "0eeb436a035106bee49242ed599cbbb1b8fc13ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eeb436a035106bee49242ed599cbbb1b8fc13ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e26c32a1acce673a53877ef474d8c5fa6aa475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e26c32a1acce673a53877ef474d8c5fa6aa475", "html_url": "https://github.com/rust-lang/rust/commit/b7e26c32a1acce673a53877ef474d8c5fa6aa475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e26c32a1acce673a53877ef474d8c5fa6aa475/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6e4865de73aae64c9285dd0f3f89984a59c02c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4865de73aae64c9285dd0f3f89984a59c02c2e", "html_url": "https://github.com/rust-lang/rust/commit/6e4865de73aae64c9285dd0f3f89984a59c02c2e"}, {"sha": "80113876e26b5810741b4c18f02177b70f942652", "url": "https://api.github.com/repos/rust-lang/rust/commits/80113876e26b5810741b4c18f02177b70f942652", "html_url": "https://github.com/rust-lang/rust/commit/80113876e26b5810741b4c18f02177b70f942652"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "29fa7d30b4385c7f32921f40a86ce8d793204928", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b7e26c32a1acce673a53877ef474d8c5fa6aa475/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e26c32a1acce673a53877ef474d8c5fa6aa475/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=b7e26c32a1acce673a53877ef474d8c5fa6aa475", "patch": "@@ -28,6 +28,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n     let function = hir::source_binder::function_from_source(db, symbol.file_id, fn_def)?;\n \n     let mut call_info = CallInfo::new(db, function, fn_def)?;\n+\n     // If we have a calling expression let's find which argument we are on\n     let num_params = call_info.parameters.len();\n     let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n@@ -38,18 +39,28 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n         }\n     } else if num_params > 1 {\n         // Count how many parameters into the call we are.\n-        if let Some(ref arg_list) = calling_node.arg_list() {\n+        if let Some(arg_list) = calling_node.arg_list() {\n+            // Number of arguments specified at the call site\n+            let num_args_at_callsite = arg_list.args().count();\n+\n             let arg_list_range = arg_list.syntax().range();\n             if !arg_list_range.contains_inclusive(position.offset) {\n                 tested_by!(call_info_bad_offset);\n                 return None;\n             }\n \n-            let param = arg_list\n-                .args()\n-                .position(|arg| arg.syntax().range().contains(position.offset))\n-                .or(Some(num_params - 1))\n-                .unwrap();\n+            let mut param = std::cmp::min(\n+                num_args_at_callsite,\n+                arg_list\n+                    .args()\n+                    .take_while(|arg| arg.syntax().range().end() < position.offset)\n+                    .count(),\n+            );\n+\n+            // If we are in a method account for `self`\n+            if has_self {\n+                param = param + 1;\n+            }\n \n             call_info.active_parameter = Some(param);\n         }\n@@ -155,6 +166,17 @@ fn bar() { foo(3, <|>); }\"#,\n         assert_eq!(info.active_parameter, Some(1));\n     }\n \n+    #[test]\n+    fn test_fn_signature_two_args_empty() {\n+        let info = call_info(\n+            r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n+fn bar() { foo(<|>); }\"#,\n+        );\n+\n+        assert_eq!(info.parameters, vec!(\"x\".to_string(), \"y\".to_string()));\n+        assert_eq!(info.active_parameter, Some(0));\n+    }\n+\n     #[test]\n     fn test_fn_signature_for_impl() {\n         let info = call_info("}]}