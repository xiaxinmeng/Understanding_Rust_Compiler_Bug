{"sha": "fae883c113031805cedb853c4176ecfef0b62bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTg4M2MxMTMwMzE4MDVjZWRiODUzYzQxNzZlY2ZlZjBiNjJiYmM=", "commit": {"author": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-02-03T13:45:34Z"}, "committer": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-02-03T13:45:34Z"}, "message": "Fix broken auto-mac-ios-opt build", "tree": {"sha": "7933463685481ed24cfae8c3d4f05b6ea6a5048d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7933463685481ed24cfae8c3d4f05b6ea6a5048d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae883c113031805cedb853c4176ecfef0b62bbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWsgR+AAoJED7qN4oOp1jaNQcH/2D/xUzxSHwyBl1Ac4QxKOux\ng/eSPjOL4RHGDuEWbDmkQeR0ZGNeW1+JsN9gF6DSNe6j+dQMR+0z5zq5I9MIupm+\nFOHp5MCNpGajxiyzpA/NP/fB+a0qfOWkr/85xxp48B+vnOYvMQonWOkTvRmOWuEm\nKWyfFO4a06dHdpXl3MIXmrQs+D64v49lJ0t6/LLz+YbLyRDY/XjcvEXSracqnm4Z\noPF2QWYbHcR7XUj+xF9J06OBSy4T28FKJeOKULdMJQCeKY5kUUHNd1m5WSikFT6y\n2FxvaI4lleW4gWWUKko76vlhc+kGr6cgTrKz/AUzINf56K+BpW5bcb6CcXMP5qo=\n=uyxX\n-----END PGP SIGNATURE-----", "payload": "tree 7933463685481ed24cfae8c3d4f05b6ea6a5048d\nparent bb6e646c7b7c8c97982106aafc106b18a1913c81\nauthor Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454507134 +0300\ncommitter Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454507134 +0300\n\nFix broken auto-mac-ios-opt build\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae883c113031805cedb853c4176ecfef0b62bbc", "html_url": "https://github.com/rust-lang/rust/commit/fae883c113031805cedb853c4176ecfef0b62bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae883c113031805cedb853c4176ecfef0b62bbc/comments", "author": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e646c7b7c8c97982106aafc106b18a1913c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e646c7b7c8c97982106aafc106b18a1913c81", "html_url": "https://github.com/rust-lang/rust/commit/bb6e646c7b7c8c97982106aafc106b18a1913c81"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "5ee44bbfece2b0c98b8664b26ed5b590e8a66fde", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fae883c113031805cedb853c4176ecfef0b62bbc/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae883c113031805cedb853c4176ecfef0b62bbc/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=fae883c113031805cedb853c4176ecfef0b62bbc", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use prelude::v1::*;\n use io::prelude::*;\n use os::unix::prelude::*;\n \n@@ -23,11 +24,6 @@ use sys::fd::FileDesc;\n use sys::platform::raw;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n-use vec::Vec;\n-#[cfg(target_os = \"solaris\")]\n-use core_collections::borrow::ToOwned;\n-#[cfg(target_os = \"solaris\")]\n-use boxed::Box;\n \n pub struct File(FileDesc);\n "}, {"sha": "da77051459302cba0f77394d3f4b257d262af31a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fae883c113031805cedb853c4176ecfef0b62bbc/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae883c113031805cedb853c4176ecfef0b62bbc/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=fae883c113031805cedb853c4176ecfef0b62bbc", "patch": "@@ -507,28 +507,6 @@ pub fn home_dir() -> Option<PathBuf> {\n         fallback()\n     }).map(PathBuf::from);\n \n-    #[cfg(not(target_os = \"solaris\"))]\n-    unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n-                          buf: &mut Vec<c_char>) -> Option<()> {\n-        let mut result = ptr::null_mut();\n-        match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                               buf.capacity() as libc::size_t,\n-                               &mut result) {\n-            0 if !result.is_null() => Some(()),\n-            _ => None\n-        }\n-    }\n-\n-    #[cfg(target_os = \"solaris\")]\n-    unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n-                          buf: &mut Vec<c_char>) -> Option<()> {\n-        // getpwuid_r semantics is different on Illumos/Solaris:\n-        // http://illumos.org/man/3c/getpwuid_r\n-        let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                                      buf.capacity() as libc::size_t);\n-        if result.is_null() { None } else { Some(()) }\n-    }\n-\n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\",\n               target_os = \"nacl\"))]\n@@ -537,6 +515,28 @@ pub fn home_dir() -> Option<PathBuf> {\n                   target_os = \"ios\",\n                   target_os = \"nacl\")))]\n     unsafe fn fallback() -> Option<OsString> {\n+        #[cfg(not(target_os = \"solaris\"))]\n+        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                              buf: &mut Vec<c_char>) -> Option<()> {\n+            let mut result = ptr::null_mut();\n+            match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                                   buf.capacity() as libc::size_t,\n+                                   &mut result) {\n+                0 if !result.is_null() => Some(()),\n+                _ => None\n+            }\n+        }\n+\n+        #[cfg(target_os = \"solaris\")]\n+        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n+                              buf: &mut Vec<c_char>) -> Option<()> {\n+            // getpwuid_r semantics is different on Illumos/Solaris:\n+            // http://illumos.org/man/3c/getpwuid_r\n+            let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n+                                          buf.capacity() as libc::size_t);\n+            if result.is_null() { None } else { Some(()) }\n+        }\n+\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,\n             n => n as usize,"}]}