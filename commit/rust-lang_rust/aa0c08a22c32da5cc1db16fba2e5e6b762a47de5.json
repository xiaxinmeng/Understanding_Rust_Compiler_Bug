{"sha": "aa0c08a22c32da5cc1db16fba2e5e6b762a47de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMGMwOGEyMmMzMmRhNWNjMWRiMTZmYmEyZTVlNmI3NjJhNDdkZTU=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-02T21:54:42Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-13T10:18:55Z"}, "message": "Apply review comments from @bluss\n\n- Simplify nth() by making use of the fact that the slice is evenly\n  divisible by the chunk size, and calling next() instead of\n  duplicating it\n- Call next_back() in last(), they are equivalent\n- Implement ExactSizeIterator::is_empty()", "tree": {"sha": "8796a580cd2a0dc79a27df5974b23343b9e34bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8796a580cd2a0dc79a27df5974b23343b9e34bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5", "html_url": "https://github.com/rust-lang/rust/commit/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51a89a0ad35f42af9c39d4ada25a5ad9746cd62", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51a89a0ad35f42af9c39d4ada25a5ad9746cd62", "html_url": "https://github.com/rust-lang/rust/commit/e51a89a0ad35f42af9c39d4ada25a5ad9746cd62"}], "stats": {"total": 67, "additions": 23, "deletions": 44}, "files": [{"sha": "2d606f43084ba79d8c849ed22163f97b12519c7f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0c08a22c32da5cc1db16fba2e5e6b762a47de5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=aa0c08a22c32da5cc1db16fba2e5e6b762a47de5", "patch": "@@ -2448,30 +2448,16 @@ impl<'a, T> Iterator for ExactChunks<'a, T> {\n             self.v = &[];\n             None\n         } else {\n-            let end = match start.checked_add(self.chunk_size) {\n-                Some(sum) => cmp::min(self.v.len(), sum),\n-                None => self.v.len(),\n-            };\n-\n-            if end - start != self.chunk_size {\n-                self.v = &[];\n-                None\n-            } else {\n-                let nth = &self.v[start..end];\n-                self.v = &self.v[end..];\n-                Some(nth)\n-            }\n+            let (_, snd) = self.v.split_at(start);\n+            self.v = snd;\n+            assert!(self.v.len() == self.chunk_size);\n+            self.next()\n         }\n     }\n \n     #[inline]\n-    fn last(self) -> Option<Self::Item> {\n-        if self.v.len() < self.chunk_size {\n-            None\n-        } else {\n-            let start = self.v.len() - self.chunk_size;\n-            Some(&self.v[start..])\n-        }\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n     }\n }\n \n@@ -2490,7 +2476,11 @@ impl<'a, T> DoubleEndedIterator for ExactChunks<'a, T> {\n }\n \n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ExactChunks<'a, T> {}\n+impl<'a, T> ExactSizeIterator for ExactChunks<'a, T> {\n+    fn is_empty(&self) -> bool {\n+        self.v.is_empty()\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for ExactChunks<'a, T> {}\n@@ -2544,32 +2534,17 @@ impl<'a, T> Iterator for ExactChunksMut<'a, T> {\n             self.v = &mut [];\n             None\n         } else {\n-            let end = match start.checked_add(self.chunk_size) {\n-                Some(sum) => cmp::min(self.v.len(), sum),\n-                None => self.v.len(),\n-            };\n-\n-            if end - start != self.chunk_size {\n-                self.v = &mut [];\n-                None\n-            } else {\n-                let tmp = mem::replace(&mut self.v, &mut []);\n-                let (head, tail) = tmp.split_at_mut(end);\n-                let (_, nth) =  head.split_at_mut(start);\n-                self.v = tail;\n-                Some(nth)\n-            }\n+            let tmp = mem::replace(&mut self.v, &mut []);\n+            let (_, snd) = tmp.split_at_mut(start);\n+            self.v = snd;\n+            assert!(self.v.len() == self.chunk_size);\n+            self.next()\n         }\n     }\n \n     #[inline]\n-    fn last(self) -> Option<Self::Item> {\n-        if self.v.len() < self.chunk_size {\n-            None\n-        } else {\n-            let start = (self.v.len() - self.chunk_size) / self.chunk_size * self.chunk_size;\n-            Some(&mut self.v[start..])\n-        }\n+    fn last(mut self) -> Option<Self::Item> {\n+        self.next_back()\n     }\n }\n \n@@ -2590,7 +2565,11 @@ impl<'a, T> DoubleEndedIterator for ExactChunksMut<'a, T> {\n }\n \n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ExactChunksMut<'a, T> {}\n+impl<'a, T> ExactSizeIterator for ExactChunksMut<'a, T> {\n+    fn is_empty(&self) -> bool {\n+        self.v.is_empty()\n+    }\n+}\n \n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for ExactChunksMut<'a, T> {}"}]}