{"sha": "f7749b16087182813afa715fa828bb674ce9ef72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NzQ5YjE2MDg3MTgyODEzYWZhNzE1ZmE4MjhiYjY3NGNlOWVmNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T02:16:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T02:16:33Z"}, "message": "rt: Add code to walk over interior vectors, untested as of yet", "tree": {"sha": "95f8d03de6a1ed1d07b1ebdc77a7677dcf289872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f8d03de6a1ed1d07b1ebdc77a7677dcf289872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7749b16087182813afa715fa828bb674ce9ef72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7749b16087182813afa715fa828bb674ce9ef72", "html_url": "https://github.com/rust-lang/rust/commit/f7749b16087182813afa715fa828bb674ce9ef72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7749b16087182813afa715fa828bb674ce9ef72/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7f62613a49c03851fcde9fddb14ec6b474c50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7f62613a49c03851fcde9fddb14ec6b474c50f", "html_url": "https://github.com/rust-lang/rust/commit/7d7f62613a49c03851fcde9fddb14ec6b474c50f"}], "stats": {"total": 111, "additions": 84, "deletions": 27}, "files": [{"sha": "7f8373f74dbf016ea3a0b07f27475c8787f866fa", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 84, "deletions": 27, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f7749b16087182813afa715fa828bb674ce9ef72/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f7749b16087182813afa715fa828bb674ce9ef72/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=f7749b16087182813afa715fa828bb674ce9ef72", "patch": "@@ -171,6 +171,10 @@ class ptr_pair {\n         return make(fst - n, snd - n);\n     }\n \n+    inline bool operator<(const ptr_pair &other) const {\n+        return fst < other.fst && snd < other.snd;\n+    }\n+\n     static inline ptr_pair make(uint8_t *fst, uint8_t *snd) {\n         ptr_pair self(fst, snd);\n         return self;\n@@ -817,6 +821,12 @@ size_of::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n \n template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n+protected:\n+    void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n+\n+    static std::pair<uint8_t *,uint8_t *> get_ivec_data_range(uint8_t *dp);\n+    static std::pair<ptr_pair,ptr_pair> get_ivec_data_range(ptr_pair &dp);\n+\n public:\n     U dp;\n \n@@ -866,13 +876,53 @@ class data : public ctxt< data<T,U> > {\n         static_cast<T *>(this)->walk_var(align, param_index);\n     }\n \n-    // Called by derived classes only.\n-    void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n-\n     template<typename W>\n     void walk_number(bool align) { DATA_SIMPLE(W, walk_number<W>()); }\n };\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n+    std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n+        this->get_variant_sp(tinfo, variant_id);\n+    static_cast<T *>(this)->walk_variant(align, tinfo, variant_id,\n+                                         variant_ptr_and_end);\n+}\n+\n+template<typename T,typename U>\n+std::pair<uint8_t *,uint8_t *>\n+data<T,U>::get_ivec_data_range(uint8_t *dp) {\n+    size_t fill = bump_dp<size_t>(dp);\n+    bump_dp<size_t>(dp);    // Skip over alloc.\n+    rust_ivec_payload payload = bump_dp<rust_ivec_payload>(dp);\n+\n+    uint8_t *start, *end;\n+    if (!fill) {\n+        if (!payload.ptr) {             // Zero length.\n+            start = end = NULL;\n+        } else {                        // On heap.\n+            fill = payload.ptr->fill;\n+            start = payload.ptr->data;\n+            end = start + fill;\n+        }\n+    } else {                            // On stack.\n+        start = payload.data;\n+        end = start + fill;\n+    }\n+\n+    return std::make_pair(start, end);\n+}\n+\n+template<typename T,typename U>\n+std::pair<ptr_pair,ptr_pair>\n+data<T,U>::get_ivec_data_range(ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst = get_ivec_data_range(dp.fst);\n+    std::pair<uint8_t *,uint8_t *> snd = get_ivec_data_range(dp.snd);\n+    ptr_pair start(fst.first, snd.first);\n+    ptr_pair end(fst.second, snd.second);\n+    return std::make_pair(start, end);\n+}\n+\n template<typename T,typename U>\n void\n data<T,U>::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n@@ -881,7 +931,7 @@ data<T,U>::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n     else if (elem_sa.alignment == 8)\n         elem_sa.alignment = 4;  // FIXME: This is an awful hack.\n \n-    // Get a pointer to the interior vector, and skip over it.\n+    // Get a pointer to the interior vector, and determine its size.\n     if (align) dp = align_to(dp, ALIGNOF(rust_ivec *));\n     U end_dp = dp + sizeof(rust_ivec) - sizeof(uintptr_t) + elem_sa.size * 4;\n \n@@ -910,15 +960,6 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     static_cast<T *>(this)->walk_tag(align, tinfo, tag_variant);\n }\n \n-template<typename T,typename U>\n-void\n-data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n-    std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n-        this->get_variant_sp(tinfo, variant_id);\n-    static_cast<T *>(this)->walk_variant(align, tinfo, variant_id,\n-                                         variant_ptr_and_end);\n-}\n-\n \n // Copy constructors\n \n@@ -968,10 +1009,11 @@ class cmp : public data<cmp,ptr_pair> {\n                          in_dp),\n       result(0) {}\n \n-    void walk_box(bool align);\n-    void walk_struct(bool align, const uint8_t *end_sp);\n+    void walk_ivec(bool align, bool is_pod, size_align &elem_sa);\n     void walk_tag(bool align, tag_info &tinfo,\n                   const data_pair<uint32_t> &tag_variants);\n+    void walk_box(bool align);\n+    void walk_struct(bool align, const uint8_t *end_sp);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n                   const uint8_t *ty_params_sp);\n     void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n@@ -983,18 +1025,14 @@ class cmp : public data<cmp,ptr_pair> {\n };\n \n void\n-cmp::walk_box(bool align) {\n-    data_pair<uint8_t *> subdp = bump_dp<uint8_t *>(dp);\n-    cmp subcx(*this, ptr_pair::make(subdp));\n-    subcx.dp += sizeof(uint32_t);   // Skip over the reference count.\n-    subcx.walk(true);\n-    result = subcx.result;\n-}\n+cmp::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n+    std::pair<ptr_pair,ptr_pair> data_range = get_ivec_data_range(dp);\n \n-void\n-cmp::walk_struct(bool align, const uint8_t *end_sp) {\n-    while (!result && this->sp != end_sp) {\n-        this->walk(align);\n+    cmp sub(*this, data_range.first);\n+    ptr_pair data_end = data_range.second;\n+    while (!result && sub.dp < data_end) {\n+        sub.walk(align);\n+        result = sub.result;\n         align = true;\n     }\n }\n@@ -1008,6 +1046,24 @@ cmp::walk_tag(bool align, tag_info &tinfo,\n     data<cmp,ptr_pair>::walk_variant(align, tinfo, tag_variants.fst);\n }\n \n+void\n+cmp::walk_box(bool align) {\n+    data_pair<uint8_t *> subdp = bump_dp<uint8_t *>(dp);\n+\n+    cmp sub(*this, ptr_pair::make(subdp));\n+    sub.dp += sizeof(uint32_t);     // Skip over the reference count.\n+    sub.walk(true);\n+    result = sub.result;\n+}\n+\n+void\n+cmp::walk_struct(bool align, const uint8_t *end_sp) {\n+    while (!result && this->sp != end_sp) {\n+        this->walk(align);\n+        align = true;\n+    }\n+}\n+\n void\n cmp::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n               const uint8_t *ty_params_sp) {\n@@ -1021,8 +1077,9 @@ cmp::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n     cmp sub(*this, variant_ptr_and_end.first);\n \n     const uint8_t *variant_end = variant_ptr_and_end.second;\n-    while (!sub.result && sub.sp < variant_end) {\n+    while (!result && sub.sp < variant_end) {\n         sub.walk(align);\n+        result = sub.result;\n         align = true;\n     }\n }"}]}