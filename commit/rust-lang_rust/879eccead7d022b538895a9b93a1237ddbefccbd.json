{"sha": "879eccead7d022b538895a9b93a1237ddbefccbd", "node_id": "C_kwDOAAsO6NoAKDg3OWVjY2VhZDdkMDIyYjUzODg5NWE5YjkzYTEyMzdkZGJlZmNjYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T09:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T09:31:37Z"}, "message": "Auto merge of #91957 - nnethercote:rm-SymbolStr, r=oli-obk\n\nRemove `SymbolStr`\n\nThis was originally proposed in https://github.com/rust-lang/rust/pull/74554#discussion_r466203544. As well as removing the icky `SymbolStr` type, it allows the removal of a lot of `&` and `*` occurrences.\n\nBest reviewed one commit at a time.\n\nr? `@oli-obk`", "tree": {"sha": "bb6c606e0022f5a955853b85bb53ff3a5020a24f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb6c606e0022f5a955853b85bb53ff3a5020a24f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879eccead7d022b538895a9b93a1237ddbefccbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879eccead7d022b538895a9b93a1237ddbefccbd", "html_url": "https://github.com/rust-lang/rust/commit/879eccead7d022b538895a9b93a1237ddbefccbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879eccead7d022b538895a9b93a1237ddbefccbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1eea3f0a43f7eee0866b734a635a960ee74ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1eea3f0a43f7eee0866b734a635a960ee74ad1", "html_url": "https://github.com/rust-lang/rust/commit/af1eea3f0a43f7eee0866b734a635a960ee74ad1"}, {"sha": "a83c935a18ebd996fabe91af758353d208090e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83c935a18ebd996fabe91af758353d208090e88", "html_url": "https://github.com/rust-lang/rust/commit/a83c935a18ebd996fabe91af758353d208090e88"}], "stats": {"total": 152, "additions": 77, "deletions": 75}, "files": [{"sha": "489945b513da4a975740c70031cb53cf9cd22e15", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -17,7 +17,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n-use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::symbol::Symbol;\n use semver::Version;\n \n static UNIX_SYSTEMS: &[&str] = &[\n@@ -310,8 +310,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"wildcard_imports\")\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"wildcard_imports\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"enum_glob_use\")\n                                         {\n                                             return;\n                                         }\n@@ -370,15 +370,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n }\n \n /// Returns the lint name if it is clippy lint.\n-fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<Symbol> {\n     if_chain! {\n         if let Some(meta_item) = lint.meta_item();\n         if meta_item.path.segments.len() > 1;\n         if let tool_name = meta_item.path.segments[0].ident;\n         if tool_name.name == sym::clippy;\n         then {\n             let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            return Some(lint_name.as_str());\n+            return Some(lint_name);\n         }\n     }\n     None\n@@ -387,7 +387,7 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem]) {\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if lint_name == \"restriction\" && name != sym::allow {\n+            if lint_name.as_str() == \"restriction\" && name != sym::allow {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,\n@@ -486,7 +486,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n \n fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n     if let LitKind::Str(is, _) = lit.kind {\n-        if Version::parse(&is.as_str()).is_ok() {\n+        if Version::parse(is.as_str()).is_ok() {\n             return;\n         }\n     }\n@@ -619,7 +619,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                     MetaItemKind::Word => {\n                         if_chain! {\n                             if let Some(ident) = meta.ident();\n-                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            if let Some(os) = find_os(ident.name.as_str());\n                             then {\n                                 mismatched.push((os, ident.span));\n                             }"}, {"sha": "43ad0f7605c106bdf4ce1a4899a99c955e295a00", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -272,7 +272,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                 .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n-                    let path: &str = &path.ident.name.as_str();\n+                    let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n                 .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, args[0].span)?, neg_method)))"}, {"sha": "31cc3698592b35d26440a901ef34a3cb926bda92", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -321,8 +321,8 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n         if let [int] = &*tp.segments;\n         then {\n-            let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).copied()\n+            let name = int.ident.name.as_str();\n+            candidates.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }\n@@ -335,8 +335,8 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let QPath::Resolved(_, path) = *path;\n         if let [ty] = &*path.segments;\n         then {\n-            let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).copied()\n+            let name = ty.ident.name.as_str();\n+            INTS.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "3650e4f91a001020c8952f518ae89af0b3bc3a19", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -437,7 +437,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n \n     for attr in attrs {\n         if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n+            let (comment, current_spans) = strip_doc_comment_decoration(comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym::doc) {"}, {"sha": "50dd0d84fda518f0d3d4663c694187f8e0d55128", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n             if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n-                let suggested_fn = match (method_path.ident.as_str().as_ref(), divisor) {\n+                let suggested_fn = match (method_path.ident.as_str(), divisor) {\n                     (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n                     (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n                     _ => return,"}, {"sha": "689ac6184bffb1d7b5762a5e6dc9bc47474b5d08", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -153,7 +153,7 @@ fn check_variant(\n             );\n         }\n     }\n-    let first = &def.variants[0].ident.name.as_str();\n+    let first = def.variants[0].ident.name.as_str();\n     let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n     let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {"}, {"sha": "6903073fbcd85760aaba967cf135d9f37d0165d8", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();\n-                let formatter = FloatFormat::new(&sym_str);\n+                let formatter = FloatFormat::new(sym_str);\n                 // Try to bail out if the float is for sure fine.\n                 // If its within the 2 decimal digits of being out of precision we\n                 // check if the parsed representation is the same as the string"}, {"sha": "a70e58c9c3a5efdd3316e553c334fd6df6d7d7b0", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -595,7 +595,7 @@ fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>\n             return method_name_a.as_str() == method_name_b.as_str() &&\n                 args_a.len() == args_b.len() &&\n                 (\n-                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    [\"ln\", \"log2\", \"log10\"].contains(&method_name_a.as_str()) ||\n                     method_name_a.as_str() == \"log\" && args_a.len() == 2 && eq_expr_value(cx, &args_a[1], &args_b[1])\n                 );\n         }\n@@ -692,7 +692,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {\n-                match &*path.ident.name.as_str() {\n+                match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),"}, {"sha": "0af6b3b7d464ef67ab1e7b1ba16dcbe2ac802dca", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name: &str = &impl_item.ident.name.as_str();\n+        let name = impl_item.ident.name.as_str();\n         if_chain! {\n             if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n             let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "b03445b8cd6b08df5008424ec994f9e15a46266f", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -659,7 +659,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n-        let method_name = &*method.ident.as_str();\n+        let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),"}, {"sha": "ba895f35faa267a1d7e0545bdc6f8bdf978f3afd", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -31,7 +31,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let mut applicability = Applicability::MaybeIncorrect;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n-            let method_name = &*method.ident.name.as_str();\n+            let method_name = method.ident.name.as_str();\n             let sugg = if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n                         is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                         is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n@@ -210,7 +210,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n                     if let Some(hir_id) = self.current_statement_hir_id {\n                         self.hir_id_uses_map.insert(hir_id, self.uses.len());\n                     }\n-                    match &*method_name.ident.name.as_str() {\n+                    match method_name.ident.name.as_str() {\n                         \"into_iter\" => self.uses.push(Some(IterFunction {\n                             func: IterFunctionKind::IntoIter,\n                             span: expr.span,"}, {"sha": "dbf103143d93cc7dc3f4e76cd3e1712d44aa9844", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -71,8 +71,8 @@ impl LateLintPass<'_> for MatchStrCaseMismatch {\n                 visitor.visit_expr(match_expr);\n \n                 if let Some(case_method) = visitor.case_method {\n-                    if let Some((bad_case_span, bad_case_str)) = verify_case(&case_method, arms) {\n-                        lint(cx, &case_method, bad_case_span, &bad_case_str);\n+                    if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n+                        lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n                     }\n                 }\n             }\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::MethodCall(segment, _, [receiver], _)\n-                if self.case_altered(&*segment.ident.as_str(), receiver) => {},\n+                if self.case_altered(segment.ident.as_str(), receiver) => {},\n             _ => walk_expr(self, ex),\n         }\n     }\n@@ -126,7 +126,7 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n     }\n }\n \n-fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n+fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, Symbol)> {\n     let case_check = match case_method {\n         CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(|c| c.to_lowercase().next() == Some(c)) },\n         CaseMethod::AsciiLowerCase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_uppercase()) },\n@@ -144,7 +144,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n             let input = symbol.as_str();\n             if !case_check(&input);\n             then {\n-                return Some((lit.span, input));\n+                return Some((lit.span, symbol));\n             }\n         }\n     }"}, {"sha": "22970507f964c2c9416ab1fadead327da3637995", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -966,7 +966,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                         for pat in inner.iter() {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n                                 if ident.as_str().starts_with('_') && !is_local_used(cx, arm.body, id) {\n-                                    ident_bind_name = (&ident.name.as_str()).to_string();\n+                                    ident_bind_name = ident.name.as_str().to_string();\n                                     matching_wild = true;\n                                 }\n                             }\n@@ -1127,7 +1127,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             if let CommonPrefixSearcher::Path(path_prefix) = path_prefix {\n                 let mut s = String::new();\n                 for seg in path_prefix {\n-                    s.push_str(&seg.ident.as_str());\n+                    s.push_str(seg.ident.as_str());\n                     s.push_str(\"::\");\n                 }\n                 s"}, {"sha": "4307cbf00507a1fcb130f83793770af35a4c334d", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -81,7 +81,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n         if args.is_empty();\n         if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n-            match &*segment.ident.as_str() {\n+            match segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),\n                 \"min_value\" => return Some(MinMax::Min),\n                 _ => {}"}, {"sha": "4934240abfc46c2feca8983bf17bab4a4758abc7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -80,7 +80,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -1997,21 +1997,21 @@ impl_lint_pass!(Methods => [\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n-fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(SymbolStr, &'tcx [hir::Expr<'tcx>], Span)> {\n+fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(Symbol, &'tcx [hir::Expr<'tcx>], Span)> {\n     if let ExprKind::MethodCall(path, span, args, _) = recv.kind {\n         if !args.iter().any(|e| e.span.from_expansion()) {\n-            return Some((path.ident.name.as_str(), args, span));\n+            return Some((path.ident.name, args, span));\n         }\n     }\n     None\n }\n \n-/// Same as `method_call` but the `SymbolStr` is dereferenced into a temporary `&str`\n+/// Same as `method_call` but the `Symbol` is dereferenced into a temporary `&str`\n macro_rules! method_call {\n     ($expr:expr) => {\n         method_call($expr)\n             .as_ref()\n-            .map(|&(ref name, args, span)| (&**name, args, span))\n+            .map(|&(ref name, args, span)| (name.as_str(), args, span))\n     };\n }\n \n@@ -2028,8 +2028,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 from_iter_instead_of_collect::check(cx, expr, args, func);\n             },\n             hir::ExprKind::MethodCall(method_call, ref method_span, args, _) => {\n-                or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n-                expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n+                or_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n+                expect_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n                 clone_on_copy::check(cx, expr, method_call.ident.name, args);\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n@@ -2184,7 +2184,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n-                    &item.ident.name.as_str(),\n+                    item.ident.name.as_str(),\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "70f20da1d6db795f4e452d1c618d6efeb790d552", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -140,7 +140,7 @@ fn parse_iter_usage(\n             let did = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n             let iter_id = cx.tcx.get_diagnostic_item(sym::Iterator)?;\n \n-            match (&*name.ident.as_str(), args) {\n+            match (name.ident.as_str(), args) {\n                 (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                     if reverse {\n                         (IterUsageKind::Second, e.span)\n@@ -298,7 +298,7 @@ fn check_iter(\n                 if let Some(did) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n                 if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 then {\n-                    match (&*name.ident.as_str(), args) {\n+                    match (name.ident.as_str(), args) {\n                         (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                             return true;\n                         },"}, {"sha": "401dc27811dc3aa05ca5de9c822c9bb41c7a7bd5", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -407,6 +407,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n             // Don't lint things expanded by #[derive(...)], etc or `await` desugaring\n             return;\n         }\n+        let sym;\n         let binding = match expr.kind {\n             ExprKind::Path(ref qpath) if !matches!(qpath, hir::QPath::LangItem(..)) => {\n                 let binding = last_path_segment(qpath).ident.as_str();\n@@ -423,7 +424,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 }\n             },\n             ExprKind::Field(_, ident) => {\n-                let name = ident.as_str();\n+                sym = ident.name;\n+                let name = sym.as_str();\n                 if name.starts_with('_') && !name.starts_with(\"__\") {\n                     Some(name)\n                 } else {"}, {"sha": "566e15ab2a6d640aff7e55090733d58c4313762b", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -75,7 +75,7 @@ impl LateLintPass<'_> for ImportRename {\n             if let Some(import) = match snip.split_once(\" as \") {\n                 None => Some(snip.as_str()),\n                 Some((import, rename)) => {\n-                    if rename.trim() == &*name.as_str() {\n+                    if rename.trim() == name.as_str() {\n                         None\n                     } else {\n                         Some(import.trim())"}, {"sha": "1f9db39cf8ca6a7e9742a2761d4bb89b466614f6", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -48,15 +48,15 @@ impl LateLintPass<'_> for MultipleCrateVersions {\n         }\n \n         let metadata = unwrap_cargo_metadata!(cx, MULTIPLE_CRATE_VERSIONS, true);\n-        let local_name = cx.tcx.crate_name(LOCAL_CRATE).as_str();\n+        let local_name = cx.tcx.crate_name(LOCAL_CRATE);\n         let mut packages = metadata.packages;\n         packages.sort_by(|a, b| a.name.cmp(&b.name));\n \n         if_chain! {\n             if let Some(resolve) = &metadata.resolve;\n             if let Some(local_id) = packages\n                 .iter()\n-                .find_map(|p| if p.name == *local_name { Some(&p.id) } else { None });\n+                .find_map(|p| if p.name == local_name.as_str() { Some(&p.id) } else { None });\n             then {\n                 for (name, group) in &packages.iter().group_by(|p| p.name.clone()) {\n                     let group: Vec<&Package> = group.collect();"}, {"sha": "22834cf61ee038224db9e08d897bd65d67a7e14d", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n+                check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),\n         }"}, {"sha": "0931fec149ebfe557ec6edef687b93671e981cc0", "filename": "clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n             if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n-            if symbol==\"as_deref\" || symbol==\"as_deref_mut\";\n+            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n             if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n             then{\n                 span_lint_and_sugg("}, {"sha": "25fbcb3c6094bb828802221a63e3b8c539654921", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -224,14 +224,14 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n                     if existing_name.len - count != 1\n-                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                        || levenstein_not_1(&interned_name, existing_name.interned.as_str())\n                     {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n                     if count - existing_name.len != 1\n-                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                        || levenstein_not_1(existing_name.interned.as_str(), &interned_name)\n                     {\n                         continue;\n                     }"}, {"sha": "4722c031006be465d66049cbab8acfc4ea59c4a8", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -104,7 +104,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n     };\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n-        let name = &*mac_name.as_str();\n+        let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites"}, {"sha": "1b9285c2298df7f48e5ae9f9fe1da0a942a1c7df", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -82,7 +82,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                 _ => Argument::Unknown,\n             };\n \n-            match &*path.ident.as_str() {\n+            match path.ident.as_str() {\n                 \"create\" => {\n                     options.push((OpenOption::Create, argument_option));\n                 },"}, {"sha": "e58ca95fa042000639a305af32ea1aa8999b2f7b", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&*path_lit.as_str());\n+            if let pushed_path = Path::new(path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "b6d04334de9e50e71b538e4f81cb40b525c65036", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -150,7 +150,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n \n     if let ExprKind::Lit(ref lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n-            let r = &r.as_str();\n+            let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };\n             match parser.parse(r) {\n                 Ok(r) => {"}, {"sha": "398e2c200de3ca777db90fcf9295a8c06217f6a8", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n                     let mut seen_str = None;\n                     let mut seen_string = None;\n                     for item in items {\n-                        match &*item.ident.as_str() {\n+                        match item.ident.as_str() {\n                             \"visit_str\" => seen_str = Some(item.span),\n                             \"visit_string\" => seen_string = Some(item.span),\n                             _ => {},"}, {"sha": "20e38dc564eb4138e197cbe05c2e8975fb58fdeb", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -89,7 +89,7 @@ fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option\n     if_chain! {\n         if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n-        if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n+        if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n             let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");"}, {"sha": "ad8e72ad764e133ff3b4ce29bbda643b8d4c830b", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -327,7 +327,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n             if path.ident.name == sym!(into_bytes);\n             if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n-            if matches!(&*path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n+            if matches!(path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n             if let ExprKind::Lit(lit) = &recv.kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n "}, {"sha": "6d9aff474214c30420508b7390b28d874f2e5f32", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {\n-                        let result = match &*symbol.as_str() {\n+                        let result = match symbol.as_str() {\n                             \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n                             \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n                             _ => return,"}, {"sha": "004530db0861d28a1373e34b91a3cf82fb23dc14", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_map_error(cx, arg_0, expr);\n                 },\n@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     let mut call = call;\n     while let hir::ExprKind::MethodCall(path, _, args, _) = call.kind {\n-        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+        if matches!(path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n             call = &args[0];\n         } else {\n             break;\n@@ -82,7 +82,7 @@ fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<\n \n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n-        let symbol = &*path.ident.as_str();\n+        let symbol = path.ident.as_str();\n         let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n         let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);\n "}, {"sha": "bfd17a6874994390a025d51c58922b10f99ed6b6", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -94,7 +94,7 @@ impl EarlyLintPass for UnusedUnit {\n \n         if_chain! {\n             if segments.len() == 1;\n-            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&&*segments[0].ident.name.as_str());\n+            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&segments[0].ident.name.as_str());\n             if let Some(args) = &segments[0].args;\n             if let ast::GenericArgs::Parenthesized(generic_args) = &**args;\n             if let ast::FnRetTy::Ty(ty) = &generic_args.output;"}, {"sha": "01a5691223bfc6ef4db924e6424432aa37970eb2", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -158,7 +158,7 @@ fn collect_unwrap_info<'tcx>(\n             if let Some(local_id) = path_to_local(&args[0]);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n-            if is_relevant_option_call(cx, ty, &name) || is_relevant_result_call(cx, ty, &name);\n+            if is_relevant_option_call(cx, ty, name) || is_relevant_result_call(cx, ty, name);\n             then {\n                 assert!(args.len() == 1);\n                 let unwrappable = match name.as_ref() {"}, {"sha": "0c62161e53d437372e120404b5862f8aa03f4d73", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -79,7 +79,7 @@ fn correct_ident(ident: &str) -> String {\n \n fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n-    let ident = &ident.as_str();\n+    let ident = ident.as_str();\n     let corrected = correct_ident(ident);\n     // warn if we have pure-uppercase idents\n     // assume that two-letter words are some kind of valid abbreviation like FP for false positive"}, {"sha": "abd8a3623703b2f14ea8232a8e9eaa0fc69d128c", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if is_trait_method(cx, e, sym::Into) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {"}, {"sha": "f9add927b49b86d7c3b993750b91993decb6fba8", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -371,9 +371,9 @@ impl EarlyLintPass for Write {\n /// Return this and a boolean indicating whether it only consisted of a newline.\n fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n     let sp = fmtstr.span;\n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n-    if *contents == r\"\\n\" {\n+    if contents == r\"\\n\" {\n         return (sp, true);\n     }\n \n@@ -484,7 +484,7 @@ impl Write {\n             StrStyle::Raw(n) => Some(n as usize),\n         };\n \n-        let mut parser = Parser::new(&str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n+        let mut parser = Parser::new(str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n         let mut args = SimpleFormatArgs::default();\n \n         while let Some(arg) = parser.next() {\n@@ -589,7 +589,7 @@ impl Write {\n                     lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n-                LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -671,7 +671,7 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     let mut last_was_cr = false;\n     let mut should_lint = false;\n \n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n     let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n         let c = c.unwrap();"}, {"sha": "25a84d16650896e090c49bfa0f68237f9a616b9d", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -113,7 +113,7 @@ pub fn get_attr<'a>(\n fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n-            if let Ok(value) = FromStr::from_str(&value.as_str()) {\n+            if let Ok(value) = FromStr::from_str(value.as_str()) {\n                 f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");"}, {"sha": "dc5ec5f229518eda886895e80a633a30aefb8052", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -319,8 +319,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     if let ExprKind::Path(qpath) = &callee.kind;\n                     let res = self.typeck_results.qpath_res(qpath, callee.hir_id);\n                     if let Some(def_id) = res.opt_def_id();\n-                    let def_path: Vec<_> = self.lcx.get_def_path(def_id).into_iter().map(Symbol::as_str).collect();\n-                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| &**s).collect();\n+                    let def_path = self.lcx.get_def_path(def_id);\n+                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| s.as_str()).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {"}, {"sha": "61e529a6079c935b65c3345b68dffaf5fded8f9e", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -47,7 +47,7 @@ impl ops::BitOrAssign for EagernessSuggestion {\n /// Determine the eagerness of the given function call.\n fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx [Expr<'_>]) -> EagernessSuggestion {\n     use EagernessSuggestion::{Eager, Lazy, NoChange};\n-    let name = &*name.as_str();\n+    let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n         Some(id) => cx.tcx.type_of(id),"}, {"sha": "1a4da1627b7842eecb83d3f85f5f7f3271cad66b", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879eccead7d022b538895a9b93a1237ddbefccbd/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=879eccead7d022b538895a9b93a1237ddbefccbd", "patch": "@@ -372,7 +372,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(&since.as_str())\n+                    &RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}]}