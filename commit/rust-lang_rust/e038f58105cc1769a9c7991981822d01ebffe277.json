{"sha": "e038f58105cc1769a9c7991981822d01ebffe277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzhmNTgxMDVjYzE3NjlhOWM3OTkxOTgxODIyZDAxZWJmZmUyNzc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-04T22:12:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-04-21T18:32:44Z"}, "message": "syntax: Support parentheses around trait bounds", "tree": {"sha": "1aa398de845539946c8c16f7fd3f622aa7e49111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa398de845539946c8c16f7fd3f622aa7e49111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e038f58105cc1769a9c7991981822d01ebffe277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e038f58105cc1769a9c7991981822d01ebffe277", "html_url": "https://github.com/rust-lang/rust/commit/e038f58105cc1769a9c7991981822d01ebffe277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e038f58105cc1769a9c7991981822d01ebffe277/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5695c3e9435a5872e23a6bb61c1ea0b3ada83eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5695c3e9435a5872e23a6bb61c1ea0b3ada83eef", "html_url": "https://github.com/rust-lang/rust/commit/5695c3e9435a5872e23a6bb61c1ea0b3ada83eef"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "1232411d1ecfd90a6c41892922fa874a35349e01", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e038f58105cc1769a9c7991981822d01ebffe277/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e038f58105cc1769a9c7991981822d01ebffe277/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e038f58105cc1769a9c7991981822d01ebffe277", "patch": "@@ -152,6 +152,7 @@ fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n enum PrevTokenKind {\n     DocComment,\n     Comma,\n+    Plus,\n     Interpolated,\n     Eof,\n     Other,\n@@ -1061,6 +1062,7 @@ impl<'a> Parser<'a> {\n         self.prev_token_kind = match self.token {\n             token::DocComment(..) => PrevTokenKind::DocComment,\n             token::Comma => PrevTokenKind::Comma,\n+            token::BinOp(token::Plus) => PrevTokenKind::Plus,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n             _ => PrevTokenKind::Other,\n@@ -1354,20 +1356,29 @@ impl<'a> Parser<'a> {\n                     break;\n                 }\n             }\n+            let trailing_plus = self.prev_token_kind == PrevTokenKind::Plus;\n             self.expect(&token::CloseDelim(token::Paren))?;\n \n             if ts.len() == 1 && !last_comma {\n                 let ty = ts.into_iter().nth(0).unwrap().unwrap();\n+                let maybe_bounds = allow_plus && self.token == token::BinOp(token::Plus);\n                 match ty.node {\n-                    // Accept `(Trait1) + Trait2 + 'a` for backward compatibility (#39318).\n-                    TyKind::Path(None, ref path)\n-                            if allow_plus && self.token == token::BinOp(token::Plus) => {\n+                    // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n+                    TyKind::Path(None, ref path) if maybe_bounds => {\n                         self.bump(); // `+`\n                         let pt = PolyTraitRef::new(Vec::new(), path.clone(), lo.to(self.prev_span));\n                         let mut bounds = vec![TraitTyParamBound(pt, TraitBoundModifier::None)];\n                         bounds.append(&mut self.parse_ty_param_bounds()?);\n                         TyKind::TraitObject(bounds)\n                     }\n+                    TyKind::TraitObject(ref bounds)\n+                            if maybe_bounds && bounds.len() == 1 && !trailing_plus => {\n+                        self.bump(); // `+`\n+                        let mut bounds = bounds.clone();\n+                        bounds.append(&mut self.parse_ty_param_bounds()?);\n+                        TyKind::TraitObject(bounds)\n+                    }\n+                    // `(TYPE)`\n                     _ => TyKind::Paren(P(ty))\n                 }\n             } else {\n@@ -4070,17 +4081,24 @@ impl<'a> Parser<'a> {\n     // Parse bounds of a type parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     // BOUND = TY_BOUND | LT_BOUND\n     // LT_BOUND = LIFETIME (e.g. `'a`)\n-    // TY_BOUND = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n+    // TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n+    // TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g. `?for<'a: 'b> m::Trait<'a>`)\n     fn parse_ty_param_bounds_common(&mut self, allow_plus: bool) -> PResult<'a, TyParamBounds> {\n         let mut bounds = Vec::new();\n         loop {\n+            let has_parens = self.eat(&token::OpenDelim(token::Paren));\n             let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n             if self.check_lifetime() {\n                 if let Some(question_span) = question {\n                     self.span_err(question_span,\n                                   \"`?` may only modify trait bounds, not lifetime bounds\");\n                 }\n                 bounds.push(RegionTyParamBound(self.expect_lifetime()));\n+                if has_parens {\n+                    self.expect(&token::CloseDelim(token::Paren))?;\n+                    self.span_err(self.prev_span,\n+                                  \"parenthesized lifetime bounds are not supported\");\n+                }\n             } else if self.check_keyword(keywords::For) || self.check_path() {\n                 let lo = self.span;\n                 let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n@@ -4092,6 +4110,9 @@ impl<'a> Parser<'a> {\n                     TraitBoundModifier::None\n                 };\n                 bounds.push(TraitTyParamBound(poly_trait, modifier));\n+                if has_parens {\n+                    self.expect(&token::CloseDelim(token::Paren))?;\n+                }\n             } else {\n                 break\n             }"}, {"sha": "a44c0c3f32fef0b46b8d3f4e8b6f697cb9abd6ca", "filename": "src/test/parse-fail/trait-object-bad-parens.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs?ref=e038f58105cc1769a9c7991981822d01ebffe277", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+fn main() {\n+    let _: Box<((Copy)) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `((Copy))`\n+    let _: Box<(Copy + Copy) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy + Copy)`\n+    let _: Box<(Copy +) + Copy>;\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy)`\n+}"}, {"sha": "6be62d966eb9490232aaeacb5c71713db222cdba", "filename": "src/test/parse-fail/trait-object-lifetime-parens.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-lifetime-parens.rs?ref=e038f58105cc1769a9c7991981822d01ebffe277", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n+fn f<T: Copy + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not supported\n+\n+fn main() {\n+    let _: Box<Copy + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n+    let _: Box<('a) + Copy>; //~ ERROR expected type, found `'a`\n+}"}, {"sha": "dc44f4f3fb1353db6bd3acad024a71655ffc528c", "filename": "src/test/parse-fail/trait-object-trait-parens.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e038f58105cc1769a9c7991981822d01ebffe277/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-trait-parens.rs?ref=e038f58105cc1769a9c7991981822d01ebffe277", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn f<T: (Copy) + (?Sized) + (for<'a> Trait<'a>)>() {}\n+\n+fn main() {\n+    let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n+    let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n+    let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n+}\n+\n+FAIL //~ ERROR"}]}