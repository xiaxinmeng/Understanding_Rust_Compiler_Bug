{"sha": "41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "node_id": "C_kwDOAAsO6NoAKDQxZDVhZWNjZWNkOTJkMTM3YmIwNGM2OGZiZjJjODExMGQzM2RjYTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-14T16:10:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-14T16:10:31Z"}, "message": "Rollup merge of #112612 - sginnett:issue-105150, r=compiler-errors\n\nFix explicit-outlives-requirements lint span\n\nFixes #105150 which caused the span reported by the explicit-outlives-requirements lint to be incorrect when\n1) the lint should suggest the entire where clause to be removed and\n2) there are inline bounds present that are not inferable outlives requirements\n\nIn particular, this would cause rustfix to leave a dangling empty where clause.", "tree": {"sha": "ee2073e0a7ff05fff6044bc757e2bad8822f159f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee2073e0a7ff05fff6044bc757e2bad8822f159f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkieZ3CRBK7hj4Ov3rIwAAb2MIAAetQexRo94itjS56NXf88Up\nm+XveUExuGLXQdcFXjNENJxerHgmsHN3+jq88gVNuFXFsXPWmpllnKwOf/p6cXGi\n1p2hmvrNIHW20BliST7lxVTdNFo75x2FKwJZTyJOfwBetZL5kSsBaAMIpgaKob6F\nTbYJr+Fd+rLS5xSO3TT527syLdsKzALqlLyYUxk5OsMdMS8luxsRhgMFAV0ODlTl\n2PL13uJ6H/kxGhs684Senl/FbbjHmxk21ufMD9lygPf5O2SqODxpaIB3sStuZm0m\nZ7T4XIcZEE8hyM8faRlVbRJYbHO5h7y7G1iZNpZa3owOYqF42r2KWsBkWNpboAI=\n=S/tg\n-----END PGP SIGNATURE-----\n", "payload": "tree ee2073e0a7ff05fff6044bc757e2bad8822f159f\nparent 8aff1122c63ac294215a07f6f7fa992d29bb412d\nparent 72531b7463db02b9e049e8ad7f095cce928ffc1e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686759031 +0200\ncommitter GitHub <noreply@github.com> 1686759031 +0200\n\nRollup merge of #112612 - sginnett:issue-105150, r=compiler-errors\n\nFix explicit-outlives-requirements lint span\n\nFixes #105150 which caused the span reported by the explicit-outlives-requirements lint to be incorrect when\n1) the lint should suggest the entire where clause to be removed and\n2) there are inline bounds present that are not inferable outlives requirements\n\nIn particular, this would cause rustfix to leave a dangling empty where clause.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "html_url": "https://github.com/rust-lang/rust/commit/41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aff1122c63ac294215a07f6f7fa992d29bb412d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aff1122c63ac294215a07f6f7fa992d29bb412d", "html_url": "https://github.com/rust-lang/rust/commit/8aff1122c63ac294215a07f6f7fa992d29bb412d"}, {"sha": "72531b7463db02b9e049e8ad7f095cce928ffc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/72531b7463db02b9e049e8ad7f095cce928ffc1e", "html_url": "https://github.com/rust-lang/rust/commit/72531b7463db02b9e049e8ad7f095cce928ffc1e"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "7b05bff515148342b8c700db54c0e8d599cb46b3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "patch": "@@ -2124,12 +2124,16 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             }\n \n             let ty_generics = cx.tcx.generics_of(def_id);\n+            let num_where_predicates = hir_generics\n+                .predicates\n+                .iter()\n+                .filter(|predicate| predicate.in_where_clause())\n+                .count();\n \n             let mut bound_count = 0;\n             let mut lint_spans = Vec::new();\n             let mut where_lint_spans = Vec::new();\n-            let mut dropped_predicate_count = 0;\n-            let num_predicates = hir_generics.predicates.len();\n+            let mut dropped_where_predicate_count = 0;\n             for (i, where_predicate) in hir_generics.predicates.iter().enumerate() {\n                 let (relevant_lifetimes, bounds, predicate_span, in_where_clause) =\n                     match where_predicate {\n@@ -2186,8 +2190,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                 bound_count += bound_spans.len();\n \n                 let drop_predicate = bound_spans.len() == bounds.len();\n-                if drop_predicate {\n-                    dropped_predicate_count += 1;\n+                if drop_predicate && in_where_clause {\n+                    dropped_where_predicate_count += 1;\n                 }\n \n                 if drop_predicate {\n@@ -2196,7 +2200,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     } else if predicate_span.from_expansion() {\n                         // Don't try to extend the span if it comes from a macro expansion.\n                         where_lint_spans.push(predicate_span);\n-                    } else if i + 1 < num_predicates {\n+                    } else if i + 1 < num_where_predicates {\n                         // If all the bounds on a predicate were inferable and there are\n                         // further predicates, we want to eat the trailing comma.\n                         let next_predicate_span = hir_generics.predicates[i + 1].span();\n@@ -2224,9 +2228,10 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                 }\n             }\n \n-            // If all predicates are inferable, drop the entire clause\n+            // If all predicates in where clause are inferable, drop the entire clause\n             // (including the `where`)\n-            if hir_generics.has_where_clause_predicates && dropped_predicate_count == num_predicates\n+            if hir_generics.has_where_clause_predicates\n+                && dropped_where_predicate_count == num_where_predicates\n             {\n                 let where_span = hir_generics.where_clause_span;\n                 // Extend the where clause back to the closing `>` of the"}, {"sha": "5058d61b5880230867044a0406284c09b9ada637", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed?ref=41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "patch": "@@ -801,4 +801,10 @@ where\n     yoo: &'a U\n }\n \n+// https://github.com/rust-lang/rust/issues/105150\n+struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+{\n+    data: &'a T,\n+}\n+\n fn main() {}"}, {"sha": "3f63cb8e90030a0087926def2e175f4cfc595994", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs?ref=41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "patch": "@@ -801,4 +801,12 @@ where\n     yoo: &'a U\n }\n \n+// https://github.com/rust-lang/rust/issues/105150\n+struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+//~^ ERROR outlives requirements can be inferred\n+    where T: 'a,\n+{\n+    data: &'a T,\n+}\n+\n fn main() {}"}, {"sha": "dbf301fd8a1b7b873b9092b55fc3b8d089613abd", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41d5aeccecd92d137bb04c68fbf2c8110d33dca6/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr?ref=41d5aeccecd92d137bb04c68fbf2c8110d33dca6", "patch": "@@ -10,6 +10,15 @@ note: the lint level is defined here\n LL | #![deny(explicit_outlives_requirements)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives.rs:805:56\n+   |\n+LL |   struct InferredWhereBoundWithInlineBound<'a, T: ?Sized>\n+   |  ________________________________________________________^\n+LL | |\n+LL | |     where T: 'a,\n+   | |________________^ help: remove this bound\n+\n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives.rs:26:31\n    |\n@@ -922,5 +931,5 @@ error: outlives requirements can be inferred\n LL |     union BeeWhereOutlivesAyTeeWhereDebug<'a, 'b, T> where 'b: 'a, T: Debug {\n    |                                                            ^^^^^^^^ help: remove this bound\n \n-error: aborting due to 153 previous errors\n+error: aborting due to 154 previous errors\n "}]}