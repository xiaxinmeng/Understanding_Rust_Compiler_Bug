{"sha": "81d128b9683a1fc6cc21726ecb431774651ce8f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZDEyOGI5NjgzYTFmYzZjYzIxNzI2ZWNiNDMxNzc0NjUxY2U4ZjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-17T15:24:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-17T15:24:11Z"}, "message": "Merge branch 'generic-enum-disr-fix' of https://github.com/michaelwoerister/rust into update-llvm", "tree": {"sha": "8a22193eefccac738efbb124defe2885f5082641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a22193eefccac738efbb124defe2885f5082641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d128b9683a1fc6cc21726ecb431774651ce8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d128b9683a1fc6cc21726ecb431774651ce8f1", "html_url": "https://github.com/rust-lang/rust/commit/81d128b9683a1fc6cc21726ecb431774651ce8f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d128b9683a1fc6cc21726ecb431774651ce8f1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958d5638254958ea42652de7444b63f2e67e7fe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/958d5638254958ea42652de7444b63f2e67e7fe3", "html_url": "https://github.com/rust-lang/rust/commit/958d5638254958ea42652de7444b63f2e67e7fe3"}, {"sha": "f9a20bb2060105d369cae41f448dc6bb6915d5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a20bb2060105d369cae41f448dc6bb6915d5ac", "html_url": "https://github.com/rust-lang/rust/commit/f9a20bb2060105d369cae41f448dc6bb6915d5ac"}], "stats": {"total": 107, "additions": 98, "deletions": 9}, "files": [{"sha": "599a255ef8b6cee31462774900a5783f93bc4819", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=81d128b9683a1fc6cc21726ecb431774651ce8f1", "patch": "@@ -1606,13 +1606,10 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         .collect();\n \n     let discriminant_type_metadata = |inttype| {\n-        // We can reuse the type of the discriminant for all monomorphized\n-        // instances of an enum because it doesn't depend on any type\n-        // parameters. The def_id, uniquely identifying the enum's polytype acts\n-        // as key in this cache.\n+        let disr_type_key = (enum_def_id, inttype);\n         let cached_discriminant_type_metadata = debug_context(cx).created_enum_disr_types\n                                                                  .borrow()\n-                                                                 .get(&enum_def_id).cloned();\n+                                                                 .get(&disr_type_key).cloned();\n         match cached_discriminant_type_metadata {\n             Some(discriminant_type_metadata) => discriminant_type_metadata,\n             None => {\n@@ -1641,7 +1638,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n                 debug_context(cx).created_enum_disr_types\n                                  .borrow_mut()\n-                                 .insert(enum_def_id, discriminant_type_metadata);\n+                                 .insert(disr_type_key, discriminant_type_metadata);\n \n                 discriminant_type_metadata\n             }"}, {"sha": "a87352989173104c409f6a239b8bc7c354f62dd3", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=81d128b9683a1fc6cc21726ecb431774651ce8f1", "patch": "@@ -32,7 +32,7 @@ use trans;\n use trans::monomorphize;\n use middle::ty::Ty;\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n-use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n+use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n use libc::c_uint;\n use std::cell::{Cell, RefCell};\n@@ -41,6 +41,7 @@ use std::ptr;\n use std::rc::Rc;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap, ast_util};\n+use syntax::attr::IntType;\n use syntax::parse::token::{self, special_idents};\n \n pub mod gdb;\n@@ -73,7 +74,7 @@ pub struct CrateDebugContext<'tcx> {\n     builder: DIBuilderRef,\n     current_debug_location: Cell<InternalDebugLocation>,\n     created_files: RefCell<FnvHashMap<String, DIFile>>,\n-    created_enum_disr_types: RefCell<DefIdMap<DIType>>,\n+    created_enum_disr_types: RefCell<FnvHashMap<(ast::DefId, IntType), DIType>>,\n \n     type_map: RefCell<TypeMap<'tcx>>,\n     namespace_map: RefCell<FnvHashMap<Vec<ast::Name>, Rc<NamespaceTreeNode>>>,\n@@ -94,7 +95,7 @@ impl<'tcx> CrateDebugContext<'tcx> {\n             builder: builder,\n             current_debug_location: Cell::new(InternalDebugLocation::UnknownLocation),\n             created_files: RefCell::new(FnvHashMap()),\n-            created_enum_disr_types: RefCell::new(DefIdMap()),\n+            created_enum_disr_types: RefCell::new(FnvHashMap()),\n             type_map: RefCell::new(TypeMap::new()),\n             namespace_map: RefCell::new(FnvHashMap()),\n             composite_types_completed: RefCell::new(FnvHashSet()),"}, {"sha": "ab8f150a145c6672a9c059291229bcb70ff1c797", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d128b9683a1fc6cc21726ecb431774651ce8f1/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=81d128b9683a1fc6cc21726ecb431774651ce8f1", "patch": "@@ -0,0 +1,91 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// min-lldb-version: 310\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+// gdb-command:run\n+\n+// gdb-command:print eight_bytes1\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Variant1, __0 = 100}, {RUST$ENUM$DISR = Variant1, __0 = 100}}\n+// gdb-command:print four_bytes1\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Variant1, __0 = 101}, {RUST$ENUM$DISR = Variant1, __0 = 101}}\n+// gdb-command:print two_bytes1\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Variant1, __0 = 102}, {RUST$ENUM$DISR = Variant1, __0 = 102}}\n+// gdb-command:print one_byte1\n+// gdb-check:$4 = {{RUST$ENUM$DISR = Variant1, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant1, __0 = 65 'A'}}\n+\n+// gdb-command:print eight_bytes2\n+// gdb-check:$5 = {{RUST$ENUM$DISR = Variant2, __0 = 100}, {RUST$ENUM$DISR = Variant2, __0 = 100}}\n+// gdb-command:print four_bytes2\n+// gdb-check:$6 = {{RUST$ENUM$DISR = Variant2, __0 = 101}, {RUST$ENUM$DISR = Variant2, __0 = 101}}\n+// gdb-command:print two_bytes2\n+// gdb-check:$7 = {{RUST$ENUM$DISR = Variant2, __0 = 102}, {RUST$ENUM$DISR = Variant2, __0 = 102}}\n+// gdb-command:print one_byte2\n+// gdb-check:$8 = {{RUST$ENUM$DISR = Variant2, __0 = 65 'A'}, {RUST$ENUM$DISR = Variant2, __0 = 65 'A'}}\n+\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+// lldb-command:run\n+\n+// lldb-command:print eight_bytes1\n+// lldb-check:[...]$0 = Variant1(100)\n+// lldb-command:print four_bytes1\n+// lldb-check:[...]$1 = Variant1(101)\n+// lldb-command:print two_bytes1\n+// lldb-check:[...]$2 = Variant1(102)\n+// lldb-command:print one_byte1\n+// lldb-check:[...]$3 = Variant1('A')\n+\n+// lldb-command:print eight_bytes2\n+// lldb-check:[...]$4 = Variant2(100)\n+// lldb-command:print four_bytes2\n+// lldb-check:[...]$5 = Variant2(101)\n+// lldb-command:print two_bytes2\n+// lldb-check:[...]$6 = Variant2(102)\n+// lldb-command:print one_byte2\n+// lldb-check:[...]$7 = Variant2('A')\n+\n+// lldb-command:continue\n+\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// This test case makes sure that we get correct type descriptions for the enum\n+// discriminant of different instantiations of the same generic enum type where,\n+// dependending on the generic type parameter(s), the discriminant has a\n+// different size in memory.\n+\n+enum Enum<T> {\n+    Variant1(T),\n+    Variant2(T)\n+}\n+\n+fn main() {\n+    // These are ordered for descending size on purpose\n+    let eight_bytes1 = Enum::Variant1(100.0f64);\n+    let four_bytes1 = Enum::Variant1(101i32);\n+    let two_bytes1 = Enum::Variant1(102i16);\n+    let one_byte1 = Enum::Variant1(65u8);\n+\n+    let eight_bytes2 = Enum::Variant2(100.0f64);\n+    let four_bytes2 = Enum::Variant2(101i32);\n+    let two_bytes2 = Enum::Variant2(102i16);\n+    let one_byte2 = Enum::Variant2(65u8);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { () }"}]}