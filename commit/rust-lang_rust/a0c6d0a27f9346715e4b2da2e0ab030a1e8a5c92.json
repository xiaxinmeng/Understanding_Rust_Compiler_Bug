{"sha": "a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzZkMGEyN2Y5MzQ2NzE1ZTRiMmRhMmUwYWIwMzBhMWU4YTVjOTI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-19T19:31:18Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-19T19:33:45Z"}, "message": "Comments and cleanup.", "tree": {"sha": "24de6f2f0815abde836618ff2025543de84f3888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24de6f2f0815abde836618ff2025543de84f3888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92", "html_url": "https://github.com/rust-lang/rust/commit/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ee22dc84c889433454d0e056d1addab9e5fd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ee22dc84c889433454d0e056d1addab9e5fd54", "html_url": "https://github.com/rust-lang/rust/commit/61ee22dc84c889433454d0e056d1addab9e5fd54"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "62d54da85447bad0d6ef4a69e4de90943933081b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=a0c6d0a27f9346715e4b2da2e0ab030a1e8a5c92", "patch": "@@ -68,7 +68,7 @@ type fn_ctxt =\n \n \n // Used for ast_ty_to_ty() below.\n-type ty_getter = fn(&ast::def_id) -> ty::ty_param_count_and_ty ;\n+type ty_getter = fn(&ast::def_id) -> ty::ty_param_count_and_ty;\n \n fn lookup_local(&@fn_ctxt fcx, &span sp, ast::node_id id) -> int {\n     alt (fcx.locals.find(id)) {\n@@ -1164,6 +1164,7 @@ type gather_result =\n         hashmap[ast::node_id, ast::ident] local_names,\n         int next_var_id);\n \n+// Used only as a helper for check_fn.\n fn gather_locals(&@crate_ctxt ccx, &ast::_fn f,\n                  &ast::node_id id) -> gather_result {\n     fn next_var_id(@mutable int nvi) -> int {\n@@ -1191,8 +1192,8 @@ fn gather_locals(&@crate_ctxt ccx, &ast::_fn f,\n     auto locals = new_int_hash[int]();\n     auto local_names = new_int_hash[ast::ident]();\n     auto nvi = @mutable 0;\n-    // Add object fields, if any.\n \n+    // Add object fields, if any.\n     alt (get_obj_info(ccx)) {\n         case (option::some(?oinfo)) {\n             for (ast::obj_field f in oinfo.obj_fields) {\n@@ -1204,7 +1205,6 @@ fn gather_locals(&@crate_ctxt ccx, &ast::_fn f,\n         case (option::none) {/* no fields */ }\n     }\n     // Add formal parameters.\n-\n     auto args = ty::ty_fn_args(ccx.tcx, ty::node_id_to_type(ccx.tcx, id));\n     auto i = 0u;\n     for (ty::arg arg in args) {\n@@ -2113,8 +2113,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                                                context\");\n                 }\n             }\n-            // Grab this method's type out of the current object type.\n \n+            // Grab this method's type out of the current object type.\n             alt (structure_of(fcx, expr.span, this_obj_ty)) {\n                 case (ty::ty_obj(?methods)) {\n                     for (ty::method method in methods) {\n@@ -2268,7 +2268,6 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                     write::ty_only_fixup(fcx, id, fields.(ix).mt.ty);\n                 }\n                 case (ty::ty_obj(?methods)) {\n-                    // log_err \"checking method_idx 1...\";\n                     let uint ix =\n                         ty::method_idx(fcx.ccx.tcx.sess, expr.span, field,\n                                        methods);\n@@ -2458,14 +2457,14 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                                                       method_types.(i)));\n                 i += 1u;\n             }\n-            // Typecheck the methods.\n \n+            // Typecheck the methods.\n             for (@ast::method method in anon_obj.methods) {\n                 check_method(fcx.ccx, method);\n             }\n             next_ty_var(fcx);\n-            // Now remove the info from the stack.\n \n+            // Now remove the info from the stack.\n             ivec::pop[obj_info](fcx.ccx.obj_infos);\n         }\n         case (_) {\n@@ -2658,13 +2657,12 @@ fn check_item(@crate_ctxt ccx, &@ast::item it) {\n \n             ccx.obj_infos += ~[rec(obj_fields=ob.fields, this_obj=it.id)];\n             // Typecheck the methods.\n-\n             for (@ast::method method in ob.methods) {\n                 check_method(ccx, method);\n             }\n             option::may[@ast::method](bind check_method(ccx, _), ob.dtor);\n-            // Now remove the info from the stack.\n \n+            // Now remove the info from the stack.\n             ivec::pop[obj_info](ccx.obj_infos);\n         }\n         case (_) {/* nothing to do */ }"}]}