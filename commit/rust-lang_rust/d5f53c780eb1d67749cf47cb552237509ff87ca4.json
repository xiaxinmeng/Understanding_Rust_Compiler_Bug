{"sha": "d5f53c780eb1d67749cf47cb552237509ff87ca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjUzYzc4MGViMWQ2Nzc0OWNmNDdjYjU1MjIzNzUwOWZmODdjYTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-17T03:08:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-17T03:08:01Z"}, "message": "Provide more useful messages when tests are given -h or --help\n\nProgress on #7824", "tree": {"sha": "544b8628eb201e0b26d09ff388343cfa57f870af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544b8628eb201e0b26d09ff388343cfa57f870af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f53c780eb1d67749cf47cb552237509ff87ca4", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f53c780eb1d67749cf47cb552237509ff87ca4", "html_url": "https://github.com/rust-lang/rust/commit/d5f53c780eb1d67749cf47cb552237509ff87ca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f53c780eb1d67749cf47cb552237509ff87ca4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9db190305f7562f15b5282fed508aef81cfc9689", "url": "https://api.github.com/repos/rust-lang/rust/commits/9db190305f7562f15b5282fed508aef81cfc9689", "html_url": "https://github.com/rust-lang/rust/commit/9db190305f7562f15b5282fed508aef81cfc9689"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "783b96f8962d38b2eb4da7e029bd7807daed40e8", "filename": "src/libextra/test.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d5f53c780eb1d67749cf47cb552237509ff87ca4/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f53c780eb1d67749cf47cb552237509ff87ca4/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=d5f53c780eb1d67749cf47cb552237509ff87ca4", "patch": "@@ -17,6 +17,7 @@\n \n \n use getopts;\n+use getopts::groups;\n use json::ToJson;\n use json;\n use serialize::Decodable;\n@@ -28,6 +29,7 @@ use time::precise_time_ns;\n use treemap::TreeMap;\n \n use std::comm::{stream, SharedChan};\n+use std::libc;\n use std::either;\n use std::io;\n use std::result;\n@@ -156,22 +158,64 @@ pub struct TestOpts {\n \n type OptRes = Either<TestOpts, ~str>;\n \n+fn optgroups() -> ~[getopts::groups::OptGroup] {\n+    ~[groups::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n+      groups::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n+      groups::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n+      groups::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n+      groups::optopt(\"\", \"save-metrics\", \"Location to save bench metrics\",\n+                     \"PATH\"),\n+      groups::optopt(\"\", \"ratchet-metrics\",\n+                     \"Location to load and save metrics from. The metrics \\\n+                      loaded are cause benchmarks to fail if they run too \\\n+                      slowly\", \"PATH\"),\n+      groups::optopt(\"\", \"ratchet-noise-percent\",\n+                     \"Tests within N% of the recorded metrics will be \\\n+                      considered as passing\", \"PERCENTAGE\"),\n+      groups::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n+                          of stdout\", \"PATH\")]\n+}\n+\n+fn usage(binary: &str, helpstr: &str) -> ! {\n+    let message = fmt!(\"Usage: %s [OPTIONS] [FILTER]\", binary);\n+    println(groups::usage(message, optgroups()));\n+    if helpstr == \"help\" {\n+        println(\"\\\n+The FILTER is matched against the name of all tests to run, and if any tests\n+have a substring match, only those tests are run.\n+\n+By default, all tests are run in parallel. This can be altered with the\n+RUST_THREADS environment variable when running tests (set it to 1).\n+\n+Test Attributes:\n+\n+    #[test]        - Indicates a function is a test to be run. This function\n+                     takes no arguments.\n+    #[bench]       - Indicates a function is a benchmark to be run. This\n+                     function takes one argument (extra::test::BenchHarness).\n+    #[should_fail] - This function (also labeled with #[test]) will only pass if\n+                     the code causes a failure (an assertion failure or fail!)\n+    #[ignore]      - When applied to a function which is already attributed as a\n+                     test, then the test runner will ignore these tests during\n+                     normal test runs. Running with --ignored will run these\n+                     tests. This may also be written as #[ignore(cfg(...))] to\n+                     ignore the test on certain configurations.\");\n+    }\n+    unsafe { libc::exit(0) }\n+}\n+\n // Parses command line arguments into test options\n pub fn parse_opts(args: &[~str]) -> OptRes {\n     let args_ = args.tail();\n-    let opts = ~[getopts::optflag(\"ignored\"),\n-                 getopts::optflag(\"test\"),\n-                 getopts::optflag(\"bench\"),\n-                 getopts::optopt(\"save-metrics\"),\n-                 getopts::optopt(\"ratchet-metrics\"),\n-                 getopts::optopt(\"ratchet-noise-percent\"),\n-                 getopts::optopt(\"logfile\")];\n     let matches =\n-        match getopts::getopts(args_, opts) {\n+        match groups::getopts(args_, optgroups()) {\n           Ok(m) => m,\n           Err(f) => return either::Right(getopts::fail_str(f))\n         };\n \n+    if getopts::opt_present(&matches, \"h\") { usage(args[0], \"h\"); }\n+    if getopts::opt_present(&matches, \"help\") { usage(args[0], \"help\"); }\n+\n     let filter =\n         if matches.free.len() > 0 {\n             Some(copy (matches).free[0])"}]}