{"sha": "d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5N2Y4OWIxYTZhZGQ0MWI2YWMzYzBkNjljYmU4MmQxNTQ4M2EwZDY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T16:07:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T16:07:25Z"}, "message": "polymorphize: non-promoted unevaluated constants\n\nThis commit makes polymorphization visit non-promoted unevaluated\nconstants rather than visit their substs directly.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "141b21c22eabd64947652cb22ff5fd4f6f9d824b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141b21c22eabd64947652cb22ff5fd4f6f9d824b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8tfGYACgkQJZLnbIc4\nH9mD+g//S6y9Fa76cOr3x6ZdgHipiqktG++jwTV7wZ6koQjEue36rL3vIXb/m0bq\nTBg+d1RXLxEiPzRvaxCY9stGzgGPCPlIr7ZHNWJJNdM5Te5ysJqiqN443sbbAxq2\nI2SqO8tVgL5yeT6+ItJxKlrucUXp9YkkDCRxczSh/Inb1ziYv3+mfnucx6F/l8LN\nHKjsfUiFbBZLeiJJWvzNptdRgdXJNH0TDzXZD/aQLMsO/WOWAPNq1faeoonHZLj8\nJ+tLE0FqpdnOufcejCtSZR+VOxAo5FyUbOHDVXnvVYpOuLPnD/8vA8Tj82/toob+\nBel92B5lqzOtGb7/iOkGEqls7Qc6nu+eDNokHkz9qZOtWKuXUcvgWR9DrDZ0wCzZ\n1COCOJZalCdh9yebAGK3u5ixrDce141VWrHX1VnMamwg1JWOClIEV2gGiXKEcq8G\nnUCV8F3DTEtFq7zU2YPLKmZp/i6/R1aBf4Bc+75tFz5M1lwYLpqzvxPEj5GZcBZ5\nAGlwKPkK/yuVkl9PFy5ZQ0oKkNBj7ujx2LoH2XwKmrHzPFN7FJkxNMmsm0tAdiVu\n00b9FLYDNQQYb4LynuyCZMscJPDSFg46VKoPMKpmxn6uAcfNZjrm3HmUqTcwNhrO\n0P2+pgzfdJceeWo4Hw+CBBMwgn2XIj40bVz5fM1TbRTISpZX+dI=\n=V/b8\n-----END PGP SIGNATURE-----", "payload": "tree 141b21c22eabd64947652cb22ff5fd4f6f9d824b\nparent 659d44a3b4928b5b9b81927dec74242d3bdb7120\nauthor David Wood <david@davidtw.co> 1596816445 +0100\ncommitter David Wood <david@davidtw.co> 1596816445 +0100\n\npolymorphize: non-promoted unevaluated constants\n\nThis commit makes polymorphization visit non-promoted unevaluated\nconstants rather than visit their substs directly.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "html_url": "https://github.com/rust-lang/rust/commit/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659d44a3b4928b5b9b81927dec74242d3bdb7120", "url": "https://api.github.com/repos/rust-lang/rust/commits/659d44a3b4928b5b9b81927dec74242d3bdb7120", "html_url": "https://github.com/rust-lang/rust/commit/659d44a3b4928b5b9b81927dec74242d3bdb7120"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "072941ee58dbd162aeec539e3f679da3b8f133e6", "filename": "src/librustc_mir/monomorphize/polymorphize.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpolymorphize.rs?ref=d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{\n     self,\n     fold::{TypeFoldable, TypeVisitor},\n     query::Providers,\n+    subst::SubstsRef,\n     Const, Ty, TyCtxt,\n };\n use rustc_span::symbol::sym;\n@@ -205,6 +206,25 @@ struct UsedGenericParametersVisitor<'a, 'tcx> {\n     unused_parameters: &'a mut FiniteBitSet<u32>,\n }\n \n+impl<'a, 'tcx> UsedGenericParametersVisitor<'a, 'tcx> {\n+    /// Invoke `unused_generic_params` on a body contained within the current item (e.g.\n+    /// a closure, generator or constant).\n+    fn visit_child_body(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) {\n+        let unused = self.tcx.unused_generic_params(def_id);\n+        debug!(\n+            \"visit_child_body: unused_parameters={:?} unused={:?}\",\n+            self.unused_parameters, unused\n+        );\n+        for (i, arg) in substs.iter().enumerate() {\n+            let i = i.try_into().unwrap();\n+            if !unused.contains(i).unwrap_or(false) {\n+                arg.visit_with(self);\n+            }\n+        }\n+        debug!(\"visit_child_body: unused_parameters={:?}\", self.unused_parameters);\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n     fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n         debug!(\"visit_local_decl: local_decl={:?}\", local_decl);\n@@ -252,6 +272,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n                 self.visit_body(&promoted[p]);\n                 false\n             }\n+            ty::ConstKind::Unevaluated(def_id, unevaluated_substs, None) => {\n+                self.visit_child_body(def_id.did, unevaluated_substs);\n+                false\n+            }\n             _ => c.super_visit_with(self),\n         }\n     }\n@@ -272,19 +296,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for UsedGenericParametersVisitor<'a, 'tcx> {\n \n                 // Consider any generic parameters used by any closures/generators as used in the\n                 // parent.\n-                let unused = self.tcx.unused_generic_params(def_id);\n-                debug!(\n-                    \"visit_ty: unused_parameters={:?} unused={:?}\",\n-                    self.unused_parameters, unused\n-                );\n-                for (i, arg) in substs.iter().enumerate() {\n-                    let i = i.try_into().unwrap();\n-                    if !unused.contains(i).unwrap_or(false) {\n-                        arg.visit_with(self);\n-                    }\n-                }\n-                debug!(\"visit_ty: unused_parameters={:?}\", self.unused_parameters);\n-\n+                self.visit_child_body(def_id, substs);\n                 false\n             }\n             ty::Param(param) => {"}, {"sha": "2831f861f556167dd2e0a782596305908875793b", "filename": "src/test/ui/polymorphization/promoted-function-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.rs?ref=d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "patch": "@@ -0,0 +1,16 @@\n+// build-fail\n+// compile-flags:-Zpolymorphize=on\n+#![crate_type = \"lib\"]\n+#![feature(lazy_normalization_consts, rustc_attrs)]\n+//~^ WARN the feature `lazy_normalization_consts` is incomplete\n+\n+#[rustc_polymorphize_error]\n+fn test<T>() {\n+    //~^ ERROR item has unused generic parameters\n+    let x = [0; 3 + 4];\n+}\n+\n+pub fn caller() {\n+    test::<String>();\n+    test::<Vec<String>>();\n+}"}, {"sha": "38d4808c48c03f63f814ae7e7c1883ed40d6bca2", "filename": "src/test/ui/polymorphization/promoted-function-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpromoted-function-2.stderr?ref=d97f89b1a6add41b6ac3c0d69cbe82d15483a0d6", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `lazy_normalization_consts` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/promoted-function-2.rs:4:12\n+   |\n+LL | #![feature(lazy_normalization_consts, rustc_attrs)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #72219 <https://github.com/rust-lang/rust/issues/72219> for more information\n+\n+error: item has unused generic parameters\n+  --> $DIR/promoted-function-2.rs:8:4\n+   |\n+LL | fn test<T>() {\n+   |    ^^^^ - generic parameter `T` is unused\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}