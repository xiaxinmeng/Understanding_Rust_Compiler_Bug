{"sha": "5609989368e5cd5137e8860b7a78859b98e89085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MDk5ODkzNjhlNWNkNTEzN2U4ODYwYjdhNzg4NTliOThlODkwODU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T22:57:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T22:57:40Z"}, "message": "more stable DefIds via bfs tree walking", "tree": {"sha": "55b931a5fdd3f65734bbc7a46bc23b92161adf66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b931a5fdd3f65734bbc7a46bc23b92161adf66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5609989368e5cd5137e8860b7a78859b98e89085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5609989368e5cd5137e8860b7a78859b98e89085", "html_url": "https://github.com/rust-lang/rust/commit/5609989368e5cd5137e8860b7a78859b98e89085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5609989368e5cd5137e8860b7a78859b98e89085/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc85619beaa3cd9fc47bb8ac1791820691e1205", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc85619beaa3cd9fc47bb8ac1791820691e1205", "html_url": "https://github.com/rust-lang/rust/commit/2dc85619beaa3cd9fc47bb8ac1791820691e1205"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "8ac49eba3e5f397b19b6dde8096c1d0e7a9dc323", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5609989368e5cd5137e8860b7a78859b98e89085/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5609989368e5cd5137e8860b7a78859b98e89085/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=5609989368e5cd5137e8860b7a78859b98e89085", "patch": "@@ -253,13 +253,17 @@ impl SourceFileItems {\n     }\n \n     fn init(&mut self, source_file: &SourceFile) {\n-        source_file.syntax().descendants().for_each(|it| {\n+        // By walking the tree in bread-first order we make sure that parents\n+        // get lower ids then children. That is, addding a new child does not\n+        // change parent's id. This means that, say, adding a new function to a\n+        // trait does not chage ids of top-level items, which helps caching.\n+        bfs(source_file.syntax(), |it| {\n             if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 self.alloc(module_item.syntax().to_owned());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n                 self.alloc(macro_call.syntax().to_owned());\n             }\n-        });\n+        })\n     }\n \n     fn alloc(&mut self, item: TreePtr<SyntaxNode>) -> SourceFileItemId {\n@@ -305,3 +309,16 @@ impl std::ops::Index<SourceFileItemId> for SourceFileItems {\n         &self.arena[idx]\n     }\n }\n+\n+/// Walks the subtree in bfs order, calling `f` for each node.\n+fn bfs(node: &SyntaxNode, mut f: impl FnMut(&SyntaxNode)) {\n+    let mut curr_layer = vec![node];\n+    let mut next_layer = vec![];\n+    while !curr_layer.is_empty() {\n+        curr_layer.drain(..).for_each(|node| {\n+            next_layer.extend(node.children());\n+            f(node);\n+        });\n+        std::mem::swap(&mut curr_layer, &mut next_layer);\n+    }\n+}"}, {"sha": "17de54b4422dba46fa0c9bfef8e0c4b4ef2eece2", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5609989368e5cd5137e8860b7a78859b98e89085/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5609989368e5cd5137e8860b7a78859b98e89085/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=5609989368e5cd5137e8860b7a78859b98e89085", "patch": "@@ -368,7 +368,7 @@ fn typing_inside_a_function_should_not_invalidate_item_map() {\n         mod foo;\n \n         use crate::foo::bar::Baz;\n-{\n+\n         fn foo() -> i32 { 92 }\n         \",\n     );\n@@ -380,12 +380,15 @@ fn adding_inner_items_should_not_invalidate_item_map() {\n         \"\n         //- /lib.rs\n         struct S { a: i32}\n-        mod foo;<|>\n         enum E { A }\n-        use crate::foo::bar::Baz;\n         trait T {\n             fn a() {}\n         }\n+        mod foo;<|>\n+        impl S {\n+            fn a() {}\n+        }\n+        use crate::foo::bar::Baz;\n         //- /foo/mod.rs\n         pub mod bar;\n \n@@ -394,13 +397,17 @@ fn adding_inner_items_should_not_invalidate_item_map() {\n         \",\n         \"\n         struct S { a: i32, b: () }\n-        mod foo;<|>\n         enum E { A, B }\n-        use crate::foo::bar::Baz;\n         trait T {\n             fn a() {}\n             fn b() {}\n         }\n+        mod foo;<|>\n+        impl S {\n+            fn a() {}\n+            fn b() {}\n+        }\n+        use crate::foo::bar::Baz;\n         \",\n     );\n }"}]}