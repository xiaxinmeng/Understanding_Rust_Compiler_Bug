{"sha": "a9680938d0840066cb79a50248fb8a099e61389e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjgwOTM4ZDA4NDAwNjZjYjc5YTUwMjQ4ZmI4YTA5OWU2MTM4OWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T20:36:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:13:04Z"}, "message": "Add explicit exception list to linkchecker", "tree": {"sha": "faeddca09ca459cda36476cff30909c4ccbd80f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faeddca09ca459cda36476cff30909c4ccbd80f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9680938d0840066cb79a50248fb8a099e61389e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9680938d0840066cb79a50248fb8a099e61389e", "html_url": "https://github.com/rust-lang/rust/commit/a9680938d0840066cb79a50248fb8a099e61389e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9680938d0840066cb79a50248fb8a099e61389e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9392a5ed945e8f816d6a288029face31c40c9d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/9392a5ed945e8f816d6a288029face31c40c9d10", "html_url": "https://github.com/rust-lang/rust/commit/9392a5ed945e8f816d6a288029face31c40c9d10"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "63fb1ccf79967cdaff735017acb829868ec4e1de", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a9680938d0840066cb79a50248fb8a099e61389e/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9680938d0840066cb79a50248fb8a099e61389e/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=a9680938d0840066cb79a50248fb8a099e61389e", "patch": "@@ -23,6 +23,31 @@ use std::rc::Rc;\n \n use crate::Redirect::*;\n \n+// Add linkcheck exceptions here\n+// If at all possible you should use intra-doc links to avoid linkcheck issues. These\n+// are cases where that does not work\n+const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n+    // These are methods on slice, and `Self` does not work on primitive impls\n+    // in intra-doc links (intra-doc links are weird)\n+    // https://github.com/rust-lang/rust/issues/62834 is necessary to be\n+    // able to link to slices\n+    (\n+        \"std/io/struct.IoSlice.html\",\n+        &[\n+            \"#method.as_mut_ptr\",\n+            \"#method.sort_by_key\",\n+            \"#method.make_ascii_uppercase\",\n+            \"#method.make_ascii_lowercase\",\n+        ],\n+    ),\n+    // These try to link to std::collections, but are defined in alloc\n+    // https://github.com/rust-lang/rust/issues/74481\n+    (\"std/collections/btree_map/struct.BTreeMap.html\", &[\"#insert-and-complex-keys\"]),\n+    (\"std/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n+    (\"alloc/collections/btree_map/struct.BTreeMap.html\", &[\"#insert-and-complex-keys\"]),\n+    (\"alloc/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n+];\n+\n macro_rules! t {\n     ($e:expr) => {\n         match $e {\n@@ -111,30 +136,20 @@ fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n     }\n }\n \n+fn is_exception(file: &Path, link: &str) -> bool {\n+    if let Some(entry) = LINKCHECK_EXCEPTIONS.iter().find(|&(f, _)| file.ends_with(f)) {\n+        entry.1.contains(&link)\n+    } else {\n+        false\n+    }\n+}\n+\n fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Option<PathBuf> {\n     // Ignore non-HTML files.\n     if file.extension().and_then(|s| s.to_str()) != Some(\"html\") {\n         return None;\n     }\n \n-    // Unfortunately we're not 100% full of valid links today to we need a few\n-    // exceptions to get this past `make check` today.\n-    // FIXME(#32129)\n-    if file.ends_with(\"std/io/struct.IoSlice.html\")\n-    {\n-        return None;\n-    }\n-\n-    // FIXME(#32130)\n-    if file.ends_with(\"alloc/collections/btree_map/struct.BTreeMap.html\")\n-        || file.ends_with(\"alloc/collections/btree_set/struct.BTreeSet.html\")\n-        || file.ends_with(\"std/collections/btree_map/struct.BTreeMap.html\")\n-        || file.ends_with(\"std/collections/btree_set/struct.BTreeSet.html\")\n-        || file.ends_with(\"std/collections/hash_set/struct.HashSet.html\")\n-    {\n-        return None;\n-    }\n-\n     let res = load_file(cache, root, file, SkipRedirect);\n     let (pretty_file, contents) = match res {\n         Ok(res) => res,\n@@ -249,17 +264,20 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n                 let entry = &mut cache.get_mut(&pretty_path).unwrap();\n                 entry.parse_ids(&pretty_path, &contents, errors);\n \n-                if !entry.ids.contains(*fragment) {\n+                if !entry.ids.contains(*fragment) && !is_exception(file, &format!(\"#{}\", fragment))\n+                {\n                     *errors = true;\n                     print!(\"{}:{}: broken link fragment \", pretty_file.display(), i + 1);\n                     println!(\"`#{}` pointing to `{}`\", fragment, pretty_path.display());\n                 };\n             }\n         } else {\n-            *errors = true;\n-            print!(\"{}:{}: broken link - \", pretty_file.display(), i + 1);\n             let pretty_path = path.strip_prefix(root).unwrap_or(&path);\n-            println!(\"{}\", pretty_path.display());\n+            if !is_exception(file, pretty_path.to_str().unwrap()) {\n+                *errors = true;\n+                print!(\"{}:{}: broken link - \", pretty_file.display(), i + 1);\n+                println!(\"{}\", pretty_path.display());\n+            }\n         }\n     });\n     Some(pretty_file)"}]}