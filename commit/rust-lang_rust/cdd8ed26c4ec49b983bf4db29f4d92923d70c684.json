{"sha": "cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDhlZDI2YzRlYzQ5Yjk4M2JmNGRiMjlmNGQ5MjkyM2Q3MGM2ODQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-14T04:23:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-14T07:20:57Z"}, "message": "Rollup merge of #29029 - steveklabnik:iter_function_docs, r=alexcrichton\n\nFlesh the docs out with examples.", "tree": {"sha": "3cbfb58444bffef13778cc0a72ff9cb8d2fcc7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cbfb58444bffef13778cc0a72ff9cb8d2fcc7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "html_url": "https://github.com/rust-lang/rust/commit/cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd8ed26c4ec49b983bf4db29f4d92923d70c684/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570756face3642f9d82f531130737c45b5badf2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/570756face3642f9d82f531130737c45b5badf2c", "html_url": "https://github.com/rust-lang/rust/commit/570756face3642f9d82f531130737c45b5badf2c"}, {"sha": "70c70b739f6d956d6fbdafc101f8198a9476da92", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c70b739f6d956d6fbdafc101f8198a9476da92", "html_url": "https://github.com/rust-lang/rust/commit/70c70b739f6d956d6fbdafc101f8198a9476da92"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "834ba91a828d5b2d6be5f5c2126b48f45380a0cb", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/cdd8ed26c4ec49b983bf4db29f4d92923d70c684/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd8ed26c4ec49b983bf4db29f4d92923d70c684/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=cdd8ed26c4ec49b983bf4db29f4d92923d70c684", "patch": "@@ -3032,7 +3032,52 @@ impl<A: Clone> DoubleEndedIterator for Repeat<A> {\n     fn next_back(&mut self) -> Option<A> { Some(self.element.clone()) }\n }\n \n-/// Creates a new iterator that endlessly repeats the element `elt`.\n+/// Creates a new iterator that endlessly repeats a single element.\n+///\n+/// The `repeat()` function repeats a single value over and over and over and\n+/// over and over and \ud83d\udd01.\n+///\n+/// Infinite iterators like `repeat()` are often used with adapters like\n+/// [`take()`], in order to make them finite.\n+///\n+/// [`take()`]: trait.Iterator.html#method.take\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // the number four 4ever:\n+/// let mut fours = iter::repeat(4);\n+///\n+/// assert_eq!(Some(4), fours.next());\n+/// assert_eq!(Some(4), fours.next());\n+/// assert_eq!(Some(4), fours.next());\n+/// assert_eq!(Some(4), fours.next());\n+/// assert_eq!(Some(4), fours.next());\n+///\n+/// // yup, still four\n+/// assert_eq!(Some(4), fours.next());\n+/// ```\n+///\n+/// Going finite with [`take()`]:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // that last example was too many fours. Let's only have four fours.\n+/// let mut four_fours = iter::repeat(4).take(4);\n+///\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+///\n+/// // ... and now we're done\n+/// assert_eq!(None, four_fours.next());\n+/// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n@@ -3089,6 +3134,19 @@ impl<T> Default for Empty<T> {\n }\n \n /// Creates an iterator that yields nothing.\n+///\n+/// # Exampes\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // this could have been an iterator over i32, but alas, it's just not.\n+/// let mut nope = iter::empty::<i32>();\n+///\n+/// assert_eq!(None, nope.next());\n+/// ```\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n@@ -3129,6 +3187,56 @@ impl<T> ExactSizeIterator for Once<T> {\n }\n \n /// Creates an iterator that yields an element exactly once.\n+///\n+/// This is commonly used to adapt a single value into a [`chain()`] of other\n+/// kinds of iteration. Maybe you have an iterator that covers almost\n+/// everything, but you need an extra special case. Maybe you have a function\n+/// which works on iterators, but you only need to process one value.\n+///\n+/// [`chain()`]: trait.Iterator.html#method.chain\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // one is the loneliest number\n+/// let mut one = iter::once(1);\n+///\n+/// assert_eq!(Some(1), one.next());\n+///\n+/// // just one, that's all we get\n+/// assert_eq!(None, one.next());\n+/// ```\n+///\n+/// Chaining together with another iterator. Let's say that we want to iterate\n+/// over each file of the `.foo` directory, but also a configuration file,\n+/// `.foorc`:\n+///\n+/// ```no_run\n+/// use std::iter;\n+/// use std::fs;\n+/// use std::path::PathBuf;\n+///\n+/// let dirs = fs::read_dir(\".foo\").unwrap();\n+///\n+/// // we need to convert from an iterator of DirEntry-s to an iterator of\n+/// // PathBufs, so we use map\n+/// let dirs = dirs.map(|file| file.unwrap().path());\n+///\n+/// // now, our iterator just for our config file\n+/// let config = iter::once(PathBuf::from(\".foorc\"));\n+///\n+/// // chain the two iterators together into one big iterator\n+/// let files = dirs.chain(config);\n+///\n+/// // this will give us all of the files in .foo as well as .foorc\n+/// for f in files {\n+///     println!(\"{:?}\", f);\n+/// }\n+/// ```\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }"}]}