{"sha": "e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTEwNDQwYTI0ZWNiMmRkYjA4YjRkYmUxNzA0ODhkZGY2MWZjODc=", "commit": {"author": {"name": "liudingming", "email": "liudingming@bytedance.com", "date": "2021-08-09T12:25:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-08-23T19:16:16Z"}, "message": "select obligations after `check_casts`\n\nOtherwise, we can get into a situation where you have\na subtype obligation `#1 <: #2` pending, #1 is constrained\nby `check_casts`, but #2` is unaffected.\n\nCo-authored-by: Niko Matsakis <niko@alum.mit.edu>", "tree": {"sha": "7b574ec36f695dd6346584fcb7850cafbbc98794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b574ec36f695dd6346584fcb7850cafbbc98794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "html_url": "https://github.com/rust-lang/rust/commit/e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e334d87349502766be70d649e6fe4a73573482", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e334d87349502766be70d649e6fe4a73573482", "html_url": "https://github.com/rust-lang/rust/commit/b6e334d87349502766be70d649e6fe4a73573482"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "8f6cdc7bb12a7243ab97820e956a4e185c43330d", "filename": "compiler/rustc_typeck/src/check/fallback.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -3,7 +3,9 @@ use rustc_infer::infer::type_variable::Diverging;\n use rustc_middle::ty::{self, Ty};\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n-    pub(super) fn type_inference_fallback(&self) {\n+    /// Performs type inference fallback, returning true if any fallback\n+    /// occurs.\n+    pub(super) fn type_inference_fallback(&self) -> bool {\n         // All type checking constraints were added, try to fallback unsolved variables.\n         self.select_obligations_where_possible(false, |_| {});\n         let mut fallback_has_occurred = false;\n@@ -50,6 +52,8 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n \n         // See if we can make any more progress.\n         self.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+\n+        fallback_has_occurred\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable."}, {"sha": "ff6cb35a752565b2d5374dfdbc9e796f1af41a13", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -446,11 +446,12 @@ fn typeck_with_fallback<'tcx>(\n             fcx\n         };\n \n-        fcx.type_inference_fallback();\n+        let fallback_has_occurred = fcx.type_inference_fallback();\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n         fcx.check_casts();\n+        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n \n         // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables."}, {"sha": "8d401b7f4444257d7071f5a2b2da411dcbc6bbe8", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 let ExprUseVisitor { ref mc, body_owner: _, delegate: _ } = *self;\n                 let mut needs_to_be_read = false;\n                 for arm in arms.iter() {\n-                    return_if_err!(mc.cat_pattern(discr_place.clone(), &arm.pat, |place, pat| {\n+                    match mc.cat_pattern(discr_place.clone(), &arm.pat, |place, pat| {\n                         match &pat.kind {\n                             PatKind::Binding(.., opt_sub_pat) => {\n                                 // If the opt_sub_pat is None, than the binding does not count as\n@@ -290,7 +290,13 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 // examined\n                             }\n                         }\n-                    }));\n+                    }) {\n+                        Ok(_) => (),\n+                        Err(_) => {\n+                            // If typeck failed, assume borrow is needed.\n+                            needs_to_be_read = true;\n+                        }\n+                    }\n                 }\n \n                 if needs_to_be_read {"}, {"sha": "15c6ae4906c79ff49c8b46a5370f9829b0b34011", "filename": "src/test/ui/closures/2229_closure_analysis/issue_88118.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue_88118.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #88118. Used to ICE.\n+//\n+// check-pass\n+\n+#![feature(capture_disjoint_fields)]\n+\n+fn foo<MsU>(handler: impl FnOnce() -> MsU + Clone + 'static) {\n+    Box::new(move |value| {\n+        (|_| handler.clone()())(value);\n+        None\n+    }) as Box<dyn Fn(i32) -> Option<i32>>;\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "5cf01ddf5d71b042024836aac473695c4ad01609", "filename": "src/test/ui/closures/issue-87814-1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-1.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+fn main() {\n+    let mut schema_all = vec![];\n+    (0..42).for_each(|_x| match Err(()) as Result<(), _> {\n+        Ok(()) => schema_all.push(()),\n+        Err(_) => (),\n+    });\n+}"}, {"sha": "7a5facdac58c39147d66afa729b7d7476f0c66dc", "filename": "src/test/ui/closures/issue-87814-2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8910440a24ecb2ddb08b4dbe170488ddf61fc87/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs?ref=e8910440a24ecb2ddb08b4dbe170488ddf61fc87", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+#![feature(try_reserve)]\n+\n+fn main() {\n+    let mut schema_all: (Vec<String>, Vec<String>) = (vec![], vec![]);\n+\n+    let _c = || match schema_all.0.try_reserve(1) as Result<(), _> {\n+        Ok(()) => (),\n+        Err(_) => (),\n+    };\n+}"}]}