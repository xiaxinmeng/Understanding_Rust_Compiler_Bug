{"sha": "6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWM0ZjY4YzJmOGMxMGJmNDM5YTM5MzczZjVjNTE4ZWQyZjU4YTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T01:47:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T01:47:31Z"}, "message": "core::rt: Just some poking at the I/O docs", "tree": {"sha": "4d62a38c261497ced74e3810a1d381f0911ab1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d62a38c261497ced74e3810a1d381f0911ab1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1", "html_url": "https://github.com/rust-lang/rust/commit/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47ee779cd412ad629ab0f3db1babcc502862924", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47ee779cd412ad629ab0f3db1babcc502862924", "html_url": "https://github.com/rust-lang/rust/commit/e47ee779cd412ad629ab0f3db1babcc502862924"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "c04389e02906009335ab1ba913fee6b4f8469fa3", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=6a5c4f68c2f8c10bf439a39373f5c518ed2f58a1", "patch": "@@ -10,8 +10,12 @@\n \n /*! Synchronous I/O\n \n-This module defines the Rust interface for synchronous I/O.\n-It supports file access,\n+This module defines the Rust interface for synchronous I/O.  It is\n+build around Reader and Writer traits that define byte stream sources\n+and sinks.  Implementations are provided for common I/O streams like\n+file, TCP, UDP, Unix domain sockets, multiple types of memory bufers.\n+Readers and Writers may be composed to add things like string parsing,\n+and compression.\n \n This will likely live in core::io, not core::rt::io.\n \n@@ -27,7 +31,7 @@ Some examples of obvious things you might want to do\n \n * Read a complete file to a string, (converting newlines?)\n \n-    let contents = open(\"message.txt\").read_to_str(); // read_to_str??\n+    let contents = FileStream::open(\"message.txt\").read_to_str(); // read_to_str??\n \n * Write a line to a file\n \n@@ -36,13 +40,26 @@ Some examples of obvious things you might want to do\n \n * Iterate over the lines of a file\n \n+    do FileStream::open(\"message.txt\").each_line |line| {\n+        println(line)\n+    }\n+\n * Pull the lines of a file into a vector of strings\n \n+    let lines = FileStream::open(\"message.txt\").line_iter().to_vec();\n+\n+* Make an simple HTTP request\n+\n+    let socket = TcpStream::open(\"localhost:8080\");\n+    socket.write_line(\"GET / HTTP/1.0\");\n+    socket.write_line(\"\");\n+    let response = socket.read_to_end();\n+\n * Connect based on URL? Requires thinking about where the URL type lives\n   and how to make protocol handlers extensible, e.g. the \"tcp\" protocol\n   yields a `TcpStream`.\n \n-    connect(\"tcp://localhost:8080\").write_line(\"HTTP 1.0 GET /\");\n+    connect(\"tcp://localhost:8080\");\n \n # Terms\n "}]}