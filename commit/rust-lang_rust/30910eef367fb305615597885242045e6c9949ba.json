{"sha": "30910eef367fb305615597885242045e6c9949ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTEwZWVmMzY3ZmIzMDU2MTU1OTc4ODUyNDIwNDVlNmM5OTQ5YmE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-08-05T18:58:07Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-08-05T19:39:22Z"}, "message": "Make qualify consts in_projection use PlaceRef", "tree": {"sha": "6d107f946d97c5eda15081924f7d07cdfb76531a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d107f946d97c5eda15081924f7d07cdfb76531a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30910eef367fb305615597885242045e6c9949ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30910eef367fb305615597885242045e6c9949ba", "html_url": "https://github.com/rust-lang/rust/commit/30910eef367fb305615597885242045e6c9949ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30910eef367fb305615597885242045e6c9949ba/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be067558962c004b638e4c6f162d50f7c0c98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be067558962c004b638e4c6f162d50f7c0c98b6", "html_url": "https://github.com/rust-lang/rust/commit/4be067558962c004b638e4c6f162d50f7c0c98b6"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "15f27d4e0c5149a6db45c760b2359266632115d8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30910eef367fb305615597885242045e6c9949ba/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30910eef367fb305615597885242045e6c9949ba/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=30910eef367fb305615597885242045e6c9949ba", "patch": "@@ -182,16 +182,17 @@ trait Qualif {\n \n     fn in_projection_structurally(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n+        let proj = place.projection.as_ref().unwrap();\n+\n         let base_qualif = Self::in_place(cx, PlaceRef {\n-            base,\n+            base: place.base,\n             projection: &proj.base,\n         });\n         let qualif = base_qualif && Self::mask_for_ty(\n             cx,\n-            Place::ty_from(&base, &proj.base, cx.body, cx.tcx)\n+            Place::ty_from(place.base, &proj.base, cx.body, cx.tcx)\n                 .projection_ty(cx.tcx, &proj.elem)\n                 .ty,\n         );\n@@ -208,10 +209,9 @@ trait Qualif {\n \n     fn in_projection(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n-        Self::in_projection_structurally(cx, base, proj)\n+        Self::in_projection_structurally(cx, place)\n     }\n \n     fn in_place(cx: &ConstCx<'_, 'tcx>, place: PlaceRef<'_, 'tcx>) -> bool {\n@@ -234,9 +234,9 @@ trait Qualif {\n                 Self::in_static(cx, static_)\n             },\n             PlaceRef {\n-                base,\n-                projection: Some(proj),\n-            } => Self::in_projection(cx, base, proj),\n+                base: _,\n+                projection: Some(_),\n+            } => Self::in_projection(cx, place),\n         }\n     }\n \n@@ -448,9 +448,10 @@ impl Qualif for IsNotPromotable {\n \n     fn in_projection(\n         cx: &ConstCx<'_, 'tcx>,\n-        base: &PlaceBase<'tcx>,\n-        proj: &Projection<'tcx>,\n+        place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n+        let proj = place.projection.as_ref().unwrap();\n+\n         match proj.elem {\n             ProjectionElem::Deref |\n             ProjectionElem::Downcast(..) => return true,\n@@ -461,7 +462,7 @@ impl Qualif for IsNotPromotable {\n \n             ProjectionElem::Field(..) => {\n                 if cx.mode == Mode::NonConstFn {\n-                    let base_ty = Place::ty_from(base, &proj.base, cx.body, cx.tcx).ty;\n+                    let base_ty = Place::ty_from(place.base, &proj.base, cx.body, cx.tcx).ty;\n                     if let Some(def) = base_ty.ty_adt_def() {\n                         // No promotion of union field accesses.\n                         if def.is_union() {\n@@ -472,7 +473,7 @@ impl Qualif for IsNotPromotable {\n             }\n         }\n \n-        Self::in_projection_structurally(cx, base, proj)\n+        Self::in_projection_structurally(cx, place)\n     }\n \n     fn in_rvalue(cx: &ConstCx<'_, 'tcx>, rvalue: &Rvalue<'tcx>) -> bool {"}]}