{"sha": "b916a079d1171cf74c1800377c1802276161478f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTZhMDc5ZDExNzFjZjc0YzE4MDAzNzdjMTgwMjI3NjE2MTQ3OGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-22T14:41:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-22T14:41:35Z"}, "message": "Merge pull request #702 from RalfJung/exit\n\nimplement exit", "tree": {"sha": "dba75432a2d8393c70d5238d62036ed817f7c11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba75432a2d8393c70d5238d62036ed817f7c11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b916a079d1171cf74c1800377c1802276161478f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcvdKfCRBK7hj4Ov3rIwAAdHIIAA5V7LPrh1T+QkptFgiZFqhI\nEO5IZwcqcfvX7IwCjS/R9euzh4nAcSUHD6ELy6gQeJ4WbzMOYfD1MEHZPasCgoip\ntUr4/Ftqr/hWPjkmMyI0ek5OBl81rvy2EYVrYRM14nRNtDzO3vMmqZcQWn86mZju\nxjcsd5xlZg+gCEczswHW1FxuatpriXe+4CC/ZAKS+bVZnm8KlSLJ8WJ3r2cmNS6o\nhJ3O2S4w749vsYaSuqDqur+G5CTxhO/HiZIjy4coyWGqK7Td1Rr8S7KLudvhyVga\nh2OHM21hQuDDTdZcaDQSIhDXZEPk5bUUDF774EnOw4vBnQPq+MEGaUwuQ7emOaE=\n=jlMJ\n-----END PGP SIGNATURE-----\n", "payload": "tree dba75432a2d8393c70d5238d62036ed817f7c11a\nparent 1c07cd53e94fad40df70beb3fcf0fdefad849d4c\nparent aaa8ee743bca78d52018a025a525183405b2a1b1\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1555944095 +0200\ncommitter GitHub <noreply@github.com> 1555944095 +0200\n\nMerge pull request #702 from RalfJung/exit\n\nimplement exit"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b916a079d1171cf74c1800377c1802276161478f", "html_url": "https://github.com/rust-lang/rust/commit/b916a079d1171cf74c1800377c1802276161478f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b916a079d1171cf74c1800377c1802276161478f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c07cd53e94fad40df70beb3fcf0fdefad849d4c", "html_url": "https://github.com/rust-lang/rust/commit/1c07cd53e94fad40df70beb3fcf0fdefad849d4c"}, {"sha": "aaa8ee743bca78d52018a025a525183405b2a1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa8ee743bca78d52018a025a525183405b2a1b1", "html_url": "https://github.com/rust-lang/rust/commit/aaa8ee743bca78d52018a025a525183405b2a1b1"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "fae9b1d599a424000608c34bbf0c768a5e54d8c3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -1 +1 @@\n-130dc3e7dac132cf30272ccf4541b512828e2108\n+9224be5fa39f6170f6e046342976efee5453a1ff"}, {"sha": "29a34a6968634413b96d584dce8b66b3f451ac4b", "filename": "src/fn_call.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -149,11 +149,16 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         let link_name = link_name.get().trim_end_matches(\"$UNIX2003\");\n         let tcx = &{this.tcx.tcx};\n \n-        // First: functions that could diverge.\n+        // First: functions that diverge.\n         match link_name {\n             \"__rust_start_panic\" | \"panic_impl\" => {\n                 return err!(MachineError(\"the evaluated program panicked\".to_string()));\n             }\n+            \"exit\" | \"ExitProcess\" => {\n+                // it's really u32 for ExitProcess, but we have to put it into the `Exit` error variant anyway\n+                let code = this.read_scalar(args[0])?.to_i32()?;\n+                return err!(Exit(code));\n+            }\n             _ => if dest.is_none() {\n                 return err!(Unimplemented(\n                     format!(\"can't call diverging foreign function: {}\", link_name),"}, {"sha": "683eee0cb7a381862f61f876d026d75b20711418", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -242,6 +242,13 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             }\n         }\n         Err(mut e) => {\n+            // Special treatment for some error kinds\n+            let msg = match e.kind {\n+                InterpError::Exit(code) => std::process::exit(code),\n+                InterpError::NoMirFor(..) =>\n+                    format!(\"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\", e),\n+                _ => e.to_string()\n+            };\n             e.print_backtrace();\n             if let Some(frame) = ecx.stack().last() {\n                 let block = &frame.mir.basic_blocks()[frame.block];\n@@ -251,11 +258,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                     block.terminator().source_info.span\n                 };\n \n-                let e = e.to_string();\n-                let msg = format!(\"constant evaluation error: {}\", e);\n+                let msg = format!(\"Miri evaluation error: {}\", msg);\n                 let mut err = struct_error(ecx.tcx.tcx.at(span), msg.as_str());\n                 let frames = ecx.generate_stacktrace(None);\n-                err.span_label(span, e);\n+                err.span_label(span, msg);\n                 // We iterate with indices because we need to look at the next frame (the caller).\n                 for idx in 0..frames.len() {\n                     let frame_info = &frames[idx];\n@@ -269,7 +275,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 }\n                 err.emit();\n             } else {\n-                ecx.tcx.sess.err(&e.to_string());\n+                ecx.tcx.sess.err(&msg);\n             }\n \n             for (i, frame) in ecx.stack().iter().enumerate() {"}, {"sha": "61f41363589cae96c1dbf138fadbfa12052ad0ce", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR constant evaluation error: ctlz_nonzero called on 0\n+        ctlz_nonzero(0u8); //~ ERROR ctlz_nonzero called on 0\n     }\n }"}, {"sha": "69d2874ce92698e3330073a3304f81065e6aa221", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR constant evaluation error: cttz_nonzero called on 0\n+        cttz_nonzero(0u8); //~ ERROR cttz_nonzero called on 0\n     }\n }"}, {"sha": "ed2ac60f43fe35c6cb45c63a3b15e9325ac959ce", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -2,7 +2,7 @@ fn f() {}\n \n fn main() {\n     let x: u8 = unsafe {\n-        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR constant evaluation error: tried to dereference a function pointer\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "246893a5c640f2e30132abeba8431e7a991ed79c", "filename": "tests/compile-fail/getrandom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fgetrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fgetrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fgetrandom.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let mut buf = [0u8; 5];\n     unsafe {\n         libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint);\n-        //~^ ERROR constant evaluation error: miri does not support gathering system entropy in deterministic mode!\n+        //~^ ERROR miri does not support gathering system entropy in deterministic mode!\n     }\n }"}, {"sha": "ab25b1ffc7467176bbf849c105fdbfa059dc7acb", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -7,7 +7,6 @@ struct Human;\n \n fn main() {\n     let _x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR constant evaluation error\n-        //^~ NOTE entered unreachable code\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR entered unreachable code\n     };\n }"}, {"sha": "8bf0392b8903bf690d29f9af22a3f9783b05d0d4", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR invalid use of NULL pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "b2800e96292d737270b9e6db42aa13ad30a08d63", "filename": "tests/compile-fail/null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let x: () = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR invalid use of NULL pointer\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "1577b2a1b13bcdf5613ba7003c43a5fba461057f", "filename": "tests/compile-fail/null_pointer_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR invalid use of NULL pointer\n }"}, {"sha": "7e91d736bd295ec011eed6a41cfe4353c1a61ef5", "filename": "tests/compile-fail/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated.\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n-    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR constant evaluation error: invalid use of NULL pointer\n+    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR invalid use of NULL pointer\n }"}, {"sha": "d93f0045377efcd20f258f84c39d62320f3be1c7", "filename": "tests/run-pass/exit.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b916a079d1171cf74c1800377c1802276161478f/tests%2Frun-pass%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b916a079d1171cf74c1800377c1802276161478f/tests%2Frun-pass%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fexit.rs?ref=b916a079d1171cf74c1800377c1802276161478f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    std::process::exit(0)\n+}"}]}