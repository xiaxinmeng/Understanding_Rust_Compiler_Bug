{"sha": "1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "node_id": "C_kwDOAAsO6NoAKDEwMTVhMTc3ZDRhOWYxYzhlZDg1M2RlZTY4ZGMyYmYxM2UwY2IwMmQ", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-10T00:45:20Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-10-10T01:03:38Z"}, "message": "Have `to_generic_args` return `ast::GenericArgList`", "tree": {"sha": "30bc4882529fe0e670cfb4117723de5382c8da5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30bc4882529fe0e670cfb4117723de5382c8da5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "html_url": "https://github.com/rust-lang/rust/commit/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775", "html_url": "https://github.com/rust-lang/rust/commit/bfe6ec9b778d12287fce1fdf2df7e7b0d58ee775"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "229e7419b736febecf341b114dc86b121e6e006d", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "patch": "@@ -236,21 +236,22 @@ impl ast::GenericParamList {\n         }\n     }\n \n-    /// Extracts the const, type, and lifetime names into a new [`ast::GenericParamList`]\n-    pub fn to_generic_args(&self) -> ast::GenericParamList {\n-        let params = self.generic_params().filter_map(|param| match param {\n-            ast::GenericParam::ConstParam(it) => {\n-                Some(ast::GenericParam::TypeParam(make::type_param(it.name()?, None)))\n-            }\n+    /// Constructs a matching [`ast::GenericArgList`]\n+    pub fn to_generic_args(&self) -> ast::GenericArgList {\n+        let args = self.generic_params().filter_map(|param| match param {\n             ast::GenericParam::LifetimeParam(it) => {\n-                Some(ast::GenericParam::LifetimeParam(make::lifetime_param(it.lifetime()?)))\n+                Some(ast::GenericArg::LifetimeArg(make::lifetime_arg(it.lifetime()?)))\n             }\n             ast::GenericParam::TypeParam(it) => {\n-                Some(ast::GenericParam::TypeParam(make::type_param(it.name()?, None)))\n+                Some(ast::GenericArg::TypeArg(make::type_arg(make::ext::ty_name(it.name()?))))\n+            }\n+            ast::GenericParam::ConstParam(it) => {\n+                // Name-only const params get parsed as `TypeArg`s\n+                Some(ast::GenericArg::TypeArg(make::type_arg(make::ext::ty_name(it.name()?))))\n             }\n         });\n \n-        make::generic_param_list(params)\n+        make::generic_arg_list(args)\n     }\n }\n \n@@ -317,7 +318,7 @@ impl Removable for ast::TypeBoundList {\n impl ast::PathSegment {\n     pub fn get_or_create_generic_arg_list(&self) -> ast::GenericArgList {\n         if self.generic_arg_list().is_none() {\n-            let arg_list = make::generic_arg_list().clone_for_update();\n+            let arg_list = make::generic_arg_list(empty()).clone_for_update();\n             ted::append_child(self.syntax(), arg_list.syntax());\n         }\n         self.generic_arg_list().unwrap()"}, {"sha": "c9a21e12c085b3f3ed7464c7555371838725bd59", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "patch": "@@ -88,6 +88,9 @@ pub mod ext {\n         block_expr(None, None)\n     }\n \n+    pub fn ty_name(name: ast::Name) -> ast::Type {\n+        ty_path(ident_path(&format!(\"{name}\")))\n+    }\n     pub fn ty_bool() -> ast::Type {\n         ty_path(ident_path(\"bool\"))\n     }\n@@ -160,6 +163,7 @@ pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }\n \n+// FIXME: `ty_params` should be `ast::GenericArgList`\n pub fn impl_(\n     ty: ast::Path,\n     params: Option<ast::GenericParamList>,\n@@ -185,10 +189,6 @@ pub fn impl_trait(\n     ast_from_text(&format!(\"impl{ty_params} {trait_} for {ty}{ty_params} {{}}\"))\n }\n \n-pub(crate) fn generic_arg_list() -> ast::GenericArgList {\n-    ast_from_text(\"const S: T<> = ();\")\n-}\n-\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"type __ = {name_ref};\"))\n }\n@@ -718,6 +718,21 @@ pub fn generic_param_list(\n     ast_from_text(&format!(\"fn f<{args}>() {{ }}\"))\n }\n \n+pub fn type_arg(ty: ast::Type) -> ast::TypeArg {\n+    ast_from_text(&format!(\"const S: T<{ty}> = ();\"))\n+}\n+\n+pub fn lifetime_arg(lifetime: ast::Lifetime) -> ast::LifetimeArg {\n+    ast_from_text(&format!(\"const S: T<{lifetime}> = ();\"))\n+}\n+\n+pub(crate) fn generic_arg_list(\n+    args: impl IntoIterator<Item = ast::GenericArg>,\n+) -> ast::GenericArgList {\n+    let args = args.into_iter().join(\", \");\n+    ast_from_text(&format!(\"const S: T<{args}> = ();\"))\n+}\n+\n pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }"}]}