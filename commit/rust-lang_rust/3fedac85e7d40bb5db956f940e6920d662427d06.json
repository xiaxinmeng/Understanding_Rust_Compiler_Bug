{"sha": "3fedac85e7d40bb5db956f940e6920d662427d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWRhYzg1ZTdkNDBiYjVkYjk1NmY5NDBlNjkyMGQ2NjI0MjdkMDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-01T17:34:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-21T12:57:55Z"}, "message": "Let the ArArchiveBuilder implement cg_ssa::back::archive::ArchiveBuilder", "tree": {"sha": "318d44070508aaf3c5f9587359ef7b7eae1daef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318d44070508aaf3c5f9587359ef7b7eae1daef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fedac85e7d40bb5db956f940e6920d662427d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fedac85e7d40bb5db956f940e6920d662427d06", "html_url": "https://github.com/rust-lang/rust/commit/3fedac85e7d40bb5db956f940e6920d662427d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fedac85e7d40bb5db956f940e6920d662427d06/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc0804e8157af4899d0de9d65202e83d4688eb84", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0804e8157af4899d0de9d65202e83d4688eb84", "html_url": "https://github.com/rust-lang/rust/commit/cc0804e8157af4899d0de9d65202e83d4688eb84"}], "stats": {"total": 128, "additions": 91, "deletions": 37}, "files": [{"sha": "1445e291ce75655ca334aa8a1d3a4295b1b28082", "filename": "src/archive.rs", "status": "modified", "additions": 85, "deletions": 13, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/3fedac85e7d40bb5db956f940e6920d662427d06/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedac85e7d40bb5db956f940e6920d662427d06/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=3fedac85e7d40bb5db956f940e6920d662427d06", "patch": "@@ -1,26 +1,37 @@\n use std::collections::HashMap;\n use std::fs::File;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n use crate::prelude::*;\n \n-pub struct ArchiveConfig<'a> {\n+use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n+use rustc_codegen_ssa::back::archive::{ArchiveBuilder, find_library};\n+\n+struct ArchiveConfig<'a> {\n     pub sess: &'a Session,\n     pub dst: PathBuf,\n     pub src: Option<PathBuf>,\n     pub lib_search_paths: Vec<PathBuf>,\n }\n \n-pub struct ArchiveBuilder<'a> {\n-    cfg: ArchiveConfig<'a>,\n+pub struct ArArchiveBuilder<'a> {\n+    config: ArchiveConfig<'a>,\n     src_archive: Option<ar::Archive<File>>,\n     src_entries: HashMap<String, usize>,\n     builder: ar::Builder<File>,\n     update_symbols: bool,\n }\n \n-impl<'a> ArchiveBuilder<'a> {\n-    pub fn new(cfg: ArchiveConfig<'a>) -> Self {\n+impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n+    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n+        use rustc_codegen_ssa::back::link::archive_search_paths;\n+        let cfg = ArchiveConfig {\n+            sess,\n+            dst: output.to_path_buf(),\n+            src: input.map(|p| p.to_path_buf()),\n+            lib_search_paths: archive_search_paths(sess),\n+        };\n+\n         let (src_archive, src_entries) = if let Some(src) = &cfg.src {\n             let mut archive = ar::Archive::new(File::open(src).unwrap());\n             let mut entries = HashMap::new();\n@@ -42,32 +53,68 @@ impl<'a> ArchiveBuilder<'a> {\n \n         let builder = ar::Builder::new(File::create(&cfg.dst).unwrap());\n \n-        ArchiveBuilder {\n-            cfg,\n+        ArArchiveBuilder {\n+            config: cfg,\n             src_archive,\n             src_entries,\n             builder,\n             update_symbols: false,\n         }\n     }\n \n-    pub fn src_files(&self) -> Vec<String> {\n+    fn src_files(&mut self) -> Vec<String> {\n         self.src_entries.keys().cloned().collect()\n     }\n \n-    pub fn remove_file(&mut self, name: &str) {\n+    fn remove_file(&mut self, name: &str) {\n         let file = self.src_entries.remove(name);\n         assert!(\n             file.is_some(),\n             \"Tried to remove file not existing in src archive\",\n         );\n     }\n \n-    pub fn update_symbols(&mut self) {\n+    fn add_file(&mut self, file: &Path) {\n+        self.builder.append_path(file).unwrap();\n+    }\n+\n+    fn add_native_library(&mut self, name: &str) {\n+        let location = find_library(name, &self.config.lib_search_paths, self.config.sess);\n+        self.add_archive(&location, |_| false).unwrap_or_else(|e| {\n+            panic!(\"failed to add native library {}: {}\", location.to_string_lossy(), e);\n+        });\n+    }\n+\n+    fn add_rlib(&mut self, rlib: &Path, name: &str, lto: bool, skip_objects: bool) -> std::io::Result<()> {\n+        let obj_start = name.to_owned();\n+\n+        self.add_archive(rlib, move |fname: &str| {\n+            // Ignore bytecode/metadata files, no matter the name.\n+            if fname.ends_with(RLIB_BYTECODE_EXTENSION) || fname == METADATA_FILENAME {\n+                return true;\n+            }\n+\n+            // Don't include Rust objects if LTO is enabled\n+            if lto && fname.starts_with(&obj_start) && fname.ends_with(\".o\") {\n+                return true;\n+            }\n+\n+            // Otherwise if this is *not* a rust object and we're skipping\n+            // objects then skip this file\n+            if skip_objects && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\")) {\n+                return true;\n+            }\n+\n+            // ok, don't skip this\n+            return false;\n+        })\n+    }\n+\n+    fn update_symbols(&mut self) {\n         self.update_symbols = true;\n     }\n \n-    pub fn build(mut self) {\n+    fn build(mut self) {\n         // Add files from original archive\n         if let Some(mut src_archive) = self.src_archive {\n             for (_entry_name, entry_idx) in self.src_entries.into_iter() {\n@@ -88,7 +135,7 @@ impl<'a> ArchiveBuilder<'a> {\n \n         // Run ranlib to be able to link the archive\n         let status = std::process::Command::new(\"ranlib\")\n-            .arg(self.cfg.dst)\n+            .arg(self.config.dst)\n             .status()\n             .expect(\"Couldn't run ranlib\");\n         assert!(\n@@ -98,3 +145,28 @@ impl<'a> ArchiveBuilder<'a> {\n         );\n     }\n }\n+\n+impl<'a> ArArchiveBuilder<'a> {\n+    fn add_archive<F>(&mut self, archive: &Path, mut skip: F) -> std::io::Result<()>\n+        where F: FnMut(&str) -> bool + 'static\n+    {\n+        let mut archive = ar::Archive::new(std::fs::File::open(archive)?);\n+        while let Some(entry) = archive.next_entry() {\n+            let entry = entry?;\n+            let orig_header = entry.header();\n+\n+            if skip(std::str::from_utf8(orig_header.identifier()).unwrap()) {\n+                continue;\n+            }\n+\n+            let mut header =\n+                ar::Header::new(orig_header.identifier().to_vec(), orig_header.size());\n+            header.set_mtime(orig_header.mtime());\n+            header.set_uid(orig_header.uid());\n+            header.set_gid(orig_header.gid());\n+            header.set_mode(orig_header.mode());\n+            self.builder.append(&header, entry).unwrap();\n+        }\n+        Ok(())\n+    }\n+}"}, {"sha": "a1205b079437e75ddd2abeea57e543c464af9c12", "filename": "src/link_copied.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3fedac85e7d40bb5db956f940e6920d662427d06/src%2Flink_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedac85e7d40bb5db956f940e6920d662427d06/src%2Flink_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink_copied.rs?ref=3fedac85e7d40bb5db956f940e6920d662427d06", "patch": "@@ -1,38 +1,22 @@\n //! All functions here are copied from https://github.com/rust-lang/rust/blob/942864a000efd74b73e36bda5606b2cdb55ecf39/src/librustc_codegen_llvm/back/link.rs\n \n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n \n-use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind};\n+use rustc::middle::cstore::NativeLibraryKind;\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::config::{self, OutputType, RUST_CGU_EXT};\n-use rustc::session::search_paths::PathKind;\n use rustc::session::Session;\n use rustc::util::common::time;\n use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n+use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_codegen_ssa::back::linker::*;\n use rustc_codegen_ssa::back::link::*;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use syntax::attr;\n \n use crate::prelude::*;\n \n-use crate::archive::{ArchiveBuilder, ArchiveConfig};\n-\n-fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n-    sess.target_filesearch(PathKind::Native).search_path_dirs()\n-}\n-\n-fn archive_config<'a>(sess: &'a Session,\n-                      output: &Path,\n-                      input: Option<&Path>) -> ArchiveConfig<'a> {\n-    ArchiveConfig {\n-        sess,\n-        dst: output.to_path_buf(),\n-        src: input.map(|p| p.to_path_buf()),\n-        lib_search_paths: archive_search_paths(sess),\n-    }\n-}\n+use crate::archive::ArArchiveBuilder;\n \n // # Rust Crate linking\n //\n@@ -184,8 +168,7 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n         }\n \n         let dst = tmpdir.join(cratepath.file_name().unwrap());\n-        let cfg = archive_config(sess, &dst, Some(cratepath));\n-        let mut archive = ArchiveBuilder::new(cfg);\n+        let mut archive = ArArchiveBuilder::new(sess, &dst, Some(cratepath));\n         archive.update_symbols();\n \n         for f in archive.src_files() {\n@@ -261,8 +244,7 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n         let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n \n         time(sess, &format!(\"altering {}.rlib\", name), || {\n-            let cfg = archive_config(sess, &dst, Some(cratepath));\n-            let mut archive = ArchiveBuilder::new(cfg);\n+            let mut archive = ArArchiveBuilder::new(sess, &dst, Some(cratepath));\n             archive.update_symbols();\n \n             let mut any_objects = false;"}]}