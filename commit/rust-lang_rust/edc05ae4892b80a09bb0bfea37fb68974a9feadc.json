{"sha": "edc05ae4892b80a09bb0bfea37fb68974a9feadc", "node_id": "C_kwDOAAsO6NoAKGVkYzA1YWU0ODkyYjgwYTA5YmIwYmZlYTM3ZmI2ODk3NGE5ZmVhZGM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T17:14:40Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T17:14:40Z"}, "message": "Improve public interface of CValue and CPlace", "tree": {"sha": "2fbc098fa2f5b288104df0ab95216676366b70ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fbc098fa2f5b288104df0ab95216676366b70ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc05ae4892b80a09bb0bfea37fb68974a9feadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc05ae4892b80a09bb0bfea37fb68974a9feadc", "html_url": "https://github.com/rust-lang/rust/commit/edc05ae4892b80a09bb0bfea37fb68974a9feadc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc05ae4892b80a09bb0bfea37fb68974a9feadc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "174b73e3c9365c24291adf296e3b5d2ab113527e", "url": "https://api.github.com/repos/rust-lang/rust/commits/174b73e3c9365c24291adf296e3b5d2ab113527e", "html_url": "https://github.com/rust-lang/rust/commit/174b73e3c9365c24291adf296e3b5d2ab113527e"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "0b91f97e5f337362a657b35b844d79e7bb6b4b94", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=edc05ae4892b80a09bb0bfea37fb68974a9feadc", "patch": "@@ -605,9 +605,9 @@ pub(crate) fn codegen_drop<'tcx>(\n                 //                | ...   |\n                 //                \\-------/\n                 //\n-                let (ptr, vtable) = drop_place.to_ptr_maybe_unsized();\n+                let (ptr, vtable) = drop_place.to_ptr_unsized();\n                 let ptr = ptr.get_addr(fx);\n-                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n+                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable);\n \n                 // FIXME(eddyb) perhaps move some of this logic into\n                 // `Instance::resolve_drop_in_place`?"}, {"sha": "923634aff872c920c6869e9a1eb5bc91a30ced82", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=edc05ae4892b80a09bb0bfea37fb68974a9feadc", "patch": "@@ -694,11 +694,11 @@ fn codegen_stmt<'tcx>(\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), ref operand, _to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n-                    operand.unsize_value(fx, lval);\n+                    crate::unsize::coerce_unsized_into(fx, operand, lval);\n                 }\n                 Rvalue::Cast(CastKind::DynStar, ref operand, _) => {\n                     let operand = codegen_operand(fx, operand);\n-                    operand.coerce_dyn_star(fx, lval);\n+                    crate::unsize::coerce_dyn_star(fx, operand, lval);\n                 }\n                 Rvalue::Cast(CastKind::Transmute, ref operand, _to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n@@ -844,9 +844,7 @@ fn codegen_array_len<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, place: CPlace<'tcx\n             let len = fx.monomorphize(len).eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n-        ty::Slice(_elem_ty) => {\n-            place.to_ptr_maybe_unsized().1.expect(\"Length metadata for slice place\")\n-        }\n+        ty::Slice(_elem_ty) => place.to_ptr_unsized().1,\n         _ => bug!(\"Rvalue::Len({:?})\", place),\n     }\n }\n@@ -900,8 +898,7 @@ pub(crate) fn codegen_place<'tcx>(\n                     ty::Slice(elem_ty) => {\n                         assert!(from_end, \"slice subslices should be `from_end`\");\n                         let elem_layout = fx.layout_of(*elem_ty);\n-                        let (ptr, len) = cplace.to_ptr_maybe_unsized();\n-                        let len = len.unwrap();\n+                        let (ptr, len) = cplace.to_ptr_unsized();\n                         cplace = CPlace::for_ptr_with_extra(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * (from as i64)),\n                             fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64)),"}, {"sha": "ac2c5529ad3e055778c0c4230a1076c073bca8ce", "filename": "src/value_and_place.rs", "status": "modified", "additions": 23, "deletions": 27, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc05ae4892b80a09bb0bfea37fb68974a9feadc/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=edc05ae4892b80a09bb0bfea37fb68974a9feadc", "patch": "@@ -258,14 +258,6 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub(crate) fn unsize_value(self, fx: &mut FunctionCx<'_, '_, 'tcx>, dest: CPlace<'tcx>) {\n-        crate::unsize::coerce_unsized_into(fx, self, dest);\n-    }\n-\n-    pub(crate) fn coerce_dyn_star(self, fx: &mut FunctionCx<'_, '_, 'tcx>, dest: CPlace<'tcx>) {\n-        crate::unsize::coerce_dyn_star(fx, self, dest);\n-    }\n-\n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n@@ -454,18 +446,21 @@ impl<'tcx> CPlace<'tcx> {\n \n     #[track_caller]\n     pub(crate) fn to_ptr(self) -> Pointer {\n-        match self.to_ptr_maybe_unsized() {\n-            (ptr, None) => ptr,\n-            (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n+        match self.inner {\n+            CPlaceInner::Addr(ptr, None) => ptr,\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected CPlace::Addr, found {:?}\", self)\n+            }\n         }\n     }\n \n     #[track_caller]\n-    pub(crate) fn to_ptr_maybe_unsized(self) -> (Pointer, Option<Value>) {\n+    pub(crate) fn to_ptr_unsized(self) -> (Pointer, Value) {\n         match self.inner {\n-            CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n-            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n-                bug!(\"Expected CPlace::Addr, found {:?}\", self)\n+            CPlaceInner::Addr(ptr, Some(extra)) => (ptr, extra),\n+            CPlaceInner::Addr(_, None) | CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected unsized cplace, found {:?}\", self)\n             }\n         }\n     }\n@@ -498,7 +493,7 @@ impl<'tcx> CPlace<'tcx> {\n         from: CValue<'tcx>,\n         method: &'static str,\n     ) {\n-        fn transmute_value<'tcx>(\n+        fn transmute_scalar<'tcx>(\n             fx: &mut FunctionCx<'_, '_, 'tcx>,\n             var: Variable,\n             data: Value,\n@@ -569,7 +564,7 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Var(_local, var) => {\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n-                transmute_value(fx, var, data, dst_ty);\n+                transmute_scalar(fx, var, data, dst_ty);\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n                 let (data1, data2) = if from.layout().ty == dst_layout.ty {\n@@ -580,8 +575,8 @@ impl<'tcx> CPlace<'tcx> {\n                     CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx)\n                 };\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n-                transmute_value(fx, var1, data1, dst_ty1);\n-                transmute_value(fx, var2, data2, dst_ty2);\n+                transmute_scalar(fx, var1, data1, dst_ty1);\n+                transmute_scalar(fx, var2, data2, dst_ty2);\n             }\n             CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n             CPlaceInner::Addr(to_ptr, None) => {\n@@ -666,7 +661,12 @@ impl<'tcx> CPlace<'tcx> {\n             _ => {}\n         }\n \n-        let (base, extra) = self.to_ptr_maybe_unsized();\n+        let (base, extra) = match self.inner {\n+            CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected CPlace::Addr, found {:?}\", self)\n+            }\n+        };\n \n         let (field_ptr, field_layout) = codegen_field(fx, base, extra, layout, field);\n         if field_layout.is_unsized() {\n@@ -721,7 +721,7 @@ impl<'tcx> CPlace<'tcx> {\n                     | CPlaceInner::VarPair(_, _, _) => bug!(\"Can't index into {self:?}\"),\n                 }\n             }\n-            ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_maybe_unsized().0),\n+            ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_unsized().0),\n             _ => bug!(\"place_index({:?})\", self.layout().ty),\n         };\n \n@@ -746,12 +746,8 @@ impl<'tcx> CPlace<'tcx> {\n         layout: TyAndLayout<'tcx>,\n     ) -> CValue<'tcx> {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n-            let (ptr, extra) = self.to_ptr_maybe_unsized();\n-            CValue::by_val_pair(\n-                ptr.get_addr(fx),\n-                extra.expect(\"unsized type without metadata\"),\n-                layout,\n-            )\n+            let (ptr, extra) = self.to_ptr_unsized();\n+            CValue::by_val_pair(ptr.get_addr(fx), extra, layout)\n         } else {\n             CValue::by_val(self.to_ptr().get_addr(fx), layout)\n         }"}]}