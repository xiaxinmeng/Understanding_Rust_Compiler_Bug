{"sha": "7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmM2IzZGY5ZTJmMmVmZTM0MzRiNGY2ZmM3NjQ2MmQyYzhhZDMzMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-26T15:48:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-26T15:48:58Z"}, "message": "Auto merge of #71579 - Dylan-DPC:rollup-h9om2g3, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71490 (Cleanup and document `-C relocation-model`)\n - #71562 (fix more clippy warnings)\n - #71571 (Fix since attribute for nonzero_bitor impl's)\n - #71574 (proc_macro: Fix since attributes for new Span methods)\n - #71575 (Fix stable(since) attribute for BTreeMap::remove_entry)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "473644e3095ec29d92b0c68880f49599c402cbfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473644e3095ec29d92b0c68880f49599c402cbfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "html_url": "https://github.com/rust-lang/rust/commit/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1f28f9614292c36b371d3758afffdd52cb9786", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1f28f9614292c36b371d3758afffdd52cb9786", "html_url": "https://github.com/rust-lang/rust/commit/ec1f28f9614292c36b371d3758afffdd52cb9786"}, {"sha": "aa9dc6952235a58d4c37b63bed15992f5225fbf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9dc6952235a58d4c37b63bed15992f5225fbf0", "html_url": "https://github.com/rust-lang/rust/commit/aa9dc6952235a58d4c37b63bed15992f5225fbf0"}], "stats": {"total": 436, "additions": 247, "deletions": 189}, "files": [{"sha": "dc5d797ebbcd191dbf5bf10652729c9a18bf7552", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -319,11 +319,46 @@ to a valid `.profdata` file. See the chapter on\n \n ## relocation-model\n \n-This option lets you choose which\n-[relocation](https://en.wikipedia.org/wiki/Relocation_\\(computing\\)) model to\n-use.\n+This option controls generation of\n+[position-independent code (PIC)](https://en.wikipedia.org/wiki/Position-independent_code).\n \n-To find the valid options for this flag, run `rustc --print relocation-models`.\n+Supported values for this option are:\n+\n+#### Primary relocation models\n+\n+- `static` - non-relocatable code, machine instructions may use absolute addressing modes.\n+\n+- `pic` - fully relocatable position independent code,\n+machine instructions need to use relative addressing modes.  \n+Equivalent to the \"uppercase\" `-fPIC` or `-fPIE` options in other compilers,\n+depending on the produced crate types.  \n+This is the default model for majority of supported targets.\n+\n+#### Special relocation models\n+\n+- `dynamic-no-pic` - relocatable external references, non-relocatable code.  \n+Only makes sense on Darwin and is rarely used.  \n+If StackOverflow tells you to use this as an opt-out of PIC or PIE, don't believe it,\n+use `-C relocation-model=static` instead.\n+- `ropi`, `rwpi` and `ropi-rwpi` - relocatable code and read-only data, relocatable read-write data,\n+and combination of both, respectively.  \n+Only makes sense for certain embedded ARM targets.\n+- `default` - relocation model default to the current target.  \n+Only makes sense as an override for some other explicitly specified relocation model\n+previously set on the command line.\n+\n+Supported values can also be discovered by running `rustc --print relocation-models`.\n+\n+#### Linking effects\n+\n+In addition to codegen effects, `relocation-model` has effects during linking.\n+\n+If the relocation model is `pic` and the current target supports position-independent executables\n+(PIE), the linker will be instructed (`-pie`) to produce one.  \n+If the target doesn't support both position-independent and statically linked executables,\n+then `-C target-feature=+crt-static` \"wins\" over `-C relocation-model=pic`,\n+and the linker is instructed (`-static`) to produce a statically linked\n+but not position-independent executable.\n \n ## remark\n "}, {"sha": "a3ef9989184336fb20881b878e26aa5c2f2a8d8c", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1269,7 +1269,7 @@ impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n \n         impl<'r, 'a, T: Ord> Drop for DropGuard<'r, 'a, T> {\n             fn drop(&mut self) {\n-                while let Some(_) = self.0.inner.pop() {}\n+                while self.0.inner.pop().is_some() {}\n             }\n         }\n "}, {"sha": "c0b976565e41d0e7fd4f252b484cf9f9a819be40", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -930,7 +930,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n     /// assert_eq!(map.remove_entry(&1), None);\n     /// ```\n-    #[stable(feature = \"btreemap_remove_entry\", since = \"1.44.0\")]\n+    #[stable(feature = \"btreemap_remove_entry\", since = \"1.45.0\")]\n     pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>\n     where\n         K: Borrow<Q>,"}, {"sha": "bfa4045787f5b7141d98addc638f8a1392c0c9fb", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -972,7 +972,7 @@ unsafe impl<#[may_dangle] T> Drop for LinkedList<T> {\n             fn drop(&mut self) {\n                 // Continue the same loop we do below. This only runs when a destructor has\n                 // panicked. If another one panics this will abort.\n-                while let Some(_) = self.0.pop_front_node() {}\n+                while self.0.pop_front_node().is_some() {}\n             }\n         }\n "}, {"sha": "a259e293b0c1a8cd9b675a40be997a7aeb383a98", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -111,7 +111,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 }\n             }\n \n-            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n             impl BitOr for $Ty {\n                 type Output = Self;\n                 #[inline]\n@@ -122,7 +122,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 }\n             }\n \n-            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n             impl BitOr<$Int> for $Ty {\n                 type Output = Self;\n                 #[inline]\n@@ -134,7 +134,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 }\n             }\n \n-            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n             impl BitOr<$Ty> for $Int {\n                 type Output = $Ty;\n                 #[inline]\n@@ -146,15 +146,15 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 }\n             }\n \n-            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n             impl BitOrAssign for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: Self) {\n                     *self = *self | rhs;\n                 }\n             }\n \n-            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n             impl BitOrAssign<$Int> for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: $Int) {"}, {"sha": "86e39094935db1871ff9778e212be16381ec9cde", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -351,14 +351,14 @@ impl Span {\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n-    #[stable(feature = \"proc_macro_span_resolved_at\", since = \"1.43.0\")]\n+    #[stable(feature = \"proc_macro_span_resolved_at\", since = \"1.45.0\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n         Span(self.0.resolved_at(other.0))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n     /// with the line/column information of `other`.\n-    #[stable(feature = \"proc_macro_span_located_at\", since = \"1.43.0\")]\n+    #[stable(feature = \"proc_macro_span_located_at\", since = \"1.45.0\")]\n     pub fn located_at(&self, other: Span) -> Span {\n         other.resolved_at(*self)\n     }"}, {"sha": "bf79c5b593e4880be01e11bf50eb17c366f64091", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -7,7 +7,7 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::context::{get_reloc_model, is_pie_binary};\n+use crate::context::all_outputs_are_pic_executables;\n use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -25,6 +25,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc_session::Session;\n+use rustc_target::spec::RelocModel;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;\n@@ -35,16 +36,6 @@ use std::slice;\n use std::str;\n use std::sync::Arc;\n \n-pub const RELOC_MODEL_ARGS: [(&str, llvm::RelocMode); 7] = [\n-    (\"pic\", llvm::RelocMode::PIC),\n-    (\"static\", llvm::RelocMode::Static),\n-    (\"default\", llvm::RelocMode::Default),\n-    (\"dynamic-no-pic\", llvm::RelocMode::DynamicNoPic),\n-    (\"ropi\", llvm::RelocMode::ROPI),\n-    (\"rwpi\", llvm::RelocMode::RWPI),\n-    (\"ropi-rwpi\", llvm::RelocMode::ROPI_RWPI),\n-];\n-\n pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"small\", llvm::CodeModel::Small),\n     (\"kernel\", llvm::CodeModel::Kernel),\n@@ -84,19 +75,13 @@ pub fn write_output_file(\n     }\n }\n \n-pub fn create_informational_target_machine(\n-    sess: &Session,\n-    find_features: bool,\n-) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(sess, config::OptLevel::No, find_features)()\n+pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(sess, config::OptLevel::No)()\n         .unwrap_or_else(|err| llvm_err(sess.diagnostic(), &err).raise())\n }\n \n-pub fn create_target_machine(\n-    tcx: TyCtxt<'_>,\n-    find_features: bool,\n-) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()\n+pub fn create_target_machine(tcx: TyCtxt<'_>) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE))()\n         .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n \n@@ -126,15 +111,22 @@ fn to_pass_builder_opt_level(cfg: config::OptLevel) -> llvm::PassBuilderOptLevel\n     }\n }\n \n-// If find_features is true this won't access `sess.crate_types` by assuming\n-// that `is_pie_binary` is false. When we discover LLVM target features\n-// `sess.crate_types` is uninitialized so we cannot access it.\n+fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n+    match relocation_model {\n+        RelocModel::Static => llvm::RelocModel::Static,\n+        RelocModel::Pic => llvm::RelocModel::PIC,\n+        RelocModel::DynamicNoPic => llvm::RelocModel::DynamicNoPic,\n+        RelocModel::Ropi => llvm::RelocModel::ROPI,\n+        RelocModel::Rwpi => llvm::RelocModel::RWPI,\n+        RelocModel::RopiRwpi => llvm::RelocModel::ROPI_RWPI,\n+    }\n+}\n+\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n-    find_features: bool,\n ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n-    let reloc_model = get_reloc_model(sess);\n+    let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n     let (opt_level, _) = to_llvm_opt_settings(optlvl);\n     let use_softfp = sess.opts.cg.soft_float;\n@@ -175,7 +167,7 @@ pub fn target_machine_factory(\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n-    let is_pie_binary = !find_features && is_pie_binary(sess);\n+    let pic_is_pie = all_outputs_are_pic_executables(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n@@ -192,7 +184,7 @@ pub fn target_machine_factory(\n                 reloc_model,\n                 opt_level,\n                 use_softfp,\n-                is_pie_binary,\n+                pic_is_pie,\n                 ffunction_sections,\n                 fdata_sections,\n                 trap_unreachable,"}, {"sha": "df442609052bb1f3d14fd2c814fa0d7777ade37d", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -21,7 +21,7 @@ use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n-use rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, RelocModel, Target};\n \n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n@@ -87,22 +87,6 @@ pub struct CodegenCx<'ll, 'tcx> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n-pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n-    let reloc_model_arg = match sess.opts.cg.relocation_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.relocation_model[..],\n-    };\n-\n-    match crate::back::write::RELOC_MODEL_ARGS.iter().find(|&&arg| arg.0 == reloc_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid relocation mode\", reloc_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n-        }\n-    }\n-}\n-\n fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n         Some(ref s) => &s[..],\n@@ -119,12 +103,14 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     }\n }\n \n-fn is_any_library(sess: &Session) -> bool {\n-    sess.crate_types.borrow().iter().any(|ty| *ty != config::CrateType::Executable)\n-}\n-\n-pub fn is_pie_binary(sess: &Session) -> bool {\n-    !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n+/// PIE is potentially more effective than PIC, but can only be used in executables.\n+/// If all our outputs are executables, then we can relax PIC to PIE when producing object code.\n+/// If the list of crate types is not yet known we conservatively return `false`.\n+pub fn all_outputs_are_pic_executables(sess: &Session) -> bool {\n+    sess.relocation_model() == RelocModel::Pic\n+        && sess.crate_types.try_get().map_or(false, |crate_types| {\n+            crate_types.iter().all(|ty| *ty == config::CrateType::Executable)\n+        })\n }\n \n fn strip_function_ptr_alignment(data_layout: String) -> String {\n@@ -157,7 +143,7 @@ pub unsafe fn create_module(\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n+        let tm = crate::back::write::create_informational_target_machine(tcx.sess);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n@@ -200,11 +186,11 @@ pub unsafe fn create_module(\n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n \n-    if get_reloc_model(sess) == llvm::RelocMode::PIC {\n+    if sess.relocation_model() == RelocModel::Pic {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n     }\n \n-    if is_pie_binary(sess) {\n+    if all_outputs_are_pic_executables(sess) {\n         llvm::LLVMRustSetModulePIELevel(llmod);\n     }\n "}, {"sha": "330d6ea75d2730159c63c7a544b74310e9303c1d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -110,9 +110,8 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         sess: &Session,\n         optlvl: OptLevel,\n-        find_features: bool,\n     ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n-        back::write::target_machine_factory(sess, optlvl, find_features)\n+        back::write::target_machine_factory(sess, optlvl)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n@@ -201,7 +200,9 @@ impl CodegenBackend for LlvmCodegenBackend {\n         match req {\n             PrintRequest::RelocationModels => {\n                 println!(\"Available relocation models:\");\n-                for &(name, _) in back::write::RELOC_MODEL_ARGS.iter() {\n+                for name in\n+                    &[\"static\", \"pic\", \"dynamic-no-pic\", \"ropi\", \"rwpi\", \"ropi-rwpi\", \"default\"]\n+                {\n                     println!(\"    {}\", name);\n                 }\n                 println!();\n@@ -351,19 +352,15 @@ impl ModuleLlvm {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n-            ModuleLlvm { llmod_raw, llcx, tm: create_target_machine(tcx, false) }\n+            ModuleLlvm { llmod_raw, llcx, tm: create_target_machine(tcx) }\n         }\n     }\n \n     fn new_metadata(tcx: TyCtxt<'_>, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n-            ModuleLlvm {\n-                llmod_raw,\n-                llcx,\n-                tm: create_informational_target_machine(&tcx.sess, false),\n-            }\n+            ModuleLlvm { llmod_raw, llcx, tm: create_informational_target_machine(tcx.sess) }\n         }\n     }\n "}, {"sha": "fd03812cccdae8ccfa135d620d87512dd73d9dd8", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -445,8 +445,7 @@ pub struct SanitizerOptions {\n /// LLVMRelocMode\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n-pub enum RelocMode {\n-    Default,\n+pub enum RelocModel {\n     Static,\n     PIC,\n     DynamicNoPic,\n@@ -1946,7 +1945,7 @@ extern \"C\" {\n         Features: *const c_char,\n         Abi: *const c_char,\n         Model: CodeModel,\n-        Reloc: RelocMode,\n+        Reloc: RelocModel,\n         Level: CodeGenOptLevel,\n         UseSoftFP: bool,\n         PositionIndependentExecutable: bool,"}, {"sha": "a36e95771e8b973cf1db807906202c7a3b2f62f9", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -270,7 +270,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n-    let target_machine = create_informational_target_machine(sess, true);\n+    let target_machine = create_informational_target_machine(sess);\n     target_feature_whitelist(sess)\n         .iter()\n         .filter_map(|&(feature, gate)| {\n@@ -322,7 +322,7 @@ pub fn print_passes() {\n \n pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n-    let tm = create_informational_target_machine(sess, true);\n+    let tm = create_informational_target_machine(sess);\n     unsafe {\n         match req {\n             PrintRequest::TargetCPUs => llvm::LLVMRustPrintTargetCPUs(tm),"}, {"sha": "9d42db8ec429415f317c3557ede7d364745bf3ff", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -12,7 +12,7 @@ use rustc_session::search_paths::PathKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, RelroLevel};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -1352,7 +1352,7 @@ fn add_position_independent_executable_args(\n     if sess.target.target.options.position_independent_executables {\n         let attr_link_args = &*codegen_results.crate_info.link_args;\n         let mut user_defined_link_args = sess.opts.cg.link_args.iter().chain(attr_link_args);\n-        if is_pic(sess)\n+        if sess.relocation_model() == RelocModel::Pic\n             && !sess.crt_static(Some(crate_type))\n             && !user_defined_link_args.any(|x| x == \"-static\")\n         {\n@@ -1992,12 +1992,3 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         config::Lto::No | config::Lto::ThinLocal => false,\n     }\n }\n-\n-fn is_pic(sess: &Session) -> bool {\n-    let reloc_model_arg = match sess.opts.cg.relocation_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.relocation_model[..],\n-    };\n-\n-    reloc_model_arg == \"pic\"\n-}"}, {"sha": "c84f38670f77b1f64dfb4165df7e181d2d2dec4e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1037,7 +1037,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol, false)),\n+        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),"}, {"sha": "6cbb47efa99f23cd2723da482014fb352ce81862", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -110,14 +110,10 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'_>,\n         cgu_name: Symbol,\n     ) -> (ModuleCodegen<Self::Module>, u64);\n-    // If find_features is true this won't access `sess.crate_types` by assuming\n-    // that `is_pie_binary` is false. When we discover LLVM target features\n-    // `sess.crate_types` is uninitialized so we cannot access it.\n     fn target_machine_factory(\n         &self,\n         sess: &Session,\n         opt_level: config::OptLevel,\n-        find_features: bool,\n     ) -> Arc<dyn Fn() -> Result<Self::TargetMachine, String> + Send + Sync>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n }"}, {"sha": "913ccf8e68089ab6bab489539858986eba9ac2ab", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -618,15 +618,15 @@ impl RustcDefaultCalls {\n     ) -> Compilation {\n         let r = matches.opt_strs(\"Z\");\n         if r.iter().any(|s| *s == \"ls\") {\n-            match input {\n-                &Input::File(ref ifile) => {\n+            match *input {\n+                Input::File(ref ifile) => {\n                     let path = &(*ifile);\n                     let mut v = Vec::new();\n                     locator::list_file_metadata(&sess.target.target, path, metadata_loader, &mut v)\n                         .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n-                &Input::Str { .. } => {\n+                Input::Str { .. } => {\n                     early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n                 }\n             }"}, {"sha": "f0e7581b7605056cafb19bb94a12267db84f5cd5", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -14,7 +14,7 @@ use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -430,7 +430,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(prefer_dynamic, true);\n     tracked!(profile_generate, SwitchWithOptPath::Enabled(None));\n     tracked!(profile_use, Some(PathBuf::from(\"abc\")));\n-    tracked!(relocation_model, Some(String::from(\"relocation model\")));\n+    tracked!(relocation_model, Some(RelocModel::Pic));\n     tracked!(soft_float, true);\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));"}, {"sha": "367dc4dee7ee034800d4ecc95b6f4d87f6141560", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -625,8 +625,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                     | ast::TyKind::Rptr(_, ast::MutTy { ty: ref subty, .. })\n                     | ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n                     ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n-                    ast::TyKind::Path(_, ref path) => path.segments.iter().any(|seg| {\n-                        match seg.args.as_ref().map(|generic_arg| &**generic_arg) {\n+                    ast::TyKind::Path(_, ref path) => {\n+                        path.segments.iter().any(|seg| match seg.args.as_deref() {\n                             None => false,\n                             Some(&ast::GenericArgs::AngleBracketed(ref data)) => {\n                                 data.args.iter().any(|arg| match arg {\n@@ -647,8 +647,8 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                 any_involves_impl_trait(data.inputs.iter())\n                                     || ReplaceBodyWithLoop::should_ignore_fn(&data.output)\n                             }\n-                        }\n-                    }),\n+                        })\n+                    }\n                     _ => false,\n                 }\n             }"}, {"sha": "7d1639cbcf7a1791d2a03d43eee9f0572a1e16ce", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -431,7 +431,7 @@ impl CStore {\n                 ident,\n                 id: ast::DUMMY_NODE_ID,\n                 span,\n-                attrs: attrs.iter().cloned().collect(),\n+                attrs: attrs.to_vec(),\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n                 vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 tokens: None,"}, {"sha": "b9eb58f800e5c0d388af07cec6e054e0df8e3015", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -246,7 +246,7 @@ impl<'tcx> Action<'tcx> {\n     }\n \n     fn constant(src_constant: &Constant<'tcx>) -> Option<Action<'tcx>> {\n-        Some(Action::PropagateConstant((*src_constant).clone()))\n+        Some(Action::PropagateConstant(*src_constant))\n     }\n \n     fn perform(\n@@ -371,7 +371,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> {\n             _ => return,\n         }\n \n-        *operand = Operand::Constant(box self.constant.clone());\n+        *operand = Operand::Constant(box self.constant);\n         self.uses_replaced += 1\n     }\n }"}, {"sha": "38f71135c7d928558df37a5e8d98ed0c4992d048", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let of_fld = Field::new(1);\n \n             let tcx = self.hir.tcx();\n-            let val = tcx.mk_place_field(result_value.clone(), val_fld, ty);\n+            let val = tcx.mk_place_field(result_value, val_fld, ty);\n             let of = tcx.mk_place_field(result_value, of_fld, bool_ty);\n \n             let err = AssertKind::Overflow(op);"}, {"sha": "1ab02f84c11a2973e920b88b00ff8d2795e2a906", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1311,10 +1311,6 @@ fn collect_print_requests(\n         prints.push(PrintRequest::TargetFeatures);\n         cg.target_feature = String::new();\n     }\n-    if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n-        prints.push(PrintRequest::RelocationModels);\n-        cg.relocation_model = None;\n-    }\n     if cg.code_model.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n@@ -2005,7 +2001,7 @@ crate mod dep_tracking {\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n-    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel, RelroLevel, TargetTriple};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n@@ -2053,6 +2049,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n+    impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "2279c16748c12fc4b87cb5fb6e9af17ce85c9422", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -6,7 +6,7 @@ use crate::search_paths::SearchPath;\n use crate::utils::NativeLibraryKind;\n \n use rustc_target::spec::TargetTriple;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -265,14 +265,13 @@ macro_rules! options {\n         pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n         pub const parse_symbol_mangling_version: &str = \"either `legacy` or `v0` (RFC 2603)\";\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n+        pub const parse_relocation_model: &str =\n+            \"one of supported relocation models (`rustc --print relocation-models`)\";\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n-            SymbolManglingVersion, CFGuard, SourceFileHashAlgorithm};\n-        use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n-        use std::path::PathBuf;\n+        use super::*;\n         use std::str::FromStr;\n \n         // Sometimes different options need to build a common structure.\n@@ -598,6 +597,15 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_relocation_model(slot: &mut Option<RelocModel>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| RelocModel::from_str(s).ok()) {\n+                Some(relocation_model) => *slot = Some(relocation_model),\n+                None if v == Some(\"default\") => *slot = None,\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_symbol_mangling_version(\n             slot: &mut SymbolManglingVersion,\n             v: Option<&str>,\n@@ -697,8 +705,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n-    relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the relocation model to use (`rustc --print relocation-models` for details)\"),\n+    relocation_model: Option<RelocModel> = (None, parse_relocation_model, [TRACKED],\n+        \"control generation of position-independent code (PIC) \\\n+        (`rustc --print relocation-models` for details)\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "226d93920958fe2905414065b350333d25698c33", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -584,6 +584,10 @@ impl Session {\n         }\n     }\n \n+    pub fn relocation_model(&self) -> RelocModel {\n+        self.opts.cg.relocation_model.unwrap_or(self.target.target.options.relocation_model)\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "7177c4e251e771082d905b6aacd211f9576aa262", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -6,14 +6,14 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),"}, {"sha": "986300c677dfc2e82aec968616fee05f3bb40346", "filename": "src/librustc_target/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -6,14 +6,14 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),"}, {"sha": "a1f68f6706a2aabc2b3526330c0609d4d12a9fb8", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,6 +1,7 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "4d81c21f52a7b2f16e171c9149661ce6a652dbf2", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,6 +1,7 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "09f1494e81cdb8b20786c7e21985517509e006d7", "filename": "src/librustc_target/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -17,14 +17,14 @@\n // - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n // linking. rationale: matches `thumb` targets\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "653ca76435bc5341f6e75f7cd3208e7d455cb060", "filename": "src/librustc_target/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -5,14 +5,14 @@\n // changes (list in `armv7a_none_eabi.rs`) to bring it closer to the bare-metal\n // `thumb` & `aarch64` targets.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "29dfa170397361c559c1cbb22717691d61231ec0", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,6 +1,7 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "e6b0187c3313aadf8c43a09140114812af11f454", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,6 +1,7 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "cb12055290e2e60e4964b13aeab6ed612ba0ee74", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -15,7 +15,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: None,\n         tls_model: \"initial-exec\".to_string(),\n         ..Default::default()"}, {"sha": "11599fda4090660e8325bd599764b50425615a2d", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -16,7 +16,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: None,\n         tls_model: \"initial-exec\".to_string(),\n         ..Default::default()"}, {"sha": "201d6a0fff93b071c4333cff83ccbed2e5960b3b", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -16,7 +16,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         needs_plt: true,\n         relro_level: RelroLevel::Full,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: Some(\"unix\".to_string()),\n         pre_link_args,\n "}, {"sha": "77fc78e81482c360625caec7206cb205576c5514", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -265,6 +265,46 @@ impl ToJson for MergeFunctions {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum RelocModel {\n+    Static,\n+    Pic,\n+    DynamicNoPic,\n+    Ropi,\n+    Rwpi,\n+    RopiRwpi,\n+}\n+\n+impl FromStr for RelocModel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<RelocModel, ()> {\n+        Ok(match s {\n+            \"static\" => RelocModel::Static,\n+            \"pic\" => RelocModel::Pic,\n+            \"dynamic-no-pic\" => RelocModel::DynamicNoPic,\n+            \"ropi\" => RelocModel::Ropi,\n+            \"rwpi\" => RelocModel::Rwpi,\n+            \"ropi-rwpi\" => RelocModel::RopiRwpi,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for RelocModel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            RelocModel::Static => \"static\",\n+            RelocModel::Pic => \"pic\",\n+            RelocModel::DynamicNoPic => \"dynamic-no-pic\",\n+            RelocModel::Ropi => \"ropi\",\n+            RelocModel::Rwpi => \"rwpi\",\n+            RelocModel::RopiRwpi => \"ropi-rwpi\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n pub enum LoadTargetError {\n     BuiltinTargetNotFound(String),\n     Other(String),\n@@ -614,8 +654,8 @@ pub struct TargetOptions {\n     /// libraries. Defaults to false.\n     pub executables: bool,\n     /// Relocation model to use in object file. Corresponds to `llc\n-    /// -relocation-model=$relocation_model`. Defaults to \"pic\".\n-    pub relocation_model: String,\n+    /// -relocation-model=$relocation_model`. Defaults to `Pic`.\n+    pub relocation_model: RelocModel,\n     /// Code model to use. Corresponds to `llc -code-model=$code_model`.\n     pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n@@ -821,7 +861,7 @@ impl Default for TargetOptions {\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n-            relocation_model: \"pic\".to_string(),\n+            relocation_model: RelocModel::Pic,\n             code_model: None,\n             tls_model: \"global-dynamic\".to_string(),\n             disable_redzone: false,\n@@ -1008,6 +1048,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, RelocModel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<RelocModel>() {\n+                        Ok(relocation_model) => base.options.$key_name = relocation_model,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid relocation model. \\\n+                                                      Run `rustc --print relocation-models` to \\\n+                                                      see the list of supported values.\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1146,7 +1198,7 @@ impl Target {\n         key!(dynamic_linking, bool);\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n-        key!(relocation_model);\n+        key!(relocation_model, RelocModel)?;\n         key!(code_model, optional);\n         key!(tls_model);\n         key!(disable_redzone, bool);"}, {"sha": "c6d0308f8f82feec5ef3022e3dab8b44a304cb12", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -40,7 +40,7 @@ pub fn target() -> TargetResult {\n \n             // Similarly, one almost always never wants to use relocatable\n             // code because of the extra costs it involves.\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n \n             // Right now we invoke an external assembler and this isn't\n             // compatible with multiple codegen units, and plus we probably"}, {"sha": "aade1e708232e502f6105333fd3b1521bdc5563d", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: String::new(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "e2990eeb826f72972ec8ab715231ecd1e11ee4e9", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "55a4d58dfccca6083e89a5d7902959d6830c9e1f", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "9dbbcb1f4bd6e3bcb155e52035ac8e8a44d768b3", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+f,+d,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             code_model: Some(\"medium\".to_string()),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),"}, {"sha": "7e9390561a7007873c073f678de15e2ee6d8472e", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             code_model: Some(\"medium\".to_string()),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),"}, {"sha": "646a149a33621c2a752161681900cf6ff4b8abec", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -27,7 +27,7 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use crate::spec::{PanicStrategy, TargetOptions};\n+use crate::spec::{PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n@@ -40,7 +40,7 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         abi_blacklist: super::arm_base::abi_blacklist(),\n         // When this section is added a volatile load to its start address is also generated. This\n         // volatile load is a footgun as it can end up loading an invalid memory address, depending"}, {"sha": "08bade2abf4a9ba8515368cddb1e91182c021e3f", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -1,4 +1,4 @@\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n@@ -130,7 +130,7 @@ pub fn options() -> TargetOptions {\n         // that eventually we can ship a `pic`-compatible standard library which\n         // works with `static` as well (or works with some method of generating\n         // non-relative calls and such later on).\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n \n         // When the atomics feature is activated then these two keys matter,\n         // otherwise they're basically ignored by the standard library. In this"}, {"sha": "9f7c1af8951991500723eafd6e6ed16b27d1134c", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -329,7 +329,7 @@ impl<T> Packet<T> {\n             );\n             cnt != DISCONNECTED && cnt != steals\n         } {\n-            while let Some(_) = self.queue.pop() {\n+            while self.queue.pop().is_some() {\n                 steals += 1;\n             }\n         }"}, {"sha": "e31dd77d8afdc3eeb77925f030c3a7dd44ee63ee", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -346,8 +346,7 @@ static PassBuilder::OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level\n   }\n }\n \n-enum class LLVMRustRelocMode {\n-  Default,\n+enum class LLVMRustRelocModel {\n   Static,\n   PIC,\n   DynamicNoPic,\n@@ -356,21 +355,19 @@ enum class LLVMRustRelocMode {\n   ROPIRWPI,\n };\n \n-static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n+static Reloc::Model fromRust(LLVMRustRelocModel RustReloc) {\n   switch (RustReloc) {\n-  case LLVMRustRelocMode::Default:\n-    return None;\n-  case LLVMRustRelocMode::Static:\n+  case LLVMRustRelocModel::Static:\n     return Reloc::Static;\n-  case LLVMRustRelocMode::PIC:\n+  case LLVMRustRelocModel::PIC:\n     return Reloc::PIC_;\n-  case LLVMRustRelocMode::DynamicNoPic:\n+  case LLVMRustRelocModel::DynamicNoPic:\n     return Reloc::DynamicNoPIC;\n-  case LLVMRustRelocMode::ROPI:\n+  case LLVMRustRelocModel::ROPI:\n     return Reloc::ROPI;\n-  case LLVMRustRelocMode::RWPI:\n+  case LLVMRustRelocModel::RWPI:\n     return Reloc::RWPI;\n-  case LLVMRustRelocMode::ROPIRWPI:\n+  case LLVMRustRelocModel::ROPIRWPI:\n     return Reloc::ROPI_RWPI;\n   }\n   report_fatal_error(\"Bad RelocModel.\");\n@@ -440,7 +437,7 @@ extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {\n \n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n-    const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n+    const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocModel RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n     bool DataSections,"}, {"sha": "5d46be87eac6b2e3da1763e98461a606610ab412", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2FMakefile?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -11,10 +11,7 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the cdylib\n # is correctly detected.\n \n-# See comment in sanitizer-address/Makefile for why this is here\n-EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-\n all:\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow"}, {"sha": "f62c3a6654ed414d36b74a7128b03555e0bca91a", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2FMakefile?ref=7f3b3df9e2f2efe3434b4f6fc76462d2c8ad332f", "patch": "@@ -11,10 +11,7 @@ LOG := $(TMPDIR)/log.txt\n # are compiled with address sanitizer, and we assert that a fault in the dylib\n # is correctly detected.\n \n-# See comment in sanitizer-address/Makefile for why this is here\n-EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-\n all:\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow"}]}