{"sha": "c9b52100d5b2284a8d801d722a2941f56decdeac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YjUyMTAwZDViMjI4NGE4ZDgwMWQ3MjJhMjk0MWY1NmRlY2RlYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T03:13:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T03:13:30Z"}, "message": "Auto merge of #78127 - JohnTitor:rollup-p1bxtqq, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #77612 (BTreeMap: test invariants more thoroughly and more readably)\n - #77761 (Assert that pthread mutex initialization succeeded)\n - #77778 ([x.py setup] Allow setting up git hooks from other worktrees)\n - #77838 (const keyword: brief paragraph on 'const fn')\n - #77923 ([net] apply clippy lints)\n - #77931 (Fix false positive for `unused_parens` lint)\n - #77959 (Tweak ui-tests structure)\n - #78105 (change name in .mailmap)\n - #78111 (Trait predicate ambiguities are not always in `Self`)\n - #78121 (Do not ICE on pattern that uses a binding multiple times in generator)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "5515dc5c35c4fcc502f0e9a3b3b3d478e65935a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5515dc5c35c4fcc502f0e9a3b3b3d478e65935a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9b52100d5b2284a8d801d722a2941f56decdeac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b52100d5b2284a8d801d722a2941f56decdeac", "html_url": "https://github.com/rust-lang/rust/commit/c9b52100d5b2284a8d801d722a2941f56decdeac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9b52100d5b2284a8d801d722a2941f56decdeac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85e94927622665a9e9022de0d33a890a2e32d43", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85e94927622665a9e9022de0d33a890a2e32d43", "html_url": "https://github.com/rust-lang/rust/commit/a85e94927622665a9e9022de0d33a890a2e32d43"}, {"sha": "21df410a621950ee8ef50afd96a599c82c952882", "url": "https://api.github.com/repos/rust-lang/rust/commits/21df410a621950ee8ef50afd96a599c82c952882", "html_url": "https://github.com/rust-lang/rust/commit/21df410a621950ee8ef50afd96a599c82c952882"}], "stats": {"total": 522, "additions": 334, "deletions": 188}, "files": [{"sha": "f476926832158d715f4e474f581655b8ff99f740", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -29,7 +29,6 @@ Ariel Ben-Yehuda <arielb1@mail.tau.ac.il> arielb1 <arielb1@mail.tau.ac.il>\n Austin Seipp <mad.one@gmail.com> <as@hacks.yi.org>\n Aydin Kim <ladinjin@hanmail.net> aydin.kim <aydin.kim@samsung.com>\n Barosl Lee <vcs@barosl.com> Barosl LEE <github@barosl.com>\n-Bastian Kauschke <bastian_kauschke@hotmail.de>\n Ben Alpert <ben@benalpert.com> <spicyjalapeno@gmail.com>\n Ben Sago <ogham@users.noreply.github.com> Ben S <ogham@bsago.me>\n Ben Sago <ogham@users.noreply.github.com> Ben S <ogham@users.noreply.github.com>\n@@ -161,6 +160,7 @@ Kyle J Strand <batmanaod@gmail.com> <kyle.j.strand@gmail.com>\n Kyle J Strand <batmanaod@gmail.com> <kyle.strand@pieinsurance.com>\n Kyle J Strand <batmanaod@gmail.com> <kyle.strand@rms.com>\n Lauren\u021biu Nicola <lnicola@dend.ro>\n+lcnr <bastian_kauschke@hotmail.de>\n Lee Jeffery <leejeffery@gmail.com> Lee Jeffery <lee@leejeffery.co.uk>\n Lee Wondong <wdlee91@gmail.com>\n Lennart Kudling <github@kudling.de>"}, {"sha": "21023a06bb2d90a7e3932d1a24738d215db63d42", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -91,17 +91,6 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n         if let (None, Some(ty)) =\n             (self.found_local_pattern, self.node_ty_contains_target(local.hir_id))\n         {\n-            // FIXME: There's a trade-off here - we can either check that our target span\n-            // is contained in `local.span` or not. If we choose to check containment\n-            // we can avoid some spurious suggestions (see #72690), but we lose\n-            // the ability to report on things like:\n-            //\n-            // ```\n-            // let x = vec![];\n-            // ```\n-            //\n-            // because the target span will be in the macro expansion of `vec![]`.\n-            // At present we choose not to check containment.\n             self.found_local_pattern = Some(&*local.pat);\n             self.found_node_ty = Some(ty);\n         }\n@@ -113,10 +102,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n             if let (None, Some(ty)) =\n                 (self.found_arg_pattern, self.node_ty_contains_target(param.hir_id))\n             {\n-                if self.target_span.contains(param.pat.span) {\n-                    self.found_arg_pattern = Some(&*param.pat);\n-                    self.found_node_ty = Some(ty);\n-                }\n+                self.found_arg_pattern = Some(&*param.pat);\n+                self.found_node_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);"}, {"sha": "2409069031d9347fcdef4fe4768af20c64659be4", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -751,13 +751,20 @@ impl UnusedDelimLint for UnusedParens {\n                 if !Self::is_expr_delims_necessary(inner, followed_by_block)\n                     && value.attrs.is_empty()\n                     && !value.span.from_expansion()\n+                    && (ctx != UnusedDelimsCtx::LetScrutineeExpr\n+                        || match inner.kind {\n+                            ast::ExprKind::Binary(\n+                                rustc_span::source_map::Spanned { node, .. },\n+                                _,\n+                                _,\n+                            ) if node.lazy() => false,\n+                            _ => true,\n+                        })\n                 {\n                     self.emit_unused_delims_expr(cx, value, ctx, left_pos, right_pos)\n                 }\n             }\n             ast::ExprKind::Let(_, ref expr) => {\n-                // FIXME(#60336): Properly handle `let true = (false && true)`\n-                // actually needing the parenthesis.\n                 self.check_unused_delims_expr(\n                     cx,\n                     expr,"}, {"sha": "f8bd3ab96e254733666043631f3402f7a7388f7c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1462,9 +1462,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let bound_predicate = predicate.bound_atom();\n         let mut err = match bound_predicate.skip_binder() {\n             ty::PredicateAtom::Trait(data, _) => {\n-                let self_ty = data.trait_ref.self_ty();\n                 let trait_ref = bound_predicate.rebind(data.trait_ref);\n-                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind(), trait_ref);\n+                debug!(\"trait_ref {:?}\", trait_ref);\n \n                 if predicate.references_error() {\n                     return;\n@@ -1479,6 +1478,17 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // known, since we don't dispatch based on region\n                 // relationships.\n \n+                // Pick the first substitution that still contains inference variables as the one\n+                // we're going to emit an error for. If there are none (see above), fall back to\n+                // the substitution for `Self`.\n+                let subst = {\n+                    let substs = data.trait_ref.substs;\n+                    substs\n+                        .iter()\n+                        .find(|s| s.has_infer_types_or_consts())\n+                        .unwrap_or_else(|| substs[0])\n+                };\n+\n                 // This is kind of a hack: it frequently happens that some earlier\n                 // error prevents types from being fully inferred, and then we get\n                 // a bunch of uninteresting errors saying something like \"<generic\n@@ -1495,21 +1505,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    self.emit_inference_failure_err(\n-                        body_id,\n-                        span,\n-                        self_ty.into(),\n-                        ErrorCode::E0282,\n-                    )\n-                    .emit();\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0282).emit();\n                     return;\n                 }\n-                let mut err = self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    self_ty.into(),\n-                    ErrorCode::E0283,\n-                );\n+                let mut err =\n+                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283);\n                 err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                 if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());"}, {"sha": "4473aa2081f23192c1d0944950229e8bafef8f01", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -250,10 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n             let mut scope_var_ids =\n                 self.guard_bindings.pop().expect(\"should have pushed at least one earlier\");\n             for var_id in scope_var_ids.drain(..) {\n-                assert!(\n-                    self.guard_bindings_set.remove(&var_id),\n-                    \"variable should be placed in scope earlier\"\n-                );\n+                self.guard_bindings_set.remove(&var_id);\n             }\n         }\n         self.visit_expr(body);"}, {"sha": "b51b95a635c87ba9cb60acc80db0eba0424cf49c", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 10, "deletions": 79, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,4 +1,4 @@\n-use super::super::{navigate::Position, node, DeterministicRng};\n+use super::super::{node, DeterministicRng};\n use super::Entry::{Occupied, Vacant};\n use super::*;\n use crate::boxed::Box;\n@@ -7,7 +7,7 @@ use crate::rc::Rc;\n use crate::string::{String, ToString};\n use crate::vec::Vec;\n use std::convert::TryFrom;\n-use std::iter::FromIterator;\n+use std::iter::{self, FromIterator};\n use std::mem;\n use std::ops::Bound::{self, Excluded, Included, Unbounded};\n use std::ops::RangeBounds;\n@@ -42,19 +42,6 @@ fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>\n     }\n }\n \n-struct SeriesChecker<T> {\n-    previous: Option<T>,\n-}\n-\n-impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n-    fn is_ascending(&mut self, next: T) {\n-        if let Some(previous) = self.previous {\n-            assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n-        }\n-        self.previous = Some(next);\n-    }\n-}\n-\n impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     /// Panics if the map (or the code navigating it) is corrupted.\n     fn check(&self)\n@@ -63,44 +50,10 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     {\n         if let Some(root) = &self.root {\n             let root_node = root.node_as_ref();\n-            let mut checker = SeriesChecker { previous: None };\n-            let mut internal_length = 0;\n-            let mut internal_kv_count = 0;\n-            let mut leaf_length = 0;\n-            root_node.visit_nodes_in_order(|pos| match pos {\n-                Position::Leaf(node) => {\n-                    let is_root = root_node.height() == 0;\n-                    let min_len = if is_root { 0 } else { node::MIN_LEN };\n-                    assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-\n-                    for idx in 0..node.len() {\n-                        let key = *unsafe { node.key_at(idx) };\n-                        checker.is_ascending(key);\n-                    }\n-                    leaf_length += node.len();\n-                }\n-                Position::Internal(node) => {\n-                    let is_root = root_node.height() == node.height();\n-                    let min_len = if is_root { 1 } else { node::MIN_LEN };\n-                    assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-\n-                    for idx in 0..=node.len() {\n-                        let edge = unsafe { node::Handle::new_edge(node, idx) };\n-                        assert!(edge.descend().ascend().ok().unwrap() == edge);\n-                    }\n-\n-                    internal_length += node.len();\n-                }\n-                Position::InternalKV(kv) => {\n-                    let key = *kv.into_kv().0;\n-                    checker.is_ascending(key);\n-\n-                    internal_kv_count += 1;\n-                }\n-            });\n-            assert_eq!(internal_length, internal_kv_count);\n-            assert_eq!(root_node.calc_length(), internal_length + leaf_length);\n-            assert_eq!(self.length, internal_length + leaf_length);\n+            assert!(root_node.ascend().is_err());\n+            root_node.assert_back_pointers();\n+            root_node.assert_ascending();\n+            assert_eq!(self.length, root_node.assert_and_add_lengths());\n         } else {\n             assert_eq!(self.length, 0);\n         }\n@@ -116,28 +69,7 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n         K: Debug,\n     {\n         if let Some(root) = self.root.as_ref() {\n-            let mut result = String::new();\n-            let root_node = root.node_as_ref();\n-            root_node.visit_nodes_in_order(|pos| match pos {\n-                Position::Leaf(leaf) => {\n-                    let depth = root_node.height();\n-                    let indent = \"  \".repeat(depth);\n-                    result += &format!(\"\\n{}\", indent);\n-                    for idx in 0..leaf.len() {\n-                        if idx > 0 {\n-                            result += \", \";\n-                        }\n-                        result += &format!(\"{:?}\", unsafe { leaf.key_at(idx) });\n-                    }\n-                }\n-                Position::Internal(_) => {}\n-                Position::InternalKV(kv) => {\n-                    let depth = root_node.height() - kv.into_node().height();\n-                    let indent = \"  \".repeat(depth);\n-                    result += &format!(\"\\n{}{:?}\", indent, kv.into_kv().0);\n-                }\n-            });\n-            result\n+            root.node_as_ref().dump_keys()\n         } else {\n             String::from(\"not yet allocated\")\n         }\n@@ -170,7 +102,6 @@ fn test_levels() {\n         let last_key = *map.last_key_value().unwrap().0;\n         map.insert(last_key + 1, ());\n     }\n-    println!(\"{}\", map.dump_keys());\n     map.check();\n     // Structure:\n     // - 1 element in internal root node with 2 children\n@@ -372,7 +303,7 @@ fn test_iter_rev() {\n fn do_test_iter_mut_mutation<T>(size: usize)\n where\n     T: Copy + Debug + Ord + TryFrom<usize>,\n-    <T as std::convert::TryFrom<usize>>::Error: std::fmt::Debug,\n+    <T as TryFrom<usize>>::Error: Debug,\n {\n     let zero = T::try_from(0).unwrap();\n     let mut map: BTreeMap<T, T> = (0..size).map(|i| (T::try_from(i).unwrap(), zero)).collect();\n@@ -857,7 +788,7 @@ mod test_drain_filter {\n     fn consuming_nothing() {\n         let pairs = (0..3).map(|i| (i, i));\n         let mut map: BTreeMap<_, _> = pairs.collect();\n-        assert!(map.drain_filter(|_, _| false).eq(std::iter::empty()));\n+        assert!(map.drain_filter(|_, _| false).eq(iter::empty()));\n         map.check();\n     }\n \n@@ -878,7 +809,7 @@ mod test_drain_filter {\n                 *v += 6;\n                 false\n             })\n-            .eq(std::iter::empty())\n+            .eq(iter::empty())\n         );\n         assert!(map.keys().copied().eq(0..3));\n         assert!(map.values().copied().eq(6..9));"}, {"sha": "e56fc2aa51e7c1dfc8bbef4dd57c1cca6327a60e", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,6 +1,111 @@\n+use super::super::navigate;\n use super::*;\n+use crate::fmt::Debug;\n+use crate::string::String;\n use core::cmp::Ordering::*;\n \n+impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n+    pub fn assert_back_pointers(self) {\n+        match self.force() {\n+            ForceResult::Leaf(_) => {}\n+            ForceResult::Internal(node) => {\n+                for idx in 0..=node.len() {\n+                    let edge = unsafe { Handle::new_edge(node, idx) };\n+                    let child = edge.descend();\n+                    assert!(child.ascend().ok() == Some(edge));\n+                    child.assert_back_pointers();\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn assert_ascending(self)\n+    where\n+        K: Copy + Debug + Ord,\n+    {\n+        struct SeriesChecker<T> {\n+            previous: Option<T>,\n+        }\n+        impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n+            fn is_ascending(&mut self, next: T) {\n+                if let Some(previous) = self.previous {\n+                    assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n+                }\n+                self.previous = Some(next);\n+            }\n+        }\n+\n+        let mut checker = SeriesChecker { previous: None };\n+        self.visit_nodes_in_order(|pos| match pos {\n+            navigate::Position::Leaf(node) => {\n+                for idx in 0..node.len() {\n+                    let key = *unsafe { node.key_at(idx) };\n+                    checker.is_ascending(key);\n+                }\n+            }\n+            navigate::Position::InternalKV(kv) => {\n+                let key = *kv.into_kv().0;\n+                checker.is_ascending(key);\n+            }\n+            navigate::Position::Internal(_) => {}\n+        });\n+    }\n+\n+    pub fn assert_and_add_lengths(self) -> usize {\n+        let mut internal_length = 0;\n+        let mut internal_kv_count = 0;\n+        let mut leaf_length = 0;\n+        self.visit_nodes_in_order(|pos| match pos {\n+            navigate::Position::Leaf(node) => {\n+                let is_root = self.height() == 0;\n+                let min_len = if is_root { 0 } else { MIN_LEN };\n+                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n+                leaf_length += node.len();\n+            }\n+            navigate::Position::Internal(node) => {\n+                let is_root = self.height() == node.height();\n+                let min_len = if is_root { 1 } else { MIN_LEN };\n+                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n+                internal_length += node.len();\n+            }\n+            navigate::Position::InternalKV(_) => {\n+                internal_kv_count += 1;\n+            }\n+        });\n+        assert_eq!(internal_length, internal_kv_count);\n+        let total = internal_length + leaf_length;\n+        assert_eq!(self.calc_length(), total);\n+        total\n+    }\n+\n+    pub fn dump_keys(self) -> String\n+    where\n+        K: Debug,\n+    {\n+        let mut result = String::new();\n+        self.visit_nodes_in_order(|pos| match pos {\n+            navigate::Position::Leaf(leaf) => {\n+                let depth = self.height();\n+                let indent = \"  \".repeat(depth);\n+                result += &format!(\"\\n{}\", indent);\n+                for idx in 0..leaf.len() {\n+                    if idx > 0 {\n+                        result += \", \";\n+                    }\n+                    result += &format!(\"{:?}\", unsafe { leaf.key_at(idx) });\n+                }\n+            }\n+            navigate::Position::Internal(_) => {}\n+            navigate::Position::InternalKV(kv) => {\n+                let depth = self.height() - kv.into_node().height();\n+                let indent = \"  \".repeat(depth);\n+                result += &format!(\"\\n{}{:?}\", indent, kv.into_kv().0);\n+            }\n+        });\n+        result\n+    }\n+}\n+\n #[test]\n fn test_splitpoint() {\n     for idx in 0..=CAPACITY {"}, {"sha": "a4bbb18da59837edc2fa67b498c08c9d1c8ebb67", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -102,7 +102,9 @@ mod break_keyword {}\n \n #[doc(keyword = \"const\")]\n //\n-/// Compile-time constants and deterministic functions.\n+/// Compile-time constants and compile-time evaluable functions.\n+///\n+/// ## Compile-time constants\n ///\n /// Sometimes a certain value is used many times throughout a program, and it can become\n /// inconvenient to copy it over and over. What's more, it's not always possible or desirable to\n@@ -145,15 +147,28 @@ mod break_keyword {}\n ///\n /// Constants, like statics, should always be in `SCREAMING_SNAKE_CASE`.\n ///\n+/// For more detail on `const`, see the [Rust Book] or the [Reference].\n+///\n+/// ## Compile-time evaluable functions\n+///\n+/// The other main use of the `const` keyword is in `const fn`. This marks a function as being\n+/// callable in the body of a `const` or `static` item and in array initializers (commonly called\n+/// \"const contexts\"). `const fn` are restricted in the set of operations they can perform, to\n+/// ensure that they can be evaluated at compile-time. See the [Reference][const-eval] for more\n+/// detail.\n+///\n+/// Turning a `fn` into a `const fn` has no effect on run-time uses of that function.\n+///\n+/// ## Other uses of `const`\n+///\n /// The `const` keyword is also used in raw pointers in combination with `mut`, as seen in `*const\n /// T` and `*mut T`. More about `const` as used in raw pointers can be read at the Rust docs for the [pointer primitive].\n ///\n-/// For more detail on `const`, see the [Rust Book] or the [Reference].\n-///\n /// [pointer primitive]: primitive.pointer.html\n /// [Rust Book]:\n /// ../book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n /// [Reference]: ../reference/items/constant-items.html\n+/// [const-eval]: ../reference/const_eval.html\n mod const_keyword {}\n \n #[doc(keyword = \"continue\")]"}, {"sha": "8089d7a8ba6f1c629ee1ee0fef2b39937b01806c", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -456,10 +456,7 @@ impl Ipv4Addr {\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub const fn is_link_local(&self) -> bool {\n-        match self.octets() {\n-            [169, 254, ..] => true,\n-            _ => false,\n-        }\n+        matches!(self.octets(), [169, 254, ..])\n     }\n \n     /// Returns [`true`] if the address appears to be globally routable.\n@@ -1262,10 +1259,7 @@ impl Ipv6Addr {\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     pub const fn is_unicast_link_local_strict(&self) -> bool {\n-        (self.segments()[0] & 0xffff) == 0xfe80\n-            && (self.segments()[1] & 0xffff) == 0\n-            && (self.segments()[2] & 0xffff) == 0\n-            && (self.segments()[3] & 0xffff) == 0\n+        matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n     }\n \n     /// Returns [`true`] if the address is a unicast link-local address (`fe80::/10`)."}, {"sha": "b28c6d85b7c725b7b6667378248d00aa77f426c9", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -220,6 +220,10 @@ where\n     }\n }\n \n+pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n+    if error == 0 { Ok(()) } else { Err(crate::io::Error::from_raw_os_error(error)) }\n+}\n+\n // On Unix-like platforms, libc::abort will unregister signal handlers\n // including the SIGABRT handler, preventing the abort from being blocked, and\n // fclose streams, with the side effect of flushing them so libc buffered"}, {"sha": "89c55eb859d0944daec0d28263bc2d72d48f4702", "filename": "library/std/src/sys/unix/mutex.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmutex.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::mem::MaybeUninit;\n+use crate::sys::cvt_nz;\n \n pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n@@ -51,14 +52,11 @@ impl Mutex {\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n         let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let r = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL);\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(r, 0);\n-        let r = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(r, 0);\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_NORMAL))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n     }\n     #[inline]\n     pub unsafe fn lock(&self) {\n@@ -106,15 +104,11 @@ impl ReentrantMutex {\n \n     pub unsafe fn init(&self) {\n         let mut attr = MaybeUninit::<libc::pthread_mutexattr_t>::uninit();\n-        let result = libc::pthread_mutexattr_init(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result =\n-            libc::pthread_mutexattr_settype(attr.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE);\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutex_init(self.inner.get(), attr.as_ptr());\n-        debug_assert_eq!(result, 0);\n-        let result = libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        debug_assert_eq!(result, 0);\n+        cvt_nz(libc::pthread_mutexattr_init(attr.as_mut_ptr())).unwrap();\n+        let attr = PthreadMutexAttr(&mut attr);\n+        cvt_nz(libc::pthread_mutexattr_settype(attr.0.as_mut_ptr(), libc::PTHREAD_MUTEX_RECURSIVE))\n+            .unwrap();\n+        cvt_nz(libc::pthread_mutex_init(self.inner.get(), attr.0.as_ptr())).unwrap();\n     }\n \n     pub unsafe fn lock(&self) {\n@@ -137,3 +131,14 @@ impl ReentrantMutex {\n         debug_assert_eq!(result, 0);\n     }\n }\n+\n+struct PthreadMutexAttr<'a>(&'a mut MaybeUninit<libc::pthread_mutexattr_t>);\n+\n+impl Drop for PthreadMutexAttr<'_> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            let result = libc::pthread_mutexattr_destroy(self.0.as_mut_ptr());\n+            debug_assert_eq!(result, 0);\n+        }\n+    }\n+}"}, {"sha": "a590c74435639cc87658216711321afba545ee5a", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -281,7 +281,7 @@ impl Command {\n         envp: Option<&CStringArray>,\n     ) -> io::Result<Option<Process>> {\n         use crate::mem::MaybeUninit;\n-        use crate::sys;\n+        use crate::sys::{self, cvt_nz};\n \n         if self.get_gid().is_some()\n             || self.get_uid().is_some()\n@@ -343,10 +343,6 @@ impl Command {\n             }\n         }\n \n-        fn cvt_nz(error: libc::c_int) -> io::Result<()> {\n-            if error == 0 { Ok(()) } else { Err(io::Error::from_raw_os_error(error)) }\n-        }\n-\n         unsafe {\n             let mut attrs = MaybeUninit::uninit();\n             cvt_nz(libc::posix_spawnattr_init(attrs.as_mut_ptr()))?;"}, {"sha": "c6e1c99564c09fbc3fe8626bb418042a37595bbd", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,6 +1,7 @@\n use crate::{t, VERSION};\n use std::fmt::Write as _;\n use std::path::{Path, PathBuf};\n+use std::process::Command;\n use std::str::FromStr;\n use std::{\n     env, fmt, fs,\n@@ -196,10 +197,17 @@ simply delete the `pre-commit` file from .git/hooks.\"\n \n     Ok(if should_install {\n         let src = src_path.join(\"src\").join(\"etc\").join(\"pre-commit.sh\");\n-        let dst = src_path.join(\".git\").join(\"hooks\").join(\"pre-commit\");\n-        match fs::hard_link(src, dst) {\n+        let git = t!(Command::new(\"git\").args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(\n+            |output| {\n+                assert!(output.status.success(), \"failed to run `git`\");\n+                PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n+            }\n+        ));\n+        let dst = git.join(\"hooks\").join(\"pre-commit\");\n+        match fs::hard_link(src, &dst) {\n             Err(e) => println!(\n-                \"x.py encountered an error -- do you already have the git hook installed?\\n{}\",\n+                \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n+                dst.display(),\n                 e\n             ),\n             Ok(_) => println!(\"Linked `src/etc/pre-commit.sh` to `.git/hooks/pre-commit`\"),"}, {"sha": "927d2c69efa06bd5646029ae3d9df475ca5ec0ae", "filename": "src/test/ui/associated-consts/associated-const-ambiguity-report.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-ambiguity-report.rs"}, {"sha": "c5e32afbbce400f9bc44a8dc878f1adb902dd83f", "filename": "src/test/ui/associated-consts/associated-const-ambiguity-report.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-ambiguity-report.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr"}, {"sha": "17d7824273ea713b6d2998ec3806538e60f74be2", "filename": "src/test/ui/associated-consts/associated-const-array-len.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-array-len.rs"}, {"sha": "2fdfa3da3086c812adf4dfa7f612c0b2b6742db8", "filename": "src/test/ui/associated-consts/associated-const-array-len.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-array-len.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-array-len.stderr"}, {"sha": "e659bdb83f9c1886ea471fbd28d725909d0e6c85", "filename": "src/test/ui/associated-consts/associated-const-dead-code.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-dead-code.rs"}, {"sha": "9b6bbb68a71f770d6d8fb978b1e3bcb6621d7c84", "filename": "src/test/ui/associated-consts/associated-const-dead-code.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-dead-code.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-dead-code.stderr"}, {"sha": "498e315b5c83cf4cef698f15596353ee8612eed8", "filename": "src/test/ui/associated-consts/associated-const-generic-obligations.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-generic-obligations.rs"}, {"sha": "d8bac07e058da3278f528134c023b0949f0e4794", "filename": "src/test/ui/associated-consts/associated-const-generic-obligations.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr"}, {"sha": "08260ec8f4d6318a5b92403be35ecaa5c4f0f8e9", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.rs"}, {"sha": "0cce10b54a4a9f4ffac2ecf639212c6e66dd58fd", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-lifetime.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-lifetime.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.stderr"}, {"sha": "1aad749c1ebe29f42cf4d91a4b53e75f9abe058b", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.rs"}, {"sha": "acdf33b2b835b9586802103a35acf77afa8f614b", "filename": "src/test/ui/associated-consts/associated-const-impl-wrong-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-impl-wrong-type.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.stderr"}, {"sha": "cc3acd539562279c9bfcb7ed06afd6cbb920fb05", "filename": "src/test/ui/associated-consts/associated-const-in-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-in-trait.rs"}, {"sha": "a8a8d01ed78fb656da803fe692b5f85a43a43427", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-in-trait.stderr"}, {"sha": "024d14e21b5fd2efe9185d3b67b162e76d720dce", "filename": "src/test/ui/associated-consts/associated-const-no-item.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-no-item.rs"}, {"sha": "fe27da5ac645f5329c2cbaaae1cb6e66090adf6b", "filename": "src/test/ui/associated-consts/associated-const-no-item.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-no-item.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-no-item.stderr"}, {"sha": "3ee3134acc42d907ecee1d2079a9ee049aa034f4", "filename": "src/test/ui/associated-consts/associated-const-private-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-private-impl.rs"}, {"sha": "1b9d7ac7e6c3f2e0d6e5247ca84e8b7bf09ee7b8", "filename": "src/test/ui/associated-consts/associated-const-private-impl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-private-impl.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-private-impl.stderr"}, {"sha": "403cdbd7ff330a2a95ff57a76e03240f7faec8a1", "filename": "src/test/ui/associated-consts/associated-const-trait-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-trait-bound.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-trait-bound.rs"}, {"sha": "3f260d84e4c0a03da4929c134e48833e55becab1", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arms.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arms.rs"}, {"sha": "1ccf9febd4bdc3e3b39883effc47bdc9084155d0", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arms.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arms.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arms.stderr"}, {"sha": "8fe79b97d9ba29d9541af3c05357c920da414f60", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.rs"}, {"sha": "0bc019b2dc8751fa2c855c7d74ce3c026f67af13", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays-2.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr"}, {"sha": "d51821059fc1391cfbc9591ae8287ae0cd725cfc", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.rs"}, {"sha": "ac40e390cfbbd50bce084ffe4a0422b1fda74bd2", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr"}, {"sha": "9fb1bbebc96100847ee3e47bcf85f6c4c376743e", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-cyclic-fail.rs"}, {"sha": "616ac9053fd539af2e3bdde5b3be319843a37a74", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-cyclic-fail.stderr"}, {"sha": "82105f25f92407df8a732dc0bd8a1f41aae926bd", "filename": "src/test/ui/associated-consts/defaults-cyclic-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-pass.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-cyclic-pass.rs"}, {"sha": "d7a48cbd63ecccd1a67fbf6c9fdf99f0a16fa14a", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-not-assumed-fail.rs"}, {"sha": "1497633c26af95196fcd00c2e11dca8249fde900", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-not-assumed-fail.stderr"}, {"sha": "c08e05c8a3073c35d748cf07a3cc02dfb6c931a1", "filename": "src/test/ui/associated-consts/defaults-not-assumed-pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-pass.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/defaults-not-assumed-pass.rs"}, {"sha": "f9f663af5e2655bce0d3f39d8880e299e11654f9", "filename": "src/test/ui/associated-consts/issue-63496.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-63496.rs"}, {"sha": "34e947030a072ff8b693e7bdc83492721c489c10", "filename": "src/test/ui/associated-consts/issue-63496.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-63496.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-63496.stderr"}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.noopt.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.noopt.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.noopt.stderr"}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.opt.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt.stderr"}, {"sha": "f59287bce736bf99039fb90c455047146f251cbd", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.opt_with_overflow_checks.stderr"}, {"sha": "850f65ae9d183b9c8a70f874b4c51dcd80fa9182", "filename": "src/test/ui/associated-consts/issue-69020-assoc-const-arith-overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-69020-assoc-const-arith-overflow.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-const/issue-69020-assoc-const-arith-overflow.rs"}, {"sha": "c85d41c7f51954d6814170036ffe03caf6be6afc", "filename": "src/test/ui/associated-types/associated-type-projection-ambig-between-bound-and-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-ambig-between-bound-and-where-clause.rs"}, {"sha": "6de8459954c681a8ae2bb93cc6e4445b1f79c6ae", "filename": "src/test/ui/associated-types/associated-type-projection-ambig-between-bound-and-where-clause.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-ambig-between-bound-and-where-clause.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-ambig-between-bound-and-where-clause.stderr"}, {"sha": "df19332b6458ac49096ac9dabffafaa7ae88773c", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs"}, {"sha": "b6a88179c1f63ab81d687f4ee405f3be3bb357dd", "filename": "src/test/ui/associated-types/associated-type-projection-from-multiple-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr"}, {"sha": "7e05bcd309a4ff3efa52d1da6c915a0f58d67736", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.rs"}, {"sha": "07f207627f4df2faadd79986c7a2d292c9b03446", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr"}, {"sha": "2005bd4dd5ca7e7d67e4535238f9409c49d70ee7", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:5\n+  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n    |\n LL |     with_closure(|x: u32, y| {});\n-   |     ^^^^^^^^^^^^ cannot infer type for type parameter `B` declared on the function `with_closure`\n+   |                           ^ consider giving this closure parameter a type\n \n error: aborting due to previous error\n "}, {"sha": "3e5e2e601f5c46a72df440926644177dd906ffbd", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-arg-mismatch-recover.rs"}, {"sha": "99adb3526852710af8efae52b2af5e006124f406", "filename": "src/test/ui/generics/generic-arg-mismatch-recover.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-arg-mismatch-recover.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-arg-mismatch-recover.stderr"}, {"sha": "22bcd44a14d9b849e5deed6cb5dca974fffdc68d", "filename": "src/test/ui/generics/generic-extern-lifetime.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-extern-lifetime.rs"}, {"sha": "72951aea4aaf050875cdc1fea09d901cbaded47b", "filename": "src/test/ui/generics/generic-extern-lifetime.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-extern-lifetime.stderr"}, {"sha": "e52a88592ff96d94ab8a18a0774d0b89d07a012a", "filename": "src/test/ui/generics/generic-extern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-extern.rs"}, {"sha": "c90215b612d4c834c192a1d8b3924f68ccec0ddb", "filename": "src/test/ui/generics/generic-extern.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-extern.stderr"}, {"sha": "abbf64058204a13f19e84f7e08ce691a8bf3c14a", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-impl-less-params-with-defaults.rs"}, {"sha": "22b00e1dea474c4ad388bbeaef81ecf15671dfb6", "filename": "src/test/ui/generics/generic-impl-less-params-with-defaults.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-less-params-with-defaults.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-impl-less-params-with-defaults.stderr"}, {"sha": "a14fb7064c9958d16ac4dee2f47050ad8acaa005", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-impl-more-params-with-defaults.rs"}, {"sha": "66950d450a11147e45263eb787926755a99f273d", "filename": "src/test/ui/generics/generic-impl-more-params-with-defaults.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-impl-more-params-with-defaults.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-impl-more-params-with-defaults.stderr"}, {"sha": "6ffaba19d78b80db211ec6072af061d25ed33006", "filename": "src/test/ui/generics/generic-lifetime-trait-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-lifetime-trait-impl.rs"}, {"sha": "4ae5098a121f59f0ae0833941b2a017e94aba271", "filename": "src/test/ui/generics/generic-lifetime-trait-impl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-lifetime-trait-impl.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-lifetime-trait-impl.stderr"}, {"sha": "72f9af0124c1669f974aa5c5d15f9561b529a125", "filename": "src/test/ui/generics/generic-no-mangle.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-no-mangle.fixed"}, {"sha": "08d631e6eee1eab8d6d035fefcd41adfb6d37034", "filename": "src/test/ui/generics/generic-no-mangle.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-no-mangle.rs"}, {"sha": "e8e6d9d502d4b42a057d1eda29f5260a7769c7c0", "filename": "src/test/ui/generics/generic-no-mangle.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-no-mangle.stderr"}, {"sha": "8d9883dc7a9393daa1d01b5fc56fcfb34980f803", "filename": "src/test/ui/generics/generic-non-trailing-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-non-trailing-defaults.rs"}, {"sha": "fb359f673a95ef259f2853be0b84ea5893c01583", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-non-trailing-defaults.stderr"}, {"sha": "3c5cc84c6a6ac7d9e0e94c471de875fccfaa5894", "filename": "src/test/ui/generics/generic-param-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-param-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-param-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-param-attrs.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-param-attrs.rs"}, {"sha": "3aa03392ff2d95242793ab0ad1dc9ae6bb774345", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-less-params-with-defaults.rs"}, {"sha": "a4cc8325a04fc154cd9d4a8e389caa15b56915ff", "filename": "src/test/ui/generics/generic-type-less-params-with-defaults.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-less-params-with-defaults.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-less-params-with-defaults.stderr"}, {"sha": "2713f088dcb5140286fcb314d42d1a08958291b7", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-more-params-with-defaults.rs"}, {"sha": "5031930b1bb0a971da3454ccec899ea805701f19", "filename": "src/test/ui/generics/generic-type-more-params-with-defaults.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-more-params-with-defaults.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-more-params-with-defaults.stderr"}, {"sha": "ac0cab20d78a2cfc33a560754ba65edd5f571114", "filename": "src/test/ui/generics/generic-type-params-forward-mention.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-params-forward-mention.rs"}, {"sha": "97389c337fcbef7c6199427c8623445544bf4efb", "filename": "src/test/ui/generics/generic-type-params-forward-mention.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-params-forward-mention.stderr"}, {"sha": "6e0beec66340295a924dbe4bd9a59d020decbb95", "filename": "src/test/ui/generics/generic-type-params-name-repr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-params-name-repr.rs"}, {"sha": "4c3c003965c1f1604d90c86ecc1b1bd0d1bae9c2", "filename": "src/test/ui/generics/generic-type-params-name-repr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/generic-type-params-name-repr.stderr"}, {"sha": "dd89bc0f7a0ff856feba1e555509b6fe48b84127", "filename": "src/test/ui/generics/param-in-ct-in-ty-param-default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.rs"}, {"sha": "ea867240269efdd3bf0de265687cc543d4eaf5d3", "filename": "src/test/ui/generics/param-in-ct-in-ty-param-default.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.stderr"}, {"sha": "a68369616d8b62a32b84bfc9a0e5b2994eae5bc8", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -14,7 +14,7 @@ pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR type annotations needed\n+    let ex = |x| { //~ ERROR type annotations needed\n+        let_(add(x,x), |y| {\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "12b2eb48e7eaa2987d341590f80595f040d88ba6", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -1,13 +1,8 @@\n-error[E0282]: type annotations needed for the closure `fn(Expr<'_, _>) -> Expr<'_, _>`\n-  --> $DIR/issue-23046.rs:18:9\n+error[E0282]: type annotations needed for `Expr<'_, VAR>`\n+  --> $DIR/issue-23046.rs:17:15\n    |\n-LL |         let_(add(x,x), |y| {\n-   |         ^^^^ cannot infer type for type parameter `VAR` declared on the function `let_`\n-   |\n-help: give this closure an explicit return type without `_` placeholders\n-   |\n-LL |             let_(add(x, x), |x|-> Expr<'_, _> { x })})};\n-   |                                ^^^^^^^^^^^^^^^^   ^\n+LL |     let ex = |x| {\n+   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n \n error: aborting due to previous error\n "}, {"sha": "3443cca5f327058695df5f7bde8e9d57eb726164", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -13,19 +13,21 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^ consider giving this closure parameter a type\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:15:17\n    |\n LL |     let _ = \"x\".as_ref();\n-   |                 ^^^^^^ cannot infer type for type `str`\n+   |         -       ^^^^^^ cannot infer type for type parameter `T` declared on the trait `AsRef`\n+   |         |\n+   |         consider giving this pattern the explicit type `&T`, where the type parameter `T` is specified\n    |\n    = note: cannot satisfy `str: AsRef<_>`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:19:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -34,7 +36,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:25:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n@@ -43,41 +45,34 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:33:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:41:5\n    |\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:47:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`\n \n-error[E0283]: type annotations needed for `String`\n+error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:55:5\n    |\n-LL |     let _ = String::from(\"x\");\n-   |         - consider giving this pattern a type\n-...\n LL |     String::from(\"x\".as_ref());\n-   |     ^^^^^^^^^^^^ cannot infer type for struct `String`\n+   |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n    |\n    = note: cannot satisfy `String: From<&_>`\n    = note: required by `from`"}, {"sha": "ac18470c6211399cc7266631a5341ae431592526", "filename": "src/test/ui/issues/issue-78115.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-78115.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fissues%2Fissue-78115.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78115.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #78115: \"ICE: variable should be placed in scope earlier\"\n+\n+// check-pass\n+// edition:2018\n+\n+#[allow(dead_code)]\n+struct Foo {\n+    a: ()\n+}\n+\n+async fn _bar() {\n+    let foo = Foo { a: () };\n+    match foo {\n+        Foo { a: _a } | Foo { a: _a } if true => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9c144324f2f7edc1112d228cad6309e3b063d904", "filename": "src/test/ui/lint/lint-unnecessary-parens.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -60,6 +60,8 @@ fn main() {\n     if (v == X { y: true }) {}\n     if (X { y: true } == v) {}\n     if (X { y: false }.y) {}\n+    // this shouldn't warn, because the parens are necessary to disambiguate let chains\n+    if let true = (true && false) {}\n \n     while (X { y: false }.foo(true)) {}\n     while (true | X { y: false }.y) {}"}, {"sha": "4fd9cabb3b0b243b574f51be1ee927ee0f3d946b", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -60,6 +60,8 @@ fn main() {\n     if (v == X { y: true }) {}\n     if (X { y: true } == v) {}\n     if (X { y: false }.y) {}\n+    // this shouldn't warn, because the parens are necessary to disambiguate let chains\n+    if let true = (true && false) {}\n \n     while (X { y: false }.foo(true)) {}\n     while (true | X { y: false }.y) {}"}, {"sha": "9eae7da90047e5ea3e019bf98b83ef9bc80df69f", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -83,25 +83,25 @@ LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:71:24\n+  --> $DIR/lint-unnecessary-parens.rs:73:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:73:18\n+  --> $DIR/lint-unnecessary-parens.rs:75:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:74:10\n+  --> $DIR/lint-unnecessary-parens.rs:76:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:75:11\n+  --> $DIR/lint-unnecessary-parens.rs:77:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses"}, {"sha": "98f42c5cdb12982123557bc5ecbc90980c37fd10", "filename": "src/test/ui/modules_and_files_visibility/mod_file_aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_aux.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_aux.rs"}, {"sha": "c42d2eaa7bd6d54c29493da35104643cd8f384cc", "filename": "src/test/ui/modules_and_files_visibility/mod_file_correct_spans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_correct_spans.rs"}, {"sha": "73044752b077bccc94aa53cdeaf0573a4de44d1d", "filename": "src/test/ui/modules_and_files_visibility/mod_file_correct_spans.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_correct_spans.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_correct_spans.stderr"}, {"sha": "e5958af173b66e650eb6b9af4efc8ab465a6ddfa", "filename": "src/test/ui/modules_and_files_visibility/mod_file_disambig.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_disambig.rs"}, {"sha": "3a3d2e2ddddb39cc61a9ab43a5765752be6ef3fc", "filename": "src/test/ui/modules_and_files_visibility/mod_file_disambig.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_disambig.stderr"}, {"sha": "3bf9609f4edc1fb7055a012948b2a250d51b4062", "filename": "src/test/ui/modules_and_files_visibility/mod_file_disambig_aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_disambig_aux.rs"}, {"sha": "3bf9609f4edc1fb7055a012948b2a250d51b4062", "filename": "src/test/ui/modules_and_files_visibility/mod_file_disambig_aux/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules_and_files_visibility%2Fmod_file_disambig_aux%2Fmod.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/mod/mod_file_disambig_aux/mod.rs"}, {"sha": "c6d7166e74065bde8a2c5ca1fc42619a8193a632", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-direct-unsafe-ptr-embedded.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-embedded.rs"}, {"sha": "cc7ea6cde8d7f3bea786f4460fc9a2f0197dac34", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-direct-unsafe-ptr-param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-direct-unsafe-ptr-param.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-param.rs"}, {"sha": "86db09cc08fc8a0194f16c0dc92ba14fbb1ab02f", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-indirect-unsafe-ptr-embedded.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-embedded.rs"}, {"sha": "99c574d0780457345a05e8d9387df403d39b142d", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-hide-behind-indirect-unsafe-ptr-param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-param.rs"}, {"sha": "dca8aaef1500d84484f8f0c5dba4495bc0b4c2e1", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/allow-use-behind-cousin-variant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-use-behind-cousin-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-use-behind-cousin-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fallow-use-behind-cousin-variant.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/allow-use-behind-cousin-variant.rs"}, {"sha": "4a8a09493798eb33ae463005dfef96d95b74ecbe", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-embedded.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.rs"}, {"sha": "c73a6cf1326b3e3a7401deec42407cebeeb144f8", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-embedded.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.stderr"}, {"sha": "93022a23dbfb8d5b74868f529e320e5eb9c5ad99", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs"}, {"sha": "6fdf9db89b8dc4a74c007e6089bbe434394a39eb", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-param.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.stderr"}, {"sha": "fe62774d220d4efe825d320b60cab4a143c9278c", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-embedded.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.rs"}, {"sha": "659a9812672330b8ead5893c3e64a67e2629fb4e", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr"}, {"sha": "c3a30674ea3878b766306c5692bad45266ca35ae", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.rs"}, {"sha": "c8c36510542a2d47378b60bda79bd661a23c9d45", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-param.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr"}, {"sha": "4d0e80d5af31235f237855afa3839a5f2b0125e2", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-embedded.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.rs"}, {"sha": "8abbd5d342be782ae3880076386cfcd97d29393a", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-embedded.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.stderr"}, {"sha": "432f196ec81279fd82854e5449661beef1004fa8", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.rs"}, {"sha": "3a716d54fcc2cd4577996abbdb2bb0e044fdff2c", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-param.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.stderr"}, {"sha": "bd294047919f132e8d1332e942e71b9baaa24332", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/feature-gate.no_gate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.no_gate.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/feature-gate.no_gate.stderr"}, {"sha": "ee6674097ce2ddcb239fffe31f34dc68ff22b4b3", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/feature-gate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/feature-gate.rs"}, {"sha": "623fd585accb621fed2f16262ddbc8f5ecd6570c", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/feature-gate.with_gate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.with_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.with_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffeature-gate.with_gate.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/feature-gate.with_gate.stderr"}, {"sha": "2b3fbd2a4d28a2ee21ab9dc8278142d76f73df5f", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/fn-ptr-is-structurally-matchable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffn-ptr-is-structurally-matchable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffn-ptr-is-structurally-matchable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Ffn-ptr-is-structurally-matchable.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/fn-ptr-is-structurally-matchable.rs"}, {"sha": "2a915d61e3d90371b7f0cd160e66d88941518a94", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-61188-match-slice-forbidden-without-eq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-61188-match-slice-forbidden-without-eq.rs"}, {"sha": "0bf369fa8cb87d32dc0fe9dad44722270f4b434f", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-61188-match-slice-forbidden-without-eq.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-61188-match-slice-forbidden-without-eq.stderr"}, {"sha": "46d8ee3b6be9c0c5a2b1eb9efc87e696529c1898", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs"}, {"sha": "a50093a5b1128bc225f42adc76f561ff6a083342", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr"}, {"sha": "567685950e9e4aaf7d77fbf0efc02123285fafe2", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-63479-match-fnptr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-63479-match-fnptr.rs"}, {"sha": "8cf87cc85a1d44e6eaf243e78e5ba214a80791fb", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/issue-63479-match-fnptr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-63479-match-fnptr.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/issue-63479-match-fnptr.stderr"}, {"sha": "7ba0f3a9e8dd959df1bdd7a4fef29d23d0a7e6d1", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-empty-array-allowed-without-eq-issue-62336.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-empty-array-allowed-without-eq-issue-62336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-empty-array-allowed-without-eq-issue-62336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-empty-array-allowed-without-eq-issue-62336.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-empty-array-allowed-without-eq-issue-62336.rs"}, {"sha": "1cca27520618d531e7ce2f964320e1c3f9ad1162", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-forbidden-without-eq.rs"}, {"sha": "02fa23981894a07a307a9e87bd856b2768864883", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-forbidden-without-eq.stderr"}, {"sha": "151a475c9190644e6423056229902d45b842e4f6", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-nonempty-array-forbidden-without-eq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.rs"}, {"sha": "371f8a0aa1d7745e6e47ed08873335bbe4a1d9ed", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-nonempty-array-forbidden-without-eq.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.stderr"}, {"sha": "6b7d94603b567d889aff97f257d49b29d09c257c", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.rs"}, {"sha": "4157cf65283e3d24ae23c88e23d5c9b9692f0716", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.stderr"}, {"sha": "50f91420ce2f106582b53506100bce5f4a3d13b8", "filename": "src/test/ui/rfc-1445-restrict-constants-in-patterns/phantom-data-is-structurally-matchable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fphantom-data-is-structurally-matchable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fphantom-data-is-structurally-matchable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fphantom-data-is-structurally-matchable.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1445/phantom-data-is-structurally-matchable.rs"}, {"sha": "b46d85160d1ee5004cf705e6640174c4e2978e76", "filename": "src/test/ui/rfc-1717-dllimport/missing-link-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/missing-link-attr.rs"}, {"sha": "d836741f9eddfca0f42a2b80a278f6a9a3180ace", "filename": "src/test/ui/rfc-1717-dllimport/missing-link-attr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmissing-link-attr.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/missing-link-attr.stderr"}, {"sha": "106f196b45555c78abadf14e963c99fd0939f330", "filename": "src/test/ui/rfc-1717-dllimport/multiple-renames.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/multiple-renames.rs"}, {"sha": "4e5a3647fa2d2bc9ce53dbe9c05dc9d5216c9a2c", "filename": "src/test/ui/rfc-1717-dllimport/multiple-renames.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Fmultiple-renames.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/multiple-renames.stderr"}, {"sha": "9356c4129923394b56b41148f466772ac293993d", "filename": "src/test/ui/rfc-1717-dllimport/rename-to-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/rename-to-empty.rs"}, {"sha": "aca839d804fc9ba597d77a1e109d0f3c84ad7bc8", "filename": "src/test/ui/rfc-1717-dllimport/rename-to-empty.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-to-empty.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "previous_filename": "src/test/ui/rfc1717/rename-to-empty.stderr"}, {"sha": "03d4fe23cc5bcff87004cfeed8144971e3320d70", "filename": "src/test/ui/traits/issue-77982.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.rs?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -0,0 +1,40 @@\n+use std::collections::HashMap;\n+\n+fn what() {\n+    let descr = String::new();\n+    let mut opts = HashMap::<String, ()>::new();\n+    let opt = String::new();\n+\n+    opts.get(opt.as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn main() {\n+    let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+    //~^ ERROR type annotations needed\n+}\n+\n+trait Foo<'a, T: ?Sized> {\n+    fn foo(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+trait Bar<'a, T: ?Sized> {\n+    fn bar(&self) -> Box<T> {\n+        todo!()\n+    }\n+}\n+\n+impl Foo<'static, u32> for () {}\n+impl<'a> Foo<'a, i16> for () {}\n+\n+impl<'a> Bar<'static, u32> for &'a () {}\n+impl<'a> Bar<'a, i16> for &'a () {}\n+\n+fn foo() {\n+    let _ = ().foo(); //~ ERROR type annotations needed\n+}\n+\n+fn bar() {\n+    let _ = (&()).bar(); //~ ERROR type annotations needed\n+}"}, {"sha": "d788f1871ffac83233b8cd186a5706baeb621bac", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9b52100d5b2284a8d801d722a2941f56decdeac/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=c9b52100d5b2284a8d801d722a2941f56decdeac", "patch": "@@ -0,0 +1,44 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:8:10\n+   |\n+LL |     opts.get(opt.as_ref());\n+   |          ^^^ ------------ this method call resolves to `&T`\n+   |          |\n+   |          cannot infer type for type parameter `Q` declared on the associated function `get`\n+   |\n+   = note: cannot satisfy `String: Borrow<_>`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-77982.rs:12:44\n+   |\n+LL |     let ips: Vec<_> = (0..100_000).map(|_| u32::from(0u32.into())).collect();\n+   |                                            ^^^^^^^^^ ----------- this method call resolves to `T`\n+   |                                            |\n+   |                                            cannot infer type for type parameter `T` declared on the trait `From`\n+   |\n+   = note: cannot satisfy `u32: From<_>`\n+   = note: required by `from`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:35:16\n+   |\n+LL |     let _ = ().foo();\n+   |         -      ^^^ cannot infer type for type parameter `T` declared on the trait `Foo`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `(): Foo<'_, _>`\n+\n+error[E0283]: type annotations needed for `Box<T>`\n+  --> $DIR/issue-77982.rs:39:19\n+   |\n+LL |     let _ = (&()).bar();\n+   |         -         ^^^ cannot infer type for type parameter `T` declared on the trait `Bar`\n+   |         |\n+   |         consider giving this pattern the explicit type `Box<T>`, where the type parameter `T` is specified\n+   |\n+   = note: cannot satisfy `&(): Bar<'_, _>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}]}