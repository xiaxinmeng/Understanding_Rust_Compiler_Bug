{"sha": "7072f59fc61b8b487f301df1fe5eefbcc84672aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNzJmNTlmYzYxYjhiNDg3ZjMwMWRmMWZlNWVlZmJjYzg0NjcyYWE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-01T18:30:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-01T18:57:36Z"}, "message": "Use chalk_ir::Mutability", "tree": {"sha": "7acbfcdfbfb69cd53b4c27e6c6ca3443df6af680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7acbfcdfbfb69cd53b4c27e6c6ca3443df6af680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7072f59fc61b8b487f301df1fe5eefbcc84672aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7072f59fc61b8b487f301df1fe5eefbcc84672aa", "html_url": "https://github.com/rust-lang/rust/commit/7072f59fc61b8b487f301df1fe5eefbcc84672aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7072f59fc61b8b487f301df1fe5eefbcc84672aa/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a9eec44787a0f2b35467ea98dd6f596671907f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9eec44787a0f2b35467ea98dd6f596671907f9", "html_url": "https://github.com/rust-lang/rust/commit/4a9eec44787a0f2b35467ea98dd6f596671907f9"}], "stats": {"total": 142, "additions": 78, "deletions": 64}, "files": [{"sha": "fc1a74641cc8aa5922fae659155fcb797212ea94", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::TypeRef,\n     AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n     DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n@@ -32,8 +32,8 @@ use hir_ty::{\n     method_resolution,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n-    InEnvironment, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitEnvironment,\n-    Ty, TyDefId, TyVariableKind,\n+    InEnvironment, Mutability, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs,\n+    TraitEnvironment, Ty, TyDefId, TyVariableKind,\n };\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n@@ -836,7 +836,7 @@ pub enum Access {\n impl From<Mutability> for Access {\n     fn from(mutability: Mutability) -> Access {\n         match mutability {\n-            Mutability::Shared => Access::Shared,\n+            Mutability::Not => Access::Shared,\n             Mutability::Mut => Access::Exclusive,\n         }\n     }\n@@ -865,7 +865,10 @@ impl SelfParam {\n             .params\n             .first()\n             .map(|param| match *param {\n-                TypeRef::Reference(.., mutability) => mutability.into(),\n+                TypeRef::Reference(.., mutability) => match mutability {\n+                    hir_def::type_ref::Mutability::Shared => Access::Shared,\n+                    hir_def::type_ref::Mutability::Mut => Access::Exclusive,\n+                },\n                 _ => Access::Owned,\n             })\n             .unwrap_or(Access::Owned)"}, {"sha": "d4a8b48e655e1745081425fec459bb568902cd7d", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     TraitRef, Ty,\n };\n use arrayvec::ArrayVec;\n+use chalk_ir::Mutability;\n use hir_def::{\n     db::DefDatabase, find_path, generics::TypeParamProvenance, item_scope::ItemInNs, AdtId,\n     AssocContainerId, HasModule, Lookup, ModuleId, TraitId,\n@@ -291,9 +292,23 @@ impl HirDisplay for Ty {\n                     t.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n \n                 if matches!(self, Ty::Raw(..)) {\n-                    write!(f, \"*{}\", m.as_keyword_for_ptr())?;\n+                    write!(\n+                        f,\n+                        \"*{}\",\n+                        match m {\n+                            Mutability::Not => \"const \",\n+                            Mutability::Mut => \"mut \",\n+                        }\n+                    )?;\n                 } else {\n-                    write!(f, \"&{}\", m.as_keyword_for_ref())?;\n+                    write!(\n+                        f,\n+                        \"&{}\",\n+                        match m {\n+                            Mutability::Not => \"\",\n+                            Mutability::Mut => \"mut \",\n+                        }\n+                    )?;\n                 }\n \n                 let datas;"}, {"sha": "4d771a91e8d99e340d603103df28c7b574737653", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -18,14 +18,15 @@ use std::mem;\n use std::ops::Index;\n use std::sync::Arc;\n \n+use chalk_ir::Mutability;\n use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData, StaticData},\n     expr::{ArithOp, BinaryOp, BindingAnnotation, ExprId, PatId},\n     lang_item::LangItemTarget,\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::TypeRef,\n     AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, Lookup, TraitId,\n     TypeAliasId, VariantId,\n };\n@@ -87,7 +88,7 @@ impl BindingMode {\n     fn convert(annotation: BindingAnnotation) -> BindingMode {\n         match annotation {\n             BindingAnnotation::Unannotated | BindingAnnotation::Mutable => BindingMode::Move,\n-            BindingAnnotation::Ref => BindingMode::Ref(Mutability::Shared),\n+            BindingAnnotation::Ref => BindingMode::Ref(Mutability::Not),\n             BindingAnnotation::RefMut => BindingMode::Ref(Mutability::Mut),\n         }\n     }"}, {"sha": "cf0a3add49d0286056cc59fe15bdc8ef15cd3236", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -4,8 +4,8 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use chalk_ir::TyVariableKind;\n-use hir_def::{lang_item::LangItemTarget, type_ref::Mutability};\n+use chalk_ir::{Mutability, TyVariableKind};\n+use hir_def::lang_item::LangItemTarget;\n use test_utils::mark;\n \n use crate::{autoderef, traits::Solution, Obligation, Substs, TraitRef, Ty};\n@@ -73,20 +73,20 @@ impl<'a> InferenceContext<'a> {\n         match (&mut from_ty, to_ty) {\n             // `*mut T` -> `*const T`\n             // `&mut T` -> `&T`\n-            (Ty::Raw(m1, ..), Ty::Raw(m2 @ Mutability::Shared, ..))\n-            | (Ty::Ref(m1, ..), Ty::Ref(m2 @ Mutability::Shared, ..)) => {\n+            (Ty::Raw(m1, ..), Ty::Raw(m2 @ Mutability::Not, ..))\n+            | (Ty::Ref(m1, ..), Ty::Ref(m2 @ Mutability::Not, ..)) => {\n                 *m1 = *m2;\n             }\n             // `&T` -> `*const T`\n             // `&mut T` -> `*mut T`/`*const T`\n-            (Ty::Ref(.., substs), &Ty::Raw(m2 @ Mutability::Shared, ..))\n+            (Ty::Ref(.., substs), &Ty::Raw(m2 @ Mutability::Not, ..))\n             | (Ty::Ref(Mutability::Mut, substs), &Ty::Raw(m2, ..)) => {\n                 from_ty = Ty::Raw(m2, substs.clone());\n             }\n \n             // Illegal mutability conversion\n-            (Ty::Raw(Mutability::Shared, ..), Ty::Raw(Mutability::Mut, ..))\n-            | (Ty::Ref(Mutability::Shared, ..), Ty::Ref(Mutability::Mut, ..)) => return false,\n+            (Ty::Raw(Mutability::Not, ..), Ty::Raw(Mutability::Mut, ..))\n+            | (Ty::Ref(Mutability::Not, ..), Ty::Ref(Mutability::Mut, ..)) => return false,\n \n             // `{function_type}` -> `fn()`\n             (Ty::FnDef(..), Ty::Function { .. }) => match from_ty.callable_sig(self.db) {"}, {"sha": "cf1f1038a9b78246e2e3b732897c9a136b299839", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -3,7 +3,7 @@\n use std::iter::{repeat, repeat_with};\n use std::{mem, sync::Arc};\n \n-use chalk_ir::TyVariableKind;\n+use chalk_ir::{Mutability, TyVariableKind};\n use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n@@ -15,12 +15,14 @@ use syntax::ast::RangeOp;\n use test_utils::mark;\n \n use crate::{\n-    autoderef, method_resolution, op,\n+    autoderef,\n+    lower::lower_to_chalk_mutability,\n+    method_resolution, op,\n     primitive::{self, UintTy},\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    Binders, CallableDefId, FnPointer, FnSig, Mutability, Obligation, OpaqueTyId, Rawness, Scalar,\n-    Substs, TraitRef, Ty,\n+    Binders, CallableDefId, FnPointer, FnSig, Obligation, OpaqueTyId, Rawness, Scalar, Substs,\n+    TraitRef, Ty,\n };\n \n use super::{\n@@ -462,10 +464,11 @@ impl<'a> InferenceContext<'a> {\n                 cast_ty\n             }\n             Expr::Ref { expr, rawness, mutability } => {\n+                let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = if let Some((exp_inner, exp_rawness, exp_mutability)) =\n                     &expected.ty.as_reference_or_ptr()\n                 {\n-                    if *exp_mutability == Mutability::Mut && *mutability == Mutability::Shared {\n+                    if *exp_mutability == Mutability::Mut && mutability == Mutability::Not {\n                         // FIXME: throw type error - expected mut reference but found shared ref,\n                         // which cannot be coerced\n                     }\n@@ -479,8 +482,8 @@ impl<'a> InferenceContext<'a> {\n                 };\n                 let inner_ty = self.infer_expr_inner(*expr, &expectation);\n                 match rawness {\n-                    Rawness::RawPtr => Ty::Raw(*mutability, Substs::single(inner_ty)),\n-                    Rawness::Ref => Ty::Ref(*mutability, Substs::single(inner_ty)),\n+                    Rawness::RawPtr => Ty::Raw(mutability, Substs::single(inner_ty)),\n+                    Rawness::Ref => Ty::Ref(mutability, Substs::single(inner_ty)),\n                 }\n             }\n             Expr::Box { expr } => {\n@@ -684,11 +687,11 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => Ty::Scalar(Scalar::Bool),\n-                Literal::String(..) => Ty::Ref(Mutability::Shared, Substs::single(Ty::Str)),\n+                Literal::String(..) => Ty::Ref(Mutability::Not, Substs::single(Ty::Str)),\n                 Literal::ByteString(..) => {\n                     let byte_type = Ty::Scalar(Scalar::Uint(UintTy::U8));\n                     let array_type = Ty::Array(Substs::single(byte_type));\n-                    Ty::Ref(Mutability::Shared, Substs::single(array_type))\n+                    Ty::Ref(Mutability::Not, Substs::single(array_type))\n                 }\n                 Literal::Char(..) => Ty::Scalar(Scalar::Char),\n                 Literal::Int(_v, ty) => match ty {"}, {"sha": "eb099311ca79393b173b8cd7f711115e2cf73b2a", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -3,17 +3,17 @@\n use std::iter::repeat;\n use std::sync::Arc;\n \n+use chalk_ir::Mutability;\n use hir_def::{\n     expr::{BindingAnnotation, Expr, Literal, Pat, PatId, RecordFieldPat},\n     path::Path,\n-    type_ref::Mutability,\n     FieldId,\n };\n use hir_expand::name::Name;\n use test_utils::mark;\n \n use super::{BindingMode, Expectation, InferenceContext};\n-use crate::{utils::variant_data, Substs, Ty};\n+use crate::{lower::lower_to_chalk_mutability, utils::variant_data, Substs, Ty};\n \n impl<'a> InferenceContext<'a> {\n     fn infer_tuple_struct_pat(\n@@ -103,7 +103,7 @@ impl<'a> InferenceContext<'a> {\n                 expected = inner;\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n-                    BindingMode::Ref(Mutability::Shared) => BindingMode::Ref(Mutability::Shared),\n+                    BindingMode::Ref(Mutability::Not) => BindingMode::Ref(Mutability::Not),\n                     BindingMode::Ref(Mutability::Mut) => BindingMode::Ref(mutability),\n                 }\n             }\n@@ -152,17 +152,18 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n             Pat::Ref { pat, mutability } => {\n+                let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = match expected.as_reference() {\n                     Some((inner_ty, exp_mut)) => {\n-                        if *mutability != exp_mut {\n+                        if mutability != exp_mut {\n                             // FIXME: emit type error?\n                         }\n                         inner_ty\n                     }\n                     _ => &Ty::Unknown,\n                 };\n                 let subty = self.infer_pat(*pat, expectation, default_bm);\n-                Ty::Ref(*mutability, Substs::single(subty))\n+                Ty::Ref(mutability, Substs::single(subty))\n             }\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n                 p.as_ref(),"}, {"sha": "c2a20c480d0726eab7973e57abcff0ee8e768c2a", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -27,11 +27,9 @@ use std::{iter, mem, ops::Deref, sync::Arc};\n \n use base_db::salsa;\n use hir_def::{\n-    builtin_type::BuiltinType,\n-    expr::ExprId,\n-    type_ref::{Mutability, Rawness},\n-    AdtId, AssocContainerId, DefWithBodyId, FunctionId, GenericDefId, HasModule, LifetimeParamId,\n-    Lookup, TraitId, TypeAliasId, TypeParamId,\n+    builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AdtId, AssocContainerId,\n+    DefWithBodyId, FunctionId, GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId,\n+    TypeAliasId, TypeParamId,\n };\n use itertools::Itertools;\n \n@@ -49,7 +47,7 @@ pub use lower::{\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n-pub use chalk_ir::{BoundVar, DebruijnIndex, Scalar, TyVariableKind};\n+pub use chalk_ir::{BoundVar, DebruijnIndex, Mutability, Scalar, TyVariableKind};\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {"}, {"sha": "1b5843d48a0357a309c465fac26d69b11e763dbb", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -8,6 +8,7 @@\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n+use chalk_ir::Mutability;\n use hir_def::{\n     adt::StructKind,\n     builtin_type::BuiltinType,\n@@ -157,7 +158,7 @@ impl Ty {\n             }\n             TypeRef::RawPtr(inner, mutability) => {\n                 let inner_ty = Ty::from_hir(ctx, inner);\n-                Ty::Raw(*mutability, Substs::single(inner_ty))\n+                Ty::Raw(lower_to_chalk_mutability(*mutability), Substs::single(inner_ty))\n             }\n             TypeRef::Array(inner) => {\n                 let inner_ty = Ty::from_hir(ctx, inner);\n@@ -169,7 +170,7 @@ impl Ty {\n             }\n             TypeRef::Reference(inner, _, mutability) => {\n                 let inner_ty = Ty::from_hir(ctx, inner);\n-                Ty::Ref(*mutability, Substs::single(inner_ty))\n+                Ty::Ref(lower_to_chalk_mutability(*mutability), Substs::single(inner_ty))\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n             TypeRef::Fn(params, is_varargs) => {\n@@ -1259,3 +1260,10 @@ pub(crate) fn return_type_impl_traits(\n         Some(Arc::new(Binders::new(num_binders, return_type_impl_traits)))\n     }\n }\n+\n+pub(crate) fn lower_to_chalk_mutability(m: hir_def::type_ref::Mutability) -> Mutability {\n+    match m {\n+        hir_def::type_ref::Mutability::Shared => Mutability::Not,\n+        hir_def::type_ref::Mutability::Mut => Mutability::Mut,\n+    }\n+}"}, {"sha": "f301a84777e81ccf1503f6e50342c13e34e7e8e2", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -6,9 +6,10 @@ use std::{iter, sync::Arc};\n \n use arrayvec::ArrayVec;\n use base_db::CrateId;\n+use chalk_ir::Mutability;\n use hir_def::{\n-    lang_item::LangItemTarget, type_ref::Mutability, AdtId, AssocContainerId, AssocItemId,\n-    FunctionId, GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n+    lang_item::LangItemTarget, AdtId, AssocContainerId, AssocItemId, FunctionId, GenericDefId,\n+    HasModule, ImplId, Lookup, ModuleId, TraitId, TypeAliasId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -251,7 +252,7 @@ impl Ty {\n             }\n             Ty::Str => lang_item_crate!(\"str_alloc\", \"str\"),\n             Ty::Slice(_) => lang_item_crate!(\"slice_alloc\", \"slice\"),\n-            Ty::Raw(Mutability::Shared, _) => lang_item_crate!(\"const_ptr\"),\n+            Ty::Raw(Mutability::Not, _) => lang_item_crate!(\"const_ptr\"),\n             Ty::Raw(Mutability::Mut, _) => lang_item_crate!(\"mut_ptr\"),\n             Ty::Dyn(_) => {\n                 return self.dyn_trait().and_then(|trait_| {\n@@ -429,7 +430,7 @@ fn iterate_method_candidates_with_autoref(\n     }\n     let refed = Canonical {\n         kinds: deref_chain[0].kinds.clone(),\n-        value: Ty::Ref(Mutability::Shared, Substs::single(deref_chain[0].value.clone())),\n+        value: Ty::Ref(Mutability::Not, Substs::single(deref_chain[0].value.clone())),\n     };\n     if iterate_method_candidates_by_receiver(\n         &refed,"}, {"sha": "db1760e6c566ca7b8084545c48bc5252eb971d75", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7072f59fc61b8b487f301df1fe5eefbcc84672aa/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=7072f59fc61b8b487f301df1fe5eefbcc84672aa", "patch": "@@ -10,7 +10,7 @@ use chalk_ir::{\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n-use hir_def::{type_ref::Mutability, AssocContainerId, GenericDefId, Lookup, TypeAliasId};\n+use hir_def::{AssocContainerId, GenericDefId, Lookup, TypeAliasId};\n \n use crate::{\n     db::HirDatabase,\n@@ -65,7 +65,7 @@ impl ToChalk for Ty {\n             }\n             Ty::Raw(mutability, substs) => {\n                 let ty = substs[0].clone().to_chalk(db);\n-                chalk_ir::TyKind::Raw(mutability.to_chalk(db), ty).intern(&Interner)\n+                chalk_ir::TyKind::Raw(mutability, ty).intern(&Interner)\n             }\n             Ty::Slice(substs) => {\n                 chalk_ir::TyKind::Slice(substs[0].clone().to_chalk(db)).intern(&Interner)\n@@ -198,11 +198,11 @@ impl ToChalk for Ty {\n                 Ty::Tuple(cardinality, from_chalk(db, subst))\n             }\n             chalk_ir::TyKind::Raw(mutability, ty) => {\n-                Ty::Raw(from_chalk(db, mutability), Substs::single(from_chalk(db, ty)))\n+                Ty::Raw(mutability, Substs::single(from_chalk(db, ty)))\n             }\n             chalk_ir::TyKind::Slice(ty) => Ty::Slice(Substs::single(from_chalk(db, ty))),\n             chalk_ir::TyKind::Ref(mutability, _lifetime, ty) => {\n-                Ty::Ref(from_chalk(db, mutability), Substs::single(from_chalk(db, ty)))\n+                Ty::Ref(mutability, Substs::single(from_chalk(db, ty)))\n             }\n             chalk_ir::TyKind::Str => Ty::Str,\n             chalk_ir::TyKind::Never => Ty::Never,\n@@ -230,12 +230,12 @@ impl ToChalk for Ty {\n /// fake lifetime here, because Chalks built-in logic may expect it to be there.\n fn ref_to_chalk(\n     db: &dyn HirDatabase,\n-    mutability: Mutability,\n+    mutability: chalk_ir::Mutability,\n     subst: Substs,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = subst[0].clone().to_chalk(db);\n     let lifetime = LifetimeData::Static.intern(&Interner);\n-    chalk_ir::TyKind::Ref(mutability.to_chalk(db), lifetime, arg).intern(&Interner)\n+    chalk_ir::TyKind::Ref(mutability, lifetime, arg).intern(&Interner)\n }\n \n /// We currently don't model constants, but Chalk does. So, we have to insert a\n@@ -313,22 +313,6 @@ impl ToChalk for OpaqueTyId {\n     }\n }\n \n-impl ToChalk for Mutability {\n-    type Chalk = chalk_ir::Mutability;\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> Self::Chalk {\n-        match self {\n-            Mutability::Shared => chalk_ir::Mutability::Not,\n-            Mutability::Mut => chalk_ir::Mutability::Mut,\n-        }\n-    }\n-    fn from_chalk(_db: &dyn HirDatabase, chalk: Self::Chalk) -> Self {\n-        match chalk {\n-            chalk_ir::Mutability::Mut => Mutability::Mut,\n-            chalk_ir::Mutability::Not => Mutability::Shared,\n-        }\n-    }\n-}\n-\n impl ToChalk for hir_def::ImplId {\n     type Chalk = ImplId;\n "}]}