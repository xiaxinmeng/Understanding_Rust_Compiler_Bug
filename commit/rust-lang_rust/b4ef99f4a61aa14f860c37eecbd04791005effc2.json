{"sha": "b4ef99f4a61aa14f860c37eecbd04791005effc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZWY5OWY0YTYxYWExNGY4NjBjMzdlZWNiZDA0NzkxMDA1ZWZmYzI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:16:16Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-15T09:22:13Z"}, "message": "Print visibility of `macro` items", "tree": {"sha": "316f9542e06c6a460492c885fdb1cfdeb7032ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/316f9542e06c6a460492c885fdb1cfdeb7032ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4ef99f4a61aa14f860c37eecbd04791005effc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ef99f4a61aa14f860c37eecbd04791005effc2", "html_url": "https://github.com/rust-lang/rust/commit/b4ef99f4a61aa14f860c37eecbd04791005effc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4ef99f4a61aa14f860c37eecbd04791005effc2/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf776d5c2fc88624d2562e493aab0d324a3b7d8", "html_url": "https://github.com/rust-lang/rust/commit/8bf776d5c2fc88624d2562e493aab0d324a3b7d8"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b634dcca7fca24215ed3a3ae0e0e8569a46192f1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b4ef99f4a61aa14f860c37eecbd04791005effc2", "patch": "@@ -2387,7 +2387,7 @@ pub enum ItemKind {\n     ),\n     /// A macro invocation.\n     ///\n-    /// E.g., `macro_rules! foo { .. }` or `foo!(..)`.\n+    /// E.g., `foo!(..)`.\n     Mac(Mac),\n \n     /// A macro definition."}, {"sha": "dd8c76342e35b5e10a7381ad3ba9ad70bca0f674", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b4ef99f4a61aa14f860c37eecbd04791005effc2", "patch": "@@ -1369,8 +1369,12 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n-                let (kw, has_bang) =\n-                    if macro_def.legacy { (\"macro_rules\", true) } else { (\"macro\", false) };\n+                let (kw, has_bang) = if macro_def.legacy {\n+                    (\"macro_rules\", true)\n+                } else {\n+                    self.print_visibility(&item.vis);\n+                    (\"macro\", false)\n+                };\n                 self.print_mac_common(\n                     Some(MacHeader::Keyword(kw)),\n                     has_bang,"}, {"sha": "1e1e1dbfb3ea58a1a94ff6077c5b5e76d12497c3", "filename": "src/test/pretty/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ef99f4a61aa14f860c37eecbd04791005effc2/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=b4ef99f4a61aa14f860c37eecbd04791005effc2", "patch": "@@ -2,6 +2,6 @@\n \n #![feature(decl_macro)]\n \n-macro mac { ($ arg : expr) => { $ arg + $ arg } }\n+pub(crate) macro mac { ($ arg : expr) => { $ arg + $ arg } }\n \n fn main() { }"}]}