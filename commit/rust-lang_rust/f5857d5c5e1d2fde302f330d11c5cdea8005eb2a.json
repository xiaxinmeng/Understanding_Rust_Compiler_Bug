{"sha": "f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "node_id": "C_kwDOAAsO6NoAKGY1ODU3ZDVjNWUxZDJmZGUzMDJmMzMwZDExYzVjZGVhODAwNWViMmE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-08-31T19:00:05Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-01T11:38:00Z"}, "message": "Move error code book into a sub folder", "tree": {"sha": "725ad912354f1b9c00d8e316088bea9b6ecbc238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725ad912354f1b9c00d8e316088bea9b6ecbc238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "html_url": "https://github.com/rust-lang/rust/commit/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117169799ffb6df9a86f4d3e933968274022bdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/117169799ffb6df9a86f4d3e933968274022bdd3", "html_url": "https://github.com/rust-lang/rust/commit/117169799ffb6df9a86f4d3e933968274022bdd3"}], "stats": {"total": 99, "additions": 40, "deletions": 59}, "files": [{"sha": "1bde8e007826dffca053aa69474ecba3530ea68a", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 28, "deletions": 53, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "patch": "@@ -7,7 +7,7 @@ use crate::error_codes::error_codes;\n \n use std::env;\n use std::error::Error;\n-use std::fs::{self, create_dir_all, File};\n+use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n@@ -65,44 +65,6 @@ fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     Ok(())\n }\n \n-fn move_folder(source: &Path, target: &Path) -> Result<(), Box<dyn Error>> {\n-    let entries =\n-        fs::read_dir(source)?.map(|res| res.map(|e| e.path())).collect::<Result<Vec<_>, _>>()?;\n-\n-    for entry in entries {\n-        let file_name = entry.file_name().expect(\"file_name() failed\").to_os_string();\n-        let output = target.join(file_name);\n-        if entry.is_file() {\n-            fs::rename(entry, output)?;\n-        } else {\n-            if !output.exists() {\n-                create_dir_all(&output)?;\n-            }\n-            move_folder(&entry, &output)?;\n-        }\n-    }\n-\n-    fs::remove_dir(&source)?;\n-\n-    Ok(())\n-}\n-\n-fn render_html(output_path: &Path) -> Result<(), Box<dyn Error>> {\n-    // We need to render into a temporary folder to prevent `mdbook` from removing everything\n-    // in the output folder (including other completely unrelated things).\n-    let tmp_output = output_path.join(\"tmp\");\n-\n-    if !tmp_output.exists() {\n-        create_dir_all(&tmp_output)?;\n-    }\n-\n-    render_html_inner(&tmp_output)?;\n-\n-    move_folder(&tmp_output, output_path)?;\n-\n-    Ok(())\n-}\n-\n // By default, mdbook doesn't consider code blocks as Rust ones contrary to rustdoc so we have\n // to manually add `rust` attribute whenever needed.\n fn add_rust_attribute_on_codeblock(explanation: &str) -> String {\n@@ -134,26 +96,22 @@ fn add_rust_attribute_on_codeblock(explanation: &str) -> String {\n     })\n }\n \n-fn render_html_inner(output_path: &Path) -> Result<(), Box<dyn Error>> {\n-    // We need to have a little difference between `summary` and `introduction` because the \"draft\"\n-    // chapters (the ones looking like `[a]()`) are not handled correctly when being put into a\n-    // `Chapter` directly: they generate a link whereas they shouldn't.\n+fn render_html(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     let mut introduction = format!(\n-        \"<script>{}</script>\n+        \"<script src='redirect.js'></script>\n # Rust error codes index\n \n This page lists all the error codes emitted by the Rust compiler.\n \n-\",\n-        include_str!(\"redirect.js\")\n+\"\n     );\n \n     let err_codes = error_codes();\n     let mut chapters = Vec::with_capacity(err_codes.len());\n \n     for (err_code, explanation) in err_codes.iter() {\n         if let Some(explanation) = explanation {\n-            introduction.push_str(&format!(\" * [{0}](./error_codes/{0}.html)\\n\", err_code));\n+            introduction.push_str(&format!(\" * [{0}](./{0}.html)\\n\", err_code));\n \n             let content = add_rust_attribute_on_codeblock(explanation);\n             chapters.push(BookItem::Chapter(Chapter {\n@@ -162,7 +120,7 @@ This page lists all the error codes emitted by the Rust compiler.\n                 number: None,\n                 sub_items: Vec::new(),\n                 // We generate it into the `error_codes` folder.\n-                path: Some(PathBuf::from(&format!(\"error_codes/{}.html\", err_code))),\n+                path: Some(PathBuf::from(&format!(\"{}.html\", err_code))),\n                 source_path: None,\n                 parent_names: Vec::new(),\n             }));\n@@ -172,7 +130,7 @@ This page lists all the error codes emitted by the Rust compiler.\n     }\n \n     let mut config = Config::from_str(include_str!(\"book_config.toml\"))?;\n-    config.build.build_dir = output_path.to_path_buf();\n+    config.build.build_dir = output_path.join(\"error_codes\").to_path_buf();\n     let mut book = MDBook::load_with_config_and_summary(\n         env!(\"CARGO_MANIFEST_DIR\"),\n         config,\n@@ -191,10 +149,27 @@ This page lists all the error codes emitted by the Rust compiler.\n     book.book.sections.push(BookItem::Chapter(chapter));\n     book.build()?;\n \n-    // We don't need this file since it's handled by doc.rust-lang.org directly.\n-    let _ = fs::remove_file(output_path.join(\"404.html\"));\n-    // We don't want this file either because it would overwrite the already existing `index.html`.\n-    let _ = fs::remove_file(output_path.join(\"index.html\"));\n+    // We can't put this content into another file, otherwise `mbdbook` will also put it into the\n+    // output directory, making a duplicate.\n+    fs::write(\n+        output_path.join(\"error-index.html\"),\n+        r#\"<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Rust error codes index - Error codes index</title>\n+        <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\n+        <meta name=\"description\" content=\"Book listing all Rust error codes\">\n+        <script src=\"error_codes/redirect.js\"></script>\n+    </head>\n+    <body>\n+        <div>If you are not automatically redirected to the error code index, please <a id=\"index-link\" href=\"./error_codes/error-index.html\">here</a>.\n+        <script>document.getElementById(\"index-link\").click()</script>\n+    </body>\n+</html>\"#,\n+    )?;\n+\n+    // No need for a 404 file, it's already handled by the server.\n+    fs::remove_file(output_path.join(\"error_codes/404.html\"))?;\n \n     Ok(())\n }"}, {"sha": "8c907f5795d324be867a792e25aeac775ebd3b88", "filename": "src/tools/error_index_generator/redirect.js", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5857d5c5e1d2fde302f330d11c5cdea8005eb2a/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fredirect.js?ref=f5857d5c5e1d2fde302f330d11c5cdea8005eb2a", "patch": "@@ -1,10 +1,16 @@\n-(function() {{\n-    if (window.location.hash) {{\n+(function() {\n+    if (window.location.hash) {\n         let code = window.location.hash.replace(/^#/, '');\n         // We have to make sure this pattern matches to avoid inadvertently creating an\n         // open redirect.\n-        if (/^E[0-9]+$/.test(code)) {{\n+        if (!/^E[0-9]+$/.test(code)) {\n+            return;\n+        }\n+        if (window.location.pathname.indexOf(\"/error_codes/\") !== -1) {\n+            // We're not at the top level, so we don't prepend with \"./error_codes/\".\n+            window.location = './' + code + '.html';\n+        } else {\n             window.location = './error_codes/' + code + '.html';\n-        }}\n-    }}\n-}})()\n+        }\n+    }\n+})()"}]}