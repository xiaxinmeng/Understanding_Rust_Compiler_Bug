{"sha": "45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTUwZTJmZDI4ZjFlMmY5MzY2MWUwZGNlZmU1MjAzZWJiNTFjNzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T20:16:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T20:16:07Z"}, "message": "Rollup merge of #64462 - petrochenkov:remattr, r=Centril\n\nfeature_gate: Remove dead code from attribute checking\n\nhttps://github.com/rust-lang/rust/pull/63468 is merged, so all attributes go through name resolution now, so we can remove code that previously performed some checks for attributes not going through resolution.", "tree": {"sha": "25bd19d9b15231761c8a84a2b61713d3d182a808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bd19d9b15231761c8a84a2b61713d3d182a808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfUqICRBK7hj4Ov3rIwAAdHIIAJumsWHtyPoLFlLvtED2PlHn\n2oDWCVbgs2Z7HTnWeUdpfTqmyTZZGfe2C2tQHEWSnL83OxIY+lv5+s816YDstg7i\nYsPqAHP+DnqxZiJWJcKK79dG1KRcZfxU10/p7+l/PsuFERNyGzSCmAI8l5Kr+Yxd\nSG1NCPbHBnpFB4TUwDcH/yr6GIDd1eLfTwAyU6GghchHIHtFEx2kQYtuwjIm7RKy\nheHxJNvgcJAWeCTU3z4ewwfObka1xAU1LtEHBibr1a03gC6zvaxy4PuyB/InH6oy\nUmKS4k4HEywZ8d13exNIjDt0ZfagukyxtlnB0K6FcGmJ20KR0wsMwPNF3V5fJT4=\n=d+dp\n-----END PGP SIGNATURE-----\n", "payload": "tree 25bd19d9b15231761c8a84a2b61713d3d182a808\nparent 5f9b9b275ac24b66bce01b74d7408e06a8f333a7\nparent cb771fdd6c927a4308440cad1607570140f058d6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568492167 +0200\ncommitter GitHub <noreply@github.com> 1568492167 +0200\n\nRollup merge of #64462 - petrochenkov:remattr, r=Centril\n\nfeature_gate: Remove dead code from attribute checking\n\nhttps://github.com/rust-lang/rust/pull/63468 is merged, so all attributes go through name resolution now, so we can remove code that previously performed some checks for attributes not going through resolution.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "html_url": "https://github.com/rust-lang/rust/commit/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9b9b275ac24b66bce01b74d7408e06a8f333a7", "html_url": "https://github.com/rust-lang/rust/commit/5f9b9b275ac24b66bce01b74d7408e06a8f333a7"}, {"sha": "cb771fdd6c927a4308440cad1607570140f058d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb771fdd6c927a4308440cad1607570140f058d6", "html_url": "https://github.com/rust-lang/rust/commit/cb771fdd6c927a4308440cad1607570140f058d6"}], "stats": {"total": 224, "additions": 63, "deletions": 161}, "files": [{"sha": "e8e8da67334712948bda3faf34b092e95e151bf9", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -41,7 +41,6 @@ use syntax::mut_visit::MutVisitor;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n-use syntax::feature_gate::AttributeType;\n use syntax_pos::FileName;\n use syntax_ext;\n \n@@ -219,7 +218,6 @@ impl BoxedResolver {\n \n pub struct PluginInfo {\n     syntax_exts: Vec<NamedSyntaxExtension>,\n-    attributes: Vec<(Symbol, AttributeType)>,\n }\n \n pub fn register_plugins<'a>(\n@@ -312,12 +310,9 @@ pub fn register_plugins<'a>(\n     }\n \n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-    *sess.plugin_attributes.borrow_mut() = attributes.clone();\n+    *sess.plugin_attributes.borrow_mut() = attributes;\n \n-    Ok((krate, PluginInfo {\n-        syntax_exts,\n-        attributes,\n-    }))\n+    Ok((krate, PluginInfo { syntax_exts }))\n }\n \n fn configure_and_expand_inner<'a>(\n@@ -329,7 +324,6 @@ fn configure_and_expand_inner<'a>(\n     crate_loader: &'a mut CrateLoader<'a>,\n     plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n-    let attributes = plugin_info.attributes;\n     time(sess, \"pre ast expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n@@ -522,7 +516,6 @@ fn configure_and_expand_inner<'a>(\n             &krate,\n             &sess.parse_sess,\n             &sess.features_untracked(),\n-            &attributes,\n             sess.opts.unstable_features,\n         );\n     });"}, {"sha": "b80c530731dfc68734d44cdb36fb6b53a207871d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -26,7 +26,7 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n-use std::{iter, mem};\n+use std::{iter, mem, slice};\n use std::ops::DerefMut;\n use std::rc::Rc;\n use std::path::PathBuf;\n@@ -1019,7 +1019,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n-            self.check_attribute_inner(attr, features);\n+            feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n             if attr.path == sym::derive {\n@@ -1029,15 +1029,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             }\n         }\n     }\n-\n-    fn check_attribute(&mut self, at: &ast::Attribute) {\n-        let features = self.cx.ecfg.features.unwrap();\n-        self.check_attribute_inner(at, features);\n-    }\n-\n-    fn check_attribute_inner(&mut self, at: &ast::Attribute, features: &Features) {\n-        feature_gate::check_attribute(at, self.cx.parse_sess, features);\n-    }\n }\n \n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n@@ -1445,7 +1436,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n                 if let Some(file) = it.value_str() {\n                     let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n-                    self.check_attribute(&at);\n+                    self.check_attributes(slice::from_ref(at));\n                     if self.cx.parse_sess.span_diagnostic.err_count() > err_count {\n                         // avoid loading the file if they haven't enabled the feature\n                         return noop_visit_attribute(at, self);"}, {"sha": "b6e13200f32af19d391311b12885ff3a1ced24d1", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -79,6 +79,7 @@ pub enum AttributeType {\n     CrateLevel,\n }\n \n+#[derive(Clone, Copy)]\n pub enum AttributeGate {\n     /// Is gated by a given feature gate, reason\n     /// and function to check if enabled"}, {"sha": "b4491a87f0600c93b5d42f3f51377f54a547fcde", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 47, "deletions": 131, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,7 +1,7 @@\n use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n-use super::builtin_attrs::{AttributeGate, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n+use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n use crate::ast::{\n     self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n@@ -32,16 +32,10 @@ pub enum Stability {\n     Deprecated(&'static str, Option<&'static str>),\n }\n \n-struct Context<'a> {\n-    features: &'a Features,\n-    parse_sess: &'a ParseSess,\n-    plugin_attributes: &'a [(Symbol, AttributeType)],\n-}\n-\n macro_rules! gate_feature_fn {\n     ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n         let (cx, has_feature, span,\n-             name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n+             name, explain, level) = (&*$cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n@@ -62,68 +56,8 @@ macro_rules! gate_feature {\n     };\n }\n \n-impl<'a> Context<'a> {\n-    fn check_attribute(\n-        &self,\n-        attr: &ast::Attribute,\n-        attr_info: Option<&BuiltinAttribute>,\n-        is_macro: bool\n-    ) {\n-        debug!(\"check_attribute(attr = {:?})\", attr);\n-        if let Some(&(name, ty, _template, ref gateage)) = attr_info {\n-            if let AttributeGate::Gated(_, name, desc, ref has_feature) = *gateage {\n-                if !attr.span.allows_unstable(name) {\n-                    gate_feature_fn!(\n-                        self, has_feature, attr.span, name, desc, GateStrength::Hard\n-                    );\n-                }\n-            } else if name == sym::doc {\n-                if let Some(content) = attr.meta_item_list() {\n-                    if content.iter().any(|c| c.check_name(sym::include)) {\n-                        gate_feature!(self, external_doc, attr.span,\n-                            \"`#[doc(include = \\\"...\\\")]` is experimental\"\n-                        );\n-                    }\n-                }\n-            }\n-            debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n-            return;\n-        } else {\n-            for segment in &attr.path.segments {\n-                if segment.ident.as_str().starts_with(\"rustc\") {\n-                    let msg = \"attributes starting with `rustc` are \\\n-                               reserved for use by the `rustc` compiler\";\n-                    gate_feature!(self, rustc_attrs, segment.ident.span, msg);\n-                }\n-            }\n-        }\n-        for &(n, ty) in self.plugin_attributes {\n-            if attr.path == n {\n-                // Plugins can't gate attributes, so we don't check for it\n-                // unlike the code above; we only use this loop to\n-                // short-circuit to avoid the checks below.\n-                debug!(\"check_attribute: {:?} is registered by a plugin, {:?}\", attr.path, ty);\n-                return;\n-            }\n-        }\n-        if !is_macro && !attr::is_known(attr) {\n-            // Only run the custom attribute lint during regular feature gate\n-            // checking. Macro gating runs before the plugin attributes are\n-            // registered, so we skip this in that case.\n-            let msg = format!(\"the attribute `{}` is currently unknown to the compiler and \\\n-                               may have meaning added to it in the future\", attr.path);\n-            gate_feature!(self, custom_attribute, attr.span, &msg);\n-        }\n-    }\n-}\n-\n-pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n-    let cx = Context { features, parse_sess, plugin_attributes: &[] };\n-    cx.check_attribute(\n-        attr,\n-        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),\n-        true\n-    );\n+crate fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n+    PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n@@ -238,21 +172,21 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n     \"unsized tuple coercion is not stable enough for use and is subject to change\";\n \n struct PostExpansionVisitor<'a> {\n-    context: &'a Context<'a>,\n-    builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,\n+    parse_sess: &'a ParseSess,\n+    features: &'a Features,\n }\n \n macro_rules! gate_feature_post {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {{\n         let (cx, span) = ($cx, $span);\n         if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx.context, $feature, span, $explain)\n+            gate_feature!(cx, $feature, span, $explain)\n         }\n     }};\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n         let (cx, span) = ($cx, $span);\n         if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx.context, $feature, span, $explain, $level)\n+            gate_feature!(cx, $feature, span, $explain, $level)\n         }\n     }}\n }\n@@ -316,58 +250,52 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        let attr_info = attr.ident().and_then(|ident| {\n-            self.builtin_attributes.get(&ident.name).map(|a| *a)\n-        });\n-\n-        // Check for gated attributes.\n-        self.context.check_attribute(attr, attr_info, false);\n-\n-        if attr.check_name(sym::doc) {\n-            if let Some(content) = attr.meta_item_list() {\n-                if content.len() == 1 && content[0].check_name(sym::cfg) {\n-                    gate_feature_post!(&self, doc_cfg, attr.span,\n-                        \"`#[doc(cfg(...))]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::masked)) {\n-                    gate_feature_post!(&self, doc_masked, attr.span,\n-                        \"`#[doc(masked)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::spotlight)) {\n-                    gate_feature_post!(&self, doc_spotlight, attr.span,\n-                        \"`#[doc(spotlight)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::alias)) {\n-                    gate_feature_post!(&self, doc_alias, attr.span,\n-                        \"`#[doc(alias = \\\"...\\\")]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::keyword)) {\n-                    gate_feature_post!(&self, doc_keyword, attr.span,\n-                        \"`#[doc(keyword = \\\"...\\\")]` is experimental\"\n-                    );\n-                }\n-            }\n+        let attr_info =\n+            attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+        // Check feature gates for built-in attributes.\n+        if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n+            gate_feature_fn!(self, has_feature, attr.span, name, descr, GateStrength::Hard);\n         }\n-\n+        // Check input tokens for built-in and key-value attributes.\n         match attr_info {\n             // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n-                check_builtin_attribute(self.context.parse_sess, attr, name, template),\n+            Some((name, _, template, _)) if name != sym::rustc_dummy =>\n+                check_builtin_attribute(self.parse_sess, attr, name, template),\n             _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n-                    attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();\n+                    attr.parse_meta(self.parse_sess).map_err(|mut err| err.emit()).ok();\n                 }\n             }\n         }\n+        // Check unstable flavors of the `#[doc]` attribute.\n+        if attr.check_name(sym::doc) {\n+            for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+                macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {\n+                    $(if nested_meta.check_name(sym::$name) {\n+                        let msg = concat!(\"`#[doc(\", stringify!($name), \")]` is experimental\");\n+                        gate_feature!(self, $feature, attr.span, msg);\n+                    })*\n+                }}\n+\n+                gate_doc!(\n+                    include => external_doc\n+                    cfg => doc_cfg\n+                    masked => doc_masked\n+                    spotlight => doc_spotlight\n+                    alias => doc_alias\n+                    keyword => doc_keyword\n+                );\n+            }\n+        }\n     }\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n         if !name.as_str().is_ascii() {\n             gate_feature_post!(\n                 &self,\n                 non_ascii_idents,\n-                self.context.parse_sess.source_map().def_span(sp),\n+                self.parse_sess.source_map().def_span(sp),\n                 \"non-ascii idents are not fully supported\"\n             );\n         }\n@@ -423,12 +351,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n \n-                let has_feature = self.context.features.arbitrary_enum_discriminant;\n+                let has_feature = self.features.arbitrary_enum_discriminant;\n                 if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n-                    Parser::maybe_report_invalid_custom_discriminants(\n-                        self.context.parse_sess,\n-                        &variants,\n-                    );\n+                    Parser::maybe_report_invalid_custom_discriminants(self.parse_sess, &variants);\n                 }\n             }\n \n@@ -538,7 +463,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Type(..) => {\n                 // To avoid noise about type ascription in common syntax errors, only emit if it\n                 // is the *only* error.\n-                if self.context.parse_sess.span_diagnostic.err_count() == 0 {\n+                if self.parse_sess.span_diagnostic.err_count() == 0 {\n                     gate_feature_post!(&self, type_ascription, e.span,\n                                        \"type ascription is experimental\");\n                 }\n@@ -872,22 +797,17 @@ fn active_features_up_to(edition: Edition) -> impl Iterator<Item=&'static Featur\n }\n \n pub fn check_crate(krate: &ast::Crate,\n-                   sess: &ParseSess,\n+                   parse_sess: &ParseSess,\n                    features: &Features,\n-                   plugin_attributes: &[(Symbol, AttributeType)],\n                    unstable: UnstableFeatures) {\n-    maybe_stage_features(&sess.span_diagnostic, krate, unstable);\n-    let ctx = Context {\n-        features,\n-        parse_sess: sess,\n-        plugin_attributes,\n-    };\n+    maybe_stage_features(&parse_sess.span_diagnostic, krate, unstable);\n+    let mut visitor = PostExpansionVisitor { parse_sess, features };\n \n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => { gate_all!($gate, $gate, $msg); };\n         ($spans:ident, $gate:ident, $msg:literal) => {\n-            for span in &*sess.gated_spans.$spans.borrow() {\n-                gate_feature!(&ctx, $gate, *span, $msg);\n+            for span in &*parse_sess.gated_spans.$spans.borrow() {\n+                gate_feature!(&visitor, $gate, *span, $msg);\n             }\n         }\n     }\n@@ -898,11 +818,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n \n-    let visitor = &mut PostExpansionVisitor {\n-        context: &ctx,\n-        builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,\n-    };\n-    visit::walk_crate(visitor, krate);\n+    visit::walk_crate(&mut visitor, krate);\n }\n \n #[derive(Clone, Copy, Hash)]"}, {"sha": "ca13ab3620508b833cf0724c2d3ecad2d1d0be86", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -58,7 +58,8 @@ pub use builtin_attrs::{\n     deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n };\n pub use check::{\n-    check_attribute, check_crate, get_features, feature_err, emit_feature_err,\n+    check_crate, get_features, feature_err, emit_feature_err,\n     Stability, GateIssue, UnstableFeatures,\n     EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n };\n+crate use check::check_attribute;"}, {"sha": "c95722102d9b61078b16ec752589f99ed3513522", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias = \"...\")]` is experimental\n+#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias)]` is experimental\n pub struct Foo;\n \n fn main() {}"}, {"sha": "540b1f5ccbe43f8e1f5eabc0b13fd021bdea89b8", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(alias = \"...\")]` is experimental\n+error[E0658]: `#[doc(alias)]` is experimental\n   --> $DIR/feature-gate-doc_alias.rs:1:1\n    |\n LL | #[doc(alias = \"foo\")]"}, {"sha": "b12b8a105718290abbf99fe73c670e8364211d7a", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,2 +1,2 @@\n-#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg(...))]` is experimental\n+#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg)]` is experimental\n fn main() {}"}, {"sha": "eaa908d0037aeb5272305a18cb5506dcaee8d5c2", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(cfg(...))]` is experimental\n+error[E0658]: `#[doc(cfg)]` is experimental\n   --> $DIR/feature-gate-doc_cfg.rs:1:1\n    |\n LL | #[doc(cfg(unix))]"}, {"sha": "4bb9a40deb0dd844c71635354d13e4606abb3c46", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword = \"...\")]` is experimental\n+#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword)]` is experimental\n /// wonderful\n mod foo{}\n "}, {"sha": "15a41d9ffa4eaf6f2f8ec552db76d29a9ae3eac5", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(keyword = \"...\")]` is experimental\n+error[E0658]: `#[doc(keyword)]` is experimental\n   --> $DIR/feature-gate-doc_keyword.rs:1:1\n    |\n LL | #[doc(keyword = \"match\")]"}, {"sha": "9d68d3ec4f52a426976b60ea5ffd4f5e66d960b5", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,2 +1,2 @@\n-#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include = \"...\")]` is experimental\n+#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include)]` is experimental\n fn main() {}"}, {"sha": "683c0ad217426b08e31eb5e3ce8cd9c243918d97", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(include = \"...\")]` is experimental\n+error[E0658]: `#[doc(include)]` is experimental\n   --> $DIR/feature-gate-external_doc.rs:1:1\n    |\n LL | #[doc(include=\"asdf.md\")]"}]}