{"sha": "a8cafc61961e968b65d1419ccf997f56d864a2c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2FmYzYxOTYxZTk2OGI2NWQxNDE5Y2NmOTk3ZjU2ZDg2NGEyYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T17:10:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-17T17:10:04Z"}, "message": "Auto merge of #6338 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "b968a3406611dff3b67b4e6f048d1ee45ab729da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b968a3406611dff3b67b4e6f048d1ee45ab729da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8cafc61961e968b65d1419ccf997f56d864a2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8cafc61961e968b65d1419ccf997f56d864a2c2", "html_url": "https://github.com/rust-lang/rust/commit/a8cafc61961e968b65d1419ccf997f56d864a2c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8cafc61961e968b65d1419ccf997f56d864a2c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4f82997a94cc91723daae14889f21428e65472", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f82997a94cc91723daae14889f21428e65472", "html_url": "https://github.com/rust-lang/rust/commit/ad4f82997a94cc91723daae14889f21428e65472"}, {"sha": "bf2d31d0533ee03a2c1e91f74780ea779e8b330c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2d31d0533ee03a2c1e91f74780ea779e8b330c", "html_url": "https://github.com/rust-lang/rust/commit/bf2d31d0533ee03a2c1e91f74780ea779e8b330c"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "bc2b2904698c7f7b360f8c3707fc4f5b0cb15100", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 match typ.kind() {\n                     ty::FnDef(..) | ty::FnPtr(_) => {\n                         let sig = typ.fn_sig(self.cx.tcx);\n-                        if let ty::Never = self.cx.tcx.erase_late_bound_regions(&sig).output().kind() {\n+                        if let ty::Never = self.cx.tcx.erase_late_bound_regions(sig).output().kind() {\n                             self.report_diverging_sub_expr(e);\n                         }\n                     },"}, {"sha": "ff0a35324652a12c9a9c814fedbd4cb9ccf97f42", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -1615,7 +1615,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n             let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let method_sig = cx.tcx.fn_sig(method_def_id);\n-            let method_sig = cx.tcx.erase_late_bound_regions(&method_sig);\n+            let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n \n             let first_arg_ty = &method_sig.inputs().iter().next();\n \n@@ -2674,7 +2674,7 @@ fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n                     ty::Closure(_, substs) => substs.as_closure().sig(),\n                     _ => map_closure_ty.fn_sig(cx.tcx),\n                 };\n-                let map_closure_return_ty = cx.tcx.erase_late_bound_regions(&map_closure_sig.output());\n+                let map_closure_return_ty = cx.tcx.erase_late_bound_regions(map_closure_sig.output());\n                 is_type_diagnostic_item(cx, map_closure_return_ty, sym::option_type)\n             },\n             _ => false,"}, {"sha": "11044e0c2fb487bab154c72fac101619445a9cea", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -89,11 +89,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::\n     for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {\n         check_ty(cx, hir_ty.span, ty);\n     }\n-    check_ty(\n-        cx,\n-        decl.output.span(),\n-        cx.tcx.erase_late_bound_regions(&fn_sig.output()),\n-    );\n+    check_ty(cx, decl.output.span(), cx.tcx.erase_late_bound_regions(fn_sig.output()));\n }\n \n // We want to lint 1. sets or maps with 2. not immutable key types and 3. no unerased"}, {"sha": "532c0266946b3f71b183c5361733e812fd588440", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         };\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same..."}, {"sha": "f03facc235e28f748b2297345b555e9c9f1b192d", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> PassByRefOrValue {\n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n "}, {"sha": "602facbe062ac31ccfa4fa27d80def21317dd39a", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -563,7 +563,9 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n struct ContainsRegion;\n \n impl TypeVisitor<'_> for ContainsRegion {\n-    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<()> {\n+    type BreakTy = ();\n+\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::BREAK\n     }\n }"}, {"sha": "b0909f731774069d71696d1ff782807577b276c7", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -491,7 +491,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                                     Applicability::Unspecified,\n                                 );\n                             } else {\n-                                if (cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty))\n+                                if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n                                     && !const_context {\n                                     span_lint_and_then(\n                                         cx,"}, {"sha": "ade5fff5ffc0606344a613d6f2e7191717fe4b41", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -43,7 +43,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     for (pred, _) in generics.predicates {\n         if_chain! {\n             if let PredicateAtom::Trait(poly_trait_pred, _) = pred.skip_binders();\n-            let trait_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(poly_trait_pred));\n+            let trait_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n             then {\n@@ -61,7 +61,7 @@ fn get_projection_pred<'tcx>(\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n         if let ty::PredicateAtom::Projection(proj_pred) = proj_pred.skip_binders() {\n-            let projection_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(proj_pred));\n+            let projection_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(proj_pred));\n             if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n                 return Some(projection_pred);\n             }\n@@ -81,7 +81,7 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n             get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().partial_ord_trait());\n         // Trying to call erase_late_bound_regions on fn_sig.inputs() gives the following error\n         // The trait `rustc::ty::TypeFoldable<'_>` is not implemented for `&[&rustc::ty::TyS<'_>]`\n-        let inputs_output = cx.tcx.erase_late_bound_regions(&fn_sig.inputs_and_output());\n+        let inputs_output = cx.tcx.erase_late_bound_regions(fn_sig.inputs_and_output());\n         inputs_output\n             .iter()\n             .rev()\n@@ -112,7 +112,7 @@ fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Spa\n         if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n-        let ty = cx.tcx.erase_late_bound_regions(&ret_ty);\n+        let ty = cx.tcx.erase_late_bound_regions(ret_ty);\n         if ty.is_unit();\n         then {\n             if_chain! {"}, {"sha": "5ac4797680bc167a38890abc5eeacdfeed9738aa", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -123,7 +123,7 @@ fn check_trait_method_impl_decl<'tcx>(\n         .expect(\"impl method matches a trait method\");\n \n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n-    let trait_method_sig = cx.tcx.erase_late_bound_regions(&trait_method_sig);\n+    let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n     let output_hir_ty = if let FnRetTy::Return(ty) = &impl_decl.output {\n         Some(&**ty)"}, {"sha": "9da2822f9b455cd90d63d3e4684e3bfb22218ecb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8cafc61961e968b65d1419ccf997f56d864a2c2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a8cafc61961e968b65d1419ccf997f56d864a2c2", "patch": "@@ -363,7 +363,7 @@ pub fn implements_trait<'tcx>(\n     if ty.has_infer_types() {\n         return false;\n     }\n-    let ty = cx.tcx.erase_regions(&ty);\n+    let ty = cx.tcx.erase_regions(ty);\n     let ty_params = cx.tcx.mk_substs(ty_params.iter());\n     cx.tcx.type_implements_trait((trait_id, ty, ty_params, cx.param_env))\n }\n@@ -923,7 +923,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n     let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n-    cx.tcx.erase_late_bound_regions(&ret_ty)\n+    cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n@@ -1256,7 +1256,7 @@ pub fn match_function_call<'tcx>(\n pub fn is_normalizable<'tcx>(cx: &LateContext<'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n     cx.tcx.infer_ctxt().enter(|infcx| {\n         let cause = rustc_middle::traits::ObligationCause::dummy();\n-        infcx.at(&cause, param_env).normalize(&ty).is_ok()\n+        infcx.at(&cause, param_env).normalize(ty).is_ok()\n     })\n }\n "}]}