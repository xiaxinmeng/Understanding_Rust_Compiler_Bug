{"sha": "6bb2bda23eb0ced0375ebd119454f8e95dc36db8", "node_id": "C_kwDOAAsO6NoAKDZiYjJiZGEyM2ViMGNlZDAzNzVlYmQxMTk0NTRmOGU5NWRjMzZkYjg", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-19T20:24:09Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-19T20:24:09Z"}, "message": "Fix stack overflow in recursive AST walk in early lint\n\nThe src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs test case\nadded to verify https://github.com/rust-lang/rust/issues/74564 still\ncrashes with a stack overflow on s390x-ibm-linux.\n\nSymptom is a very deep recursion in compiler/rustc_lint/src/early.rs:\n    fn visit_expr(&mut self, e: &'a ast::Expr) {\n        self.with_lint_attrs(e.id, &e.attrs, |cx| {\n            lint_callback!(cx, check_expr, e);\n            ast_visit::walk_expr(cx, e);\n        })\n    }\n(where walk_expr recursively calls back into visit_expr).  The crash\nhappens at a nesting depth of over 17000 stack frames when using the\ndefault 8 MB stack size on s390x.\n\nThis patch fixes the problem by adding a ensure_sufficient_stack\ncall to the with_lint_attrs routine (which also should take care\nof all the other mutually recursive visitors here).\n\nFixes part of https://github.com/rust-lang/rust/issues/105383.", "tree": {"sha": "065debed63095b384329af8030eb28c601fd24ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065debed63095b384329af8030eb28c601fd24ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb2bda23eb0ced0375ebd119454f8e95dc36db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb2bda23eb0ced0375ebd119454f8e95dc36db8", "html_url": "https://github.com/rust-lang/rust/commit/6bb2bda23eb0ced0375ebd119454f8e95dc36db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb2bda23eb0ced0375ebd119454f8e95dc36db8/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4653c93e4442d88bf3278067183c8fdc0be74a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "html_url": "https://github.com/rust-lang/rust/commit/4653c93e4442d88bf3278067183c8fdc0be74a1f"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "a8c32b54355b56980a0b9c3277d834ea53a81eaf", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb2bda23eb0ced0375ebd119454f8e95dc36db8/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb2bda23eb0ced0375ebd119454f8e95dc36db8/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=6bb2bda23eb0ced0375ebd119454f8e95dc36db8", "patch": "@@ -19,6 +19,7 @@ use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self as ast_visit, Visitor};\n use rustc_ast::{self as ast, walk_list, HasAttrs};\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_middle::ty::RegisteredTools;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n@@ -71,7 +72,7 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n         self.inlined_check_id(id);\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n         lint_callback!(self, enter_lint_attrs, attrs);\n-        f(self);\n+        ensure_sufficient_stack(|| f(self));\n         debug!(\"early context: exit_attrs({:?})\", attrs);\n         lint_callback!(self, exit_lint_attrs, attrs);\n         self.context.builder.pop(push);"}]}