{"sha": "44be933ff7cd85f5b709d8c63ffef022e8918c8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YmU5MzNmZjdjZDg1ZjViNzA5ZDhjNjNmZmVmMDIyZTg5MThjOGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:31Z"}, "message": "Rollup merge of #73963 - hellow554:unsafe_path, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/path.rs\n\nThe libstd/path.rs part of #73904 . Wraps the two calls to an unsafe fn Initializer::nop() in an unsafe block.", "tree": {"sha": "ab6a8f55f5ca393698e1593a34ff97ab16a9c3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab6a8f55f5ca393698e1593a34ff97ab16a9c3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44be933ff7cd85f5b709d8c63ffef022e8918c8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdO0CRBK7hj4Ov3rIwAAdHIIALK+BJ+zeuJXMNlZqYsnjRcV\ndGzSaf6+1CwrzrlnLU6AcQhY5VeLxyMrDZXwxB8MgEYAV6ebHx5TgXPe4TpSHZes\nc/etRD2Lgxq9sWF05rkcwYhm5LGrKLw9i4bWldXgcScdN+k7ESQUNM0x3GV0oGlm\nIqjc9k8UJF+5X4RxxiN1Z8xeNMqkuZEMLCLyPGr4uOnvzLOtW77lUZp3Ogv/gu/8\nvdli1ZzqPiq1WF7AG4OysUeMR067XaKKerfu0hnKnObN7teBqgPCkQQWGMTQ2aHf\nRuSUnLLh/nGmSlA/XI9crZBnDcGf+yKLz0B3/AMxKb18YAlRZLMhuED+30IFjhE=\n=gOwy\n-----END PGP SIGNATURE-----\n", "payload": "tree ab6a8f55f5ca393698e1593a34ff97ab16a9c3e7\nparent 4e8a8b49ae57233bc196f3529f5184bc208c3034\nparent 00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c\nauthor Ralf Jung <post@ralfj.de> 1600508851 +0200\ncommitter GitHub <noreply@github.com> 1600508851 +0200\n\nRollup merge of #73963 - hellow554:unsafe_path, r=Mark-Simulacrum\n\ndeny(unsafe_op_in_unsafe_fn) in libstd/path.rs\n\nThe libstd/path.rs part of #73904 . Wraps the two calls to an unsafe fn Initializer::nop() in an unsafe block.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44be933ff7cd85f5b709d8c63ffef022e8918c8b", "html_url": "https://github.com/rust-lang/rust/commit/44be933ff7cd85f5b709d8c63ffef022e8918c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44be933ff7cd85f5b709d8c63ffef022e8918c8b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8a8b49ae57233bc196f3529f5184bc208c3034", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8a8b49ae57233bc196f3529f5184bc208c3034", "html_url": "https://github.com/rust-lang/rust/commit/4e8a8b49ae57233bc196f3529f5184bc208c3034"}, {"sha": "00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c", "html_url": "https://github.com/rust-lang/rust/commit/00d537dcd03f9ff5ebdf8b86e039dbdb0a7f850c"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "b83c1e9628dc646f482366862ebbc4a4ebe86f4e", "filename": "library/std/src/path.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/44be933ff7cd85f5b709d8c63ffef022e8918c8b/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44be933ff7cd85f5b709d8c63ffef022e8918c8b/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=44be933ff7cd85f5b709d8c63ffef022e8918c8b", "patch": "@@ -58,6 +58,7 @@\n //! [`push`]: PathBuf::push\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n #[cfg(test)]\n mod tests;\n@@ -294,7 +295,8 @@ fn os_str_as_u8_slice(s: &OsStr) -> &[u8] {\n     unsafe { &*(s as *const OsStr as *const [u8]) }\n }\n unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n-    &*(s as *const [u8] as *const OsStr)\n+    // SAFETY: see the comment of `os_str_as_u8_slice`\n+    unsafe { &*(s as *const [u8] as *const OsStr) }\n }\n \n // Detect scheme on Redox\n@@ -314,24 +316,21 @@ fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {\n \n // basic workhorse for splitting stem and extension\n fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n-    unsafe {\n-        if os_str_as_u8_slice(file) == b\"..\" {\n-            return (Some(file), None);\n-        }\n-\n-        // The unsafety here stems from converting between &OsStr and &[u8]\n-        // and back. This is safe to do because (1) we only look at ASCII\n-        // contents of the encoding and (2) new &OsStr values are produced\n-        // only from ASCII-bounded slices of existing &OsStr values.\n+    if os_str_as_u8_slice(file) == b\"..\" {\n+        return (Some(file), None);\n+    }\n \n-        let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');\n-        let after = iter.next();\n-        let before = iter.next();\n-        if before == Some(b\"\") {\n-            (Some(file), None)\n-        } else {\n-            (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s)))\n-        }\n+    // The unsafety here stems from converting between &OsStr and &[u8]\n+    // and back. This is safe to do because (1) we only look at ASCII\n+    // contents of the encoding and (2) new &OsStr values are produced\n+    // only from ASCII-bounded slices of existing &OsStr values.\n+    let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');\n+    let after = iter.next();\n+    let before = iter.next();\n+    if before == Some(b\"\") {\n+        (Some(file), None)\n+    } else {\n+        unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }\n     }\n }\n \n@@ -1702,7 +1701,7 @@ impl Path {\n     // The following (private!) function allows construction of a path from a u8\n     // slice, which is only safe when it is known to follow the OsStr encoding.\n     unsafe fn from_u8_slice(s: &[u8]) -> &Path {\n-        Path::new(u8_slice_as_os_str(s))\n+        unsafe { Path::new(u8_slice_as_os_str(s)) }\n     }\n     // The following (private!) function reveals the byte encoding used for OsStr.\n     fn as_u8_slice(&self) -> &[u8] {"}]}