{"sha": "2760f87e3a8433c90a9402418f6f802ca5821d4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjBmODdlM2E4NDMzYzkwYTk0MDI0MThmNmY4MDJjYTU4MjFkNGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-31T15:11:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-31T15:11:03Z"}, "message": "const-stabilize const_int_ops + reverse_bits", "tree": {"sha": "de57d2f54f2cbc83839103b4f5a5221b51fa4bb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de57d2f54f2cbc83839103b4f5a5221b51fa4bb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2760f87e3a8433c90a9402418f6f802ca5821d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2760f87e3a8433c90a9402418f6f802ca5821d4d", "html_url": "https://github.com/rust-lang/rust/commit/2760f87e3a8433c90a9402418f6f802ca5821d4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2760f87e3a8433c90a9402418f6f802ca5821d4d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50152d24ca09e80e8bf9314b3b7864d3bdfb9a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/50152d24ca09e80e8bf9314b3b7864d3bdfb9a16", "html_url": "https://github.com/rust-lang/rust/commit/50152d24ca09e80e8bf9314b3b7864d3bdfb9a16"}], "stats": {"total": 306, "additions": 163, "deletions": 143}, "files": [{"sha": "40df2db065dfd191ea4d43fb099406172c6fff31", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -1343,7 +1343,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::ctlz;\n     ///\n     /// let x = 0b0001_1100_u8;\n-    /// let num_leading = unsafe { ctlz(x) };\n+    /// let num_leading = ctlz(x);\n     /// assert_eq!(num_leading, 3);\n     /// ```\n     ///\n@@ -1355,7 +1355,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::ctlz;\n     ///\n     /// let x = 0u16;\n-    /// let num_leading = unsafe { ctlz(x) };\n+    /// let num_leading = ctlz(x);\n     /// assert_eq!(num_leading, 16);\n     /// ```\n     pub fn ctlz<T>(x: T) -> T;\n@@ -1386,7 +1386,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::cttz;\n     ///\n     /// let x = 0b0011_1000_u8;\n-    /// let num_trailing = unsafe { cttz(x) };\n+    /// let num_trailing = cttz(x);\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n     ///\n@@ -1398,7 +1398,7 @@ extern \"rust-intrinsic\" {\n     /// use std::intrinsics::cttz;\n     ///\n     /// let x = 0u16;\n-    /// let num_trailing = unsafe { cttz(x) };\n+    /// let num_trailing = cttz(x);\n     /// assert_eq!(num_trailing, 16);\n     /// ```\n     pub fn cttz<T>(x: T) -> T;"}, {"sha": "49cc5b6c06f41cf943a82c579d6abdb8772b0878", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -71,7 +71,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n-#![feature(const_int_ops)]\n+#![cfg_attr(stage0, feature(const_int_ops))]\n #![feature(const_fn_union)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]"}, {"sha": "7ff04410516a3e61563fad4bbdd24bfa678c7e07", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -275,7 +275,7 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -291,7 +291,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -312,7 +312,7 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -333,7 +333,7 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -404,7 +404,7 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 (self as $UnsignedT).swap_bytes() as Self\n@@ -454,7 +454,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -488,7 +488,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -522,7 +522,7 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -556,7 +556,7 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2234,10 +2234,13 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::ctpop(self as $ActualT) as u32 }\n             }\n         }\n \n@@ -2252,7 +2255,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2272,10 +2275,13 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::ctlz(self as $ActualT) as u32 }\n             }\n         }\n \n@@ -2293,10 +2299,13 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::cttz(self) as u32 }\n+                #[cfg(not(stage0))]\n+                { intrinsics::cttz(self) as u32 }\n             }\n         }\n \n@@ -2370,10 +2379,13 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+                #[cfg(not(stage0))]\n+                { intrinsics::bswap(self as $ActualT) as Self }\n             }\n         }\n \n@@ -2393,10 +2405,13 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_conversion\"))]\n             #[inline]\n             pub const fn reverse_bits(self) -> Self {\n+                #[cfg(stage0)]\n                 unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+                #[cfg(not(stage0))]\n+                { intrinsics::bitreverse(self as $ActualT) as Self }\n             }\n         }\n \n@@ -2420,7 +2435,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -2454,7 +2469,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2488,7 +2503,7 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -2522,7 +2537,7 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2957,8 +2972,8 @@ $EndFeature, \"\n             unsafe {\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n-                #[cfg(not(stage0))]\n-                intrinsics::overflowing_mul(self, rhs)\n+            #[cfg(not(stage0))]\n+            intrinsics::overflowing_mul(self, rhs)\n         }\n \n         doc_comment! {"}, {"sha": "33f309c995702b1756ee31def616abe8a0075838", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -404,6 +404,11 @@ fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n         | \"unchecked_shr\" // ~> .wrapping_shr\n         | \"rotate_left\" // ~> .rotate_left\n         | \"rotate_right\" // ~> .rotate_right\n+        | \"ctpop\" // ~> .count_ones\n+        | \"ctlz\" // ~> .leading_zeros\n+        | \"cttz\" // ~> .trailing_zeros\n+        | \"bswap\" // ~> .swap_bytes\n+        | \"bitreverse\" // ~> .reverse_bits\n         => true,\n         _ => false,\n     }"}, {"sha": "dffe215b02ade9b30e6776b6b70d5bd5865552e5", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -71,7 +71,8 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n     match intrinsic {\n         \"size_of\" | \"min_align_of\" | \"needs_drop\" |\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n-        \"rotate_left\" | \"rotate_right\"\n+        \"rotate_left\" | \"rotate_right\" |\n+        \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" | \"bitreverse\"\n         => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }"}, {"sha": "82cee70232aa7cb3b2a14bd118bc43907514ec7c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -242,7 +242,7 @@\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]\n-#![feature(const_int_ops)]\n+#![cfg_attr(stage0, feature(const_int_ops))]\n #![feature(const_ip)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_cstr_unchecked)]"}, {"sha": "19d65860179b2628a598479fe69bf664bdbeabd5", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_int_conversion, const_int_ops, reverse_bits)]\n+#![feature(const_int_conversion, reverse_bits)]\n \n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n@@ -21,4 +21,3 @@ fn main() {\n     assert_eq!(TO_LE_BYTES, ident([0x78, 0x56, 0x34, 0x12]));\n     assert_eq!(TO_NE_BYTES, ident([0x80, 0, 0, 0]));\n }\n-"}, {"sha": "cbe6d864c9c3a7eb35be33cb0679a3a2759e9546", "filename": "src/test/run-pass/consts/const-endianess.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-endianess.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_int_ops)]\n #![feature(test)]\n \n extern crate test;\n@@ -8,7 +7,6 @@ use test::black_box as b;\n const BE_U32: u32 = 55u32.to_be();\n const LE_U32: u32 = 55u32.to_le();\n \n-\n fn main() {\n     assert_eq!(BE_U32, b(55u32).to_be());\n     assert_eq!(LE_U32, b(55u32).to_le());"}, {"sha": "3145c21acc9889b5e7c0a221b1166b288b292e3a", "filename": "src/test/run-pass/ctfe/bswap-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fbswap-const.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -4,9 +4,9 @@\n \n use std::intrinsics;\n \n-const SWAPPED_U8: u8 = unsafe { intrinsics::bswap(0x12_u8) };\n-const SWAPPED_U16: u16 = unsafe { intrinsics::bswap(0x12_34_u16) };\n-const SWAPPED_I32: i32 = unsafe { intrinsics::bswap(0x12_34_56_78_i32) };\n+const SWAPPED_U8: u8 = intrinsics::bswap(0x12_u8);\n+const SWAPPED_U16: u16 = intrinsics::bswap(0x12_34_u16);\n+const SWAPPED_I32: i32 = intrinsics::bswap(0x12_34_56_78_i32);\n \n fn main() {\n     assert_eq!(SWAPPED_U8, 0x12);"}, {"sha": "0154f0499502959fe95372e12aa730acd6f61217", "filename": "src/test/run-pass/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 109, "deletions": 107, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsics-integer.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -16,63 +16,63 @@ mod rusti {\n }\n \n pub fn main() {\n-    unsafe {\n-        use rusti::*;\n-\n-        assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n-        assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n-        assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n-        assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n-        assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n-\n-        assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n-        assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n-        assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n-        assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n-        assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n-\n-        assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n-        assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n-        assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n-        assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n-        assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n-\n-        assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n-        assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n-        assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n-        assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n-        assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n-\n-        assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n-        assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n-        assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n-        assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n-        assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n-\n-        assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n-        assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n-        assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n-        assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n-        assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n-\n-        assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n-        assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n-        assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n-        assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n-        assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n-\n-        assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n-        assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n-        assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n-        assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n-        assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n-\n-        assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n-        assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n-        assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n-        assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n-        assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n+    use rusti::*;\n+\n+    assert_eq!(ctpop(0u8), 0); assert_eq!(ctpop(0i8), 0);\n+    assert_eq!(ctpop(0u16), 0); assert_eq!(ctpop(0i16), 0);\n+    assert_eq!(ctpop(0u32), 0); assert_eq!(ctpop(0i32), 0);\n+    assert_eq!(ctpop(0u64), 0); assert_eq!(ctpop(0i64), 0);\n+    assert_eq!(ctpop(0u128), 0); assert_eq!(ctpop(0i128), 0);\n+\n+    assert_eq!(ctpop(1u8), 1); assert_eq!(ctpop(1i8), 1);\n+    assert_eq!(ctpop(1u16), 1); assert_eq!(ctpop(1i16), 1);\n+    assert_eq!(ctpop(1u32), 1); assert_eq!(ctpop(1i32), 1);\n+    assert_eq!(ctpop(1u64), 1); assert_eq!(ctpop(1i64), 1);\n+    assert_eq!(ctpop(1u128), 1); assert_eq!(ctpop(1i128), 1);\n+\n+    assert_eq!(ctpop(10u8), 2); assert_eq!(ctpop(10i8), 2);\n+    assert_eq!(ctpop(10u16), 2); assert_eq!(ctpop(10i16), 2);\n+    assert_eq!(ctpop(10u32), 2); assert_eq!(ctpop(10i32), 2);\n+    assert_eq!(ctpop(10u64), 2); assert_eq!(ctpop(10i64), 2);\n+    assert_eq!(ctpop(10u128), 2); assert_eq!(ctpop(10i128), 2);\n+\n+    assert_eq!(ctpop(100u8), 3); assert_eq!(ctpop(100i8), 3);\n+    assert_eq!(ctpop(100u16), 3); assert_eq!(ctpop(100i16), 3);\n+    assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n+    assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n+    assert_eq!(ctpop(100u128), 3); assert_eq!(ctpop(100i128), 3);\n+\n+    assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n+    assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n+    assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n+    assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n+    assert_eq!(ctpop(-1i128 as u128), 128); assert_eq!(ctpop(-1i128), 128);\n+\n+    assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n+    assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n+    assert_eq!(ctlz(0u32), 32); assert_eq!(ctlz(0i32), 32);\n+    assert_eq!(ctlz(0u64), 64); assert_eq!(ctlz(0i64), 64);\n+    assert_eq!(ctlz(0u128), 128); assert_eq!(ctlz(0i128), 128);\n+\n+    assert_eq!(ctlz(1u8), 7); assert_eq!(ctlz(1i8), 7);\n+    assert_eq!(ctlz(1u16), 15); assert_eq!(ctlz(1i16), 15);\n+    assert_eq!(ctlz(1u32), 31); assert_eq!(ctlz(1i32), 31);\n+    assert_eq!(ctlz(1u64), 63); assert_eq!(ctlz(1i64), 63);\n+    assert_eq!(ctlz(1u128), 127); assert_eq!(ctlz(1i128), 127);\n+\n+    assert_eq!(ctlz(10u8), 4); assert_eq!(ctlz(10i8), 4);\n+    assert_eq!(ctlz(10u16), 12); assert_eq!(ctlz(10i16), 12);\n+    assert_eq!(ctlz(10u32), 28); assert_eq!(ctlz(10i32), 28);\n+    assert_eq!(ctlz(10u64), 60); assert_eq!(ctlz(10i64), 60);\n+    assert_eq!(ctlz(10u128), 124); assert_eq!(ctlz(10i128), 124);\n+\n+    assert_eq!(ctlz(100u8), 1); assert_eq!(ctlz(100i8), 1);\n+    assert_eq!(ctlz(100u16), 9); assert_eq!(ctlz(100i16), 9);\n+    assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n+    assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n+    assert_eq!(ctlz(100u128), 121); assert_eq!(ctlz(100i128), 121);\n \n+    unsafe {\n         assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n         assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n         assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n@@ -90,37 +90,39 @@ pub fn main() {\n         assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n         assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n         assert_eq!(ctlz_nonzero(100u128), 121); assert_eq!(ctlz_nonzero(100i128), 121);\n+    }\n \n-        assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n-        assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n-        assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n-        assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n-        assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n-\n-        assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n-        assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n-        assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n-        assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n-        assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n-\n-        assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n-        assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n-        assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n-        assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n-        assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n-\n-        assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n-        assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n-        assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n-        assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n-        assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n-\n-        assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n-        assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n-        assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n-        assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n-        assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n+    assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n+    assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n+    assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n+    assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n+    assert_eq!(cttz(-1i128 as u128), 0); assert_eq!(cttz(-1i128), 0);\n+\n+    assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n+    assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);\n+    assert_eq!(cttz(0u32), 32); assert_eq!(cttz(0i32), 32);\n+    assert_eq!(cttz(0u64), 64); assert_eq!(cttz(0i64), 64);\n+    assert_eq!(cttz(0u128), 128); assert_eq!(cttz(0i128), 128);\n+\n+    assert_eq!(cttz(1u8), 0); assert_eq!(cttz(1i8), 0);\n+    assert_eq!(cttz(1u16), 0); assert_eq!(cttz(1i16), 0);\n+    assert_eq!(cttz(1u32), 0); assert_eq!(cttz(1i32), 0);\n+    assert_eq!(cttz(1u64), 0); assert_eq!(cttz(1i64), 0);\n+    assert_eq!(cttz(1u128), 0); assert_eq!(cttz(1i128), 0);\n+\n+    assert_eq!(cttz(10u8), 1); assert_eq!(cttz(10i8), 1);\n+    assert_eq!(cttz(10u16), 1); assert_eq!(cttz(10i16), 1);\n+    assert_eq!(cttz(10u32), 1); assert_eq!(cttz(10i32), 1);\n+    assert_eq!(cttz(10u64), 1); assert_eq!(cttz(10i64), 1);\n+    assert_eq!(cttz(10u128), 1); assert_eq!(cttz(10i128), 1);\n+\n+    assert_eq!(cttz(100u8), 2); assert_eq!(cttz(100i8), 2);\n+    assert_eq!(cttz(100u16), 2); assert_eq!(cttz(100i16), 2);\n+    assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n+    assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n+    assert_eq!(cttz(100u128), 2); assert_eq!(cttz(100i128), 2);\n \n+    unsafe {\n         assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n         assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n         assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n@@ -144,27 +146,27 @@ pub fn main() {\n         assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n         assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n         assert_eq!(cttz_nonzero(100u128), 2); assert_eq!(cttz_nonzero(100i128), 2);\n-\n-        assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n-        assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n-        assert_eq!(bswap(0x0A0Bu16), 0x0B0A);\n-        assert_eq!(bswap(0x0A0Bi16), 0x0B0A);\n-        assert_eq!(bswap(0x0ABBCC0Du32), 0x0DCCBB0A);\n-        assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n-        assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n-        assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n-        assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n-        assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n-\n-        assert_eq!(bitreverse(0x0Au8), 0x50);\n-        assert_eq!(bitreverse(0x0Ai8), 0x50);\n-        assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n-        assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n-        assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n-        assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n-        assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n-        assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n-        assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n-        assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n     }\n+\n+    assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n+    assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n+    assert_eq!(bswap(0x0A0Bu16), 0x0B0A);\n+    assert_eq!(bswap(0x0A0Bi16), 0x0B0A);\n+    assert_eq!(bswap(0x0ABBCC0Du32), 0x0DCCBB0A);\n+    assert_eq!(bswap(0x0ABBCC0Di32), 0x0DCCBB0A);\n+    assert_eq!(bswap(0x0122334455667708u64), 0x0877665544332201);\n+    assert_eq!(bswap(0x0122334455667708i64), 0x0877665544332201);\n+    assert_eq!(bswap(0x0122334455667708u128), 0x08776655443322010000000000000000);\n+    assert_eq!(bswap(0x0122334455667708i128), 0x08776655443322010000000000000000);\n+\n+    assert_eq!(bitreverse(0x0Au8), 0x50);\n+    assert_eq!(bitreverse(0x0Ai8), 0x50);\n+    assert_eq!(bitreverse(0x0A0Cu16), 0x3050);\n+    assert_eq!(bitreverse(0x0A0Ci16), 0x3050);\n+    assert_eq!(bitreverse(0x0ABBCC0Eu32), 0x7033DD50);\n+    assert_eq!(bitreverse(0x0ABBCC0Ei32), 0x7033DD50);\n+    assert_eq!(bitreverse(0x0122334455667708u64), 0x10EE66AA22CC4480);\n+    assert_eq!(bitreverse(0x0122334455667708i64), 0x10EE66AA22CC4480);\n+    assert_eq!(bitreverse(0x0122334455667708u128), 0x10EE66AA22CC44800000000000000000);\n+    assert_eq!(bitreverse(0x0122334455667708i128), 0x10EE66AA22CC44800000000000000000);\n }"}, {"sha": "a29723f34b4326239c944eed987d1ae385de3020", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2760f87e3a8433c90a9402418f6f802ca5821d4d/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs?ref=2760f87e3a8433c90a9402418f6f802ca5821d4d", "patch": "@@ -14,7 +14,7 @@ use std::intrinsics;\n #[derive(Copy, Clone)]\n pub struct Foo(i64);\n \n-pub unsafe fn test_cttz(v: Foo) -> Foo {\n+pub fn test_cttz(v: Foo) -> Foo {\n     intrinsics::cttz(v)\n     //~^ ERROR `cttz` intrinsic: expected basic integer type, found `Foo`\n }"}]}