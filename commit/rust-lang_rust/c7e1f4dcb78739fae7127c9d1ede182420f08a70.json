{"sha": "c7e1f4dcb78739fae7127c9d1ede182420f08a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTFmNGRjYjc4NzM5ZmFlNzEyN2M5ZDFlZGUxODI0MjBmMDhhNzA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:41:29Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-24T07:41:29Z"}, "message": "HIR: remove the NodeId get_parent_node, HirIdify is_argument", "tree": {"sha": "8e87d130ace5ea8bf306ef0eaba6e70c84ec0558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e87d130ace5ea8bf306ef0eaba6e70c84ec0558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e1f4dcb78739fae7127c9d1ede182420f08a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e1f4dcb78739fae7127c9d1ede182420f08a70", "html_url": "https://github.com/rust-lang/rust/commit/c7e1f4dcb78739fae7127c9d1ede182420f08a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e1f4dcb78739fae7127c9d1ede182420f08a70/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ed21e83c9f42203cfe06d41eab3f160bd13518", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ed21e83c9f42203cfe06d41eab3f160bd13518", "html_url": "https://github.com/rust-lang/rust/commit/85ed21e83c9f42203cfe06d41eab3f160bd13518"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "b31941f28392dbae9e187adf9aacd855a1b19373", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c7e1f4dcb78739fae7127c9d1ede182420f08a70", "patch": "@@ -615,23 +615,16 @@ impl<'hir> Map<'hir> {\n         result\n     }\n \n-    /// Similar to `get_parent`; returns the parent node-ID, or just `hir_id` if there\n-    /// is no parent. Note that the parent may be `CRATE_NODE_ID`, which is not itself\n+    /// Similar to `get_parent`; returns the parent HIR Id, or just `hir_id` if there\n+    /// is no parent. Note that the parent may be `CRATE_HIR_ID`, which is not itself\n     /// present in the map, so passing the return value of `get_parent_node` to\n     /// `get` may in fact panic.\n-    /// This function returns the immediate parent in the AST, whereas `get_parent`\n+    /// This function returns the immediate parent in the HIR, whereas `get_parent`\n     /// returns the enclosing item. Note that this might not be the actual parent\n-    /// node in the AST -- some kinds of nodes are not in the map and these will\n+    /// node in the HIR -- some kinds of nodes are not in the map and these will\n     /// never appear as the parent node. Thus, you can always walk the parent nodes\n-    /// from a node to the root of the AST (unless you get back the same ID here,\n+    /// from a node to the root of the HIR (unless you get back the same ID here,\n     /// which can happen if the ID is not in the map itself or is just weird).\n-    pub fn get_parent_node(&self, id: NodeId) -> NodeId {\n-        let hir_id = self.node_to_hir_id(id);\n-        let parent_hir_id = self.get_parent_node_by_hir_id(hir_id);\n-        self.hir_to_node_id(parent_hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_parent_node_by_hir_id(&self, hir_id: HirId) -> HirId {\n         if self.dep_graph.is_fully_enabled() {\n             let hir_id_owner = hir_id.owner;\n@@ -646,12 +639,12 @@ impl<'hir> Map<'hir> {\n \n     /// Check if the node is an argument. An argument is a local variable whose\n     /// immediate parent is an item or a closure.\n-    pub fn is_argument(&self, id: NodeId) -> bool {\n-        match self.find(id) {\n+    pub fn is_argument(&self, id: HirId) -> bool {\n+        match self.find_by_hir_id(id) {\n             Some(Node::Binding(_)) => (),\n             _ => return false,\n         }\n-        match self.find(self.get_parent_node(id)) {\n+        match self.find_by_hir_id(self.get_parent_node_by_hir_id(id)) {\n             Some(Node::Item(_)) |\n             Some(Node::TraitItem(_)) |\n             Some(Node::ImplItem(_)) => true,"}, {"sha": "e7253a73bd4180a4469c85d203be2a1c85fc2309", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c7e1f4dcb78739fae7127c9d1ede182420f08a70", "patch": "@@ -1526,7 +1526,7 @@ impl<'tcx> cmt_<'tcx> {\n                 \"non-place\".into()\n             }\n             Categorization::Local(vid) => {\n-                if tcx.hir().is_argument(tcx.hir().hir_to_node_id(vid)) {\n+                if tcx.hir().is_argument(vid) {\n                     \"argument\"\n                 } else {\n                     \"local variable\""}, {"sha": "edee8eeaeb30c4a064507a397626bb289b446d02", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e1f4dcb78739fae7127c9d1ede182420f08a70/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c7e1f4dcb78739fae7127c9d1ede182420f08a70", "patch": "@@ -621,7 +621,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Node::PathSegment(seg) => {\n                 match seg.res {\n                     Some(res) if res != Res::Err => res,\n-                    _ => self.get_path_res(self.tcx.hir().get_parent_node(id)),\n+                    _ => {\n+                        let parent_node = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                        self.get_path_res(self.tcx.hir().hir_to_node_id(parent_node))\n+                    },\n                 }\n             }\n "}]}