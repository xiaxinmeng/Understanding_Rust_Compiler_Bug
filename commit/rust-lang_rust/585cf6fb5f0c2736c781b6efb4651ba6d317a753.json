{"sha": "585cf6fb5f0c2736c781b6efb4651ba6d317a753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWNmNmZiNWYwYzI3MzZjNzgxYjZlZmI0NjUxYmE2ZDMxN2E3NTM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-20T09:29:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-21T19:19:27Z"}, "message": "Prevent missing idents from causing problems down the line", "tree": {"sha": "5d796e9629f2c643ad72ee9e77c802d550c89fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d796e9629f2c643ad72ee9e77c802d550c89fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585cf6fb5f0c2736c781b6efb4651ba6d317a753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585cf6fb5f0c2736c781b6efb4651ba6d317a753", "html_url": "https://github.com/rust-lang/rust/commit/585cf6fb5f0c2736c781b6efb4651ba6d317a753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585cf6fb5f0c2736c781b6efb4651ba6d317a753/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac8915875596db90167701c447d9c76396358bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8915875596db90167701c447d9c76396358bb", "html_url": "https://github.com/rust-lang/rust/commit/0ac8915875596db90167701c447d9c76396358bb"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "e30fafda63cb46879f275f4a921b9fc4eb9936f4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/585cf6fb5f0c2736c781b6efb4651ba6d317a753/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585cf6fb5f0c2736c781b6efb4651ba6d317a753/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=585cf6fb5f0c2736c781b6efb4651ba6d317a753", "patch": "@@ -3037,6 +3037,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                           check_ribs: bool,\n                           record_used: bool)\n                           -> Option<LocalDef> {\n+        if identifier.name == special_idents::invalid.name {\n+            return Some(LocalDef::from_def(DefErr));\n+        }\n+\n         // First, check to see whether the name is a primitive type.\n         if namespace == TypeNS {\n             if let Some(&prim_ty) = self.primitive_type_table"}, {"sha": "922ebb3683e80da10c9f37a72541eb71194ae135", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/585cf6fb5f0c2736c781b6efb4651ba6d317a753/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585cf6fb5f0c2736c781b6efb4651ba6d317a753/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=585cf6fb5f0c2736c781b6efb4651ba6d317a753", "patch": "@@ -121,7 +121,7 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Span, Spanned};\n use syntax::errors::DiagnosticBuilder;\n-use syntax::parse::token::{self, InternedString};\n+use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -2839,8 +2839,10 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 method_ty\n             }\n             Err(error) => {\n-                method::report_error(fcx, method_name.span, expr_t,\n-                                     method_name.node, Some(rcvr), error);\n+                if method_name.node != special_idents::invalid.name {\n+                    method::report_error(fcx, method_name.span, expr_t,\n+                                         method_name.node, Some(rcvr), error);\n+                }\n                 fcx.write_error(expr.id);\n                 fcx.tcx().types.err\n             }\n@@ -2938,6 +2940,11 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             None => {}\n         }\n \n+        if field.node == special_idents::invalid.name {\n+            fcx.write_error(expr.id);\n+            return;\n+        }\n+\n         if method::exists(fcx, field.span, field.node, expr_t, expr.id) {\n             fcx.type_error_struct(field.span,\n                                   |actual| {\n@@ -3788,8 +3795,9 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n                 Some((Some(ty), slice::ref_slice(item_segment), def))\n             }\n             Err(error) => {\n-                method::report_error(fcx, span, ty,\n-                                     item_name, None, error);\n+                if item_name != special_idents::invalid.name {\n+                    method::report_error(fcx, span, ty, item_name, None, error);\n+                }\n                 fcx.write_error(node_id);\n                 None\n             }"}]}