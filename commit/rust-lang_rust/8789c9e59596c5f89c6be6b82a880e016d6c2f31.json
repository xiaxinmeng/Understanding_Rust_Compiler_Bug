{"sha": "8789c9e59596c5f89c6be6b82a880e016d6c2f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODljOWU1OTU5NmM1Zjg5YzZiZTZiODJhODgwZTAxNmQ2YzJmMzE=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2019-07-07T16:41:28Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2019-07-09T19:55:29Z"}, "message": "Strip function pointer alignment for older LLVM versions", "tree": {"sha": "5eb9d67e1e3e1c0069b6ab1179d23e1dc6b1522e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb9d67e1e3e1c0069b6ab1179d23e1dc6b1522e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8789c9e59596c5f89c6be6b82a880e016d6c2f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8789c9e59596c5f89c6be6b82a880e016d6c2f31", "html_url": "https://github.com/rust-lang/rust/commit/8789c9e59596c5f89c6be6b82a880e016d6c2f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8789c9e59596c5f89c6be6b82a880e016d6c2f31/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5324b42a59d9af002e4103ffb410f6345cbdeb7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5324b42a59d9af002e4103ffb410f6345cbdeb7b", "html_url": "https://github.com/rust-lang/rust/commit/5324b42a59d9af002e4103ffb410f6345cbdeb7b"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "2b68eb53a4ab96a27195a938dda8d5aede0c720f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8789c9e59596c5f89c6be6b82a880e016d6c2f31/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8789c9e59596c5f89c6be6b82a880e016d6c2f31/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=8789c9e59596c5f89c6be6b82a880e016d6c2f31", "patch": "@@ -1,5 +1,6 @@\n use crate::attributes;\n use crate::llvm;\n+use crate::llvm_util;\n use crate::debuginfo;\n use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n@@ -140,6 +141,11 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n     !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n }\n \n+fn strip_function_ptr_alignment(data_layout: String) -> String {\n+    // FIXME: Make this more general.\n+    data_layout.replace(\"-Fi8-\", \"-\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -149,14 +155,19 @@ pub unsafe fn create_module(\n     let mod_name = SmallCStr::new(mod_name);\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n+    let mut target_data_layout = sess.target.target.data_layout.clone();\n+    if llvm_util::get_major_version() < 9 {\n+        target_data_layout = strip_function_ptr_alignment(target_data_layout);\n+    }\n+\n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n         let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n-        let data_layout = llvm::LLVMGetDataLayout(llmod);\n-        let data_layout = str::from_utf8(CStr::from_ptr(data_layout).to_bytes())\n+        let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n+        let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n             .ok().expect(\"got a non-UTF8 data-layout from LLVM\");\n \n         // Unfortunately LLVM target specs change over time, and right now we\n@@ -177,16 +188,16 @@ pub unsafe fn create_module(\n         let cfg_llvm_root = option_env!(\"CFG_LLVM_ROOT\").unwrap_or(\"\");\n         let custom_llvm_used = cfg_llvm_root.trim() != \"\";\n \n-        if !custom_llvm_used && sess.target.target.data_layout != data_layout {\n+        if !custom_llvm_used && target_data_layout != llvm_data_layout {\n             bug!(\"data-layout for builtin `{}` target, `{}`, \\\n                   differs from LLVM default, `{}`\",\n                  sess.target.target.llvm_target,\n-                 sess.target.target.data_layout,\n-                 data_layout);\n+                 target_data_layout,\n+                 llvm_data_layout);\n         }\n     }\n \n-    let data_layout = SmallCStr::new(&sess.target.target.data_layout);\n+    let data_layout = SmallCStr::new(&target_data_layout);\n     llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n \n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);"}]}