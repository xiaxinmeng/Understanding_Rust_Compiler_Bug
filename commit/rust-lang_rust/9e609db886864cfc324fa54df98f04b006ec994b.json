{"sha": "9e609db886864cfc324fa54df98f04b006ec994b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjA5ZGI4ODY4NjRjZmMzMjRmYTU0ZGY5OGYwNGIwMDZlYzk5NGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T10:59:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T10:59:34Z"}, "message": "Rustup to rustc 1.33.0-nightly (bf669d1e3 2019-01-25)", "tree": {"sha": "9ab2aec1d94fea18f9d5ef9a972799020b9e2a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab2aec1d94fea18f9d5ef9a972799020b9e2a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e609db886864cfc324fa54df98f04b006ec994b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e609db886864cfc324fa54df98f04b006ec994b", "html_url": "https://github.com/rust-lang/rust/commit/9e609db886864cfc324fa54df98f04b006ec994b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e609db886864cfc324fa54df98f04b006ec994b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c728530bd0b3a43bedaecc98f0f915df6a21c0b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c728530bd0b3a43bedaecc98f0f915df6a21c0b6", "html_url": "https://github.com/rust-lang/rust/commit/c728530bd0b3a43bedaecc98f0f915df6a21c0b6"}], "stats": {"total": 353, "additions": 180, "deletions": 173}, "files": [{"sha": "64e5592f2a9f6f0c16f983e5b5a7e80133ba3622", "filename": "patches/0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 177, "deletions": 170, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/9e609db886864cfc324fa54df98f04b006ec994b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9e609db886864cfc324fa54df98f04b006ec994b/patches%2F0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0002-Disable-u128-and-i128-in-libcore.patch?ref=9e609db886864cfc324fa54df98f04b006ec994b", "patch": "@@ -1,6 +1,6 @@\n-From 84040eb5ffeecaeb13863ff6d4106d6e4e2daaa9 Mon Sep 17 00:00:00 2001\n+From 76c92b0dcd7919dab3a48d707d615f260390b839 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Fri, 28 Dec 2018 10:31:59 +0100\n+Date: Sat, 26 Jan 2019 11:50:08 +0100\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n@@ -14,27 +14,27 @@ Subject: [PATCH] Disable u128 and i128 in libcore\n  src/libcore/lib.rs           |   2 -\n  src/libcore/marker.rs        |   4 +-\n  src/libcore/mem.rs           |   2 -\n- src/libcore/num/mod.rs       |  99 ++++++++--------------------\n+ src/libcore/num/mod.rs       | 100 ++++++++--------------------\n  src/libcore/num/wrapping.rs  |  14 ++--\n  src/libcore/ops/arith.rs     |  22 +++----\n  src/libcore/ops/bit.rs       |  30 ++++-----\n  src/libcore/sync/atomic.rs   |  28 --------\n  src/libcore/tests/iter.rs    |  15 -----\n  src/libcore/tests/num/mod.rs |  18 -----\n  src/libcore/time.rs          | 123 -----------------------------------\n- src/libstd/lib.rs            |   5 --\n+ src/libstd/lib.rs            |   4 --\n  src/libstd/net/ip.rs         |  20 ------\n  src/libstd/num.rs            |   2 +-\n  src/libstd/panic.rs          |   6 --\n  22 files changed, 63 insertions(+), 368 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n-index 74b3ce4..9617ed1 100644\n+index ed90b7d..1739f91 100644\n --- a/src/libcore/clone.rs\n +++ b/src/libcore/clone.rs\n-@@ -162,8 +162,8 @@ mod impls {\n+@@ -173,8 +173,8 @@ mod impls {\n      }\n-\n+ \n      impl_clone! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -44,34 +44,34 @@ index 74b3ce4..9617ed1 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index 9336b13..8faa03f 100644\n+index d43a5c1..268e5f1 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -873,7 +873,7 @@ mod impls {\n+@@ -876,7 +876,7 @@ mod impls {\n      }\n-\n+ \n      partial_eq_impl! {\n -        bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64\n +        bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64\n      }\n-\n+ \n      macro_rules! eq_impl {\n-@@ -883,7 +883,7 @@ mod impls {\n+@@ -886,7 +886,7 @@ mod impls {\n          )*)\n      }\n-\n+ \n -    eq_impl! { () bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    eq_impl! { () bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -972,7 +972,7 @@ mod impls {\n+@@ -975,7 +975,7 @@ mod impls {\n          }\n      }\n-\n+ \n -    ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +    ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n      #[unstable(feature = \"never_type\", issue = \"35121\")]\n      impl PartialEq for ! {\n diff --git a/src/libcore/default.rs b/src/libcore/default.rs\n@@ -83,14 +83,14 @@ index 0e47c2f..570b949 100644\n  default_impl! { u32, 0, \"Returns the default value of `0`\" }\n  default_impl! { u64, 0, \"Returns the default value of `0`\" }\n -default_impl! { u128, 0, \"Returns the default value of `0`\" }\n-\n+ \n  default_impl! { isize, 0, \"Returns the default value of `0`\" }\n  default_impl! { i8, 0, \"Returns the default value of `0`\" }\n  default_impl! { i16, 0, \"Returns the default value of `0`\" }\n  default_impl! { i32, 0, \"Returns the default value of `0`\" }\n  default_impl! { i64, 0, \"Returns the default value of `0`\" }\n -default_impl! { i128, 0, \"Returns the default value of `0`\" }\n-\n+ \n  default_impl! { f32, 0.0f32, \"Returns the default value of `0.0`\" }\n  default_impl! { f64, 0.0f64, \"Returns the default value of `0.0`\" }\n diff --git a/src/libcore/fmt/num.rs b/src/libcore/fmt/num.rs\n@@ -103,7 +103,7 @@ index c7c8fc5..689d611 100644\n      fn to_u64(&self) -> u64;\n -    fn to_u128(&self) -> u128;\n  }\n-\n+ \n  macro_rules! doit {\n @@ -30,10 +29,9 @@ macro_rules! doit {\n          fn to_u16(&self) -> u16 { *self as u16 }\n@@ -114,19 +114,19 @@ index c7c8fc5..689d611 100644\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-\n+ \n  /// A type that represents a specific radix\n  #[doc(hidden)]\n @@ -174,7 +172,6 @@ integer! { i8, u8 }\n  integer! { i16, u16 }\n  integer! { i32, u32 }\n  integer! { i64, u64 }\n -integer! { i128, u128 }\n-\n+ \n  const DEC_DIGITS_LUT: &'static[u8] =\n      b\"0001020304050607080910111213141516171819\\\n @@ -250,7 +247,6 @@ macro_rules! impl_Display {\n-\n+ \n  impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n  impl_Display!(i64, u64: to_u64);\n -impl_Display!(i128, u128: to_u128);\n@@ -190,7 +190,7 @@ index d5d29c9..f98f382 100644\n -        (u128, write_u128),\n -        (i128, write_i128),\n      }\n-\n+ \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n index 66c09a0..1b8c5c9 100644\n@@ -201,7 +201,7 @@ index 66c09a0..1b8c5c9 100644\n  #[cfg(not(target_pointer_width = \"64\"))]\n  step_impl_no_between!(u64 i64);\n -step_impl_no_between!(u128 i128);\n-\n+ \n  macro_rules! range_exact_iter_impl {\n      ($($t:ty)*) => ($(\n diff --git a/src/libcore/iter/traits.rs b/src/libcore/iter/traits.rs\n@@ -211,38 +211,38 @@ index e8c6cd8..f58b446 100644\n @@ -901,7 +901,7 @@ macro_rules! float_sum_product {\n      )*)\n  }\n-\n+ \n -integer_sum_product! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n  float_sum_product! { f32 f64 }\n-\n+ \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index 252d7da..3c13282 100644\n+index 74a7115..634df60 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -145,14 +145,12 @@ mod uint_macros;\n+@@ -149,14 +149,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n -#[path = \"num/i128.rs\"]  pub mod i128;\n-\n+ \n  #[path = \"num/usize.rs\"] pub mod usize;\n  #[path = \"num/u8.rs\"]    pub mod u8;\n  #[path = \"num/u16.rs\"]   pub mod u16;\n  #[path = \"num/u32.rs\"]   pub mod u32;\n  #[path = \"num/u64.rs\"]   pub mod u64;\n -#[path = \"num/u128.rs\"]  pub mod u128;\n-\n+ \n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index 53af924..243a4f3 100644\n+index 65752ba..d3b797a 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n @@ -663,8 +663,8 @@ mod copy_impls {\n      }\n-\n+ \n      impl_copy! {\n -        usize u8 u16 u32 u64 u128\n -        isize i8 i16 i32 i64 i128\n@@ -252,7 +252,7 @@ index 53af924..243a4f3 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index c024868..e512596 100644\n+index 8fcbb73..0e20b88 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n @@ -163,12 +163,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n@@ -269,21 +269,27 @@ index c024868..e512596 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index e776513..6018aea 100644\n+index 423b800..b2b3f90 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n-@@ -102,7 +102,6 @@ nonzero_integers! {\n-     NonZeroU16(u16);\n-     NonZeroU32(u32);\n-     NonZeroU64(u64);\n--    NonZeroU128(u128);\n-     NonZeroUsize(usize);\n+@@ -102,13 +102,11 @@ nonzero_integers! {\n+     #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+     #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+     #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU64(u64);\n+-    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU128(u128);\n+     #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroUsize(usize);\n+     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI8(i8);\n+     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI16(i16);\n+     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI32(i32);\n+     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI64(i64);\n+-    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI128(i128);\n+     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n  }\n-\n-@@ -2110,18 +2109,6 @@ impl i64 {\n+ \n+@@ -2125,18 +2123,6 @@ impl i64 {\n           \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n-\n+ \n -#[lang = \"i128\"]\n -impl i128 {\n -    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n@@ -299,10 +305,10 @@ index e776513..6018aea 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4393,17 +4380,6 @@ impl u64 {\n+@@ -4440,17 +4426,6 @@ impl u64 {\n          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n-\n+ \n -#[lang = \"u128\"]\n -impl u128 {\n -    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n@@ -317,33 +323,33 @@ index e776513..6018aea 100644\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4487,7 +4463,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4534,7 +4509,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n -from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n +from_str_radix_int_impl! { isize i8 i16 i32 i64 usize u8 u16 u32 u64 }\n-\n+ \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4603,30 +4579,25 @@ macro_rules! rev {\n+@@ -4650,30 +4625,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n -try_from_upper_bounded!(u128, u64, u32, u16, u8);\n-\n+ \n  try_from_both_bounded!(i16, i8);\n  try_from_both_bounded!(i32, i16, i8);\n  try_from_both_bounded!(i64, i32, i16, i8);\n -try_from_both_bounded!(i128, i64, i32, i16, i8);\n-\n+ \n  // unsigned-to-signed\n  try_from_upper_bounded!(u8, i8);\n  try_from_upper_bounded!(u16, i8, i16);\n  try_from_upper_bounded!(u32, i8, i16, i32);\n  try_from_upper_bounded!(u64, i8, i16, i32, i64);\n -try_from_upper_bounded!(u128, i8, i16, i32, i64, i128);\n-\n+ \n  // signed-to-unsigned\n -try_from_lower_bounded!(i8, u8, u16, u32, u64, u128);\n -try_from_lower_bounded!(i16, u16, u32, u64, u128);\n@@ -358,111 +364,111 @@ index e776513..6018aea 100644\n  try_from_both_bounded!(i32, u16, u8);\n  try_from_both_bounded!(i64, u32, u16, u8);\n -try_from_both_bounded!(i128, u64, u32, u16, u8);\n-\n+ \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4638,21 +4609,21 @@ mod ptr_try_from_impls {\n+@@ -4685,21 +4655,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8);\n -    try_from_unbounded!(usize, u16, u32, u64, u128);\n +    try_from_unbounded!(usize, u16, u32, u64);\n      try_from_upper_bounded!(usize, i8, i16);\n -    try_from_unbounded!(usize, i32, i64, i128);\n +    try_from_unbounded!(usize, i32, i64);\n-\n+ \n      try_from_both_bounded!(isize, u8);\n -    try_from_lower_bounded!(isize, u16, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u16, u32, u64);\n      try_from_both_bounded!(isize, i8);\n -    try_from_unbounded!(isize, i16, i32, i64, i128);\n +    try_from_unbounded!(isize, i16, i32, i64);\n-\n+ \n -    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n +    rev!(try_from_upper_bounded, usize, u32, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16);\n -    rev!(try_from_both_bounded, usize, i32, i64, i128);\n +    rev!(try_from_both_bounded, usize, i32, i64);\n-\n+ \n -    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n -    rev!(try_from_both_bounded, isize, i32, i64, i128);\n +    rev!(try_from_upper_bounded, isize, u16, u32, u64);\n +    rev!(try_from_both_bounded, isize, i32, i64);\n  }\n-\n+ \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4661,24 +4632,24 @@ mod ptr_try_from_impls {\n+@@ -4708,24 +4678,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8, u16);\n -    try_from_unbounded!(usize, u32, u64, u128);\n +    try_from_unbounded!(usize, u32, u64);\n      try_from_upper_bounded!(usize, i8, i16, i32);\n -    try_from_unbounded!(usize, i64, i128);\n +    try_from_unbounded!(usize, i64);\n-\n+ \n      try_from_both_bounded!(isize, u8, u16);\n -    try_from_lower_bounded!(isize, u32, u64, u128);\n +    try_from_lower_bounded!(isize, u32, u64);\n      try_from_both_bounded!(isize, i8, i16);\n -    try_from_unbounded!(isize, i32, i64, i128);\n +    try_from_unbounded!(isize, i32, i64);\n-\n+ \n      rev!(try_from_unbounded, usize, u32);\n -    rev!(try_from_upper_bounded, usize, u64, u128);\n +    rev!(try_from_upper_bounded, usize, u64);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32);\n -    rev!(try_from_both_bounded, usize, i64, i128);\n +    rev!(try_from_both_bounded, usize, i64);\n-\n+ \n      rev!(try_from_unbounded, isize, u16);\n -    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n +    rev!(try_from_upper_bounded, isize, u32, u64);\n      rev!(try_from_unbounded, isize, i32);\n -    rev!(try_from_both_bounded, isize, i64, i128);\n +    rev!(try_from_both_bounded, isize, i64);\n  }\n-\n+ \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4687,24 +4658,20 @@ mod ptr_try_from_impls {\n+@@ -4734,24 +4704,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n-\n+ \n      try_from_upper_bounded!(usize, u8, u16, u32);\n -    try_from_unbounded!(usize, u64, u128);\n +    try_from_unbounded!(usize, u64);\n      try_from_upper_bounded!(usize, i8, i16, i32, i64);\n -    try_from_unbounded!(usize, i128);\n-\n+ \n      try_from_both_bounded!(isize, u8, u16, u32);\n -    try_from_lower_bounded!(isize, u64, u128);\n +    try_from_lower_bounded!(isize, u64);\n      try_from_both_bounded!(isize, i8, i16, i32);\n -    try_from_unbounded!(isize, i64, i128);\n +    try_from_unbounded!(isize, i64);\n-\n+ \n      rev!(try_from_unbounded, usize, u32, u64);\n -    rev!(try_from_upper_bounded, usize, u128);\n      rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n -    rev!(try_from_both_bounded, usize, i128);\n-\n+ \n      rev!(try_from_unbounded, isize, u16, u32);\n -    rev!(try_from_upper_bounded, isize, u64, u128);\n +    rev!(try_from_upper_bounded, isize, u64);\n      rev!(try_from_unbounded, isize, i32, i64);\n -    rev!(try_from_both_bounded, isize, i128);\n  }\n-\n+ \n  #[doc(hidden)]\n-@@ -4739,7 +4706,7 @@ macro_rules! doit {\n+@@ -4786,7 +4752,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n -doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n +doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-\n+ \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4930,52 +4897,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -4977,52 +4943,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -474,7 +480,7 @@ index e776513..6018aea 100644\n  impl_from_bool! { i64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n -impl_from_bool! { i128, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { isize, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n-\n+ \n  // Unsigned -> Unsigned\n  impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -487,7 +493,7 @@ index e776513..6018aea 100644\n  impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // Signed -> Signed\n  impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -500,7 +506,7 @@ index e776513..6018aea 100644\n  impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { i32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { i64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // Unsigned -> Signed\n  impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n  impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n@@ -512,7 +518,7 @@ index e776513..6018aea 100644\n  impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n -impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n -impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n-\n+ \n  // The C99 standard defines bounds on INTPTR_MIN, INTPTR_MAX, and UINTPTR_MAX\n  // which imply that pointer-sized integers must be at least 16 bits:\n diff --git a/src/libcore/num/wrapping.rs b/src/libcore/num/wrapping.rs\n@@ -525,7 +531,7 @@ index 50e189c..2da3b35 100644\n          //sh_impl_unsigned! { $t, u64 }\n -        //sh_impl_unsigned! { $t, u128 }\n          sh_impl_unsigned! { $t, usize }\n-\n+ \n          //sh_impl_signed! { $t, i8 }\n          //sh_impl_signed! { $t, i16 }\n          //sh_impl_signed! { $t, i32 }\n@@ -534,46 +540,46 @@ index 50e189c..2da3b35 100644\n          //sh_impl_signed! { $t, isize }\n      )*)\n  }\n-\n+ \n -sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +sh_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  // FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n  macro_rules! wrapping_impl {\n @@ -313,7 +311,7 @@ macro_rules! wrapping_impl {\n      )*)\n  }\n-\n+ \n -wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl {\n      ($($t:ty)*) => ($(\n @@ -675,7 +673,7 @@ assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n      )*)\n  }\n-\n+ \n -wrapping_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl_signed {\n      ($($t:ty)*) => ($(\n @@ -804,7 +802,7 @@ assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n      )*)\n  }\n-\n+ \n -wrapping_int_impl_signed! { isize i8 i16 i32 i64 i128 }\n +wrapping_int_impl_signed! { isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! wrapping_int_impl_unsigned {\n      ($($t:ty)*) => ($(\n @@ -881,7 +879,7 @@ assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n      )*)\n  }\n-\n+ \n -wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n +wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 }\n-\n+ \n  mod shift_max {\n      #![allow(non_upper_case_globals)]\n @@ -908,13 +906,11 @@ mod shift_max {\n@@ -582,7 +588,7 @@ index 50e189c..2da3b35 100644\n      pub const i64: u32 = (1 << 6) - 1;\n -    pub const i128: u32 = (1 << 7) - 1;\n      pub use self::platform::isize;\n-\n+ \n      pub const u8: u32 = i8;\n      pub const u16: u32 = i16;\n      pub const u32: u32 = i32;\n@@ -597,97 +603,97 @@ index 7d8bf18..91fd879 100644\n @@ -104,7 +104,7 @@ macro_rules! add_impl {\n      )*)\n  }\n-\n+ \n -add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The subtraction operator `-`.\n  ///\n @@ -202,7 +202,7 @@ macro_rules! sub_impl {\n      )*)\n  }\n-\n+ \n -sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The multiplication operator `*`.\n  ///\n @@ -322,7 +322,7 @@ macro_rules! mul_impl {\n      )*)\n  }\n-\n+ \n -mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The division operator `/`.\n  ///\n @@ -447,7 +447,7 @@ macro_rules! div_impl_integer {\n      )*)\n  }\n-\n+ \n -div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +div_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  macro_rules! div_impl_float {\n      ($($t:ty)*) => ($(\n @@ -532,7 +532,7 @@ macro_rules! rem_impl_integer {\n      )*)\n  }\n-\n+ \n -rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n-\n+ \n+ \n  macro_rules! rem_impl_float {\n @@ -631,7 +631,7 @@ macro_rules! neg_impl_unsigned {\n  }\n-\n+ \n  // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n -neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n +neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The addition assignment operator `+=`.\n  ///\n @@ -687,7 +687,7 @@ macro_rules! add_assign_impl {\n      )+)\n  }\n-\n+ \n -add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The subtraction assignment operator `-=`.\n  ///\n @@ -743,7 +743,7 @@ macro_rules! sub_assign_impl {\n      )+)\n  }\n-\n+ \n -sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The multiplication assignment operator `*=`.\n  ///\n @@ -790,7 +790,7 @@ macro_rules! mul_assign_impl {\n      )+)\n  }\n-\n+ \n -mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The division assignment operator `/=`.\n  ///\n @@ -836,7 +836,7 @@ macro_rules! div_assign_impl {\n      )+)\n  }\n-\n+ \n -div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-\n+ \n  /// The remainder assignment operator `%=`.\n  ///\n @@ -886,4 +886,4 @@ macro_rules! rem_assign_impl {\n      )+)\n  }\n-\n+ \n -rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n +rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n diff --git a/src/libcore/ops/bit.rs b/src/libcore/ops/bit.rs\n@@ -697,37 +703,37 @@ index 2c9bf24..af2ab6f 100644\n @@ -55,7 +55,7 @@ macro_rules! not_impl {\n      )*)\n  }\n-\n+ \n -not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise AND operator `&`.\n  ///\n @@ -139,7 +139,7 @@ macro_rules! bitand_impl {\n      )*)\n  }\n-\n+ \n -bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise OR operator `|`.\n  ///\n @@ -223,7 +223,7 @@ macro_rules! bitor_impl {\n      )*)\n  }\n-\n+ \n -bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise XOR operator `^`.\n  ///\n @@ -310,7 +310,7 @@ macro_rules! bitxor_impl {\n      )*)\n  }\n-\n+ \n -bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The left shift operator `<<`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -407,19 +407,17 @@ macro_rules! shl_impl_all {\n@@ -736,7 +742,7 @@ index 2c9bf24..af2ab6f 100644\n          shl_impl! { $t, u64 }\n -        shl_impl! { $t, u128 }\n          shl_impl! { $t, usize }\n-\n+ \n          shl_impl! { $t, i8 }\n          shl_impl! { $t, i16 }\n          shl_impl! { $t, i32 }\n@@ -745,10 +751,10 @@ index 2c9bf24..af2ab6f 100644\n          shl_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n +shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The right shift operator `>>`. Note that because this trait is implemented\n  /// for all integer types with multiple right-hand-side types, Rust's type\n @@ -516,19 +514,17 @@ macro_rules! shr_impl_all {\n@@ -757,7 +763,7 @@ index 2c9bf24..af2ab6f 100644\n          shr_impl! { $t, u64 }\n -        shr_impl! { $t, u128 }\n          shr_impl! { $t, usize }\n-\n+ \n          shr_impl! { $t, i8 }\n          shr_impl! { $t, i16 }\n          shr_impl! { $t, i32 }\n@@ -766,37 +772,37 @@ index 2c9bf24..af2ab6f 100644\n          shr_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The bitwise AND assignment operator `&=`.\n  ///\n @@ -616,7 +612,7 @@ macro_rules! bitand_assign_impl {\n      )+)\n  }\n-\n+ \n -bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise OR assignment operator `|=`.\n  ///\n @@ -665,7 +661,7 @@ macro_rules! bitor_assign_impl {\n      )+)\n  }\n-\n+ \n -bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The bitwise XOR assignment operator `^=`.\n  ///\n @@ -714,7 +710,7 @@ macro_rules! bitxor_assign_impl {\n      )+)\n  }\n-\n+ \n -bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n +bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-\n+ \n  /// The left shift assignment operator `<<=`.\n  ///\n @@ -770,19 +766,17 @@ macro_rules! shl_assign_impl_all {\n@@ -805,7 +811,7 @@ index 2c9bf24..af2ab6f 100644\n          shl_assign_impl! { $t, u64 }\n -        shl_assign_impl! { $t, u128 }\n          shl_assign_impl! { $t, usize }\n-\n+ \n          shl_assign_impl! { $t, i8 }\n          shl_assign_impl! { $t, i16 }\n          shl_assign_impl! { $t, i32 }\n@@ -814,10 +820,10 @@ index 2c9bf24..af2ab6f 100644\n          shl_assign_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-\n+ \n  /// The right shift assignment operator `>>=`.\n  ///\n @@ -838,16 +832,14 @@ macro_rules! shr_assign_impl_all {\n@@ -826,7 +832,7 @@ index 2c9bf24..af2ab6f 100644\n          shr_assign_impl! { $t, u64 }\n -        shr_assign_impl! { $t, u128 }\n          shr_assign_impl! { $t, usize }\n-\n+ \n          shr_assign_impl! { $t, i8 }\n          shr_assign_impl! { $t, i16 }\n          shr_assign_impl! { $t, i32 }\n@@ -835,14 +841,14 @@ index 2c9bf24..af2ab6f 100644\n          shr_assign_impl! { $t, isize }\n      )*)\n  }\n-\n+ \n -shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n +shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n diff --git a/src/libcore/sync/atomic.rs b/src/libcore/sync/atomic.rs\n-index 99e6365..d863e33 100644\n+index 8992e51..c1babcd 100644\n --- a/src/libcore/sync/atomic.rs\n +++ b/src/libcore/sync/atomic.rs\n-@@ -1943,34 +1943,6 @@ atomic_int! {\n+@@ -1937,34 +1937,6 @@ atomic_int! {\n      8,\n      u64 AtomicU64 ATOMIC_U64_INIT\n  }\n@@ -878,22 +884,22 @@ index 99e6365..d863e33 100644\n  macro_rules! ptr_width {\n      () => { 2 }\n diff --git a/src/libcore/tests/iter.rs b/src/libcore/tests/iter.rs\n-index cf19851..6b4a72b 100644\n+index 0fa9974..75b44b1 100644\n --- a/src/libcore/tests/iter.rs\n +++ b/src/libcore/tests/iter.rs\n-@@ -214,8 +214,6 @@ fn test_iterator_step_by_nth_overflow() {\n+@@ -215,8 +215,6 @@ fn test_iterator_step_by_nth_overflow() {\n      type Bigger = u32;\n      #[cfg(target_pointer_width = \"32\")]\n      type Bigger = u64;\n -    #[cfg(target_pointer_width = \"64\")]\n -    type Bigger = u128;\n-\n+ \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1950,19 +1948,6 @@ fn test_step_replace_signed() {\n+@@ -1968,19 +1966,6 @@ fn test_step_replace_signed() {\n      assert_eq!(y, 5);\n  }\n-\n+ \n -#[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n@@ -924,7 +930,7 @@ index a17c094..3c36d10 100644\n  test_impl_from! { test_booli32, bool, i32 }\n  test_impl_from! { test_booli64, bool, i64 }\n -test_impl_from! { test_booli128, bool, i128 }\n-\n+ \n  // Signed -> Float\n  test_impl_from! { test_i8f32, i8, f32 }\n @@ -265,51 +263,35 @@ test_impl_try_from_always_ok! { test_try_u8u8, u8, u8 }\n@@ -936,65 +942,65 @@ index a17c094..3c36d10 100644\n  test_impl_try_from_always_ok! { test_try_u8i32, u8, i32 }\n  test_impl_try_from_always_ok! { test_try_u8i64, u8, i64 }\n -test_impl_try_from_always_ok! { test_try_u8i128, u8, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u16u16, u16, u16 }\n  test_impl_try_from_always_ok! { test_try_u16u32, u16, u32 }\n  test_impl_try_from_always_ok! { test_try_u16u64, u16, u64 }\n -test_impl_try_from_always_ok! { test_try_u16u128, u16, u128 }\n  test_impl_try_from_always_ok! { test_try_u16i32, u16, i32 }\n  test_impl_try_from_always_ok! { test_try_u16i64, u16, i64 }\n -test_impl_try_from_always_ok! { test_try_u16i128, u16, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u32u32, u32, u32 }\n  test_impl_try_from_always_ok! { test_try_u32u64, u32, u64 }\n -test_impl_try_from_always_ok! { test_try_u32u128, u32, u128 }\n  test_impl_try_from_always_ok! { test_try_u32i64, u32, i64 }\n -test_impl_try_from_always_ok! { test_try_u32i128, u32, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_u64u64, u64, u64 }\n -test_impl_try_from_always_ok! { test_try_u64u128, u64, u128 }\n -test_impl_try_from_always_ok! { test_try_u64i128, u64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_u128u128, u128, u128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i8i8, i8, i8 }\n  test_impl_try_from_always_ok! { test_try_i8i16, i8, i16 }\n  test_impl_try_from_always_ok! { test_try_i8i32, i8, i32 }\n  test_impl_try_from_always_ok! { test_try_i8i64, i8, i64 }\n -test_impl_try_from_always_ok! { test_try_i8i128, i8, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i16i16, i16, i16 }\n  test_impl_try_from_always_ok! { test_try_i16i32, i16, i32 }\n  test_impl_try_from_always_ok! { test_try_i16i64, i16, i64 }\n -test_impl_try_from_always_ok! { test_try_i16i128, i16, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i32i32, i32, i32 }\n  test_impl_try_from_always_ok! { test_try_i32i64, i32, i64 }\n -test_impl_try_from_always_ok! { test_try_i32i128, i32, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_i64i64, i64, i64 }\n -test_impl_try_from_always_ok! { test_try_i64i128, i64, i128 }\n -\n -test_impl_try_from_always_ok! { test_try_i128i128, i128, i128 }\n-\n+ \n  test_impl_try_from_always_ok! { test_try_usizeusize, usize, usize }\n  test_impl_try_from_always_ok! { test_try_isizeisize, isize, isize }\n diff --git a/src/libcore/time.rs b/src/libcore/time.rs\n-index b12ee04..fe0faad 100644\n+index a751965..5d162cb 100644\n --- a/src/libcore/time.rs\n +++ b/src/libcore/time.rs\n @@ -21,7 +21,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n  const NANOS_PER_MICRO: u32 = 1_000;\n  const MILLIS_PER_SEC: u64 = 1_000;\n  const MICROS_PER_SEC: u64 = 1_000_000;\n -const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n-\n+ \n  /// The duration of one second.\n  #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n-@@ -260,54 +259,6 @@ impl Duration {\n+@@ -276,54 +275,6 @@ impl Duration {\n      #[inline]\n      pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n-\n+ \n -    /// Returns the total number of whole milliseconds contained by this `Duration`.\n -    ///\n -    /// # Examples\n@@ -1046,10 +1052,10 @@ index b12ee04..fe0faad 100644\n      /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n      /// if overflow occurred.\n      ///\n-@@ -466,80 +417,6 @@ impl Duration {\n+@@ -482,80 +433,6 @@ impl Duration {\n          (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n      }\n-\n+ \n -    /// Creates a new `Duration` from the specified number of seconds.\n -    ///\n -    /// # Panics\n@@ -1128,10 +1134,10 @@ index b12ee04..fe0faad 100644\n      ///\n      /// # Examples\n diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n-index 3051100..61001a4 100644\n+index f395813..d81f80b 100644\n --- a/src/libstd/lib.rs\n +++ b/src/libstd/lib.rs\n-@@ -404,8 +403,6 @@ pub use core::i16;\n+@@ -401,8 +401,6 @@ pub use core::i16;\n  pub use core::i32;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::i64;\n@@ -1140,23 +1146,23 @@ index 3051100..61001a4 100644\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::usize;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-@@ -438,8 +435,6 @@ pub use alloc_crate::string;\n+@@ -435,8 +433,6 @@ pub use alloc_crate::string;\n  pub use alloc_crate::vec;\n  #[stable(feature = \"rust1\", since = \"1.0.0\")]\n  pub use core::char;\n -#[stable(feature = \"i128\", since = \"1.26.0\")]\n -pub use core::u128;\n  #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n  pub use core::hint;\n-\n+ \n diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n-index 52a29f4..cafe50e 100644\n+index f98113e..6c41e4e 100644\n --- a/src/libstd/net/ip.rs\n +++ b/src/libstd/net/ip.rs\n @@ -1382,26 +1382,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n      }\n  }\n-\n+ \n -#[stable(feature = \"i128\", since = \"1.26.0\")]\n -impl From<Ipv6Addr> for u128 {\n -    fn from(ip: Ipv6Addr) -> u128 {\n@@ -1186,11 +1192,11 @@ index c80b9a5..e32a6b3 100644\n +++ b/src/libstd/num.rs\n @@ -12,7 +12,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n  pub use core::num::Wrapping;\n-\n+ \n  #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n -pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n +pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n-\n+ \n  #[cfg(test)] use fmt;\n  #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n diff --git a/src/libstd/panic.rs b/src/libstd/panic.rs\n@@ -1204,7 +1210,7 @@ index d27f6ca..8ac2a44 100644\n -#[cfg(target_has_atomic = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for atomic::AtomicI128 {}\n-\n+ \n  #[cfg(target_has_atomic = \"ptr\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n @@ -273,9 +270,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n@@ -1214,8 +1220,9 @@ index d27f6ca..8ac2a44 100644\n -#[cfg(target_has_atomic = \"128\")]\n -#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n -impl RefUnwindSafe for atomic::AtomicU128 {}\n-\n+ \n  #[cfg(target_has_atomic = \"8\")]\n  #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n---\n+-- \n 2.17.2 (Apple Git-113)\n+"}, {"sha": "446089fc9a161cea512de7c5a443b9dfaf1a5190", "filename": "src/main_shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e609db886864cfc324fa54df98f04b006ec994b/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e609db886864cfc324fa54df98f04b006ec994b/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=9e609db886864cfc324fa54df98f04b006ec994b", "patch": "@@ -9,9 +9,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n     use rustc::middle::lang_items::StartFnLangItem;\n     use rustc::session::config::EntryFnType;\n \n-    let (main_def_id, use_start_lang_item) = match *tcx.sess.entry_fn.borrow() {\n-        Some((id, _, entry_ty)) => (\n-            tcx.hir().local_def_id(id),\n+    let (main_def_id, use_start_lang_item) = match tcx.entry_fn(LOCAL_CRATE) {\n+        Some((def_id, entry_ty)) => (\n+            def_id,\n             match entry_ty {\n                 EntryFnType::Main => true,\n                 EntryFnType::Start => false,"}]}