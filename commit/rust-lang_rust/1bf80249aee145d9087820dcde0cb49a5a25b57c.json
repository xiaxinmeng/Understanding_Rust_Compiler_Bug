{"sha": "1bf80249aee145d9087820dcde0cb49a5a25b57c", "node_id": "C_kwDOAAsO6NoAKDFiZjgwMjQ5YWVlMTQ1ZDkwODc4MjBkY2RlMGNiNDlhNWEyNWI1N2M", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T10:44:35Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Remove many more cases of `mk_substs_trait` that can now use the iterator scheme`", "tree": {"sha": "566c4ca2e7f5992f360f1b3999818e9573f084db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566c4ca2e7f5992f360f1b3999818e9573f084db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf80249aee145d9087820dcde0cb49a5a25b57c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf80249aee145d9087820dcde0cb49a5a25b57c", "html_url": "https://github.com/rust-lang/rust/commit/1bf80249aee145d9087820dcde0cb49a5a25b57c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf80249aee145d9087820dcde0cb49a5a25b57c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe86aa977f8e8f2ebd2e6a6bd9b1a51c959cd4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe86aa977f8e8f2ebd2e6a6bd9b1a51c959cd4f", "html_url": "https://github.com/rust-lang/rust/commit/0fe86aa977f8e8f2ebd2e6a6bd9b1a51c959cd4f"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "36ae5d67f57c704b1454293734e96b6496852f0a", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -547,10 +547,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             ty::PredicateKind::Clause(ty::Clause::Projection(mut proj_pred)) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n-                                proj_pred.projection_ty.substs = self.tcx.mk_substs_trait(\n-                                    ty,\n-                                    proj_pred.projection_ty.substs.iter().skip(1),\n-                                );\n+                                proj_pred = proj_pred.with_self_ty(self.tcx, ty);\n                                 ty::PredicateKind::Clause(ty::Clause::Projection(proj_pred))\n                             }\n                             _ => continue,"}, {"sha": "40b2588388d66886353297cc50a5070b0bdd6069", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -1258,7 +1258,7 @@ impl<'tcx> LateContext<'tcx> {\n         tcx.associated_items(trait_id)\n             .find_by_name_and_kind(tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n             .and_then(|assoc| {\n-                let proj = tcx.mk_projection(assoc.def_id, tcx.mk_substs_trait(self_ty, []));\n+                let proj = tcx.mk_projection(assoc.def_id, [self_ty]);\n                 tcx.try_normalize_erasing_regions(self.param_env, proj).ok()\n             })\n     }"}, {"sha": "5ca5ec283210119ea89e9f6f2dcc1d1b8d90cf00", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -2598,7 +2598,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_projection(self, item_def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_projection(\n+        self,\n+        item_def_id: DefId,\n+        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    ) -> Ty<'tcx> {\n         self.mk_ty(Alias(ty::Projection, self.mk_alias_ty(item_def_id, substs)))\n     }\n "}, {"sha": "5232c1e1cc0f83d7333baa4c066c1fd4bcd3a75d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -1050,6 +1050,18 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     }\n }\n \n+impl<'tcx> ProjectionPredicate<'tcx> {\n+    pub fn with_self_ty(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        Self {\n+            projection_ty: tcx.mk_alias_ty(\n+                self.projection_ty.def_id,\n+                [self_ty.into()].into_iter().chain(self.projection_ty.substs.iter().skip(1)),\n+            ),\n+            ..self\n+        }\n+    }\n+}\n+\n pub trait ToPolyTraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;\n }"}, {"sha": "f8b55c862875e06796968c7cc1bbc0d9de190570", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -336,8 +336,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n-        let substs = tcx.mk_substs_trait(self_ty, []);\n-        let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n+        let sig = tcx.bound_fn_sig(def_id).subst(tcx, &[self_ty.into()]);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n \n@@ -573,9 +572,8 @@ fn build_call_shim<'tcx>(\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n         let arg_tup = tcx.mk_tup(untuple_args.iter());\n-        let sig_substs = tcx.mk_substs_trait(ty, [ty::subst::GenericArg::from(arg_tup)]);\n \n-        (Some(sig_substs), Some(untuple_args))\n+        (Some([ty.into(), arg_tup.into()]), Some(untuple_args))\n     } else {\n         (None, None)\n     };\n@@ -586,7 +584,7 @@ fn build_call_shim<'tcx>(\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n     let mut sig =\n-        if let Some(sig_substs) = sig_substs { sig.subst(tcx, sig_substs) } else { sig.0 };\n+        if let Some(sig_substs) = sig_substs { sig.subst(tcx, &sig_substs) } else { sig.0 };\n \n     if let CallKind::Indirect(fnty) = call_kind {\n         // `sig` determines our local decls, and thus the callee type in the `Call` terminator. This"}, {"sha": "414aee0c4342b8854b01e7c0f1b0298cc4bc088b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -2975,7 +2975,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.tcx.mk_projection(\n                         item_def_id,\n                         // Future::Output has no substs\n-                        self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n+                        [trait_pred.self_ty()],\n                     )\n                 });\n                 let InferOk { value: projection_ty, .. } ="}, {"sha": "2566d793d78daa53e4a5b5be00e880ad0dd96b02", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf80249aee145d9087820dcde0cb49a5a25b57c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1bf80249aee145d9087820dcde0cb49a5a25b57c", "patch": "@@ -425,13 +425,8 @@ pub fn fully_solve_bound<'tcx>(\n     bound: DefId,\n ) -> Vec<FulfillmentError<'tcx>> {\n     let tcx = infcx.tcx;\n-    let trait_ref = ty::TraitRef { def_id: bound, substs: tcx.mk_substs_trait(ty, []) };\n-    let obligation = Obligation {\n-        cause,\n-        recursion_depth: 0,\n-        param_env,\n-        predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(bound, [ty]);\n+    let obligation = Obligation::new(tcx, cause, param_env, ty::Binder::dummy(trait_ref));\n \n     fully_solve_obligation(infcx, obligation)\n }"}]}