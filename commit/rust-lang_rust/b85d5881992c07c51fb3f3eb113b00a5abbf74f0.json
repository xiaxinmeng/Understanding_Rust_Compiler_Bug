{"sha": "b85d5881992c07c51fb3f3eb113b00a5abbf74f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NWQ1ODgxOTkyYzA3YzUxZmIzZjNlYjExM2IwMGE1YWJiZjc0ZjA=", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-04-02T06:42:21Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-04-02T06:42:21Z"}, "message": "Check if the suggestion's `this block is empty...` span is in the last properly closed block.", "tree": {"sha": "dc8929032e7abd0184a63262f0254b8ac3624bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8929032e7abd0184a63262f0254b8ac3624bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85d5881992c07c51fb3f3eb113b00a5abbf74f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85d5881992c07c51fb3f3eb113b00a5abbf74f0", "html_url": "https://github.com/rust-lang/rust/commit/b85d5881992c07c51fb3f3eb113b00a5abbf74f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85d5881992c07c51fb3f3eb113b00a5abbf74f0/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af16794b2f8be96cb485f8660c16f1e1616a99a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/af16794b2f8be96cb485f8660c16f1e1616a99a4", "html_url": "https://github.com/rust-lang/rust/commit/af16794b2f8be96cb485f8660c16f1e1616a99a4"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "074f32adefd5839d082c787136d5f33fac7792ef", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b85d5881992c07c51fb3f3eb113b00a5abbf74f0/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85d5881992c07c51fb3f3eb113b00a5abbf74f0/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=b85d5881992c07c51fb3f3eb113b00a5abbf74f0", "patch": "@@ -22,6 +22,7 @@ impl<'a> StringReader<'a> {\n             matching_delim_spans: Vec::new(),\n             last_unclosed_found_span: None,\n             last_delim_empty_block_spans: FxHashMap::default(),\n+            matching_block_spans: Vec::new(),\n         };\n         let res = tt_reader.parse_all_token_trees();\n         (res, tt_reader.unmatched_braces)\n@@ -42,6 +43,9 @@ struct TokenTreesReader<'a> {\n     last_unclosed_found_span: Option<Span>,\n     /// Collect empty block spans that might have been auto-inserted by editors.\n     last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,\n+    /// Collect the spans of braces (Open, Close). Used only\n+    /// for detecting if blocks are empty\n+    matching_block_spans: Vec<(Span, Span)>,\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -77,6 +81,7 @@ impl<'a> TokenTreesReader<'a> {\n \n     fn parse_token_tree(&mut self) -> PResult<'a, TreeAndJoint> {\n         let sm = self.string_reader.sess.source_map();\n+\n         match self.token.kind {\n             token::Eof => {\n                 let msg = \"this file contains an unclosed delimiter\";\n@@ -146,6 +151,8 @@ impl<'a> TokenTreesReader<'a> {\n                             }\n                         }\n \n+                        self.matching_block_spans.push((open_brace_span, close_brace_span));\n+\n                         if self.open_braces.is_empty() {\n                             // Clear up these spans to avoid suggesting them as we've found\n                             // properly matched delimiters so far for an entire block.\n@@ -164,6 +171,8 @@ impl<'a> TokenTreesReader<'a> {\n                     token::CloseDelim(other) => {\n                         let mut unclosed_delimiter = None;\n                         let mut candidate = None;\n+\n+\n                         if self.last_unclosed_found_span != Some(self.token.span) {\n                             // do not complain about the same unclosed delimiter multiple times\n                             self.last_unclosed_found_span = Some(self.token.span);\n@@ -225,10 +234,16 @@ impl<'a> TokenTreesReader<'a> {\n                     self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n \n                 if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n-                    err.span_label(\n-                        span,\n-                        \"this block is empty, you might have not meant to close it\",\n-                    );\n+                    // Braces are added at the end, so the last element is the biggest block\n+                    if let Some(parent) = self.matching_block_spans.last() {\n+                        // Check if the (empty block) is in the last properly closed block\n+                        if (parent.0.to(parent.1)).contains(span) {\n+                            err.span_label(\n+                                span,\n+                                \"this block is empty, you might have not meant to close it\",\n+                            );\n+                        }\n+                    }\n                 }\n                 err.span_label(self.token.span, \"unexpected closing delimiter\");\n                 Err(err)"}]}