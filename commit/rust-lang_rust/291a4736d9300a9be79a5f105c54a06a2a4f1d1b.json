{"sha": "291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "node_id": "C_kwDOAAsO6NoAKDI5MWE0NzM2ZDkzMDBhOWJlNzlhNWYxMDVjNTRhMDZhMmE0ZjFkMWI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-03T13:24:17Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-10T13:20:16Z"}, "message": "macros: `#[subdiagnostic(eager)]`\n\nAdd support for `eager` argument to the `subdiagnostic` attribute which\ngenerates a call to `eager_subdiagnostic`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "5d7be56c9834c4ef34608082b09bd096f997c7c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d7be56c9834c4ef34608082b09bd096f997c7c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "html_url": "https://github.com/rust-lang/rust/commit/291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540b203bf9fe05e572f1baa938317d4c10df3528", "url": "https://api.github.com/repos/rust-lang/rust/commits/540b203bf9fe05e572f1baa938317d4c10df3528", "html_url": "https://github.com/rust-lang/rust/commit/540b203bf9fe05e572f1baa938317d4c10df3528"}], "stats": {"total": 173, "additions": 151, "deletions": 22}, "files": [{"sha": "84c57b3f64e18e381603680b5195da2cb0adc1c5", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "patch": "@@ -10,27 +10,31 @@ use synstructure::Structure;\n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n pub(crate) struct DiagnosticDerive<'a> {\n     structure: Structure<'a>,\n-    handler: syn::Ident,\n     builder: DiagnosticDeriveBuilder,\n }\n \n impl<'a> DiagnosticDerive<'a> {\n     pub(crate) fn new(diag: syn::Ident, handler: syn::Ident, structure: Structure<'a>) -> Self {\n         Self {\n-            builder: DiagnosticDeriveBuilder { diag, kind: DiagnosticDeriveKind::Diagnostic },\n-            handler,\n+            builder: DiagnosticDeriveBuilder {\n+                diag,\n+                kind: DiagnosticDeriveKind::Diagnostic { handler },\n+            },\n             structure,\n         }\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let DiagnosticDerive { mut structure, handler, mut builder } = self;\n+        let DiagnosticDerive { mut structure, mut builder } = self;\n \n         let implementation = builder.each_variant(&mut structure, |mut builder, variant| {\n             let preamble = builder.preamble(&variant);\n             let body = builder.body(&variant);\n \n             let diag = &builder.parent.diag;\n+            let DiagnosticDeriveKind::Diagnostic { handler } = &builder.parent.kind else {\n+                unreachable!()\n+            };\n             let init = match builder.slug.value_ref() {\n                 None => {\n                     span_err(builder.span, \"diagnostic slug not specified\")\n@@ -56,6 +60,7 @@ impl<'a> DiagnosticDerive<'a> {\n             }\n         });\n \n+        let DiagnosticDeriveKind::Diagnostic { handler } = &builder.kind else { unreachable!() };\n         structure.gen_impl(quote! {\n             gen impl<'__diagnostic_handler_sess, G>\n                     rustc_errors::IntoDiagnostic<'__diagnostic_handler_sess, G>"}, {"sha": "df4e309086fd268f31c706928562e82692a767d6", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "patch": "@@ -17,9 +17,9 @@ use syn::{\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// What kind of diagnostic is being derived - a fatal/error/warning or a lint?\n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Clone, PartialEq, Eq)]\n pub(crate) enum DiagnosticDeriveKind {\n-    Diagnostic,\n+    Diagnostic { handler: syn::Ident },\n     LintDiagnostic,\n }\n \n@@ -340,18 +340,15 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n         let diag = &self.parent.diag;\n         let meta = attr.parse_meta()?;\n \n-        if let Meta::Path(_) = meta {\n-            let ident = &attr.path.segments.last().unwrap().ident;\n-            let name = ident.to_string();\n-            let name = name.as_str();\n-            match name {\n-                \"skip_arg\" => {\n-                    // Don't need to do anything - by virtue of the attribute existing, the\n-                    // `set_arg` call will not be generated.\n-                    return Ok(quote! {});\n-                }\n-                \"primary_span\" => match self.parent.kind {\n-                    DiagnosticDeriveKind::Diagnostic => {\n+        let ident = &attr.path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n+        match (&meta, name.as_str()) {\n+            // Don't need to do anything - by virtue of the attribute existing, the\n+            // `set_arg` call will not be generated.\n+            (Meta::Path(_), \"skip_arg\") => return Ok(quote! {}),\n+            (Meta::Path(_), \"primary_span\") => {\n+                match self.parent.kind {\n+                    DiagnosticDeriveKind::Diagnostic { .. } => {\n                         report_error_if_not_applied_to_span(attr, &info)?;\n \n                         return Ok(quote! {\n@@ -363,10 +360,50 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                             diag.help(\"the `primary_span` field attribute is not valid for lint diagnostics\")\n                         })\n                     }\n-                },\n-                \"subdiagnostic\" => return Ok(quote! { #diag.subdiagnostic(#binding); }),\n-                _ => {}\n+                }\n+            }\n+            (Meta::Path(_), \"subdiagnostic\") => {\n+                return Ok(quote! { #diag.subdiagnostic(#binding); });\n+            }\n+            (Meta::NameValue(_), \"subdiagnostic\") => {\n+                throw_invalid_attr!(attr, &meta, |diag| {\n+                    diag.help(\"`eager` is the only supported nested attribute for `subdiagnostic`\")\n+                })\n+            }\n+            (Meta::List(MetaList { ref nested, .. }), \"subdiagnostic\") => {\n+                if nested.len() != 1 {\n+                    throw_invalid_attr!(attr, &meta, |diag| {\n+                        diag.help(\n+                            \"`eager` is the only supported nested attribute for `subdiagnostic`\",\n+                        )\n+                    })\n+                }\n+\n+                let handler = match &self.parent.kind {\n+                    DiagnosticDeriveKind::Diagnostic { handler } => handler,\n+                    DiagnosticDeriveKind::LintDiagnostic => {\n+                        throw_invalid_attr!(attr, &meta, |diag| {\n+                            diag.help(\"eager subdiagnostics are not supported on lints\")\n+                        })\n+                    }\n+                };\n+\n+                let nested_attr = nested.first().expect(\"pop failed for single element list\");\n+                match nested_attr {\n+                    NestedMeta::Meta(meta @ Meta::Path(_))\n+                        if meta.path().segments.last().unwrap().ident.to_string().as_str()\n+                            == \"eager\" =>\n+                    {\n+                        return Ok(quote! { #diag.eager_subdiagnostic(#handler, #binding); });\n+                    }\n+                    _ => {\n+                        throw_invalid_nested_attr!(attr, nested_attr, |diag| {\n+                            diag.help(\"`eager` is the only supported nested attribute for `subdiagnostic`\")\n+                        })\n+                    }\n+                }\n             }\n+            _ => (),\n         }\n \n         let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;"}, {"sha": "460af07a55967a257b3cce5a0f421f7d65162e53", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "patch": "@@ -678,3 +678,50 @@ enum ExampleEnum {\n struct RawIdentDiagnosticArg {\n     pub r#type: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticBad {\n+    #[subdiagnostic(bad)]\n+//~^ ERROR `#[subdiagnostic(bad)]` is not a valid attribute\n+    note: Note,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticBadStr {\n+    #[subdiagnostic = \"bad\"]\n+//~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n+    note: Note,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticBadTwice {\n+    #[subdiagnostic(bad, bad)]\n+//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    note: Note,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticBadLitStr {\n+    #[subdiagnostic(\"bad\")]\n+//~^ ERROR `#[subdiagnostic(\"...\")]` is not a valid attribute\n+    note: Note,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticEagerLint {\n+    #[subdiagnostic(eager)]\n+//~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n+    note: Note,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example)]\n+struct SubdiagnosticEagerCorrect {\n+    #[subdiagnostic(eager)]\n+    note: Note,\n+}"}, {"sha": "7a42d618707ad99cbd5ee22390378ca0a8bdc749", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/291a4736d9300a9be79a5f105c54a06a2a4f1d1b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=291a4736d9300a9be79a5f105c54a06a2a4f1d1b", "patch": "@@ -533,6 +533,46 @@ LL | #[label]\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n+error: `#[subdiagnostic(bad)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:685:21\n+   |\n+LL |     #[subdiagnostic(bad)]\n+   |                     ^^^\n+   |\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+\n+error: `#[subdiagnostic = ...]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:693:5\n+   |\n+LL |     #[subdiagnostic = \"bad\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+\n+error: `#[subdiagnostic(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:701:5\n+   |\n+LL |     #[subdiagnostic(bad, bad)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+\n+error: `#[subdiagnostic(\"...\")]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:709:21\n+   |\n+LL |     #[subdiagnostic(\"bad\")]\n+   |                     ^^^^^\n+   |\n+   = help: `eager` is the only supported nested attribute for `subdiagnostic`\n+\n+error: `#[subdiagnostic(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:717:5\n+   |\n+LL |     #[subdiagnostic(eager)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: eager subdiagnostics are not supported on lints\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:55:3\n    |\n@@ -607,7 +647,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 75 previous errors\n+error: aborting due to 80 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}