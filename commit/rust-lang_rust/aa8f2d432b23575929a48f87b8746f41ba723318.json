{"sha": "aa8f2d432b23575929a48f87b8746f41ba723318", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhOGYyZDQzMmIyMzU3NTkyOWE0OGY4N2I4NzQ2ZjQxYmE3MjMzMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T20:13:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T20:13:21Z"}, "message": "Auto merge of #89000 - Mark-Simulacrum:no-new-lrc, r=petrochenkov\n\nReuse existing shared Lrc for MatchImpl parent\n\nThis is a small performance win for the hot path, which helps to address this regression: https://github.com/rust-lang/rust/pull/87244#issuecomment-883635813.", "tree": {"sha": "514be8415143e481a3f571654a7db24a6ffbac4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514be8415143e481a3f571654a7db24a6ffbac4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa8f2d432b23575929a48f87b8746f41ba723318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8f2d432b23575929a48f87b8746f41ba723318", "html_url": "https://github.com/rust-lang/rust/commit/aa8f2d432b23575929a48f87b8746f41ba723318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa8f2d432b23575929a48f87b8746f41ba723318/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c8f2612ffea42cc09350accdba934e85a19f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c8f2612ffea42cc09350accdba934e85a19f35", "html_url": "https://github.com/rust-lang/rust/commit/35c8f2612ffea42cc09350accdba934e85a19f35"}, {"sha": "905beab38ead75dcc283c641ebdaf84450e6e3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/905beab38ead75dcc283c641ebdaf84450e6e3c2", "html_url": "https://github.com/rust-lang/rust/commit/905beab38ead75dcc283c641ebdaf84450e6e3c2"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "35c8786dcd3ac7b4d181c0ef8998d96406b03f78", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=aa8f2d432b23575929a48f87b8746f41ba723318", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ObligationCauseCode::MatchImpl(parent, impl_def_id) => (parent, impl_def_id),\n             _ => return None,\n         };\n-        let binding_span = match **parent {\n+        let binding_span = match parent.code {\n             ObligationCauseCode::BindingObligation(_def_id, binding_span) => binding_span,\n             _ => return None,\n         };"}, {"sha": "2d47e72780ebe538cf759a48053ce88ba2ecef5b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=aa8f2d432b23575929a48f87b8746f41ba723318", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sub_origin {\n             let code = match &cause.code {\n-                ObligationCauseCode::MatchImpl(parent, ..) => &**parent,\n+                ObligationCauseCode::MatchImpl(parent, ..) => &parent.code,\n                 _ => &cause.code,\n             };\n             if let ObligationCauseCode::ItemObligation(item_def_id) = *code {"}, {"sha": "88a7722c9ccf08bd0ff4437962db68e57f49cca3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=aa8f2d432b23575929a48f87b8746f41ba723318", "patch": "@@ -349,7 +349,7 @@ pub enum ObligationCauseCode<'tcx> {\n     WellFormed(Option<WellFormedLoc>),\n \n     /// From `match_impl`. The cause for us having to match an impl, and the DefId we are matching against.\n-    MatchImpl(Lrc<ObligationCauseCode<'tcx>>, DefId),\n+    MatchImpl(ObligationCause<'tcx>, DefId),\n }\n \n /// The 'location' at which we try to perform HIR-based wf checking."}, {"sha": "b966779500b617423162ad6f0104438a7e61a777", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8f2d432b23575929a48f87b8746f41ba723318/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=aa8f2d432b23575929a48f87b8746f41ba723318", "patch": "@@ -2034,7 +2034,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let cause = ObligationCause::new(\n             obligation.cause.span,\n             obligation.cause.body_id,\n-            ObligationCauseCode::MatchImpl(Lrc::new(obligation.cause.code.clone()), impl_def_id),\n+            ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),\n         );\n \n         let InferOk { obligations, .. } = self"}]}