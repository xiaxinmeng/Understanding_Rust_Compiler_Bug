{"sha": "e313b3334b82676bbdcf90cd48f08b87fc0d03da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTNiMzMzNGI4MjY3NmJiZGNmOTBjZDQ4ZjA4Yjg3ZmMwZDAzZGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-09T18:49:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-10T10:11:28Z"}, "message": "Improve error message where a closure escapes fn while trying to borrow\nfrom the current fn. Employ the new `span_suggestion` to show how you\ncan use `move`.", "tree": {"sha": "a7abe6b39044c1e8449986ceb8f591b3b99ef8ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7abe6b39044c1e8449986ceb8f591b3b99ef8ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e313b3334b82676bbdcf90cd48f08b87fc0d03da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e313b3334b82676bbdcf90cd48f08b87fc0d03da", "html_url": "https://github.com/rust-lang/rust/commit/e313b3334b82676bbdcf90cd48f08b87fc0d03da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e313b3334b82676bbdcf90cd48f08b87fc0d03da/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "906a9728ffd4cd9f40c96d7704260baf17845651", "url": "https://api.github.com/repos/rust-lang/rust/commits/906a9728ffd4cd9f40c96d7704260baf17845651", "html_url": "https://github.com/rust-lang/rust/commit/906a9728ffd4cd9f40c96d7704260baf17845651"}], "stats": {"total": 141, "additions": 128, "deletions": 13}, "files": [{"sha": "db947a27472ada5eb768cdf9ac7f1e6cb7e2448d", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -522,6 +522,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     }\n \n     pub fn report(&self, err: BckError<'tcx>) {\n+        // Catch and handle some particular cases.\n+        match (&err.code, &err.cause) {\n+            (&err_out_of_scope(ty::ReScope(_), ty::ReStatic), &euv::ClosureCapture(span)) |\n+            (&err_out_of_scope(ty::ReScope(_), ty::ReFree(..)), &euv::ClosureCapture(span)) => {\n+                return self.report_out_of_scope_escaping_closure_capture(&err, span);\n+            }\n+            _ => { }\n+        }\n+\n+        // General fallback.\n         self.span_err(\n             err.span,\n             &self.bckerr_to_string(&err));\n@@ -796,16 +806,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 format!(\"{} does not live long enough\", msg)\n             }\n             err_borrowed_pointer_too_short(..) => {\n-                let descr = match opt_loan_path(&err.cmt) {\n-                    Some(lp) => {\n-                        format!(\"`{}`\", self.loan_path_to_string(&*lp))\n-                    }\n-                    None => self.cmt_to_string(&*err.cmt),\n-                };\n-\n+                let descr = self.cmt_to_path_or_string(&err.cmt);\n                 format!(\"lifetime of {} is too short to guarantee \\\n-                                its contents can be safely reborrowed\",\n-                               descr)\n+                         its contents can be safely reborrowed\",\n+                        descr)\n             }\n         }\n     }\n@@ -888,6 +892,39 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn report_out_of_scope_escaping_closure_capture(&self,\n+                                                    err: &BckError<'tcx>,\n+                                                    capture_span: Span)\n+    {\n+        let cmt_path_or_string = self.cmt_to_path_or_string(&err.cmt);\n+\n+        span_err!(\n+            self.tcx.sess, err.span, E0373,\n+            \"closure may outlive the current function, \\\n+             but it borrows {}, \\\n+             which is owned by the current function\",\n+            cmt_path_or_string);\n+\n+        self.tcx.sess.span_note(\n+            capture_span,\n+            &format!(\"{} is borrowed here\",\n+                     cmt_path_or_string));\n+\n+        let suggestion =\n+            match self.tcx.sess.codemap().span_to_snippet(err.span) {\n+                Ok(string) => format!(\"move {}\", string),\n+                Err(_) => format!(\"move |<args>| <body>\")\n+            };\n+\n+        self.tcx.sess.span_suggestion(\n+            err.span,\n+            &format!(\"to force the closure to take ownership of {} \\\n+                      (and any other referenced variables), \\\n+                      use the `move` keyword, as shown:\",\n+                     cmt_path_or_string),\n+            suggestion);\n+    }\n+\n     pub fn note_and_explain_bckerr(&self, err: BckError<'tcx>) {\n         let code = err.code;\n         match code {\n@@ -1035,6 +1072,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn cmt_to_string(&self, cmt: &mc::cmt_<'tcx>) -> String {\n         cmt.descriptive_string(self.tcx)\n     }\n+\n+    pub fn cmt_to_path_or_string(&self, cmt: &mc::cmt<'tcx>) -> String {\n+        match opt_loan_path(cmt) {\n+            Some(lp) => format!(\"`{}`\", self.loan_path_to_string(&lp)),\n+            None => self.cmt_to_string(cmt),\n+        }\n+    }\n }\n \n fn is_statement_scope(tcx: &ty::ctxt, region: ty::Region) -> bool {"}, {"sha": "981b28593f9a4d20bba49937fda8b822b6e2bbc2", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_diagnostics! {\n+    E0373 // closure may outlive current fn, but it borrows {}, which is owned by current fn\n+}\n+\n+__build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "647ea3555ba913984c8ed71be606c13e41851c86", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -40,6 +40,10 @@ pub use borrowck::check_crate;\n pub use borrowck::build_borrowck_dataflow_data_for_fn;\n pub use borrowck::FnPartsWithCFG;\n \n+// NB: This module needs to be declared first so diagnostics are\n+// registered before they are used.\n+pub mod diagnostics;\n+\n mod borrowck;\n \n pub mod graphviz;"}, {"sha": "87e40df7663baacabd7c522321104fc0e7c82a61", "filename": "src/test/compile-fail/borrowck-escaping-closure-error-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-1.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread::spawn;\n+\n+// Test that we give a custom error (E0373) for the case where a\n+// closure is escaping current frame, and offer a suggested code edit.\n+// I refrained from including the precise message here, but the\n+// original text as of the time of this writing is:\n+//\n+//    closure may outlive the current function, but it borrows `books`,\n+//    which is owned by the current function\n+\n+fn main() {\n+    let mut books = vec![1,2,3];\n+    spawn(|| books.push(4));\n+    //~^ ERROR E0373\n+}"}, {"sha": "67700be890b1faa8a9c9090fdb0ea8382ddfd854", "filename": "src/test/compile-fail/borrowck-escaping-closure-error-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-escaping-closure-error-2.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we give a custom error (E0373) for the case where a\n+// closure is escaping current frame, and offer a suggested code edit.\n+// I refrained from including the precise message here, but the\n+// original text as of the time of this writing is:\n+//\n+//    closure may outlive the current function, but it borrows `books`,\n+//    which is owned by the current function\n+\n+fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n+    let mut books = vec![1,2,3];\n+    Box::new(|| books.push(4))\n+    //~^ ERROR E0373\n+}\n+\n+fn main() { }"}, {"sha": "b4abef0bd280b914aa20d155a0ac18f07740f432", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -18,10 +18,10 @@ trait Collection { fn len(&self) -> usize; }\n \n struct List<'a, T: ListItem<'a>> {\n //~^ ERROR the parameter type `T` may not live long enough\n-//~^^ NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n+//~| HELP consider adding an explicit lifetime bound\n+//~| NOTE ...so that the reference type `&'a [T]` does not outlive the data it points at\n     slice: &'a [T]\n }\n-//~^ HELP consider adding an explicit lifetime bound\n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {\n     fn len(&self) -> usize {\n         0"}, {"sha": "0089bff3e8fd89c56d0870bd3edc8648e285068b", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -15,7 +15,7 @@ fn id<T>(t: T) -> T { t }\n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     id(Box::new(|| *v))\n-        //~^ ERROR `v` does not live long enough\n+        //~^ ERROR E0373\n         //~| ERROR cannot move out of borrowed content\n }\n "}, {"sha": "948dc8cd219689301a9b30ba2702422a39294451", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313b3334b82676bbdcf90cd48f08b87fc0d03da/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=e313b3334b82676bbdcf90cd48f08b87fc0d03da", "patch": "@@ -13,7 +13,7 @@ fn ignore<F>(_f: F) where F: for<'z> FnOnce(&'z isize) -> &'z isize {}\n fn nested() {\n     let y = 3;\n     ignore(\n-        |z| { //~ ERROR `y` does not live long enough\n+        |z| { //~ ERROR E0373\n             if false { &y } else { z }\n         });\n }"}]}