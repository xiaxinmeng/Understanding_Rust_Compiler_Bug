{"sha": "46cc11ea882681a3b524df97d86442c967bf30e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2Y2MxMWVhODgyNjgxYTNiNTI0ZGY5N2Q4NjQ0MmM5NjdiZjMwZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-01T00:28:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-01T00:34:29Z"}, "message": "core: Serialize all access to the environment using a weak global task", "tree": {"sha": "0809ca944248eb5e5fc6829f6ccf2de714294510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0809ca944248eb5e5fc6829f6ccf2de714294510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46cc11ea882681a3b524df97d86442c967bf30e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46cc11ea882681a3b524df97d86442c967bf30e2", "html_url": "https://github.com/rust-lang/rust/commit/46cc11ea882681a3b524df97d86442c967bf30e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46cc11ea882681a3b524df97d86442c967bf30e2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30385022c1a7b265a746acb702e6fd1ee3d0e92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30385022c1a7b265a746acb702e6fd1ee3d0e92f", "html_url": "https://github.com/rust-lang/rust/commit/30385022c1a7b265a746acb702e6fd1ee3d0e92f"}], "stats": {"total": 221, "additions": 150, "deletions": 71}, "files": [{"sha": "6b47a69b90aed1d2dc4c8cddd6ae7e3d15b615cc", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -199,6 +199,7 @@ mod extfmt;\n mod unicode;\n mod priv;\n mod cmath;\n+mod global_env;\n \n \n // Local Variables:"}, {"sha": "5a63ec400bef4319b23391435d077dc3d0023790", "filename": "src/libcore/global_env.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fglobal_env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fglobal_env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fglobal_env.rs?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -0,0 +1,124 @@\n+#[doc = \"Internal module for serializing access to getenv/setenv\"];\n+\n+export getenv;\n+export setenv;\n+\n+native mod rustrt {\n+    fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n+}\n+\n+enum msg {\n+    msg_getenv(str, comm::chan<option<str>>),\n+    msg_setenv(str, str, comm::chan<()>)\n+}\n+\n+fn getenv(n: str) -> option<str> {\n+    let env_ch = get_global_env_chan();\n+    let po = comm::port();\n+    comm::send(env_ch, msg_getenv(n, comm::chan(po)));\n+    comm::recv(po)\n+}\n+\n+fn setenv(n: str, v: str) {\n+    let env_ch = get_global_env_chan();\n+    let po = comm::port();\n+    comm::send(env_ch, msg_setenv(n, v, comm::chan(po)));\n+    comm::recv(po)\n+}\n+\n+fn get_global_env_chan() -> comm::chan<msg> {\n+    let global_ptr = rustrt::rust_global_env_chan_ptr();\n+    let builder_fn = {||\n+        let builder = task::builder();\n+        task::unsupervise(builder);\n+        task::set_opts(builder, {\n+            sched:  some({\n+                mode: task::single_threaded,\n+                // FIXME: This would be a good place to use\n+                // a very small native stack\n+                native_stack_size: none\n+            })\n+            with task::get_opts(builder)\n+        });\n+        builder\n+    };\n+    unsafe {\n+        priv::chan_from_global_ptr(\n+            global_ptr, builder_fn, global_env_task)\n+    }\n+}\n+\n+fn global_env_task(msg_po: comm::port<msg>) unsafe {\n+    priv::weaken_task {|weak_po|\n+        loop {\n+            alt comm::select2(msg_po, weak_po) {\n+              either::left(msg_getenv(n, resp_ch)) {\n+                comm::send(resp_ch, impl::getenv(n))\n+              }\n+              either::left(msg_setenv(n, v, resp_ch)) {\n+                comm::send(resp_ch, impl::setenv(n, v))\n+              }\n+              either::right(_) {\n+                break;\n+              }\n+            }\n+        }\n+    }\n+}\n+\n+mod impl {\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn getenv(n: str) -> option<str> unsafe {\n+        let s = str::as_c_str(n, libc::getenv);\n+        ret if unsafe::reinterpret_cast(s) == 0 {\n+            option::none::<str>\n+        } else {\n+            let s = unsafe::reinterpret_cast(s);\n+            option::some::<str>(str::unsafe::from_buf(s))\n+        };\n+    }\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn getenv(n: str) -> option<str> unsafe {\n+        import libc::types::os::arch::extra::*;\n+        import libc::funcs::extra::kernel32::*;\n+        import win32::*;\n+        as_utf16_p(n) {|u|\n+            fill_utf16_buf_and_decode() {|buf, sz|\n+                GetEnvironmentVariableW(u, buf, sz)\n+            }\n+        }\n+    }\n+\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn setenv(n: str, v: str) {\n+\n+        // FIXME: remove this when export globs work properly.\n+        import libc::funcs::posix01::unistd::setenv;\n+        str::as_c_str(n) {|nbuf|\n+            str::as_c_str(v) {|vbuf|\n+                setenv(nbuf, vbuf, 1i32);\n+            }\n+        }\n+    }\n+\n+\n+    #[cfg(target_os = \"win32\")]\n+    fn setenv(n: str, v: str) {\n+        // FIXME: remove imports when export globs work properly.\n+        import libc::funcs::extra::kernel32::*;\n+        import win32::*;\n+        as_utf16_p(n) {|nbuf|\n+            as_utf16_p(v) {|vbuf|\n+                SetEnvironmentVariableW(nbuf, vbuf);\n+            }\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"}, {"sha": "d55c9aebdd3a1f78b7f7ca9bce1111e97228aa4e", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 53, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -121,61 +121,14 @@ mod win32 {\n     }\n }\n \n-\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-fn getenv(n: str) -> option<str> unsafe {\n-    let s = as_c_charp(n, libc::getenv);\n-    ret if unsafe::reinterpret_cast(s) == 0 {\n-            option::none::<str>\n-        } else {\n-            let s = unsafe::reinterpret_cast(s);\n-            option::some::<str>(str::unsafe::from_buf(s))\n-        };\n-}\n-\n-#[cfg(target_os = \"win32\")]\n-fn getenv(n: str) -> option<str> unsafe {\n-    import libc::types::os::arch::extra::*;\n-    import libc::funcs::extra::kernel32::*;\n-    import win32::*;\n-    as_utf16_p(n) {|u|\n-        fill_utf16_buf_and_decode() {|buf, sz|\n-            GetEnvironmentVariableW(u, buf, sz)\n-        }\n-    }\n-}\n-\n-\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-fn setenv(n: str, v: str) {\n-\n-    // FIXME: remove this when export globs work properly.\n-    import libc::funcs::posix01::unistd::setenv;\n-    as_c_charp(n) {|nbuf|\n-        as_c_charp(v) {|vbuf|\n-            setenv(nbuf, vbuf, 1i32);\n-        }\n-    }\n+fn getenv(n: str) -> option<str> {\n+    global_env::getenv(n)\n }\n \n-\n-#[cfg(target_os = \"win32\")]\n fn setenv(n: str, v: str) {\n-    // FIXME: remove imports when export globs work properly.\n-    import libc::funcs::extra::kernel32::*;\n-    import win32::*;\n-    as_utf16_p(n) {|nbuf|\n-        as_utf16_p(v) {|vbuf|\n-            SetEnvironmentVariableW(nbuf, vbuf);\n-        }\n-    }\n+    global_env::setenv(n, v)\n }\n \n-\n fn fdopen(fd: c_int) -> *FILE {\n     ret as_c_charp(\"r\") {|modebuf|\n         libc::fdopen(fd, modebuf)\n@@ -726,15 +679,13 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore(reason = \"fails periodically on mac\")]\n     fn test_setenv() {\n         let n = make_rand_name();\n         setenv(n, \"VALUE\");\n         assert getenv(n) == option::some(\"VALUE\");\n     }\n \n     #[test]\n-    #[ignore(reason = \"fails periodically on mac\")]\n     fn test_setenv_overwrite() {\n         let n = make_rand_name();\n         setenv(n, \"1\");\n@@ -747,7 +698,6 @@ mod tests {\n     // Windows GetEnvironmentVariable requires some extra work to make sure\n     // the buffer the variable is copied into is the right size\n     #[test]\n-    #[ignore(reason = \"fails periodically on mac\")]\n     fn test_getenv_big() {\n         let mut s = \"\";\n         let mut i = 0;"}, {"sha": "cbc18d32bc1d167a6fb9d888520a13aadbd783c8", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -823,21 +823,7 @@ impl tm for tm {\n mod tests {\n     import task;\n \n-    // FIXME #2160: These tests are all run in the same task because\n-    // getenv/setenv interacts poorly with threads on OS X\n     #[test]\n-    fn test_all() {\n-        test_get_time();\n-        test_precise_time();\n-        test_at_utc();\n-        test_at();\n-        test_to_timespec();\n-        test_conversions();\n-        test_strptime();\n-        test_ctime();\n-        test_strftime();\n-    }\n-\n     fn test_get_time() {\n         const some_recent_date: i64 = 1325376000i64; // 2012-01-01T00:00:00Z\n         const some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n@@ -861,6 +847,7 @@ mod tests {\n         }\n     }\n \n+    #[test]\n     fn test_precise_time() {\n         let s0 = precise_time_s();\n         let ns1 = precise_time_ns();\n@@ -878,6 +865,7 @@ mod tests {\n         assert ns2 >= ns1;\n     }\n \n+    #[test]\n     fn test_at_utc() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -898,6 +886,7 @@ mod tests {\n         assert utc.tm_nsec == 54321_i32;\n     }\n \n+    #[test]\n     fn test_at() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -923,6 +912,7 @@ mod tests {\n         assert local.tm_nsec == 54321_i32;\n     }\n \n+    #[test]\n     fn test_to_timespec() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -933,6 +923,7 @@ mod tests {\n         assert utc.to_local().to_timespec() == time;\n     }\n \n+    #[test]\n     fn test_conversions() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -948,6 +939,7 @@ mod tests {\n         assert utc.to_local().to_utc() == utc;\n     }\n \n+    #[test]\n     fn test_strptime() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -1092,6 +1084,7 @@ mod tests {\n         assert test(\"%\", \"%%\");\n     }\n \n+    #[test]\n     fn test_ctime() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n \n@@ -1103,6 +1096,7 @@ mod tests {\n         assert local.ctime() == \"Fri Feb 13 15:31:30 2009\";\n     }\n \n+    #[test]\n     fn test_strftime() {\n         os::setenv(\"TZ\", \"America/Los_Angeles\");\n "}, {"sha": "5866c1a8dc029e9ef5e6822b88c85cfe28855635", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -781,6 +781,12 @@ rust_task_unweaken(rust_port_id chan) {\n     task->kernel->unweaken_task(chan);\n }\n \n+extern \"C\" CDECL uintptr_t*\n+rust_global_env_chan_ptr() {\n+    rust_task *task = rust_get_current_task();\n+    return task->kernel->get_global_env_chan();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "44c6be2421ddda278e95378361483ca89c1c5eeb", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -22,11 +22,11 @@ rust_kernel::rust_kernel(rust_env *env) :\n     sched_reaper(this),\n     osmain_driver(NULL),\n     non_weak_tasks(0),\n+    global_loop_chan(0),\n+    global_env_chan(0),\n     env(env)\n+\n {\n-    // set up storage of pointers needed to\n-    // access the global loop.\n-    global_loop_chan = 0;\n \n     // Create the single threaded scheduler that will run on the platform's\n     // main thread"}, {"sha": "97db7cb37780c59345218c9c875d59d57b9648c4", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -75,6 +75,8 @@ class rust_kernel {\n \n     // Used to communicate with the process-side, global libuv loop\n     uintptr_t global_loop_chan;\n+    // Used to serialize access to getenv/setenv\n+    uintptr_t global_env_chan;\n \n public:\n     struct rust_env *env;\n@@ -122,6 +124,7 @@ class rust_kernel {\n     bool send_to_port(rust_port_id chan, void *sptr);\n \n     uintptr_t* get_global_loop() { return &global_loop_chan; }\n+    uintptr_t* get_global_env_chan() { return &global_env_chan; }\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "2289f38e724b064bd769d22f8d7361ea19a31c31", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -147,4 +147,5 @@ rust_dbg_lock_wait\n rust_dbg_lock_signal\n rust_dbg_call\n rust_osmain_sched_id\n-rust_compare_and_swap_ptr\n\\ No newline at end of file\n+rust_compare_and_swap_ptr\n+rust_global_env_chan_ptr"}]}