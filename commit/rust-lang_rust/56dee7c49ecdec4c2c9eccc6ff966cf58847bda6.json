{"sha": "56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZGVlN2M0OWVjZGVjNGMyYzllY2NjNmZmOTY2Y2Y1ODg0N2JkYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T21:45:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-01T21:45:19Z"}, "message": "Auto merge of #86791 - JohnTitor:rollup-96ltzpz, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #86148 (Check the number of generic lifetime and const parameters of intrinsics)\n - #86659 (fix(rustdoc): generics search)\n - #86768 (Add myself to mailmap)\n - #86775 (Test for const trait impls behind feature gates)\n - #86779 (Allow anyone to add or remove any label starting with perf-)\n - #86783 (Move Mutex::unlock to T: ?Sized)\n - #86785 (proc_macro/bridge: Remove dead code Slice type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8b0ca08467f70bd8ecacca624c75303d5d3f7ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0ca08467f70bd8ecacca624c75303d5d3f7ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "html_url": "https://github.com/rust-lang/rust/commit/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7100b311df0367c4d9067687573d1396b22411df", "url": "https://api.github.com/repos/rust-lang/rust/commits/7100b311df0367c4d9067687573d1396b22411df", "html_url": "https://github.com/rust-lang/rust/commit/7100b311df0367c4d9067687573d1396b22411df"}, {"sha": "76bf7c006959ccdf2d161f9113a86491b98e7eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/76bf7c006959ccdf2d161f9113a86491b98e7eae", "html_url": "https://github.com/rust-lang/rust/commit/76bf7c006959ccdf2d161f9113a86491b98e7eae"}], "stats": {"total": 510, "additions": 389, "deletions": 121}, "files": [{"sha": "5d9bc173364da64107d2b975fda7f74be34e6bd6", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -72,6 +72,7 @@ Daniel Ramos <dan@daramos.com>\n David Klein <david.klein@baesystemsdetica.com>\n David Manescu <david.manescu@gmail.com> <dman2626@uni.sydney.edu.au>\n David Ross <daboross@daboross.net>\n+Deadbeef <ent3rm4n@gmail.com> <fee1-dead-beef@protonmail.com>\n Derek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\n Diggory Hardy <diggory.hardy@gmail.com> Diggory Hardy <github@dhardy.name>\n Donough Liu <ldm2993593805@163.com> <donoughliu@gmail.com>"}, {"sha": "ec86ec44ece8e2e9a8a03ff23b600f21a847f710", "filename": "compiler/rustc_error_codes/src/error_codes/E0094.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -1,4 +1,4 @@\n-An invalid number of type parameters was given to an intrinsic function.\n+An invalid number of generic parameters was passed to an intrinsic function.\n \n Erroneous code example:\n "}, {"sha": "a56aefcef9cdd78da7ae7630891eff9c5b8e40cd", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -3,11 +3,11 @@\n \n use crate::errors::{\n     SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n-    WrongNumberOfTypeArgumentsToInstrinsic,\n+    WrongNumberOfGenericArgumentsToIntrinsic,\n };\n use crate::require_same_types;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n@@ -21,36 +21,45 @@ fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n     n_tps: usize,\n+    n_lts: usize,\n     sig: ty::PolyFnSig<'tcx>,\n ) {\n-    match it.kind {\n-        hir::ForeignItemKind::Fn(..) => {}\n+    let (own_counts, span) = match &it.kind {\n+        hir::ForeignItemKind::Fn(.., generics) => {\n+            let own_counts = tcx.generics_of(it.def_id.to_def_id()).own_counts();\n+            (own_counts, generics.span)\n+        }\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622, \"intrinsic must be a function\")\n                 .span_label(it.span, \"expected a function\")\n                 .emit();\n             return;\n         }\n-    }\n+    };\n \n-    let i_n_tps = tcx.generics_of(it.def_id).own_counts().types;\n-    if i_n_tps != n_tps {\n-        let span = match it.kind {\n-            hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n-            _ => bug!(),\n-        };\n+    let gen_count_ok = |found: usize, expected: usize, descr: &str| -> bool {\n+        if found != expected {\n+            tcx.sess.emit_err(WrongNumberOfGenericArgumentsToIntrinsic {\n+                span,\n+                found,\n+                expected,\n+                expected_pluralize: pluralize!(expected),\n+                descr,\n+            });\n+            false\n+        } else {\n+            true\n+        }\n+    };\n \n-        tcx.sess.emit_err(WrongNumberOfTypeArgumentsToInstrinsic {\n-            span,\n-            found: i_n_tps,\n-            expected: n_tps,\n-        });\n-        return;\n+    if gen_count_ok(own_counts.lifetimes, n_lts, \"lifetime\")\n+        && gen_count_ok(own_counts.types, n_tps, \"type\")\n+        && gen_count_ok(own_counts.consts, 0, \"const\")\n+    {\n+        let fty = tcx.mk_fn_ptr(sig);\n+        let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n+        require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n     }\n-\n-    let fty = tcx.mk_fn_ptr(sig);\n-    let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n-    require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n }\n \n /// Returns the unsafety of the given intrinsic.\n@@ -121,7 +130,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         })\n     };\n \n-    let (n_tps, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n+    let (n_tps, n_lts, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n         let split: Vec<&str> = name_str.split('_').collect();\n         assert!(split.len() >= 2, \"Atomic intrinsic in an incorrect format\");\n \n@@ -143,7 +152,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, hir::Unsafety::Unsafe)\n+        (n_tps, 0, inputs, output, hir::Unsafety::Unsafe)\n     } else {\n         let unsafety = intrinsic_operation_unsafety(intrinsic_name);\n         let (n_tps, inputs, output) = match intrinsic_name {\n@@ -372,11 +381,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, unsafety)\n+        (n_tps, 0, inputs, output, unsafety)\n     };\n     let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, n_lts, sig)\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n@@ -472,5 +481,5 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         Abi::PlatformIntrinsic,\n     );\n     let sig = ty::Binder::dummy(sig);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, 0, sig)\n }"}, {"sha": "1e6a240b2f86d857ce8761f7421775eca0287837", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -24,13 +24,15 @@ pub struct UnrecognizedAtomicOperation<'a> {\n \n #[derive(SessionDiagnostic)]\n #[error = \"E0094\"]\n-pub struct WrongNumberOfTypeArgumentsToInstrinsic {\n-    #[message = \"intrinsic has wrong number of type \\\n+pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n+    #[message = \"intrinsic has wrong number of {descr} \\\n                          parameters: found {found}, expected {expected}\"]\n-    #[label = \"expected {expected} type parameter\"]\n+    #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]\n     pub span: Span,\n     pub found: usize,\n     pub expected: usize,\n+    pub expected_pluralize: &'a str,\n+    pub descr: &'a str,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "d82669d3e2336622942d127aaf5ca0c2ad501e9e", "filename": "library/proc_macro/src/bridge/buffer.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -5,35 +5,6 @@ use std::mem;\n use std::ops::{Deref, DerefMut};\n use std::slice;\n \n-#[repr(C)]\n-struct Slice<'a, T> {\n-    data: &'a [T; 0],\n-    len: usize,\n-}\n-\n-unsafe impl<'a, T: Sync> Sync for Slice<'a, T> {}\n-unsafe impl<'a, T: Sync> Send for Slice<'a, T> {}\n-\n-impl<T> Copy for Slice<'a, T> {}\n-impl<T> Clone for Slice<'a, T> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n-impl<T> From<&'a [T]> for Slice<'a, T> {\n-    fn from(xs: &'a [T]) -> Self {\n-        Slice { data: unsafe { &*(xs.as_ptr() as *const [T; 0]) }, len: xs.len() }\n-    }\n-}\n-\n-impl<T> Deref for Slice<'a, T> {\n-    type Target = [T];\n-    fn deref(&self) -> &[T] {\n-        unsafe { slice::from_raw_parts(self.data.as_ptr(), self.len) }\n-    }\n-}\n-\n #[repr(C)]\n pub struct Buffer<T: Copy> {\n     data: *mut T,"}, {"sha": "e1d6324c17e336e021714b71f5ae6bd34cfb7784", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -217,26 +217,6 @@ impl<T> Mutex<T> {\n             data: UnsafeCell::new(t),\n         }\n     }\n-\n-    /// Immediately drops the guard, and consequently unlocks the mutex.\n-    ///\n-    /// This function is equivalent to calling [`drop`] on the guard but is more self-documenting.\n-    /// Alternately, the guard will be automatically dropped when it goes out of scope.\n-    ///\n-    /// ```\n-    /// #![feature(mutex_unlock)]\n-    ///\n-    /// use std::sync::Mutex;\n-    /// let mutex = Mutex::new(0);\n-    ///\n-    /// let mut guard = mutex.lock().unwrap();\n-    /// *guard += 20;\n-    /// Mutex::unlock(guard);\n-    /// ```\n-    #[unstable(feature = \"mutex_unlock\", issue = \"81872\")]\n-    pub fn unlock(guard: MutexGuard<'_, T>) {\n-        drop(guard);\n-    }\n }\n \n impl<T: ?Sized> Mutex<T> {\n@@ -333,6 +313,26 @@ impl<T: ?Sized> Mutex<T> {\n         }\n     }\n \n+    /// Immediately drops the guard, and consequently unlocks the mutex.\n+    ///\n+    /// This function is equivalent to calling [`drop`] on the guard but is more self-documenting.\n+    /// Alternately, the guard will be automatically dropped when it goes out of scope.\n+    ///\n+    /// ```\n+    /// #![feature(mutex_unlock)]\n+    ///\n+    /// use std::sync::Mutex;\n+    /// let mutex = Mutex::new(0);\n+    ///\n+    /// let mut guard = mutex.lock().unwrap();\n+    /// *guard += 20;\n+    /// Mutex::unlock(guard);\n+    /// ```\n+    #[unstable(feature = \"mutex_unlock\", issue = \"81872\")]\n+    pub fn unlock(guard: MutexGuard<'_, T>) {\n+        drop(guard);\n+    }\n+\n     /// Determines whether the mutex is poisoned.\n     ///\n     /// If another thread is active, the mutex can still become poisoned at any"}, {"sha": "0734d2670ccfae7b07379fc8630d3408937a67f2", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -219,6 +219,7 @@ crate fn get_index_search_type<'tcx>(\n fn get_index_type(clean_type: &clean::Type) -> RenderType {\n     RenderType {\n         name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n+        generics: get_generics(clean_type),\n     }\n }\n \n@@ -251,6 +252,23 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     }\n }\n \n+/// Return a list of generic parameters for use in the search index.\n+///\n+/// This function replaces bounds with types, so that `T where T: Debug` just becomes `Debug`.\n+/// It does return duplicates, and that's intentional, since search queries like `Result<usize, usize>`\n+/// are supposed to match only results where both parameters are `usize`.\n+fn get_generics(clean_type: &clean::Type) -> Option<Vec<String>> {\n+    clean_type.generics().and_then(|types| {\n+        let r = types\n+            .iter()\n+            .filter_map(|t| {\n+                get_index_type_name(t, false).map(|name| name.as_str().to_ascii_lowercase())\n+            })\n+            .collect::<Vec<_>>();\n+        if r.is_empty() { None } else { Some(r) }\n+    })\n+}\n+\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return"}, {"sha": "0583efa92ffad2646a39581ef3f15b1fab7522fa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -96,6 +96,7 @@ crate struct IndexItem {\n #[derive(Debug)]\n crate struct RenderType {\n     name: Option<String>,\n+    generics: Option<Vec<String>>,\n }\n \n /// Full type of functions/methods in the search index.\n@@ -149,7 +150,13 @@ impl Serialize for TypeWithKind {\n     where\n         S: Serializer,\n     {\n-        (&self.ty.name, self.kind).serialize(serializer)\n+        let mut seq = serializer.serialize_seq(None)?;\n+        seq.serialize_element(&self.ty.name)?;\n+        seq.serialize_element(&self.kind)?;\n+        if let Some(generics) = &self.ty.generics {\n+            seq.serialize_element(generics)?;\n+        }\n+        seq.end()\n     }\n }\n "}, {"sha": "a7fc0b831f410f5a91ee7eadb37592d398166cb1", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -106,7 +106,7 @@ function levenshtein(s1, s2) {\n window.initSearch = function(rawSearchIndex) {\n     var MAX_LEV_DISTANCE = 3;\n     var MAX_RESULTS = 200;\n-    var GENERICS_DATA = 1;\n+    var GENERICS_DATA = 2;\n     var NAME = 0;\n     var INPUTS_DATA = 0;\n     var OUTPUT_DATA = 1;\n@@ -306,6 +306,9 @@ window.initSearch = function(rawSearchIndex) {\n                     var elems = Object.create(null);\n                     var elength = obj[GENERICS_DATA].length;\n                     for (var x = 0; x < elength; ++x) {\n+                        if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n+                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                        }\n                         elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n                     }\n                     var total = 0;\n@@ -354,10 +357,13 @@ window.initSearch = function(rawSearchIndex) {\n                 if (literalSearch) {\n                     if (val.generics && val.generics.length !== 0) {\n                         if (obj.length > GENERICS_DATA &&\n-                              obj[GENERICS_DATA].length >= val.generics.length) {\n+                             obj[GENERICS_DATA].length > 0) {\n                             var elems = Object.create(null);\n                             len = obj[GENERICS_DATA].length;\n                             for (x = 0; x < len; ++x) {\n+                                if (!elems[getObjectNameFromId(obj[GENERICS_DATA][x])]) {\n+                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] = 0;\n+                                }\n                                 elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n                             }\n \n@@ -375,26 +381,23 @@ window.initSearch = function(rawSearchIndex) {\n                             if (allFound) {\n                                 return true;\n                             }\n-                        } else {\n-                            return false;\n                         }\n+                        return false;\n                     }\n                     return true;\n-                }\n-                // If the type has generics but don't match, then it won't return at this point.\n-                // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length !== 0) {\n-                    var tmp_lev = checkGenerics(obj, val);\n-                    if (tmp_lev <= MAX_LEV_DISTANCE) {\n-                        return tmp_lev;\n-                    }\n                 } else {\n-                    return 0;\n+                    // If the type has generics but don't match, then it won't return at this point.\n+                    // Otherwise, `checkGenerics` will return 0 and it'll return.\n+                    if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length !== 0) {\n+                        var tmp_lev = checkGenerics(obj, val);\n+                        if (tmp_lev <= MAX_LEV_DISTANCE) {\n+                            return tmp_lev;\n+                        }\n+                    }\n                 }\n-            }\n-            // Names didn't match so let's check if one of the generic types could.\n-            if (literalSearch) {\n-                 if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n+            } else if (literalSearch) {\n+                if ((!val.generics || val.generics.length === 0) &&\n+                      obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n                     return obj[GENERICS_DATA].some(\n                         function(name) {\n                             return name === val.name;\n@@ -1167,7 +1170,48 @@ window.initSearch = function(rawSearchIndex) {\n             return ret;\n         }\n \n-        var queries = query.raw.split(\",\");\n+        // Split search query by \",\", while respecting angle bracket nesting.\n+        // Since \"<\" is an alias for the Ord family of traits, it also uses\n+        // lookahead to distinguish \"<\"-as-less-than from \"<\"-as-angle-bracket.\n+        //\n+        // tokenizeQuery(\"A<B, C>, D\") == [\"A<B, C>\", \"D\"]\n+        // tokenizeQuery(\"A<B, C, D\") == [\"A<B\", \"C\", \"D\"]\n+        function tokenizeQuery(raw) {\n+            var i, matched;\n+            var l = raw.length;\n+            var depth = 0;\n+            var nextAngle = /(<|>)/g;\n+            var ret = [];\n+            var start = 0;\n+            for (i = 0; i < l; ++i) {\n+                switch (raw[i]) {\n+                    case \"<\":\n+                        nextAngle.lastIndex = i + 1;\n+                        matched = nextAngle.exec(raw);\n+                        if (matched && matched[1] === '>') {\n+                            depth += 1;\n+                        }\n+                        break;\n+                    case \">\":\n+                        if (depth > 0) {\n+                            depth -= 1;\n+                        }\n+                        break;\n+                    case \",\":\n+                        if (depth === 0) {\n+                            ret.push(raw.substring(start, i));\n+                            start = i + 1;\n+                        }\n+                        break;\n+                }\n+            }\n+            if (start !== i) {\n+                ret.push(raw.substring(start, i));\n+            }\n+            return ret;\n+        }\n+\n+        var queries = tokenizeQuery(query.raw);\n         var results = {\n             \"in_args\": [],\n             \"returned\": [],"}, {"sha": "bf2bb4d2981fc99419fcaeadf78d526b141761b2", "filename": "src/test/rustdoc-js-std/alias-4.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js-std%2Falias-4.js", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js-std%2Falias-4.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-4.js?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = '<';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'name': 'Ord' },\n+    ],\n+};"}, {"sha": "7876622435b609ec410e47c16ded03534d2fcd71", "filename": "src/test/rustdoc-js/generics-trait.js", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.js?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,23 @@\n+const QUERY = [\n+    'Result<SomeTrait>',\n+    'OtherThingxxxxxxxx',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'beta' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'bet' },\n+        ],\n+    },\n+    {\n+        'in_args': [\n+            { 'path': 'generics_trait', 'name': 'alpha' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics_trait', 'name': 'alef' },\n+        ],\n+    },\n+];"}, {"sha": "20db117ccd5ceb9b06e1ebcc320ee8b6f084cb7d", "filename": "src/test/rustdoc-js/generics-trait.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics-trait.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,8 @@\n+pub trait SomeTrait {}\n+pub trait OtherThingxxxxxxxx {}\n+\n+pub fn alef<T: OtherThingxxxxxxxx>() -> Result<T, ()> { loop {} }\n+pub fn bet<T: SomeTrait>() -> Result<T, ()> { loop {} }\n+\n+pub fn alpha<T: OtherThingxxxxxxxx>(_param: Result<T, ()>) { loop {} }\n+pub fn beta<T: SomeTrait>(_param: Result<T, ()>) { loop {} }"}, {"sha": "49a80ae2360f542723017c49ab17dee74c724b0d", "filename": "src/test/rustdoc-js/generics.js", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.js?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,44 @@\n+// exact-check\n+\n+const QUERY = [\n+  '\"R<P>\"',\n+  '\"P\"',\n+  'P',\n+  '\"ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\"',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'generics', 'name': 'P' },\n+        ],\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'returned': [\n+            { 'path': 'generics', 'name': 'alef' },\n+        ],\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'alpha' },\n+        ],\n+    },\n+    {\n+        'in_args': [\n+            { 'path': 'generics', 'name': 'extracreditlabhomework' },\n+        ],\n+        'returned': [],\n+    },\n+];"}, {"sha": "a0dc086e9f9cfe17b55dabf6769ed1c1aa2620f4", "filename": "src/test/rustdoc-js/generics.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Frustdoc-js%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,21 @@\n+pub struct P;\n+pub struct Q;\n+pub struct R<T>(T);\n+\n+// returns test\n+pub fn alef() -> R<P> { loop {} }\n+pub fn bet() -> R<Q> { loop {} }\n+\n+// in_args test\n+pub fn alpha(_x: R<P>) { loop {} }\n+pub fn beta(_x: R<Q>) { loop {} }\n+\n+// test case with multiple appearances of the same type\n+pub struct ExtraCreditStructMulti<T, U> { t: T, u: U }\n+pub struct ExtraCreditInnerMulti {}\n+pub fn extracreditlabhomework(\n+    _param: ExtraCreditStructMulti<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\n+) { loop {} }\n+pub fn redherringmatchforextracredit(\n+    _param: ExtraCreditStructMulti<ExtraCreditInnerMulti, ()>\n+) { loop {} }"}, {"sha": "734ce17001edd8f855dce50698851a4f79fd048d", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+#![feature(staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait MyTrait {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn func();\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Unstable;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"staged\", issue = \"none\")]\n+impl const MyTrait for Unstable {\n+    fn func() {\n+\n+    }\n+}"}, {"sha": "abd11d8b0e92338a42bc0ac5bd929125f9d4f38d", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-disabled.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7100b311df0367c4d9067687573d1396b22411df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7100b311df0367c4d9067687573d1396b22411df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate-feature-disabled.rs?ref=7100b311df0367c4d9067687573d1396b22411df", "patch": "@@ -1,18 +0,0 @@\n-// aux-build: cross-crate.rs\n-extern crate cross_crate;\n-\n-use cross_crate::*;\n-\n-fn non_const_context() {\n-    NonConst.func();\n-    Const.func();\n-}\n-\n-const fn const_context() {\n-    NonConst.func();\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-    Const.func();\n-    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-}\n-\n-fn main() {}"}, {"sha": "30baa38547580cdd35bc0991803c14f9aeef50e5", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gated.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate-feature-enabled.rs:15:5\n+  --> $DIR/cross-crate.rs:16:5\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-enabled.stderr"}, {"sha": "c28ff638958419148dfa2ae1bd73b30a68b34871", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -1,4 +1,5 @@\n-#![feature(const_trait_impl)]\n+// revisions: stock gated\n+#![cfg_attr(gated, feature(const_trait_impl))]\n #![allow(incomplete_features)]\n \n // aux-build: cross-crate.rs\n@@ -15,6 +16,7 @@ const fn const_context() {\n     NonConst.func();\n     //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n     Const.func();\n+    //[stock]~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n }\n \n fn main() {}", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-enabled.rs"}, {"sha": "e6a86f251ca3c31d2028c54617c184860c391e47", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stock.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stock.stderr?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate-feature-disabled.rs:12:5\n+  --> $DIR/cross-crate.rs:16:5\n    |\n LL |     NonConst.func();\n    |     ^^^^^^^^^^^^^^^\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/cross-crate-feature-disabled.rs:14:5\n+  --> $DIR/cross-crate.rs:18:5\n    |\n LL |     Const.func();\n    |     ^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate-feature-disabled.stderr"}, {"sha": "39a1b6066dea35409dcc41b7f4b7902785b7597e", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,39 @@\n+// revisions: stock staged\n+#![cfg_attr(staged, feature(staged))]\n+\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+#![feature(staged_api)]\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+// aux-build: staged-api.rs\n+extern crate staged_api;\n+\n+use staged_api::*;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub struct Stable;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(staged, rustc_const_stable(feature = \"rust1\", since = \"1.0.0\"))]\n+// ^ should trigger error with or without the attribute\n+impl const MyTrait for Stable {\n+    fn func() { //~ ERROR trait methods cannot be stable const fn\n+\n+    }\n+}\n+\n+fn non_const_context() {\n+    Unstable::func();\n+    Stable::func();\n+}\n+\n+#[unstable(feature = \"none\", issue = \"none\")]\n+const fn const_context() {\n+    Unstable::func();\n+    //[stock]~^ ERROR `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n+    Stable::func();\n+}\n+\n+fn main() {}"}, {"sha": "d2ff4ce2001304e52a294429cc9337385da818b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.staged.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,10 @@\n+error: trait methods cannot be stable const fn\n+  --> $DIR/staged-api.rs:22:5\n+   |\n+LL | /     fn func() {\n+LL | |\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+"}, {"sha": "91c5469bd90a5d5f9f0adf8f420984d9337a318f", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stock.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,18 @@\n+error: trait methods cannot be stable const fn\n+  --> $DIR/staged-api.rs:22:5\n+   |\n+LL | /     fn func() {\n+LL | |\n+LL | |     }\n+   | |_____^\n+\n+error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:34:5\n+   |\n+LL |     Unstable::func();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(staged)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f276fbd669470baa2e94ccf00ab5ccd2d5995126", "filename": "src/test/ui/simd-intrinsic/issue-85855.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,19 @@\n+// Check that appropriate errors are reported if an intrinsic is defined\n+// with the wrong number of generic lifetime/type/const parameters, and\n+// that no ICE occurs in these cases.\n+\n+#![feature(platform_intrinsics)]\n+#![crate_type=\"lib\"]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of lifetime parameters\n+\n+    fn simd_add<'a, T>(x: T, y: T) -> T;\n+\n+    fn simd_sub<T, U>(x: T, y: U);\n+    //~^ ERROR: intrinsic has wrong number of type parameters\n+\n+    fn simd_mul<T, const N: usize>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of const parameters\n+}"}, {"sha": "fb2f1fbc5b1ccc47b756d29b82e45b69ea00b7fd", "filename": "src/test/ui/simd-intrinsic/issue-85855.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -0,0 +1,21 @@\n+error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:9:27\n+   |\n+LL |     fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+   |                           ^^^^^^^^^^^ expected 0 lifetime parameters\n+\n+error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n+  --> $DIR/issue-85855.rs:14:16\n+   |\n+LL |     fn simd_sub<T, U>(x: T, y: U);\n+   |                ^^^^^^ expected 1 type parameter\n+\n+error[E0094]: intrinsic has wrong number of const parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:17:16\n+   |\n+LL |     fn simd_mul<T, const N: usize>(x: T, y: T);\n+   |                ^^^^^^^^^^^^^^^^^^^ expected 0 const parameters\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0094`."}, {"sha": "968b80414bcfe4c93362b8375ec7608d19f0517f", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/56dee7c49ecdec4c2c9eccc6ff966cf58847bda6/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6", "patch": "@@ -4,7 +4,7 @@ allow-unauthenticated = [\n     \"D-*\",\n     \"requires-nightly\",\n     \"regression-*\",\n-    \"perf-regression\",\n+    \"perf-*\",\n     # I-* without I-nominated\n     \"I-*\", \"!I-nominated\",\n     \"AsyncAwait-OnDeck\","}]}