{"sha": "b7fe2ca5e09b8edab393073198f8f55e1a78079f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZmUyY2E1ZTA5YjhlZGFiMzkzMDczMTk4ZjhmNTVlMWE3ODA3OWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-28T14:48:03Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-06-21T07:54:58Z"}, "message": "Stabilize profile-guided optimization.", "tree": {"sha": "82ea23a980699d42e2bb9d13b7d8c8eeaee8705e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ea23a980699d42e2bb9d13b7d8c8eeaee8705e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7fe2ca5e09b8edab393073198f8f55e1a78079f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe2ca5e09b8edab393073198f8f55e1a78079f", "html_url": "https://github.com/rust-lang/rust/commit/b7fe2ca5e09b8edab393073198f8f55e1a78079f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe2ca5e09b8edab393073198f8f55e1a78079f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314194ef1785b130bfb85589fa44b6d53f50c565", "url": "https://api.github.com/repos/rust-lang/rust/commits/314194ef1785b130bfb85589fa44b6d53f50c565", "html_url": "https://github.com/rust-lang/rust/commit/314194ef1785b130bfb85589fa44b6d53f50c565"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "b5fe9c72ed0560af26e73329989854133302680c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -1221,7 +1221,11 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],\n         \"generate build artifacts that are compatible with linker-based LTO.\"),\n-\n+    profile_generate: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n+        parse_switch_with_opt_path, [TRACKED],\n+        \"compile the program with profiling instrumentation\"),\n+    profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"use the given `.profdata` file for profile-guided optimization\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n@@ -1395,11 +1399,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n-    pgo_gen: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n-        parse_switch_with_opt_path, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n-    pgo_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n-        \"Use PGO profile data from the given profile file.\"),\n     disable_instrumentation_preinliner: bool = (false, parse_bool, [TRACKED],\n         \"Disable the instrumentation pre-inliner, useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n@@ -2052,13 +2051,6 @@ pub fn build_session_options_and_crate_config(\n         }\n     }\n \n-    if debugging_opts.pgo_gen.enabled() && debugging_opts.pgo_use.is_some() {\n-        early_error(\n-            error_format,\n-            \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n-        );\n-    }\n-\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -2170,6 +2162,13 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if cg.profile_generate.enabled() && cg.profile_use.is_some() {\n+        early_error(\n+            error_format,\n+            \"options `-C profile-generate` and `-C profile-use` are exclusive\",\n+        );\n+    }\n+\n     let mut prints = Vec::<PrintRequest>::new();\n     if cg.target_cpu.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::TargetCPUs);"}, {"sha": "3d6312548a47bcf58b13688c0905092402bbd7fa", "filename": "src/librustc/session/config/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -519,11 +519,11 @@ fn test_codegen_options_tracking_hash() {\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.pgo_gen = SwitchWithOptPath::Enabled(None);\n+    opts.cg.profile_generate = SwitchWithOptPath::Enabled(None);\n     assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();\n-    opts.debugging_opts.pgo_use = Some(PathBuf::from(\"abc\"));\n+    opts.cg.profile_use = Some(PathBuf::from(\"abc\"));\n     assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n     opts = reference.clone();"}, {"sha": "18e95ff328f862b240e9a64c03c42043f94aa468", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -1290,9 +1290,9 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n \n     // Make sure that any given profiling data actually exists so LLVM can't\n     // decide to silently skip PGO.\n-    if let Some(ref path) = sess.opts.debugging_opts.pgo_use {\n+    if let Some(ref path) = sess.opts.cg.profile_use {\n         if !path.exists() {\n-            sess.err(&format!(\"File `{}` passed to `-Zpgo-use` does not exist.\",\n+            sess.err(&format!(\"File `{}` passed to `-C profile-use` does not exist.\",\n                               path.display()));\n         }\n     }\n@@ -1301,7 +1301,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // an error to combine the two for now. It always runs into an assertions\n     // if LLVM is built with assertions, but without assertions it sometimes\n     // does not crash and will probably generate a corrupted binary.\n-    if sess.opts.debugging_opts.pgo_gen.enabled() &&\n+    if sess.opts.cg.profile_generate.enabled() &&\n        sess.target.target.options.is_like_msvc &&\n        sess.panic_strategy() == PanicStrategy::Unwind {\n         sess.err(\"Profile-guided optimization does not yet work in conjunction \\"}, {"sha": "94abf1796d3665f4dd1b904fbd0a97d1f162fdef", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -102,8 +102,8 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         return\n     }\n \n-    // probestack doesn't play nice either with pgo-gen.\n-    if cx.sess().opts.debugging_opts.pgo_gen.enabled() {\n+    // probestack doesn't play nice either with `-C profile-generate`.\n+    if cx.sess().opts.cg.profile_generate.enabled() {\n         return;\n     }\n "}, {"sha": "a6f403dcdcbdb4187748439a486a0933d2fb52a7", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -1156,7 +1156,7 @@ fn link_args<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n         cmd.build_static_executable();\n     }\n \n-    if sess.opts.debugging_opts.pgo_gen.enabled() {\n+    if sess.opts.cg.profile_generate.enabled() {\n         cmd.pgo_gen();\n     }\n "}, {"sha": "4715dee81a4c9a0e2a7c216955c376509c76122b", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -203,7 +203,7 @@ fn exported_symbols_provider_local<'tcx>(\n         }\n     }\n \n-    if tcx.sess.opts.debugging_opts.pgo_gen.enabled() {\n+    if tcx.sess.opts.cg.profile_generate.enabled() {\n         // These are weak symbols that point to the profile version and the\n         // profile name, which need to be treated as exported so LTO doesn't nix\n         // them."}, {"sha": "6364843d77267de19a7a59dc0ad6474839049bfd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -423,8 +423,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n-    modules_config.pgo_gen = sess.opts.debugging_opts.pgo_gen.clone();\n-    modules_config.pgo_use = sess.opts.debugging_opts.pgo_use.clone();\n+    modules_config.pgo_gen = sess.opts.cg.profile_generate.clone();\n+    modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n \n     modules_config.opt_level = Some(sess.opts.optimize);\n     modules_config.opt_size = Some(sess.opts.optimize);"}, {"sha": "2073b317939d78acea4e30e8b64071d1fc09c0df", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -868,7 +868,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile ||\n-            self.sess.opts.debugging_opts.pgo_gen.enabled()\n+           self.sess.opts.cg.profile_generate.enabled()\n         {\n             info!(\"loading profiler\");\n "}, {"sha": "8200cf4e0167b89d70422b10676da3ca6856cb58", "filename": "src/test/codegen/pgo-instrumentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpgo-instrumentation.rs?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -1,8 +1,8 @@\n-// Test that `-Zpgo-gen` creates expected instrumentation artifacts in LLVM IR.\n+// Test that `-Cprofile-generate` creates expected instrumentation artifacts in LLVM IR.\n // Compiling with `-Cpanic=abort` because PGO+unwinding isn't supported on all platforms.\n \n // needs-profiler-support\n-// compile-flags: -Z pgo-gen -Ccodegen-units=1 -Cpanic=abort\n+// compile-flags: -Cprofile-generate -Ccodegen-units=1 -Cpanic=abort\n \n // CHECK: @__llvm_profile_raw_version =\n // CHECK: @__profc_{{.*}}pgo_instrumentation{{.*}}some_function{{.*}} = private global"}, {"sha": "f8efeca56141b4f499d9c9ff58571bc851ae76e3", "filename": "src/test/run-make-fulldeps/cross-lang-lto-pgo-smoketest/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-pgo-smoketest%2FMakefile?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -21,7 +21,7 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-gen=\"$(TMPDIR)\"/cpp-profdata \\\n+\t         -Cprofile-generate=\"$(TMPDIR)\"/cpp-profdata \\\n \t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n \t         $(COMMON_FLAGS) \\\n \t         ./rustlib.rs\n@@ -39,7 +39,7 @@ cpp-executable:\n \t\t-o \"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n \t\t\"$(TMPDIR)\"/cpp-profdata/default_*.profraw\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n+\t         -Cprofile-use=\"$(TMPDIR)\"/cpp-profdata/merged.profdata \\\n \t         -o \"$(TMPDIR)\"/librustlib-xlto.a \\\n \t         $(COMMON_FLAGS) \\\n \t         ./rustlib.rs\n@@ -57,7 +57,7 @@ rust-executable:\n \t$(CLANG) ./clib.c -fprofile-generate=\"$(TMPDIR)\"/rs-profdata -flto=thin -c -o $(TMPDIR)/clib.o -O3\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-gen=\"$(TMPDIR)\"/rs-profdata \\\n+\t         -Cprofile-generate=\"$(TMPDIR)\"/rs-profdata \\\n \t         -L$(TMPDIR) \\\n \t         $(COMMON_FLAGS) \\\n \t         -Clinker=$(CLANG) \\\n@@ -78,7 +78,7 @@ rust-executable:\n \trm \"$(TMPDIR)\"/libxyz.a\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on \\\n-\t         -Zpgo-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n+\t         -Cprofile-use=\"$(TMPDIR)\"/rs-profdata/merged.profdata \\\n \t         -L$(TMPDIR) \\\n \t         $(COMMON_FLAGS) \\\n \t         -Clinker=$(CLANG) \\"}, {"sha": "6c70d951c35eac1bab13496f79935c2824573f4d", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-Copt-level=3 -Clto=fat -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "3fbfeb09eb373d308e67a25b53b04084e5fe6b3c", "filename": "src/test/run-make-fulldeps/pgo-gen-no-imp-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-no-imp-symbols%2FMakefile?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-O -Ccodegen-units=1 -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-O -Ccodegen-units=1 -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "3b66427c14c297dfb781d4ceb0e41a85c0e3e97a", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -2,7 +2,7 @@\n \n -include ../tools.mk\n \n-COMPILE_FLAGS=-g -Z pgo-gen=\"$(TMPDIR)\"\n+COMPILE_FLAGS=-g -Cprofile-generate=\"$(TMPDIR)\"\n \n # LLVM doesn't yet support instrumenting binaries that use unwinding on MSVC:\n # https://github.com/rust-lang/rust/issues/61002"}, {"sha": "61a73587759fece06a54b7fb37190baab494e379", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b7fe2ca5e09b8edab393073198f8f55e1a78079f/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=b7fe2ca5e09b8edab393073198f8f55e1a78079f", "patch": "@@ -33,15 +33,15 @@ endif\n \n all:\n \t# Compile the test program with instrumentation\n-\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-gen=\"$(TMPDIR)\" main.rs\n+\t$(RUSTC) $(COMMON_FLAGS) -Cprofile-generate=\"$(TMPDIR)\" main.rs\n \t# Run it in order to generate some profiling data\n \t$(call RUN,main some-argument) || exit 1\n \t# Postprocess the profiling data so it can be used by the compiler\n \t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n \t\t-o \"$(TMPDIR)\"/merged.profdata \\\n \t\t\"$(TMPDIR)\"/default_*.profraw\n \t# Compile the test program again, making use of the profiling data\n-\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n+\t$(RUSTC) $(COMMON_FLAGS) -Cprofile-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n \t# Check that the generate IR contains some things that we expect\n \t#\n \t# We feed the file into LLVM FileCheck tool *in reverse* so that we see the"}]}