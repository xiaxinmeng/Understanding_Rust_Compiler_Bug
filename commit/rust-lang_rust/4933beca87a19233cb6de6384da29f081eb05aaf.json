{"sha": "4933beca87a19233cb6de6384da29f081eb05aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MzNiZWNhODdhMTkyMzNjYjZkZTYzODRkYTI5ZjA4MWViMDVhYWY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-22T17:12:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-22T17:12:45Z"}, "message": "Respect attributes in Hygiene token up-mapping", "tree": {"sha": "f9fc15edcc3e0f4f164888b616ecae776f1d948d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9fc15edcc3e0f4f164888b616ecae776f1d948d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4933beca87a19233cb6de6384da29f081eb05aaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4933beca87a19233cb6de6384da29f081eb05aaf", "html_url": "https://github.com/rust-lang/rust/commit/4933beca87a19233cb6de6384da29f081eb05aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4933beca87a19233cb6de6384da29f081eb05aaf/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0", "html_url": "https://github.com/rust-lang/rust/commit/5fb8c0ddfd6fe948f93ed36c86b05bb5076c94d0"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "5deb59ae31f0edb77e81a08dbb040cf99cf7569a", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 55, "deletions": 24, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4933beca87a19233cb6de6384da29f081eb05aaf/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4933beca87a19233cb6de6384da29f081eb05aaf/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=4933beca87a19233cb6de6384da29f081eb05aaf", "patch": "@@ -9,12 +9,15 @@ use db::TokenExpander;\n use either::Either;\n use mbe::Origin;\n use parser::SyntaxKind;\n-use syntax::{ast, AstNode, SyntaxNode, TextRange, TextSize};\n+use syntax::{\n+    ast::{self, AttrsOwner},\n+    AstNode, SyntaxNode, TextRange, TextSize,\n+};\n \n use crate::{\n     db::{self, AstDatabase},\n     name::{AsName, Name},\n-    HirFileId, HirFileIdRepr, InFile, MacroCallLoc, MacroDefKind, MacroFile,\n+    HirFileId, HirFileIdRepr, InFile, MacroCallKind, MacroCallLoc, MacroDefKind, MacroFile,\n };\n \n #[derive(Clone, Debug)]\n@@ -121,11 +124,12 @@ impl HygieneFrames {\n #[derive(Debug, Clone, PartialEq, Eq)]\n struct HygieneInfo {\n     file: MacroFile,\n-    /// The `macro_rules!` arguments.\n-    def_start: Option<InFile<TextSize>>,\n+    /// The start offset of the `macro_rules!` arguments or attribute input.\n+    attr_input_or_mac_def_start: Option<InFile<TextSize>>,\n \n     macro_def: Arc<TokenExpander>,\n     macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n+    macro_arg_shift: mbe::Shift,\n     exp_map: Arc<mbe::TokenMap>,\n }\n \n@@ -136,22 +140,34 @@ impl HygieneInfo {\n         token: TextRange,\n     ) -> Option<(InFile<TextRange>, Origin)> {\n         let token_id = self.exp_map.token_by_range(token)?;\n+        let (mut token_id, origin) = self.macro_def.map_id_up(token_id);\n \n-        let (token_id, origin) = self.macro_def.map_id_up(token_id);\n-        let (token_map, tt) = match origin {\n-            mbe::Origin::Call => {\n-                let call_id = self.file.macro_call_id;\n-                let loc: MacroCallLoc = db.lookup_intern_macro(call_id);\n-                let arg_start = loc.kind.arg(db)?.text_range().start();\n-                (&self.macro_arg.1, InFile::new(loc.kind.file_id(), arg_start))\n-            }\n-            mbe::Origin::Def => match (&*self.macro_def, self.def_start) {\n-                (\n-                    TokenExpander::MacroDef { def_site_token_map, .. }\n-                    | TokenExpander::MacroRules { def_site_token_map, .. },\n-                    Some(tt),\n-                ) => (def_site_token_map, tt),\n-                _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n+        let loc = db.lookup_intern_macro(self.file.macro_call_id);\n+\n+        let (token_map, tt) = match &loc.kind {\n+            MacroCallKind::Attr { attr_args, .. } => match self.macro_arg_shift.unshift(token_id) {\n+                Some(unshifted) => {\n+                    token_id = unshifted;\n+                    (&attr_args.1, self.attr_input_or_mac_def_start?)\n+                }\n+                None => (\n+                    &self.macro_arg.1,\n+                    InFile::new(loc.kind.file_id(), loc.kind.arg(db)?.text_range().start()),\n+                ),\n+            },\n+            _ => match origin {\n+                mbe::Origin::Call => (\n+                    &self.macro_arg.1,\n+                    InFile::new(loc.kind.file_id(), loc.kind.arg(db)?.text_range().start()),\n+                ),\n+                mbe::Origin::Def => match (&*self.macro_def, &self.attr_input_or_mac_def_start) {\n+                    (\n+                        TokenExpander::MacroDef { def_site_token_map, .. }\n+                        | TokenExpander::MacroRules { def_site_token_map, .. },\n+                        Some(tt),\n+                    ) => (def_site_token_map, *tt),\n+                    _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n+                },\n             },\n         };\n \n@@ -165,19 +181,34 @@ fn make_hygiene_info(\n     macro_file: MacroFile,\n     loc: &MacroCallLoc,\n ) -> Option<HygieneInfo> {\n-    let def_offset = loc.def.ast_id().left().and_then(|id| {\n+    let def = loc.def.ast_id().left().and_then(|id| {\n         let def_tt = match id.to_node(db) {\n-            ast::Macro::MacroRules(mac) => mac.token_tree()?.syntax().text_range().start(),\n-            ast::Macro::MacroDef(mac) => mac.body()?.syntax().text_range().start(),\n+            ast::Macro::MacroRules(mac) => mac.token_tree()?,\n+            ast::Macro::MacroDef(mac) => mac.body()?,\n         };\n         Some(InFile::new(id.file_id, def_tt))\n     });\n+    let attr_input_or_mac_def = def.or_else(|| match loc.kind {\n+        MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n+            let tt = ast_id.to_node(db).attrs().nth(invoc_attr_index as usize)?.token_tree()?;\n+            Some(InFile::new(ast_id.file_id, tt))\n+        }\n+        _ => None,\n+    });\n \n     let macro_def = db.macro_def(loc.def)?;\n     let (_, exp_map) = db.parse_macro_expansion(macro_file).value?;\n     let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n-    Some(HygieneInfo { file: macro_file, def_start: def_offset, macro_arg, macro_def, exp_map })\n+    Some(HygieneInfo {\n+        file: macro_file,\n+        attr_input_or_mac_def_start: attr_input_or_mac_def\n+            .map(|it| it.map(|tt| tt.syntax().text_range().start())),\n+        macro_arg_shift: mbe::Shift::new(&macro_arg.0),\n+        macro_arg,\n+        macro_def,\n+        exp_map,\n+    })\n }\n \n impl HygieneFrame {\n@@ -214,7 +245,7 @@ impl HygieneFrame {\n             Some(it) => it,\n         };\n \n-        let def_site = info.def_start.map(|it| db.hygiene_frame(it.file_id));\n+        let def_site = info.attr_input_or_mac_def_start.map(|it| db.hygiene_frame(it.file_id));\n         let call_site = Some(db.hygiene_frame(calling_file));\n \n         HygieneFrame { expansion: Some(info), local_inner, krate, call_site, def_site }"}, {"sha": "40380e1df17dc25de1a5498cd81b2bc8b278fc89", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4933beca87a19233cb6de6384da29f081eb05aaf/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4933beca87a19233cb6de6384da29f081eb05aaf/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=4933beca87a19233cb6de6384da29f081eb05aaf", "patch": "@@ -133,13 +133,13 @@ impl HirFileId {\n                     };\n                     Some(InFile::new(id.file_id, def_tt))\n                 });\n-                let def_or_attr_input = def.or_else(|| match loc.kind {\n+                let attr_input_or_mac_def = def.or_else(|| match loc.kind {\n                     MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => {\n                         let tt = ast_id\n                             .to_node(db)\n                             .attrs()\n-                            .nth(invoc_attr_index as usize)\n-                            .and_then(|attr| attr.token_tree())?;\n+                            .nth(invoc_attr_index as usize)?\n+                            .token_tree()?;\n                         Some(InFile::new(ast_id.file_id, tt))\n                     }\n                     _ => None,\n@@ -152,7 +152,7 @@ impl HirFileId {\n                 Some(ExpansionInfo {\n                     expanded: InFile::new(self, parse.syntax_node()),\n                     arg: InFile::new(loc.kind.file_id(), arg_tt),\n-                    attr_input_or_mac_def: def_or_attr_input,\n+                    attr_input_or_mac_def,\n                     macro_arg_shift: mbe::Shift::new(&macro_arg.0),\n                     macro_arg,\n                     macro_def,\n@@ -443,7 +443,7 @@ impl ExpansionInfo {\n             },\n             _ => match origin {\n                 mbe::Origin::Call => (&self.macro_arg.1, self.arg.clone()),\n-                mbe::Origin::Def => match (&*self.macro_def, self.attr_input_or_mac_def.as_ref()) {\n+                mbe::Origin::Def => match (&*self.macro_def, &self.attr_input_or_mac_def) {\n                     (\n                         TokenExpander::MacroRules { def_site_token_map, .. }\n                         | TokenExpander::MacroDef { def_site_token_map, .. },"}]}