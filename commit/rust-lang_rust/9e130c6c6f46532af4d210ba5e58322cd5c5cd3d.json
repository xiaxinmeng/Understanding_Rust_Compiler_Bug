{"sha": "9e130c6c6f46532af4d210ba5e58322cd5c5cd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMTMwYzZjNmY0NjUzMmFmNGQyMTBiYTVlNTgzMjJjZDVjNWNkM2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T07:51:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T08:07:22Z"}, "message": "fix for changd machine trait signatures", "tree": {"sha": "31638fca81f7deed170bddb3eddb093c54537640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31638fca81f7deed170bddb3eddb093c54537640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d", "html_url": "https://github.com/rust-lang/rust/commit/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa243be78e4be2ca8d5e79fea26fe87deb720ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa243be78e4be2ca8d5e79fea26fe87deb720ae", "html_url": "https://github.com/rust-lang/rust/commit/4fa243be78e4be2ca8d5e79fea26fe87deb720ae"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d1cf913a75bfd9c1e07618579b36fa7ce12ec66e", "filename": "src/machine.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e130c6c6f46532af4d210ba5e58322cd5c5cd3d/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=9e130c6c6f46532af4d210ba5e58322cd5c5cd3d", "patch": "@@ -11,7 +11,7 @@ use rand::rngs::StdRng;\n use syntax::attr;\n use syntax::symbol::sym;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, layout::{Size, LayoutOf}, query::TyCtxtAt};\n+use rustc::ty::{self, layout::{Size, LayoutOf}, TyCtxt};\n use rustc::mir;\n \n use crate::*;\n@@ -232,8 +232,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn find_foreign_static(\n+        tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-        tcx: TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n@@ -263,20 +263,20 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn tag_allocation<'b>(\n+        memory_extra: &MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let (stacks, base_tag) = if !memory.extra.validate {\n+        let (stacks, base_tag) = if !memory_extra.validate {\n             (None, Tag::Untagged)\n         } else {\n             let (stacks, base_tag) = Stacks::new_allocation(\n                 id,\n                 Size::from_bytes(alloc.bytes.len() as u64),\n-                Rc::clone(&memory.extra.stacked_borrows),\n+                Rc::clone(&memory_extra.stacked_borrows),\n                 kind,\n             );\n             (Some(stacks), base_tag)\n@@ -285,18 +285,18 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n             assert!(alloc.relocations.is_empty(), \"Only statics can come initialized with inner pointers\");\n             // Now we can rely on the inner pointers being static, too.\n         }\n-        let mut memory_extra = memory.extra.stacked_borrows.borrow_mut();\n+        let mut stacked_borrows = memory_extra.stacked_borrows.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = Allocation {\n             bytes: alloc.bytes,\n             relocations: Relocations::from_presorted(\n                 alloc.relocations.iter()\n                     // The allocations in the relocations (pointers stored *inside* this allocation)\n                     // all get the base pointer tag.\n                     .map(|&(offset, ((), alloc))| {\n-                        let tag = if !memory.extra.validate {\n+                        let tag = if !memory_extra.validate {\n                             Tag::Untagged\n                         } else {\n-                            memory_extra.static_base_ptr(alloc)\n+                            stacked_borrows.static_base_ptr(alloc)\n                         };\n                         (offset, (tag, alloc))\n                     })\n@@ -314,13 +314,13 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn tag_static_base_pointer(\n+        memory_extra: &MemoryExtra,\n         id: AllocId,\n-        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag {\n-        if !memory.extra.validate {\n+        if !memory_extra.validate {\n             Tag::Untagged\n         } else {\n-            memory.extra.stacked_borrows.borrow_mut().static_base_ptr(id)\n+            memory_extra.stacked_borrows.borrow_mut().static_base_ptr(id)\n         }\n     }\n \n@@ -354,8 +354,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn int_to_ptr(\n-        int: u64,\n         memory: &Memory<'mir, 'tcx, Self>,\n+        int: u64,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         if int == 0 {\n             err!(InvalidNullPointerUsage)\n@@ -367,8 +367,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn ptr_to_int(\n-        ptr: Pointer<Self::PointerTag>,\n         memory: &Memory<'mir, 'tcx, Self>,\n+        ptr: Pointer<Self::PointerTag>,\n     ) -> InterpResult<'tcx, u64> {\n         if memory.extra.rng.is_none() {\n             err!(ReadPointerAsBytes)"}]}