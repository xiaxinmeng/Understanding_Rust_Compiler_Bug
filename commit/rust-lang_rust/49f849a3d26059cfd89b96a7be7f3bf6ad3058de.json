{"sha": "49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "node_id": "C_kwDOAAsO6NoAKDQ5Zjg0OWEzZDI2MDU5Y2ZkODliOTZhN2JlN2YzYmY2YWQzMDU4ZGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-24T23:17:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T03:49:24Z"}, "message": "Mention signature rather than fn pointers when comparing impl/trait methods", "tree": {"sha": "31335092e8b58796a3814d4ff1bdf8372561049c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31335092e8b58796a3814d4ff1bdf8372561049c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "html_url": "https://github.com/rust-lang/rust/commit/49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d46a5bdac3f19793297914d4ada432024fbe95", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d46a5bdac3f19793297914d4ada432024fbe95", "html_url": "https://github.com/rust-lang/rust/commit/e5d46a5bdac3f19793297914d4ada432024fbe95"}], "stats": {"total": 311, "additions": 169, "deletions": 142}, "files": [{"sha": "c1cb07cf0dfe8f97a6b58e53ab6199d50cd8e0a4", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -253,8 +253,8 @@ infer_trait_placeholder_mismatch = implementation of `{$trait_def_id}` is not ge\n infer_trait_impl_diff = `impl` item signature doesn't match `trait` item signature\n     .found = found `{$found}`\n     .expected = expected `{$expected}`\n-    .expected_found = expected `{$expected}`\n-               {\"   \"}found `{$found}`\n+    .expected_found = expected signature `{$expected}`\n+               {\"   \"}found signature `{$found}`\n \n infer_tid_rel_help = verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n infer_tid_consider_borrowing = consider borrowing this type parameter in the trait"}, {"sha": "0d3391bbc1efbabd36d80c1e846292189eb065de", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -270,8 +270,8 @@ fn compare_method_predicate_entailment<'tcx>(\n     let unnormalized_impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(unnormalized_impl_sig));\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let impl_fty = ocx.normalize(&norm_cause, param_env, unnormalized_impl_fty);\n-    debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n+    let impl_sig = ocx.normalize(&norm_cause, param_env, unnormalized_impl_sig);\n+    debug!(\"compare_impl_method: impl_fty={:?}\", impl_sig);\n \n     let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n     let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n@@ -294,18 +294,17 @@ fn compare_method_predicate_entailment<'tcx>(\n     // type would be more appropriate. In other places we have a `Vec<Span>`\n     // corresponding to their `Vec<Predicate>`, but we don't have that here.\n     // Fixing this would improve the output of test `issue-83765.rs`.\n-    let result = ocx.sup(&cause, param_env, trait_fty, impl_fty);\n+    let result = ocx.sup(&cause, param_env, trait_sig, impl_sig);\n \n     if let Err(terr) = result {\n-        debug!(?terr, \"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n+        debug!(?impl_sig, ?trait_sig, ?terr, \"sub_types failed\");\n \n         let emitted = report_trait_method_mismatch(\n             &infcx,\n             cause,\n             terr,\n-            (trait_m, trait_fty),\n-            (impl_m, impl_fty),\n-            trait_sig,\n+            (trait_m, trait_sig),\n+            (impl_m, impl_sig),\n             impl_trait_ref,\n         );\n         return Err(emitted);\n@@ -484,7 +483,8 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     let impl_trait_ref = tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap();\n     let param_env = tcx.param_env(def_id);\n \n-    // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n+    // First, check a few of the same things as `compare_impl_method`,\n+    // just so we don't ICE during substitution later.\n     compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id), true)?;\n     compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n     check_region_bounds_on_impl_item(tcx, impl_m, trait_m, true)?;\n@@ -577,14 +577,11 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n \n     debug!(?trait_sig, ?impl_sig, \"equating function signatures\");\n \n-    let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n-    let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n-\n     // Unify the whole function signature. We need to do this to fully infer\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n     // `compare_method_predicate_entailment`.\n-    match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n+    match ocx.eq(&cause, param_env, trait_sig, impl_sig) {\n         Ok(()) => {}\n         Err(terr) => {\n             // This function gets called during `compare_method_predicate_entailment` when normalizing a\n@@ -595,9 +592,8 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                 infcx,\n                 cause,\n                 terr,\n-                (trait_m, trait_fty),\n-                (impl_m, impl_fty),\n-                trait_sig,\n+                (trait_m, trait_sig),\n+                (impl_m, impl_sig),\n                 impl_trait_ref,\n             );\n             return Err(emitted);\n@@ -771,9 +767,8 @@ fn report_trait_method_mismatch<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     mut cause: ObligationCause<'tcx>,\n     terr: TypeError<'tcx>,\n-    (trait_m, trait_fty): (&ty::AssocItem, Ty<'tcx>),\n-    (impl_m, impl_fty): (&ty::AssocItem, Ty<'tcx>),\n-    trait_sig: ty::FnSig<'tcx>,\n+    (trait_m, trait_sig): (&ty::AssocItem, ty::FnSig<'tcx>),\n+    (impl_m, impl_sig): (&ty::AssocItem, ty::FnSig<'tcx>),\n     impl_trait_ref: ty::TraitRef<'tcx>,\n ) -> ErrorGuaranteed {\n     let tcx = infcx.tcx;\n@@ -858,10 +853,7 @@ fn report_trait_method_mismatch<'tcx>(\n         &mut diag,\n         &cause,\n         trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n-        Some(infer::ValuePairs::Terms(ExpectedFound {\n-            expected: trait_fty.into(),\n-            found: impl_fty.into(),\n-        })),\n+        Some(infer::ValuePairs::Sigs(ExpectedFound { expected: trait_sig, found: impl_sig })),\n         terr,\n         false,\n         false,"}, {"sha": "d816a9ed3d7c102517e024ac39f0d9a3eb52e863", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -427,3 +427,15 @@ impl<'tcx> ToTrace<'tcx> for ty::AliasTy<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> ToTrace<'tcx> for ty::FnSig<'tcx> {\n+    fn to_trace(\n+        _: TyCtxt<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: Self,\n+        b: Self,\n+    ) -> TypeTrace<'tcx> {\n+        TypeTrace { cause: cause.clone(), values: Sigs(ExpectedFound::new(a_is_expected, a, b)) }\n+    }\n+}"}, {"sha": "391804e35e2ce9485e2f480561fa9d9376b4fc05", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -1429,8 +1429,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         impl<'tcx> OpaqueTypesVisitor<'tcx> {\n             fn visit_expected_found(\n                 tcx: TyCtxt<'tcx>,\n-                expected: Ty<'tcx>,\n-                found: Ty<'tcx>,\n+                expected: impl TypeVisitable<'tcx>,\n+                found: impl TypeVisitable<'tcx>,\n                 ignore_span: Span,\n             ) -> Self {\n                 let mut types_visitor = OpaqueTypesVisitor {\n@@ -1570,6 +1570,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             _ => (false, Mismatch::Fixed(\"type\")),\n                         }\n                     }\n+                    ValuePairs::Sigs(infer::ExpectedFound { expected, found }) => {\n+                        OpaqueTypesVisitor::visit_expected_found(self.tcx, expected, found, span)\n+                            .report(diag);\n+                        (false, Mismatch::Fixed(\"signature\"))\n+                    }\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n@@ -2041,6 +2046,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ret => ret,\n                 }\n             }\n+            infer::Sigs(exp_found) => {\n+                let exp_found = self.resolve_vars_if_possible(exp_found);\n+                if exp_found.references_error() {\n+                    return None;\n+                }\n+                let (exp, fnd) = self.cmp_fn_sig(\n+                    &ty::Binder::dummy(exp_found.expected),\n+                    &ty::Binder::dummy(exp_found.found),\n+                );\n+                Some((exp, fnd, None, None))\n+            }\n         }\n     }\n "}, {"sha": "40c0c806e1ff8ea41e8e68de27980fe91e81f4cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -3,14 +3,15 @@\n use crate::errors::{ConsiderBorrowingParamHelp, RelationshipHelp, TraitImplDiff};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::Subtype;\n+use crate::infer::{Subtype, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplItemObligation;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n use rustc_span::Span;\n@@ -23,22 +24,27 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let error = self.error.as_ref()?;\n         debug!(\"try_report_impl_not_conforming_to_trait {:?}\", error);\n         if let RegionResolutionError::SubSupConflict(\n-                _,\n-                var_origin,\n-                sub_origin,\n-                _sub,\n-                sup_origin,\n-                _sup,\n-                _,\n-            ) = error.clone()\n+            _,\n+            var_origin,\n+            sub_origin,\n+            _sub,\n+            sup_origin,\n+            _sup,\n+            _,\n+        ) = error.clone()\n             && let (Subtype(sup_trace), Subtype(sub_trace)) = (&sup_origin, &sub_origin)\n-            && let sub_expected_found @ Some((sub_expected, sub_found)) = sub_trace.values.ty()\n-            && let sup_expected_found @ Some(_) = sup_trace.values.ty()\n             && let CompareImplItemObligation { trait_item_def_id, .. } = sub_trace.cause.code()\n-            && sup_expected_found == sub_expected_found\n+            && sub_trace.values == sup_trace.values\n+            && let ValuePairs::Sigs(ExpectedFound { expected, found }) = sub_trace.values\n         {\n-            let guar =\n-                self.emit_err(var_origin.span(), sub_expected, sub_found, *trait_item_def_id);\n+            // FIXME(compiler-errors): Don't like that this needs `Ty`s, but\n+            // all of the region highlighting machinery only deals with those.\n+            let guar = self.emit_err(\n+                var_origin.span(),\n+                self.cx.tcx.mk_fn_ptr(ty::Binder::dummy(expected)),\n+                self.cx.tcx.mk_fn_ptr(ty::Binder::dummy(found)),\n+                *trait_item_def_id,\n+            );\n             return Some(guar);\n         }\n         None"}, {"sha": "f81ab60c5f6664edddd378ff081e4d544daf0290", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -361,6 +361,7 @@ pub enum ValuePairs<'tcx> {\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n+    Sigs(ExpectedFound<ty::FnSig<'tcx>>),\n }\n \n impl<'tcx> ValuePairs<'tcx> {"}, {"sha": "7e21f7fc306d2b94ccde3ae44268bd7d2bc621fa", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -22,8 +22,8 @@ note: type in trait\n    |\n LL |     fn make() -> Self::Ty {\n    |                  ^^^^^^^^\n-   = note: expected fn pointer `fn() -> <A<T> as Tr>::Ty`\n-              found fn pointer `fn() -> u8`\n+   = note: expected signature `fn() -> <A<T> as Tr>::Ty`\n+              found signature `fn() -> u8`\n \n error[E0053]: method `make` has an incompatible type for trait\n   --> $DIR/defaults-specialization.rs:35:18\n@@ -42,8 +42,8 @@ note: type in trait\n    |\n LL |     fn make() -> Self::Ty {\n    |                  ^^^^^^^^\n-   = note: expected fn pointer `fn() -> <B<T> as Tr>::Ty`\n-              found fn pointer `fn() -> bool`\n+   = note: expected signature `fn() -> <B<T> as Tr>::Ty`\n+              found signature `fn() -> bool`\n \n error[E0308]: mismatched types\n   --> $DIR/defaults-specialization.rs:10:9"}, {"sha": "13e7222551aaf1f5783d93dcdd2b09973cb1d9fd", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n-              found fn pointer `fn(&i32) -> impl Future<Output = i32>`\n+   = note: expected signature `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found signature `fn(&i32) -> impl Future<Output = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "930fea9158d45405ebbbe7d7ca3162d850d8ca29", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -22,8 +22,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n-              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n+   = note: expected signature `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found signature `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |\n@@ -41,8 +41,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n-              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n+   = note: expected signature `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'_>)`\n+              found signature `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'_>)`\n note: the lifetime `'c` as defined here...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |"}, {"sha": "cad942e646e3ee24037c579c69ae1f54950f6bae", "filename": "src/test/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n    |             expected struct `Pin`, found struct `MyFuture`\n    |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n    |\n-   = note: expected fn pointer `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n-              found fn pointer `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n+   = note: expected signature `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n+              found signature `fn(MyFuture, &mut Context<'_>) -> Poll<_>`\n \n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:22:18\n@@ -24,8 +24,8 @@ note: type in trait\n    |\n LL |     fn foo(self);\n    |            ^^^^\n-   = note: expected fn pointer `fn(MyFuture)`\n-              found fn pointer `fn(Box<MyFuture>)`\n+   = note: expected signature `fn(MyFuture)`\n+              found signature `fn(Box<MyFuture>)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:24:18\n@@ -38,8 +38,8 @@ note: type in trait\n    |\n LL |     fn bar(self) -> Option<()>;\n    |                     ^^^^^^^^^^\n-   = note: expected fn pointer `fn(MyFuture) -> Option<()>`\n-              found fn pointer `fn(MyFuture)`\n+   = note: expected signature `fn(MyFuture) -> Option<()>`\n+              found signature `fn(MyFuture)`\n help: change the output type to match the trait\n    |\n LL |     fn bar(self) -> Option<()> {}"}, {"sha": "52e23d03b148bfe5b60ca8030f155633bec6a6ed", "filename": "src/test/ui/compare-method/issue-90444.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fissue-90444.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn from(_: fn((), (), &mut ())) -> Self {\n    |                types differ in mutability\n    |                help: change the parameter type to match the trait: `for<'a> fn((), (), &'a ())`\n    |\n-   = note: expected fn pointer `fn(for<'a> fn((), (), &'a ())) -> A`\n-              found fn pointer `fn(for<'a> fn((), (), &'a mut ())) -> A`\n+   = note: expected signature `fn(for<'a> fn((), (), &'a ())) -> A`\n+              found signature `fn(for<'a> fn((), (), &'a mut ())) -> A`\n \n error[E0053]: method `from` has an incompatible type for trait\n   --> $DIR/issue-90444.rs:11:16\n@@ -19,8 +19,8 @@ LL |     fn from(_: fn((), (), u64)) -> Self {\n    |                expected `u32`, found `u64`\n    |                help: change the parameter type to match the trait: `fn((), (), u32)`\n    |\n-   = note: expected fn pointer `fn(fn((), (), u32)) -> B`\n-              found fn pointer `fn(fn((), (), u64)) -> B`\n+   = note: expected signature `fn(fn((), (), u32)) -> B`\n+              found signature `fn(fn((), (), u64)) -> B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1552d542d15dee44e9301862ef550af1b4288c49", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -14,8 +14,8 @@ note: type in trait\n    |\n LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             ^\n-   = note: expected fn pointer `fn(&E, F) -> F`\n-              found fn pointer `fn(&E, G) -> G`\n+   = note: expected signature `fn(&E, F) -> F`\n+              found signature `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "db97fc2bdc46a8483c7b5005111ccef459d70f70", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -13,8 +13,8 @@ note: type in trait\n    |\n LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                ^^\n-   = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n-              found fn pointer `fn(&(), &impl Debug, &B)`\n+   = note: expected signature `fn(&(), &B, &impl Debug)`\n+              found signature `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "4dfd772222e5de25f627958cea5d245549adff35", "filename": "src/test/ui/impl-trait/in-trait/method-signature-matches.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fmethod-signature-matches.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn owo(x: ()) -> impl Sized;\n    |               ^^\n-   = note: expected fn pointer `fn(())`\n-              found fn pointer `fn(u8)`\n+   = note: expected signature `fn(())`\n+              found signature `fn(u8)`\n \n error[E0053]: method `owo` has an incompatible type for trait\n   --> $DIR/method-signature-matches.rs:20:21\n@@ -39,8 +39,8 @@ note: type in trait\n    |\n LL |     async fn owo(x: ()) {}\n    |                     ^^\n-   = note: expected fn pointer `fn(()) -> _`\n-              found fn pointer `fn(u8) -> _`\n+   = note: expected signature `fn(()) -> _`\n+              found signature `fn(u8) -> _`\n \n error[E0050]: method `calm_down_please` has 3 parameters but the declaration in trait `TooMuch::calm_down_please` has 0\n   --> $DIR/method-signature-matches.rs:29:28\n@@ -75,8 +75,8 @@ note: type in trait\n    |\n LL |     fn early<'early, T>(x: &'early T) -> impl Sized;\n    |                            ^^^^^^^^^\n-   = note: expected fn pointer `fn(&'early T)`\n-              found fn pointer `fn(&())`\n+   = note: expected signature `fn(&'early T)`\n+              found signature `fn(&())`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e105660173b48ae3af6e06e964dfd061f770ace9", "filename": "src/test/ui/impl-trait/in-trait/signature-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    |\n-   = note: expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n-              found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + 'static`\n+              found signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "37cfd74498d81a97a92ee2108d796432d418a753", "filename": "src/test/ui/impl-trait/in-trait/specialization-broken.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -15,8 +15,8 @@ note: type in trait\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n-   = note: expected fn pointer `fn(&U) -> impl Sized`\n-              found fn pointer `fn(&U) -> U`\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n \n error: aborting due to previous error\n "}, {"sha": "c7c6ca4401266c57ba9f3c613c7dcacc482c2917", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -18,8 +18,8 @@ LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              expected struct `Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n-   = note: expected fn pointer `fn(&a::Bar, &(a::Bar, i32)) -> _`\n-              found fn pointer `fn(&a::Bar, &(a::Foo, i32)) -> _`\n+   = note: expected signature `fn(&a::Bar, &(a::Bar, i32)) -> _`\n+              found signature `fn(&a::Bar, &(a::Foo, i32)) -> _`\n \n error: unconstrained opaque type\n   --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:18:16\n@@ -41,8 +41,8 @@ LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              expected opaque type, found struct `Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n-   = note: expected fn pointer `fn(&b::Bar, &(b::Foo, i32)) -> _`\n-              found fn pointer `fn(&b::Bar, &(b::Bar, i32)) -> _`\n+   = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`\n+              found signature `fn(&b::Bar, &(b::Bar, i32)) -> _`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "81e4c933e53f42261257aa8ad76d53b722f2a292", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |    fn fmt(&self, x: &str) -> () { }\n    |                     types differ in mutability\n    |                     help: change the parameter type to match the trait: `&mut Formatter<'_>`\n    |\n-   = note: expected fn pointer `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n-              found fn pointer `fn(&MyType, &str)`\n+   = note: expected signature `fn(&MyType, &mut Formatter<'_>) -> Result<(), std::fmt::Error>`\n+              found signature `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "fdb356e70c5f06d0a0994733830fddafc87872a8", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n+    //~| expected signature `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found signature `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "db2c1189e1e1a408dce972af37da90f7c46094b5", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo);\n    |                              ^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n-              found fn pointer `fn(&mut Baz, &dyn Foo)`\n+   = note: expected signature `fn(&mut Baz, &mut dyn Foo)`\n+              found signature `fn(&mut Baz, &dyn Foo)`\n \n error: aborting due to previous error\n "}, {"sha": "cb27e2bcfb6c07bb7961f9f33dfac8134fb42e2e", "filename": "src/test/ui/issues/issue-15094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -10,8 +10,8 @@ impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n     //~^ ERROR `call_once` has an incompatible type for trait\n-    //~| expected fn pointer `extern \"rust-call\" fn\n-    //~| found fn pointer `fn\n+    //~| expected signature `extern \"rust-call\" fn\n+    //~| found signature `fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "b7c950892dc29de44ca3e6486b14d20dc5b5001f", "filename": "src/test/ui/issues/issue-15094.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `call_once` has an incompatible type for trait\n LL |     fn call_once(self, _args: ()) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"rust-call\" fn, found \"Rust\" fn\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<_>, ())`\n-              found fn pointer `fn(Debuger<_>, ())`\n+   = note: expected signature `extern \"rust-call\" fn(Debuger<_>, ())`\n+              found signature `fn(Debuger<_>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "5822160107cce5479747543a07da6dfcbe2f3b62", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -9,8 +9,8 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |                                           expected `&T`, found type parameter `T`\n    |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(&Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(&Foo, (T,))`\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:11:51\n@@ -23,8 +23,8 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |                                                   expected `&T`, found type parameter `T`\n    |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(&mut Foo, (T,))`\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:18:47\n@@ -38,8 +38,8 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |                                               expected `&T`, found type parameter `T`\n    |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n-   = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n-              found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n+   = note: expected signature `extern \"rust-call\" fn(Foo, (&'a T,))`\n+              found signature `extern \"rust-call\" fn(Foo, (T,))`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0e1beebf2931a2e01c2658a2f0264f8aed6302fd", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |                           expected enum `Option`, found enum `Result`\n    |                           help: change the output type to match the trait: `Option<i32>`\n    |\n-   = note: expected fn pointer `fn(&mut S) -> Option<i32>`\n-              found fn pointer `fn(&mut S) -> Result<i32, i32>`\n+   = note: expected signature `fn(&mut S) -> Option<i32>`\n+              found signature `fn(&mut S) -> Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "7ddb36c8e6f7f406b54299c98fba8cbf7cb1c92f", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -4,8 +4,8 @@ error[E0308]: method not compatible with trait\n LL |     fn next(&'a mut self) -> Option<Self::Item>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n-              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n+   = note: expected signature `fn(&mut RepeatMut<'a, T>) -> Option<_>`\n+              found signature `fn(&'a mut RepeatMut<'a, T>) -> Option<_>`\n note: the anonymous lifetime as defined here...\n   --> $DIR/issue-37884.rs:6:5\n    |"}, {"sha": "9c61d5a0c25e1a6320bf29fe9fcf2d4dad34e982", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 i32, &'1 i32) -> &'1 i32`\n    |\n-   = note: expected `fn(&'1 i32, &'a i32) -> &'a i32`\n-              found `fn(&'1 i32, &'1 i32) -> &'1 i32`\n+   = note: expected signature `fn(&'1 i32, &'a i32) -> &'a i32`\n+              found signature `fn(&'1 i32, &'1 i32) -> &'1 i32`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "154f2fcbee0ffea76fb8fa80cd2ab48fb977eca8", "filename": "src/test/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0053.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(x: u16);\n    |               ^^^\n-   = note: expected fn pointer `fn(u16)`\n-              found fn pointer `fn(i16)`\n+   = note: expected signature `fn(u16)`\n+              found signature `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/E0053.rs:11:12\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(&self);\n    |            ^^^^^\n-   = note: expected fn pointer `fn(&Bar)`\n-              found fn pointer `fn(&mut Bar)`\n+   = note: expected signature `fn(&Bar)`\n+              found signature `fn(&mut Bar)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ddea16294450b38afc98f196a1c780caf3d8661", "filename": "src/test/ui/mismatched_types/issue-74918-missing-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-74918-missing-lifetime.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -18,8 +18,8 @@ LL |     fn next(&mut self) -> Option<IteratorChunk<T, S>> {\n    |\n    = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n    |\n-   = note: expected `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n-              found `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n+   = note: expected signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'static, T, S>>`\n+              found signature `fn(&'1 mut ChunkingIterator<T, S>) -> Option<IteratorChunk<'1, T, S>>`\n    = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n    = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n "}, {"sha": "88416ba4bb6dc88a9c672999352019e84af6adaa", "filename": "src/test/ui/mismatched_types/issue-75361-mismatched-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-75361-mismatched-impl.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType>>;\n LL |   fn adjacent_edges(&self) -> Box<dyn MyTrait<Item = &Self::EdgeType> + '_> {\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n    |\n-   = note: expected `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + 'static)>`\n-              found `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n+   = note: expected signature `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + 'static)>`\n+              found signature `fn(&'1 T) -> Box<(dyn MyTrait<Item = &'1 T> + '1)>`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/issue-75361-mismatched-impl.rs:12:55\n    |"}, {"sha": "6e7bf5eb46d92a921b4d1bcc41f881f363697f4d", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(x: u16);\n    |               ^^^\n-   = note: expected fn pointer `fn(u16)`\n-              found fn pointer `fn(i16)`\n+   = note: expected signature `fn(u16)`\n+              found signature `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/trait-impl-fn-incompatibility.rs:10:28\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(&mut self, bar: &mut Bar);\n    |                            ^^^^^^^^\n-   = note: expected fn pointer `fn(&mut Bar, &mut Bar)`\n-              found fn pointer `fn(&mut Bar, &Bar)`\n+   = note: expected signature `fn(&mut Bar, &mut Bar)`\n+              found signature `fn(&mut Bar, &Bar)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62580755c814e992ae59533bc5452eb35067e932", "filename": "src/test/ui/traits/impl-method-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -6,8 +6,8 @@ impl Mumbo for usize {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: &usize) { *self + *x; }\n     //~^ ERROR method `jumbo` has an incompatible type for trait\n-    //~| expected fn pointer `fn\n-    //~| found fn pointer `unsafe fn\n+    //~| expected signature `fn\n+    //~| found signature `unsafe fn\n }\n \n fn main() {}"}, {"sha": "252b5aff96a016e770b1dd08619a9bec7c17c521", "filename": "src/test/ui/traits/impl-method-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-method-mismatch.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     fn jumbo(&self, x: &usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(&usize, &usize) -> usize`\n-              found fn pointer `unsafe fn(&usize, &usize)`\n+   = note: expected signature `fn(&usize, &usize) -> usize`\n+              found signature `unsafe fn(&usize, &usize)`\n \n error: aborting due to previous error\n "}, {"sha": "6d985bdeaf8599018e2a30f97e4ce245cafc3403", "filename": "src/test/ui/traits/issue-35869.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -12,8 +12,8 @@ note: type in trait\n    |\n LL |     fn foo(_: fn(u8) -> ());\n    |               ^^^^^^^^^^^^\n-   = note: expected fn pointer `fn(fn(u8))`\n-              found fn pointer `fn(fn(u16))`\n+   = note: expected signature `fn(fn(u8))`\n+              found signature `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:13:15\n@@ -29,8 +29,8 @@ note: type in trait\n    |\n LL |     fn bar(_: Option<u8>);\n    |               ^^^^^^^^^^\n-   = note: expected fn pointer `fn(Option<u8>)`\n-              found fn pointer `fn(Option<u16>)`\n+   = note: expected signature `fn(Option<u8>)`\n+              found signature `fn(Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:15:15\n@@ -46,8 +46,8 @@ note: type in trait\n    |\n LL |     fn baz(_: (u8, u16));\n    |               ^^^^^^^^^\n-   = note: expected fn pointer `fn((u8, _))`\n-              found fn pointer `fn((u16, _))`\n+   = note: expected signature `fn((u8, _))`\n+              found signature `fn((u16, _))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17\n@@ -63,8 +63,8 @@ note: type in trait\n    |\n LL |     fn qux() -> u8;\n    |                 ^^\n-   = note: expected fn pointer `fn() -> u8`\n-              found fn pointer `fn() -> u16`\n+   = note: expected signature `fn() -> u8`\n+              found signature `fn() -> u16`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f8119ed415d036ae57f695d027594433cc0b1d91", "filename": "src/test/ui/traits/matching-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmatching-lifetimes.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -4,8 +4,8 @@ error[E0308]: method not compatible with trait\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(Foo<'a, 'b>)`\n-              found fn pointer `fn(Foo<'b, 'a>)`\n+   = note: expected signature `fn(Foo<'a, 'b>)`\n+              found signature `fn(Foo<'b, 'a>)`\n note: the lifetime `'b` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:9\n    |\n@@ -23,8 +23,8 @@ error[E0308]: method not compatible with trait\n LL |     fn foo(x: Foo<'b,'a>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected fn pointer `fn(Foo<'a, 'b>)`\n-              found fn pointer `fn(Foo<'b, 'a>)`\n+   = note: expected signature `fn(Foo<'a, 'b>)`\n+              found signature `fn(Foo<'b, 'a>)`\n note: the lifetime `'a` as defined here...\n   --> $DIR/matching-lifetimes.rs:13:6\n    |"}, {"sha": "b128b6518ce4b75d453a6462f53c48c02bb7addc", "filename": "src/test/ui/traits/param-without-lifetime-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fparam-without-lifetime-constraint.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn get_relation(&self) -> To;\n LL |     fn get_relation(&self) -> &ProofReader {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Article) -> &'1 ProofReader`\n    |\n-   = note: expected `fn(&'1 Article) -> &'2 ProofReader`\n-              found `fn(&'1 Article) -> &'1 ProofReader`\n+   = note: expected signature `fn(&'1 Article) -> &'2 ProofReader`\n+              found signature `fn(&'1 Article) -> &'1 ProofReader`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/param-without-lifetime-constraint.rs:10:31\n    |"}, {"sha": "05a49820a822df0e880f3e5d9a1b2ca3e28471f1", "filename": "src/test/ui/traits/self-without-lifetime-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fself-without-lifetime-constraint.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<Self, &Self>;\n LL |     fn column_result(value: ValueRef<'_>) -> FromSqlResult<&str, &&str> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n    |\n-   = note: expected `fn(ValueRef<'1>) -> Result<(&'2 str, &'1 &'2 str), FromSqlError>`\n-              found `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n+   = note: expected signature `fn(ValueRef<'1>) -> Result<(&'2 str, &'1 &'2 str), FromSqlError>`\n+              found signature `fn(ValueRef<'1>) -> Result<(&'1 str, &'1 &'1 str), FromSqlError>`\n help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   --> $DIR/self-without-lifetime-constraint.rs:41:60\n    |"}, {"sha": "1fc84ca02560d9184f25916eeb7d7aa0759b17ca", "filename": "src/test/ui/unsafe/unsafe-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.rs?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ trait Foo {\n impl Foo for u32 {\n     fn len(&self) -> u32 { *self }\n     //~^ ERROR method `len` has an incompatible type for trait\n-    //~| expected fn pointer `unsafe fn(&u32) -> _`\n-    //~| found fn pointer `fn(&u32) -> _`\n+    //~| expected signature `unsafe fn(&u32) -> _`\n+    //~| found signature `fn(&u32) -> _`\n }\n \n fn main() { }"}, {"sha": "18ba79404b77e894cb4372b894bed4d7af261b62", "filename": "src/test/ui/unsafe/unsafe-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-trait-impl.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -9,8 +9,8 @@ note: type in trait\n    |\n LL |     unsafe fn len(&self) -> u32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected fn pointer `unsafe fn(&u32) -> _`\n-              found fn pointer `fn(&u32) -> _`\n+   = note: expected signature `unsafe fn(&u32) -> _`\n+              found signature `fn(&u32) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "504a6032b01f9145c06fba675a50f1b79c21592d", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49f849a3d26059cfd89b96a7be7f3bf6ad3058de/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=49f849a3d26059cfd89b96a7be7f3bf6ad3058de", "patch": "@@ -7,8 +7,8 @@ LL |     fn mul(self, s: &f64) -> Vec1 {\n    |                     expected `f64`, found `&f64`\n    |                     help: change the parameter type to match the trait: `f64`\n    |\n-   = note: expected fn pointer `fn(Vec1, f64) -> Vec1`\n-              found fn pointer `fn(Vec1, &f64) -> Vec1`\n+   = note: expected signature `fn(Vec1, f64) -> Vec1`\n+              found signature `fn(Vec1, &f64) -> Vec1`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:33:21\n@@ -19,8 +19,8 @@ LL |     fn mul(self, s: f64) -> Vec2 {\n    |                     expected struct `Vec2`, found `f64`\n    |                     help: change the parameter type to match the trait: `Vec2`\n    |\n-   = note: expected fn pointer `fn(Vec2, Vec2) -> f64`\n-              found fn pointer `fn(Vec2, f64) -> Vec2`\n+   = note: expected signature `fn(Vec2, Vec2) -> f64`\n+              found signature `fn(Vec2, f64) -> Vec2`\n \n error[E0053]: method `mul` has an incompatible type for trait\n   --> $DIR/wrong-mul-method-signature.rs:52:29\n@@ -31,8 +31,8 @@ LL |     fn mul(self, s: f64) -> f64 {\n    |                             expected `i32`, found `f64`\n    |                             help: change the output type to match the trait: `i32`\n    |\n-   = note: expected fn pointer `fn(Vec3, _) -> i32`\n-              found fn pointer `fn(Vec3, _) -> f64`\n+   = note: expected signature `fn(Vec3, _) -> i32`\n+              found signature `fn(Vec3, _) -> f64`\n \n error[E0308]: mismatched types\n   --> $DIR/wrong-mul-method-signature.rs:63:45"}]}