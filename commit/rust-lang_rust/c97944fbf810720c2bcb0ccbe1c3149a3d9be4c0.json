{"sha": "c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Nzk0NGZiZjgxMDcyMGMyYmNiMGNjYmUxYzMxNDlhM2Q5YmU0YzA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T02:47:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T03:08:14Z"}, "message": "core: add potential \"simpler interface\" to core::condition, also reduce TLS hits.", "tree": {"sha": "e063914fa1cb3bc4c47ac9da555095a7c536a78c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e063914fa1cb3bc4c47ac9da555095a7c536a78c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "html_url": "https://github.com/rust-lang/rust/commit/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "html_url": "https://github.com/rust-lang/rust/commit/6c4ad31f764aa8ebec3873ce68770b4173b0b97d"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "a50c29b0f9240b51b3b73e3275f5f5b433eb4b4d", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "patch": "@@ -6,8 +6,7 @@ struct Condition<T, U:Copy> {\n }\n \n struct Handler<T, U:Copy> {\n-    handle: RustClosure,\n-    prev: Option<@Handler<T, U>>\n+    handle: RustClosure\n }\n \n \n@@ -16,34 +15,32 @@ struct ProtectBlock<T, U:Copy> {\n     inner: RustClosure\n }\n \n-struct PopHandler<T, U:Copy> {\n+struct Guard<T, U:Copy> {\n     cond: &Condition<T,U>,\n+    prev: Option<@Handler<T, U>>,\n     drop {\n-        unsafe {\n-            debug!(\"PopHandler: popping handler from TLS\");\n-            match task::local_data::local_data_pop(self.cond.key) {\n-                None => (),\n-                Some(h) => {\n-                    match h.prev {\n-                        None => (),\n-                        Some(p) =>\n-                        task::local_data::local_data_set(self.cond.key, p)\n-                    }\n-                }\n+        match self.prev {\n+            None => (),\n+            Some(p) =>\n+            unsafe {\n+                debug!(\"Guard: popping handler from TLS\");\n+                task::local_data::local_data_set(self.cond.key, p)\n             }\n         }\n     }\n }\n \n struct HandleBlock<T, U:Copy> {\n     pb: &ProtectBlock<T,U>,\n+    prev: Option<@Handler<T,U>>,\n     handler: @Handler<T,U>,\n     drop {\n         unsafe {\n             debug!(\"HandleBlock: pushing handler to TLS\");\n+            let _g = Guard { cond: self.pb.cond,\n+                             prev: self.prev };\n             task::local_data::local_data_set(self.pb.cond.key,\n                                              self.handler);\n-            let _pop = PopHandler { cond: self.pb.cond };\n             // transmutation to avoid copying non-copyable, should\n             // be fixable by tracking closure pointees in regionck.\n             let f : &fn() = ::cast::transmute(self.pb.inner);\n@@ -61,14 +58,27 @@ impl<T, U: Copy> ProtectBlock<T,U> {\n             let p : *RustClosure = ::cast::transmute(&h);\n             let prev = task::local_data::local_data_get(self.cond.key);\n             HandleBlock { pb: self,\n-                          handler: @Handler{handle: *p, prev: prev} }\n+                          prev: prev,\n+                          handler: @Handler{handle: *p} }\n         }\n     }\n }\n \n \n impl<T, U: Copy>  Condition<T,U> {\n \n+    fn guard(&self, h: &self/fn(&T) ->U) -> Guard/&self<T,U> {\n+        unsafe {\n+            let prev = task::local_data::local_data_get(self.key);\n+            let g = Guard { cond: self, prev: prev };\n+            debug!(\"Guard: pushing handler to TLS\");\n+            let p : *RustClosure = ::cast::transmute(&h);\n+            let h = @Handler{handle: *p};\n+            task::local_data::local_data_set(self.key, h);\n+            move g\n+        }\n+    }\n+\n     fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self<T,U> {\n         unsafe {\n             // transmutation to avoid copying non-copyable, should\n@@ -147,7 +157,7 @@ fn nested_test_inner() {\n         trouble(1);\n     };\n \n-    do b.handle |_j:&int| {\n+    do b.handle |_j| {\n         debug!(\"nested_test_inner: in handler\");\n         inner_trapped = true;\n         0\n@@ -170,11 +180,52 @@ fn nested_test_outer() {\n         trouble(1);\n     };\n \n-    do b.handle |_j:&int| {\n+    do b.handle |_j| {\n         debug!(\"nested_test_outer: in handler\");\n         outer_trapped = true;\n         0\n     };\n \n     assert outer_trapped;\n }\n+\n+\n+#[cfg(test)]\n+fn nested_guard_test_inner() {\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n+\n+    let mut inner_trapped = false;\n+\n+    let _g = do sadness_condition.guard |_j| {\n+        debug!(\"nested_guard_test_inner: in handler\");\n+        inner_trapped = true;\n+        0\n+    };\n+\n+    debug!(\"nested_guard_test_inner: in protected block\");\n+    trouble(1);\n+\n+    assert inner_trapped;\n+}\n+\n+#[test]\n+fn nested_guard_test_outer() {\n+\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n+\n+    let mut outer_trapped = false;\n+\n+    let _g = do sadness_condition.guard |_j| {\n+        debug!(\"nested_guard_test_outer: in handler\");\n+        outer_trapped = true;\n+        0\n+    };\n+\n+    debug!(\"nested_guard_test_outer: in protected block\");\n+    nested_guard_test_inner();\n+    trouble(1);\n+\n+    assert outer_trapped;\n+}"}]}