{"sha": "e89d9853a68c684c089d6b9be22b572d9866e580", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWQ5ODUzYTY4YzY4NGMwODlkNmI5YmUyMmI1NzJkOTg2NmU1ODA=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-31T07:59:50Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-08T02:31:12Z"}, "message": "Fix vector indexing in consts so it works with the enum vector const fix.", "tree": {"sha": "bcae3b3bd57ecb8abe468a4e0ae256827bb28b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcae3b3bd57ecb8abe468a4e0ae256827bb28b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89d9853a68c684c089d6b9be22b572d9866e580", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89d9853a68c684c089d6b9be22b572d9866e580", "html_url": "https://github.com/rust-lang/rust/commit/e89d9853a68c684c089d6b9be22b572d9866e580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89d9853a68c684c089d6b9be22b572d9866e580/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8dc026341671b1118d06dd2ada060067448988", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8dc026341671b1118d06dd2ada060067448988", "html_url": "https://github.com/rust-lang/rust/commit/de8dc026341671b1118d06dd2ada060067448988"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "3a419ac9f59b442df914b4cb545efa993476e845", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=e89d9853a68c684c089d6b9be22b572d9866e580", "patch": "@@ -382,6 +382,7 @@ pub extern mod llvm {\n     pub unsafe fn LLVMGetUsedValue(U: UseRef) -> ValueRef;\n \n     /* Operations on Users */\n+    pub unsafe fn LLVMGetNumOperands(Val: ValueRef) -> c_int;\n     pub unsafe fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;\n     pub unsafe fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);\n "}, {"sha": "5af62eda1fe4f69bed7cb540544d72e6aeee2261", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=e89d9853a68c684c089d6b9be22b572d9866e580", "patch": "@@ -285,15 +285,17 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n               // call. Despite that being \"a const\", it's not the kind of\n               // const you can ask for the integer-value of, evidently. This\n               // might be an LLVM bug, not sure. In any case, to work around\n-              // this we drop down to the array-type level here and just ask\n-              // how long the array-type itself is, ignoring the length we\n-              // pulled out of the slice. This in turn only works because we\n-              // picked out the original globalvar via const_deref and so can\n-              // recover the array-size of the underlying array, and all this\n-              // will hold together exactly as long as we _don't_ support\n-              // const sub-slices (that is, slices that represent something\n-              // other than a whole array).  At that point we'll have more and\n-              // uglier work to do here, but for now this should work.\n+              // this we obtain the initializer and count how many elements it\n+              // has, ignoring the length we pulled out of the slice. (Note\n+              // that the initializer might be a struct rather than an array,\n+              // if enums are involved.) This only works because we picked out\n+              // the original globalvar via const_deref and so can recover the\n+              // array-size of the underlying array (or the element count of\n+              // the underlying struct), and all this will hold together\n+              // exactly as long as we _don't_ support const sub-slices (that\n+              // is, slices that represent something other than a whole\n+              // array).  At that point we'll have more and uglier work to do\n+              // here, but for now this should work.\n               //\n               // In the future, what we should be doing here is the\n               // moral equivalent of:\n@@ -305,7 +307,7 @@ pub fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n               // not want to consider sizeof() a constant expression\n               // we can get the value (as a number) out of.\n \n-              let len = llvm::LLVMGetArrayLength(val_ty(arr)) as u64;\n+              let len = llvm::LLVMGetNumOperands(arr) as u64;\n               let len = match ty::get(bt).sty {\n                   ty::ty_estr(*) => {assert len > 0; len - 1},\n                   _ => len"}, {"sha": "b386bbf7f5e76c9463b34017c4dba84f2180d0d0", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89d9853a68c684c089d6b9be22b572d9866e580/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=e89d9853a68c684c089d6b9be22b572d9866e580", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum E { V1(int), V0 }\n+const C: &[E] = &[V0, V1(0xDEADBEE)];\n+const C0: E = C[0];\n+const C1: E = C[1];\n+\n+fn main() {\n+    match C0 { \n+        V0 => (),\n+        _ => die!()\n+    }\n+    match C1 {\n+        V1(n) => assert(n == 0xDEADBEE),\n+        _ => die!()\n+    }\n+}"}]}