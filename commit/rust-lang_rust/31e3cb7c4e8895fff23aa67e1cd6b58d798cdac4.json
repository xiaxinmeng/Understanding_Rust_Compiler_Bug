{"sha": "31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZTNjYjdjNGU4ODk1ZmZmMjNhYTY3ZTFjZDZiNThkNzk4Y2RhYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-05T04:47:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-05T04:47:56Z"}, "message": "Auto merge of #25111 - Manishearth:rollup, r=Manishearth\n\nr? @Manishearth", "tree": {"sha": "5c8ab399eb799e89b424309a7e0226242340516a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8ab399eb799e89b424309a7e0226242340516a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "html_url": "https://github.com/rust-lang/rust/commit/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0be117e2733423e70bccd8b0a46e8eccd1e1d1cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be117e2733423e70bccd8b0a46e8eccd1e1d1cc", "html_url": "https://github.com/rust-lang/rust/commit/0be117e2733423e70bccd8b0a46e8eccd1e1d1cc"}, {"sha": "135502ef0016fd6b17324cc1ed4e088863a97176", "url": "https://api.github.com/repos/rust-lang/rust/commits/135502ef0016fd6b17324cc1ed4e088863a97176", "html_url": "https://github.com/rust-lang/rust/commit/135502ef0016fd6b17324cc1ed4e088863a97176"}], "stats": {"total": 293, "additions": 81, "deletions": 212}, "files": [{"sha": "92e2fd93df40676f9ca084e8ab77e686dca4d37c", "filename": "src/doc/complement-lang-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-lang-faq.md?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -109,7 +109,7 @@ This does mean that indexed access to a Unicode codepoint inside a `str` value i\n * Most \"character oriented\" operations on text only work under very restricted language assumptions sets such as \"ASCII-range codepoints only\". Outside ASCII-range, you tend to have to use a complex (non-constant-time) algorithm for determining linguistic-unit (glyph, word, paragraph) boundaries anyways. We recommend using an \"honest\" linguistically-aware, Unicode-approved algorithm.\n * The `char` type is UCS4. If you honestly need to do a codepoint-at-a-time algorithm, it's trivial to write a `type wstr = [char]`, and unpack a `str` into it in a single pass, then work with the `wstr`. In other words: the fact that the language is not \"decoding to UCS4 by default\" shouldn't stop you from decoding (or re-encoding any other way) if you need to work with that encoding.\n \n-## Why are strings, vectors etc. built-in types rather than (say) special kinds of trait/impl?\n+## Why are `str`s, slices, arrays etc. built-in types rather than (say) special kinds of trait/impl?\n \n In each case there is one or more operator, literal constructor, overloaded use or integration with a built-in control structure that makes us think it would be awkward to phrase the type in terms of more-general type constructors. Same as, say, with numbers! But this is partly an aesthetic call, and we'd be willing to look at a worked-out proposal for eliminating or rephrasing these special cases.\n "}, {"sha": "e4809214bd48eb88729fea80e112a47b634c22e4", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -252,7 +252,7 @@ struct Info {\n }\n \n fn write_info(info: &Info) -> io::Result<()> {\n-    let mut file = File::open(\"my_best_friends.txt\").unwrap();\n+    let mut file = File::create(\"my_best_friends.txt\").unwrap();\n \n     if let Err(e) = writeln!(&mut file, \"name: {}\", info.name) {\n         return Err(e)\n@@ -282,7 +282,7 @@ struct Info {\n }\n \n fn write_info(info: &Info) -> io::Result<()> {\n-    let mut file = try!(File::open(\"my_best_friends.txt\"));\n+    let mut file = try!(File::create(\"my_best_friends.txt\"));\n \n     try!(writeln!(&mut file, \"name: {}\", info.name));\n     try!(writeln!(&mut file, \"age: {}\", info.age));"}, {"sha": "cc8747d1fa7c17d6a7751dd9c6538abc60ded88d", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -5,7 +5,7 @@ projects. Cargo is currently in a pre-1.0 state, and so it is still a work in\n progress. However, it is already good enough to use for many Rust projects, and\n so it is assumed that Rust projects will use Cargo from the beginning.\n \n-[cratesio]: https://doc.crates.io\n+[cratesio]: http://doc.crates.io\n \n Cargo manages three things: building your code, downloading the dependencies\n your code needs, and building those dependencies. At first, your"}, {"sha": "b8230f060e073f51105e7919c4ca0371c2a51657", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -6,16 +6,16 @@ or a Mac, all you need to do is this (note that you don't need to type in the\n `$`s, they just indicate the start of each command):\n \n ```bash\n-$ curl -sf -L https://static.rust-lang.org/rustup.sh | sudo sh\n+$ curl -sf -L https://static.rust-lang.org/rustup.sh | sh\n ```\n \n If you're concerned about the [potential insecurity][insecurity] of using `curl\n-| sudo sh`, please keep reading and see our disclaimer below. And feel free to\n+| sh`, please keep reading and see our disclaimer below. And feel free to\n use a two-step version of the installation and examine our installation script:\n \n ```bash\n $ curl -f -L https://static.rust-lang.org/rustup.sh -O\n-$ sudo sh rustup.sh\n+$ sh rustup.sh\n ```\n \n [insecurity]: http://curlpipesh.tumblr.com\n@@ -40,13 +40,11 @@ If you used the Windows installer, just re-run the `.msi` and it will give you\n an uninstall option.\n \n Some people, and somewhat rightfully so, get very upset when we tell you to\n-`curl | sudo sh`. Basically, when you do this, you are trusting that the good\n+`curl | sh`. Basically, when you do this, you are trusting that the good\n people who maintain Rust aren't going to hack your computer and do bad things.\n That's a good instinct! If you're one of those people, please check out the\n documentation on [building Rust from Source][from source], or [the official\n-binary downloads][install page]. And we promise that this method will not be\n-the way to install Rust forever: it's just the easiest way to keep people\n-updated while Rust is in its alpha state.\n+binary downloads][install page].\n \n [from source]: https://github.com/rust-lang/rust#building-from-source\n [install page]: http://www.rust-lang.org/install.html"}, {"sha": "2f3055deb04e063dbdc1e12ae97222e90bf2853d", "filename": "src/doc/trpl/nightly-rust.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fnightly-rust.md?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -9,16 +9,16 @@ process, see \u2018[Stability as a deliverable][stability]\u2019.\n To install nightly Rust, you can use `rustup.sh`:\n \n ```bash\n-$ curl -s https://static.rust-lang.org/rustup.sh | sudo sh -s -- --channel=nightly\n+$ curl -s https://static.rust-lang.org/rustup.sh | sh -s -- --channel=nightly\n ```\n \n If you're concerned about the [potential insecurity][insecurity] of using `curl\n-| sudo sh`, please keep reading and see our disclaimer below. And feel free to\n+| sh`, please keep reading and see our disclaimer below. And feel free to\n use a two-step version of the installation and examine our installation script:\n \n ```bash\n $ curl -f -L https://static.rust-lang.org/rustup.sh -O\n-$ sudo sh rustup.sh --channel=nightly\n+$ sh rustup.sh --channel=nightly\n ```\n \n [insecurity]: http://curlpipesh.tumblr.com\n@@ -43,13 +43,11 @@ If you used the Windows installer, just re-run the `.msi` and it will give you\n an uninstall option.\n \n Some people, and somewhat rightfully so, get very upset when we tell you to\n-`curl | sudo sh`. Basically, when you do this, you are trusting that the good\n+`curl | sh`. Basically, when you do this, you are trusting that the good\n people who maintain Rust aren't going to hack your computer and do bad things.\n That's a good instinct! If you're one of those people, please check out the\n documentation on [building Rust from Source][from source], or [the official\n-binary downloads][install page]. And we promise that this method will not be\n-the way to install Rust forever: it's just the easiest way to keep people\n-updated while Rust is in its alpha state.\n+binary downloads][install page].\n \n [from source]: https://github.com/rust-lang/rust#building-from-source\n [install page]: http://www.rust-lang.org/install.html"}, {"sha": "a12c3298cb35b93b057ed019f97ea208d4665f9d", "filename": "src/etc/extract_grammar.py", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/0be117e2733423e70bccd8b0a46e8eccd1e1d1cc/src%2Fetc%2Fextract_grammar.py", "raw_url": "https://github.com/rust-lang/rust/raw/0be117e2733423e70bccd8b0a46e8eccd1e1d1cc/src%2Fetc%2Fextract_grammar.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract_grammar.py?ref=0be117e2733423e70bccd8b0a46e8eccd1e1d1cc", "patch": "@@ -1,156 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# This script is for extracting the grammar from the rust docs.\n-\n-import fileinput\n-\n-collections = {\"gram\": [],\n-               \"keyword\": [],\n-               \"reserved\": [],\n-               \"binop\": [],\n-               \"unop\": []}\n-\n-\n-in_coll = False\n-coll = \"\"\n-\n-for line in fileinput.input(openhook=fileinput.hook_encoded(\"utf-8\")):\n-    if in_coll:\n-        if line.startswith(\"~~~~\"):\n-            in_coll = False\n-        else:\n-            if coll in [\"keyword\", \"reserved\", \"binop\", \"unop\"]:\n-                for word in line.split():\n-                    if word not in collections[coll]:\n-                        collections[coll].append(word)\n-            else:\n-                collections[coll].append(line)\n-\n-    else:\n-        if line.startswith(\"~~~~\"):\n-            for cname in collections:\n-                if (\".\" + cname) in line:\n-                    coll = cname\n-                    in_coll = True\n-                    break\n-\n-# Define operator symbol-names here\n-\n-tokens = [\"non_star\", \"non_slash\", \"non_eol\",\n-          \"non_single_quote\", \"non_double_quote\", \"ident\"]\n-\n-symnames = {\n-    \".\": \"dot\",\n-    \"+\": \"plus\",\n-    \"-\": \"minus\",\n-    \"/\": \"slash\",\n-    \"*\": \"star\",\n-    \"%\": \"percent\",\n-\n-    \"~\": \"tilde\",\n-    \"@\": \"at\",\n-\n-    \"!\": \"not\",\n-    \"&\": \"and\",\n-    \"|\": \"or\",\n-    \"^\": \"xor\",\n-\n-    \"<<\": \"lsl\",\n-    \">>\": \"lsr\",\n-    \">>>\": \"asr\",\n-\n-    \"&&\": \"andand\",\n-    \"||\": \"oror\",\n-\n-    \"<\": \"lt\",\n-    \"<=\": \"le\",\n-    \"==\": \"eqeq\",\n-    \">=\": \"ge\",\n-    \">\": \"gt\",\n-\n-    \"=\": \"eq\",\n-\n-    \"+=\": \"plusequal\",\n-    \"-=\": \"minusequal\",\n-    \"/=\": \"divequal\",\n-    \"*=\": \"starequal\",\n-    \"%=\": \"percentequal\",\n-\n-    \"&=\": \"andequal\",\n-    \"|=\": \"orequal\",\n-    \"^=\": \"xorequal\",\n-\n-    \">>=\": \"lsrequal\",\n-    \">>>=\": \"asrequal\",\n-    \"<<=\": \"lslequal\",\n-\n-    \"::\": \"coloncolon\",\n-\n-    \"->\": \"rightarrow\",\n-    \"<-\": \"leftarrow\",\n-    \"<->\": \"swaparrow\",\n-\n-    \"//\": \"linecomment\",\n-    \"/*\": \"openblockcomment\",\n-    \"*/\": \"closeblockcomment\",\n-    \"macro_rules\": \"macro_rules\",\n-    \"=>\": \"eg\",\n-    \"..\": \"dotdot\",\n-    \",\": \"comma\"\n-}\n-\n-lines = []\n-\n-for line in collections[\"gram\"]:\n-    line2 = \"\"\n-    for word in line.split():\n-        # replace strings with keyword-names or symbol-names from table\n-        if word.startswith(\"\\\"\"):\n-            word = word[1:-1]\n-            if word in symnames:\n-                word = symnames[word]\n-            else:\n-                for ch in word:\n-                    if not ch.isalpha():\n-                        raise Exception(\"non-alpha apparent keyword: \"\n-                                        + word)\n-                if word not in tokens:\n-                    if (word in collections[\"keyword\"] or\n-                            word in collections[\"reserved\"]):\n-                        tokens.append(word)\n-                    else:\n-                        raise Exception(\"unknown keyword/reserved word: \"\n-                                        + word)\n-\n-        line2 += \" \" + word\n-    lines.append(line2)\n-\n-\n-for word in collections[\"keyword\"] + collections[\"reserved\"]:\n-    if word not in tokens:\n-        tokens.append(word)\n-\n-for sym in collections[\"unop\"] + collections[\"binop\"] + symnames.keys():\n-    word = symnames[sym]\n-    if word not in tokens:\n-        tokens.append(word)\n-\n-\n-print(\"%start parser, token;\")\n-print(\"%%token %s ;\" % (\"\\n\\t, \".join(tokens)))\n-for coll in [\"keyword\", \"reserved\"]:\n-    print(\"%s: %s ; \" % (coll, \"\\n\\t| \".join(collections[coll])))\n-for coll in [\"binop\", \"unop\"]:\n-    print(\"%s: %s ; \" % (coll, \"\\n\\t| \".join([symnames[x]\n-                                              for x in collections[coll]])))\n-print(\"\\n\".join(lines))"}, {"sha": "38431ab5bf1b0b84e1f4c89a61e7325dc19745a9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -713,7 +713,7 @@ impl str {\n     /// is skipped if empty.\n     ///\n     /// This method can be used for string data that is _terminated_,\n-    /// rather than _seperated_ by a pattern.\n+    /// rather than _separated_ by a pattern.\n     ///\n     /// # Iterator behavior\n     ///\n@@ -760,7 +760,7 @@ impl str {\n     /// skipped if empty.\n     ///\n     /// This method can be used for string data that is _terminated_,\n-    /// rather than _seperated_ by a pattern.\n+    /// rather than _separated_ by a pattern.\n     ///\n     /// # Iterator behavior\n     ///"}, {"sha": "3c668f7fe9bc680f5369e0ef6d8c2d2f92212973", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -757,7 +757,7 @@ impl FromUtf8Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> { self.bytes }\n \n-    /// Accesss the underlying UTF8-error that was the cause of this error.\n+    /// Access the underlying UTF8-error that was the cause of this error.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn utf8_error(&self) -> Utf8Error { self.error }\n }"}, {"sha": "a2be8b8121938ec164bf2ea9fe0edaafe78b0297", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -15,35 +15,43 @@\n //!\n //! # Examples\n //!\n-//! Explicitly creating a `Vec<T>` with `new()`:\n+//! You can explicitly create a `Vec<T>` with `new()`:\n //!\n //! ```\n //! let xs: Vec<i32> = Vec::new();\n //! ```\n //!\n-//! Using the `vec!` macro:\n+//! ...or by using the `vec!` macro:\n //!\n //! ```\n //! let ys: Vec<i32> = vec![];\n //!\n //! let zs = vec![1i32, 2, 3, 4, 5];\n //! ```\n //!\n-//! Push:\n+//! You can `push` values onto the end of a vector (which will grow the vector as needed):\n //!\n //! ```\n //! let mut xs = vec![1i32, 2];\n //!\n //! xs.push(3);\n //! ```\n //!\n-//! And pop:\n+//! Popping values works in much the same way:\n //!\n //! ```\n //! let mut xs = vec![1i32, 2];\n //!\n //! let two = xs.pop();\n //! ```\n+//!\n+//! Vectors also support indexing (through the `Index` and `IndexMut` traits):\n+//!\n+//! ```\n+//! let mut xs = vec![1i32, 2, 3];\n+//! let three = xs[2];\n+//! xs[1] = xs[1] + 5;\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "8da28094be3aed3c007bd1469f45949cd80a05c7", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -161,7 +161,7 @@ use slice;\n // `Iterator` is an enumeration with one type parameter and two variants,\n // which basically means it must be `Option`.\n \n-/// The `Option` type. See [the module level documentation](../index.html) for more.\n+/// The `Option` type. See [the module level documentation](index.html) for more.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {"}, {"sha": "c9bbcba31e9de28009118823df32c32693d2f3e9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -421,7 +421,7 @@ macro_rules! derive_pattern_clone {\n /// wrapping an private internal one that makes use of the `Pattern` API.\n ///\n /// For all patterns `P: Pattern<'a>` the following items will be\n-/// generated (generics ommitted):\n+/// generated (generics omitted):\n ///\n /// struct $forward_iterator($internal_iterator);\n /// struct $reverse_iterator($internal_iterator);"}, {"sha": "b0940aa7ec0ac823afccc51d440547dacd80c898", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -461,7 +461,7 @@ impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> {\n \n /// Constructs and returns a substitution that, for a given type\n /// scheme parameterized by `generics`, will replace every generic\n-/// parmeter in the type with a skolemized type/region (which one can\n+/// parameter in the type with a skolemized type/region (which one can\n /// think of as a \"fresh constant\", except at the type/region level of\n /// reasoning).\n ///"}, {"sha": "c80dba6d1fb31d26e067f5cb1e7b0ff6debe5749", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -1908,7 +1908,7 @@ pub enum Predicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    /// Performs a substituion suitable for going from a\n+    /// Performs a substitution suitable for going from a\n     /// poly-trait-ref to supertraits that must hold if that\n     /// poly-trait-ref holds. This is slightly different from a normal\n     /// substitution in terms of what happens with bound regions.  See"}, {"sha": "eedda3cf4371adf80ce14bbe9aeeeb0e4a6cedc8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -212,8 +212,9 @@ fn test_resize_policy() {\n /// overridden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n-/// this can frequently be achieved by using `#[derive(Eq, Hash)]`. If you\n-/// implement these yourself, it is important that the following property holds:\n+/// this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\n+/// If you implement these yourself, it is important that the following\n+/// property holds:\n ///\n /// ```text\n /// k1 == k2 -> hash(k1) == hash(k2)\n@@ -250,26 +251,26 @@ fn test_resize_policy() {\n /// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n ///\n /// // check for a specific one.\n-/// if !book_reviews.contains_key(&(\"Les Mis\u00e9rables\")) {\n+/// if !book_reviews.contains_key(\"Les Mis\u00e9rables\") {\n ///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n ///              book_reviews.len());\n /// }\n ///\n /// // oops, this review has a lot of spelling mistakes, let's delete it.\n-/// book_reviews.remove(&(\"The Adventures of Sherlock Holmes\"));\n+/// book_reviews.remove(\"The Adventures of Sherlock Holmes\");\n ///\n /// // look up the values associated with some keys.\n /// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n-/// for book in to_find.iter() {\n+/// for book in &to_find {\n ///     match book_reviews.get(book) {\n-///         Some(review) => println!(\"{}: {}\", *book, *review),\n-///         None => println!(\"{} is unreviewed.\", *book)\n+///         Some(review) => println!(\"{}: {}\", book, review),\n+///         None => println!(\"{} is unreviewed.\", book)\n ///     }\n /// }\n ///\n /// // iterate over everything.\n-/// for (book, review) in book_reviews.iter() {\n-///     println!(\"{}: \\\"{}\\\"\", *book, *review);\n+/// for (book, review) in &book_reviews {\n+///     println!(\"{}: \\\"{}\\\"\", book, review);\n /// }\n /// ```\n ///\n@@ -300,7 +301,7 @@ fn test_resize_policy() {\n /// vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);\n ///\n /// // Use derived implementation to print the status of the vikings.\n-/// for (viking, health) in vikings.iter() {\n+/// for (viking, health) in &vikings {\n ///     println!(\"{:?} has {} hp\", viking, health);\n /// }\n /// ```"}, {"sha": "d6754f10335cab9f0810ff5b97b223f659885826", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -31,10 +31,12 @@ use super::state::HashState;\n // to get rid of it properly.\n \n /// An implementation of a hash set using the underlying representation of a\n-/// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n-/// requires that the elements implement the `Eq` and `Hash` traits. This can\n-/// frequently be achieved by using `#[derive(Eq, Hash)]`. If you implement\n-/// these yourself, it is important that the following property holds:\n+/// HashMap where the value is ().\n+///\n+/// As with the `HashMap` type, a `HashSet` requires that the elements\n+/// implement the `Eq` and `Hash` traits. This can frequently be achieved by\n+/// using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\n+/// it is important that the following property holds:\n ///\n /// ```text\n /// k1 == k2 -> hash(k1) == hash(k2)\n@@ -64,17 +66,17 @@ use super::state::HashState;\n /// books.insert(\"The Great Gatsby\");\n ///\n /// // Check for a specific one.\n-/// if !books.contains(&(\"The Winds of Winter\")) {\n+/// if !books.contains(\"The Winds of Winter\") {\n ///     println!(\"We have {} books, but The Winds of Winter ain't one.\",\n ///              books.len());\n /// }\n ///\n /// // Remove a book.\n-/// books.remove(&\"The Odyssey\");\n+/// books.remove(\"The Odyssey\");\n ///\n /// // Iterate over everything.\n-/// for book in books.iter() {\n-///     println!(\"{}\", *book);\n+/// for book in &books {\n+///     println!(\"{}\", book);\n /// }\n /// ```\n ///\n@@ -98,7 +100,7 @@ use super::state::HashState;\n /// vikings.insert(Viking { name: \"Harald\", power: 8 });\n ///\n /// // Use derived implementation to print the vikings.\n-/// for x in vikings.iter() {\n+/// for x in &vikings {\n ///     println!(\"{:?}\", x);\n /// }\n /// ```"}, {"sha": "362296cd1339daa1d3456bc1f189a99f96129f57", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -434,7 +434,7 @@ pub mod builtin {\n \n     /// Parse the current given file as an expression.\n     ///\n-    /// This is generally a bad idea, because it's going to behave unhygenically.\n+    /// This is generally a bad idea, because it's going to behave unhygienically.\n     ///\n     /// # Examples\n     ///"}, {"sha": "bc13d966a10b7b74eb450922f978f1ade95f4cc8", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -142,7 +142,8 @@ impl Ipv4Addr {\n \n     /// Returns true if this address is in a range designated for documentation.\n     ///\n-    /// This is defined in RFC 5737\n+    /// This is defined in RFC 5737:\n+    ///\n     /// - 192.0.2.0/24 (TEST-NET-1)\n     /// - 198.51.100.0/24 (TEST-NET-2)\n     /// - 203.0.113.0/24 (TEST-NET-3)"}, {"sha": "8ccc387c9027788adb1e7603bdbc34f1a01a58d4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -358,7 +358,7 @@ pub fn is_separator(c: char) -> bool {\n     c.is_ascii() && is_sep_byte(c as u8)\n }\n \n-/// The primary sperator for the current platform\n+/// The primary separator for the current platform\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAIN_SEPARATOR: char = platform::MAIN_SEP;\n "}, {"sha": "39910f509f9c28689a80e56d222afb78fc4770ff", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -138,11 +138,11 @@ impl Metadata {\n     pub fn rdev(&self) -> raw::dev_t { self.0.raw().st_rdev as raw::dev_t }\n     pub fn size(&self) -> raw::off_t { self.0.raw().st_size as raw::off_t }\n     pub fn atime(&self) -> raw::time_t { self.0.raw().st_atime }\n-    pub fn atime_nsec(&self) -> c_long { self.0.raw().st_atime }\n+    pub fn atime_nsec(&self) -> c_long { self.0.raw().st_atime_nsec as c_long }\n     pub fn mtime(&self) -> raw::time_t { self.0.raw().st_mtime }\n-    pub fn mtime_nsec(&self) -> c_long { self.0.raw().st_mtime }\n+    pub fn mtime_nsec(&self) -> c_long { self.0.raw().st_mtime_nsec as c_long }\n     pub fn ctime(&self) -> raw::time_t { self.0.raw().st_ctime }\n-    pub fn ctime_nsec(&self) -> c_long { self.0.raw().st_ctime }\n+    pub fn ctime_nsec(&self) -> c_long { self.0.raw().st_ctime_nsec as c_long }\n \n     pub fn blksize(&self) -> raw::blksize_t {\n         self.0.raw().st_blksize as raw::blksize_t"}, {"sha": "e00cb82649b7b6bb538948623d1f1215eafbcd6e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -595,7 +595,7 @@ pub enum Pat_ {\n \n     /// An associated const named using the qualified path `<T>::CONST` or\n     /// `<T as Trait>::CONST`. Associated consts from inherent impls can be\n-    /// refered to as simply `T::CONST`, in which case they will end up as\n+    /// referred to as simply `T::CONST`, in which case they will end up as\n     /// PatEnum, and the resolver will have to sort that out.\n     PatQPath(QSelf, Path),\n "}, {"sha": "5c1f6cc12f59e1211a544c1d8cec7d2a527ed2c6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -903,10 +903,10 @@ impl<'a> State<'a> {\n                 try!(self.print_generics(params));\n                 try!(self.end()); // end the inner ibox\n \n+                try!(self.print_where_clause(&params.where_clause));\n                 try!(space(&mut self.s));\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_type(&**ty));\n-                try!(self.print_where_clause(&params.where_clause));\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer ibox\n             }"}, {"sha": "6c5a847869e4cb248193f1c373f5306db0512b54", "filename": "src/test/pretty/issue-25031.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Ftest%2Fpretty%2Fissue-25031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4/src%2Ftest%2Fpretty%2Fissue-25031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-25031.rs?ref=31e3cb7c4e8895fff23aa67e1cd6b58d798cdac4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Testing that type items with where clauses output correctly.\n+\n+// pp-exact\n+\n+fn main() {\n+    type Foo<T> where T: Copy = Box<T>;\n+}"}]}