{"sha": "d028079b88df0c642aefe4de4e338e4df14f3cd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMjgwNzliODhkZjBjNjQyYWVmZTRkZTRlMzM4ZTRkZjE0ZjNjZDM=", "commit": {"author": {"name": "Axel Viala", "email": "axel.viala@darnuria.eu", "date": "2014-02-22T16:54:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T05:04:05Z"}, "message": "Documentation : Tutorial improvement...\n\nRefactoring examples on implementation of generics for linked list.\nFixing typo of 'Note's for coherancy.\n\nAdding internal links inside the tutorial example with traits,\ngenerics etc...", "tree": {"sha": "be2435c0b2c1216167577959ec6f3cd3054152d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2435c0b2c1216167577959ec6f3cd3054152d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d028079b88df0c642aefe4de4e338e4df14f3cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d028079b88df0c642aefe4de4e338e4df14f3cd3", "html_url": "https://github.com/rust-lang/rust/commit/d028079b88df0c642aefe4de4e338e4df14f3cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d028079b88df0c642aefe4de4e338e4df14f3cd3/comments", "author": {"login": "darnuria", "id": 2827553, "node_id": "MDQ6VXNlcjI4Mjc1NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2827553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darnuria", "html_url": "https://github.com/darnuria", "followers_url": "https://api.github.com/users/darnuria/followers", "following_url": "https://api.github.com/users/darnuria/following{/other_user}", "gists_url": "https://api.github.com/users/darnuria/gists{/gist_id}", "starred_url": "https://api.github.com/users/darnuria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darnuria/subscriptions", "organizations_url": "https://api.github.com/users/darnuria/orgs", "repos_url": "https://api.github.com/users/darnuria/repos", "events_url": "https://api.github.com/users/darnuria/events{/privacy}", "received_events_url": "https://api.github.com/users/darnuria/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231832d83579b4ed0268a70e53af806a7c53e53f", "url": "https://api.github.com/repos/rust-lang/rust/commits/231832d83579b4ed0268a70e53af806a7c53e53f", "html_url": "https://github.com/rust-lang/rust/commit/231832d83579b4ed0268a70e53af806a7c53e53f"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "1c33d17ec66d268a9704906eb13d009c99a16761", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d028079b88df0c642aefe4de4e338e4df14f3cd3/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d028079b88df0c642aefe4de4e338e4df14f3cd3/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=d028079b88df0c642aefe4de4e338e4df14f3cd3", "patch": "@@ -133,6 +133,8 @@ fn main() {\n     println!(\"hello?\");\n }\n ~~~~\n+> ***Note:*** *Macros* are explained in the [Syntax extensions\n+> (3.4)](#syntax-extensions) section.\n \n If the Rust compiler was installed successfully, running `rustc\n hello.rs` will produce an executable called `hello` (or `hello.exe` on\n@@ -1059,7 +1061,7 @@ box, while the owner holds onto a pointer to it:\n     list -> | Cons | 1 | ~ | -> | Cons | 2 | ~ | -> | Cons | 3 | ~ | -> | Nil          |\n             +--------------+    +--------------+    +--------------+    +--------------+\n \n-> Note: the above diagram shows the logical contents of the enum. The actual\n+> ***Note:*** the above diagram shows the logical contents of the enum. The actual\n > memory layout of the enum may vary. For example, for the `List` enum shown\n > above, Rust guarantees that there will be no enum tag field in the actual\n > structure. See the language reference for more details.\n@@ -1114,7 +1116,7 @@ let z = x; // no new memory allocated, `x` can no longer be used\n ~~~~\n \n The `clone` method is provided by the `Clone` trait, and can be derived for\n-our `List` type. Traits will be explained in detail later.\n+our `List` type. Traits will be explained in detail [later](#traits).\n \n ~~~{.ignore}\n #[deriving(Clone)]\n@@ -1207,8 +1209,8 @@ let ys = Cons(5, ~Cons(10, ~Nil));\n assert!(eq(&xs, &ys));\n ~~~\n \n-Note that Rust doesn't guarantee [tail-call](http://en.wikipedia.org/wiki/Tail_call) optimization,\n-but LLVM is able to handle a simple case like this with optimizations enabled.\n+> ***Note:*** Rust doesn't guarantee [tail-call](http://en.wikipedia.org/wiki/Tail_call) optimization,\n+> but LLVM is able to handle a simple case like this with optimizations enabled.\n \n ## Lists of other types\n \n@@ -1218,6 +1220,9 @@ element type.\n \n The `u32` in the previous definition can be substituted with a type parameter:\n \n+> ***Note:*** The following code introduces generics, which are explained in a\n+> [dedicated section](#generics).\n+\n ~~~\n enum List<T> {\n     Cons(T, ~List<T>),\n@@ -1336,9 +1341,13 @@ impl<T: Eq> Eq for List<T> {\n \n let xs = Cons(5, ~Cons(10, ~Nil));\n let ys = Cons(5, ~Cons(10, ~Nil));\n+// The methods below are part of the Eq trait,\n+// which we implemented on our linked list.\n assert!(xs.eq(&ys));\n-assert!(xs == ys);\n assert!(!xs.ne(&ys));\n+\n+// The Eq trait also allows us to use the shorthand infix operators.\n+assert!(xs == ys);\n assert!(!(xs != ys));\n ~~~\n "}]}