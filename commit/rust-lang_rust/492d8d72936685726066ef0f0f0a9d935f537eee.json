{"sha": "492d8d72936685726066ef0f0f0a9d935f537eee", "node_id": "C_kwDOAAsO6NoAKDQ5MmQ4ZDcyOTM2Njg1NzI2MDY2ZWYwZjBmMGE5ZDkzNWY1MzdlZWU", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2022-03-12T20:38:44Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2022-03-12T20:38:44Z"}, "message": "Fix rebase conflicts with stderr files", "tree": {"sha": "213a15657b6a6e3fa8e7daf847d4d0f25186beeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213a15657b6a6e3fa8e7daf847d4d0f25186beeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/492d8d72936685726066ef0f0f0a9d935f537eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/492d8d72936685726066ef0f0f0a9d935f537eee", "html_url": "https://github.com/rust-lang/rust/commit/492d8d72936685726066ef0f0f0a9d935f537eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/492d8d72936685726066ef0f0f0a9d935f537eee/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e76d6999983959af871060d98f72f2067a51a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e76d6999983959af871060d98f72f2067a51a2", "html_url": "https://github.com/rust-lang/rust/commit/c0e76d6999983959af871060d98f72f2067a51a2"}], "stats": {"total": 215, "additions": 161, "deletions": 54}, "files": [{"sha": "612bed639bfb1f383232e5a8ca2a3e8d8daaf174", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -695,7 +695,7 @@ impl<'tcx> Constructor<'tcx> {\n     /// attribute from a type not local to the current crate.\n     pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n         if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n-            let variant_def_id = adt.variants[*idx].def_id;\n+            let variant_def_id = adt.variants()[*idx].def_id;\n             return pcx.cx.tcx.is_doc_hidden(variant_def_id) && !variant_def_id.is_local();\n         }\n         false"}, {"sha": "4163b87dc8597f685e32acc374366938227bf782", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.rs?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -12,10 +12,10 @@ struct InCrate {\n }\n \n fn main() {\n-    let HiddenStruct { one, two, } = HiddenStruct::default();\n+    let HiddenStruct { one, two } = HiddenStruct::default();\n     //~^ pattern requires `..` due to inaccessible fields\n \n-    let HiddenStruct { one, } = HiddenStruct::default();\n+    let HiddenStruct { one } = HiddenStruct::default();\n     //~^ pattern does not mention field `two` and inaccessible fields\n \n     let HiddenStruct { one, hide } = HiddenStruct::default();"}, {"sha": "f277bfbc884fbc46da61f09434f77c8e640ddfe3", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -1,19 +1,19 @@\n error: pattern requires `..` due to inaccessible fields\n   --> $DIR/doc-hidden-fields.rs:15:9\n    |\n-LL |     let HiddenStruct { one, two, } = HiddenStruct::default();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let HiddenStruct { one, two } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: ignore the inaccessible and unused fields\n    |\n-LL |     let HiddenStruct { one, two, .., } = HiddenStruct::default();\n+LL |     let HiddenStruct { one, two, .. } = HiddenStruct::default();\n    |                                ++++\n \n error[E0027]: pattern does not mention field `two` and inaccessible fields\n   --> $DIR/doc-hidden-fields.rs:18:9\n    |\n-LL |     let HiddenStruct { one, } = HiddenStruct::default();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ missing field `two` and inaccessible fields\n+LL |     let HiddenStruct { one } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^ missing field `two` and inaccessible fields\n    |\n help: include the missing field in the pattern and ignore the inaccessible fields\n    |"}, {"sha": "296465eb81838f6056d6dd75b3701d356a028ec1", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 73, "deletions": 28, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -4,71 +4,116 @@ error[E0004]: non-exhaustive patterns: `_` not covered\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ pattern `_` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+note: `HiddenEnum` defined here\n+  --> $DIR/auxiliary/hidden.rs:1:1\n+   |\n+LL | / pub enum HiddenEnum {\n+LL | |     A,\n+LL | |     B,\n+LL | |     #[doc(hidden)]\n+LL | |     C,\n+LL | | }\n+   | |_^\n    = note: the matched value is of type `HiddenEnum`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         HiddenEnum::B => {}\n+LL +         _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:21:11\n    |\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ pattern `B` not covered\n    |\n-note: `Foo` defined here\n+note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL |     B,\n-   |     - not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+LL | / pub enum HiddenEnum {\n+LL | |     A,\n+LL | |     B,\n+   | |     ^ not covered\n+LL | |     #[doc(hidden)]\n+LL | |     C,\n+LL | | }\n+   | |_-\n    = note: the matched value is of type `HiddenEnum`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         HiddenEnum::C => {}\n+LL +         B => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:27:11\n    |\n LL |     match HiddenEnum::A {\n    |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered\n    |\n-note: `Foo` defined here\n+note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL |     B,\n-   |     - not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+LL | / pub enum HiddenEnum {\n+LL | |     A,\n+LL | |     B,\n+   | |     ^ not covered\n+LL | |     #[doc(hidden)]\n+LL | |     C,\n+LL | | }\n+   | |_-\n    = note: the matched value is of type `HiddenEnum`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n+   |\n+LL ~         HiddenEnum::A => {}\n+LL +         B | _ => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:32:11\n    |\n LL |     match None {\n    |           ^^^^ patterns `Some(B)` and `Some(_)` not covered\n    |\n-note: `Option<Foo>` defined here\n+note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   |     ---- not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+LL | / pub enum Option<T> {\n+LL | |     /// No value.\n+LL | |     #[lang = \"None\"]\n+LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+...  |\n+LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   | |     ^^^^ not covered\n+LL | | }\n+   | |_-\n    = note: the matched value is of type `Option<HiddenEnum>`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n+   |\n+LL ~         Some(HiddenEnum::A) => {}\n+LL +         Some(B) | Some(_) => todo!()\n+   |\n \n error[E0004]: non-exhaustive patterns: `C` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:38:11\n    |\n-LL | / enum InCrate {\n-LL | |     A,\n-LL | |     B,\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-   | |     - not covered\n-LL | | }\n-   | |_- `InCrate` defined here\n-...\n-LL |       match InCrate::A {\n-   |             ^^^^^^^^^^ pattern `C` not covered\n+LL |     match InCrate::A {\n+   |           ^^^^^^^^^^ pattern `C` not covered\n    |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+note: `InCrate` defined here\n+  --> $DIR/doc-hidden-non-exhaustive.rs:11:5\n+   |\n+LL | enum InCrate {\n+   |      -------\n+...\n+LL |     C,\n+   |     ^ not covered\n    = note: the matched value is of type `InCrate`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n+   |\n+LL ~         InCrate::B => {}\n+LL +         C => todo!()\n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "cf98c51a2b41ebf3cfb2314d7da524522c421aa3", "filename": "src/test/ui/pattern/usefulness/stable-gated-fields.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-fields.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -0,0 +1,29 @@\n+error[E0027]: pattern does not mention field `stable2` and inaccessible fields\n+  --> $DIR/stable-gated-fields.rs:8:9\n+   |\n+LL |     let UnstableStruct { stable } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `stable2` and inaccessible fields\n+   |\n+help: include the missing field in the pattern and ignore the inaccessible fields\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                ~~~~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, .. } = UnstableStruct::default();\n+   |                                ~~~~~~\n+\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/stable-gated-fields.rs:11:9\n+   |\n+LL |     let UnstableStruct { stable, stable2 } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                         ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "559539178cbe3931f486006010b19f2612d1f877", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Stable2` and `_` not covered\n   --> $DIR/stable-gated-patterns.rs:8:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:9:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -17,34 +17,34 @@ LL | |     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n LL | |     Unstable,\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n-LL ~         Foo::Stable => {}\n+LL ~         UnstableEnum::Stable => {}\n LL +         Stable2 | _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/stable-gated-patterns.rs:13:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ pattern `_` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ pattern `_` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:5:1\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n ...  |\n LL | |     Unstable,\n LL | | }\n    | |_^\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::Stable2 => {}\n+LL ~         UnstableEnum::Stable2 => {}\n LL +         _ => todo!()\n    |\n "}, {"sha": "e4f5fa06b3ff5cfc8ebe0513350d8d665ef8f91a", "filename": "src/test/ui/pattern/usefulness/unstable-gated-fields.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-fields.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -0,0 +1,33 @@\n+error[E0027]: pattern does not mention field `unstable`\n+  --> $DIR/unstable-gated-fields.rs:10:9\n+   |\n+LL |     let UnstableStruct { stable, stable2, } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `unstable`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let UnstableStruct { stable, stable2, unstable } = UnstableStruct::default();\n+   |                                         ~~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, stable2, .. } = UnstableStruct::default();\n+   |                                         ~~~~~~\n+\n+error[E0027]: pattern does not mention field `stable2`\n+  --> $DIR/unstable-gated-fields.rs:13:9\n+   |\n+LL |     let UnstableStruct { stable, unstable, } = UnstableStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `stable2`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let UnstableStruct { stable, unstable, stable2 } = UnstableStruct::default();\n+   |                                          ~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let UnstableStruct { stable, unstable, .. } = UnstableStruct::default();\n+   |                                          ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "b5f1805deef118b893f06a5e4d331eed07837ae1", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/492d8d72936685726066ef0f0f0a9d935f537eee/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=492d8d72936685726066ef0f0f0a9d935f537eee", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Unstable` not covered\n   --> $DIR/unstable-gated-patterns.rs:10:11\n    |\n-LL |     match Foo::Stable {\n-   |           ^^^^^^^^^^^ pattern `Unstable` not covered\n+LL |     match UnstableEnum::Stable {\n+   |           ^^^^^^^^^^^^^^^^^^^^ pattern `Unstable` not covered\n    |\n-note: `Foo` defined here\n+note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:11:5\n    |\n-LL | / pub enum Foo {\n+LL | / pub enum UnstableEnum {\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n LL | |     Stable,\n LL | |     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -16,10 +16,10 @@ LL | |     Unstable,\n    | |     ^^^^^^^^ not covered\n LL | | }\n    | |_-\n-   = note: the matched value is of type `Foo`\n+   = note: the matched value is of type `UnstableEnum`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL ~         Foo::Stable2 => {}\n+LL ~         UnstableEnum::Stable2 => {}\n LL +         Unstable => todo!()\n    |\n "}]}