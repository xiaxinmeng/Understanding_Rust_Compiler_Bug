{"sha": "bd56de745b64d6d3eb8b64f9716ca08811a6fd72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTZkZTc0NWI2NGQ2ZDNlYjhiNjRmOTcxNmNhMDg4MTFhNmZkNzI=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-17T19:15:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2010-07-18T06:25:18Z"}, "message": "Explain that rust methods can't call other methods on the same object, either\nimplicitly or explicitly.", "tree": {"sha": "abac46f4e74d2848ce888e05e926968e526603cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abac46f4e74d2848ce888e05e926968e526603cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd56de745b64d6d3eb8b64f9716ca08811a6fd72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd56de745b64d6d3eb8b64f9716ca08811a6fd72", "html_url": "https://github.com/rust-lang/rust/commit/bd56de745b64d6d3eb8b64f9716ca08811a6fd72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd56de745b64d6d3eb8b64f9716ca08811a6fd72/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c425e9f18f0b0b5062e06f174f49b2ee4aa902", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c425e9f18f0b0b5062e06f174f49b2ee4aa902", "html_url": "https://github.com/rust-lang/rust/commit/c3c425e9f18f0b0b5062e06f174f49b2ee4aa902"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "1f780d6f800c00eb7e0c2107386976a6910acd45", "filename": "doc/rust.texi", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bd56de745b64d6d3eb8b64f9716ca08811a6fd72/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/bd56de745b64d6d3eb8b64f9716ca08811a6fd72/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=bd56de745b64d6d3eb8b64f9716ca08811a6fd72", "patch": "@@ -1811,6 +1811,50 @@ c.incr();\n check (c.get() == 3);\n @end example\n \n+There is no @emph{this} or @emph{self} available inside an object's\n+methods, either implicitly or explicitly, so you can't directly call\n+other methods.  For example:\n+@example\n+obj my_obj() @{\n+  fn get() -> int @{\n+    ret 3;\n+  @}\n+  fn foo() @{\n+    auto c = get();  // Fails\n+  @}\n+@}\n+@end example\n+\n+The current replacement is to write a factory function for your type,\n+which provides any private helper functions:\n+@example\n+type my_obj =\n+  obj @{\n+    fn get() -> int;\n+    fn foo();\n+  @};\n+\n+fn mk_my_obj() -> my_obj @{\n+  fn get_helper() -> int @{\n+    ret 3;\n+  @}\n+\n+  obj impl() @{\n+    fn get() -> int @{\n+      ret get_helper();\n+    @}\n+    fn foo() @{\n+      auto c = get_helper();  // Works\n+    @}\n+  @}\n+\n+  ret impl();\n+@}\n+@end example\n+\n+This factory function also allows you to bind the object's state\n+variables to initial values.\n+\n @node       Ref.Item.Type\n @subsection Ref.Item.Type\n @c * Ref.Item.Type::          Items defining the types of values and slots."}]}