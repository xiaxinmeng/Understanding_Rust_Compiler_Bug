{"sha": "88bd646be096a816c1f842b1919f169d0d797ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YmQ2NDZiZTA5NmE4MTZjMWY4NDJiMTkxOWYxNjlkMGQ3OTdlZjk=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-09-05T04:01:41Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-09-05T04:01:41Z"}, "message": "Make integer bit count methods return uints\n\nFixes rust-lang/rfcs#224", "tree": {"sha": "7438cb25cfbd21fb18d8c98ccbdc54cb823ca423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7438cb25cfbd21fb18d8c98ccbdc54cb823ca423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88bd646be096a816c1f842b1919f169d0d797ef9", "comment_count": 22, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88bd646be096a816c1f842b1919f169d0d797ef9", "html_url": "https://github.com/rust-lang/rust/commit/88bd646be096a816c1f842b1919f169d0d797ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88bd646be096a816c1f842b1919f169d0d797ef9/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5248b1187d7b02d5007f7dc6563c04ac0763fb17", "url": "https://api.github.com/repos/rust-lang/rust/commits/5248b1187d7b02d5007f7dc6563c04ac0763fb17", "html_url": "https://github.com/rust-lang/rust/commit/5248b1187d7b02d5007f7dc6563c04ac0763fb17"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "f6c5ffd540255468f15d15e876d284134fd59ad0", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=88bd646be096a816c1f842b1919f169d0d797ef9", "patch": "@@ -406,7 +406,7 @@ pub trait Int: Primitive\n     ///\n     /// assert_eq!(n.count_ones(), 3);\n     /// ```\n-    fn count_ones(self) -> Self;\n+    fn count_ones(self) -> uint;\n \n     /// Returns the number of zeros in the binary representation of the integer.\n     ///\n@@ -418,7 +418,7 @@ pub trait Int: Primitive\n     /// assert_eq!(n.count_zeros(), 5);\n     /// ```\n     #[inline]\n-    fn count_zeros(self) -> Self {\n+    fn count_zeros(self) -> uint {\n         (!self).count_ones()\n     }\n \n@@ -432,7 +432,7 @@ pub trait Int: Primitive\n     ///\n     /// assert_eq!(n.leading_zeros(), 10);\n     /// ```\n-    fn leading_zeros(self) -> Self;\n+    fn leading_zeros(self) -> uint;\n \n     /// Returns the number of trailing zeros in the binary representation\n     /// of the integer.\n@@ -444,7 +444,7 @@ pub trait Int: Primitive\n     ///\n     /// assert_eq!(n.trailing_zeros(), 3);\n     /// ```\n-    fn trailing_zeros(self) -> Self;\n+    fn trailing_zeros(self) -> uint;\n \n     /// Shifts the bits to the left by a specified amount amount, `n`, wrapping\n     /// the truncated bits to the end of the resulting integer.\n@@ -569,13 +569,13 @@ macro_rules! int_impl {\n     ($T:ty, $BITS:expr, $ctpop:path, $ctlz:path, $cttz:path, $bswap:path) => {\n         impl Int for $T {\n             #[inline]\n-            fn count_ones(self) -> $T { unsafe { $ctpop(self) } }\n+            fn count_ones(self) -> uint { unsafe { $ctpop(self) as uint } }\n \n             #[inline]\n-            fn leading_zeros(self) -> $T { unsafe { $ctlz(self) } }\n+            fn leading_zeros(self) -> uint { unsafe { $ctlz(self) as uint } }\n \n             #[inline]\n-            fn trailing_zeros(self) -> $T { unsafe { $cttz(self) } }\n+            fn trailing_zeros(self) -> uint { unsafe { $cttz(self) as uint } }\n \n             #[inline]\n             fn rotate_left(self, n: uint) -> $T {\n@@ -629,13 +629,13 @@ macro_rules! int_cast_impl {\n     ($T:ty, $U:ty) => {\n         impl Int for $T {\n             #[inline]\n-            fn count_ones(self) -> $T { (self as $U).count_ones() as $T }\n+            fn count_ones(self) -> uint { (self as $U).count_ones() }\n \n             #[inline]\n-            fn leading_zeros(self) -> $T { (self as $U).leading_zeros() as $T }\n+            fn leading_zeros(self) -> uint { (self as $U).leading_zeros() }\n \n             #[inline]\n-            fn trailing_zeros(self) -> $T { (self as $U).trailing_zeros() as $T }\n+            fn trailing_zeros(self) -> uint { (self as $U).trailing_zeros() }\n \n             #[inline]\n             fn rotate_left(self, n: uint) -> $T { (self as $U).rotate_left(n) as $T }"}, {"sha": "f74f503383b7df8433c560b31606309a30ea448e", "filename": "src/libcoretest/num/int_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcoretest%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fint_macros.rs?ref=88bd646be096a816c1f842b1919f169d0d797ef9", "patch": "@@ -95,9 +95,9 @@ mod tests {\n \n     #[test]\n     fn test_count_zeros() {\n-        assert!(A.count_zeros() == BITS as $T - 3);\n-        assert!(B.count_zeros() == BITS as $T - 2);\n-        assert!(C.count_zeros() == BITS as $T - 5);\n+        assert!(A.count_zeros() == BITS - 3);\n+        assert!(B.count_zeros() == BITS - 2);\n+        assert!(C.count_zeros() == BITS - 5);\n     }\n \n     #[test]"}, {"sha": "e59e2378ba2425e3495ddd3e871f3088383d3181", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=88bd646be096a816c1f842b1919f169d0d797ef9", "patch": "@@ -55,9 +55,9 @@ mod tests {\n \n     #[test]\n     fn test_count_zeros() {\n-        assert!(A.count_zeros() == BITS as $T - 3);\n-        assert!(B.count_zeros() == BITS as $T - 2);\n-        assert!(C.count_zeros() == BITS as $T - 5);\n+        assert!(A.count_zeros() == BITS - 3);\n+        assert!(B.count_zeros() == BITS - 2);\n+        assert!(C.count_zeros() == BITS - 5);\n     }\n \n     #[test]"}, {"sha": "39e21cfc48664fdcdea445ebc041b960c2e2fefe", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88bd646be096a816c1f842b1919f169d0d797ef9/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=88bd646be096a816c1f842b1919f169d0d797ef9", "patch": "@@ -807,7 +807,7 @@ impl BigUint {\n     pub fn bits(&self) -> uint {\n         if self.is_zero() { return 0; }\n         let zeros = self.data.last().unwrap().leading_zeros();\n-        return self.data.len()*BigDigit::bits - (zeros as uint);\n+        return self.data.len()*BigDigit::bits - zeros;\n     }\n }\n "}]}