{"sha": "c08c57e856e0536accad812d43f458004c439613", "node_id": "C_kwDOAAsO6NoAKGMwOGM1N2U4NTZlMDUzNmFjY2FkODEyZDQzZjQ1ODAwNGM0Mzk2MTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-24T07:42:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-24T07:42:34Z"}, "message": "Rollup merge of #104742 - WaffleLapkin:forbidden-SUPER-deref, r=compiler-errors\n\nMake `deref_into_dyn_supertrait` lint the impl and not the usage\n\nProposed by ``@compiler-errors`` in https://github.com/rust-lang/rust/issues/89460#issuecomment-1320806785\nr? ``@crlf0710``", "tree": {"sha": "f5e14b2990eec64f4f180f95e740421725fd963d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e14b2990eec64f4f180f95e740421725fd963d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08c57e856e0536accad812d43f458004c439613", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfyBqCRBK7hj4Ov3rIwAAZjkIAICVJLxoA2/Vltgvrrgczf7R\nzcD16Z2Iw9vz/Q9WBNGtPS/KlCo6nWtK06fl/d91WfaJ7kAanRcQvOExmv974/sJ\n14//PMgEOJqLlsJKvOaNoFDO/SxRL7tXh+DmEjROn15leQiUk4ZFKpWtmx9OkqPq\nLmFByYM9ps0VyNvwrQv+p6yGUzdIZ45XTl53cPTuMwa6/PURyrAGZCnH+ONhZrO0\nPCesrVYi+XBK6k1m458wWX8IeZJiPKgeAXgLOx0t8HyaaA5EWMj0rI9KCOISwojm\n5L748n1wKe22CHCJ4J48ptE59oEj5dLFhvdkivd1VGCmIju5obrNhuSOBUXPw2k=\n=vEqA\n-----END PGP SIGNATURE-----\n", "payload": "tree f5e14b2990eec64f4f180f95e740421725fd963d\nparent b43c2e7cd9ffd4f7249adfd09f6df841ed902924\nparent 20f3de5ab1151e68e727b5e1c22bcafca738bb7e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669275754 +0100\ncommitter GitHub <noreply@github.com> 1669275754 +0100\n\nRollup merge of #104742 - WaffleLapkin:forbidden-SUPER-deref, r=compiler-errors\n\nMake `deref_into_dyn_supertrait` lint the impl and not the usage\n\nProposed by ``@compiler-errors`` in https://github.com/rust-lang/rust/issues/89460#issuecomment-1320806785\nr? ``@crlf0710``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08c57e856e0536accad812d43f458004c439613", "html_url": "https://github.com/rust-lang/rust/commit/c08c57e856e0536accad812d43f458004c439613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08c57e856e0536accad812d43f458004c439613/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43c2e7cd9ffd4f7249adfd09f6df841ed902924", "html_url": "https://github.com/rust-lang/rust/commit/b43c2e7cd9ffd4f7249adfd09f6df841ed902924"}, {"sha": "20f3de5ab1151e68e727b5e1c22bcafca738bb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f3de5ab1151e68e727b5e1c22bcafca738bb7e", "html_url": "https://github.com/rust-lang/rust/commit/20f3de5ab1151e68e727b5e1c22bcafca738bb7e"}], "stats": {"total": 241, "additions": 146, "deletions": 95}, "files": [{"sha": "67cf66f470829d8f20f56bd999bac7461db566e2", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -1245,6 +1245,23 @@ impl<'tcx> LateContext<'tcx> {\n \n         AbsolutePathPrinter { tcx: self.tcx }.print_def_path(def_id, &[]).unwrap()\n     }\n+\n+    /// Returns the associated type `name` for `self_ty` as an implementation of `trait_id`.\n+    /// Do not invoke without first verifying that the type implements the trait.\n+    pub fn get_associated_type(\n+        &self,\n+        self_ty: Ty<'tcx>,\n+        trait_id: DefId,\n+        name: &str,\n+    ) -> Option<Ty<'tcx>> {\n+        let tcx = self.tcx;\n+        tcx.associated_items(trait_id)\n+            .find_by_name_and_kind(tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n+            .and_then(|assoc| {\n+                let proj = tcx.mk_projection(assoc.def_id, tcx.mk_substs_trait(self_ty, []));\n+                tcx.try_normalize_erasing_regions(self.param_env, proj).ok()\n+            })\n+    }\n }\n \n impl<'tcx> abi::HasDataLayout for LateContext<'tcx> {"}, {"sha": "1d29a234a3c882192c31cf9b81aabca6a8db9022", "filename": "compiler/rustc_lint/src/deref_into_dyn_supertrait.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -0,0 +1,92 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use rustc_errors::DelayDm;\n+use rustc_hir as hir;\n+use rustc_middle::{traits::util::supertraits, ty};\n+use rustc_span::sym;\n+\n+declare_lint! {\n+    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n+    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n+    ///\n+    /// These implementations will become shadowed when the `trait_upcasting` feature is stabilized.\n+    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(deref_into_dyn_supertrait)]\n+    /// #![allow(dead_code)]\n+    ///\n+    /// use core::ops::Deref;\n+    ///\n+    /// trait A {}\n+    /// trait B: A {}\n+    /// impl<'a> Deref for dyn 'a + B {\n+    ///     type Target = dyn A;\n+    ///     fn deref(&self) -> &Self::Target {\n+    ///         todo!()\n+    ///     }\n+    /// }\n+    ///\n+    /// fn take_a(_: &dyn A) { }\n+    ///\n+    /// fn take_b(b: &dyn B) {\n+    ///     take_a(b);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n+    /// over certain other coercion rules, which will cause some behavior change.\n+    pub DEREF_INTO_DYN_SUPERTRAIT,\n+    Warn,\n+    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n+    };\n+}\n+\n+declare_lint_pass!(DerefIntoDynSupertrait => [DEREF_INTO_DYN_SUPERTRAIT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DerefIntoDynSupertrait {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        // `Deref` is being implemented for `t`\n+        if let hir::ItemKind::Impl(impl_) = item.kind\n+            && let Some(trait_) = &impl_.of_trait\n+            && let t = cx.tcx.type_of(item.owner_id)\n+            && let opt_did @ Some(did) = trait_.trait_def_id()\n+            && opt_did == cx.tcx.lang_items().deref_trait()\n+            // `t` is `dyn t_principal`\n+            && let ty::Dynamic(data, _, ty::Dyn) = t.kind()\n+            && let Some(t_principal) = data.principal()\n+            // `<T as Deref>::Target` is `dyn target_principal`\n+            && let Some(target) = cx.get_associated_type(t, did, \"Target\")\n+            && let ty::Dynamic(data, _, ty::Dyn) = target.kind()\n+            && let Some(target_principal) = data.principal()\n+            // `target_principal` is a supertrait of `t_principal`\n+            && supertraits(cx.tcx, t_principal.with_self_ty(cx.tcx, cx.tcx.types.trait_object_dummy_self))\n+                .any(|sup| sup.map_bound(|x| ty::ExistentialTraitRef::erase_self_ty(cx.tcx, x)) == target_principal)\n+        {\n+            cx.struct_span_lint(\n+                DEREF_INTO_DYN_SUPERTRAIT,\n+                cx.tcx.def_span(item.owner_id.def_id),\n+                DelayDm(|| {\n+                    format!(\n+                        \"`{t}` implements `Deref` with supertrait `{target_principal}` as target\"\n+                    )\n+                }),\n+                |lint| {\n+                    if let Some(target_span) = impl_.items.iter().find_map(|i| (i.ident.name == sym::Target).then_some(i.span)) {\n+                        lint.span_label(target_span, \"target type is set here\");\n+                    }\n+\n+                    lint\n+                },\n+            )\n+        }\n+    }\n+}"}, {"sha": "b6027476adfd97f3d2f8c05062fc1d652d44d890", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -49,6 +49,7 @@ extern crate tracing;\n mod array_into_iter;\n pub mod builtin;\n mod context;\n+mod deref_into_dyn_supertrait;\n mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n@@ -87,6 +88,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use deref_into_dyn_supertrait::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n@@ -192,6 +194,7 @@ macro_rules! late_lint_mod_passes {\n             $args,\n             [\n                 ForLoopsOverFallibles: ForLoopsOverFallibles,\n+                DerefIntoDynSupertrait: DerefIntoDynSupertrait,\n                 HardwiredLints: HardwiredLints,\n                 ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n                 ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}, {"sha": "df0e17dea3c051495593062c68485307b168bf01", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -3262,7 +3262,6 @@ declare_lint_pass! {\n         UNUSED_TUPLE_STRUCT_FIELDS,\n         NON_EXHAUSTIVE_OMITTED_PATTERNS,\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n-        DEREF_INTO_DYN_SUPERTRAIT,\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n@@ -3764,51 +3763,6 @@ declare_lint! {\n     \"invisible directionality-changing codepoints in comment\"\n }\n \n-declare_lint! {\n-    /// The `deref_into_dyn_supertrait` lint is output whenever there is a use of the\n-    /// `Deref` implementation with a `dyn SuperTrait` type as `Output`.\n-    ///\n-    /// These implementations will become shadowed when the `trait_upcasting` feature is stabilized.\n-    /// The `deref` functions will no longer be called implicitly, so there might be behavior change.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![deny(deref_into_dyn_supertrait)]\n-    /// #![allow(dead_code)]\n-    ///\n-    /// use core::ops::Deref;\n-    ///\n-    /// trait A {}\n-    /// trait B: A {}\n-    /// impl<'a> Deref for dyn 'a + B {\n-    ///     type Target = dyn A;\n-    ///     fn deref(&self) -> &Self::Target {\n-    ///         todo!()\n-    ///     }\n-    /// }\n-    ///\n-    /// fn take_a(_: &dyn A) { }\n-    ///\n-    /// fn take_b(b: &dyn B) {\n-    ///     take_a(b);\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// The dyn upcasting coercion feature adds new coercion rules, taking priority\n-    /// over certain other coercion rules, which will cause some behavior change.\n-    pub DEREF_INTO_DYN_SUPERTRAIT,\n-    Warn,\n-    \"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n-    };\n-}\n-\n declare_lint! {\n     /// The `duplicate_macro_attributes` lint detects when a `#[test]`-like built-in macro\n     /// attribute is duplicated on an item. This lint may trigger on `bench`, `cfg_eval`, `test`"}, {"sha": "cd4a0447391720bd83835ca3572c2f84f5f6132f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -6,11 +6,9 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use hir::LangItem;\n-use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TypeVisitable};\n use rustc_target::spec::abi::Abi;\n@@ -809,16 +807,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             &obligation.cause,\n                         ) {\n                             if deref_trait_ref.def_id() == target_trait_did {\n-                                self.tcx().struct_span_lint_hir(\n-                                    DEREF_INTO_DYN_SUPERTRAIT,\n-                                    obligation.cause.body_id,\n-                                    obligation.cause.span,\n-                                    DelayDm(|| format!(\n-                                        \"`{}` implements `Deref` with supertrait `{}` as output\",\n-                                        source, deref_trait_ref\n-                                    )),\n-                                    |lint| lint,\n-                                );\n                                 return;\n                             }\n                         }"}, {"sha": "d624187561ed7e0fbbe74ce9f738aa8a835e66dd", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -7,7 +7,11 @@ use core::ops::Deref;\n // issue 89190\n trait A {}\n trait B: A {}\n+\n impl<'a> Deref for dyn 'a + B {\n+    //~^ ERROR `(dyn B + 'a)` implements `Deref` with supertrait `A` as target\n+    //~| WARN this was previously accepted by the compiler but is being phased out;\n+\n     type Target = dyn A;\n     fn deref(&self) -> &Self::Target {\n         todo!()\n@@ -18,8 +22,6 @@ fn take_a(_: &dyn A) {}\n \n fn whoops(b: &dyn B) {\n     take_a(b)\n-    //~^ ERROR `dyn B` implements `Deref` with supertrait `A` as output\n-    //~^^ WARN this was previously accepted by the compiler but is being phased out;\n }\n \n fn main() {}"}, {"sha": "4533b1163425c61153440bff60afa6ab776be5c6", "filename": "src/test/ui/traits/trait-upcasting/migrate-lint-deny.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmigrate-lint-deny.stderr?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -1,8 +1,11 @@\n-error: `dyn B` implements `Deref` with supertrait `A` as output\n-  --> $DIR/migrate-lint-deny.rs:20:12\n+error: `(dyn B + 'a)` implements `Deref` with supertrait `A` as target\n+  --> $DIR/migrate-lint-deny.rs:11:1\n    |\n-LL |     take_a(b)\n-   |            ^\n+LL | impl<'a> Deref for dyn 'a + B {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     type Target = dyn A;\n+   |     -------------------- target type is set here\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #89460 <https://github.com/rust-lang/rust/issues/89460>"}, {"sha": "b4210d875104bbe9f473fdbd430d67d28a45095c", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_overeager_cloned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_overeager_cloned.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{get_associated_type, implements_trait, is_copy};\n+use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n@@ -25,7 +25,7 @@ pub(super) fn check<'tcx>(\n         && let Some(method_id) = typeck.type_dependent_def_id(cloned_call.hir_id)\n         && cx.tcx.trait_of_item(method_id) == Some(iter_id)\n         && let cloned_recv_ty = typeck.expr_ty_adjusted(cloned_recv)\n-        && let Some(iter_assoc_ty) = get_associated_type(cx, cloned_recv_ty, iter_id, \"Item\")\n+        && let Some(iter_assoc_ty) = cx.get_associated_type(cloned_recv_ty, iter_id, \"Item\")\n         && matches!(*iter_assoc_ty.kind(), ty::Ref(_, ty, _) if !is_copy(cx, ty))\n     {\n         if needs_into_iter"}, {"sha": "52a4ff7d1ae4f09aa23e2172f2a89e2bc26f894c", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -2,7 +2,7 @@ use super::utils::clone_or_copy_needed;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::ForLoop;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait};\n+use clippy_utils::ty::{get_iterator_item_ty, implements_trait};\n use clippy_utils::{fn_def_id, get_parent_expr};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, Expr, ExprKind};\n@@ -54,7 +54,7 @@ pub fn check_for_loop_iter(\n                 if let Some(into_iterator_trait_id) = cx.tcx.get_diagnostic_item(sym::IntoIterator);\n                 let collection_ty = cx.typeck_results().expr_ty(collection);\n                 if implements_trait(cx, collection_ty, into_iterator_trait_id, &[]);\n-                if let Some(into_iter_item_ty) = get_associated_type(cx, collection_ty, into_iterator_trait_id, \"Item\");\n+                if let Some(into_iter_item_ty) = cx.get_associated_type(collection_ty, into_iterator_trait_id, \"Item\");\n \n                 if iter_item_ty == into_iter_item_ty;\n                 if let Some(collection_snippet) = snippet_opt(cx, collection.span);"}, {"sha": "8b000cd754cd1352f6ab5219336e659b91593a7a", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -2,9 +2,11 @@ use super::implicit_clone::is_clone_like;\n use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n+use clippy_utils::ty::{get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs};\n use clippy_utils::visitors::find_all_ret_expressions;\n-use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n+use clippy_utils::{\n+    fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty,\n+};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, Node};\n@@ -18,7 +20,9 @@ use rustc_middle::ty::EarlyBinder;\n use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitPredicate, Ty};\n use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n-use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n+use rustc_trait_selection::traits::{\n+    query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause,\n+};\n use std::cmp::max;\n \n use super::UNNECESSARY_TO_OWNED;\n@@ -146,7 +150,7 @@ fn check_addr_of_expr(\n             if_chain! {\n                 if let Some(deref_trait_id) = cx.tcx.get_diagnostic_item(sym::Deref);\n                 if implements_trait(cx, receiver_ty, deref_trait_id, &[]);\n-                if get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\") == Some(target_ty);\n+                if cx.get_associated_type(receiver_ty, deref_trait_id, \"Target\") == Some(target_ty);\n                 then {\n                     if n_receiver_refs > 0 {\n                         span_lint_and_sugg(\n@@ -341,13 +345,13 @@ fn get_input_traits_and_projections<'tcx>(\n                 if trait_predicate.trait_ref.self_ty() == input {\n                     trait_predicates.push(trait_predicate);\n                 }\n-            },\n+            }\n             PredicateKind::Projection(projection_predicate) => {\n                 if projection_predicate.projection_ty.self_ty() == input {\n                     projection_predicates.push(projection_predicate);\n                 }\n-            },\n-            _ => {},\n+            }\n+            _ => {}\n         }\n     }\n     (trait_predicates, projection_predicates)\n@@ -462,7 +466,12 @@ fn is_cloned_or_copied(cx: &LateContext<'_>, method_name: Symbol, method_def_id:\n \n /// Returns true if the named method can be used to convert the receiver to its \"owned\"\n /// representation.\n-fn is_to_owned_like<'a>(cx: &LateContext<'a>, call_expr: &Expr<'a>, method_name: Symbol, method_def_id: DefId) -> bool {\n+fn is_to_owned_like<'a>(\n+    cx: &LateContext<'a>,\n+    call_expr: &Expr<'a>,\n+    method_name: Symbol,\n+    method_def_id: DefId,\n+) -> bool {\n     is_clone_like(cx, method_name.as_str(), method_def_id)\n         || is_cow_into_owned(cx, method_name, method_def_id)\n         || is_to_string_on_string_like(cx, call_expr, method_name, method_def_id)\n@@ -490,7 +499,7 @@ fn is_to_string_on_string_like<'a>(\n         && let GenericArgKind::Type(ty) = generic_arg.unpack()\n         && let Some(deref_trait_id) = cx.tcx.get_diagnostic_item(sym::Deref)\n         && let Some(as_ref_trait_id) = cx.tcx.get_diagnostic_item(sym::AsRef)\n-        && (get_associated_type(cx, ty, deref_trait_id, \"Target\") == Some(cx.tcx.types.str_) ||\n+        && (cx.get_associated_type(ty, deref_trait_id, \"Target\") == Some(cx.tcx.types.str_) ||\n             implements_trait(cx, ty, as_ref_trait_id, &[cx.tcx.types.str_.into()])) {\n             true\n         } else {"}, {"sha": "8284dc5c28c0bd3684bde74b25d86d147af43c52", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08c57e856e0536accad812d43f458004c439613/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=c08c57e856e0536accad812d43f458004c439613", "patch": "@@ -117,24 +117,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n pub fn get_iterator_item_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     cx.tcx\n         .get_diagnostic_item(sym::Iterator)\n-        .and_then(|iter_did| get_associated_type(cx, ty, iter_did, \"Item\"))\n-}\n-\n-/// Returns the associated type `name` for `ty` as an implementation of `trait_id`.\n-/// Do not invoke without first verifying that the type implements the trait.\n-pub fn get_associated_type<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    ty: Ty<'tcx>,\n-    trait_id: DefId,\n-    name: &str,\n-) -> Option<Ty<'tcx>> {\n-    cx.tcx\n-        .associated_items(trait_id)\n-        .find_by_name_and_kind(cx.tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n-        .and_then(|assoc| {\n-            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, []));\n-            cx.tcx.try_normalize_erasing_regions(cx.param_env, proj).ok()\n-        })\n+        .and_then(|iter_did| cx.get_associated_type(ty, iter_did, \"Item\"))\n }\n \n /// Get the diagnostic name of a type, e.g. `sym::HashMap`. To check if a type"}]}