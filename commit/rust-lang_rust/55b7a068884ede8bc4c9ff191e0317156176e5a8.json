{"sha": "55b7a068884ede8bc4c9ff191e0317156176e5a8", "node_id": "C_kwDOAAsO6NoAKDU1YjdhMDY4ODg0ZWRlOGJjNGM5ZmYxOTFlMDMxNzE1NjE3NmU1YTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-20T16:26:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-20T16:26:50Z"}, "message": "Merge #10820\n\n10820: minor: Move incorrect case diagnostic things into their module r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d2f4f3333baef78978ca1078a5f571ba232ef18c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f4f3333baef78978ca1078a5f571ba232ef18c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55b7a068884ede8bc4c9ff191e0317156176e5a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhmSHKCRBK7hj4Ov3rIwAAXywIABvLWThLFybedXqn3NYmRbdm\nVcMulkrMKVy/UIj/qwAFMbsdqf5iPoKVaomEPywXBzhQlBSS3cXZM6J82ZRi9MHa\nslBMTZASWYg3y5rlGXtUzVdVy9WAe04I2HgN+CxkxZAkWxlus/gjoaAYJtKvxUCE\nJ0dijRYdVSXmBVhkb9x3wUDZOpUa8tmzVACenW+GKLBGbWFnTkUpZ/BCaroufD06\nra+OUqWIlCo1HY9ZhFuE+WdHNGWc/I3GWRZw4UydScRU+JfSrUJSaZJ1+pQtMRLo\n20Z2efZxFUJ7tW88f5QbACknkzXnJ7Ev9VZD2SfaCTpGOiKQCBXoOgDT0Ae0D2w=\n=LWNB\n-----END PGP SIGNATURE-----\n", "payload": "tree d2f4f3333baef78978ca1078a5f571ba232ef18c\nparent f2707bce362f33caad4f5d25c09dd4acfa7df717\nparent 69782f55de4c180d2c60a308a7898fdffd7611f4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637425610 +0000\ncommitter GitHub <noreply@github.com> 1637425610 +0000\n\nMerge #10820\n\n10820: minor: Move incorrect case diagnostic things into their module r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55b7a068884ede8bc4c9ff191e0317156176e5a8", "html_url": "https://github.com/rust-lang/rust/commit/55b7a068884ede8bc4c9ff191e0317156176e5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55b7a068884ede8bc4c9ff191e0317156176e5a8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2707bce362f33caad4f5d25c09dd4acfa7df717", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2707bce362f33caad4f5d25c09dd4acfa7df717", "html_url": "https://github.com/rust-lang/rust/commit/f2707bce362f33caad4f5d25c09dd4acfa7df717"}, {"sha": "69782f55de4c180d2c60a308a7898fdffd7611f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/69782f55de4c180d2c60a308a7898fdffd7611f4", "html_url": "https://github.com/rust-lang/rust/commit/69782f55de4c180d2c60a308a7898fdffd7611f4"}], "stats": {"total": 180, "additions": 88, "deletions": 92}, "files": [{"sha": "3946f5164214ecd7862759fbeed1f50981ad2457", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=55b7a068884ede8bc4c9ff191e0317156176e5a8", "patch": "@@ -359,7 +359,7 @@ impl ModuleDef {\n                 def.diagnostics(db, &mut acc);\n             }\n             None => {\n-                for diag in hir_ty::diagnostics::validate_module_item(db, module.id.krate(), id) {\n+                for diag in hir_ty::diagnostics::incorrect_case(db, module.id.krate(), id) {\n                     acc.push(diag.into())\n                 }\n             }\n@@ -1282,7 +1282,7 @@ impl DefWithBody {\n             DefWithBody::Static(it) => it.into(),\n             DefWithBody::Const(it) => it.into(),\n         };\n-        for diag in hir_ty::diagnostics::validate_module_item(db, krate, def.into()) {\n+        for diag in hir_ty::diagnostics::incorrect_case(db, krate, def.into()) {\n             acc.push(diag.into())\n         }\n     }"}, {"sha": "3abc48d95dfcf03fe54a3074784ec282759479dd", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=55b7a068884ede8bc4c9ff191e0317156176e5a8", "patch": "@@ -76,7 +76,7 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                         kind = mod_path.kind;\n \n                         segments.extend(mod_path.segments.iter().cloned().rev());\n-                        generic_args.extend(path_generic_args.iter().cloned().rev());\n+                        generic_args.extend(Vec::from(path_generic_args).into_iter().rev());\n \n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n                         let last_segment ="}, {"sha": "a4702715e5b3698b11441dc3dd8f235d2b883b32", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=55b7a068884ede8bc4c9ff191e0317156176e5a8", "patch": "@@ -4,92 +4,10 @@ mod match_check;\n mod unsafe_check;\n mod decl_check;\n \n-use std::fmt;\n-\n-use base_db::CrateId;\n-use hir_def::ModuleDefId;\n-use hir_expand::HirFileId;\n-use syntax::{ast, AstPtr};\n-\n-use crate::db::HirDatabase;\n-\n pub use crate::diagnostics::{\n+    decl_check::{incorrect_case, IncorrectCase},\n     expr::{\n         record_literal_missing_fields, record_pattern_missing_fields, BodyValidationDiagnostic,\n     },\n     unsafe_check::missing_unsafe,\n };\n-\n-pub fn validate_module_item(\n-    db: &dyn HirDatabase,\n-    krate: CrateId,\n-    owner: ModuleDefId,\n-) -> Vec<IncorrectCase> {\n-    let _p = profile::span(\"validate_module_item\");\n-    let mut validator = decl_check::DeclValidator::new(db, krate);\n-    validator.validate_item(owner);\n-    validator.sink\n-}\n-\n-#[derive(Debug)]\n-pub enum CaseType {\n-    // `some_var`\n-    LowerSnakeCase,\n-    // `SOME_CONST`\n-    UpperSnakeCase,\n-    // `SomeStruct`\n-    UpperCamelCase,\n-}\n-\n-impl fmt::Display for CaseType {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let repr = match self {\n-            CaseType::LowerSnakeCase => \"snake_case\",\n-            CaseType::UpperSnakeCase => \"UPPER_SNAKE_CASE\",\n-            CaseType::UpperCamelCase => \"CamelCase\",\n-        };\n-\n-        write!(f, \"{}\", repr)\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub enum IdentType {\n-    Constant,\n-    Enum,\n-    Field,\n-    Function,\n-    Parameter,\n-    StaticVariable,\n-    Structure,\n-    Variable,\n-    Variant,\n-}\n-\n-impl fmt::Display for IdentType {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let repr = match self {\n-            IdentType::Constant => \"Constant\",\n-            IdentType::Enum => \"Enum\",\n-            IdentType::Field => \"Field\",\n-            IdentType::Function => \"Function\",\n-            IdentType::Parameter => \"Parameter\",\n-            IdentType::StaticVariable => \"Static variable\",\n-            IdentType::Structure => \"Structure\",\n-            IdentType::Variable => \"Variable\",\n-            IdentType::Variant => \"Variant\",\n-        };\n-\n-        write!(f, \"{}\", repr)\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct IncorrectCase {\n-    pub file: HirFileId,\n-    pub ident: AstPtr<ast::Name>,\n-    pub expected_case: CaseType,\n-    pub ident_type: IdentType,\n-    pub ident_text: String,\n-    pub suggested_text: String,\n-}"}, {"sha": "6a3588dc741a0cff736c4fc2ed2e2f93902f3518", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55b7a068884ede8bc4c9ff191e0317156176e5a8/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=55b7a068884ede8bc4c9ff191e0317156176e5a8", "patch": "@@ -1,4 +1,4 @@\n-//! Provides validators for the item declarations.\n+//! Provides validators for names of declarations.\n //!\n //! This includes the following items:\n //!\n@@ -12,24 +12,28 @@\n \n mod case_conv;\n \n+use std::fmt;\n+\n use base_db::CrateId;\n use hir_def::{\n     adt::VariantData,\n     expr::{Pat, PatId},\n     src::HasSource,\n     AdtId, AttrDefId, ConstId, EnumId, FunctionId, Lookup, ModuleDefId, StaticId, StructId,\n };\n-use hir_expand::name::{AsName, Name};\n+use hir_expand::{\n+    name::{AsName, Name},\n+    HirFileId,\n+};\n use stdx::{always, never};\n use syntax::{\n     ast::{self, HasName},\n     AstNode, AstPtr,\n };\n \n-use crate::{\n-    db::HirDatabase,\n-    diagnostics::{decl_check::case_conv::*, CaseType, IdentType, IncorrectCase},\n-};\n+use crate::db::HirDatabase;\n+\n+use self::case_conv::{to_camel_case, to_lower_snake_case, to_upper_snake_case};\n \n mod allow {\n     pub(super) const BAD_STYLE: &str = \"bad_style\";\n@@ -39,6 +43,80 @@ mod allow {\n     pub(super) const NON_CAMEL_CASE_TYPES: &str = \"non_camel_case_types\";\n }\n \n+pub fn incorrect_case(\n+    db: &dyn HirDatabase,\n+    krate: CrateId,\n+    owner: ModuleDefId,\n+) -> Vec<IncorrectCase> {\n+    let _p = profile::span(\"validate_module_item\");\n+    let mut validator = DeclValidator::new(db, krate);\n+    validator.validate_item(owner);\n+    validator.sink\n+}\n+\n+#[derive(Debug)]\n+pub enum CaseType {\n+    // `some_var`\n+    LowerSnakeCase,\n+    // `SOME_CONST`\n+    UpperSnakeCase,\n+    // `SomeStruct`\n+    UpperCamelCase,\n+}\n+\n+impl fmt::Display for CaseType {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let repr = match self {\n+            CaseType::LowerSnakeCase => \"snake_case\",\n+            CaseType::UpperSnakeCase => \"UPPER_SNAKE_CASE\",\n+            CaseType::UpperCamelCase => \"CamelCase\",\n+        };\n+\n+        write!(f, \"{}\", repr)\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum IdentType {\n+    Constant,\n+    Enum,\n+    Field,\n+    Function,\n+    Parameter,\n+    StaticVariable,\n+    Structure,\n+    Variable,\n+    Variant,\n+}\n+\n+impl fmt::Display for IdentType {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let repr = match self {\n+            IdentType::Constant => \"Constant\",\n+            IdentType::Enum => \"Enum\",\n+            IdentType::Field => \"Field\",\n+            IdentType::Function => \"Function\",\n+            IdentType::Parameter => \"Parameter\",\n+            IdentType::StaticVariable => \"Static variable\",\n+            IdentType::Structure => \"Structure\",\n+            IdentType::Variable => \"Variable\",\n+            IdentType::Variant => \"Variant\",\n+        };\n+\n+        write!(f, \"{}\", repr)\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct IncorrectCase {\n+    pub file: HirFileId,\n+    pub ident: AstPtr<ast::Name>,\n+    pub expected_case: CaseType,\n+    pub ident_type: IdentType,\n+    pub ident_text: String,\n+    pub suggested_text: String,\n+}\n+\n pub(super) struct DeclValidator<'a> {\n     db: &'a dyn HirDatabase,\n     krate: CrateId,"}]}