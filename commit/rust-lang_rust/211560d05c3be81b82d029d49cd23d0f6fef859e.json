{"sha": "211560d05c3be81b82d029d49cd23d0f6fef859e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTU2MGQwNWMzYmU4MWI4MmQwMjlkNDljZDIzZDBmNmZlZjg1OWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T07:19:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_array_or_slice_ty", "tree": {"sha": "2140d27a0e88456b0465a0d65c1f1709ec34afe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2140d27a0e88456b0465a0d65c1f1709ec34afe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211560d05c3be81b82d029d49cd23d0f6fef859e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211560d05c3be81b82d029d49cd23d0f6fef859e", "html_url": "https://github.com/rust-lang/rust/commit/211560d05c3be81b82d029d49cd23d0f6fef859e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211560d05c3be81b82d029d49cd23d0f6fef859e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3838b602f5baa2fe37f8cf77dbf43b73a0777677", "url": "https://api.github.com/repos/rust-lang/rust/commits/3838b602f5baa2fe37f8cf77dbf43b73a0777677", "html_url": "https://github.com/rust-lang/rust/commit/3838b602f5baa2fe37f8cf77dbf43b73a0777677"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "71c9e58f58fd7e579e7b7cd91aa9ec9deaaf0860", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=211560d05c3be81b82d029d49cd23d0f6fef859e", "patch": "@@ -90,6 +90,10 @@ impl<'a> Parser<'a> {\n         self.parse_expr_res(Restrictions::empty(), None)\n     }\n \n+    pub(super) fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {\n+        self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })\n+    }\n+\n     fn parse_expr_catch_underscore(&mut self) -> PResult<'a, P<Expr>> {\n         match self.parse_expr() {\n             Ok(expr) => Ok(expr),\n@@ -109,7 +113,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses a sequence of expressions bounded by parentheses.\n+    /// Parses a sequence of expressions delimited by parentheses.\n     fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {\n         self.parse_paren_comma_seq(|p| {\n             p.parse_expr_catch_underscore()\n@@ -955,10 +959,7 @@ impl<'a> Parser<'a> {\n             let first_expr = self.parse_expr()?;\n             if self.eat(&token::Semi) {\n                 // Repeating array syntax: `[ 0; 512 ]`\n-                let count = AnonConst {\n-                    id: DUMMY_NODE_ID,\n-                    value: self.parse_expr()?,\n-                };\n+                let count = self.parse_anon_const_expr()?;\n                 self.expect(close)?;\n                 ExprKind::Repeat(first_expr, count)\n             } else if self.eat(&token::Comma) {"}, {"sha": "2a4c6f110c4e811256f29938badc03fe4d652b90", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=211560d05c3be81b82d029d49cd23d0f6fef859e", "patch": "@@ -5,7 +5,7 @@ use crate::maybe_whole;\n \n use rustc_errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n use rustc_error_codes::*;\n-use syntax::ast::{self, DUMMY_NODE_ID, Ident, AttrVec, Attribute, AttrKind, AttrStyle, AnonConst};\n+use syntax::ast::{self, DUMMY_NODE_ID, Ident, AttrVec, Attribute, AttrKind, AttrStyle};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n@@ -1317,10 +1317,7 @@ impl<'a> Parser<'a> {\n         };\n \n         let disr_expr = if self.eat(&token::Eq) {\n-            Some(AnonConst {\n-                id: DUMMY_NODE_ID,\n-                value: self.parse_expr()?,\n-            })\n+            Some(self.parse_anon_const_expr()?)\n         } else {\n             None\n         };"}, {"sha": "c3d934d3503270e822fbe012fcc5bdb7768d7ac5", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211560d05c3be81b82d029d49cd23d0f6fef859e/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=211560d05c3be81b82d029d49cd23d0f6fef859e", "patch": "@@ -8,7 +8,7 @@ use rustc_error_codes::*;\n use syntax::ptr::P;\n use syntax::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use syntax::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n-use syntax::ast::{Mutability, AnonConst, Mac};\n+use syntax::ast::{Mutability, Mac};\n use syntax::token::{self, Token};\n use syntax::struct_span_err;\n use syntax_pos::source_map::Span;\n@@ -81,18 +81,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat(&token::BinOp(token::Star)) {\n             self.parse_ty_ptr()?\n         } else if self.eat(&token::OpenDelim(token::Bracket)) {\n-            // Array or slice\n-            let t = self.parse_ty()?;\n-            // Parse optional `; EXPR` in `[TYPE; EXPR]`\n-            let t = match self.maybe_parse_fixed_length_of_vec()? {\n-                None => TyKind::Slice(t),\n-                Some(length) => TyKind::Array(t, AnonConst {\n-                    id: ast::DUMMY_NODE_ID,\n-                    value: length,\n-                }),\n-            };\n-            self.expect(&token::CloseDelim(token::Bracket))?;\n-            t\n+            self.parse_array_or_slice_ty()?\n         } else if self.check(&token::BinOp(token::And)) || self.check(&token::AndAnd) {\n             // Reference\n             self.expect_and()?;\n@@ -101,12 +90,9 @@ impl<'a> Parser<'a> {\n             // `typeof(EXPR)`\n             // In order to not be ambiguous, the type must be surrounded by parens.\n             self.expect(&token::OpenDelim(token::Paren))?;\n-            let e = AnonConst {\n-                id: ast::DUMMY_NODE_ID,\n-                value: self.parse_expr()?,\n-            };\n+            let expr = self.parse_anon_const_expr()?;\n             self.expect(&token::CloseDelim(token::Paren))?;\n-            TyKind::Typeof(e)\n+            TyKind::Typeof(expr)\n         } else if self.eat_keyword(kw::Underscore) {\n             // A type to be inferred `_`\n             TyKind::Infer\n@@ -265,12 +251,17 @@ impl<'a> Parser<'a> {\n         Ok(TyKind::Ptr(MutTy { ty, mutbl }))\n     }\n \n-    fn maybe_parse_fixed_length_of_vec(&mut self) -> PResult<'a, Option<P<ast::Expr>>> {\n-        if self.eat(&token::Semi) {\n-            Ok(Some(self.parse_expr()?))\n+    /// Parses an array (`[TYPE; EXPR]`) or slice (`[TYPE]`) type.\n+    /// The opening `[` bracket is already eaten.\n+    fn parse_array_or_slice_ty(&mut self) -> PResult<'a, TyKind> {\n+        let elt_ty = self.parse_ty()?;\n+        let ty = if self.eat(&token::Semi) {\n+            TyKind::Array(elt_ty, self.parse_anon_const_expr()?)\n         } else {\n-            Ok(None)\n-        }\n+            TyKind::Slice(elt_ty)\n+        };\n+        self.expect(&token::CloseDelim(token::Bracket))?;\n+        Ok(ty)\n     }\n \n     fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {"}]}