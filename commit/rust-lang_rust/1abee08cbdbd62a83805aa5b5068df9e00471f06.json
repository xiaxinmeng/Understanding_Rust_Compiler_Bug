{"sha": "1abee08cbdbd62a83805aa5b5068df9e00471f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYmVlMDhjYmRiZDYyYTgzODA1YWE1YjUwNjhkZjllMDA0NzFmMDY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T19:23:46Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T19:23:46Z"}, "message": "fix rpass test with s/Output/Target/g", "tree": {"sha": "4beb467f2316223ee6a4ac525af200608ce9f5d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4beb467f2316223ee6a4ac525af200608ce9f5d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1abee08cbdbd62a83805aa5b5068df9e00471f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1abee08cbdbd62a83805aa5b5068df9e00471f06", "html_url": "https://github.com/rust-lang/rust/commit/1abee08cbdbd62a83805aa5b5068df9e00471f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1abee08cbdbd62a83805aa5b5068df9e00471f06/comments", "author": null, "committer": null, "parents": [{"sha": "fc7d8faba87716bbcaa43c3747fb8a98dc0c041a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7d8faba87716bbcaa43c3747fb8a98dc0c041a", "html_url": "https://github.com/rust-lang/rust/commit/fc7d8faba87716bbcaa43c3747fb8a98dc0c041a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3b53203d218e047bb746e24d8764fd89c0a98e3d", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1abee08cbdbd62a83805aa5b5068df9e00471f06/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abee08cbdbd62a83805aa5b5068df9e00471f06/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=1abee08cbdbd62a83805aa5b5068df9e00471f06", "patch": "@@ -11,7 +11,7 @@\n // Test that we evaluate projection predicates to winnow out\n // candidates during trait selection and method resolution (#20296).\n // If we don't properly winnow out candidates based on the output type\n-// `Output=[A]`, then the impl marked with `(*)` is seen to conflict\n+// `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n #![feature(associated_types, default_type_params)]\n@@ -32,10 +32,10 @@ impl<A, B> MyEq<[B]> for [A]\n     }\n }\n \n-// (*) This impl conflicts with everything unless the `Output=[A]`\n+// (*) This impl conflicts with everything unless the `Target=[A]`\n // constraint is considered.\n impl<'a, A, B, Lhs> MyEq<[B; 0]> for Lhs\n-    where A: MyEq<B>, Lhs: Deref<Output=[A]>\n+    where A: MyEq<B>, Lhs: Deref<Target=[A]>\n {\n     fn eq(&self, other: &[B; 0]) -> bool {\n         MyEq::eq(&**self, other.as_slice())\n@@ -57,7 +57,7 @@ impl<T> Helper<T> for Option<T> {\n }\n \n impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n-    type Output = T;\n+    type Target = T;\n \n     fn deref(&self) -> &T {\n         self.helper.helper_borrow()"}]}