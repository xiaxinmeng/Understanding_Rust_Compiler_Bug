{"sha": "43d1d6e885fcdc6f87a6921d9e968023dab9798b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZDFkNmU4ODVmY2RjNmY4N2E2OTIxZDllOTY4MDIzZGFiOTc5OGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T23:52:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T23:52:11Z"}, "message": "Rollup merge of #48415 - QuietMisdreavus:traits-on-traits-on-traits, r=Manishearth\n\nrustdoc: don't crash when an external trait's docs needs to import another trait\n\nFixes https://github.com/rust-lang/rust/issues/48414\n\nWhen resolving intra-paths for an item, rustdoc needs to have information about their items on hand, for proper bookkeeping. When loading a path for an external item, it needs to load these items from their host crate, since their information isn't otherwise available. This includes resolving paths for those docs. which can cause this process to recurse. Rustdoc keeps a map of external traits in a `RefCell<HashMap<DefId, Trait>>`, and it keeps a borrow of this active when importing an external trait. In the linked crash, this led to a RefCell borrow error, panic, and ICE.\n\nThis PR manually releases the borrow while importing the trait, and also keeps a list of traits being imported at the given moment. The latter keeps rustdoc from infinitely recursing as it tries to import the same trait repeatedly.", "tree": {"sha": "250303e0895590dc4b38c406a94ae82f8e36420b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/250303e0895590dc4b38c406a94ae82f8e36420b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d1d6e885fcdc6f87a6921d9e968023dab9798b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakfqsCRBK7hj4Ov3rIwAAdHIIAAQKy+Tn4TwcDeROAHx7mrHt\nsdfa6QESwaAA/tD6mVm2vcgbjMN+mX+CURddr+UYpHGxKN7q+D/ioVGSU57jkOMK\nNCeCcZTZVmpmkUWQgSUTLYQltLhsH7ZLpaLL/N0q9rreI3/6LGfDcKtd/h1vtmnI\n5YrLsInzRbPNXVoUky4kahvnwIdwEnxl45GkmNqJKwFvZ29SB9H1qd/93TGY6IhQ\n1+Cgfzn4WSzSm9im/QsbQkWq9mqBc5ZXlbBZhSKL0I1Qw5fXa1uT8IrRyXy3YgcC\nnKYsU8hjJ2YogHskM9BIM9XRUSd0/e2vf13DRMTzBg+TcuX/ADkP6+bN3S44nL8=\n=UX4F\n-----END PGP SIGNATURE-----\n", "payload": "tree 250303e0895590dc4b38c406a94ae82f8e36420b\nparent 9901befe06c7ffe7eda163c08e180de45808f82a\nparent 8872e7b593e0e7a6c5fdf519beb878b74be994e8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519516331 -0800\ncommitter GitHub <noreply@github.com> 1519516331 -0800\n\nRollup merge of #48415 - QuietMisdreavus:traits-on-traits-on-traits, r=Manishearth\n\nrustdoc: don't crash when an external trait's docs needs to import another trait\n\nFixes https://github.com/rust-lang/rust/issues/48414\n\nWhen resolving intra-paths for an item, rustdoc needs to have information about their items on hand, for proper bookkeeping. When loading a path for an external item, it needs to load these items from their host crate, since their information isn't otherwise available. This includes resolving paths for those docs. which can cause this process to recurse. Rustdoc keeps a map of external traits in a `RefCell<HashMap<DefId, Trait>>`, and it keeps a borrow of this active when importing an external trait. In the linked crash, this led to a RefCell borrow error, panic, and ICE.\n\nThis PR manually releases the borrow while importing the trait, and also keeps a list of traits being imported at the given moment. The latter keeps rustdoc from infinitely recursing as it tries to import the same trait repeatedly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d1d6e885fcdc6f87a6921d9e968023dab9798b", "html_url": "https://github.com/rust-lang/rust/commit/43d1d6e885fcdc6f87a6921d9e968023dab9798b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d1d6e885fcdc6f87a6921d9e968023dab9798b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9901befe06c7ffe7eda163c08e180de45808f82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9901befe06c7ffe7eda163c08e180de45808f82a", "html_url": "https://github.com/rust-lang/rust/commit/9901befe06c7ffe7eda163c08e180de45808f82a"}, {"sha": "8872e7b593e0e7a6c5fdf519beb878b74be994e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8872e7b593e0e7a6c5fdf519beb878b74be994e8", "html_url": "https://github.com/rust-lang/rust/commit/8872e7b593e0e7a6c5fdf519beb878b74be994e8"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "b382ba7f22da713bfa20fb37c662fab4e6461282", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=43d1d6e885fcdc6f87a6921d9e968023dab9798b", "patch": "@@ -512,7 +512,16 @@ fn separate_supertrait_bounds(mut g: clean::Generics)\n }\n \n pub fn record_extern_trait(cx: &DocContext, did: DefId) {\n-    cx.external_traits.borrow_mut().entry(did).or_insert_with(|| {\n-        build_external_trait(cx, did)\n-    });\n+    if cx.external_traits.borrow().contains_key(&did) ||\n+        cx.active_extern_traits.borrow().contains(&did)\n+    {\n+        return;\n+    }\n+\n+    cx.active_extern_traits.borrow_mut().push(did);\n+\n+    let trait_ = build_external_trait(cx, did);\n+\n+    cx.external_traits.borrow_mut().insert(did, trait_);\n+    cx.active_extern_traits.borrow_mut().remove_item(&did);\n }"}, {"sha": "9ee0937f425c90cbbb0a88125c16c2cae4ac47ec", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=43d1d6e885fcdc6f87a6921d9e968023dab9798b", "patch": "@@ -61,6 +61,9 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub renderinfo: RefCell<RenderInfo>,\n     /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n     pub external_traits: RefCell<FxHashMap<DefId, clean::Trait>>,\n+    /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n+    /// the same time.\n+    pub active_extern_traits: RefCell<Vec<DefId>>,\n     // The current set of type and lifetime substitutions,\n     // for expanding type aliases at the HIR level:\n \n@@ -253,6 +256,7 @@ pub fn run_core(search_paths: SearchPaths,\n             populated_all_crate_impls: Cell::new(false),\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),\n+            active_extern_traits: Default::default(),\n             renderinfo: Default::default(),\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),"}, {"sha": "7e0edf76f6ac9d18c48e8d6f71a6d52562c947f2", "filename": "src/test/rustdoc/auxiliary/issue-48414.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-48414.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-48414.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-48414.rs?ref=43d1d6e885fcdc6f87a6921d9e968023dab9798b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Woah, this trait links to [OtherTrait](OtherTrait)!\n+pub trait SomeTrait {}\n+\n+/// Woah, this trait links to [SomeTrait](SomeTrait)!\n+pub trait OtherTrait {}"}, {"sha": "0136f9c4759c7660edf77fd6c519382881d52077", "filename": "src/test/rustdoc/issue-48414.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Ftest%2Frustdoc%2Fissue-48414.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d1d6e885fcdc6f87a6921d9e968023dab9798b/src%2Ftest%2Frustdoc%2Fissue-48414.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-48414.rs?ref=43d1d6e885fcdc6f87a6921d9e968023dab9798b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-48414.rs\n+\n+// ICE when resolving paths for a trait that linked to another trait, when both were in an external\n+// crate\n+\n+#![crate_name = \"base\"]\n+\n+extern crate issue_48414;\n+\n+#[doc(inline)]\n+pub use issue_48414::{SomeTrait, OtherTrait};"}]}