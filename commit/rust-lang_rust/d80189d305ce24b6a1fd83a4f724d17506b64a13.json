{"sha": "d80189d305ce24b6a1fd83a4f724d17506b64a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDE4OWQzMDVjZTI0YjZhMWZkODNhNGY3MjRkMTc1MDZiNjRhMTM=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-11T20:15:28Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:05:14Z"}, "message": "Test fixes, added README for tests", "tree": {"sha": "4902d58b47e5528809d91cbdb124b0ad95f9f78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4902d58b47e5528809d91cbdb124b0ad95f9f78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d80189d305ce24b6a1fd83a4f724d17506b64a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d80189d305ce24b6a1fd83a4f724d17506b64a13", "html_url": "https://github.com/rust-lang/rust/commit/d80189d305ce24b6a1fd83a4f724d17506b64a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d80189d305ce24b6a1fd83a4f724d17506b64a13/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326201657a912d9a291da057d82ddd4576ae04f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/326201657a912d9a291da057d82ddd4576ae04f2", "html_url": "https://github.com/rust-lang/rust/commit/326201657a912d9a291da057d82ddd4576ae04f2"}], "stats": {"total": 257, "additions": 230, "deletions": 27}, "files": [{"sha": "624ebc545fe7caa70ba17d4bc2c8af8daa84bc56", "filename": "src/librustc/middle/traits/specialize/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fspecialize%2Fmod.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -25,7 +25,7 @@ use middle::def_id::DefId;\n use middle::infer::{self, InferCtxt, TypeOrigin};\n use middle::region;\n use middle::subst::{Subst, Substs};\n-use middle::traits::ProjectionMode;\n+use middle::traits::{self, ProjectionMode, ObligationCause, Normalized};\n use middle::ty::{self, TyCtxt};\n use syntax::codemap::DUMMY_SP;\n \n@@ -149,14 +149,21 @@ pub fn specializes(tcx: &TyCtxt, impl1_def_id: DefId, impl2_def_id: DefId) -> bo\n     // create a parameter environment corresponding to a (skolemized) instantiation of impl1\n     let scheme = tcx.lookup_item_type(impl1_def_id);\n     let predicates = tcx.lookup_predicates(impl1_def_id);\n-    let penv = tcx.construct_parameter_environment(DUMMY_SP,\n-                                                   &scheme.generics,\n-                                                   &predicates,\n-                                                   region::DUMMY_CODE_EXTENT);\n+    let mut penv = tcx.construct_parameter_environment(DUMMY_SP,\n+                                                       &scheme.generics,\n+                                                       &predicates,\n+                                                       region::DUMMY_CODE_EXTENT);\n     let impl1_trait_ref = tcx.impl_trait_ref(impl1_def_id)\n                              .unwrap()\n                              .subst(tcx, &penv.free_substs);\n \n+    // Normalize the trait reference, adding any obligations that arise into the impl1 assumptions\n+    let Normalized { value: impl1_trait_ref, obligations: normalization_obligations } = {\n+        let selcx = &mut SelectionContext::new(&infcx);\n+        traits::normalize(selcx, ObligationCause::dummy(), &impl1_trait_ref)\n+    };\n+    penv.caller_bounds.extend(normalization_obligations.into_iter().map(|o| o.predicate));\n+\n     // Install the parameter environment, which means we take the predicates of impl1 as assumptions:\n     infcx.parameter_environment = penv;\n "}, {"sha": "6779438c67226783e1d63bf6095cb790be532578", "filename": "src/test/auxiliary/xcrate_associated_type_defaults.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_associated_type_defaults.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -10,9 +10,13 @@\n \n #![feature(associated_type_defaults)]\n \n-pub trait Foo {\n-    type Input = usize;\n-    fn bar(&self, _: Self::Input) {}\n+pub trait Foo<T: Default + ToString> {\n+    type Out: Default + ToString = T;\n }\n \n-impl Foo for () {}\n+impl Foo<u32> for () {\n+}\n+\n+impl Foo<u64> for () {\n+    type Out = bool;\n+}"}, {"sha": "f2b4bf946c53702024908a5ff1d6c5a243941272", "filename": "src/test/compile-fail/specialization/README.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2FREADME.md?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -0,0 +1,21 @@\n+This directory contains the test for incorrect usage of specialization that\n+should lead to compile failure. Those tests break down into a few categories:\n+\n+- Feature gating\n+  - [On use of the `default` keyword](specialization-feature-gate-default.rs)\n+  - [On overlapping impls](specialization-feature-gate-overlap.rs)\n+\n+- Overlap checking with specialization enabled\n+  - [Basic overlap scenarios](specialization-overlap.rs)\n+    - Includes purely structural overlap\n+    - Includes purely trait-based overlap\n+    - Includes mix\n+  - [Overlap with differing polarity](specialization-overlap-negative.rs)\n+\n+- [Attempt to specialize without using `default`](specialization-no-default.rs)\n+\n+- [Attempt to change impl polarity in a specialization](specialization-polarity.rs)\n+\n+- Attempt to rely on projection of a `default` type\n+  - [Rely on it externally in both generic and monomorphic contexts](specialization-default-projection.rs)\n+  - [Rely on it both within an impl and outside it](specialization-default-types.rs)"}, {"sha": "96cbd7a485251540515849e3c6d08f64e75f121d", "filename": "src/test/compile-fail/specialization/specialization-default-projection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-projection.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -28,14 +28,14 @@ fn generic<T>() -> <T as Foo>::Assoc {\n     // `T` could be some downstream crate type that specializes (or,\n     // for that matter, `u8`).\n \n-    () //~ ERROR E0308\n+    () //~ ERROR mismatched types\n }\n \n fn monomorphic() -> () {\n     // Even though we know that `()` is not specialized in a\n     // downstream crate, typeck refuses to project here.\n \n-    generic::<()>() //~ ERROR E0308\n+    generic::<()>() //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "18acecb42296a56f2c36630fe41285507b2fa914", "filename": "src/test/compile-fail/specialization/specialization-default-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-default-types.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -22,7 +22,7 @@ trait Example {\n impl<T> Example for T {\n     default type Output = Box<T>;\n     default fn generate(self) -> Self::Output {\n-        Box::new(self) //~ ERROR E0308\n+        Box::new(self) //~ ERROR mismatched types\n     }\n }\n \n@@ -32,7 +32,7 @@ impl Example for bool {\n }\n \n fn trouble<T>(t: T) -> Box<T> {\n-    Example::generate(t) //~ ERROR E0308\n+    Example::generate(t) //~ ERROR mismatched types\n }\n \n fn weaponize() -> bool {"}, {"sha": "f579817100107c88452fd1b64800b50b8ca8efd6", "filename": "src/test/compile-fail/specialization/specialization-overlap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-overlap.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -22,4 +22,8 @@ trait Baz<U> {}\n impl<T> Baz<T> for u8 {}\n impl<T> Baz<u8> for T {} //~ ERROR E0119\n \n+trait Qux {}\n+impl<T: Clone> Qux for T {}\n+impl<T: Eq> Qux for T {} //~ ERROR E0119\n+\n fn main() {}"}, {"sha": "ed55d5c8b171e6180b0296c4201e2b80796fbb0b", "filename": "src/test/run-pass/default-associated-types.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fdefault-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fdefault-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-associated-types.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -10,23 +10,22 @@\n \n #![feature(associated_type_defaults)]\n \n-trait Foo<T> {\n-    type Out = T;\n-    fn foo(&self) -> Self::Out;\n+trait Foo<T: Default + ToString> {\n+    type Out: Default + ToString = T;\n }\n \n impl Foo<u32> for () {\n-    fn foo(&self) -> u32 {\n-        4u32\n-    }\n }\n \n-impl Foo<u64> for bool {\n-    type Out = ();\n-    fn foo(&self) {}\n+impl Foo<u64> for () {\n+    type Out = bool;\n }\n \n fn main() {\n-    assert_eq!(<() as Foo<u32>>::foo(&()), 4u32);\n-    assert_eq!(<bool as Foo<u64>>::foo(&true), ());\n+    assert_eq!(\n+        <() as Foo<u32>>::Out::default().to_string(),\n+        \"0\");\n+    assert_eq!(\n+        <() as Foo<u64>>::Out::default().to_string(),\n+        \"false\");\n }"}, {"sha": "1373a2cf81b3a1f427f0564175a92f4039e05b42", "filename": "src/test/run-pass/specialization/README.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2FREADME.md?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -0,0 +1,37 @@\n+Tests that specialization is working correctly:\n+\n+- Dispatch\n+  - [On methods](specialization-basics.rs), includes:\n+    - Specialization via adding a trait bound\n+      - Including both remote and local traits\n+    - Specialization via pure structure (e.g. `(T, U)` vs `(T, T)`)\n+    - Specialization via concrete types vs unknown types\n+      - In top level of the trait reference\n+      - Embedded within another type (`Vec<T>` vs `Vec<i32>`)\n+  - [Specialization based on super trait relationships](specialization-super-traits.rs)\n+  - [On assoc fns](specialization-assoc-fns.rs)\n+  - [Ensure that impl order doesn't matter](specialization-out-of-order.rs)\n+\n+- Item inheritance\n+  - [Correct default cascading for methods](specialization-default-methods.rs)\n+  - Inheritance works across impls with varying generics\n+    - [With projections](specialization-translate-projections.rs)\n+    - [With projections that involve input types](specialization-translate-projections-with-params.rs)\n+\n+- Normalization issues\n+  - [Non-default assoc types can be projected](specialization-projection.rs)\n+    - Including non-specialized cases\n+    - Including specialized cases\n+  - [Specialized Impls can happen on projections](specialization-on-projection.rs)\n+  - [Projections and aliases play well together](specialization-projection-alias.rs)\n+  - [Projections involving specialization allowed in the trait ref for impls, and overlap can still be determined](specialization-overlap-projection.rs)\n+    - Only works for the simple case where the most specialized impl directly\n+      provides a non-`default` associated type\n+\n+- Across crates\n+  - [For traits defined in upstream crate](specialization-allowed-cross-crate.rs)\n+  - [Full method dispatch tests, drawing from upstream crate](specialization-cross-crate.rs)\n+    - Including *additional* local specializations\n+  - [Full method dispatch tests, *without* turning on specialization in local crate](specialization-cross-crate-no-gate.rs)\n+  - [Test that defaults cascade correctly from upstream crates](specialization-cross-crate-defaults.rs)\n+    - Including *additional* local use of defaults"}, {"sha": "577f217862da3ee9f78c7217b69f11e6d5281de6", "filename": "src/test/run-pass/specialization/specialization-assoc-fns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-assoc-fns.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that non-method associated functions can be specialized\n+\n #![feature(specialization)]\n \n trait Foo {"}, {"sha": "bc695ea821d0a1c2d02040e50b18f3e8fc5a54bd", "filename": "src/test/run-pass/specialization/specialization-cross-crate-defaults.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-defaults.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -16,10 +16,22 @@ extern crate specialization_cross_crate_defaults;\n \n use specialization_cross_crate_defaults::*;\n \n+struct LocalDefault;\n+struct LocalOverride;\n+\n+impl Foo for LocalDefault {}\n+\n+impl Foo for LocalOverride {\n+    fn foo(&self) -> bool { true }\n+}\n+\n fn test_foo() {\n     assert!(0i8.foo() == false);\n     assert!(0i32.foo() == false);\n     assert!(0i64.foo() == true);\n+\n+    assert!(LocalDefault.foo() == false);\n+    assert!(LocalOverride.foo() == true);\n }\n \n fn test_bar() {"}, {"sha": "b9548539e16490b1fea6deae8f68531571cd8809", "filename": "src/test/run-pass/specialization/specialization-cross-crate-no-gate.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-cross-crate-no-gate.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that specialization works even if only the upstream crate enables it\n+\n+// aux-build:specialization_cross_crate.rs\n+\n+extern crate specialization_cross_crate;\n+\n+use specialization_cross_crate::*;\n+\n+fn  main() {\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+}"}, {"sha": "b2fad9d171f9dfe1e0e44a6e48730a679987f3b0", "filename": "src/test/run-pass/specialization/specialization-default-methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-default-methods.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(specialization)]\n \n+// Test that default methods are cascaded correctly\n+\n // First, test only use of explicit `default` items:\n \n trait Foo {"}, {"sha": "acf78def1b96795b76d51cd9bbd6176baac58cf8", "filename": "src/test/run-pass/specialization/specialization-on-projection.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-on-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-on-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-on-projection.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(specialization)]\n \n+// Ensure that specialization works for impls defined directly on a projection\n+\n trait Foo<T> {}\n \n trait Assoc {"}, {"sha": "20046ee66b0e24868e8d4e2b658663e814823e0d", "filename": "src/test/run-pass/specialization/specialization-overlap-projection.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-overlap-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-overlap-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-overlap-projection.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that impls on projected self types can resolve overlap, even when the\n+// projections involve specialization, so long as the associated type is\n+// provided by the most specialized impl.\n+\n+#![feature(specialization)]\n+\n+trait Assoc {\n+    type Output;\n+}\n+\n+impl<T> Assoc for T {\n+    default type Output = bool;\n+}\n+\n+impl Assoc for u8 { type Output = u8; }\n+impl Assoc for u16 { type Output = u16; }\n+\n+trait Foo {}\n+impl Foo for u32 {}\n+impl Foo for <u8 as Assoc>::Output {}\n+impl Foo for <u16 as Assoc>::Output {}\n+\n+fn main() {}"}, {"sha": "7fce1cca582c15a6f1c186462bf5e3c132ae880b", "filename": "src/test/run-pass/specialization/specialization-projection-alias.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection-alias.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -23,6 +23,10 @@ impl<T> Id_ for T {\n     default type Out = T;\n }\n \n-fn main() {\n+fn test_proection() {\n     let x: Id<bool> = panic!();\n }\n+\n+fn main() {\n+\n+}"}, {"sha": "4e0bdec297fe2b26b5aa1f7d68c239dcd3e9cc52", "filename": "src/test/run-pass/specialization/specialization-projection.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-projection.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -13,6 +13,8 @@\n // Make sure we *can* project non-defaulted associated types\n // cf compile-fail/specialization-default-projection.rs\n \n+// First, do so without any use of specialization\n+\n trait Foo {\n     type Assoc;\n }\n@@ -21,9 +23,27 @@ impl<T> Foo for T {\n     type Assoc = ();\n }\n \n-fn generic<T>() -> <T as Foo>::Assoc {\n+fn generic_foo<T>() -> <T as Foo>::Assoc {\n     ()\n }\n \n+// Next, allow for one layer of specialization\n+\n+trait Bar {\n+    type Assoc;\n+}\n+\n+impl<T> Bar for T {\n+    default type Assoc = ();\n+}\n+\n+impl<T: Clone> Bar for T {\n+    type Assoc = u8;\n+}\n+\n+fn generic_bar_clone<T: Clone>() -> <T as Bar>::Assoc {\n+    0u8\n+}\n+\n fn main() {\n }"}, {"sha": "647d5523c376c5956876b8f46b521fec0ab50895", "filename": "src/test/run-pass/specialization/specialization-translate-projections-with-params.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections-with-params.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Ensure that provided items are inherited properly even when impls vary in\n+// type parameters *and* rely on projections, and the type parameters are input\n+// types on the trait.\n+\n #![feature(specialization)]\n \n trait Trait<T> {"}, {"sha": "11e1d997fdda07e230148064ec536d16d4b3ba39", "filename": "src/test/run-pass/specialization/specialization-translate-projections.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fspecialization-translate-projections.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Ensure that provided items are inherited properly even when impls vary in\n+// type parameters *and* rely on projections.\n+\n #![feature(specialization)]\n \n use std::convert::Into;"}, {"sha": "2dacbe0966ee37b68d6b7299b4737b2d0001ccf5", "filename": "src/test/run-pass/xcrate-associated-type-defaults.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80189d305ce24b6a1fd83a4f724d17506b64a13/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-associated-type-defaults.rs?ref=d80189d305ce24b6a1fd83a4f724d17506b64a13", "patch": "@@ -13,6 +13,26 @@\n extern crate xcrate_associated_type_defaults;\n use xcrate_associated_type_defaults::Foo;\n \n+struct LocalDefault;\n+impl Foo<u32> for LocalDefault {}\n+\n+struct LocalOverride;\n+impl Foo<u64> for LocalOverride {\n+    type Out = bool;\n+}\n+\n fn main() {\n-    ().bar(5);\n+    assert_eq!(\n+        <() as Foo<u32>>::Out::default().to_string(),\n+        \"0\");\n+    assert_eq!(\n+        <() as Foo<u64>>::Out::default().to_string(),\n+        \"false\");\n+\n+    assert_eq!(\n+        <LocalDefault as Foo<u32>>::Out::default().to_string(),\n+        \"0\");\n+    assert_eq!(\n+        <LocalOverride as Foo<u64>>::Out::default().to_string(),\n+        \"false\");\n }"}]}