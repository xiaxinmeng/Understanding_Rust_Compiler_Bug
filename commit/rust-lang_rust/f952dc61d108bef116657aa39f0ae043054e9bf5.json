{"sha": "f952dc61d108bef116657aa39f0ae043054e9bf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NTJkYzYxZDEwOGJlZjExNjY1N2FhMzlmMGFlMDQzMDU0ZTliZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-31T15:25:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-31T15:26:43Z"}, "message": "internal: add API to check what are the max limits in practice", "tree": {"sha": "280569adb74659af23f0135ea6338377740a1e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/280569adb74659af23f0135ea6338377740a1e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f952dc61d108bef116657aa39f0ae043054e9bf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f952dc61d108bef116657aa39f0ae043054e9bf5", "html_url": "https://github.com/rust-lang/rust/commit/f952dc61d108bef116657aa39f0ae043054e9bf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f952dc61d108bef116657aa39f0ae043054e9bf5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a423b307e60809854174105b565497981f5f3680", "url": "https://api.github.com/repos/rust-lang/rust/commits/a423b307e60809854174105b565497981f5f3680", "html_url": "https://github.com/rust-lang/rust/commit/a423b307e60809854174105b565497981f5f3680"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "ee64564430e599070b7cb6907b1d35a83ef7f3c9", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=f952dc61d108bef116657aa39f0ae043054e9bf5", "patch": "@@ -22,7 +22,9 @@ use crate::{\n ///\n /// If an invocation produces more tokens than this limit, it will not be stored in the database and\n /// an error will be emitted.\n-const TOKEN_LIMIT: Limit = Limit::new(524288);\n+///\n+/// Actual max for `analysis-stats .` at some point: 30672.\n+static TOKEN_LIMIT: Limit = Limit::new(524_288);\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {"}, {"sha": "cb3ccbd73cf2105e2ed120159cf7035f12a6e11c", "filename": "crates/limit/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Flimit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Flimit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2FCargo.toml?ref=f952dc61d108bef116657aa39f0ae043054e9bf5", "patch": "@@ -6,4 +6,6 @@ license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n \n-[dependencies]\n+[features]\n+tracking = []\n+default = [\"tracking\"]"}, {"sha": "ace7ef7239b2895d42c52ed0adc5182ddbf510d1", "filename": "crates/limit/src/lib.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Flimit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f952dc61d108bef116657aa39f0ae043054e9bf5/crates%2Flimit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2Fsrc%2Flib.rs?ref=f952dc61d108bef116657aa39f0ae043054e9bf5", "patch": "@@ -1,15 +1,26 @@\n //! limit defines a struct to enforce limits.\n \n+use std::sync::atomic::AtomicUsize;\n+\n /// Represents a struct used to enforce a numerical limit.\n pub struct Limit {\n     upper_bound: usize,\n+    #[allow(unused)]\n+    max: AtomicUsize,\n }\n \n impl Limit {\n     /// Creates a new limit.\n     #[inline]\n     pub const fn new(upper_bound: usize) -> Self {\n-        Self { upper_bound }\n+        Self { upper_bound, max: AtomicUsize::new(0) }\n+    }\n+\n+    /// Creates a new limit.\n+    #[inline]\n+    #[cfg(feature = \"tracking\")]\n+    pub const fn new_tracking(upper_bound: usize) -> Self {\n+        Self { upper_bound, max: AtomicUsize::new(1) }\n     }\n \n     /// Gets the underlying numeric limit.\n@@ -21,10 +32,26 @@ impl Limit {\n     /// Checks whether the given value is below the limit.\n     /// Returns `Ok` when `other` is below `self`, and `Err` otherwise.\n     #[inline]\n-    pub const fn check(&self, other: usize) -> Result<(), ()> {\n+    pub fn check(&self, other: usize) -> Result<(), ()> {\n         if other > self.upper_bound {\n             Err(())\n         } else {\n+            #[cfg(feature = \"tracking\")]\n+            loop {\n+                use std::sync::atomic::Ordering;\n+                let old_max = self.max.load(Ordering::Relaxed);\n+                if other <= old_max || old_max == 0 {\n+                    break;\n+                }\n+                if self\n+                    .max\n+                    .compare_exchange(old_max, other, Ordering::Relaxed, Ordering::Relaxed)\n+                    .is_ok()\n+                {\n+                    eprintln!(\"new max: {}\", other);\n+                }\n+            }\n+\n             Ok(())\n         }\n     }"}]}