{"sha": "7ed3be32916facf3b709d5277381408cd3ec134a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDNiZTMyOTE2ZmFjZjNiNzA5ZDUyNzczODE0MDhjZDNlYzEzNGE=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-15T12:14:33Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-15T12:14:33Z"}, "message": "Define known paths and group names", "tree": {"sha": "7ac9169b41465315ca1c5541c096ea61ac789357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac9169b41465315ca1c5541c096ea61ac789357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed3be32916facf3b709d5277381408cd3ec134a", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl1+KykACgkQztOS3gxI\nPQBKERAAl4BOxaE910VgNwNDdy0V4+Yeofa1TtWpIAahG1hVovTLU9aMlffJ78c8\njGXLp27ahQuyL3/HYeHjjyr7kk9GqvMpaHAU6OZt/PUMuSXjI0j0fkIRkPMXv/zw\n3LtZW7Hkq4jlUVgZjAEdZ30OLCnfCwfslsgCmC4Yl6jLXwk1cZKaAKuts51NFdjK\nry85ev0R2Hqa4mV15lg5IzQRwXgHagcR/yfoRcbSEHWezteHgWpq0nsFPrX5McJR\ncDl9EyJM5XUBRN3lK6ymFU3U+E5EwbmqLxHJjP/TLlVynZbSxLbe6g3RB8jTTkYk\nkHOswhUXtR6qW7uvpWQqAJZu4hiHNUv65gqVgWq3yvl7dhh74SjFeTcEONuzEeD7\nJYbCmTptCEsu2usi8UkxTR29laaLPHYhqO7Jpl5BQdY5Y7G6CxOwZaa+sMMEPFDu\n/c7ZuSyG4H3g2kXVvkmAMbMd+1GV6VWl470SMw6yxHCsfLK2ZlBQI1v1NWLpx35T\n4AV+kNrcVd6R8VSOFC9htA2TayXXNQhV+cCU0aKU0Mn3caeto9LZsCsu3oASqvhe\na1amb9ougl5MQBEbnqGmdJlQQbrVHV0g7qZ+z0FX4CS3A4qs762XKzDiDWcXxnQh\n/5GXDQitVf+Rr9+7fCZA4ybd/AcB6/baKPpevo+txRyD8oUlNF8=\n=7pEe\n-----END PGP SIGNATURE-----", "payload": "tree 7ac9169b41465315ca1c5541c096ea61ac789357\nparent de9670fe456d89f97e8044d4e0919d2c16d1087f\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1568549673 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1568549673 +0800\n\nDefine known paths and group names\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed3be32916facf3b709d5277381408cd3ec134a", "html_url": "https://github.com/rust-lang/rust/commit/7ed3be32916facf3b709d5277381408cd3ec134a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed3be32916facf3b709d5277381408cd3ec134a/comments", "author": null, "committer": null, "parents": [{"sha": "de9670fe456d89f97e8044d4e0919d2c16d1087f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9670fe456d89f97e8044d4e0919d2c16d1087f", "html_url": "https://github.com/rust-lang/rust/commit/de9670fe456d89f97e8044d4e0919d2c16d1087f"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "f06e5ec07ea72385ba93ec84276e261d7f1be1f0", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -7,8 +7,7 @@ use crate::{\n     db::HirDatabase,\n     diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n-    name,\n-    path::PathKind,\n+    path::known,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, Function, Name, Path,\n };\n@@ -108,10 +107,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        let std_result_path = Path::from_simple_segments(\n-            PathKind::Abs,\n-            vec![name::STD, name::RESULT_MOD, name::RESULT_TYPE],\n-        );\n+        let std_result_path = known::std_result_result();\n \n         let resolver = self.func.resolver(db);\n         let std_result_enum = match resolver.resolve_known_enum(db, &std_result_path) {"}, {"sha": "1bf993ffb0fd04e64aaf74899e4430e74be55ad6", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -85,6 +85,7 @@ impl AsName for ra_db::Dependency {\n     }\n }\n \n+// Primitives\n pub(crate) const ISIZE: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"isize\"));\n pub(crate) const I8: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"i8\"));\n pub(crate) const I16: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"i16\"));\n@@ -102,24 +103,30 @@ pub(crate) const F64: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"f64\")\n pub(crate) const BOOL: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"bool\"));\n pub(crate) const CHAR: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"char\"));\n pub(crate) const STR: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"str\"));\n+\n+// Special names\n pub(crate) const SELF_PARAM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"self\"));\n pub(crate) const SELF_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Self\"));\n pub(crate) const MACRO_RULES: Name = Name::new(SmolStr::new_inline_from_ascii(11, b\"macro_rules\"));\n+\n+// Components of known path (value or mod name)\n pub(crate) const STD: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"std\"));\n pub(crate) const ITER: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"iter\"));\n-pub(crate) const INTO_ITERATOR: Name =\n-    Name::new(SmolStr::new_inline_from_ascii(12, b\"IntoIterator\"));\n-pub(crate) const ITEM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\"));\n pub(crate) const OPS: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"ops\"));\n-pub(crate) const TRY: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\"));\n-pub(crate) const OK: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n-pub(crate) const FUTURE_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"future\"));\n+pub(crate) const FUTURE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"future\"));\n+pub(crate) const RESULT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"result\"));\n+pub(crate) const BOXED: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"boxed\"));\n+\n+// Components of known path (type name)\n+pub(crate) const INTO_ITERATOR_TYPE: Name =\n+    Name::new(SmolStr::new_inline_from_ascii(12, b\"IntoIterator\"));\n+pub(crate) const ITEM_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\"));\n+pub(crate) const TRY_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\"));\n+pub(crate) const OK_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n pub(crate) const FUTURE_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Future\"));\n-pub(crate) const RESULT_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"result\"));\n pub(crate) const RESULT_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Result\"));\n-pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n-pub(crate) const TARGET: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Target\"));\n-pub(crate) const BOXED_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"boxed\"));\n+pub(crate) const OUTPUT_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n+pub(crate) const TARGET_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Target\"));\n pub(crate) const BOX_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Box\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {"}, {"sha": "a61161b63ac697c10584b756dd0e4b1b0fe25699", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -234,7 +234,7 @@ impl GenericArgs {\n         }\n         if let Some(ret_type) = ret_type {\n             let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n-            bindings.push((name::OUTPUT, type_ref))\n+            bindings.push((name::OUTPUT_TYPE, type_ref))\n         }\n         if args.is_empty() && bindings.is_empty() {\n             None\n@@ -338,3 +338,31 @@ fn convert_path(prefix: Option<Path>, path: ast::Path) -> Option<Path> {\n     };\n     Some(res)\n }\n+\n+pub mod known {\n+    use super::{Path, PathKind};\n+    use crate::name;\n+\n+    pub fn std_iter_into_iterator() -> Path {\n+        Path::from_simple_segments(\n+            PathKind::Abs,\n+            vec![name::STD, name::ITER, name::INTO_ITERATOR_TYPE],\n+        )\n+    }\n+\n+    pub fn std_ops_try() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::TRY_TYPE])\n+    }\n+\n+    pub fn std_result_result() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::RESULT, name::RESULT_TYPE])\n+    }\n+\n+    pub fn std_future_future() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::FUTURE, name::FUTURE_TYPE])\n+    }\n+\n+    pub fn std_boxed_box() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::BOXED, name::BOX_TYPE])\n+    }\n+}"}, {"sha": "2a907c9f1caf22780e6632c87b586df15f1c7a9e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -25,8 +25,7 @@ use crate::{\n         BodySourceMap,\n     },\n     ids::LocationCtx,\n-    name,\n-    path::PathKind,\n+    path::known,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::implements_trait,\n     AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirFileId, MacroDef,\n@@ -433,10 +432,7 @@ impl SourceAnalyzer {\n     /// Checks that particular type `ty` implements `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n     pub fn impls_future(&self, db: &impl HirDatabase, ty: Ty) -> bool {\n-        let std_future_path = Path::from_simple_segments(\n-            PathKind::Abs,\n-            vec![name::STD, name::FUTURE_MOD, name::FUTURE_TYPE],\n-        );\n+        let std_future_path = known::std_future_future();\n \n         let std_future_trait = match self.resolver.resolve_known_trait(db, &std_future_path) {\n             Some(it) => it,"}, {"sha": "94f8ecdc9f1660576a57ec219829ecf67daa8393", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -42,7 +42,7 @@ fn deref_by_trait(\n         crate::lang_item::LangItemTarget::Trait(t) => t,\n         _ => return None,\n     };\n-    let target = deref_trait.associated_type_by_name(db, &name::TARGET)?;\n+    let target = deref_trait.associated_type_by_name(db, &name::TARGET_TYPE)?;\n \n     if target.generic_params(db).count_params_including_parent() != 1 {\n         // the Target type + Deref trait should only have one generic parameter,"}, {"sha": "785499f776775bdbf222c9e659e4d3b424a50839", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed3be32916facf3b709d5277381408cd3ec134a/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=7ed3be32916facf3b709d5277381408cd3ec134a", "patch": "@@ -44,7 +44,7 @@ use crate::{\n     generics::{GenericParams, HasGenericParams},\n     name,\n     nameres::Namespace,\n-    path::{GenericArg, GenericArgs, PathKind},\n+    path::{known, GenericArg, GenericArgs},\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n@@ -1442,39 +1442,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAlias> {\n-        let into_iter_path = Path::from_simple_segments(\n-            PathKind::Abs,\n-            vec![name::STD, name::ITER, name::INTO_ITERATOR],\n-        );\n-\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &into_iter_path)?;\n-        trait_.associated_type_by_name(self.db, &name::ITEM)\n+        let path = known::std_iter_into_iterator();\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        trait_.associated_type_by_name(self.db, &name::ITEM_TYPE)\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAlias> {\n-        let ops_try_path =\n-            Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::TRY]);\n-\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &ops_try_path)?;\n-        trait_.associated_type_by_name(self.db, &name::OK)\n+        let path = known::std_ops_try();\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        trait_.associated_type_by_name(self.db, &name::OK_TYPE)\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAlias> {\n-        let future_future_path = Path::from_simple_segments(\n-            PathKind::Abs,\n-            vec![name::STD, name::FUTURE_MOD, name::FUTURE_TYPE],\n-        );\n-\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &future_future_path)?;\n-        trait_.associated_type_by_name(self.db, &name::OUTPUT)\n+        let path = known::std_future_future();\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        trait_.associated_type_by_name(self.db, &name::OUTPUT_TYPE)\n     }\n \n     fn resolve_boxed_box(&self) -> Option<Adt> {\n-        let boxed_box_path = Path::from_simple_segments(\n-            PathKind::Abs,\n-            vec![name::STD, name::BOXED_MOD, name::BOX_TYPE],\n-        );\n-        let struct_ = self.resolver.resolve_known_struct(self.db, &boxed_box_path)?;\n+        let path = known::std_boxed_box();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n         Some(Adt::Struct(struct_))\n     }\n }"}]}