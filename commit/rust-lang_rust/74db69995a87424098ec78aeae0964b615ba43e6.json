{"sha": "74db69995a87424098ec78aeae0964b615ba43e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGI2OTk5NWE4NzQyNDA5OGVjNzhhZWFlMDk2NGI2MTViYTQzZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T18:51:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-25T18:51:09Z"}, "message": "auto merge of #15968 : nham/rust/keys_values_other_maps, r=alexcrichton\n\nAdds methods for obtaining iterators over the keys or values of a SmallIntMap/TreeMap/TrieMap.\r\n\r\nCloses #14376", "tree": {"sha": "7ec0240cec299e6b94a6bd9f391504774edeadc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec0240cec299e6b94a6bd9f391504774edeadc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74db69995a87424098ec78aeae0964b615ba43e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74db69995a87424098ec78aeae0964b615ba43e6", "html_url": "https://github.com/rust-lang/rust/commit/74db69995a87424098ec78aeae0964b615ba43e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74db69995a87424098ec78aeae0964b615ba43e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30776ec24400e813403ce947325d36a492c99d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30776ec24400e813403ce947325d36a492c99d3", "html_url": "https://github.com/rust-lang/rust/commit/d30776ec24400e813403ce947325d36a492c99d3"}, {"sha": "74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b1aed0ec31d9719e585f82f76e8167c26d0c6f", "html_url": "https://github.com/rust-lang/rust/commit/74b1aed0ec31d9719e585f82f76e8167c26d0c6f"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "e1980e1549a05055ab4e476644380f0815645049", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=74db69995a87424098ec78aeae0964b615ba43e6", "patch": "@@ -17,6 +17,7 @@ use core::prelude::*;\n \n use core::default::Default;\n use core::fmt;\n+use core::iter;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n \n@@ -194,6 +195,18 @@ impl<V> SmallIntMap<V> {\n         self.find(key).expect(\"key not present\")\n     }\n \n+    /// An iterator visiting all keys in ascending order by the keys.\n+    /// Iterator element type is `uint`.\n+    pub fn keys<'r>(&'r self) -> Keys<'r, V> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// An iterator visiting all values in ascending order by the keys.\n+    /// Iterator element type is `&'r V`.\n+    pub fn values<'r>(&'r self) -> Values<'r, V> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// An iterator visiting all key-value pairs in ascending order by the keys.\n     /// Iterator element type is `(uint, &'r V)`.\n     ///\n@@ -422,6 +435,14 @@ pub struct MutEntries<'a, T> {\n iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n \n+/// Forward iterator over the keys of a map\n+pub type Keys<'a, T> =\n+    iter::Map<'static, (uint, &'a T), uint, Entries<'a, T>>;\n+\n+/// Forward iterator over the values of a map\n+pub type Values<'a, T> =\n+    iter::Map<'static, (uint, &'a T), &'a T, Entries<'a, T>>;\n+\n #[cfg(test)]\n mod test_map {\n     use std::prelude::*;\n@@ -517,6 +538,32 @@ mod test_map {\n         assert_eq!(m.pop(&1), None);\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let mut map = SmallIntMap::new();\n+        map.insert(1, 'a');\n+        map.insert(2, 'b');\n+        map.insert(3, 'c');\n+        let keys = map.keys().collect::<Vec<uint>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let mut map = SmallIntMap::new();\n+        map.insert(1, 'a');\n+        map.insert(2, 'b');\n+        map.insert(3, 'c');\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_iterator() {\n         let mut m = SmallIntMap::new();"}, {"sha": "9bc0a1abbc5f5206e62f08f2d813d75634361de3", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=74db69995a87424098ec78aeae0964b615ba43e6", "patch": "@@ -141,6 +141,16 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n+    /// Get a lazy iterator over the keys in the map.\n+    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// Get a lazy iterator over the values in the map.\n+    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pub fn iter<'a>(&'a self) -> Entries<'a, K, V> {\n@@ -381,6 +391,15 @@ pub struct RevMutEntries<'a, K, V> {\n }\n \n \n+/// TreeMap keys iterator\n+pub type Keys<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a K, Entries<'a, K, V>>;\n+\n+/// TreeMap values iterator\n+pub type Values<'a, K, V> =\n+    iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n+\n+\n // FIXME #5846 we want to be able to choose between &x and &mut x\n // (with many different `x`) below, so we need to optionally pass mut\n // as a tt, but the only thing we can do with a `tt` is pass them to\n@@ -1470,6 +1489,28 @@ mod test_treemap {\n         assert!(m_upper.iter().all(|(_, &x)| x == 0));\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let map = vec.move_iter().collect::<TreeMap<int, char>>();\n+        let keys = map.keys().map(|&k| k).collect::<Vec<int>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let vec = vec![(1i, 'a'), (2i, 'b'), (3i, 'c')];\n+        let map = vec.move_iter().collect::<TreeMap<int, char>>();\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_eq() {\n         let mut a = TreeMap::new();"}, {"sha": "14ab122f0a43afe415853c58f0e6930436eb6550", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74db69995a87424098ec78aeae0964b615ba43e6/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=74db69995a87424098ec78aeae0964b615ba43e6", "patch": "@@ -18,6 +18,7 @@ use core::default::Default;\n use core::mem::zeroed;\n use core::mem;\n use core::uint;\n+use core::iter;\n use std::hash::{Writer, Hash};\n \n use {Collection, Mutable, Map, MutableMap, Set, MutableSet};\n@@ -196,6 +197,18 @@ impl<T> TrieMap<T> {\n         self.root.each_reverse(f)\n     }\n \n+    /// Get an iterator visiting all keys in ascending order by the keys.\n+    /// Iterator element type is `uint`.\n+    pub fn keys<'r>(&'r self) -> Keys<'r, T> {\n+        self.iter().map(|(k, _v)| k)\n+    }\n+\n+    /// Get an iterator visiting all values in ascending order by the keys.\n+    /// Iterator element type is `&'r T`.\n+    pub fn values<'r>(&'r self) -> Values<'r, T> {\n+        self.iter().map(|(_k, v)| v)\n+    }\n+\n     /// Get an iterator over the key-value pairs in the map, ordered by keys.\n     ///\n     /// # Example\n@@ -783,6 +796,14 @@ pub struct MutEntries<'a, T> {\n     remaining_max: uint\n }\n \n+/// Forward iterator over the keys of a map\n+pub type Keys<'a, T> =\n+    iter::Map<'static, (uint, &'a T), uint, Entries<'a, T>>;\n+\n+/// Forward iterator over the values of a map\n+pub type Values<'a, T> =\n+    iter::Map<'static, (uint, &'a T), &'a T, Entries<'a, T>>;\n+\n // FIXME #5846: see `addr!` above.\n macro_rules! item { ($i:item) => {$i}}\n \n@@ -1070,6 +1091,28 @@ mod test_map {\n         }\n     }\n \n+    #[test]\n+    fn test_keys() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<TrieMap<char>>();\n+        let keys = map.keys().collect::<Vec<uint>>();\n+        assert_eq!(keys.len(), 3);\n+        assert!(keys.contains(&1));\n+        assert!(keys.contains(&2));\n+        assert!(keys.contains(&3));\n+    }\n+\n+    #[test]\n+    fn test_values() {\n+        let vec = vec![(1, 'a'), (2, 'b'), (3, 'c')];\n+        let map = vec.move_iter().collect::<TrieMap<char>>();\n+        let values = map.values().map(|&v| v).collect::<Vec<char>>();\n+        assert_eq!(values.len(), 3);\n+        assert!(values.contains(&'a'));\n+        assert!(values.contains(&'b'));\n+        assert!(values.contains(&'c'));\n+    }\n+\n     #[test]\n     fn test_iteration() {\n         let empty_map : TrieMap<uint> = TrieMap::new();"}]}