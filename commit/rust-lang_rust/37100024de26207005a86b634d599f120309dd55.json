{"sha": "37100024de26207005a86b634d599f120309dd55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTAwMDI0ZGUyNjIwNzAwNWE4NmI2MzRkNTk5ZjEyMDMwOWRkNTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-24T16:59:53Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T10:48:59Z"}, "message": "Make fields of RustdocVisitor private", "tree": {"sha": "bdd9c34d56be902279ce439c6ecbc2ebec1b9116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd9c34d56be902279ce439c6ecbc2ebec1b9116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37100024de26207005a86b634d599f120309dd55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37100024de26207005a86b634d599f120309dd55", "html_url": "https://github.com/rust-lang/rust/commit/37100024de26207005a86b634d599f120309dd55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37100024de26207005a86b634d599f120309dd55/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19a359444295bab01de7ff44a9d72302e573bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19a359444295bab01de7ff44a9d72302e573bc9", "html_url": "https://github.com/rust-lang/rust/commit/d19a359444295bab01de7ff44a9d72302e573bc9"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "006f73d5f66526e6ad1a0a2bcdfea57c7ddd5bfe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37100024de26207005a86b634d599f120309dd55", "patch": "@@ -138,7 +138,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> Clean<Crate> for (visit_ast::RustdocVisitor<'a, 'tcx>, doctree::Module<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Crate {\n         use crate::visit_lib::LibEmbargoVisitor;\n \n@@ -159,7 +159,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n \n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n-        let mut module = self.module.as_ref().unwrap().clean(cx);\n+        let mut module = self.1.clean(cx);\n         let mut masked_crates = FxHashSet::default();\n \n         match module.inner {\n@@ -169,7 +169,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     // `#[doc(masked)]` to the injected `extern crate` because it's unstable.\n                     if it.is_extern_crate()\n                         && (it.attrs.has_doc_flag(sym::masked)\n-                            || self.cx.tcx.is_compiler_builtins(it.def_id.krate))\n+                            || cx.tcx.is_compiler_builtins(it.def_id.krate))\n                     {\n                         masked_crates.insert(it.def_id.krate);\n                     }"}, {"sha": "d09328547a3a7933b87d506a2db03f8c9e040987", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=37100024de26207005a86b634d599f120309dd55", "patch": "@@ -395,8 +395,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n             let mut krate = {\n                 let mut v = RustdocVisitor::new(&ctxt);\n-                v.visit(tcx.hir().krate());\n-                v.clean(&ctxt)\n+                let module = v.visit(tcx.hir().krate());\n+                (v, module).clean(&ctxt)\n             };\n \n             fn report_deprecated_attr(name: &str, diag: &errors::Handler) {"}, {"sha": "02daea9925e17db78fc1d2decd9670f891ffccb3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37100024de26207005a86b634d599f120309dd55/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=37100024de26207005a86b634d599f120309dd55", "patch": "@@ -20,17 +20,11 @@ use crate::clean::{self, AttributesExt, NestedAttributesExt, def_id_to_path};\n use crate::doctree::*;\n \n \n-// Looks to me like the first two of these are actually\n-// output parameters, maybe only mutated once; perhaps\n-// better simply to have the visit method return a tuple\n-// containing them?\n-\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n pub struct RustdocVisitor<'a, 'tcx> {\n-    pub module: Option<Module<'tcx>>,\n-    pub cx: &'a core::DocContext<'tcx>,\n+    cx: &'a core::DocContext<'tcx>,\n     view_item_stack: FxHashSet<hir::HirId>,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n@@ -46,7 +40,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let mut stack = FxHashSet::default();\n         stack.insert(hir::CRATE_HIR_ID);\n         RustdocVisitor {\n-            module: None,\n             cx,\n             view_item_stack: stack,\n             inlining: false,\n@@ -75,7 +68,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n     }\n \n-    pub fn visit(&mut self, krate: &'tcx hir::Crate) {\n+    pub fn visit(&mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(krate.span,\n                                               &krate.attrs,\n                                               &Spanned { span: syntax_pos::DUMMY_SP,\n@@ -88,9 +81,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             krate.exported_macros.iter().map(|def| self.visit_local_macro(def, None)),\n         );\n         module.is_crate = true;\n-        self.module = Some(module);\n \n         self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths.take().unwrap();\n+\n+        module\n     }\n \n     pub fn visit_variant_data(&mut self, item: &'tcx hir::Item,"}]}