{"sha": "9f09387f53792740edcb5dd0eea49ab02d3fe891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDkzODdmNTM3OTI3NDBlZGNiNWRkMGVlYTQ5YWIwMmQzZmU4OTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T08:46:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T04:14:07Z"}, "message": "syntax: simplify maybe_annotate_with_ascription", "tree": {"sha": "5d42dcf89ebf01d5fca2b93c39acbcb00d0e9a09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d42dcf89ebf01d5fca2b93c39acbcb00d0e9a09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f09387f53792740edcb5dd0eea49ab02d3fe891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f09387f53792740edcb5dd0eea49ab02d3fe891", "html_url": "https://github.com/rust-lang/rust/commit/9f09387f53792740edcb5dd0eea49ab02d3fe891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f09387f53792740edcb5dd0eea49ab02d3fe891/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a", "html_url": "https://github.com/rust-lang/rust/commit/1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "42cbe28fc17d44f39953ead004299c3fdecfc330", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f09387f53792740edcb5dd0eea49ab02d3fe891/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f09387f53792740edcb5dd0eea49ab02d3fe891/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=9f09387f53792740edcb5dd0eea49ab02d3fe891", "patch": "@@ -2,7 +2,7 @@ use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n };\n-use crate::feature_gate::{feature_err, UnstableFeatures};\n+use crate::feature_gate::feature_err;\n use crate::parse::{SeqSep, PResult, Parser, ParseSess};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n use crate::parse::token::{self, TokenKind};\n@@ -387,14 +387,17 @@ impl<'a> Parser<'a> {\n             let next_pos = sm.lookup_char_pos(self.token.span.lo());\n             let op_pos = sm.lookup_char_pos(sp.hi());\n \n+            let allow_unstable = self.sess.unstable_features.is_nightly_build();\n+\n             if likely_path {\n                 err.span_suggestion(\n                     sp,\n                     \"maybe write a path separator here\",\n                     \"::\".to_string(),\n-                    match self.sess.unstable_features {\n-                        UnstableFeatures::Disallow => Applicability::MachineApplicable,\n-                        _ => Applicability::MaybeIncorrect,\n+                    if allow_unstable {\n+                        Applicability::MaybeIncorrect\n+                    } else {\n+                        Applicability::MachineApplicable\n                     },\n                 );\n             } else if op_pos.line != next_pos.line && maybe_expected_semicolon {\n@@ -404,14 +407,13 @@ impl<'a> Parser<'a> {\n                     \";\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-            } else if let UnstableFeatures::Disallow = self.sess.unstable_features {\n-                err.span_label(sp, \"tried to parse a type due to this\");\n-            } else {\n+            } else if allow_unstable {\n                 err.span_label(sp, \"tried to parse a type due to this type ascription\");\n+            } else {\n+                err.span_label(sp, \"tried to parse a type due to this\");\n             }\n-            if let UnstableFeatures::Disallow = self.sess.unstable_features {\n+            if allow_unstable {\n                 // Give extra information about type ascription only if it's a nightly compiler.\n-            } else {\n                 err.note(\"`#![feature(type_ascription)]` lets you annotate an expression with a \\\n                           type: `<expr>: <type>`\");\n                 err.note(\"for more information, see \\"}]}