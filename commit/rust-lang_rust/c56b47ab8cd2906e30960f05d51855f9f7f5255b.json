{"sha": "c56b47ab8cd2906e30960f05d51855f9f7f5255b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmI0N2FiOGNkMjkwNmUzMDk2MGYwNWQ1MTg1NWY5ZjdmNTI1NWI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-15T20:19:53Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-26T20:46:12Z"}, "message": "Some TLC for the MoveMap trait", "tree": {"sha": "d139d0d6e590cdb43f2422f7e3d576be7accf42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d139d0d6e590cdb43f2422f7e3d576be7accf42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56b47ab8cd2906e30960f05d51855f9f7f5255b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56b47ab8cd2906e30960f05d51855f9f7f5255b", "html_url": "https://github.com/rust-lang/rust/commit/c56b47ab8cd2906e30960f05d51855f9f7f5255b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56b47ab8cd2906e30960f05d51855f9f7f5255b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0608b1d4146fc9fb76860bf71ff2363164f17326", "url": "https://api.github.com/repos/rust-lang/rust/commits/0608b1d4146fc9fb76860bf71ff2363164f17326", "html_url": "https://github.com/rust-lang/rust/commit/0608b1d4146fc9fb76860bf71ff2363164f17326"}], "stats": {"total": 229, "additions": 131, "deletions": 98}, "files": [{"sha": "74a9ecd89be7c578fac23c4fac7fbaf0ebcd8ecd", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -20,34 +20,7 @@ use syntax::codemap::{respan, Span, Spanned};\n use syntax::owned_slice::OwnedSlice;\n use syntax::ptr::P;\n use syntax::parse::token;\n-use std::ptr;\n-\n-// This could have a better place to live.\n-pub trait MoveMap<T> {\n-    fn move_map<F>(self, f: F) -> Self where F: FnMut(T) -> T;\n-}\n-\n-impl<T> MoveMap<T> for Vec<T> {\n-    fn move_map<F>(mut self, mut f: F) -> Vec<T>\n-        where F: FnMut(T) -> T\n-    {\n-        for p in &mut self {\n-            unsafe {\n-                // FIXME(#5016) this shouldn't need to zero to be safe.\n-                ptr::write(p, f(ptr::read_and_drop(p)));\n-            }\n-        }\n-        self\n-    }\n-}\n-\n-impl<T> MoveMap<T> for OwnedSlice<T> {\n-    fn move_map<F>(self, f: F) -> OwnedSlice<T>\n-        where F: FnMut(T) -> T\n-    {\n-        OwnedSlice::from_vec(self.into_vec().move_map(f))\n-    }\n-}\n+use syntax::util::move_map::MoveMap;\n \n pub trait Folder : Sized {\n     // Any additions to this trait should happen in form\n@@ -333,7 +306,7 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n }\n \n pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> {\n-    attrs.into_iter().flat_map(|x| fld.fold_attribute(x)).collect()\n+    attrs.move_flat_map(|x| fld.fold_attribute(x))\n }\n \n pub fn noop_fold_arm<T: Folder>(Arm { attrs, pats, guard, body }: Arm, fld: &mut T) -> Arm {\n@@ -771,7 +744,7 @@ pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n     b.map(|Block { id, stmts, expr, rules, span }| {\n         Block {\n             id: folder.new_id(id),\n-            stmts: stmts.into_iter().map(|s| folder.fold_stmt(s)).collect(),\n+            stmts: stmts.move_map(|s| folder.fold_stmt(s)),\n             expr: expr.map(|x| folder.fold_expr(x)),\n             rules: rules,\n             span: folder.new_span(span),\n@@ -818,9 +791,8 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             ItemDefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }\n         ItemImpl(unsafety, polarity, generics, ifce, ty, impl_items) => {\n-            let new_impl_items = impl_items.into_iter()\n-                                           .map(|item| folder.fold_impl_item(item))\n-                                           .collect();\n+            let new_impl_items = impl_items\n+                .move_map(|item| folder.fold_impl_item(item));\n             let ifce = match ifce {\n                 None => None,\n                 Some(ref trait_ref) => {\n@@ -836,9 +808,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n         }\n         ItemTrait(unsafety, generics, bounds, items) => {\n             let bounds = folder.fold_bounds(bounds);\n-            let items = items.into_iter()\n-                             .map(|item| folder.fold_trait_item(item))\n-                             .collect();\n+            let items = items.move_map(|item| folder.fold_trait_item(item));\n             ItemTrait(unsafety, folder.fold_generics(generics), bounds, items)\n         }\n     }\n@@ -894,7 +864,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T) -> P<ImplI\n pub fn noop_fold_mod<T: Folder>(Mod { inner, item_ids }: Mod, folder: &mut T) -> Mod {\n     Mod {\n         inner: folder.new_span(inner),\n-        item_ids: item_ids.into_iter().map(|x| folder.fold_item_id(x)).collect(),\n+        items_ids: item_ids.move_map(|x| folder.fold_item_id(x)),\n     }\n }\n "}, {"sha": "3bfa645afc7d92f9b3f85434484edda66dddcf06", "filename": "src/librustc_front/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibrustc_front%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibrustc_front%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flib.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -35,7 +35,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(str_char)]\n-#![feature(filling_drop)]\n \n extern crate serialize;\n #[macro_use]"}, {"sha": "bd89430d81de04b9ee8b2a3a26e679625162c042", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -204,7 +204,7 @@ use ext::build::AstBuilder;\n use codemap::{self, DUMMY_SP};\n use codemap::Span;\n use diagnostic::SpanHandler;\n-use fold::MoveMap;\n+use util::move_map::MoveMap;\n use owned_slice::OwnedSlice;\n use parse::token::{intern, InternedString};\n use parse::token::special_idents;"}, {"sha": "908b2bd24293ea96f42efc9358a50f4ceec8f106", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -24,6 +24,7 @@ use ext::base::*;\n use feature_gate::{self, Features, GatedCfg};\n use fold;\n use fold::*;\n+use util::move_map::MoveMap;\n use parse;\n use parse::token::{fresh_mark, fresh_name, intern};\n use ptr::P;"}, {"sha": "73f2c51b246222a90bae743f392410e1a049ef33", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -26,34 +26,11 @@ use codemap::{respan, Span, Spanned};\n use owned_slice::OwnedSlice;\n use parse::token;\n use ptr::P;\n-use std::ptr;\n use util::small_vector::SmallVector;\n+use util::move_map::MoveMap;\n \n use std::rc::Rc;\n \n-// This could have a better place to live.\n-pub trait MoveMap<T> {\n-    fn move_map<F>(self, f: F) -> Self where F: FnMut(T) -> T;\n-}\n-\n-impl<T> MoveMap<T> for Vec<T> {\n-    fn move_map<F>(mut self, mut f: F) -> Vec<T> where F: FnMut(T) -> T {\n-        for p in &mut self {\n-            unsafe {\n-                // FIXME(#5016) this shouldn't need to zero to be safe.\n-                ptr::write(p, f(ptr::read_and_drop(p)));\n-            }\n-        }\n-        self\n-    }\n-}\n-\n-impl<T> MoveMap<T> for OwnedSlice<T> {\n-    fn move_map<F>(self, f: F) -> OwnedSlice<T> where F: FnMut(T) -> T {\n-        OwnedSlice::from_vec(self.into_vec().move_map(f))\n-    }\n-}\n-\n pub trait Folder : Sized {\n     // Any additions to this trait should happen in form\n     // of a call to a public `noop_*` function that only calls\n@@ -362,7 +339,7 @@ pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<\n }\n \n pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> {\n-    attrs.into_iter().flat_map(|x| fld.fold_attribute(x)).collect()\n+    attrs.move_flat_map(|x| fld.fold_attribute(x))\n }\n \n pub fn fold_thin_attrs<T: Folder>(attrs: ThinAttributes, fld: &mut T) -> ThinAttributes {\n@@ -623,6 +600,8 @@ pub fn noop_fold_tt<T: Folder>(tt: &TokenTree, fld: &mut T) -> TokenTree {\n }\n \n pub fn noop_fold_tts<T: Folder>(tts: &[TokenTree], fld: &mut T) -> Vec<TokenTree> {\n+    // FIXME: Does this have to take a tts slice?\n+    // Could use move_map otherwise...\n     tts.iter().map(|tt| fld.fold_tt(tt)).collect()\n }\n \n@@ -904,7 +883,7 @@ fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T)\n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n     b.map(|Block {id, stmts, expr, rules, span}| Block {\n         id: folder.new_id(id),\n-        stmts: stmts.into_iter().flat_map(|s| folder.fold_stmt(s).into_iter()).collect(),\n+        stmts: stmts.move_flat_map(|s| folder.fold_stmt(s).into_iter()),\n         expr: expr.and_then(|x| folder.fold_opt_expr(x)),\n         rules: rules,\n         span: folder.new_span(span),\n@@ -953,9 +932,9 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             ItemDefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }\n         ItemImpl(unsafety, polarity, generics, ifce, ty, impl_items) => {\n-            let new_impl_items = impl_items.into_iter().flat_map(|item| {\n-                folder.fold_impl_item(item).into_iter()\n-            }).collect();\n+            let new_impl_items = impl_items.move_flat_map(|item| {\n+                folder.fold_impl_item(item)\n+            });\n             let ifce = match ifce {\n                 None => None,\n                 Some(ref trait_ref) => {\n@@ -971,9 +950,9 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n         }\n         ItemTrait(unsafety, generics, bounds, items) => {\n             let bounds = folder.fold_bounds(bounds);\n-            let items = items.into_iter().flat_map(|item| {\n-                folder.fold_trait_item(item).into_iter()\n-            }).collect();\n+            let items = items.move_flat_map(|item| {\n+                folder.fold_trait_item(item)\n+            });\n             ItemTrait(unsafety,\n                       folder.fold_generics(generics),\n                       bounds,\n@@ -1032,7 +1011,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T)\n pub fn noop_fold_mod<T: Folder>(Mod {inner, items}: Mod, folder: &mut T) -> Mod {\n     Mod {\n         inner: folder.new_span(inner),\n-        items: items.into_iter().flat_map(|x| folder.fold_item(x).into_iter()).collect(),\n+        items: items.move_flat_map(|x| folder.fold_item(x)),\n     }\n }\n \n@@ -1353,8 +1332,7 @@ pub fn noop_fold_opt_expr<T: Folder>(e: P<Expr>, folder: &mut T) -> Option<P<Exp\n }\n \n pub fn noop_fold_exprs<T: Folder>(es: Vec<P<Expr>>, folder: &mut T) -> Vec<P<Expr>> {\n-    // FIXME: Needs a efficient in-place flat_map\n-    es.into_iter().flat_map(|e| folder.fold_opt_expr(e)).collect()\n+    es.move_flat_map(|e| folder.fold_opt_expr(e))\n }\n \n pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)"}, {"sha": "da62c253d8fd41a36d80c3ab0be90e3eac98961d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -70,6 +70,7 @@ pub mod util {\n     #[cfg(test)]\n     pub mod parser_testing;\n     pub mod small_vector;\n+    pub mod move_map;\n }\n \n pub mod diagnostics {"}, {"sha": "aa55cb847faffabb882abf25587011ba38168959", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -1653,8 +1653,6 @@ impl<'a> State<'a> {\n         }\n         if parse::classify::stmt_ends_with_semi(&st.node) {\n             try!(word(&mut self.s, \";\"));\n-        } else {\n-            //try!(word(&mut self.s, \"\"));\n         }\n         self.maybe_print_trailing_comment(st.span, None)\n     }"}, {"sha": "6fd3833a3cd50ab739dd8e3f1e4458bbd37cebc5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -29,7 +29,8 @@ use entry::{self, EntryPointType};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n-use fold::{Folder, MoveMap};\n+use fold::Folder;\n+use util::move_map::MoveMap;\n use fold;\n use owned_slice::OwnedSlice;\n use parse::token::{intern, InternedString};"}, {"sha": "95c24c66630f048298814882ddebfccdc77693b6", "filename": "src/libsyntax/util/move_map.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Futil%2Fmove_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Futil%2Fmove_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fmove_map.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use owned_slice::OwnedSlice;\n+\n+use std::ptr;\n+\n+pub trait MoveMap<T>: Sized {\n+    fn move_map<F>(self, mut f: F) -> Self where F: FnMut(T) -> T {\n+        self.move_flat_map(|e| Some(f(e)))\n+    }\n+\n+    fn move_flat_map<F, I>(self, f: F) -> Self\n+        where F: FnMut(T) -> I,\n+              I: IntoIterator<Item=T>;\n+}\n+\n+impl<T> MoveMap<T> for Vec<T> {\n+    fn move_flat_map<F, I>(mut self, mut f: F) -> Self\n+        where F: FnMut(T) -> I,\n+              I: IntoIterator<Item=T>\n+    {\n+        let mut read_i = 0;\n+        let mut write_i = 0;\n+        unsafe {\n+            let mut old_len = self.len();\n+            self.set_len(0); // make sure we just leak elements in case of panic\n+\n+            while read_i < old_len {\n+                // move the read_i'th item out of the vector and map it\n+                // to an iterator\n+                let e = ptr::read(self.get_unchecked(read_i));\n+                let mut iter = f(e).into_iter();\n+                read_i += 1;\n+\n+                while let Some(e) = iter.next() {\n+                    if write_i < read_i {\n+                        ptr::write(self.get_unchecked_mut(write_i), e);\n+                        write_i += 1;\n+                    } else {\n+                        // If this is reached we ran out of space\n+                        // in the middle of the vector.\n+                        // However, the vector is in a valid state here,\n+                        // so we just do a somewhat inefficient insert.\n+                        self.set_len(old_len);\n+                        self.insert(write_i, e);\n+\n+                        old_len = self.len();\n+                        self.set_len(0);\n+\n+                        read_i += 1;\n+                        write_i += 1;\n+                    }\n+                }\n+            }\n+\n+            // write_i tracks the number of actually written new items.\n+            self.set_len(write_i);\n+        }\n+\n+        self\n+    }\n+}\n+\n+impl<T> MoveMap<T> for OwnedSlice<T> {\n+    fn move_flat_map<F, I>(self, f: F) -> Self\n+        where F: FnMut(T) -> I,\n+              I: IntoIterator<Item=T>\n+    {\n+        OwnedSlice::from_vec(self.into_vec().move_flat_map(f))\n+    }\n+}"}, {"sha": "ee183d7f3e96a3455f024fa33c0fdd65b5062ded", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -16,7 +16,7 @@ use std::mem;\n use std::slice;\n use std::vec;\n \n-use fold::MoveMap;\n+use util::move_map::MoveMap;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n pub struct SmallVector<T> {\n@@ -134,15 +134,6 @@ impl<T> SmallVector<T> {\n         self.into_iter()\n     }\n \n-    pub fn into_iter(self) -> IntoIter<T> {\n-        let repr = match self.repr {\n-            Zero => ZeroIterator,\n-            One(v) => OneIterator(v),\n-            Many(vs) => ManyIterator(vs.into_iter())\n-        };\n-        IntoIter { repr: repr }\n-    }\n-\n     pub fn len(&self) -> usize {\n         match self.repr {\n             Zero => 0,\n@@ -154,6 +145,19 @@ impl<T> SmallVector<T> {\n     pub fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n+impl<T> IntoIterator for SmallVector<T> {\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+    fn into_iter(self) -> Self::IntoIter {\n+        let repr = match self.repr {\n+            Zero => ZeroIterator,\n+            One(v) => OneIterator(v),\n+            Many(vs) => ManyIterator(vs.into_iter())\n+        };\n+        IntoIter { repr: repr }\n+    }\n+}\n+\n pub struct IntoIter<T> {\n     repr: IntoIterRepr<T>,\n }\n@@ -192,13 +196,15 @@ impl<T> Iterator for IntoIter<T> {\n }\n \n impl<T> MoveMap<T> for SmallVector<T> {\n-    fn move_map<F>(self, mut f: F) -> SmallVector<T> where F: FnMut(T) -> T {\n-        let repr = match self.repr {\n-            Zero => Zero,\n-            One(v) => One(f(v)),\n-            Many(vs) => Many(vs.move_map(f))\n-        };\n-        SmallVector { repr: repr }\n+    fn move_flat_map<F, I>(self, mut f: F) -> Self\n+        where F: FnMut(T) -> I,\n+              I: IntoIterator<Item=T>\n+    {\n+        match self.repr {\n+            Zero => Self::zero(),\n+            One(v) => f(v).into_iter().collect(),\n+            Many(vs) => SmallVector { repr: Many(vs.move_flat_map(f)) },\n+        }\n     }\n }\n "}, {"sha": "3cb664e23403d101cddb1299db11083cfcba972d", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56b47ab8cd2906e30960f05d51855f9f7f5255b/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=c56b47ab8cd2906e30960f05d51855f9f7f5255b", "patch": "@@ -13,6 +13,7 @@\n extern crate syntax;\n \n use syntax::ast::*;\n+use syntax::attr::*;\n use syntax::ast;\n use syntax::parse;\n use syntax::parse::{ParseSess,filemap_to_tts, PResult};\n@@ -25,7 +26,6 @@ use syntax::parse::attr::*;\n use syntax::print::pprust;\n use std::fmt;\n \n-\n // Copied out of syntax::util::parser_testing\n \n pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n@@ -51,13 +51,13 @@ fn with_error_checking_parse<T, F>(s: String, f: F) -> PResult<T> where\n \n fn expr(s: &str) -> PResult<P<ast::Expr>> {\n     with_error_checking_parse(s.to_string(), |p| {\n-        p.parse_expr_nopanic()\n+        p.parse_expr()\n     })\n }\n \n fn stmt(s: &str) -> PResult<P<ast::Stmt>> {\n     with_error_checking_parse(s.to_string(), |p| {\n-        p.parse_stmt_nopanic().map(|s| s.unwrap())\n+        p.parse_stmt().map(|s| s.unwrap())\n     })\n }\n \n@@ -81,7 +81,7 @@ fn check_expr_attrs(es: &str, expected: &[&str]) {\n     let actual = &e.attrs;\n     str_compare(es,\n                 &expected.iter().map(|r| attr(r).unwrap()).collect::<Vec<_>>(),\n-                actual.as_attrs(),\n+                actual.as_attr_slice(),\n                 pprust::attribute_to_string);\n }\n "}]}