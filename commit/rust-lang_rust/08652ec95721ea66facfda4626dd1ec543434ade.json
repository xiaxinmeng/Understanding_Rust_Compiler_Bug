{"sha": "08652ec95721ea66facfda4626dd1ec543434ade", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjUyZWM5NTcyMWVhNjZmYWNmZGE0NjI2ZGQxZWM1NDM0MzRhZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T03:03:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T03:03:19Z"}, "message": "Auto merge of #43258 - petrochenkov:cbabort, r=alexcrichton\n\nCompile `compiler_builtins` with `abort` panic strategy\n\nA workaround for https://github.com/rust-lang/rust/issues/43095\n\nIn case this causes unexpected consequences, I use a simpler workaround locally:\n```diff\n--- a/src/bootstrap/bin/rustc.rs\n+++ b/src/bootstrap/bin/rustc.rs\n@@ -175,7 +175,9 @@ fn main() {\n         }\n\n         if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n-            cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n+            if crate_name != \"compiler_builtins\" {\n+                cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n+            }\n         }\n\n         // Emit save-analysis info.\n```\n\nr? @alexcrichton", "tree": {"sha": "fb0394928fa6fd98e8dcb8f050254b9d35f77800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb0394928fa6fd98e8dcb8f050254b9d35f77800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08652ec95721ea66facfda4626dd1ec543434ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08652ec95721ea66facfda4626dd1ec543434ade", "html_url": "https://github.com/rust-lang/rust/commit/08652ec95721ea66facfda4626dd1ec543434ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08652ec95721ea66facfda4626dd1ec543434ade/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56071f68795f91ee8b617b6a20fc22675b53eafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/56071f68795f91ee8b617b6a20fc22675b53eafc", "html_url": "https://github.com/rust-lang/rust/commit/56071f68795f91ee8b617b6a20fc22675b53eafc"}, {"sha": "5f37110e5e1ae14a19aa7ee036f27e47e08ee73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f37110e5e1ae14a19aa7ee036f27e47e08ee73d", "html_url": "https://github.com/rust-lang/rust/commit/5f37110e5e1ae14a19aa7ee036f27e47e08ee73d"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "134406b1acdb38dd78eaa4ead2f0e245985d774c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08652ec95721ea66facfda4626dd1ec543434ade/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08652ec95721ea66facfda4626dd1ec543434ade/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=08652ec95721ea66facfda4626dd1ec543434ade", "patch": "@@ -150,7 +150,12 @@ fn main() {\n         // This... is a bit of a hack how we detect this. Ideally this\n         // information should be encoded in the crate I guess? Would likely\n         // require an RFC amendment to RFC 1513, however.\n-        if crate_name == \"panic_abort\" {\n+        //\n+        // `compiler_builtins` are unconditionally compiled with panic=abort to\n+        // workaround undefined references to `rust_eh_unwind_resume` generated\n+        // otherwise, see issue https://github.com/rust-lang/rust/issues/43095.\n+        if crate_name == \"panic_abort\" ||\n+           crate_name == \"compiler_builtins\" && stage != \"0\" {\n             cmd.arg(\"-C\").arg(\"panic=abort\");\n         }\n "}, {"sha": "837ab4fd4a3ccf7a64f8f71b581f10c072f688fb", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08652ec95721ea66facfda4626dd1ec543434ade/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08652ec95721ea66facfda4626dd1ec543434ade/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=08652ec95721ea66facfda4626dd1ec543434ade", "patch": "@@ -396,7 +396,8 @@ fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, list: &[Linkage]) {\n             }\n             let cnum = CrateNum::new(i + 1);\n             let found_strategy = sess.cstore.panic_strategy(cnum);\n-            if desired_strategy == found_strategy {\n+            let is_compiler_builtins = sess.cstore.is_compiler_builtins(cnum);\n+            if is_compiler_builtins || desired_strategy == found_strategy {\n                 continue\n             }\n "}]}