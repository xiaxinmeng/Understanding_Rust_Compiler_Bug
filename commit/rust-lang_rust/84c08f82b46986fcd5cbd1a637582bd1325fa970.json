{"sha": "84c08f82b46986fcd5cbd1a637582bd1325fa970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YzA4ZjgyYjQ2OTg2ZmNkNWNiZDFhNjM3NTgyYmQxMzI1ZmE5NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T11:46:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-14T11:46:57Z"}, "message": "Auto merge of #83044 - kubo39:set-llvm-code-model, r=nikic\n\nAdd support for storing code model to LLVM module IR\n\nThis patch avoids undefined behavior by linking different object files.\nAlso this would it could be propagated properly to LTO.\n\nSee https://reviews.llvm.org/D52322 and https://reviews.llvm.org/D52323.\n\nThis patch is based on https://github.com/rust-lang/rust/pull/74002", "tree": {"sha": "6678d7e243f4636cb97dda900790c6cdc687d091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6678d7e243f4636cb97dda900790c6cdc687d091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c08f82b46986fcd5cbd1a637582bd1325fa970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c08f82b46986fcd5cbd1a637582bd1325fa970", "html_url": "https://github.com/rust-lang/rust/commit/84c08f82b46986fcd5cbd1a637582bd1325fa970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c08f82b46986fcd5cbd1a637582bd1325fa970/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f293f70dd848ae2371b6fad2eb9f4081e920da88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f293f70dd848ae2371b6fad2eb9f4081e920da88", "html_url": "https://github.com/rust-lang/rust/commit/f293f70dd848ae2371b6fad2eb9f4081e920da88"}, {"sha": "71418384d7d37b37eef250291ea8015667a81f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/71418384d7d37b37eef250291ea8015667a81f17", "html_url": "https://github.com/rust-lang/rust/commit/71418384d7d37b37eef250291ea8015667a81f17"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "4b7bcf05501311da5abd45d997e3e755c378de86", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=84c08f82b46986fcd5cbd1a637582bd1325fa970", "patch": "@@ -140,7 +140,7 @@ fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n     }\n }\n \n-fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeModel {\n+pub(crate) fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeModel {\n     match code_model {\n         Some(CodeModel::Tiny) => llvm::CodeModel::Tiny,\n         Some(CodeModel::Small) => llvm::CodeModel::Small,"}, {"sha": "21473f3b1143cfc71b5c60b5cfb40f2380fedbd0", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=84c08f82b46986fcd5cbd1a637582bd1325fa970", "patch": "@@ -1,4 +1,5 @@\n use crate::attributes;\n+use crate::back::write::to_llvm_code_model;\n use crate::callee::get_fn;\n use crate::coverageinfo;\n use crate::debuginfo;\n@@ -181,6 +182,13 @@ pub unsafe fn create_module(\n         }\n     }\n \n+    // Linking object files with different code models is undefined behavior\n+    // because the compiler would have to generate additional code (to span\n+    // longer jumps) if a larger code model is used with a smaller one.\n+    //\n+    // See https://reviews.llvm.org/D52322 and https://reviews.llvm.org/D52323.\n+    llvm::LLVMRustSetModuleCodeModel(llmod, to_llvm_code_model(sess.code_model()));\n+\n     // If skipping the PLT is enabled, we need to add some module metadata\n     // to ensure intrinsic calls don't use it.\n     if !sess.needs_plt() {"}, {"sha": "82cd1be3b3b45ab70beded53ff66d66cc0c69c11", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=84c08f82b46986fcd5cbd1a637582bd1325fa970", "patch": "@@ -2326,6 +2326,7 @@ extern \"C\" {\n     pub fn LLVMRustUnsetComdat(V: &Value);\n     pub fn LLVMRustSetModulePICLevel(M: &Module);\n     pub fn LLVMRustSetModulePIELevel(M: &Module);\n+    pub fn LLVMRustSetModuleCodeModel(M: &Module, Model: CodeModel);\n     pub fn LLVMRustModuleBufferCreate(M: &Module) -> &'static mut ModuleBuffer;\n     pub fn LLVMRustModuleBufferPtr(p: &ModuleBuffer) -> *const u8;\n     pub fn LLVMRustModuleBufferLen(p: &ModuleBuffer) -> usize;"}, {"sha": "51c80cf7dfa4192ec1c1dc46069931c422427daa", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/84c08f82b46986fcd5cbd1a637582bd1325fa970/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=84c08f82b46986fcd5cbd1a637582bd1325fa970", "patch": "@@ -1264,6 +1264,14 @@ extern \"C\" void LLVMRustSetModulePIELevel(LLVMModuleRef M) {\n   unwrap(M)->setPIELevel(PIELevel::Level::Large);\n }\n \n+extern \"C\" void LLVMRustSetModuleCodeModel(LLVMModuleRef M,\n+                                           LLVMRustCodeModel Model) {\n+  auto CM = fromRust(Model);\n+  if (!CM.hasValue())\n+    return;\n+  unwrap(M)->setCodeModel(*CM);\n+}\n+\n // Here you'll find an implementation of ThinLTO as used by the Rust compiler\n // right now. This ThinLTO support is only enabled on \"recent ish\" versions of\n // LLVM, and otherwise it's just blanket rejected from other compilers."}, {"sha": "2328f5feb4e1ca6d12df76f3e2489cef3883413e", "filename": "src/test/codegen/codemodels.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84c08f82b46986fcd5cbd1a637582bd1325fa970/src%2Ftest%2Fcodegen%2Fcodemodels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c08f82b46986fcd5cbd1a637582bd1325fa970/src%2Ftest%2Fcodegen%2Fcodemodels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcodemodels.rs?ref=84c08f82b46986fcd5cbd1a637582bd1325fa970", "patch": "@@ -0,0 +1,20 @@\n+// only-x86_64\n+\n+// revisions: NOMODEL MODEL-SMALL MODEL-KERNEL MODEL-MEDIUM MODEL-LARGE\n+//[NOMODEL] compile-flags:\n+//[MODEL-SMALL] compile-flags: -C code-model=small\n+//[MODEL-KERNEL] compile-flags: -C code-model=kernel\n+//[MODEL-MEDIUM] compile-flags: -C code-model=medium\n+//[MODEL-LARGE] compile-flags: -C code-model=large\n+\n+#![crate_type = \"lib\"]\n+\n+// MODEL-SMALL: !llvm.module.flags = !{{{.*}}}\n+// MODEL-SMALL: !{{[0-9]+}} = !{i32 1, !\"Code Model\", i32 1}\n+// MODEL-KERNEL: !llvm.module.flags = !{{{.*}}}\n+// MODEL-KERNEL: !{{[0-9]+}} = !{i32 1, !\"Code Model\", i32 2}\n+// MODEL-MEDIUM: !llvm.module.flags = !{{{.*}}}\n+// MODEL-MEDIUM: !{{[0-9]+}} = !{i32 1, !\"Code Model\", i32 3}\n+// MODEL-LARGE: !llvm.module.flags = !{{{.*}}}\n+// MODEL-LARGE: !{{[0-9]+}} = !{i32 1, !\"Code Model\", i32 4}\n+// NOMODEL-NOT: Code Model"}]}