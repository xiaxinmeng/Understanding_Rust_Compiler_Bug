{"sha": "df74b70b9ed90f76afecbcb67d061db28bfa8002", "node_id": "C_kwDOAAsO6NoAKGRmNzRiNzBiOWVkOTBmNzZhZmVjYmNiNjdkMDYxZGIyOGJmYTgwMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T11:32:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T11:32:02Z"}, "message": "Rollup merge of #108964 - majaha:ptr_metadata_doc, r=workingjubilee\n\nFix the docs for pointer method with_metadata_of\n\nThe name of the argument to `{*const T, *mut T}::with_metadata_of` was changed from `val` to `meta` recently, but the docs weren't updated to match.\n\nRelevant pull request: #103701", "tree": {"sha": "eea9c25cc43926630383300103c3f40016899945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea9c25cc43926630383300103c3f40016899945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df74b70b9ed90f76afecbcb67d061db28bfa8002", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCxUyCRBK7hj4Ov3rIwAA8ScIAJ1+3smSHmJcXR/w6NL3MTyT\nHbrrWinNWPJOv2zS+sTHVTu55zhCEQbhpCL/Z5EaaMwx+lp8+DEtp+Vt7+A7+Tba\nlNyYeu+oh4qAdCxR5uFUE6kCSMhJ7353Jqm+DSrxndyG21d1nBNom3ri2w50mwA7\naXx/ZJNvMUlZ7hfFHvC5pRf88on4xNWHQzxuWJHi4sX7G/EEde2CZ/U2JKfy1Xds\nikWLV8feFGcPoHInqQxtMfiS+x8Qhes6eKhoTb+Aqs20cvRZaYgJPGpomRdu7QTf\nsa6ZVfNZ4+aC02R04SJrRU7crgZrc8+J2m0QxQ7bTqw5JlMUhMt6iDssfY2yPC0=\n=OXnu\n-----END PGP SIGNATURE-----\n", "payload": "tree eea9c25cc43926630383300103c3f40016899945\nparent 7918df5f57cf455041620ecbc9e100b6bb84b0d7\nparent ccb552e4f5bb11c7b79d1b00002d3cadbb9bc29b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678447922 +0100\ncommitter GitHub <noreply@github.com> 1678447922 +0100\n\nRollup merge of #108964 - majaha:ptr_metadata_doc, r=workingjubilee\n\nFix the docs for pointer method with_metadata_of\n\nThe name of the argument to `{*const T, *mut T}::with_metadata_of` was changed from `val` to `meta` recently, but the docs weren't updated to match.\n\nRelevant pull request: #103701\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df74b70b9ed90f76afecbcb67d061db28bfa8002", "html_url": "https://github.com/rust-lang/rust/commit/df74b70b9ed90f76afecbcb67d061db28bfa8002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df74b70b9ed90f76afecbcb67d061db28bfa8002/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7918df5f57cf455041620ecbc9e100b6bb84b0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7918df5f57cf455041620ecbc9e100b6bb84b0d7", "html_url": "https://github.com/rust-lang/rust/commit/7918df5f57cf455041620ecbc9e100b6bb84b0d7"}, {"sha": "ccb552e4f5bb11c7b79d1b00002d3cadbb9bc29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb552e4f5bb11c7b79d1b00002d3cadbb9bc29b", "html_url": "https://github.com/rust-lang/rust/commit/ccb552e4f5bb11c7b79d1b00002d3cadbb9bc29b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "839afc57f85d2c66392ff2dc6805cfabb2bb0cb1", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df74b70b9ed90f76afecbcb67d061db28bfa8002/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df74b70b9ed90f76afecbcb67d061db28bfa8002/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=df74b70b9ed90f76afecbcb67d061db28bfa8002", "patch": "@@ -61,14 +61,14 @@ impl<T: ?Sized> *const T {\n \n     /// Use the pointer value in a new pointer of another type.\n     ///\n-    /// In case `val` is a (fat) pointer to an unsized type, this operation\n+    /// In case `meta` is a (fat) pointer to an unsized type, this operation\n     /// will ignore the pointer part, whereas for (thin) pointers to sized\n     /// types, this has the same effect as a simple cast.\n     ///\n     /// The resulting pointer will have provenance of `self`, i.e., for a fat\n     /// pointer, this operation is semantically the same as creating a new\n     /// fat pointer with the data pointer value of `self` but the metadata of\n-    /// `val`.\n+    /// `meta`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "ece5244e9a99ce21eac96a804fa141cade8eb55b", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df74b70b9ed90f76afecbcb67d061db28bfa8002/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df74b70b9ed90f76afecbcb67d061db28bfa8002/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=df74b70b9ed90f76afecbcb67d061db28bfa8002", "patch": "@@ -60,14 +60,14 @@ impl<T: ?Sized> *mut T {\n \n     /// Use the pointer value in a new pointer of another type.\n     ///\n-    /// In case `val` is a (fat) pointer to an unsized type, this operation\n+    /// In case `meta` is a (fat) pointer to an unsized type, this operation\n     /// will ignore the pointer part, whereas for (thin) pointers to sized\n     /// types, this has the same effect as a simple cast.\n     ///\n     /// The resulting pointer will have provenance of `self`, i.e., for a fat\n     /// pointer, this operation is semantically the same as creating a new\n     /// fat pointer with the data pointer value of `self` but the metadata of\n-    /// `val`.\n+    /// `meta`.\n     ///\n     /// # Examples\n     ///"}]}