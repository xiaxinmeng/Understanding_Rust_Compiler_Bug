{"sha": "b9660de664cc491b3f22a5c1dadee5a03e506b2a", "node_id": "C_kwDOAAsO6NoAKGI5NjYwZGU2NjRjYzQ5MWIzZjIyYTVjMWRhZGVlNWEwM2U1MDZiMmE", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-04T18:57:25Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-06-05T09:45:22Z"}, "message": "std: solve priority issue for Parker", "tree": {"sha": "deb7ba1aee12c0022b6907ca4954e57048f504fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb7ba1aee12c0022b6907ca4954e57048f504fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9660de664cc491b3f22a5c1dadee5a03e506b2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmKce0sACgkQcE4BSbAZ\nSzz7jw//eABAHwydq4HC/6alzYHyX0qNFMKzQZgkVeBEAkfuQYjhxoXDKAVfPgZA\nxfAunAu00OUBvvxZUFRpmZH8aIWlR2N+QWMbC/jeTXrU/tqd2woAJ9cls152qgCV\neQYjgQUaMT0vSbGs3l/fJyfqz7uuJSNwdJDqdQz/fRCNEWUioDpCGaT9rUEnNIMY\nPww1+x/wsGxtcZ4PerXN989C+p4RmuFrmVnm0eghLTLjJxECXH7ejO2XixDowMqH\npNYLl3t37zRozDtXijooyHO3vDszwAF8iaEbyefWm0jRX5BokoGzfBu8cssAK4qt\noHKFXT0dKW9Nh834c+quveWh4g+/jxQ9QFGkzv5+5WtSdt8CGfd0LYimq9depVTp\nGFW1hqjpa27xc24oiWS7SrFwxePv6XLZyTneMRrhzTFqMbpKt0fBbFKEVGnjlEau\nv0awQ8+JkuGjEJ2xo6DNnBEjLvJWD9+4onQq2lhkWWV+J1pAmssBLKWaY/ZHre5s\npATpAZue+79F/E6bE7wbt8ouuisyp9ozTl+CcdUwCg8ywjrxFXM2H7fWU46uhXYa\nRkDKjwJfvlCwminMy9gpKP5c6qywobREzAbN0QN7vwfNyBKprbqhftFVTJGe2/Ej\nRTx1G6/HDimFwSr+xkGZFYBfakbxUoyKx1UD2eLGLoLXkrRgZjo=\n=6i7L\n-----END PGP SIGNATURE-----", "payload": "tree deb7ba1aee12c0022b6907ca4954e57048f504fd\nparent 3b6ae15058dbb68710f92697265580c7e957629f\nauthor joboet <jonasboettiger@icloud.com> 1654369045 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1654422322 +0200\n\nstd: solve priority issue for Parker\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9660de664cc491b3f22a5c1dadee5a03e506b2a", "html_url": "https://github.com/rust-lang/rust/commit/b9660de664cc491b3f22a5c1dadee5a03e506b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9660de664cc491b3f22a5c1dadee5a03e506b2a/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6ae15058dbb68710f92697265580c7e957629f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6ae15058dbb68710f92697265580c7e957629f", "html_url": "https://github.com/rust-lang/rust/commit/3b6ae15058dbb68710f92697265580c7e957629f"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "8db12693ef734189c845d08dfdb0cf745d531700", "filename": "library/std/src/sys_common/thread_parker/wait_flag.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b9660de664cc491b3f22a5c1dadee5a03e506b2a/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9660de664cc491b3f22a5c1dadee5a03e506b2a/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs?ref=b9660de664cc491b3f22a5c1dadee5a03e506b2a", "patch": "@@ -21,13 +21,11 @@\n //! \"wait flag\").\n //!\n //! `unpark` changes the state to `NOTIFIED`. If the state was `PARKED`, the thread\n-//! is or will be sleeping on the wait flag, so we raise it. Only the first thread\n-//! to call `unpark` will raise the wait flag, so spurious wakeups are avoided\n-//! (this is especially important for semaphores).\n+//! is or will be sleeping on the wait flag, so we raise it.\n \n use crate::pin::Pin;\n use crate::sync::atomic::AtomicI8;\n-use crate::sync::atomic::Ordering::SeqCst;\n+use crate::sync::atomic::Ordering::{Relaxed, SeqCst};\n use crate::sys::wait_flag::WaitFlag;\n use crate::time::Duration;\n \n@@ -49,39 +47,48 @@ impl Parker {\n \n     // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n     pub unsafe fn park(self: Pin<&Self>) {\n-        // The state values are chosen so that this subtraction changes\n-        // `NOTIFIED` to `EMPTY` and `EMPTY` to `PARKED`.\n-        let state = self.state.fetch_sub(1, SeqCst);\n-        match state {\n-            EMPTY => (),\n+        match self.state.fetch_sub(1, SeqCst) {\n+            // NOTIFIED => EMPTY\n             NOTIFIED => return,\n+            // EMPTY => PARKED\n+            EMPTY => (),\n             _ => panic!(\"inconsistent park state\"),\n         }\n \n-        self.wait_flag.wait();\n+        // Avoid waking up from spurious wakeups (these are quite likely, see below).\n+        loop {\n+            self.wait_flag.wait();\n \n-        // We need to do a load here to use `Acquire` ordering.\n-        self.state.swap(EMPTY, SeqCst);\n+            match self.state.compare_exchange(NOTIFIED, EMPTY, SeqCst, Relaxed) {\n+                Ok(_) => return,\n+                Err(PARKED) => (),\n+                Err(_) => panic!(\"inconsistent park state\"),\n+            }\n+        }\n     }\n \n     // This implementation doesn't require `unsafe` and `Pin`, but other implementations do.\n     pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {\n-        let state = self.state.fetch_sub(1, SeqCst);\n-        match state {\n-            EMPTY => (),\n+        match self.state.fetch_sub(1, SeqCst) {\n             NOTIFIED => return,\n+            EMPTY => (),\n             _ => panic!(\"inconsistent park state\"),\n         }\n \n-        let wakeup = self.wait_flag.wait_timeout(dur);\n-        let state = self.state.swap(EMPTY, SeqCst);\n-        if state == NOTIFIED && !wakeup {\n-            // The token was made available after the wait timed out, but before\n-            // we reset the state, so we need to reset the wait flag to avoid\n-            // spurious wakeups. This wait has no timeout, but we know it will\n-            // return quickly, as the unparking thread will definitely raise the\n-            // flag if it has not already done so.\n-            self.wait_flag.wait();\n+        self.wait_flag.wait_timeout(dur);\n+\n+        // Either a wakeup or a timeout occurred. Wakeups may be spurious, as there can be\n+        // a race condition when `unpark` is performed between receiving the timeout and\n+        // resetting the state, resulting in the eventflag being set unnecessarily. `park`\n+        // is protected against this by looping until the token is actually given, but\n+        // here we cannot easily tell.\n+\n+        // Use `swap` to provide acquire ordering (not strictly necessary, but all other\n+        // implementations do).\n+        match self.state.swap(EMPTY, SeqCst) {\n+            NOTIFIED => (),\n+            PARKED => (),\n+            _ => panic!(\"inconsistent park state\"),\n         }\n     }\n "}]}