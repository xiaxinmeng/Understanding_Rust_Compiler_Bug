{"sha": "8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGZiYTFiM2JiOTZiYjY0ZjEwNGQ4NTYxOGNhYjRmZTdkYzA3NDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-12T14:56:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T09:23:22Z"}, "message": "compiletest: Validate pass modes harder", "tree": {"sha": "945c520e4eb62164c52ee7bf0fbcd7aab21f9483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/945c520e4eb62164c52ee7bf0fbcd7aab21f9483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "html_url": "https://github.com/rust-lang/rust/commit/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6203f68735a1b7511b85560b64995a14f1b40765", "url": "https://api.github.com/repos/rust-lang/rust/commits/6203f68735a1b7511b85560b64995a14f1b40765", "html_url": "https://github.com/rust-lang/rust/commit/6203f68735a1b7511b85560b64995a14f1b40765"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "afc086213403c89c0506855c4fb137db735c93b1", "filename": "src/test/incremental/issue-59523-on-implemented-is-not-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -2,7 +2,7 @@\n // rustc_on_unimplemented, but with this bug we are seeing it fire (on\n // subsequent runs) if incremental compilation is enabled.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-pass\n \n #![feature(on_unimplemented)]"}, {"sha": "37bd8d0641fb9fea3b449c7b554653aebfd6af55", "filename": "src/test/incremental/issue-59524-layout-scalar-valid-range-is-not-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-59524-layout-scalar-valid-range-is-not-unused.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -3,7 +3,7 @@\n // seeing it fire (on subsequent runs) if incremental compilation is\n // enabled.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-pass\n \n #![feature(rustc_attrs)]"}, {"sha": "796729ac4cc28fb1a04157739e3cd2ed35a44de0", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-box-dyn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// error-pattern:returned Box<dyn Error> from main()\n // failure-status: 1\n \n use std::error::Error;"}, {"sha": "2f3a73a30ad95a7baacb587b3269fe600dcea3bf", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-result-box-error_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-result-box-error_err.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,4 +1,4 @@\n-// compile-pass\n+// error-pattern:returned Box<Error> from main()\n // failure-status: 1\n \n use std::io::{Error, ErrorKind};"}, {"sha": "0e0e003dcf476641cc7949f03b5181490556a31d", "filename": "src/test/ui/consts/const-eval/const_transmute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_transmute.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n // run-pass\n \n #![feature(const_fn_union)]"}, {"sha": "e09258f11206e60de1a232d1c7621ca5ccb9b217", "filename": "src/test/ui/consts/const-eval/enum_discr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fenum_discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fenum_discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fenum_discr.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n // run-pass\n \n enum Foo {"}, {"sha": "baa161af76abc80ffc8804f38a168612dd1b2ddb", "filename": "src/test/ui/expanded-cfg.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpanded-cfg.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,5 +1,4 @@\n-// skip-codegen\n-// compile-pass\n+// check-pass\n \n macro_rules! mac {\n     {} => {\n@@ -19,5 +18,4 @@ macro_rules! mac {\n \n mac! {}\n \n-\n fn main() {}"}, {"sha": "717f15b76ac583dd9fe40a0f11dab8fcb288d223", "filename": "src/test/ui/issues/issue-22603.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,5 +1,5 @@\n-// skip-codegen\n-// compile-pass\n+// check-pass\n+\n #![feature(unboxed_closures, fn_traits)]\n struct Foo;\n "}, {"sha": "caff507c918339ea873d84cdcba1d9f4bb3c4469", "filename": "src/test/ui/issues/issue-37515.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,10 +1,8 @@\n-// skip-codegen\n-// compile-pass\n+// check-pass\n+\n #![warn(unused)]\n \n type Z = dyn for<'x> Send;\n //~^ WARN type alias is never used\n \n-\n-fn main() {\n-}\n+fn main() {}"}, {"sha": "92b25cbf584109bb4092956aeb5bae547d6098d1", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -1,20 +1,16 @@\n-// compile-pass\n-\n-#![deny(single_use_lifetimes)]\n-#![allow(dead_code)]\n-#![allow(unused_variables)]\n-\n // Test that we DO NOT warn when lifetime name is used only\n // once in a fn return type -- using `'_` is not legal there,\n // as it must refer back to an argument.\n //\n // (Normally, using `'static` would be preferred, but there are\n // times when that is not what you want.)\n-//\n-// run-pass\n+\n+// compile-pass\n+\n+#![deny(single_use_lifetimes)]\n \n fn b<'a>() -> &'a u32 { // OK: used only in return type\n     &22\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "1f52421ecbc15457fe7e0358cfcfb0be901cb67b", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "patch": "@@ -526,14 +526,41 @@ impl TestProps {\n                 self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n             }\n \n-            if config.parse_name_directive(ln, \"check-pass\") ||\n-               config.parse_name_directive(ln, \"skip-codegen\") {\n-                self.pass_mode = Some(PassMode::Check);\n-            } else if config.parse_name_directive(ln, \"build-pass\") ||\n-                      config.parse_name_directive(ln, \"compile-pass\") {\n-                self.pass_mode = Some(PassMode::Build);\n+            let check_no_run = |s| {\n+                if config.mode != Mode::Ui && config.mode != Mode::Incremental {\n+                    panic!(\"`{}` header is only supported in UI and incremental tests\", s);\n+                }\n+                if config.mode == Mode::Incremental &&\n+                   !cfg.map_or(false, |r| r.starts_with(\"cfail\")) &&\n+                   !self.revisions.iter().all(|r| r.starts_with(\"cfail\")) {\n+                    panic!(\"`{}` header is only supported in `cfail` incremental tests\", s);\n+                }\n+            };\n+            let pass_mode = if config.parse_name_directive(ln, \"check-pass\") {\n+                check_no_run(\"check-pass\");\n+                Some(PassMode::Check)\n+            } else if config.parse_name_directive(ln, \"skip-codegen\") {\n+                check_no_run(\"skip-codegen\");\n+                Some(PassMode::Check)\n+            } else if config.parse_name_directive(ln, \"build-pass\") {\n+                check_no_run(\"build-pass\");\n+                Some(PassMode::Build)\n+            } else if config.parse_name_directive(ln, \"compile-pass\") {\n+                check_no_run(\"compile-pass\");\n+                Some(PassMode::Build)\n             } else if config.parse_name_directive(ln, \"run-pass\") {\n-                self.pass_mode = Some(PassMode::Run);\n+                if config.mode != Mode::Ui && config.mode != Mode::RunPass /* compatibility */ {\n+                    panic!(\"`run-pass` header is only supported in UI tests\")\n+                }\n+                Some(PassMode::Run)\n+            } else {\n+                None\n+            };\n+            match (self.pass_mode, pass_mode) {\n+                (None, Some(_)) => self.pass_mode = pass_mode,\n+                (Some(_), Some(pm)) if pm == PassMode::Check => self.pass_mode = pass_mode,\n+                (Some(_), Some(_)) => panic!(\"multiple `*-pass` headers in a single test\"),\n+                (_, None) => {}\n             }\n \n             if !self.disable_ui_testing_normalization {"}]}