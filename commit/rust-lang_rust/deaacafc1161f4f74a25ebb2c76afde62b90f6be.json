{"sha": "deaacafc1161f4f74a25ebb2c76afde62b90f6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYWFjYWZjMTE2MWY0Zjc0YTI1ZWJiMmM3NmFmZGU2MmI5MGY2YmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:55:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:55:40Z"}, "message": "Rollup merge of #61121 - RalfJung:miri-value-printing, r=oli-obk\n\nimprove debug-printing of scalars\n\n* Prettier printing for `Pointer` and `Bits`.\n* Don't print the `ScalarMaybeUndef(...)` around `Scalar`.\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Ptr(Pointer { alloc_id: AllocId(3401), offset: Size { raw: 4 }, tag: Tagged(7723) }))))`\nAfter: `Immediate(Scalar(AllocId(3401).0x4[<7723>]))`\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Bits { size: 8, bits: 10 })))`\nAfter: `Immediate(Scalar(0x000000000000000A))`\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Bits { size: 1, bits: 1 })))`\nAfter: `Immediate(Scalar(0x01))`\n\nr? @oli-obk", "tree": {"sha": "e76f2c0eec43febc9e99948d52d615d6112b159b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76f2c0eec43febc9e99948d52d615d6112b159b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deaacafc1161f4f74a25ebb2c76afde62b90f6be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K6sCRBK7hj4Ov3rIwAAdHIIAFSLDJDETLO4CB2OlmeAahkq\nBE3sEGX+3lhNfXaEhwwbCHKR6NaGeGSkwsu2pz+gQRv1eAPPShFPtmV7P9CZlJUM\n09hg/48Y3J3yQ9dwnDlecV9M8SE5WrmIaxFOct5Joui21PuFqQzOzEyonOJFeboE\nA+n/pOewdb1zpTmBFDJt7dyMy6LvI7QPI1kmLlczHRjgxeWsP25UCd8sGgXgrwLU\n+VU49rTP/GauA/8cnttBQUTlWba0FQehkrzUc+foR6jxinU4O6vi8ynKkfaSi8Y/\n4FgljTc3gNV9ii7j9SqdJsgOC3zEpsGf/f7xJXi3mgKUW/ES+W7AdHWIzd8NuR0=\n=AGW4\n-----END PGP SIGNATURE-----\n", "payload": "tree e76f2c0eec43febc9e99948d52d615d6112b159b\nparent 57139e2055b0449b3ae982f1379f1f4217c4f98d\nparent a90cdcca7eb189901a666cbee194f08719e10b94\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558752940 +0200\ncommitter GitHub <noreply@github.com> 1558752940 +0200\n\nRollup merge of #61121 - RalfJung:miri-value-printing, r=oli-obk\n\nimprove debug-printing of scalars\n\n* Prettier printing for `Pointer` and `Bits`.\n* Don't print the `ScalarMaybeUndef(...)` around `Scalar`.\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Ptr(Pointer { alloc_id: AllocId(3401), offset: Size { raw: 4 }, tag: Tagged(7723) }))))`\nAfter: `Immediate(Scalar(AllocId(3401).0x4[<7723>]))`\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Bits { size: 8, bits: 10 })))`\nAfter: `Immediate(Scalar(0x000000000000000A))`\n\nBefore: `Immediate(ScalarMaybeUndef(Scalar(Bits { size: 1, bits: 1 })))`\nAfter: `Immediate(Scalar(0x01))`\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deaacafc1161f4f74a25ebb2c76afde62b90f6be", "html_url": "https://github.com/rust-lang/rust/commit/deaacafc1161f4f74a25ebb2c76afde62b90f6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deaacafc1161f4f74a25ebb2c76afde62b90f6be/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57139e2055b0449b3ae982f1379f1f4217c4f98d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57139e2055b0449b3ae982f1379f1f4217c4f98d", "html_url": "https://github.com/rust-lang/rust/commit/57139e2055b0449b3ae982f1379f1f4217c4f98d"}, {"sha": "a90cdcca7eb189901a666cbee194f08719e10b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a90cdcca7eb189901a666cbee194f08719e10b94", "html_url": "https://github.com/rust-lang/rust/commit/a90cdcca7eb189901a666cbee194f08719e10b94"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "356c4cc16c23c68b1cc2fd72afb7cf4640a97f44", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/deaacafc1161f4f74a25ebb2c76afde62b90f6be/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deaacafc1161f4f74a25ebb2c76afde62b90f6be/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=deaacafc1161f4f74a25ebb2c76afde62b90f6be", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use crate::mir;\n use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n@@ -70,7 +72,7 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n ///\n /// Pointer is also generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub struct Pointer<Tag=(),Id=AllocId> {\n     pub alloc_id: Id,\n@@ -80,6 +82,18 @@ pub struct Pointer<Tag=(),Id=AllocId> {\n \n static_assert_size!(Pointer, 16);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+    default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+    }\n+}\n+// Specialization for no tag\n+impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}\", self.alloc_id, self.offset.bytes())\n+    }\n+}\n+\n /// Produces a `Pointer` which points to the beginning of the Allocation\n impl From<AllocId> for Pointer {\n     #[inline(always)]"}, {"sha": "6b6f7f7a30740da24cf03fa4dcdb4163af1cdd35", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/deaacafc1161f4f74a25ebb2c76afde62b90f6be/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deaacafc1161f4f74a25ebb2c76afde62b90f6be/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=deaacafc1161f4f74a25ebb2c76afde62b90f6be", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n@@ -113,6 +113,27 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Scalar, 24);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Scalar::Ptr(ptr) =>\n+                write!(f, \"{:?}\", ptr),\n+            &Scalar::Bits { bits, size } => {\n+                if size == 0 {\n+                    assert_eq!(bits, 0, \"ZST value must be 0\");\n+                    write!(f, \"<ZST>\")\n+                } else {\n+                    assert_eq!(truncate(bits, Size::from_bytes(size as u64)), bits,\n+                            \"Scalar value {:#x} exceeds size of {} bytes\", bits, size);\n+                    // Format as hex number wide enough to fit any value of the given `size`.\n+                    // So bits=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n+                    write!(f, \"0x{:>0width$x}\", bits, width=(size*2) as usize)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n@@ -412,7 +433,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,\n@@ -425,6 +446,15 @@ impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n     }\n }\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"Undef\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{:?}\", s),\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}]}