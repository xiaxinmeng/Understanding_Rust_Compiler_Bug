{"sha": "125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTc0NGMwNTdhOTUzYjJmMWIwMzA0MmU5YTZlYzQ5ZjFlYjBhMWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-14T13:23:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-14T13:23:27Z"}, "message": "Rename hypothetical -> speculative", "tree": {"sha": "39cadc001951e59dca1ec17697a8507e438d4791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cadc001951e59dca1ec17697a8507e438d4791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "html_url": "https://github.com/rust-lang/rust/commit/125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "html_url": "https://github.com/rust-lang/rust/commit/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "3953017c3bec9c0f0fb419c6230691ac98750b83", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "patch": "@@ -112,14 +112,13 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn expand(&self, macro_call: &ast::MacroCall) -> Option<SyntaxNode> {\n         self.imp.expand(macro_call)\n     }\n-\n-    pub fn expand_hypothetical(\n+    pub fn speculative_expand(\n         &self,\n         actual_macro_call: &ast::MacroCall,\n         hypothetical_args: &ast::TokenTree,\n         token_to_map: SyntaxToken,\n     ) -> Option<(SyntaxNode, SyntaxToken)> {\n-        self.imp.expand_hypothetical(actual_macro_call, hypothetical_args, token_to_map)\n+        self.imp.speculative_expand(actual_macro_call, hypothetical_args, token_to_map)\n     }\n \n     pub fn descend_into_macros(&self, token: SyntaxToken) -> SyntaxToken {\n@@ -311,7 +310,7 @@ impl<'db> SemanticsImpl<'db> {\n         Some(node)\n     }\n \n-    fn expand_hypothetical(\n+    fn speculative_expand(\n         &self,\n         actual_macro_call: &ast::MacroCall,\n         hypothetical_args: &ast::TokenTree,\n@@ -756,7 +755,7 @@ impl<'a> SemanticsScope<'a> {\n \n     /// Resolve a path as-if it was written at the given scope. This is\n     /// necessary a heuristic, as it doesn't take hygiene into account.\n-    pub fn resolve_hypothetical(&self, path: &ast::Path) -> Option<PathResolution> {\n+    pub fn speculative_resolve(&self, path: &ast::Path) -> Option<PathResolution> {\n         let hygiene = Hygiene::new(self.db.upcast(), self.file_id);\n         let path = Path::from_src(path.clone(), &hygiene)?;\n         self.resolve_hir_path(&path)"}, {"sha": "85456a66f5e1afbe07b75eb27a1bfd604f395af9", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "patch": "@@ -185,7 +185,7 @@ impl<'a> CompletionContext<'a> {\n             };\n             if let (Some(actual_expansion), Some(hypothetical_expansion)) = (\n                 ctx.sema.expand(&actual_macro_call),\n-                ctx.sema.expand_hypothetical(\n+                ctx.sema.speculative_expand(\n                     &actual_macro_call,\n                     &hypothetical_args,\n                     fake_ident_token,"}, {"sha": "b932132d5b948ddd17a161ed0cca70ff933830ba", "filename": "crates/ssr/src/resolving.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/125744c057a953b2f1b03042e9a6ec49f1eb0a1e/crates%2Fssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fresolving.rs?ref=125744c057a953b2f1b03042e9a6ec49f1eb0a1e", "patch": "@@ -212,13 +212,13 @@ impl<'db> ResolutionScope<'db> {\n         // First try resolving the whole path. This will work for things like\n         // `std::collections::HashMap`, but will fail for things like\n         // `std::collections::HashMap::new`.\n-        if let Some(resolution) = self.scope.resolve_hypothetical(&path) {\n+        if let Some(resolution) = self.scope.speculative_resolve(&path) {\n             return Some(resolution);\n         }\n         // Resolution failed, try resolving the qualifier (e.g. `std::collections::HashMap` and if\n         // that succeeds, then iterate through the candidates on the resolved type with the provided\n         // name.\n-        let resolved_qualifier = self.scope.resolve_hypothetical(&path.qualifier()?)?;\n+        let resolved_qualifier = self.scope.speculative_resolve(&path.qualifier()?)?;\n         if let hir::PathResolution::Def(hir::ModuleDef::Adt(adt)) = resolved_qualifier {\n             let name = path.segment()?.name_ref()?;\n             adt.ty(self.scope.db).iterate_path_candidates("}]}