{"sha": "3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTYxOTIyZDI1MDBlMTU2ZGY3Zjc2ZmZlY2NmMDIyY2RlYjBmOWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T15:40:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "this might be unqualified, but at least it's now quantified", "tree": {"sha": "6f4c7a4823a0b5f107ae380e99a7adced8720bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f4c7a4823a0b5f107ae380e99a7adced8720bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "html_url": "https://github.com/rust-lang/rust/commit/3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562d4784215cb477c7fcec7c2c34df898d59c674", "url": "https://api.github.com/repos/rust-lang/rust/commits/562d4784215cb477c7fcec7c2c34df898d59c674", "html_url": "https://github.com/rust-lang/rust/commit/562d4784215cb477c7fcec7c2c34df898d59c674"}], "stats": {"total": 170, "additions": 87, "deletions": 83}, "files": [{"sha": "cb2f2ca0e9287a8c05841bb74cc792faf363bc0e", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -138,7 +138,7 @@ impl Elaborator<'tcx> {\n     fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {\n         let tcx = self.visited.tcx;\n \n-        match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+        match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::ForAll(_) => {\n                 bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n             }"}, {"sha": "00d532c7ba0babd3c5c5bf9b8ee419f3e96ba153", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1210,7 +1210,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n             for &(predicate, span) in predicates.predicates {\n                 // We don't actually look inside of the predicate,\n                 // so it is safe to skip this binder here.\n-                let predicate_kind_name = match predicate.ignore_qualifiers().skip_binder().kind() {\n+                let predicate_kind_name = match predicate.ignore_quantifiers().skip_binder().kind() {\n                     Trait(..) => \"Trait\",\n                     TypeOutlives(..) |\n                     RegionOutlives(..) => \"Lifetime\",\n@@ -1500,7 +1500,7 @@ impl ExplicitOutlivesRequirements {\n     ) -> Vec<ty::Region<'tcx>> {\n         inferred_outlives\n             .iter()\n-            .filter_map(|(pred, _)| match pred.ignore_qualifiers().skip_binder().kind() {\n+            .filter_map(|(pred, _)| match pred.ignore_quantifiers().skip_binder().kind() {\n                 &ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => match a {\n                     ty::ReEarlyBound(ebr) if ebr.index == index => Some(b),\n                     _ => None,\n@@ -1516,7 +1516,7 @@ impl ExplicitOutlivesRequirements {\n     ) -> Vec<ty::Region<'tcx>> {\n         inferred_outlives\n             .iter()\n-            .filter_map(|(pred, _)| match pred.ignore_qualifiers().skip_binder().kind() {\n+            .filter_map(|(pred, _)| match pred.ignore_quantifiers().skip_binder().kind() {\n                 &ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(a, b)) => {\n                     a.is_param(index).then_some(b)\n                 }"}, {"sha": "8f21cb51695a2f7de451af6e5204ca7e8874566b", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n                         // We only look at the `DefId`, so it is safe to skip the binder here.\n                         if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) =\n-                            predicate.ignore_qualifiers().skip_binder().kind()\n+                            predicate.ignore_quantifiers().skip_binder().kind()\n                         {\n                             let def_id = poly_trait_predicate.trait_ref.def_id;\n                             let descr_pre ="}, {"sha": "dd74fbc945748cc67178f4c0289ff12f9640baa6", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1050,7 +1050,7 @@ impl<'tcx> Predicate<'tcx> {\n     }\n \n     /// Skips `PredicateKind::ForAll`.\n-    pub fn ignore_qualifiers(self) -> Binder<Predicate<'tcx>> {\n+    pub fn ignore_quantifiers(self) -> Binder<Predicate<'tcx>> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder,\n             ty::PredicateKind::Projection(..)\n@@ -1073,7 +1073,10 @@ impl<'tcx> Predicate<'tcx> {\n     ///\n     /// Do not use this method if you may end up just skipping the binder, as this\n     /// would leave the unbound variables at an incorrect binding level.\n-    pub fn ignore_qualifiers_with_unbound_vars(self, tcx: TyCtxt<'tcx>) -> Binder<Predicate<'tcx>> {\n+    pub fn ignore_quantifiers_with_unbound_vars(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Binder<Predicate<'tcx>> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder,\n             ty::PredicateKind::Projection(..)\n@@ -1090,7 +1093,7 @@ impl<'tcx> Predicate<'tcx> {\n     }\n \n     /// Wraps `self` with the given qualifier if this predicate has any unbound variables.\n-    pub fn potentially_qualified(\n+    pub fn potentially_quantified(\n         self,\n         tcx: TyCtxt<'tcx>,\n         qualifier: impl FnOnce(Binder<Predicate<'tcx>>) -> PredicateKind<'tcx>,\n@@ -1249,9 +1252,9 @@ impl<'tcx> Predicate<'tcx> {\n         // from the substitution and the value being substituted into, and\n         // this trick achieves that).\n         let substs = trait_ref.skip_binder().substs;\n-        let pred = *self.ignore_qualifiers().skip_binder();\n+        let pred = *self.ignore_quantifiers().skip_binder();\n         let new = pred.subst(tcx, substs);\n-        if new != pred { new.potentially_qualified(tcx, PredicateKind::ForAll) } else { self }\n+        if new != pred { new.potentially_quantified(tcx, PredicateKind::ForAll) } else { self }\n     }\n }\n \n@@ -1451,7 +1454,7 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n \n impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_ref(self) -> Option<PolyTraitRef<'tcx>> {\n-        self.ignore_qualifiers()\n+        self.ignore_quantifiers()\n             .map_bound(|pred| match pred.kind() {\n                 &PredicateKind::Trait(ref t, _) => Some(t.trait_ref),\n                 PredicateKind::Projection(..)\n@@ -1469,7 +1472,7 @@ impl<'tcx> Predicate<'tcx> {\n     }\n \n     pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {\n-        self.ignore_qualifiers()\n+        self.ignore_quantifiers()\n             .map_bound(|pred| match pred.kind() {\n                 &PredicateKind::TypeOutlives(data) => Some(data),\n                 PredicateKind::Trait(..)"}, {"sha": "d22a0e8c38e040809e695483ace3b01ae6023f50", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -577,7 +577,7 @@ pub trait PrettyPrinter<'tcx>:\n                         //\n                         // FIXME(lcnr): Find out why exactly this is the case :)\n                         if let ty::PredicateKind::Trait(pred, _) = predicate\n-                            .ignore_qualifiers_with_unbound_vars(self.tcx())\n+                            .ignore_quantifiers_with_unbound_vars(self.tcx())\n                             .skip_binder()\n                             .kind()\n                         {"}, {"sha": "ffeec8758c46f0a9244e0266c2be563aff384b47", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -590,7 +590,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let mut found = false;\n                     for predicate in bounds.predicates {\n                         if let ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(_, r)) =\n-                            predicate.ignore_qualifiers().skip_binder().kind()\n+                            predicate.ignore_quantifiers().skip_binder().kind()\n                         {\n                             if let ty::RegionKind::ReStatic = r {\n                                 found = true;"}, {"sha": "69e8c6b5d2acbe9ac957c4d766b550387ab4a2cd", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -24,7 +24,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     loop {\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n-            match predicate.ignore_qualifiers().skip_binder().kind() {\n+            match predicate.ignore_quantifiers().skip_binder().kind() {\n                 ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", predicate),\n                 ty::PredicateKind::RegionOutlives(_)\n                 | ty::PredicateKind::TypeOutlives(_)"}, {"sha": "1067ca20a174fd84f3e5b193b7b2409337b8af26", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1155,7 +1155,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n \n         for predicate in &bounds.predicates {\n             if let ty::PredicateKind::Projection(projection) =\n-                predicate.ignore_qualifiers().skip_binder().kind()\n+                predicate.ignore_quantifiers().skip_binder().kind()\n             {\n                 if projection.ty.references_error() {\n                     // No point on adding these obligations since there's a type error involved.\n@@ -1254,7 +1254,7 @@ crate fn required_region_bounds(\n     traits::elaborate_predicates(tcx, predicates)\n         .filter_map(|obligation| {\n             debug!(\"required_region_bounds(obligation={:?})\", obligation);\n-            match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+            match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                 ty::PredicateKind::Projection(..)\n                 | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::Subtype(..)"}, {"sha": "b5bea9724283dcadaff1e42a56f8232fd0f1c71c", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -418,8 +418,8 @@ impl AutoTraitFinder<'tcx> {\n                 ty::PredicateKind::Trait(new_trait, _),\n                 ty::PredicateKind::Trait(old_trait, _),\n             ) = (\n-                new_pred.ignore_qualifiers().skip_binder().kind(),\n-                old_pred.ignore_qualifiers().skip_binder().kind(),\n+                new_pred.ignore_quantifiers().skip_binder().kind(),\n+                old_pred.ignore_quantifiers().skip_binder().kind(),\n             ) {\n                 if new_trait.def_id() == old_trait.def_id() {\n                     let new_substs = new_trait.trait_ref.substs;\n@@ -639,7 +639,7 @@ impl AutoTraitFinder<'tcx> {\n             // We check this by calling is_of_param on the relevant types\n             // from the various possible predicates\n \n-            match predicate.ignore_qualifiers().skip_binder().kind() {\n+            match predicate.ignore_quantifiers().skip_binder().kind() {\n                 &ty::PredicateKind::Trait(p, _) => {\n                     if self.is_param_no_infer(p.trait_ref.substs)\n                         && !only_projections"}, {"sha": "8af4e12bd2b0f1f574708fc2f132b39ea51f067c", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => {\n                         bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n                     }\n@@ -1091,8 +1091,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         // FIXME: It should be possible to deal with `ForAll` in a cleaner way.\n         let (cond, error) = match (\n-            cond.ignore_qualifiers().skip_binder().kind(),\n-            error.ignore_qualifiers().skip_binder().kind(),\n+            cond.ignore_quantifiers().skip_binder().kind(),\n+            error.ignore_quantifiers().skip_binder().kind(),\n         ) {\n             (ty::PredicateKind::Trait(..), &ty::PredicateKind::Trait(error, _)) => {\n                 (cond, ty::Binder::bind(error))\n@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         for obligation in super::elaborate_predicates(self.tcx, std::iter::once(cond)) {\n             if let &ty::PredicateKind::Trait(implication, _) =\n-                obligation.predicate.ignore_qualifiers().skip_binder().kind()\n+                obligation.predicate.ignore_quantifiers().skip_binder().kind()\n             {\n                 let error = error.to_poly_trait_ref();\n                 let implication = ty::Binder::bind(implication).to_poly_trait_ref();\n@@ -1187,7 +1187,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // this can fail if the problem was higher-ranked, in which\n             // cause I have no idea for a good error message.\n             if let &ty::PredicateKind::Projection(data) =\n-                predicate.ignore_qualifiers().skip_binder().kind()\n+                predicate.ignore_quantifiers().skip_binder().kind()\n             {\n                 let mut selcx = SelectionContext::new(self);\n                 let (data, _) = self.replace_bound_vars_with_fresh_vars(\n@@ -1480,7 +1480,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        let mut err = match predicate.ignore_qualifiers().skip_binder().kind() {\n+        let mut err = match predicate.ignore_quantifiers().skip_binder().kind() {\n             &ty::PredicateKind::Trait(data, _) => {\n                 let trait_ref = ty::Binder::bind(data.trait_ref);\n                 let self_ty = trait_ref.skip_binder().self_ty();\n@@ -1734,7 +1734,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n         let (pred, item_def_id, span) = match (\n-            obligation.predicate.ignore_qualifiers().skip_binder().kind(),\n+            obligation.predicate.ignore_quantifiers().skip_binder().kind(),\n             obligation.cause.code.peel_derives(),\n         ) {\n             ("}, {"sha": "9180325fb74f69409b7ea11fa454aa69229bbccf", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1300,7 +1300,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // bound was introduced. At least one generator should be present for this diagnostic to be\n         // modified.\n         let (mut trait_ref, mut target_ty) =\n-            match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+            match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                 ty::PredicateKind::Trait(p, _) => (Some(p.trait_ref), Some(p.self_ty())),\n                 _ => (None, None),\n             };"}, {"sha": "bd0ba5570c7bb4f688bd5dd85d39d2d621a1e5b1", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -328,7 +328,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // This works fairly well because trait matching  does not actually care about param-env\n     // TypeOutlives predicates - these are normally used by regionck.\n     let outlives_predicates: Vec<_> = predicates\n-        .drain_filter(|predicate| match predicate.ignore_qualifiers().skip_binder().kind() {\n+        .drain_filter(|predicate| match predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::TypeOutlives(..) => true,\n             _ => false,\n         })"}, {"sha": "8da5e7318c002268baeacfa72164377c49bf578b", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -245,7 +245,7 @@ fn predicates_reference_self(\n         .iter()\n         .map(|(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n         .filter_map(|(predicate, &sp)| {\n-            match predicate.ignore_qualifiers().skip_binder().kind() {\n+            match predicate.ignore_quantifiers().skip_binder().kind() {\n                 ty::PredicateKind::Trait(ref data, _) => {\n                     // In the case of a trait predicate, we can skip the \"self\" type.\n                     if data.trait_ref.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n@@ -299,7 +299,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let predicates = tcx.predicates_of(def_id);\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n     elaborate_predicates(tcx, predicates.into_iter()).any(|obligation| {\n-        match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+        match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::Trait(ref trait_pred, _) => {\n                 trait_pred.def_id() == sized_def_id && trait_pred.self_ty().is_param(0)\n             }"}, {"sha": "c12f9eb112f9d39f26054bf114015c3cd5a7a709", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -665,7 +665,7 @@ fn prune_cache_value_obligations<'a, 'tcx>(\n         .obligations\n         .iter()\n         .filter(|obligation| {\n-            match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+            match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                 // We found a `T: Foo<X = U>` predicate, let's check\n                 // if `U` references any unresolved type\n                 // variables. In principle, we only care if this\n@@ -934,7 +934,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     for predicate in env_predicates {\n         debug!(\"assemble_candidates_from_predicates: predicate={:?}\", predicate);\n         if let &ty::PredicateKind::Projection(data) =\n-            predicate.ignore_qualifiers().skip_binder().kind()\n+            predicate.ignore_quantifiers().skip_binder().kind()\n         {\n             let data = ty::Binder::bind(data);\n             let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;\n@@ -1228,7 +1228,7 @@ fn confirm_object_candidate<'cx, 'tcx>(\n         // item with the correct name\n \n         let env_predicates = env_predicates.filter_map(|o| {\n-            match o.predicate.ignore_qualifiers().skip_binder().kind() {\n+            match o.predicate.ignore_quantifiers().skip_binder().kind() {\n                 &ty::PredicateKind::Projection(data)\n                     if data.projection_ty.item_def_id == obligation.predicate.item_def_id =>\n                 {"}, {"sha": "24551299df252649a45038b004f5c38a96f42b09", "filename": "src/librustc_trait_selection/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -16,7 +16,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n         // we have to prove. No need to canonicalize and all that for\n         // such cases.\n         if let ty::PredicateKind::Trait(trait_ref, _) =\n-            key.value.predicate.ignore_qualifiers().skip_binder().kind()\n+            key.value.predicate.ignore_quantifiers().skip_binder().kind()\n         {\n             if let Some(sized_def_id) = tcx.lang_items().sized_trait() {\n                 if trait_ref.def_id() == sized_def_id {"}, {"sha": "4b1e2013feff22a65debe776580d0d8939c8277b", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -408,7 +408,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             None => self.check_recursion_limit(&obligation, &obligation)?,\n         }\n \n-        match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+        match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::ForAll(_) => {\n                 bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n             }\n@@ -792,7 +792,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n-        let result = match predicate.ignore_qualifiers().skip_binder().kind() {\n+        let result = match predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::Trait(ref data, _) => self.tcx().trait_is_auto(data.def_id()),\n             _ => false,\n         };\n@@ -1302,7 +1302,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let matching_bound = predicates.iter().find_map(|bound| {\n             if let ty::PredicateKind::Trait(pred, _) =\n-                bound.ignore_qualifiers().skip_binder().kind()\n+                bound.ignore_quantifiers().skip_binder().kind()\n             {\n                 let bound = ty::Binder::bind(pred.trait_ref);\n                 if self.infcx.probe(|_| {"}, {"sha": "ffafbabddfcde14418d7055f11ee5a3f8b395a8b", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -196,7 +196,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         };\n \n     // It is fine to skip the binder as we don't care about regions here.\n-    match pred.ignore_qualifiers().skip_binder().kind() {\n+    match pred.ignore_quantifiers().skip_binder().kind() {\n         ty::PredicateKind::Projection(proj) => {\n             // The obligation comes not from the current `impl` nor the `trait` being implemented,\n             // but rather from a \"second order\" obligation, where an associated type has a"}, {"sha": "b781c2e2a6e9a520daa136d2779eb79bcb724378", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n             ChalkEnvironmentClause::Predicate(predicate) => {\n                 // FIXME(chalk): forall\n                 match predicate\n-                    .ignore_qualifiers_with_unbound_vars(interner.tcx)\n+                    .ignore_quantifiers_with_unbound_vars(interner.tcx)\n                     .skip_binder()\n                     .kind()\n                 {\n@@ -191,7 +191,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predicate<'tcx> {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n         // FIXME(chalk): forall\n-        match self.ignore_qualifiers_with_unbound_vars(interner.tcx).skip_binder().kind() {\n+        match self.ignore_quantifiers_with_unbound_vars(interner.tcx).skip_binder().kind() {\n             ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", self),\n             &ty::PredicateKind::Trait(predicate, _) => {\n                 ty::Binder::bind(predicate).lower_into(interner)\n@@ -561,7 +561,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         // FIXME(chalk): forall\n-        match self.ignore_qualifiers_with_unbound_vars(interner.tcx).skip_binder().kind() {\n+        match self.ignore_quantifiers_with_unbound_vars(interner.tcx).skip_binder().kind() {\n             ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", self),\n             &ty::PredicateKind::Trait(predicate, _) => {\n                 let predicate = ty::Binder::bind(predicate);"}, {"sha": "cefc20972143acf72e2b1469de3f58ecceaa95e4", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -40,7 +40,7 @@ fn normalize_generic_arg_after_erasing_regions<'tcx>(\n }\n \n fn not_outlives_predicate(p: &ty::Predicate<'tcx>) -> bool {\n-    match p.ignore_qualifiers().skip_binder().kind() {\n+    match p.ignore_quantifiers().skip_binder().kind() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,\n         ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", p),\n         ty::PredicateKind::Trait(..)"}, {"sha": "48802893926b7a9845fdc5d780176d1dc423b9a4", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -392,7 +392,7 @@ fn associated_type_projection_predicates(\n \n     let predicates = item_predicates.filter_map(|obligation| {\n         let pred = obligation.predicate;\n-        match pred.ignore_qualifiers().skip_binder().kind() {\n+        match pred.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::Trait(tr, _) => {\n                 if let ty::Projection(p) = tr.self_ty().kind {\n                     if p == assoc_item_ty {\n@@ -443,7 +443,7 @@ fn opaque_type_projection_predicates(\n \n     let filtered_predicates = predicates.filter_map(|obligation| {\n         let pred = obligation.predicate;\n-        match pred.ignore_qualifiers().skip_binder().kind() {\n+        match pred.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::Trait(tr, _) => {\n                 if let ty::Opaque(opaque_def_id, opaque_substs) = tr.self_ty().kind {\n                     if opaque_def_id == def_id && opaque_substs == substs {"}, {"sha": "841bfbfba7028aba2261b4b05d2cb8a7b7f63978", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1706,7 +1706,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     obligation.predicate\n                 );\n \n-                match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                     &ty::PredicateKind::Trait(pred, _) => {\n                         let pred = ty::Binder::bind(pred);\n                         associated_types.entry(span).or_default().extend("}, {"sha": "6b7848c2eb982eef3c485369265ddd0745209a5d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n \n                 if let &ty::PredicateKind::Projection(proj_predicate) =\n-                    obligation.predicate.ignore_qualifiers().skip_binder().kind()\n+                    obligation.predicate.ignore_quantifiers().skip_binder().kind()\n                 {\n                     // Given a Projection predicate, we can potentially infer\n                     // the complete signature.\n@@ -632,7 +632,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // will be our output.\n         let output_ty = self.obligations_for_self_ty(ret_vid).find_map(|(_, obligation)| {\n             if let &ty::PredicateKind::Projection(proj_predicate) =\n-                obligation.predicate.ignore_qualifiers().skip_binder().kind()\n+                obligation.predicate.ignore_quantifiers().skip_binder().kind()\n             {\n                 self.deduce_future_output_from_projection(\n                     obligation.cause.span,"}, {"sha": "2b6362230f83691a8593796e374546d2a3c311b2", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -582,7 +582,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         while !queue.is_empty() {\n             let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n-            let trait_pred = match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+            let trait_pred = match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                 &ty::PredicateKind::Trait(trait_pred, _)\n                     if traits.contains(&trait_pred.def_id()) =>\n                 {"}, {"sha": "4bbdb2a5ad3db060b8f3df443863e6d758dd519e", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -227,8 +227,8 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         let predicate_matches_closure = |p: Predicate<'tcx>| {\n             let mut relator: SimpleEqRelation<'tcx> = SimpleEqRelation::new(tcx, self_param_env);\n             match (\n-                predicate.ignore_qualifiers().skip_binder().kind(),\n-                p.ignore_qualifiers().skip_binder().kind(),\n+                predicate.ignore_quantifiers().skip_binder().kind(),\n+                p.ignore_quantifiers().skip_binder().kind(),\n             ) {\n                 (&ty::PredicateKind::Trait(a, _), &ty::PredicateKind::Trait(b, _)) => {\n                     relator.relate(ty::Binder::bind(a), ty::Binder::bind(b)).is_ok()"}, {"sha": "b97dd8bf348f5ff7f17e5dc73bd364709b23b5ff", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -449,7 +449,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         traits::elaborate_predicates(self.tcx, predicates.predicates.iter().copied())\n             // We don't care about regions here.\n             .filter_map(|obligation| {\n-                match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                     ty::PredicateKind::Trait(trait_pred, _)\n                         if trait_pred.def_id() == sized_def_id =>\n                     {"}, {"sha": "cedd7926290ea1906263d55b06c24723026e175e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -578,7 +578,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // We don't care about regions here, so it's fine to skip the binder here.\n                             if let (ty::Param(_), ty::PredicateKind::Trait(p, _)) = (\n                                 &self_ty.kind,\n-                                parent_pred.ignore_qualifiers().skip_binder().kind(),\n+                                parent_pred.ignore_quantifiers().skip_binder().kind(),\n                             ) {\n                                 if let ty::Adt(def, _) = p.trait_ref.self_ty().kind {\n                                     let node = def.did.as_local().map(|def_id| {\n@@ -631,7 +631,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     };\n                     let mut format_pred = |pred: ty::Predicate<'tcx>| {\n-                        match pred.ignore_qualifiers().skip_binder().kind() {\n+                        match pred.ignore_quantifiers().skip_binder().kind() {\n                             &ty::PredicateKind::Projection(pred) => {\n                                 let pred = ty::Binder::bind(pred);\n                                 // `<Foo as Iterator>::Item = String`.\n@@ -959,7 +959,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // implementing a trait would be legal but is rejected\n                 // here).\n                 unsatisfied_predicates.iter().all(|(p, _)| {\n-                    match p.ignore_qualifiers().skip_binder().kind() {\n+                    match p.ignore_quantifiers().skip_binder().kind() {\n                         // Hide traits if they are present in predicates as they can be fixed without\n                         // having to implement them.\n                         ty::PredicateKind::Trait(t, _) => t.def_id() == info.def_id,"}, {"sha": "f54a59486656be39d35c1f5a1708feb2b7f6b0f0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -2400,7 +2400,7 @@ fn bounds_from_generic_predicates<'tcx>(\n     let mut projections = vec![];\n     for (predicate, _) in predicates.predicates {\n         debug!(\"predicate {:?}\", predicate);\n-        match predicate.ignore_qualifiers().skip_binder().kind() {\n+        match predicate.ignore_quantifiers().skip_binder().kind() {\n             ty::PredicateKind::Trait(trait_predicate, _) => {\n                 let entry = types.entry(trait_predicate.self_ty()).or_default();\n                 let def_id = trait_predicate.def_id();\n@@ -3894,7 +3894,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .pending_obligations()\n             .into_iter()\n             .filter_map(move |obligation| {\n-                match obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                match obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => {\n                         bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n                     }\n@@ -4250,7 +4250,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             if let ty::PredicateKind::Trait(predicate, _) =\n-                error.obligation.predicate.ignore_qualifiers().skip_binder().kind()\n+                error.obligation.predicate.ignore_quantifiers().skip_binder().kind()\n             {\n                 // Collect the argument position for all arguments that could have caused this\n                 // `FulfillmentError`.\n@@ -4299,7 +4299,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let hir::QPath::Resolved(_, path) = &qpath {\n                     for error in errors {\n                         if let ty::PredicateKind::Trait(predicate, _) =\n-                            error.obligation.predicate.ignore_qualifiers().skip_binder().kind()\n+                            error.obligation.predicate.ignore_quantifiers().skip_binder().kind()\n                         {\n                             // If any of the type arguments in this path segment caused the\n                             // `FullfillmentError`, point at its span (#61860).\n@@ -5377,7 +5377,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ty: expected,\n                 })\n                 .to_predicate(self.tcx)\n-                .potentially_qualified(self.tcx, ty::PredicateKind::ForAll);\n+                .potentially_quantified(self.tcx, ty::PredicateKind::ForAll);\n                 let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n \n                 debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);"}, {"sha": "e5d2c569004e19fbc63a836ba43f8b48cda0933b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -552,7 +552,7 @@ fn type_param_predicates(\n     let extra_predicates = extend.into_iter().chain(\n         icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n             .into_iter()\n-            .filter(|(predicate, _)| match predicate.ignore_qualifiers().skip_binder().kind() {\n+            .filter(|(predicate, _)| match predicate.ignore_quantifiers().skip_binder().kind() {\n                 ty::PredicateKind::Trait(data, _) => data.self_ty().is_param(index),\n                 _ => false,\n             }),\n@@ -1004,7 +1004,7 @@ fn super_predicates_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> ty::GenericPredi\n     // which will, in turn, reach indirect supertraits.\n     for &(pred, span) in superbounds {\n         debug!(\"superbound: {:?}\", pred);\n-        if let ty::PredicateKind::Trait(bound, _) = pred.ignore_qualifiers().skip_binder().kind() {\n+        if let ty::PredicateKind::Trait(bound, _) = pred.ignore_quantifiers().skip_binder().kind() {\n             tcx.at(span).super_predicates_of(bound.def_id());\n         }\n     }\n@@ -1962,7 +1962,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                             predicates.push((\n                                 ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, region))\n                                     .to_predicate(tcx)\n-                                    .potentially_qualified(tcx, ty::PredicateKind::ForAll),\n+                                    .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                                 lifetime.span,\n                             ))\n                         }\n@@ -1982,7 +1982,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                     let pred = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n                         .to_predicate(icx.tcx);\n \n-                    (pred.potentially_qualified(icx.tcx, ty::PredicateKind::ForAll), span)\n+                    (pred.potentially_quantified(icx.tcx, ty::PredicateKind::ForAll), span)\n                 }))\n             }\n \n@@ -2112,7 +2112,7 @@ fn predicates_from_bound<'tcx>(\n             let region = astconv.ast_region_to_region(lifetime, None);\n             let pred = ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(param_ty, region))\n                 .to_predicate(astconv.tcx())\n-                .potentially_qualified(astconv.tcx(), ty::PredicateKind::ForAll);\n+                .potentially_quantified(astconv.tcx(), ty::PredicateKind::ForAll);\n             vec![(pred, lifetime.span)]\n         }\n     }"}, {"sha": "7936d003f54ca23692f609dfc0e24037f1136c11", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -183,7 +183,7 @@ pub fn setup_constraining_predicates<'tcx>(\n             // Note that we don't have to care about binders here,\n             // as the impl trait ref never contains any late-bound regions.\n             if let ty::PredicateKind::Projection(projection) =\n-                predicates[j].0.ignore_qualifiers().skip_binder().kind()\n+                predicates[j].0.ignore_quantifiers().skip_binder().kind()\n             {\n                 // Special case: watch out for some kind of sneaky attempt\n                 // to project out an associated type defined by this very"}, {"sha": "0cc99a7a54e9e611a7e7d4fb0b2f5e207441bcf0", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -199,7 +199,7 @@ fn unconstrained_parent_impl_substs<'tcx>(\n     // unconstrained parameters.\n     for (predicate, _) in impl_generic_predicates.predicates.iter() {\n         if let ty::PredicateKind::Projection(proj) =\n-            predicate.ignore_qualifiers().skip_binder().kind()\n+            predicate.ignore_quantifiers().skip_binder().kind()\n         {\n             let projection_ty = proj.projection_ty;\n             let projected_ty = proj.ty;\n@@ -361,7 +361,7 @@ fn check_predicates<'tcx>(\n \n fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tcx>, span: Span) {\n     debug!(\"can_specialize_on(predicate = {:?})\", predicate);\n-    match predicate.ignore_qualifiers().skip_binder().kind() {\n+    match predicate.ignore_quantifiers().skip_binder().kind() {\n         // Global predicates are either always true or always false, so we\n         // are fine to specialize on.\n         _ if predicate.is_global() => (),\n@@ -394,7 +394,7 @@ fn trait_predicate_kind<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     predicate: ty::Predicate<'tcx>,\n ) -> Option<TraitSpecializationKind> {\n-    match predicate.ignore_qualifiers().skip_binder().kind() {\n+    match predicate.ignore_quantifiers().skip_binder().kind() {\n         ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", predicate),\n         ty::PredicateKind::Trait(pred, hir::Constness::NotConst) => {\n             Some(tcx.trait_def(pred.def_id()).specialization_kind)"}, {"sha": "bbde0b63cbbbaded6b44f558bbebab0da076dcf2", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -29,7 +29,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n \n             // process predicates and convert to `RequiredPredicates` entry, see below\n             for &(predicate, span) in predicates.predicates {\n-                match predicate.ignore_qualifiers().skip_binder().kind() {\n+                match predicate.ignore_quantifiers().skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => bug!(\"unepected predicate: {:?}\", predicate),\n \n                     ty::PredicateKind::TypeOutlives(OutlivesPredicate(ref ty, ref reg)) => {"}, {"sha": "56badb324c73e2e0e050e1e3dd7ea6c73ce820ba", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -87,15 +87,15 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CratePredica\n                         GenericArgKind::Type(ty1) => Some((\n                             ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty1, region2))\n                                 .to_predicate(tcx)\n-                                .potentially_qualified(tcx, ty::PredicateKind::ForAll),\n+                                .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n                             ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n                                 region1, region2,\n                             ))\n                             .to_predicate(tcx)\n-                            .potentially_qualified(tcx, ty::PredicateKind::ForAll),\n+                            .potentially_quantified(tcx, ty::PredicateKind::ForAll),\n                             span,\n                         )),\n                         GenericArgKind::Const(_) => {"}, {"sha": "498fa25836c95cc42cc5b03954e8fdcab3642e1e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         pred: ty::Predicate<'tcx>,\n     ) -> FxHashSet<GenericParamDef> {\n-        let regions = match pred.ignore_qualifiers().skip_binder().kind() {\n+        let regions = match pred.ignore_quantifiers().skip_binder().kind() {\n             &ty::PredicateKind::Trait(poly_trait_pred, _) => {\n                 tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(poly_trait_pred))\n             }\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .iter()\n             .filter(|p| {\n                 !orig_bounds.contains(p)\n-                    || match p.ignore_qualifiers().skip_binder().kind() {\n+                    || match p.ignore_quantifiers().skip_binder().kind() {\n                         ty::PredicateKind::Trait(pred, _) => pred.def_id() == sized_trait,\n                         _ => false,\n                     }"}, {"sha": "a86ee12fa99b1d05c3648a8fa03232906d862fe0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -480,7 +480,7 @@ impl Clean<WherePredicate> for hir::WherePredicate<'_> {\n \n impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n-        match self.ignore_qualifiers().skip_binder().kind() {\n+        match self.ignore_quantifiers().skip_binder().kind() {\n             &ty::PredicateKind::Trait(pred, _) => Some(ty::Binder::bind(pred).clean(cx)),\n             &ty::PredicateKind::Subtype(pred) => Some(ty::Binder::bind(pred).clean(cx)),\n             &ty::PredicateKind::RegionOutlives(pred) => ty::Binder::bind(pred).clean(cx),\n@@ -755,7 +755,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n             .flat_map(|(p, _)| {\n                 let mut projection = None;\n                 let param_idx = (|| {\n-                    match p.ignore_qualifiers().skip_binder().kind() {\n+                    match p.ignore_quantifiers().skip_binder().kind() {\n                         &ty::PredicateKind::Trait(pred, _constness) => {\n                             if let ty::Param(param) = pred.self_ty().kind {\n                                 return Some(param.index);\n@@ -1662,9 +1662,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .iter()\n                     .filter_map(|predicate| {\n                         // Note: The substs of opaque types can contain unbound variables,\n-                        // meaning that we have to use `ignore_qualifiers_with_unbound_vars` here.\n+                        // meaning that we have to use `ignore_quantifiers_with_unbound_vars` here.\n                         let trait_ref = match predicate\n-                            .ignore_qualifiers_with_unbound_vars(cx.tcx)\n+                            .ignore_quantifiers_with_unbound_vars(cx.tcx)\n                             .skip_binder()\n                             .kind()\n                         {\n@@ -1692,7 +1692,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             .iter()\n                             .filter_map(|pred| {\n                                 if let ty::PredicateKind::Projection(proj) = pred\n-                                    .ignore_qualifiers_with_unbound_vars(cx.tcx)\n+                                    .ignore_quantifiers_with_unbound_vars(cx.tcx)\n                                     .skip_binder()\n                                     .kind()\n                                 {"}, {"sha": "98e461fe6956388f548c290afac7fd9bd1329333", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -141,7 +141,8 @@ fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId)\n         .predicates\n         .iter()\n         .filter_map(|(pred, _)| {\n-            if let ty::PredicateKind::Trait(pred, _) = pred.ignore_qualifiers().skip_binder().kind()\n+            if let ty::PredicateKind::Trait(pred, _) =\n+                pred.ignore_quantifiers().skip_binder().kind()\n             {\n                 if pred.trait_ref.self_ty() == self_ty { Some(pred.def_id()) } else { None }\n             } else {"}, {"sha": "7eeb6a75ea7b06eb10cb40332b16b8efe702d7d3", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                                    if let Trait(trait_pred, _) = obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "a450d5f16f8cb5337590c951ed098d2509bef20c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1559,7 +1559,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.ignore_qualifiers().skip_binder().kind() {\n+                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.ignore_quantifiers().skip_binder().kind() {\n                         // walk the associated type and check for Self\n                         if contains_self_ty(projection_predicate.ty) {\n                             return;"}, {"sha": "c4603418ee3c65287f392df70b72cdcf826df573", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba61922d2500e156df7f76ffeccf022cdeb0f9a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3ba61922d2500e156df7f76ffeccf022cdeb0f9a", "patch": "@@ -1263,7 +1263,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.ignore_qualifiers().skip_binder().kind() {\n+                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.ignore_quantifiers().skip_binder().kind() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}