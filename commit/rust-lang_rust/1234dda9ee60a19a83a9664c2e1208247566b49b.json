{"sha": "1234dda9ee60a19a83a9664c2e1208247566b49b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMzRkZGE5ZWU2MGExOWE4M2E5NjY0YzJlMTIwODI0NzU2NmI0OWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:47:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T12:47:44Z"}, "message": "Use generic ItemLoc for impls", "tree": {"sha": "a476ee7ed8ef381806f6b7959dd256379e25133e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a476ee7ed8ef381806f6b7959dd256379e25133e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1234dda9ee60a19a83a9664c2e1208247566b49b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1234dda9ee60a19a83a9664c2e1208247566b49b", "html_url": "https://github.com/rust-lang/rust/commit/1234dda9ee60a19a83a9664c2e1208247566b49b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1234dda9ee60a19a83a9664c2e1208247566b49b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137df0137dab36819efada901e92cd2733f292b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d137df0137dab36819efada901e92cd2733f292b", "html_url": "https://github.com/rust-lang/rust/commit/d137df0137dab36819efada901e92cd2733f292b"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "ecf883272d6d995f4e606fb0da653202edbafcd4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=1234dda9ee60a19a83a9664c2e1208247566b49b", "patch": "@@ -754,7 +754,7 @@ impl ImplBlock {\n         let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n         Type {\n-            krate: self.id.lookup(db).container.krate,\n+            krate: self.id.lookup(db).container.module(db).krate,\n             ty: InEnvironment { value: ty, environment },\n         }\n     }\n@@ -768,7 +768,7 @@ impl ImplBlock {\n     }\n \n     pub fn module(&self, db: &impl DefDatabase) -> Module {\n-        self.id.lookup(db).container.into()\n+        self.id.lookup(db).container.module(db).into()\n     }\n \n     pub fn krate(&self, db: &impl DefDatabase) -> Crate {"}, {"sha": "d11b573e5f5861252f41d50eb00480b6fc872b0c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=1234dda9ee60a19a83a9664c2e1208247566b49b", "patch": "@@ -160,27 +160,8 @@ impl_intern!(TypeAliasId, TypeAliasLoc, intern_type_alias, lookup_intern_type_al\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n-impl_intern_key!(ImplId);\n-\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplLoc {\n-    pub container: ModuleId,\n-    pub ast_id: AstId<ast::ImplBlock>,\n-}\n-\n-impl Intern for ImplLoc {\n-    type ID = ImplId;\n-    fn intern(self, db: &impl db::DefDatabase) -> ImplId {\n-        db.intern_impl(self)\n-    }\n-}\n-\n-impl Lookup for ImplId {\n-    type Data = ImplLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase) -> ImplLoc {\n-        db.lookup_intern_impl(*self)\n-    }\n-}\n+type ImplLoc = ItemLoc<ast::ImplBlock>;\n+impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeParamId {\n@@ -379,7 +360,7 @@ impl HasModule for AssocContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match *self {\n             AssocContainerId::ContainerId(it) => it.module(db),\n-            AssocContainerId::ImplId(it) => it.lookup(db).container,\n+            AssocContainerId::ImplId(it) => it.lookup(db).container.module(db),\n             AssocContainerId::TraitId(it) => it.lookup(db).container.module(db),\n         }\n     }\n@@ -431,7 +412,7 @@ impl HasModule for GenericDefId {\n             GenericDefId::AdtId(it) => it.module(db),\n             GenericDefId::TraitId(it) => it.lookup(db).container.module(db),\n             GenericDefId::TypeAliasId(it) => it.lookup(db).module(db),\n-            GenericDefId::ImplId(it) => it.lookup(db).container,\n+            GenericDefId::ImplId(it) => it.lookup(db).container.module(db),\n             GenericDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n             GenericDefId::ConstId(it) => it.lookup(db).module(db),\n         }"}, {"sha": "e68bf4868867428b4706338702483f19054af17f", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1234dda9ee60a19a83a9664c2e1208247566b49b", "patch": "@@ -661,9 +661,10 @@ where\n                             krate: self.def_collector.def_map.krate,\n                             local_id: self.module_id,\n                         };\n+                        let container = ContainerId::ModuleId(module);\n                         let ast_id = self.raw_items[imp].ast_id;\n                         let impl_id =\n-                            ImplLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                            ImplLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n                                 .intern(self.def_collector.db);\n                         self.def_collector.def_map.modules[self.module_id].impls.push(impl_id)\n                     }"}, {"sha": "92fb4c0817dace09712aa99dd445861f92fb82d1", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=1234dda9ee60a19a83a9664c2e1208247566b49b", "patch": "@@ -134,7 +134,7 @@ impl Ty {\n                 LangItemTarget::ImplBlockId(it) => Some(it),\n                 _ => None,\n             })\n-            .map(|it| it.lookup(db).container.krate)\n+            .map(|it| it.lookup(db).container.module(db).krate)\n             .collect();\n         Some(res)\n     }"}, {"sha": "5eb032d86a897b0b3c72c31754bae68bba35eb27", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1234dda9ee60a19a83a9664c2e1208247566b49b/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=1234dda9ee60a19a83a9664c2e1208247566b49b", "patch": "@@ -673,7 +673,7 @@ fn impl_block_datum(\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = trait_ref.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n-    let impl_type = if impl_id.lookup(db).container.krate == krate {\n+    let impl_type = if impl_id.lookup(db).container.module(db).krate == krate {\n         chalk_rust_ir::ImplType::Local\n     } else {\n         chalk_rust_ir::ImplType::External"}]}