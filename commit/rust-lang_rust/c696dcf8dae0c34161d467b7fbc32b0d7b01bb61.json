{"sha": "c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OTZkY2Y4ZGFlMGMzNDE2MWQ0NjdiN2ZiYzMyYjBkN2IwMWJiNjE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-02T08:54:25Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-05-02T08:54:25Z"}, "message": "Handle attributes on modules (#968)\n\n* Handle attributes (including doc comments) on inline modules\r\n\r\nCloses #22\r\nCloses #684\r\n\r\n* Tweak the rules for changing indentation in comments (to do it less often).", "tree": {"sha": "c088d6a6196393cbf05bc327416ffe10acb10477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c088d6a6196393cbf05bc327416ffe10acb10477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "html_url": "https://github.com/rust-lang/rust/commit/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5092eec081cf83ec653efbdeff587f60e4d0ac73", "url": "https://api.github.com/repos/rust-lang/rust/commits/5092eec081cf83ec653efbdeff587f60e4d0ac73", "html_url": "https://github.com/rust-lang/rust/commit/5092eec081cf83ec653efbdeff587f60e4d0ac73"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "83ea21b91e8d01761bed80f530673b8c4d571673", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "patch": "@@ -82,7 +82,7 @@ pub fn rewrite_comment(orig: &str,\n         })\n         .map(left_trim_comment_line)\n         .map(|line| {\n-            if line_breaks == 0 {\n+            if orig.starts_with(\"/*\") && line_breaks == 0 {\n                 line.trim_left()\n             } else {\n                 line\n@@ -529,10 +529,10 @@ pub fn recover_comment_removed(new: String,\n \n /// Return true if the two strings of code have the same payload of comments.\n /// The payload of comments is everything in the string except:\n-/// \t- actual code (not comments)\n-/// \t- comment start/end marks\n-///\t\t- whitespace\n-///\t\t- '*' at the beginning of lines in block comments\n+///     - actual code (not comments)\n+///     - comment start/end marks\n+///     - whitespace\n+///     - '*' at the beginning of lines in block comments\n fn changed_comment_content(orig: &str, new: &str) -> bool {\n     // Cannot write this as a fn since we cannot return types containing closures\n     let code_comment_content = |code| {"}, {"sha": "260303f32ae65af0fd1e1dcd50e498cb4041bf0c", "filename": "src/visitor.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "patch": "@@ -177,14 +177,19 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn visit_item(&mut self, item: &ast::Item) {\n-        // Don't look at attributes for modules (except for rustfmt_skip).\n-        // We want to avoid looking at attributes in another file, which the AST\n-        // doesn't distinguish.\n-        // FIXME This is overly conservative and means we miss attributes on\n-        // inline modules.\n+        // Only look at attributes for modules (except for rustfmt_skip) if the\n+        // module is inline. We want to avoid looking at attributes in another\n+        // file, which the AST doesn't distinguish.\n         match item.node {\n-            ast::ItemKind::Mod(_) => {\n-                if utils::contains_skip(&item.attrs) {\n+            ast::ItemKind::Mod(ref m) => {\n+                let outer_file = self.codemap.lookup_char_pos(item.span.lo).file;\n+                let inner_file = self.codemap.lookup_char_pos(m.inner.lo).file;\n+                if outer_file.name == inner_file.name {\n+                    if self.visit_attrs(&item.attrs) {\n+                        self.push_rewrite(item.span, None);\n+                        return;\n+                    }\n+                } else if utils::contains_skip(&item.attrs) {\n                     return;\n                 }\n             }\n@@ -551,7 +556,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n         let indent = offset.to_string(context.config);\n \n         for (i, a) in self.iter().enumerate() {\n-            let a_str = context.snippet(a.span);\n+            let mut a_str = context.snippet(a.span);\n \n             // Write comments and blank lines between attributes.\n             if i > 0 {\n@@ -564,7 +569,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 if !comment.is_empty() {\n                     let comment = try_opt!(rewrite_comment(comment,\n                                                            false,\n-                                                           context.config.max_width -\n+                                                           context.config.ideal_width -\n                                                            offset.width(),\n                                                            offset,\n                                                            context.config));\n@@ -577,6 +582,14 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 result.push_str(&indent);\n             }\n \n+            if a_str.starts_with(\"//\") {\n+                a_str = try_opt!(rewrite_comment(&a_str,\n+                                                 false,\n+                                                 context.config.ideal_width - offset.width(),\n+                                                 offset,\n+                                                 context.config));\n+            }\n+\n             // Write the attribute itself.\n             result.push_str(&a_str);\n "}, {"sha": "b861b971d9b77b2bbaf88711fbb5ef237b24b1fb", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "patch": "@@ -33,8 +33,8 @@ impl Bar {\n     #[attrib1]\n     /// Blah blah bing.\n     #[attrib2]\n-    // Another comment that needs rewrite because it's tooooooooooooooooooooooooooooooo\n-    // loooooooooooong.\n+    // Another comment that needs rewrite because it's\n+    // tooooooooooooooooooooooooooooooo loooooooooooong.\n     /// Blah blah bing.\n     fn f4(self) -> Cat {}\n }"}, {"sha": "0af68686318f937c7ec2409ceae171a754cab4a9", "filename": "tests/target/structs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "patch": "@@ -96,7 +96,8 @@ pub struct State<F: FnMut()> {\n }\n \n struct Palette {\n-    /// A map of indizes in the palette to a count of pixels in approximately that color\n+    /// A map of indizes in the palette to a count of pixels in approximately\n+    /// that color\n     foo: i32,\n }\n "}]}