{"sha": "62280b4b1166830facf1b43d6dda13df687252c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjgwYjRiMTE2NjgzMGZhY2YxYjQzZDZkZGExM2RmNjg3MjUyYzg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-11T16:09:56Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-11T16:09:56Z"}, "message": "Use libcore's align_offset", "tree": {"sha": "78a575cc45a3c54aff8391f1752e51b067505803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78a575cc45a3c54aff8391f1752e51b067505803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62280b4b1166830facf1b43d6dda13df687252c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62280b4b1166830facf1b43d6dda13df687252c8", "html_url": "https://github.com/rust-lang/rust/commit/62280b4b1166830facf1b43d6dda13df687252c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62280b4b1166830facf1b43d6dda13df687252c8/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7278385d80ca788abe99b344a06c2ab1ddaeee93", "url": "https://api.github.com/repos/rust-lang/rust/commits/7278385d80ca788abe99b344a06c2ab1ddaeee93", "html_url": "https://github.com/rust-lang/rust/commit/7278385d80ca788abe99b344a06c2ab1ddaeee93"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "5b67d075a5c753c62983cd9344aa65bb9ae5b101", "filename": "src/shims/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/62280b4b1166830facf1b43d6dda13df687252c8/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62280b4b1166830facf1b43d6dda13df687252c8/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=62280b4b1166830facf1b43d6dda13df687252c8", "patch": "@@ -1,3 +1,4 @@\n+\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n@@ -27,9 +28,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n-            // FIXME: return a real value in case the target allocation has an\n-            // alignment bigger than the one requested.\n-            let n = u128::max_value();\n+\n+            let n = {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?.assert_ptr();\n+                let align = this.force_bits(\n+                    this.read_scalar(args[1])?.not_undef()?,\n+                    this.pointer_size()\n+                )? as usize;\n+\n+                let stride = this.memory().get(ptr.alloc_id)?.align.bytes() as usize;\n+                // if the allocation alignment is at least the required alignment, we use the\n+                // libcore implementation\n+                if stride >= align {\n+                    ((stride + ptr.offset.bytes() as usize) as *const ())\n+                        .align_offset(align) as u128\n+                } else {\n+                    u128::max_value()\n+                }\n+            };\n+\n             let dest = dest.unwrap();\n             let n = this.truncate(n, dest.layout);\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;"}]}