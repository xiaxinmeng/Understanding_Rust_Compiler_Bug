{"sha": "d261bb32d95732ef8aa74b010bb8c98f058785b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjFiYjMyZDk1NzMyZWY4YWE3NGIwMTBiYjhjOThmMDU4Nzg1YjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T02:32:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T19:05:18Z"}, "message": "core: More tweaks to the thread-local scheduler interface", "tree": {"sha": "df04e4ff3827332c712cc997a01c5cf1e0575ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df04e4ff3827332c712cc997a01c5cf1e0575ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d261bb32d95732ef8aa74b010bb8c98f058785b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d261bb32d95732ef8aa74b010bb8c98f058785b2", "html_url": "https://github.com/rust-lang/rust/commit/d261bb32d95732ef8aa74b010bb8c98f058785b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d261bb32d95732ef8aa74b010bb8c98f058785b2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01", "html_url": "https://github.com/rust-lang/rust/commit/15ece0c23ef9b2e696ea4e81bf088e37fedc5d01"}], "stats": {"total": 248, "additions": 125, "deletions": 123}, "files": [{"sha": "e93e0c6fc6cc98bc97e49b88b2d88a7c7fd3a86d", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=d261bb32d95732ef8aa74b010bb8c98f058785b2", "patch": "@@ -106,16 +106,16 @@ pub enum RuntimeContext {\n pub fn context() -> RuntimeContext {\n \n     use task::rt::rust_task;\n-    use self::sched::Scheduler;\n+    use self::sched::local_sched;\n \n     // XXX: Hitting TLS twice to check if the scheduler exists\n     // then to check for the task is not good for perf\n     if unsafe { rust_try_get_task().is_not_null() } {\n         return OldTaskContext;\n     } else {\n-        if Scheduler::have_local() {\n+        if local_sched::exists() {\n             let context = ::cell::empty_cell();\n-            do Scheduler::borrow_local |sched| {\n+            do local_sched::borrow |sched| {\n                 if sched.in_task_context() {\n                     context.put_back(TaskContext);\n                 } else {\n@@ -137,7 +137,7 @@ pub fn context() -> RuntimeContext {\n #[test]\n fn test_context() {\n     use unstable::run_in_bare_thread;\n-    use self::sched::{Scheduler, Task};\n+    use self::sched::{local_sched, Task};\n     use self::uvio::UvEventLoop;\n     use cell::Cell;\n \n@@ -147,11 +147,11 @@ fn test_context() {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n             assert!(context() == TaskContext);\n-            let sched = Scheduler::take_local();\n+            let sched = local_sched::take();\n             do sched.deschedule_running_task_and_then() |task| {\n                 assert!(context() == SchedulerContext);\n                 let task = Cell(task);\n-                do Scheduler::borrow_local |sched| {\n+                do local_sched::borrow |sched| {\n                     sched.task_queue.push_back(task.take());\n                 }\n             }\n@@ -166,7 +166,7 @@ fn test_context() {\n pub fn run_in_newsched_task(f: ~fn()) {\n     use cell::Cell;\n     use unstable::run_in_bare_thread;\n-    use self::sched::{Scheduler, Task};\n+    use self::sched::Task;\n     use self::uvio::UvEventLoop;\n \n     let f = Cell(Cell(f));"}, {"sha": "2ab50252ac69ec9db54c53cdf41cd416894feb97", "filename": "src/libcore/rt/sched/local_sched.rs", "status": "renamed", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs?ref=d261bb32d95732ef8aa74b010bb8c98f058785b2", "patch": "@@ -16,6 +16,7 @@ use libc::c_void;\n use cast::transmute;\n \n use super::Scheduler;\n+use super::super::rtio::IoFactoryObject;\n use tls = super::super::thread_local_storage;\n #[cfg(test)] use super::super::uvio::UvEventLoop;\n \n@@ -50,11 +51,21 @@ pub fn exists() -> bool {\n     }\n }\n \n+/// Borrow the thread-local scheduler from thread-local storage.\n+/// While the scheduler is borrowed it is not available in TLS.\n+pub fn borrow(f: &fn(&mut Scheduler)) {\n+    let mut sched = take();\n+    f(sched);\n+    put(sched);\n+}\n+\n /// Borrow a mutable reference to the thread-local Scheduler\n+///\n /// # Safety Note\n+///\n /// Because this leaves the Scheduler in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n-pub unsafe fn borrow() -> &mut Scheduler {\n+pub unsafe fn unsafe_borrow() -> &mut Scheduler {\n     unsafe {\n         let key = tls_key();\n         let mut void_sched: *mut c_void = tls::get(key);\n@@ -70,6 +81,13 @@ pub unsafe fn borrow() -> &mut Scheduler {\n     }\n }\n \n+pub unsafe fn unsafe_borrow_io() -> &mut IoFactoryObject {\n+    unsafe {\n+        let sched = unsafe_borrow();\n+        return sched.event_loop.io().unwrap();\n+    }\n+}\n+\n fn tls_key() -> tls::Key {\n     maybe_tls_key().get()\n }\n@@ -125,7 +143,7 @@ fn borrow_smoke_test() {\n     let scheduler = ~UvEventLoop::new_scheduler();\n     put(scheduler);\n     unsafe {\n-        let _scheduler = borrow();\n+        let _scheduler = unsafe_borrow();\n     }\n     let _scheduler = take();\n }", "previous_filename": "src/libcore/rt/sched/local.rs"}, {"sha": "fe443437e3671d463d42cf805a7f1fbf4dcdcc48", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 61, "deletions": 81, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=d261bb32d95732ef8aa74b010bb8c98f058785b2", "patch": "@@ -14,15 +14,16 @@ use cast::transmute;\n \n use super::work_queue::WorkQueue;\n use super::stack::{StackPool, StackSegment};\n-use super::rtio::{EventLoop, EventLoopObject, IoFactoryObject};\n+use super::rtio::{EventLoop, EventLoopObject};\n use super::context::Context;\n \n #[cfg(test)] use super::uvio::UvEventLoop;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use int;\n #[cfg(test)] use cell::Cell;\n \n-mod local;\n+// A more convenient name for external callers, e.g. `local_sched::take()`\n+pub mod local_sched;\n \n /// The Scheduler is responsible for coordinating execution of Tasks\n /// on a single thread. When the scheduler is running it is owned by\n@@ -90,52 +91,25 @@ pub impl Scheduler {\n         assert!(!self.in_task_context());\n \n         // Give ownership of the scheduler (self) to the thread\n-        local::put(self);\n-\n-        let scheduler = unsafe { local::borrow() };\n-        fn run_scheduler_once() {\n-            let scheduler = Scheduler::take_local();\n-            if scheduler.resume_task_from_queue() {\n-                // Ok, a task ran. Nice! We'll do it again later\n-                do Scheduler::borrow_local |scheduler| {\n-                    scheduler.event_loop.callback(run_scheduler_once);\n+        local_sched::put(self);\n+\n+        unsafe {\n+            let scheduler = local_sched::unsafe_borrow();\n+            fn run_scheduler_once() {\n+                let scheduler = local_sched::take();\n+                if scheduler.resume_task_from_queue() {\n+                    // Ok, a task ran. Nice! We'll do it again later\n+                    do local_sched::borrow |scheduler| {\n+                        scheduler.event_loop.callback(run_scheduler_once);\n+                    }\n                 }\n             }\n-        }\n-\n-        scheduler.event_loop.callback(run_scheduler_once);\n-        scheduler.event_loop.run();\n-\n-        return local::take();\n-    }\n \n-    /// Get a mutable pointer to the thread-local I/O\n-    /// # Safety Note\n-    /// This allows other mutable aliases to the scheduler, both in the current\n-    /// execution context and other execution contexts.\n-    unsafe fn borrow_local_io() -> &mut IoFactoryObject {\n-        unsafe {\n-            let io = local::borrow().event_loop.io().unwrap();\n-            transmute::<&mut IoFactoryObject, &mut IoFactoryObject>(io)\n+            scheduler.event_loop.callback(run_scheduler_once);\n+            scheduler.event_loop.run();\n         }\n-    }\n-\n-    /// Borrow the thread-local scheduler from thread-local storage.\n-    /// While the scheduler is borrowed it is not available in TLS.\n-    fn borrow_local(f: &fn(&mut Scheduler)) {\n-        let mut sched = local::take();\n-        f(sched);\n-        local::put(sched);\n-    }\n-\n-    /// Take ownership of the scheduler from thread local storage\n-    fn take_local() -> ~Scheduler {\n-        local::take()\n-    }\n \n-    /// Just check whether there is a local scheduler\n-    fn have_local() -> bool {\n-        local::exists()\n+        return local_sched::take();\n     }\n \n     // * Scheduler-context operations\n@@ -151,7 +125,7 @@ pub impl Scheduler {\n             }\n             None => {\n                 rtdebug!(\"no tasks in queue\");\n-                local::put(self);\n+                local_sched::put(self);\n                 return false;\n             }\n         }\n@@ -167,22 +141,24 @@ pub impl Scheduler {\n         self.current_task = Some(task);\n         self.enqueue_cleanup_job(DoNothing);\n \n-        local::put(self);\n+        local_sched::put(self);\n \n         // Take pointers to both the task and scheduler's saved registers.\n-        let sched = unsafe { local::borrow() };\n-        let (sched_context, _, next_task_context) = sched.get_contexts();\n-        let next_task_context = next_task_context.unwrap();\n-        // Context switch to the task, restoring it's registers\n-        // and saving the scheduler's\n-        Context::swap(sched_context, next_task_context);\n-\n-        let sched = unsafe { local::borrow() };\n-        // The running task should have passed ownership elsewhere\n-        assert!(sched.current_task.is_none());\n-\n-        // Running tasks may have asked us to do some cleanup\n-        sched.run_cleanup_job();\n+        unsafe {\n+            let sched = local_sched::unsafe_borrow();\n+            let (sched_context, _, next_task_context) = sched.get_contexts();\n+            let next_task_context = next_task_context.unwrap();\n+            // Context switch to the task, restoring it's registers\n+            // and saving the scheduler's\n+            Context::swap(sched_context, next_task_context);\n+\n+            let sched = local_sched::unsafe_borrow();\n+            // The running task should have passed ownership elsewhere\n+            assert!(sched.current_task.is_none());\n+\n+            // Running tasks may have asked us to do some cleanup\n+            sched.run_cleanup_job();\n+        }\n     }\n \n \n@@ -199,9 +175,9 @@ pub impl Scheduler {\n         let dead_task = self.current_task.swap_unwrap();\n         self.enqueue_cleanup_job(RecycleTask(dead_task));\n \n-        local::put(self);\n+        local_sched::put(self);\n \n-        let sched = unsafe { local::borrow() };\n+        let sched = unsafe { local_sched::unsafe_borrow() };\n         let (sched_context, last_task_context, _) = sched.get_contexts();\n         let last_task_context = last_task_context.unwrap();\n         Context::swap(last_task_context, sched_context);\n@@ -228,15 +204,15 @@ pub impl Scheduler {\n         let f_opaque = ClosureConverter::from_fn(f_fake_region);\n         self.enqueue_cleanup_job(GiveTask(blocked_task, f_opaque));\n \n-        local::put(self);\n+        local_sched::put(self);\n \n-        let sched = unsafe { local::borrow() };\n+        let sched = unsafe { local_sched::unsafe_borrow() };\n         let (sched_context, last_task_context, _) = sched.get_contexts();\n         let last_task_context = last_task_context.unwrap();\n         Context::swap(last_task_context, sched_context);\n \n         // We could be executing in a different thread now\n-        let sched = unsafe { local::borrow() };\n+        let sched = unsafe { local_sched::unsafe_borrow() };\n         sched.run_cleanup_job();\n     }\n \n@@ -253,17 +229,19 @@ pub impl Scheduler {\n         self.enqueue_cleanup_job(RescheduleTask(old_running_task));\n         self.current_task = Some(next_task);\n \n-        local::put(self);\n+        local_sched::put(self);\n \n-        let sched = unsafe { local::borrow() };\n-        let (_, last_task_context, next_task_context) = sched.get_contexts();\n-        let last_task_context = last_task_context.unwrap();\n-        let next_task_context = next_task_context.unwrap();\n-        Context::swap(last_task_context, next_task_context);\n-\n-        // We could be executing in a different thread now\n-        let sched = unsafe { local::borrow() };\n-        sched.run_cleanup_job();\n+        unsafe {\n+            let sched = local_sched::unsafe_borrow();\n+            let (_, last_task_context, next_task_context) = sched.get_contexts();\n+            let last_task_context = last_task_context.unwrap();\n+            let next_task_context = next_task_context.unwrap();\n+            Context::swap(last_task_context, next_task_context);\n+\n+            // We could be executing in a different thread now\n+            let sched = local_sched::unsafe_borrow();\n+            sched.run_cleanup_job();\n+        }\n     }\n \n     // * Other stuff\n@@ -363,12 +341,14 @@ pub impl Task {\n             // This is the first code to execute after the initial\n             // context switch to the task. The previous context may\n             // have asked us to do some cleanup.\n-            let sched = unsafe { local::borrow() };\n-            sched.run_cleanup_job();\n+            unsafe {\n+                let sched = local_sched::unsafe_borrow();\n+                sched.run_cleanup_job();\n+            }\n \n             start();\n \n-            let sched = Scheduler::take_local();\n+            let sched = local_sched::take();\n             sched.terminate_current_task();\n         };\n         return wrapper;\n@@ -428,7 +408,7 @@ fn test_swap_tasks() {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task1 = ~do Task::new(&mut sched.stack_pool) {\n             unsafe { *count_ptr = *count_ptr + 1; }\n-            let mut sched = Scheduler::take_local();\n+            let mut sched = local_sched::take();\n             let task2 = ~do Task::new(&mut sched.stack_pool) {\n                 unsafe { *count_ptr = *count_ptr + 1; }\n             };\n@@ -460,7 +440,7 @@ fn test_run_a_lot_of_tasks_queued() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            do Scheduler::borrow_local |sched| {\n+            do local_sched::borrow |sched| {\n                 let task = ~do Task::new(&mut sched.stack_pool) {\n                     unsafe {\n                         *count_ptr = *count_ptr + 1;\n@@ -493,7 +473,7 @@ fn test_run_a_lot_of_tasks_direct() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            let mut sched = Scheduler::take_local();\n+            let mut sched = local_sched::take();\n             let task = ~do Task::new(&mut sched.stack_pool) {\n                 unsafe {\n                     *count_ptr = *count_ptr + 1;\n@@ -513,11 +493,11 @@ fn test_block_task() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            let sched = Scheduler::take_local();\n+            let sched = local_sched::take();\n             assert!(sched.in_task_context());\n             do sched.deschedule_running_task_and_then() |task| {\n                 let task = Cell(task);\n-                do Scheduler::borrow_local |sched| {\n+                do local_sched::borrow |sched| {\n                     assert!(!sched.in_task_context());\n                     sched.task_queue.push_back(task.take());\n                 }"}, {"sha": "ff5397398354af8c417f0a63b006f79ca6e84b99", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=d261bb32d95732ef8aa74b010bb8c98f058785b2", "patch": "@@ -17,7 +17,7 @@ use super::rtio::*;\n use ops::Drop;\n use cell::{Cell, empty_cell};\n use cast::transmute;\n-use super::sched::Scheduler;\n+use super::sched::{Scheduler, local_sched};\n \n #[cfg(test)] use super::sched::Task;\n #[cfg(test)] use unstable::run_in_bare_thread;\n@@ -121,14 +121,14 @@ impl IoFactory for UvIoFactory {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n-        let scheduler = Scheduler::take_local();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n \n         // Block this task and take ownership, switch to scheduler context\n         do scheduler.deschedule_running_task_and_then |task| {\n \n             rtdebug!(\"connect: entered scheduler context\");\n-            do Scheduler::borrow_local |scheduler| {\n+            do local_sched::borrow |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut tcp_watcher = TcpWatcher::new(self.uv_loop());\n@@ -150,7 +150,7 @@ impl IoFactory for UvIoFactory {\n                 unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n \n                 // Context switch\n-                let scheduler = Scheduler::take_local();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -195,7 +195,7 @@ impl TcpListener for UvTcpListener {\n \n         let server_tcp_watcher = self.watcher();\n \n-        let scheduler = Scheduler::take_local();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n \n         do scheduler.deschedule_running_task_and_then |task| {\n@@ -218,7 +218,7 @@ impl TcpListener for UvTcpListener {\n \n                 rtdebug!(\"resuming task from listen\");\n                 // Context switch\n-                let scheduler = Scheduler::take_local();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -258,13 +258,13 @@ impl Stream for UvStream {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<uint, ()>> = &result_cell;\n \n-        let scheduler = Scheduler::take_local();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&mut [u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             rtdebug!(\"read: entered scheduler context\");\n-            do Scheduler::borrow_local |scheduler| {\n+            do local_sched::borrow |scheduler| {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut watcher = watcher;\n@@ -292,7 +292,7 @@ impl Stream for UvStream {\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Scheduler::take_local();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -304,7 +304,7 @@ impl Stream for UvStream {\n     fn write(&mut self, buf: &[u8]) -> Result<(), ()> {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<(), ()>> = &result_cell;\n-        let scheduler = Scheduler::take_local();\n+        let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n@@ -323,7 +323,7 @@ impl Stream for UvStream {\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n \n-                let scheduler = Scheduler::take_local();\n+                let scheduler = local_sched::take();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n@@ -339,7 +339,7 @@ fn test_simple_io_no_connect() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n             let addr = Ipv4(127, 0, 0, 1, 2926);\n             let maybe_chan = io.connect(addr);\n             assert!(maybe_chan.is_none());\n@@ -357,25 +357,29 @@ fn test_simple_tcp_server_and_client() {\n         let addr = Ipv4(127, 0, 0, 1, 2929);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n-            let mut stream = io.connect(addr).unwrap();\n-            stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n-            stream.close();\n+            unsafe {\n+                let io = local_sched::unsafe_borrow_io();\n+                let mut stream = io.connect(addr).unwrap();\n+                stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n+                stream.close();\n+            }\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n-            let mut listener = io.bind(addr).unwrap();\n-            let mut stream = listener.listen().unwrap();\n-            let mut buf = [0, .. 2048];\n-            let nread = stream.read(buf).unwrap();\n-            assert!(nread == 8);\n-            for uint::range(0, nread) |i| {\n-                rtdebug!(\"%u\", buf[i] as uint);\n-                assert!(buf[i] == i as u8);\n+            unsafe {\n+                let io = local_sched::unsafe_borrow_io();\n+                let mut listener = io.bind(addr).unwrap();\n+                let mut stream = listener.listen().unwrap();\n+                let mut buf = [0, .. 2048];\n+                let nread = stream.read(buf).unwrap();\n+                assert!(nread == 8);\n+                for uint::range(0, nread) |i| {\n+                    rtdebug!(\"%u\", buf[i] as uint);\n+                    assert!(buf[i] == i as u8);\n+                }\n+                stream.close();\n+                listener.close();\n             }\n-            stream.close();\n-            listener.close();\n         };\n \n         // Start the server first so it listens before the client connects\n@@ -392,7 +396,7 @@ fn test_read_and_block() {\n         let addr = Ipv4(127, 0, 0, 1, 2930);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n             let mut stream = io.connect(addr).unwrap();\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -402,7 +406,7 @@ fn test_read_and_block() {\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n             let mut listener = io.bind(addr).unwrap();\n             let mut stream = listener.listen().unwrap();\n             let mut buf = [0, .. 2048];\n@@ -420,13 +424,13 @@ fn test_read_and_block() {\n                 }\n                 reads += 1;\n \n-                let scheduler = Scheduler::take_local();\n+                let scheduler = local_sched::take();\n                 // Yield to the other task in hopes that it\n                 // will trigger a read callback while we are\n                 // not ready for it\n                 do scheduler.deschedule_running_task_and_then |task| {\n                     let task = Cell(task);\n-                    do Scheduler::borrow_local |scheduler| {\n+                    do local_sched::borrow |scheduler| {\n                         scheduler.task_queue.push_back(task.take());\n                     }\n                 }\n@@ -453,7 +457,7 @@ fn test_read_read_read() {\n         let addr = Ipv4(127, 0, 0, 1, 2931);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            let io = unsafe { Scheduler::borrow_local_io() };\n+            let io = unsafe { local_sched::unsafe_borrow_io() };\n             let mut stream = io.connect(addr).unwrap();\n             let mut buf = [0, .. 2048];\n             let mut total_bytes_read = 0;"}, {"sha": "5b45f498319fabcc4eb65688c1e3f974417bef05", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d261bb32d95732ef8aa74b010bb8c98f058785b2/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=d261bb32d95732ef8aa74b010bb8c98f058785b2", "patch": "@@ -553,7 +553,7 @@ fn spawn_raw_newsched(opts: TaskOpts, f: ~fn()) {\n     use rt::sched::*;\n \n     // XXX: How to schedule a new task is a policy decision that shouldn't be made here\n-    let mut sched = Scheduler::take_local();\n+    let mut sched = local_sched::take();\n     let task = ~Task::new(&mut sched.stack_pool, f);\n     sched.resume_task_from_running_task_direct(task);\n }"}]}