{"sha": "945fb504b1b48ffc42656388ada4c661086565fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWZiNTA0YjFiNDhmZmM0MjY1NjM4OGFkYTRjNjYxMDg2NTY1ZmU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-14T19:40:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-14T19:40:34Z"}, "message": "Merge pull request #3091 from topecongiro/issue-3060\n\nDo not add parens around lifetimes", "tree": {"sha": "0eda822bfd8ed4ae903fb4ec98df6adb973159d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eda822bfd8ed4ae903fb4ec98df6adb973159d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945fb504b1b48ffc42656388ada4c661086565fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbw5uyCRBK7hj4Ov3rIwAAdHIIAGD+I1L6wSTsHAlyGrxOj8dW\nsEUEJwimsaW1lLtp4ixPQPwKzZiLZ6ZB0rix+vNfMqrlDInupkH0sr8vHBFB3A76\nqJyFAZPEtm/0gotyn+lVIDm0tesGAXxtQaJO6zon15oCDc0m2FEvHl1s5RSnwnAV\n3iNN2oTx8A3oj1kLxl8gor+YogyEXmXzDcdO+dhFknicPAf8WDU+zlIJp2yrqdgj\nmf2R266/sjAKJ5I3k0OlznU310aBcBE/un96U+5QcrzK7Vnx+BeTlvT6yYQnjT/H\nB7ocUczxfIN0ABodPPj+eN2w/YqM4gmTE++zD77wfW88vzbtmmLgsERXXytDv58=\n=0u/j\n-----END PGP SIGNATURE-----\n", "payload": "tree 0eda822bfd8ed4ae903fb4ec98df6adb973159d9\nparent c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6\nparent 0ac68c9477739532166c1f9a62d317fdf4450ae6\nauthor Nick Cameron <nrc@ncameron.org> 1539546034 +1200\ncommitter GitHub <noreply@github.com> 1539546034 +1200\n\nMerge pull request #3091 from topecongiro/issue-3060\n\nDo not add parens around lifetimes "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945fb504b1b48ffc42656388ada4c661086565fe", "html_url": "https://github.com/rust-lang/rust/commit/945fb504b1b48ffc42656388ada4c661086565fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945fb504b1b48ffc42656388ada4c661086565fe/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6", "html_url": "https://github.com/rust-lang/rust/commit/c4a8cdcdf1e4f574c80f04bc0c5b058c5a83b4f6"}, {"sha": "0ac68c9477739532166c1f9a62d317fdf4450ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac68c9477739532166c1f9a62d317fdf4450ae6", "html_url": "https://github.com/rust-lang/rust/commit/0ac68c9477739532166c1f9a62d317fdf4450ae6"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "d5010314b57175c7072500200cff153e38f67be7", "filename": "src/types.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/945fb504b1b48ffc42656388ada4c661086565fe/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945fb504b1b48ffc42656388ada4c661086565fe/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=945fb504b1b48ffc42656388ada4c661086565fe", "patch": "@@ -473,7 +473,7 @@ fn rewrite_bounded_lifetime(\n             \"{}{}{}\",\n             result,\n             colon,\n-            join_bounds(context, shape.sub_width(overhead)?, bounds, true)?\n+            join_bounds(context, shape.sub_width(overhead)?, bounds, true, false)?\n         );\n         Some(result)\n     }\n@@ -515,13 +515,7 @@ impl Rewrite for ast::GenericBounds {\n         } else {\n             shape\n         };\n-        join_bounds(context, bounds_shape, self, true).map(|s| {\n-            if has_paren {\n-                format!(\"({})\", s)\n-            } else {\n-                s\n-            }\n-        })\n+        join_bounds(context, bounds_shape, self, true, has_paren)\n     }\n }\n \n@@ -757,17 +751,47 @@ fn join_bounds(\n     shape: Shape,\n     items: &[ast::GenericBound],\n     need_indent: bool,\n+    has_paren: bool,\n ) -> Option<String> {\n+    debug_assert!(!items.is_empty());\n+\n     // Try to join types in a single line\n     let joiner = match context.config.type_punctuation_density() {\n         TypeDensity::Compressed => \"+\",\n         TypeDensity::Wide => \" + \",\n     };\n     let type_strs = items\n         .iter()\n-        .map(|item| item.rewrite(context, shape))\n+        .map(|item| {\n+            item.rewrite(\n+                context,\n+                if has_paren {\n+                    shape.sub_width(1)?.offset_left(1)?\n+                } else {\n+                    shape\n+                },\n+            )\n+        })\n         .collect::<Option<Vec<_>>>()?;\n-    let result = type_strs.join(joiner);\n+    let mut result = String::with_capacity(128);\n+    let mut closing_paren = has_paren;\n+    if has_paren {\n+        result.push('(');\n+    }\n+    result.push_str(&type_strs[0]);\n+    if has_paren && type_strs.len() == 1 {\n+        result.push(')');\n+    }\n+    for (i, type_str) in type_strs[1..].iter().enumerate() {\n+        if closing_paren {\n+            if let ast::GenericBound::Outlives(..) = items[i + 1] {\n+                result.push(')');\n+                closing_paren = false;\n+            }\n+        }\n+        result.push_str(joiner);\n+        result.push_str(type_str);\n+    }\n     if items.len() <= 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n         return Some(result);\n     }\n@@ -790,10 +814,20 @@ fn join_bounds(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n     let mut result = String::with_capacity(128);\n+    let mut closing_paren = has_paren;\n+    if has_paren {\n+        result.push('(');\n+    }\n     result.push_str(&type_strs[0]);\n     let mut can_be_put_on_the_same_line = is_bound_extendable(&result, &items[0]);\n     let generic_bounds_in_order = is_generic_bounds_in_order(items);\n     for (bound, bound_str) in items[1..].iter().zip(type_strs[1..].iter()) {\n+        if closing_paren {\n+            if let ast::GenericBound::Outlives(..) = bound {\n+                closing_paren = false;\n+                result.push(')');\n+            }\n+        }\n         if generic_bounds_in_order && can_be_put_on_the_same_line {\n             result.push_str(joiner);\n         } else {"}, {"sha": "2df68490d5d806a80fbf67aa25a2d6ccff076231", "filename": "tests/source/type.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/945fb504b1b48ffc42656388ada4c661086565fe/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945fb504b1b48ffc42656388ada4c661086565fe/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=945fb504b1b48ffc42656388ada4c661086565fe", "patch": "@@ -82,3 +82,12 @@ impl Future<Item = (), Error = SomeError> + 'a,\n     'a + 'b +\n     'c {\n }\n+\n+// #3060\n+macro_rules! foo {\n+    ($foo_api: ty) => {\n+        type Target = ( $foo_api ) + 'static;\n+    }\n+}\n+\n+type Target = ( FooAPI ) + 'static;"}, {"sha": "7fb6e0fdf251b6d59975a52faacbefad29141516", "filename": "tests/target/type.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/945fb504b1b48ffc42656388ada4c661086565fe/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945fb504b1b48ffc42656388ada4c661086565fe/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=945fb504b1b48ffc42656388ada4c661086565fe", "patch": "@@ -81,3 +81,12 @@ pub fn do_something<'a, T: Trait1 + Trait2 + 'a>(\n     Error = SomeError,\n > + 'a + 'b + 'c {\n }\n+\n+// #3060\n+macro_rules! foo {\n+    ($foo_api: ty) => {\n+        type Target = ($foo_api) + 'static;\n+    };\n+}\n+\n+type Target = (FooAPI) + 'static;"}]}