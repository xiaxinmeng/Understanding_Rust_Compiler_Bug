{"sha": "806e74fbf50febd4509a61dac9abcb7c9c4efd86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNmU3NGZiZjUwZmViZDQ1MDlhNjFkYWM5YWJjYjdjOWM0ZWZkODY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-27T06:42:27Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-27T15:30:45Z"}, "message": "Move expr_lit and expr_vec into trans_expr_dps\n\nIssue #667", "tree": {"sha": "5880c688f17310b223bfbe187255970dda633075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5880c688f17310b223bfbe187255970dda633075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/806e74fbf50febd4509a61dac9abcb7c9c4efd86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/806e74fbf50febd4509a61dac9abcb7c9c4efd86", "html_url": "https://github.com/rust-lang/rust/commit/806e74fbf50febd4509a61dac9abcb7c9c4efd86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/806e74fbf50febd4509a61dac9abcb7c9c4efd86/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea72fae99b55d7e35773185787805592977c484", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea72fae99b55d7e35773185787805592977c484", "html_url": "https://github.com/rust-lang/rust/commit/8ea72fae99b55d7e35773185787805592977c484"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "25887cc1fe8b9224edc68ff515ba3062aec26b55", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=806e74fbf50febd4509a61dac9abcb7c9c4efd86", "patch": "@@ -2153,10 +2153,16 @@ fn trans_crate_lit(cx: @crate_ctxt, lit: ast::lit) -> ValueRef {\n     }\n }\n \n-fn trans_lit(cx: @block_ctxt, lit: ast::lit) -> result {\n+fn trans_lit(cx: @block_ctxt, lit: ast::lit, dest: dest) -> @block_ctxt {\n+    if dest == ignore { ret cx; }\n     alt lit.node {\n-      ast::lit_str(s) { ret tvec::trans_str(cx, s); }\n-      _ { ret rslt(cx, trans_crate_lit(bcx_ccx(cx), lit)); }\n+      ast::lit_str(s) { ret tvec::trans_str(cx, s, dest); }\n+      _ {\n+        let cell = alt dest { by_val(c) { c }\n+                             _ { bcx_ccx(cx).sess.span_note(lit.span, \"here\"); fail; }};\n+        *cell = trans_crate_lit(bcx_ccx(cx), lit);\n+        ret cx;\n+      }\n     }\n }\n \n@@ -4129,7 +4135,6 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n fn trans_expr(cx: @block_ctxt, e: @ast::expr) -> result {\n     // Fixme Fill in cx.sp\n     alt e.node {\n-      ast::expr_lit(lit) { ret trans_lit(cx, *lit); }\n       ast::expr_binary(op, x, y) { ret trans_binary(cx, op, x, y); }\n       ast::expr_fn(f) {\n         let ccx = bcx_ccx(cx);\n@@ -4186,7 +4191,6 @@ fn trans_expr(cx: @block_ctxt, e: @ast::expr) -> result {\n       }\n       ast::expr_bind(f, args) { ret trans_bind(cx, f, args, e.id); }\n       ast::expr_cast(val, _) { ret trans_cast(cx, val, e.id); }\n-      ast::expr_vec(args, _) { ret tvec::trans_vec(cx, args, e.id); }\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(cx, e.span, anon_obj, e.id);\n       }\n@@ -4261,6 +4265,9 @@ fn trans_expr_dps(bcx: @block_ctxt, e: @ast::expr, dest: dest)\n         ret trans_rec(bcx, args, base, e.id, dest);\n       }\n       ast::expr_tup(args) { ret trans_tup(bcx, args, e.id, dest); }\n+      ast::expr_lit(lit) { ret trans_lit(bcx, *lit, dest); }\n+      ast::expr_vec(args, _) { ret tvec::trans_vec(bcx, args, e.id, dest); }\n+\n       ast::expr_break. {\n         assert dest == ignore;\n         ret trans_break(e.span, bcx);\n@@ -5306,13 +5313,18 @@ fn trans_closure(bcx_maybe: option::t<@block_ctxt>,\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, trans_obj, et cetera) and those that do\n     // (trans_block, trans_expr, et cetera).\n-    let dest = if !ty::type_is_bot(cx.ccx.tcx, block_ty) &&\n-                  !ty::type_is_nil(cx.ccx.tcx, block_ty) &&\n-                  f.proto != ast::proto_iter &&\n-                  option::is_some(f.body.node.expr) {\n-        save_in(fcx.llretptr)\n-    } else { ignore };\n-    bcx = trans_block_dps(bcx, f.body, dest);\n+    if ty::type_is_bot(cx.ccx.tcx, block_ty) ||\n+       ty::type_is_nil(cx.ccx.tcx, block_ty) ||\n+       f.proto == ast::proto_iter ||\n+       option::is_none(f.body.node.expr) {\n+        bcx = trans_block_dps(bcx, f.body, ignore);\n+    } else if type_is_immediate(cx.ccx, block_ty) {\n+        let cell = empty_dest_cell();\n+        bcx = trans_block_dps(bcx, f.body, by_val(cell));\n+        Store(bcx, *cell, fcx.llretptr);\n+    } else {\n+        bcx = trans_block_dps(bcx, f.body, save_in(fcx.llretptr));\n+    }\n \n     if !bcx.unreachable {\n         // FIXME: until LLVM has a unit type, we are moving around"}, {"sha": "c9375115d3c5edbf253e453dd3001af808370f24", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=806e74fbf50febd4509a61dac9abcb7c9c4efd86", "patch": "@@ -33,7 +33,19 @@ fn opt_eq(a: opt, b: opt) -> bool {\n }\n fn trans_opt(bcx: @block_ctxt, o: opt) -> result {\n     alt o {\n-      lit(l) { ret trans::trans_lit(bcx, *l); }\n+      lit(l) {\n+        alt l.node {\n+          ast::lit_str(s) {\n+            let {bcx, val: dst} =\n+                trans::alloc_ty(bcx, ty::mk_str(bcx_tcx(bcx)));\n+            bcx = trans_vec::trans_str(bcx, s, trans::save_in(dst));\n+            ret rslt(bcx, dst);\n+          }\n+          _ {\n+            ret rslt(bcx, trans::trans_crate_lit(bcx_ccx(bcx), *l));\n+          }\n+        }\n+      }\n       var(id, _) { ret rslt(bcx, C_int(id as int)); }\n     }\n }"}, {"sha": "0536f0ab12d5223fe951d7307d61c811b6498f9a", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806e74fbf50febd4509a61dac9abcb7c9c4efd86/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=806e74fbf50febd4509a61dac9abcb7c9c4efd86", "patch": "@@ -8,7 +8,7 @@ import trans::{call_memmove, trans_shared_malloc, llsize_of, type_of_or_i8,\n                llderivedtydescs_block_ctxt, lazily_emit_tydesc_glue,\n                get_tydesc, load_inbounds, move_val_if_temp, trans_lval,\n                node_id_type, new_sub_block_ctxt, tps_normal, do_spill_noroot,\n-               GEPi, alloc_ty};\n+               GEPi, alloc_ty, dest};\n import trans_build::*;\n import trans_common::*;\n \n@@ -49,7 +49,8 @@ type alloc_result =\n      llunitsz: ValueRef,\n      llunitty: TypeRef};\n \n-fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint) -> alloc_result {\n+fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint, dest: dest)\n+    -> alloc_result {\n     let unit_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n     let llunitty = type_of_or_i8(bcx, unit_ty);\n     let llvecty = T_vec(llunitty);\n@@ -60,12 +61,9 @@ fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint) -> alloc_result {\n     let {bcx: bcx, val: vptr} = alloc_raw(bcx, fill, alloc);\n     let vptr = PointerCast(bcx, vptr, T_ptr(llvecty));\n \n-    let r = alloc_ty(bcx, vec_ty);\n-    let vptrptr = r.val;\n-    bcx = r.bcx;\n-\n+    let vptrptr = alt dest { trans::save_in(a) { a } };\n     Store(bcx, vptr, vptrptr);\n-    add_clean_temp(bcx, vptrptr, vec_ty);\n+//    add_clean_temp(bcx, vptrptr, vec_ty);\n     ret {bcx: bcx,\n          val: vptrptr,\n          unit_ty: unit_ty,\n@@ -102,18 +100,19 @@ fn make_drop_glue(bcx: @block_ctxt, vptrptr: ValueRef, vec_ty: ty::t) ->\n     ret next_cx;\n }\n \n-fn trans_vec(bcx: @block_ctxt, args: [@ast::expr], id: ast::node_id) ->\n-   result {\n+// FIXME handle dest == ignore\n+fn trans_vec(bcx: @block_ctxt, args: [@ast::expr], id: ast::node_id,\n+             dest: dest) -> @block_ctxt {\n     let vec_ty = node_id_type(bcx_ccx(bcx), id);\n     let {bcx: bcx,\n-         val: vptr,\n+         val: vptrptr,\n          llunitsz: llunitsz,\n          unit_ty: unit_ty,\n          llunitty: llunitty} =\n-        alloc(bcx, vec_ty, vec::len(args));\n+        alloc(bcx, vec_ty, vec::len(args), dest);\n \n     // Store the individual elements.\n-    let dataptr = get_dataptr(bcx, vptr, llunitty);\n+    let dataptr = get_dataptr(bcx, vptrptr, llunitty);\n     let i = 0u;\n     for e in args {\n         let lv = trans_lval(bcx, e);\n@@ -125,19 +124,18 @@ fn trans_vec(bcx: @block_ctxt, args: [@ast::expr], id: ast::node_id) ->\n         bcx = move_val_if_temp(bcx, INIT, lleltptr, lv, unit_ty);\n         i += 1u;\n     }\n-    ret rslt(bcx, vptr);\n+    ret bcx;\n }\n-fn trans_str(bcx: @block_ctxt, s: str) -> result {\n+fn trans_str(bcx: @block_ctxt, s: str, dest: dest) -> @block_ctxt {\n     let veclen = std::str::byte_len(s) + 1u; // +1 for \\0\n-    let {bcx: bcx, val: sptr, _} =\n-        alloc(bcx, ty::mk_str(bcx_tcx(bcx)), veclen);\n+    let {bcx: bcx, val: sptrptr, _} =\n+        alloc(bcx, ty::mk_str(bcx_tcx(bcx)), veclen, dest);\n \n     let llcstr = C_cstr(bcx_ccx(bcx), s);\n     let bcx =\n-        call_memmove(bcx, get_dataptr(bcx, sptr, T_i8()), llcstr,\n+        call_memmove(bcx, get_dataptr(bcx, sptrptr, T_i8()), llcstr,\n                      C_uint(veclen)).bcx;\n-\n-    ret rslt(bcx, sptr);\n+    ret bcx;\n }\n \n fn trans_append(cx: @block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,"}]}