{"sha": "4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNDlhM2NmMWI3ZjM1YTMxNGViMWNhYjc5NWI0ZTlhY2Q1NjI4YTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T23:38:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T23:38:56Z"}, "message": "Rollup merge of #62316 - khuey:efficient_last, r=sfackler\n\nWhen possible without changing semantics, implement Iterator::last in terms of DoubleEndedIterator::next_back for types in liballoc and libcore.\n\nProvided that the iterator has finite length and does not trigger user-provided code, this is safe.\n\nWhat follows is a full list of the DoubleEndedIterators in liballoc/libcore and whether this optimization is safe, and if not, why not.\n\nsrc/liballoc/boxed.rs\nBox: Pass through to avoid defeating optimization of the underlying DoubleIterator implementation. This has no correctness impact.\n\nsrc/liballoc/collections/binary_heap.rs\nIter: Pass through to avoid defeating optimizations on slice::Iter\nIntoIter: Not safe, changes Drop order\nDrain: Not safe, changes Drop order\n\nsrc/liballoc/collections/btree/map.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\nKeys: Safe to call next_back, invokes no user defined code.\nValues: ditto\nValuesMut: ditto\nRange: ditto\nRangeMut: ditto\n\nsrc/liballoc/collections/btree/set.rs\nIter: Safe to call next_back, invokes no user defined code.\nIntoIter: Not safe, changes Drop order\nRange: Safe to call next_back, invokes no user defined code.\n\nsrc/liballoc/collections/linked_list.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\n\nsrc/liballoc/collections/vec_deque.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\nDrain: ditto\n\nsrc/liballoc/string.rs\nDrain: Safe because return type is a primitive (char)\n\nsrc/liballoc/vec.rs\nIntoIter: Not safe, changes Drop order\nDrain: ditto\nSplice: ditto\n\nsrc/libcore/ascii.rs\nEscapeDefault: Safe because return type is a primitive (u8)\n\nsrc/libcore/iter/adapters/chain.rs\nChain: Not safe, invokes user defined code (Iterator impl)\n\nsrc/libcore/iter/adapters/flatten.rs\nFlatMap: Not safe, invokes user defined code (Iterator impl)\nFlatten: ditto\nFlattenCompat: ditto\n\nsrc/libcore/iter/adapters/mod.rs\nRev: Not safe, invokes user defined code (Iterator impl)\nCopied: ditto\nCloned: Not safe, invokes user defined code (Iterator impl and T::clone)\nMap: Not safe, invokes user defined code (Iterator impl + closure)\nFilter: ditto\nFilterMap: ditto\nEnumerate: Not safe, invokes user defined code (Iterator impl)\nSkip: ditto\nFuse: ditto\nInspect: ditto\n\nsrc/libcore/iter/adapters/zip.rs\nZip: Not safe, invokes user defined code (Iterator impl)\n\nsrc/libcore/iter/range.rs\nops::Range: Not safe, changes Drop order, but ALREADY HAS SPECIALIZATION\nops::RangeInclusive: ditto\n\nsrc/libcore/iter/sources.rs\nRepeat: Not safe, calling last should iloop.\nEmpty: No point, iterator is at most one item long.\nOnce: ditto\nOnceWith: ditto\n\nsrc/libcore/option.rs\nItem: No point, iterator is at most one item long.\nIter: ditto\nIterMut: ditto\nIntoIter: ditto\n\nsrc/libcore/result.rs\nIter: No point, iterator is at most one item long\nIterMut: ditto\nIntoIter: ditto\n\nsrc/libcore/slice/mod.rs\nSplit: Not safe, invokes user defined closure\nSplitMut: ditto\nRSplit: ditto\nRSplitMut: ditto\nWindows: Safe, already has specialization\nChunks: ditto\nChunksMut: ditto\nChunksExact: ditto\nChunksExactMut: ditto\nRChunks: ditto\nRChunksMut: ditto\nRChunksExact: ditto\nRChunksExactMut: ditto\n\nsrc/libcore/str/mod.rs\nChars: Safe, already has specialization\nCharIndices: ditto\nBytes: ditto\nLines: Safe to call next_back, invokes no user defined code.\nLinesAny: Deprecated\nEverything that is generic over P: Pattern: Not safe because Pattern invokes user defined code.\nSplitWhitespace: Safe to call next_back, invokes no user defined code.\nSplitAsciiWhitespace: ditto\n\nThis is attempt 2 of #60130.\n\nr? @sfackler", "tree": {"sha": "a2bb2ec15802e0b114099335b4740d9a984e9443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2bb2ec15802e0b114099335b4740d9a984e9443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHTyQCRBK7hj4Ov3rIwAAdHIIAEzXVeQasGbV28KILKVOgJK3\nWsn3wPlQXaInoYR/TzDAL5PGgR5p0DtKMNOkARifKJvOmqmqVS0aqx73WkA4tpGZ\nbHKAeEKQ4OTQ+3VwpmTfOjnphOLd3g+syx6gwDvp2Pk1kxPU4i+/mrD5/idvBUFr\ndJH+Sgy8G1NeUTbinxzElqKOlnmGkvcRCQoOS4CsqgPYUIYmO1ociBw67hRb9tKZ\noFTlcGbMXSgAJmsrly2jvTV40aMhRcyHqM7BJ+BZy3sHf/2sxfwejTzplKf6br+7\nYE5m1KwYR1llqCcpt3uAA9HpVbTE71fKorv968kIVrjTXTZjRZD3zEg9pOLTrUc=\n=9s9k\n-----END PGP SIGNATURE-----\n", "payload": "tree a2bb2ec15802e0b114099335b4740d9a984e9443\nparent c0ec567214b1bcefb76aa20ae58fa78312b6ea92\nparent db16e1721264dc06ac926a642deb4c7633a4b54d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562197136 +0200\ncommitter GitHub <noreply@github.com> 1562197136 +0200\n\nRollup merge of #62316 - khuey:efficient_last, r=sfackler\n\nWhen possible without changing semantics, implement Iterator::last in terms of DoubleEndedIterator::next_back for types in liballoc and libcore.\n\nProvided that the iterator has finite length and does not trigger user-provided code, this is safe.\n\nWhat follows is a full list of the DoubleEndedIterators in liballoc/libcore and whether this optimization is safe, and if not, why not.\n\nsrc/liballoc/boxed.rs\nBox: Pass through to avoid defeating optimization of the underlying DoubleIterator implementation. This has no correctness impact.\n\nsrc/liballoc/collections/binary_heap.rs\nIter: Pass through to avoid defeating optimizations on slice::Iter\nIntoIter: Not safe, changes Drop order\nDrain: Not safe, changes Drop order\n\nsrc/liballoc/collections/btree/map.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\nKeys: Safe to call next_back, invokes no user defined code.\nValues: ditto\nValuesMut: ditto\nRange: ditto\nRangeMut: ditto\n\nsrc/liballoc/collections/btree/set.rs\nIter: Safe to call next_back, invokes no user defined code.\nIntoIter: Not safe, changes Drop order\nRange: Safe to call next_back, invokes no user defined code.\n\nsrc/liballoc/collections/linked_list.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\n\nsrc/liballoc/collections/vec_deque.rs\nIter: Safe to call next_back, invokes no user defined code.\nIterMut: ditto\nIntoIter: Not safe, changes Drop order\nDrain: ditto\n\nsrc/liballoc/string.rs\nDrain: Safe because return type is a primitive (char)\n\nsrc/liballoc/vec.rs\nIntoIter: Not safe, changes Drop order\nDrain: ditto\nSplice: ditto\n\nsrc/libcore/ascii.rs\nEscapeDefault: Safe because return type is a primitive (u8)\n\nsrc/libcore/iter/adapters/chain.rs\nChain: Not safe, invokes user defined code (Iterator impl)\n\nsrc/libcore/iter/adapters/flatten.rs\nFlatMap: Not safe, invokes user defined code (Iterator impl)\nFlatten: ditto\nFlattenCompat: ditto\n\nsrc/libcore/iter/adapters/mod.rs\nRev: Not safe, invokes user defined code (Iterator impl)\nCopied: ditto\nCloned: Not safe, invokes user defined code (Iterator impl and T::clone)\nMap: Not safe, invokes user defined code (Iterator impl + closure)\nFilter: ditto\nFilterMap: ditto\nEnumerate: Not safe, invokes user defined code (Iterator impl)\nSkip: ditto\nFuse: ditto\nInspect: ditto\n\nsrc/libcore/iter/adapters/zip.rs\nZip: Not safe, invokes user defined code (Iterator impl)\n\nsrc/libcore/iter/range.rs\nops::Range: Not safe, changes Drop order, but ALREADY HAS SPECIALIZATION\nops::RangeInclusive: ditto\n\nsrc/libcore/iter/sources.rs\nRepeat: Not safe, calling last should iloop.\nEmpty: No point, iterator is at most one item long.\nOnce: ditto\nOnceWith: ditto\n\nsrc/libcore/option.rs\nItem: No point, iterator is at most one item long.\nIter: ditto\nIterMut: ditto\nIntoIter: ditto\n\nsrc/libcore/result.rs\nIter: No point, iterator is at most one item long\nIterMut: ditto\nIntoIter: ditto\n\nsrc/libcore/slice/mod.rs\nSplit: Not safe, invokes user defined closure\nSplitMut: ditto\nRSplit: ditto\nRSplitMut: ditto\nWindows: Safe, already has specialization\nChunks: ditto\nChunksMut: ditto\nChunksExact: ditto\nChunksExactMut: ditto\nRChunks: ditto\nRChunksMut: ditto\nRChunksExact: ditto\nRChunksExactMut: ditto\n\nsrc/libcore/str/mod.rs\nChars: Safe, already has specialization\nCharIndices: ditto\nBytes: ditto\nLines: Safe to call next_back, invokes no user defined code.\nLinesAny: Deprecated\nEverything that is generic over P: Pattern: Not safe because Pattern invokes user defined code.\nSplitWhitespace: Safe to call next_back, invokes no user defined code.\nSplitAsciiWhitespace: ditto\n\nThis is attempt 2 of #60130.\n\nr? @sfackler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "html_url": "https://github.com/rust-lang/rust/commit/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ec567214b1bcefb76aa20ae58fa78312b6ea92", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec567214b1bcefb76aa20ae58fa78312b6ea92", "html_url": "https://github.com/rust-lang/rust/commit/c0ec567214b1bcefb76aa20ae58fa78312b6ea92"}, {"sha": "db16e1721264dc06ac926a642deb4c7633a4b54d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db16e1721264dc06ac926a642deb4c7633a4b54d", "html_url": "https://github.com/rust-lang/rust/commit/db16e1721264dc06ac926a642deb4c7633a4b54d"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "41966360377b3b9f8bfeec6e7648eac2b9920c37", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -728,6 +728,14 @@ impl<I: Iterator + ?Sized> Iterator for Box<I> {\n         (**self).nth(n)\n     }\n }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: Iterator + Sized> Iterator for Box<I> {\n+    fn last(self) -> Option<I::Item> where I: Sized {\n+        (*self).last()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n     fn next_back(&mut self) -> Option<I::Item> {"}, {"sha": "9f531f5b83c75d6444b56ba7bb82aec8d1c5a929", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -1035,6 +1035,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(self) -> Option<&'a T> {\n+        self.iter.last()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ca35600e857925557e0bad711e8a6d2360ab4529", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -1193,6 +1193,10 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1253,6 +1257,10 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.length, Some(self.length))\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1421,6 +1429,10 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1458,6 +1470,10 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1495,6 +1511,10 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1508,6 +1528,10 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    fn last(mut self) -> Option<&'a mut V> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1626,6 +1650,10 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n             unsafe { Some(self.next_unchecked()) }\n         }\n     }\n+\n+    fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "d3af910a82c27939dab4b03e1190ccad6b842a86", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -1019,6 +1019,9 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1073,6 +1076,10 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "db0d6e2f9b9d4ac7246783c97a13555c0d3974be", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -832,6 +832,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.len, Some(self.len))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -881,6 +886,11 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.len, Some(self.len))\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "573dd86b23aeb0276f266d9be83777c8e34b7d33", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -2206,6 +2206,11 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         self.tail = self.head - iter.len();\n         final_res\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2319,6 +2324,11 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a mut T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1b0d3c19692748f53ad26d86076ecb68c0a1b064", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -2385,6 +2385,11 @@ impl Iterator for Drain<'_> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<char> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "e6a6fdde540422abac4613b194ae73ae267d3345", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -117,6 +117,7 @@ impl Iterator for EscapeDefault {\n     type Item = u8;\n     fn next(&mut self) -> Option<u8> { self.range.next().map(|i| self.data[i]) }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n+    fn last(mut self) -> Option<u8> { self.next_back() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl DoubleEndedIterator for EscapeDefault {"}, {"sha": "b027e6bc051b3abe96d10bc8959460ed2edf2825", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4049a3cf1b7f35a314eb1cab795b4e9acd5628a6/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4049a3cf1b7f35a314eb1cab795b4e9acd5628a6", "patch": "@@ -1333,6 +1333,11 @@ impl<'a> Iterator for Lines<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.0.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -4241,6 +4246,11 @@ impl<'a> Iterator for SplitWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n@@ -4267,6 +4277,11 @@ impl<'a> Iterator for SplitAsciiWhitespace<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.inner.size_hint()\n     }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<&'a str> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"}]}