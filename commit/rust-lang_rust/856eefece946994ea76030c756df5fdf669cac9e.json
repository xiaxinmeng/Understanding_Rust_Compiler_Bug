{"sha": "856eefece946994ea76030c756df5fdf669cac9e", "node_id": "C_kwDOAAsO6NoAKDg1NmVlZmVjZTk0Njk5NGVhNzYwMzBjNzU2ZGY1ZmRmNjY5Y2FjOWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-09T04:08:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-09T04:08:31Z"}, "message": "Rollup merge of #89999 - talagrand:GetTempPath2, r=m-ou-se\n\nUpdate std::env::temp_dir to use GetTempPath2 on Windows when available.\n\nAs a security measure, Windows 11 introduces a new temporary directory API, GetTempPath2.\nWhen the calling process is running as SYSTEM, a separate temporary directory\nwill be returned inaccessible to non-SYSTEM processes. For non-SYSTEM processes\nthe behavior will be the same as before.\n\nThis can help mitigate against attacks such as this one:\nhttps://medium.com/csis-techblog/cve-2020-1088-yet-another-arbitrary-delete-eop-a00b97d8c3e2\n\nCompatibility risk: Software which relies on temporary files to communicate between SYSTEM and non-SYSTEM\nprocesses may be affected by this change. In many cases, such patterns may be vulnerable to the very\nattacks the new API was introduced to harden against.\nI'm unclear on the Rust project's tolerance for such change-of-behavior in the standard library. If anything,\nthis PR is meant to raise awareness of the issue and hopefully start the conversation.\n\nHow tested: Taking the example code from the documentation and running it through psexec (from SysInternals) on\nWin10 and Win11.\nOn Win10:\nC:\\test>psexec -s C:\\test\\main.exe\n<...>\nTemporary directory: C:\\WINDOWS\\TEMP\\\n\nOn Win11:\nC:\\test>psexec -s C:\\test\\main.exe\n<...>\nTemporary directory: C:\\Windows\\SystemTemp\\", "tree": {"sha": "a4f1dea689e69b900689a96fd4b895a0e02b4538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4f1dea689e69b900689a96fd4b895a0e02b4538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856eefece946994ea76030c756df5fdf669cac9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsYE/CRBK7hj4Ov3rIwAAUUwIABs8HHGtwo1V19/v8eKLP0uI\nHlP0Z7EqlcIbpD/2KUN5ByujeLG6bu51P6lGhyPppktKo0hfRdWH63NCiSeX/122\nqm/tFaLTHBuHkY8KRUcPJvBmZ9lhKazslvt/sGJLS/r4QNed+C83RCJcPB9rUaeV\n2opndpCp13vUz5u0tBk0w7azWMrHW4ak614VIjKsonDaiYHJ/CMoSC1b4Md9l69U\nSBlN0fAMe0yiADwvwRkwlP+WvbIWi8+1grId9XfonHagAmFojdOJL9rZoErCqy/7\nBLRfaL8ThA4aC/6ka6lkQ0/iW/q02V75bAsGcQ/54hHy/zKDQap6z419fkI/laU=\n=dB0G\n-----END PGP SIGNATURE-----\n", "payload": "tree a4f1dea689e69b900689a96fd4b895a0e02b4538\nparent 3fc5bd7abc2878f65a3c3dbc594874bae369cdf8\nparent 1d26e413de7a026ae2e99dad82edd2b8affcf5f3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639022911 +0100\ncommitter GitHub <noreply@github.com> 1639022911 +0100\n\nRollup merge of #89999 - talagrand:GetTempPath2, r=m-ou-se\n\nUpdate std::env::temp_dir to use GetTempPath2 on Windows when available.\n\nAs a security measure, Windows 11 introduces a new temporary directory API, GetTempPath2.\nWhen the calling process is running as SYSTEM, a separate temporary directory\nwill be returned inaccessible to non-SYSTEM processes. For non-SYSTEM processes\nthe behavior will be the same as before.\n\nThis can help mitigate against attacks such as this one:\nhttps://medium.com/csis-techblog/cve-2020-1088-yet-another-arbitrary-delete-eop-a00b97d8c3e2\n\nCompatibility risk: Software which relies on temporary files to communicate between SYSTEM and non-SYSTEM\nprocesses may be affected by this change. In many cases, such patterns may be vulnerable to the very\nattacks the new API was introduced to harden against.\nI'm unclear on the Rust project's tolerance for such change-of-behavior in the standard library. If anything,\nthis PR is meant to raise awareness of the issue and hopefully start the conversation.\n\nHow tested: Taking the example code from the documentation and running it through psexec (from SysInternals) on\nWin10 and Win11.\nOn Win10:\nC:\\test>psexec -s C:\\test\\main.exe\n<...>\nTemporary directory: C:\\WINDOWS\\TEMP\\\n\nOn Win11:\nC:\\test>psexec -s C:\\test\\main.exe\n<...>\nTemporary directory: C:\\Windows\\SystemTemp\\\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856eefece946994ea76030c756df5fdf669cac9e", "html_url": "https://github.com/rust-lang/rust/commit/856eefece946994ea76030c756df5fdf669cac9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856eefece946994ea76030c756df5fdf669cac9e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fc5bd7abc2878f65a3c3dbc594874bae369cdf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc5bd7abc2878f65a3c3dbc594874bae369cdf8", "html_url": "https://github.com/rust-lang/rust/commit/3fc5bd7abc2878f65a3c3dbc594874bae369cdf8"}, {"sha": "1d26e413de7a026ae2e99dad82edd2b8affcf5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d26e413de7a026ae2e99dad82edd2b8affcf5f3", "html_url": "https://github.com/rust-lang/rust/commit/1d26e413de7a026ae2e99dad82edd2b8affcf5f3"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "c06928647d3897761ee40c2a5b941f60576b4d5d", "filename": "library/std/src/env.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=856eefece946994ea76030c756df5fdf669cac9e", "patch": "@@ -583,28 +583,25 @@ pub fn home_dir() -> Option<PathBuf> {\n /// may result in \"insecure temporary file\" security vulnerabilities. Consider\n /// using a crate that securely creates temporary files or directories.\n ///\n-/// # Unix\n+/// # Platform-specific behavior\n ///\n-/// Returns the value of the `TMPDIR` environment variable if it is\n+/// On Unix, returns the value of the `TMPDIR` environment variable if it is\n /// set, otherwise for non-Android it returns `/tmp`. If Android, since there\n /// is no global temporary folder (it is usually allocated per-app), it returns\n /// `/data/local/tmp`.\n+/// On Windows, the behavior is equivalent to that of [`GetTempPath2`][GetTempPath2] /\n+/// [`GetTempPath`][GetTempPath], which this function uses internally.\n+/// Note that, this [may change in the future][changes].\n ///\n-/// # Windows\n-///\n-/// Returns the value of, in order, the `TMP`, `TEMP`,\n-/// `USERPROFILE` environment variable if any are set and not the empty\n-/// string. Otherwise, `temp_dir` returns the path of the Windows directory.\n-/// This behavior is identical to that of [`GetTempPath`][msdn], which this\n-/// function uses internally.\n-///\n-/// [msdn]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha\n+/// [changes]: io#platform-specific-behavior\n+/// [GetTempPath2]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppath2a\n+/// [GetTempPath]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppatha\n ///\n /// ```no_run\n /// use std::env;\n ///\n /// fn main() {\n-///     let mut dir = env::temp_dir();\n+///     let dir = env::temp_dir();\n ///     println!(\"Temporary directory: {}\", dir.display());\n /// }\n /// ```"}, {"sha": "b87b6b5d88e4a6dd10dd509c5755137c21f15837", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=856eefece946994ea76030c756df5fdf669cac9e", "patch": "@@ -1110,6 +1110,12 @@ compat_fn! {\n                                           -> () {\n         GetSystemTimeAsFileTime(lpSystemTimeAsFileTime)\n     }\n+\n+    // >= Win11 / Server 2022\n+    // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-gettemppath2a\n+    pub fn GetTempPath2W(nBufferLength: DWORD, lpBuffer: LPCWSTR) -> DWORD {\n+        GetTempPathW(nBufferLength, lpBuffer)\n+    }\n }\n \n compat_fn! {"}, {"sha": "5f8556c3bc37618a1fef44596aaa0d6dc7f6496c", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856eefece946994ea76030c756df5fdf669cac9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=856eefece946994ea76030c756df5fdf669cac9e", "patch": "@@ -275,7 +275,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n }\n \n pub fn temp_dir() -> PathBuf {\n-    super::fill_utf16_buf(|buf, sz| unsafe { c::GetTempPathW(sz, buf) }, super::os2path).unwrap()\n+    super::fill_utf16_buf(|buf, sz| unsafe { c::GetTempPath2W(sz, buf) }, super::os2path).unwrap()\n }\n \n #[cfg(not(target_vendor = \"uwp\"))]"}]}