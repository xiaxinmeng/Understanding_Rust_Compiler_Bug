{"sha": "0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWEwZTFkYTU0ZjM4NWMxYWM2MjNiYjdjZmU2Y2YxOWZjZGU4Zjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:15:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-28T00:16:41Z"}, "message": "libcore: Implement equality and ordering on vectors", "tree": {"sha": "45c5ffdab743fd7e943ecc3dc4b95b4705adeb56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c5ffdab743fd7e943ecc3dc4b95b4705adeb56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8", "html_url": "https://github.com/rust-lang/rust/commit/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e0476bd024ef83052479588278669f56a346e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e0476bd024ef83052479588278669f56a346e2", "html_url": "https://github.com/rust-lang/rust/commit/88e0476bd024ef83052479588278669f56a346e2"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "bd3634c29abc16dde6a727b02c97d37057b3d8c9", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0e5a0e1da54f385c1ac623bb7cfe6cf19fcde8f8", "patch": "@@ -1,5 +1,6 @@\n //! Vectors\n \n+import cmp::{Eq, Ord};\n import option::{Some, None};\n import ptr::addr_of;\n import libc::size_t;\n@@ -1374,6 +1375,80 @@ pure fn as_mut_buf<T,U>(s: &[mut T],\n     }\n }\n \n+// Equality\n+\n+pure fn eq<T: Eq>(a: &[T], b: &[T]) -> bool {\n+    let (a_len, b_len) = (a.len(), b.len());\n+    if a_len != b_len { return false; }\n+\n+    let mut i = 0;\n+    while i < a_len {\n+        if a[i] != b[i] { return false; }\n+        i += 1;\n+    }\n+\n+    return true;\n+}\n+\n+impl<T: Eq> &[T]: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: &[T]) -> bool {\n+        eq(self, other)\n+    }\n+}\n+\n+impl<T: Eq> ~[T]: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: ~[T]) -> bool {\n+        eq(self, other)\n+    }\n+}\n+\n+impl<T: Eq> @[T]: Eq {\n+    #[inline(always)]\n+    pure fn eq(&&other: @[T]) -> bool {\n+        eq(self, other)\n+    }\n+}\n+\n+// Lexicographical comparison\n+\n+pure fn lt<T: Ord>(a: &[T], b: &[T]) -> bool {\n+    let (a_len, b_len) = (a.len(), b.len());\n+    let mut end = uint::min(a_len, b_len);\n+\n+    let mut i = 0;\n+    while i < end {\n+        let (c_a, c_b) = (&a[i], &b[i]);\n+        if *c_a < *c_b { return true; }\n+        if *c_a > *c_b { return false; }\n+        i += 1;\n+    }\n+\n+    return a_len < b_len;\n+}\n+\n+impl<T: Ord> &[T]: Ord {\n+    #[inline(always)]\n+    pure fn lt(&&other: &[T]) -> bool {\n+        lt(self, other)\n+    }\n+}\n+\n+impl<T: Ord> ~[T]: Ord {\n+    #[inline(always)]\n+    pure fn lt(&&other: ~[T]) -> bool {\n+        lt(self, other)\n+    }\n+}\n+\n+impl<T: Ord> @[T]: Ord {\n+    #[inline(always)]\n+    pure fn lt(&&other: @[T]) -> bool {\n+        lt(self, other)\n+    }\n+}\n+\n #[cfg(notest)]\n impl<T: copy> ~[T]: add<&[const T],~[T]> {\n     #[inline(always)]"}]}