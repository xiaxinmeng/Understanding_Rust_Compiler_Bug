{"sha": "2024aa48b4e92894e6f780a13c03db7605e1a5f2", "node_id": "C_kwDOAAsO6NoAKDIwMjRhYTQ4YjRlOTI4OTRlNmY3ODBhMTNjMDNkYjc2MDVlMWE1ZjI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-02T02:43:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T21:38:54Z"}, "message": "Make `&`-removal suggestion verbose", "tree": {"sha": "5dfeab33080b82ef4d5bc8baf2a5ff8588734ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dfeab33080b82ef4d5bc8baf2a5ff8588734ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2024aa48b4e92894e6f780a13c03db7605e1a5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2024aa48b4e92894e6f780a13c03db7605e1a5f2", "html_url": "https://github.com/rust-lang/rust/commit/2024aa48b4e92894e6f780a13c03db7605e1a5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2024aa48b4e92894e6f780a13c03db7605e1a5f2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 166, "additions": 113, "deletions": 53}, "files": [{"sha": "553144078ee4ddd04ead9d1d2853d694ff160273", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -1358,26 +1358,41 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n-        let span = obligation.cause.span;\n-\n+        let mut span = obligation.cause.span;\n+        while span.desugaring_kind().is_some() {\n+            // Remove all the hir desugaring contexts while maintaining the macro contexts.\n+            span.remove_mark();\n+        }\n         let mut suggested = false;\n-        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-            let refs_number =\n-                snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n-                // Do not suggest removal of borrow from type arguments.\n-                return false;\n-            }\n \n-            // Skipping binder here, remapping below\n-            let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+        let mut expr_finder = super::FindExprBySpan { span, result: None };\n+        let Some(hir::Node::Expr(body)) = self.tcx.hir().find(obligation.cause.body_id) else {\n+            return false;\n+        };\n+        expr_finder.visit_expr(&body);\n+        let mut count = 0;\n+        let mut suggestions = vec![];\n+        let Some(mut expr) = expr_finder.result else { return false; };\n+        // Skipping binder here, remapping below\n+        let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+\n+        'outer: loop {\n+            while let hir::ExprKind::AddrOf(_, _, borrowed) = expr.kind {\n+                count += 1;\n+                let span = if expr.span.eq_ctxt(borrowed.span) {\n+                    expr.span.until(borrowed.span)\n+                } else {\n+                    expr.span.with_hi(expr.span.lo() + BytePos(1))\n+                };\n+                suggestions.push((span, String::new()));\n \n-            for refs_remaining in 0..refs_number {\n                 let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n                     break;\n                 };\n                 suggested_ty = *inner_ty;\n \n+                expr = borrowed;\n+\n                 // Remapping bound vars here\n                 let trait_pred_and_suggested_ty =\n                     trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n@@ -1388,25 +1403,33 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 );\n \n                 if self.predicate_may_hold(&new_obligation) {\n-                    let sp = self\n-                        .tcx\n-                        .sess\n-                        .source_map()\n-                        .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n-\n-                    let remove_refs = refs_remaining + 1;\n-\n-                    let msg = if remove_refs == 1 {\n+                    let msg = if count == 1 {\n                         \"consider removing the leading `&`-reference\".to_string()\n                     } else {\n-                        format!(\"consider removing {} leading `&`-references\", remove_refs)\n+                        format!(\"consider removing {count} leading `&`-references\")\n                     };\n \n-                    err.span_suggestion_short(sp, &msg, \"\", Applicability::MachineApplicable);\n+                    err.multipart_suggestion_verbose(\n+                        &msg,\n+                        suggestions,\n+                        Applicability::MachineApplicable,\n+                    );\n                     suggested = true;\n-                    break;\n+                    break 'outer;\n                 }\n             }\n+            if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n+                && let hir::def::Res::Local(hir_id) = path.res\n+                && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(hir_id)\n+                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                && let Some(hir::Node::Local(local)) = self.tcx.hir().find(parent_hir_id)\n+                && let None = local.ty\n+                && let Some(binding_expr) = local.init\n+            {\n+                expr = binding_expr;\n+            } else {\n+                break 'outer;\n+            }\n         }\n         suggested\n     }"}, {"sha": "18bb63745d7a5f12354106e58fba0b624dc47569", "filename": "tests/ui/impl-trait/in-trait/issue-102140.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102140.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -2,11 +2,15 @@ error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n   --> $DIR/issue-102140.rs:23:22\n    |\n LL |         MyTrait::foo(&self)\n-   |         ------------ -^^^^\n-   |         |            |\n-   |         |            the trait `MyTrait` is not implemented for `&dyn MyTrait`\n-   |         |            help: consider removing the leading `&`-reference\n+   |         ------------ ^^^^^ the trait `MyTrait` is not implemented for `&dyn MyTrait`\n+   |         |\n    |         required by a bound introduced by this call\n+   |\n+help: consider removing the leading `&`-reference\n+   |\n+LL -         MyTrait::foo(&self)\n+LL +         MyTrait::foo(self)\n+   |\n \n error[E0277]: the trait bound `&dyn MyTrait: MyTrait` is not satisfied\n   --> $DIR/issue-102140.rs:23:9"}, {"sha": "013c5ee704458c8d9435d670debb2c191e892551", "filename": "tests/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -2,10 +2,7 @@ error[E0277]: the type `&mut i32` may not be safely transferred across an unwind\n   --> $DIR/not-panic-safe.rs:8:14\n    |\n LL |     assert::<&mut i32>();\n-   |              -^^^^^^^\n-   |              |\n-   |              `&mut i32` may not be safely transferred across an unwind boundary\n-   |              help: consider removing the leading `&`-reference\n+   |              ^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n    |\n    = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n    = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`"}, {"sha": "387770535f689b8a7f3c7481cf6779f046fcac96", "filename": "tests/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -2,13 +2,15 @@ error[E0277]: `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-1.rs:6:19\n    |\n LL |     for (i, _) in &v.iter().enumerate() {\n-   |                   -^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-   |                   help: consider removing the leading `&`-reference\n+   |                   ^^^^^^^^^^^^^^^^^^^^^ `&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     for (i, _) in &v.iter().enumerate() {\n+LL +     for (i, _) in v.iter().enumerate() {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1632b2abb2f87fb76f8f2c5fa6e63e63304401b4", "filename": "tests/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -2,13 +2,15 @@ error[E0277]: `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterat\n   --> $DIR/suggest-remove-refs-2.rs:6:19\n    |\n LL |     for (i, _) in & & & & &v.iter().enumerate() {\n-   |                   ---------^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-   |                   help: consider removing 5 leading `&`-references\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing 5 leading `&`-references\n+   |\n+LL -     for (i, _) in & & & & &v.iter().enumerate() {\n+LL +     for (i, _) in v.iter().enumerate() {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7bf421a7729dfb88253c61ffa0271ad04599a987", "filename": "tests/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -1,18 +1,20 @@\n error[E0277]: `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n   --> $DIR/suggest-remove-refs-3.rs:6:19\n    |\n-LL |        for (i, _) in & & &\n-   |  ____________________^\n-   | | ___________________|\n-   | ||\n-LL | ||         & &v\n-   | ||___________- help: consider removing 5 leading `&`-references\n-LL | |          .iter()\n-LL | |          .enumerate() {\n-   | |_____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+LL |       for (i, _) in & & &\n+   |  ___________________^\n+LL | |         & &v\n+LL | |         .iter()\n+LL | |         .enumerate() {\n+   | |____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n    = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n+help: consider removing 5 leading `&`-references\n+   |\n+LL -     for (i, _) in & & &\n+LL +     for (i, _) in v\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "dd63d215972432be8942ee181822d03864902062", "filename": "tests/ui/suggestions/suggest-remove-refs-4.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.fixed?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let foo = [1,2,3].iter();\n+    for _i in foo {} //~ ERROR E0277\n+}"}, {"sha": "3c3d9b1b3f981811151e07af3c111ed85a437229", "filename": "tests/ui/suggestions/suggest-remove-refs-4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.rs?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let foo = &[1,2,3].iter();\n+    for _i in &foo {} //~ ERROR E0277\n+}"}, {"sha": "e4ad17e06716f64dd703377ab0e99f07a7db8da5", "filename": "tests/ui/suggestions/suggest-remove-refs-4.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-remove-refs-4.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `&&std::slice::Iter<'_, {integer}>` is not an iterator\n+  --> $DIR/suggest-remove-refs-4.rs:4:15\n+   |\n+LL |     for _i in &foo {}\n+   |               ^^^^ `&&std::slice::Iter<'_, {integer}>` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `&&std::slice::Iter<'_, {integer}>`\n+   = note: required for `&&std::slice::Iter<'_, {integer}>` to implement `IntoIterator`\n+help: consider removing 2 leading `&`-references\n+   |\n+LL ~     let foo = [1,2,3].iter();\n+LL ~     for _i in foo {}\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a631dbb39fb8fa59ebfb9cf13e120d8f7b463bb0", "filename": "tests/ui/typeck/issue-57404.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Ftypeck%2Fissue-57404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2024aa48b4e92894e6f780a13c03db7605e1a5f2/tests%2Fui%2Ftypeck%2Fissue-57404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-57404.stderr?ref=2024aa48b4e92894e6f780a13c03db7605e1a5f2", "patch": "@@ -2,14 +2,17 @@ error[E0277]: `&mut ()` is not a tuple\n   --> $DIR/issue-57404.rs:6:41\n    |\n LL |     handlers.unwrap().as_mut().call_mut(&mut ());\n-   |                                -------- -^^^^^^\n-   |                                |        |\n-   |                                |        the trait `Tuple` is not implemented for `&mut ()`\n-   |                                |        help: consider removing the leading `&`-reference\n+   |                                -------- ^^^^^^^ the trait `Tuple` is not implemented for `&mut ()`\n+   |                                |\n    |                                required by a bound introduced by this call\n    |\n note: required by a bound in `call_mut`\n   --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     handlers.unwrap().as_mut().call_mut(&mut ());\n+LL +     handlers.unwrap().as_mut().call_mut(());\n+   |\n \n error: aborting due to previous error\n "}]}