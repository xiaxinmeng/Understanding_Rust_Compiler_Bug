{"sha": "527dce7137f7a3c7bf47d9a503abf25f88ea22de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyN2RjZTcxMzdmN2EzYzdiZjQ3ZDlhNTAzYWJmMjVmODhlYTIyZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T10:38:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-19T10:38:09Z"}, "message": "Auto merge of #62679 - Xanewok:after-expansion, r=Zoxc\n\nAdd an `after_expansion` callback in the driver\n\nTo format a given file RLS needs to know the Rust edition associated with it. It's not enough to look at the `edition` key in Cargo.toml - each crate target can have a different edition associated with it so the sure way to fetch a correct edition is to scan the input files used to compile a given crate target.\n\nRight now this was done in the `after_analysis` callback of our shim, however this leads to other problems - if a crate cannot be successfully compiled (e.g. it has a type error) then a callback would not be invoked meaning we can't populate the files -> edition mapping.\n\nHowever, doing this only after parsing is not enough, since expansion can pull in additional source files (e.g. by invoking `macro_rules! include_my_mod { () => { mod some_mod; }; }`).\n\nWithout copy-pasting the entire driver setup it's also not possible to expand the crate ourselves in the `after_parsing` callback - to expand crate we'd need to register plugins and initialize session ourselves. However, this is done normally after executing the callback itself, thus triggering the `Once::set` assertions in `Session::init_features`.\n\nr? @Zoxc\n\ncc @RalfJung @oli-obk this affects public driver interface used by Miri and Clippy", "tree": {"sha": "1071f5c012fed4c0d1c47971cce00647f11a0f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1071f5c012fed4c0d1c47971cce00647f11a0f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "html_url": "https://github.com/rust-lang/rust/commit/527dce7137f7a3c7bf47d9a503abf25f88ea22de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527dce7137f7a3c7bf47d9a503abf25f88ea22de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9477a77c52af8d3dea361b3f4ac3e60653aa529", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9477a77c52af8d3dea361b3f4ac3e60653aa529", "html_url": "https://github.com/rust-lang/rust/commit/f9477a77c52af8d3dea361b3f4ac3e60653aa529"}, {"sha": "ff63336b65691f4fd0e339bb74a1798d1f96e86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff63336b65691f4fd0e339bb74a1798d1f96e86e", "html_url": "https://github.com/rust-lang/rust/commit/ff63336b65691f4fd0e339bb74a1798d1f96e86e"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "2bc79e5080f3aacac588c6320cc5138077d1f15d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/527dce7137f7a3c7bf47d9a503abf25f88ea22de/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527dce7137f7a3c7bf47d9a503abf25f88ea22de/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=527dce7137f7a3c7bf47d9a503abf25f88ea22de", "patch": "@@ -105,13 +105,20 @@ pub fn abort_on_err<T>(result: Result<T, ErrorReported>, sess: &Session) -> T {\n pub trait Callbacks {\n     /// Called before creating the compiler instance\n     fn config(&mut self, _config: &mut interface::Config) {}\n-    /// Called after parsing and returns true to continue execution\n-    fn after_parsing(&mut self, _compiler: &interface::Compiler) -> bool {\n-        true\n+    /// Called after parsing. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_parsing(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n+    }\n+    /// Called after expansion. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_expansion(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n     }\n-    /// Called after analysis and returns true to continue execution\n-    fn after_analysis(&mut self, _compiler: &interface::Compiler) -> bool {\n-        true\n+    /// Called after analysis. Return value instructs the compiler whether to\n+    /// continue the compilation afterwards (defaults to `Compilation::Continue`)\n+    fn after_analysis(&mut self, _compiler: &interface::Compiler) -> Compilation {\n+        Compilation::Continue\n     }\n }\n \n@@ -294,7 +301,7 @@ pub fn run_compiler(\n             }\n         }\n \n-        if !callbacks.after_parsing(compiler) {\n+        if callbacks.after_parsing(compiler) == Compilation::Stop {\n             return sess.compile_status();\n         }\n \n@@ -312,6 +319,11 @@ pub fn run_compiler(\n             return sess.compile_status();\n         }\n \n+        compiler.expansion()?;\n+        if callbacks.after_expansion(compiler) == Compilation::Stop {\n+            return sess.compile_status();\n+        }\n+\n         compiler.prepare_outputs()?;\n \n         if sess.opts.output_types.contains_key(&OutputType::DepInfo)\n@@ -355,7 +367,7 @@ pub fn run_compiler(\n \n         compiler.global_ctxt()?.peek_mut().enter(|tcx| tcx.analysis(LOCAL_CRATE))?;\n \n-        if !callbacks.after_analysis(compiler) {\n+        if callbacks.after_analysis(compiler) == Compilation::Stop {\n             return sess.compile_status();\n         }\n "}]}