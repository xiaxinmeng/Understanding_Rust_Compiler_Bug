{"sha": "ad92486d52fdede5c712dd27c868c942d8240704", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTI0ODZkNTJmZGVkZTVjNzEyZGQyN2M4NjhjOTQyZDgyNDA3MDQ=", "commit": {"author": {"name": "Glenn Hope", "email": "glenn.alexander.hope@gmail.com", "date": "2020-05-07T21:41:54Z"}, "committer": {"name": "Glenn Hope", "email": "glenn.alexander.hope@gmail.com", "date": "2020-05-09T18:09:38Z"}, "message": "Add check for \"test\" in parent name. Include flag for disabling wildcard import exceptions", "tree": {"sha": "a7a9aa5e41b052d1d30b4b34f1db522a0206b5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7a9aa5e41b052d1d30b4b34f1db522a0206b5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad92486d52fdede5c712dd27c868c942d8240704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad92486d52fdede5c712dd27c868c942d8240704", "html_url": "https://github.com/rust-lang/rust/commit/ad92486d52fdede5c712dd27c868c942d8240704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad92486d52fdede5c712dd27c868c942d8240704/comments", "author": {"login": "MrAwesome", "id": 145945, "node_id": "MDQ6VXNlcjE0NTk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/145945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAwesome", "html_url": "https://github.com/MrAwesome", "followers_url": "https://api.github.com/users/MrAwesome/followers", "following_url": "https://api.github.com/users/MrAwesome/following{/other_user}", "gists_url": "https://api.github.com/users/MrAwesome/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAwesome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAwesome/subscriptions", "organizations_url": "https://api.github.com/users/MrAwesome/orgs", "repos_url": "https://api.github.com/users/MrAwesome/repos", "events_url": "https://api.github.com/users/MrAwesome/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAwesome/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MrAwesome", "id": 145945, "node_id": "MDQ6VXNlcjE0NTk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/145945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAwesome", "html_url": "https://github.com/MrAwesome", "followers_url": "https://api.github.com/users/MrAwesome/followers", "following_url": "https://api.github.com/users/MrAwesome/following{/other_user}", "gists_url": "https://api.github.com/users/MrAwesome/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAwesome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAwesome/subscriptions", "organizations_url": "https://api.github.com/users/MrAwesome/orgs", "repos_url": "https://api.github.com/users/MrAwesome/repos", "events_url": "https://api.github.com/users/MrAwesome/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAwesome/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f4e1c3a8be54c1c80de366618e83d8d7a6e9eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f4e1c3a8be54c1c80de366618e83d8d7a6e9eb", "html_url": "https://github.com/rust-lang/rust/commit/56f4e1c3a8be54c1c80de366618e83d8d7a6e9eb"}], "stats": {"total": 103, "additions": 75, "deletions": 28}, "files": [{"sha": "4b67c84e38edc08311295a0508e28974738f7a9b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -1058,7 +1058,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n     store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n-    store.register_late_pass(|| box wildcard_imports::WildcardImports);\n+    let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n+    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());"}, {"sha": "57b9eafd14dbd4a8760998f0a1662a486765b2b7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -158,6 +158,8 @@ define_Conf! {\n     (max_struct_bools, \"max_struct_bools\": u64, 3),\n     /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n+    /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n+    (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n }\n \n impl Default for Conf {"}, {"sha": "43d0d1b9e96c0a178438252bec3263acd90161ab", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::{\n     Item, ItemKind, PathSegment, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::BytePos;\n \n declare_clippy_lint! {\n@@ -73,18 +73,38 @@ declare_clippy_lint! {\n     \"lint `use _::*` statements\"\n }\n \n-declare_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n+#[derive(Default)]\n+pub struct WildcardImports {\n+    warn_on_all: bool,\n+    is_test_module: bool,\n+    test_modules_deep: u32,\n+}\n+\n+impl WildcardImports {\n+    pub fn new(warn_on_all: bool) -> Self {\n+        Self {\n+            warn_on_all,\n+            is_test_module: false,\n+            test_modules_deep: 0,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n \n impl LateLintPass<'_, '_> for WildcardImports {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item<'_>) {\n         if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n             return;\n         }\n+        if is_test_module(item) {\n+            self.is_test_module = true;\n+            self.test_modules_deep += 1;\n+        }\n         if_chain! {\n             if !in_macro(item.span);\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n-            if !is_prelude_import(use_path.segments);\n-            if !(is_super_only_import(use_path.segments) && is_in_test_module(cx, item));\n+            if self.warn_on_all || !self.check_exceptions(use_path.segments);\n             let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n@@ -152,6 +172,19 @@ impl LateLintPass<'_, '_> for WildcardImports {\n             }\n         }\n     }\n+\n+    fn check_item_post(&mut self, _: &LateContext<'_, '_>, _: &Item<'_>) {\n+        if self.is_test_module {\n+            self.is_test_module = false;\n+            self.test_modules_deep -= 1;\n+        }\n+    }\n+}\n+\n+impl WildcardImports {\n+    fn check_exceptions(&self, segments: &[PathSegment<'_>]) -> bool {\n+        is_prelude_import(segments) || (is_super_only_import(segments) && self.test_modules_deep > 0)\n+    }\n }\n \n // Allow \"...prelude::*\" imports.\n@@ -168,9 +201,6 @@ fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n     segments.len() == 1 && segments[0].ident.as_str() == \"super\"\n }\n \n-fn is_in_test_module(cx: &LateContext<'_, '_>, item: &Item<'_>) -> bool {\n-    let parent = cx.tcx.hir().get_parent_node(item.hir_id);\n-    let parent_item = cx.tcx.hir().expect_item(parent);\n-    let parent_name = parent_item.ident.name.as_str();\n-    parent_name.contains(\"test\")\n+fn is_test_module(item: &Item<'_>) -> bool {\n+    item.ident.name.as_str().contains(\"test\")\n }"}, {"sha": "53970af41079d5a952038fb4911e19bca40c4bc5", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "98bf6acfe55f20520627be62537f47426c17c42a", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -156,27 +156,34 @@ fn test_weird_formatting() {\n     foo();\n }\n \n-mod test_super_imports {\n+mod super_imports {\n     fn foofoo() {}\n \n-    mod use_super_should_be_replaced {\n+    mod should_be_replaced {\n         use super::foofoo;\n \n         fn with_super() {\n             let _ = foofoo();\n         }\n     }\n \n-    mod use_super_in_test_should_pass {\n+    mod test_should_pass {\n         use super::*;\n \n         fn with_super() {\n             let _ = foofoo();\n         }\n     }\n \n+    mod inner {\n+        fn test_should_pass() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n     mod use_explicit_should_be_replaced {\n-        use test_super_imports::foofoo;\n+        use super_imports::foofoo;\n \n         fn with_explicit() {\n             let _ = foofoo();\n@@ -194,7 +201,7 @@ mod test_super_imports {\n     }\n \n     mod use_super_explicit_should_be_replaced {\n-        use super::super::test_super_imports::foofoo;\n+        use super::super::super_imports::foofoo;\n \n         fn with_super_explicit() {\n             let _ = foofoo();"}, {"sha": "9275c5a0928642f5e66b6651de94a952c3ea32f5", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -157,27 +157,34 @@ fn test_weird_formatting() {\n     foo();\n }\n \n-mod test_super_imports {\n+mod super_imports {\n     fn foofoo() {}\n \n-    mod use_super_should_be_replaced {\n+    mod should_be_replaced {\n         use super::*;\n \n         fn with_super() {\n             let _ = foofoo();\n         }\n     }\n \n-    mod use_super_in_test_should_pass {\n+    mod test_should_pass {\n         use super::*;\n \n         fn with_super() {\n             let _ = foofoo();\n         }\n     }\n \n+    mod inner {\n+        fn test_should_pass() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n     mod use_explicit_should_be_replaced {\n-        use test_super_imports::*;\n+        use super_imports::*;\n \n         fn with_explicit() {\n             let _ = foofoo();\n@@ -195,7 +202,7 @@ mod test_super_imports {\n     }\n \n     mod use_super_explicit_should_be_replaced {\n-        use super::super::test_super_imports::*;\n+        use super::super::super_imports::*;\n \n         fn with_super_explicit() {\n             let _ = foofoo();"}, {"sha": "bd000ce81616b6f42c720c331bd0a2f63d51f3dd", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad92486d52fdede5c712dd27c868c942d8240704/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=ad92486d52fdede5c712dd27c868c942d8240704", "patch": "@@ -99,22 +99,22 @@ LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:180:13\n+  --> $DIR/wildcard_imports.rs:187:13\n    |\n-LL |         use test_super_imports::*;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `test_super_imports::foofoo`\n+LL |         use super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:189:17\n+  --> $DIR/wildcard_imports.rs:196:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:198:13\n+  --> $DIR/wildcard_imports.rs:205:13\n    |\n-LL |         use super::super::test_super_imports::*;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::test_super_imports::foofoo`\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n error: aborting due to 19 previous errors\n "}]}