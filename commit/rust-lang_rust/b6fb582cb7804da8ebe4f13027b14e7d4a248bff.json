{"sha": "b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "node_id": "C_kwDOAAsO6NoAKGI2ZmI1ODJjYjc4MDRkYThlYmU0ZjEzMDI3YjE0ZTdkNGEyNDhiZmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-20T07:41:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T07:41:46Z"}, "message": "Rollup merge of #98183 - dtolnay:emptybound, r=lcnr\n\nFix pretty printing of empty bound lists in where-clause\n\nRepro:\n\n```rust\nmacro_rules! assert_item_stringify {\n    ($item:item $expected:literal) => {\n        assert_eq!(stringify!($item), $expected);\n    };\n}\n\nfn main() {\n    assert_item_stringify! {\n        fn f<'a, T>() where 'a:, T: {}\n        \"fn f<'a, T>() where 'a:, T: {}\"\n    }\n}\n```\n\nPreviously this assertion would fail because rustc renders the where-clause as `where 'a, T` which is invalid syntax.\n\nThis PR makes the above assertion pass.\n\nThis bug also affects `-Zunpretty=expanded`. The intention is for that to emit syntactically valid code, but the buggy output is not valid Rust syntax.\n\n```console\n$ rustc <(echo \"fn f<'a, T>() where 'a:, T: {}\") -Zunpretty=expanded\n#![feature(prelude_import)]\n#![no_std]\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\nfn f<'a, T>() where 'a, T {}\n```\n\n```console\n$ rustc <(echo \"fn f<'a, T>() where 'a:, T: {}\") -Zunpretty=expanded | rustc -\nerror: expected `:`, found `,`\n --> <anon>:7:23\n  |\n7 | fn f<'a, T>() where 'a, T {}\n  |                       ^ expected `:`\n```", "tree": {"sha": "aa3f3527b7f4013d4a7c3b79b1a4c2a8d94d1e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3f3527b7f4013d4a7c3b79b1a4c2a8d94d1e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisCS6CRBK7hj4Ov3rIwAA884IAD/D58JtEPVZ2m4m80A+FT5+\nf5/emw0Aj9lb0Iqu04fgE9mvj6pZd3pnaX35oaLGkZFgzoz8AmPBWGXT6hDzItTR\nYHaLc3z2MJaub+3RVJF9hnluXCN+FQmHdqaBOa03ke/JCQhW2XmjCJNKqPt8iN5c\nRMMeFFuG0qbWMoIcY8trH1FZX6/lONyEBd429Qu4nU33rLzV1baLzka1AEZtAy39\nDJWLnMo65FLlFUhcBkb2gYBdujzPwAsytI20Ng0H/+M+Dx3DQMen92pN+pGYS/3L\n7CQvujaFoBhaa+QCWax2wHD1ClBFMrneirD2N/w3yZnwI95civOSjmPLmieRPRM=\n=vbjY\n-----END PGP SIGNATURE-----\n", "payload": "tree aa3f3527b7f4013d4a7c3b79b1a4c2a8d94d1e12\nparent 9a0b7749665d925d8f533756149deba74f2db88b\nparent fe9635f7c0751aaa23f0b0d2309882a1a4641f9b\nauthor Yuki Okushi <jtitor@2k36.org> 1655710906 +0900\ncommitter GitHub <noreply@github.com> 1655710906 +0900\n\nRollup merge of #98183 - dtolnay:emptybound, r=lcnr\n\nFix pretty printing of empty bound lists in where-clause\n\nRepro:\n\n```rust\nmacro_rules! assert_item_stringify {\n    ($item:item $expected:literal) => {\n        assert_eq!(stringify!($item), $expected);\n    };\n}\n\nfn main() {\n    assert_item_stringify! {\n        fn f<'a, T>() where 'a:, T: {}\n        \"fn f<'a, T>() where 'a:, T: {}\"\n    }\n}\n```\n\nPreviously this assertion would fail because rustc renders the where-clause as `where 'a, T` which is invalid syntax.\n\nThis PR makes the above assertion pass.\n\nThis bug also affects `-Zunpretty=expanded`. The intention is for that to emit syntactically valid code, but the buggy output is not valid Rust syntax.\n\n```console\n$ rustc <(echo \"fn f<'a, T>() where 'a:, T: {}\") -Zunpretty=expanded\n#![feature(prelude_import)]\n#![no_std]\n#[prelude_import]\nuse ::std::prelude::rust_2015::*;\n#[macro_use]\nextern crate std;\nfn f<'a, T>() where 'a, T {}\n```\n\n```console\n$ rustc <(echo \"fn f<'a, T>() where 'a:, T: {}\") -Zunpretty=expanded | rustc -\nerror: expected `:`, found `,`\n --> <anon>:7:23\n  |\n7 | fn f<'a, T>() where 'a, T {}\n  |                       ^ expected `:`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "html_url": "https://github.com/rust-lang/rust/commit/b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0b7749665d925d8f533756149deba74f2db88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0b7749665d925d8f533756149deba74f2db88b", "html_url": "https://github.com/rust-lang/rust/commit/9a0b7749665d925d8f533756149deba74f2db88b"}, {"sha": "fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "html_url": "https://github.com/rust-lang/rust/commit/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b"}], "stats": {"total": 129, "additions": 79, "deletions": 50}, "files": [{"sha": "ad8dbfd506d212f32d9931d945995a597f0e515d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "patch": "@@ -814,7 +814,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {\n-        Self::to_string(|s| s.print_type_bounds(\"\", bounds))\n+        Self::to_string(|s| s.print_type_bounds(bounds))\n     }\n \n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n@@ -991,7 +991,12 @@ impl<'a> State<'a> {\n                     Term::Const(c) => self.print_expr_anon_const(c, &[]),\n                 }\n             }\n-            ast::AssocConstraintKind::Bound { bounds } => self.print_type_bounds(\":\", &*bounds),\n+            ast::AssocConstraintKind::Bound { bounds } => {\n+                if !bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&bounds);\n+                }\n+            }\n         }\n     }\n \n@@ -1045,11 +1050,14 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, false),\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n-                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n-                self.print_type_bounds(prefix, &bounds);\n+                if syntax == ast::TraitObjectSyntax::Dyn {\n+                    self.word_nbsp(\"dyn\");\n+                }\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::ImplTrait(_, ref bounds) => {\n-                self.print_type_bounds(\"impl\", &bounds);\n+                self.word_nbsp(\"impl\");\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::Array(ref ty, ref length) => {\n                 self.word(\"[\");\n@@ -1549,29 +1557,24 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_type_bounds(&mut self, prefix: &'static str, bounds: &[ast::GenericBound]) {\n-        if !bounds.is_empty() {\n-            self.word(prefix);\n-            let mut first = true;\n-            for bound in bounds {\n-                if !(first && prefix.is_empty()) {\n-                    self.nbsp();\n-                }\n-                if first {\n-                    first = false;\n-                } else {\n-                    self.word_space(\"+\");\n-                }\n+    pub fn print_type_bounds(&mut self, bounds: &[ast::GenericBound]) {\n+        let mut first = true;\n+        for bound in bounds {\n+            if first {\n+                first = false;\n+            } else {\n+                self.nbsp();\n+                self.word_space(\"+\");\n+            }\n \n-                match bound {\n-                    GenericBound::Trait(tref, modifier) => {\n-                        if modifier == &TraitBoundModifier::Maybe {\n-                            self.word(\"?\");\n-                        }\n-                        self.print_poly_trait_ref(tref);\n+            match bound {\n+                GenericBound::Trait(tref, modifier) => {\n+                    if modifier == &TraitBoundModifier::Maybe {\n+                        self.word(\"?\");\n                     }\n-                    GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                    self.print_poly_trait_ref(tref);\n                 }\n+                GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n             }\n         }\n     }\n@@ -1580,22 +1583,14 @@ impl<'a> State<'a> {\n         self.print_name(lifetime.ident.name)\n     }\n \n-    pub(crate) fn print_lifetime_bounds(\n-        &mut self,\n-        lifetime: ast::Lifetime,\n-        bounds: &ast::GenericBounds,\n-    ) {\n-        self.print_lifetime(lifetime);\n-        if !bounds.is_empty() {\n-            self.word(\": \");\n-            for (i, bound) in bounds.iter().enumerate() {\n-                if i != 0 {\n-                    self.word(\" + \");\n-                }\n-                match bound {\n-                    ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n-                    _ => panic!(),\n-                }\n+    pub(crate) fn print_lifetime_bounds(&mut self, bounds: &ast::GenericBounds) {\n+        for (i, bound) in bounds.iter().enumerate() {\n+            if i != 0 {\n+                self.word(\" + \");\n+            }\n+            match bound {\n+                ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                _ => panic!(),\n             }\n         }\n     }\n@@ -1613,11 +1608,18 @@ impl<'a> State<'a> {\n             match param.kind {\n                 ast::GenericParamKind::Lifetime => {\n                     let lt = ast::Lifetime { id: param.id, ident: param.ident };\n-                    s.print_lifetime_bounds(lt, &param.bounds)\n+                    s.print_lifetime(lt);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_lifetime_bounds(&param.bounds)\n+                    }\n                 }\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_ident(param.ident);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");\n@@ -1630,7 +1632,10 @@ impl<'a> State<'a> {\n                     s.space();\n                     s.word_space(\":\");\n                     s.print_type(ty);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");"}, {"sha": "f1caf22f3640fc9ced4e03f4df36e955e1ff58de", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "patch": "@@ -114,7 +114,10 @@ impl<'a> State<'a> {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n-        self.print_type_bounds(\":\", bounds);\n+        if !bounds.is_empty() {\n+            self.word_nbsp(\":\");\n+            self.print_type_bounds(bounds);\n+        }\n         self.print_where_clause_parts(where_clauses.0.0, before_predicates);\n         if let Some(ty) = ty {\n             self.space();\n@@ -320,7 +323,10 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_type_bounds(\":\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\" \");\n                 self.bopen();\n@@ -347,7 +353,10 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.nbsp();\n-                self.print_type_bounds(\"=\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\"=\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n                 self.end(); // end inner head-block\n@@ -618,14 +627,23 @@ impl<'a> State<'a> {\n             }) => {\n                 self.print_formal_generic_params(bound_generic_params);\n                 self.print_type(bounded_ty);\n-                self.print_type_bounds(\":\", bounds);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_type_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 lifetime,\n                 bounds,\n                 ..\n             }) => {\n-                self.print_lifetime_bounds(*lifetime, bounds);\n+                self.print_lifetime(*lifetime);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_lifetime_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { lhs_ty, rhs_ty, .. }) => {\n                 self.print_type(lhs_ty);"}, {"sha": "ba325d704228da3d92de52cddf0c8b1c08d37774", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "patch": "@@ -1355,7 +1355,10 @@ impl<'a> Parser<'a> {\n                     s.print_mutability(mut_ty.mutbl, false);\n                     s.popen();\n                     s.print_type(&mut_ty.ty);\n-                    s.print_type_bounds(\" +\", &bounds);\n+                    if !bounds.is_empty() {\n+                        s.word(\" + \");\n+                        s.print_type_bounds(&bounds);\n+                    }\n                     s.pclose()\n                 });\n "}, {"sha": "4183799457b7fb0c744dc321fed0d1a92ee87185", "filename": "src/test/pretty/where-clauses.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fb582cb7804da8ebe4f13027b14e7d4a248bff/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fwhere-clauses.rs?ref=b6fb582cb7804da8ebe4f13027b14e7d4a248bff", "patch": "@@ -2,4 +2,7 @@\n \n fn f<'a, 'b, T>(t: T) -> isize where T: 'a, 'a: 'b, T: Eq { 0 }\n \n+// This is legal syntax, sometimes generated by macros. `where T: $($bound+)*`\n+fn zero_bounds<'a, T>() where 'a:, T: {}\n+\n fn main() {}"}]}