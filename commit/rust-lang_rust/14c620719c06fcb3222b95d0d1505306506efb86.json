{"sha": "14c620719c06fcb3222b95d0d1505306506efb86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzYyMDcxOWMwNmZjYjMyMjJiOTVkMGQxNTA1MzA2NTA2ZWZiODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-06T09:56:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-06T09:56:43Z"}, "message": "auto merge of #12714 : michaelwoerister/rust/limited-debuginfo, r=alexcrichton\n\nThis PR brings back limited debuginfo which allows for nice backtraces and breakpoints, but omits any info about variables and types.\r\n\r\nThe `-g` and `--debuginfo` command line options have been extended to take an optional argument:\r\n`-g0` means no debug info.\r\n`-g1` means line-tables only.\r\n`-g2` means full debug info.\r\n\r\nSpecifying `-g` without argument is equivalent to `-g2`.\r\n\r\nFixes #12280", "tree": {"sha": "97479f1be6ce66653be554404d8bac08a0f01178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97479f1be6ce66653be554404d8bac08a0f01178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c620719c06fcb3222b95d0d1505306506efb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c620719c06fcb3222b95d0d1505306506efb86", "html_url": "https://github.com/rust-lang/rust/commit/14c620719c06fcb3222b95d0d1505306506efb86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c620719c06fcb3222b95d0d1505306506efb86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fba2fea121b616793287f33aa3ee05e8d8893b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fba2fea121b616793287f33aa3ee05e8d8893b0", "html_url": "https://github.com/rust-lang/rust/commit/2fba2fea121b616793287f33aa3ee05e8d8893b0"}, {"sha": "a5b4d94e3daa0fc2ea59785cb6480e421c4bd8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b4d94e3daa0fc2ea59785cb6480e421c4bd8e6", "html_url": "https://github.com/rust-lang/rust/commit/a5b4d94e3daa0fc2ea59785cb6480e421c4bd8e6"}], "stats": {"total": 227, "additions": 155, "deletions": 72}, "files": [{"sha": "b1b8351b040adc8900b13acd80ba2f5f21079e43", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -455,6 +455,25 @@ pub fn optmulti(short_name: &str, long_name: &str, desc: &str, hint: &str) -> Op\n     }\n }\n \n+/// Create a generic option group, stating all parameters explicitly\n+pub fn opt(short_name: &str,\n+           long_name: &str,\n+           desc: &str,\n+           hint: &str,\n+           hasarg: HasArg,\n+           occur: Occur) -> OptGroup {\n+    let len = short_name.len();\n+    assert!(len == 1 || len == 0);\n+    OptGroup {\n+        short_name: short_name.to_owned(),\n+        long_name: long_name.to_owned(),\n+        hint: hint.to_owned(),\n+        desc: desc.to_owned(),\n+        hasarg: hasarg,\n+        occur: occur\n+    }\n+}\n+\n impl Fail_ {\n     /// Convert a `Fail_` enum into an error string.\n     pub fn to_err_msg(self) -> ~str {"}, {"sha": "09e5b99fc236fd5d452bbe00ba3eb0e027e0d8d6", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -12,7 +12,7 @@ use back::archive::{Archive, METADATA_FILENAME};\n use back::rpath;\n use back::svh::Svh;\n use driver::driver::{CrateTranslation, OutputFilenames};\n-use driver::session::Session;\n+use driver::session::{NoDebugInfo, Session};\n use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n@@ -92,7 +92,7 @@ pub mod write {\n     use back::link::{OutputTypeExe, OutputTypeLlvmAssembly};\n     use back::link::{OutputTypeObject};\n     use driver::driver::{CrateTranslation, OutputFilenames};\n-    use driver::session::Session;\n+    use driver::session::{NoDebugInfo, Session};\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, TargetMachineRef, PassManagerRef};\n@@ -148,7 +148,7 @@ pub mod write {\n \n             // FIXME: #11906: Omitting frame pointers breaks retrieving the value of a parameter.\n             // FIXME: #11954: mac64 unwinding may not work with fp elim\n-            let no_fp_elim = sess.opts.debuginfo ||\n+            let no_fp_elim = (sess.opts.debuginfo != NoDebugInfo) ||\n                              (sess.targ_cfg.os == abi::OsMacos &&\n                               sess.targ_cfg.arch == abi::X86_64);\n \n@@ -1052,7 +1052,7 @@ fn link_natively(sess: Session, dylib: bool, obj_filename: &Path,\n \n     // On OSX, debuggers need this utility to get run to do some munging of\n     // the symbols\n-    if sess.targ_cfg.os == abi::OsMacos && sess.opts.debuginfo {\n+    if sess.targ_cfg.os == abi::OsMacos && (sess.opts.debuginfo != NoDebugInfo) {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         match Process::status(\"dsymutil\",\n                                   [out_filename.as_str().unwrap().to_owned()]) {"}, {"sha": "c4f3bb21059009bcf30c3f7de035ece688af29f7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -11,7 +11,8 @@\n \n use back::link;\n use back::{arm, x86, x86_64, mips};\n-use driver::session::{Aggressive, CrateTypeExecutable};\n+use driver::session::{Aggressive, CrateTypeExecutable, FullDebugInfo, LimitedDebugInfo,\n+                      NoDebugInfo};\n use driver::session::{Session, Session_, No, Less, Default};\n use driver::session;\n use front;\n@@ -38,7 +39,9 @@ use std::vec;\n use std::vec_ng::Vec;\n use std::vec_ng;\n use collections::{HashMap, HashSet};\n-use getopts::{optopt, optmulti, optflag, optflagopt};\n+use getopts::{optopt, optmulti, optflag, optflagopt, opt};\n+use MaybeHasArg = getopts::Maybe;\n+use OccurOptional = getopts::Optional;\n use getopts;\n use syntax::ast;\n use syntax::abi;\n@@ -865,7 +868,18 @@ pub fn build_session_options(matches: &getopts::Matches)\n         } else { No }\n     };\n     let gc = debugging_opts & session::GC != 0;\n-    let debuginfo = matches.opt_present(\"g\") || matches.opt_present(\"debuginfo\");\n+\n+    let debuginfo = match matches.opt_default(\"debuginfo\", \"2\") {\n+        Some(level) => {\n+            match level {\n+                ~\"0\" => NoDebugInfo,\n+                ~\"1\" => LimitedDebugInfo,\n+                ~\"2\" => FullDebugInfo,\n+                _    => early_error(\"debug info level needs to be between 0-2\")\n+            }\n+        }\n+        None => NoDebugInfo\n+    };\n \n     let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {\n         Path::new(s.as_slice())\n@@ -1012,61 +1026,47 @@ pub fn optgroups() -> ~[getopts::OptGroup] {\n   optflag(\"h\", \"help\", \"Display this message\"),\n   optmulti(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n   optmulti(\"L\", \"\",   \"Add a directory to the library search path\", \"PATH\"),\n-  optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates for the \\\n-                              compiler to emit\",\n+  optmulti(\"\", \"crate-type\", \"Comma separated list of types of crates for the compiler to emit\",\n            \"[bin|lib|rlib|dylib|staticlib]\"),\n-  optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler\n-                        to emit\",\n+  optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler to emit\",\n            \"[asm|bc|ir|obj|link]\"),\n   optflag(\"\", \"crate-id\", \"Output the crate id and exit\"),\n   optflag(\"\", \"crate-name\", \"Output the crate name and exit\"),\n   optflag(\"\", \"crate-file-name\", \"Output the file(s) that would be written if compilation \\\n           continued and exit\"),\n   optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n-  optflag(\"g\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created\"),\n-  optflag(\"\", \"no-trans\",\n-                        \"Run all passes except translation; no output\"),\n-  optflag(\"\", \"no-analysis\",\n-                        \"Parse and expand the output, but run no analysis or produce \\\n-                        output\"),\n-  optflag(\"O\", \"\",    \"Equivalent to --opt-level=2\"),\n-  optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n-  optopt(\"\", \"opt-level\",\n-                        \"Optimize with possible levels 0-3\", \"LEVEL\"),\n-  optopt( \"\",  \"out-dir\",\n-                        \"Write output to compiler-chosen filename\n-                          in <dir>\", \"DIR\"),\n-  optflag(\"\", \"parse-only\",\n-                        \"Parse only; do not compile, assemble, or link\"),\n+  opt(\"g\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n+       0 = no debug info,\n+       1 = line-tables only (for stacktraces),\n+       2 = full debug info with variable, argument and type information\",\n+      \"LEVEL\", MaybeHasArg, OccurOptional),\n+  optflag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n+  optflag(\"\", \"no-analysis\", \"Parse and expand the output, but run no analysis or produce output\"),\n+  optflag(\"O\", \"\", \"Equivalent to --opt-level=2\"),\n+  optopt(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n+  optopt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+  optopt( \"\",  \"out-dir\", \"Write output to compiler-chosen filename in <dir>\", \"DIR\"),\n+  optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, or link\"),\n   optflagopt(\"\", \"pretty\",\n-                        \"Pretty-print the input instead of compiling;\n-                          valid types are: normal (un-annotated source),\n-                          expanded (crates expanded),\n-                          typed (crates expanded, with type annotations),\n-                          or identified (fully parenthesized,\n-                          AST nodes and blocks with IDs)\", \"TYPE\"),\n-  optflagopt(\"\", \"dep-info\",\n-                        \"Output dependency info to <filename> after compiling\", \"FILENAME\"),\n-  optopt(\"\", \"sysroot\",\n-                        \"Override the system root\", \"PATH\"),\n+             \"Pretty-print the input instead of compiling;\n+              valid types are: normal (un-annotated source),\n+              expanded (crates expanded),\n+              typed (crates expanded, with type annotations),\n+              or identified (fully parenthesized,\n+              AST nodes and blocks with IDs)\", \"TYPE\"),\n+  optflagopt(\"\", \"dep-info\", \"Output dependency info to <filename> after compiling\", \"FILENAME\"),\n+  optopt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n   optflag(\"\", \"test\", \"Build a test harness\"),\n-  optopt(\"\", \"target\",\n-                        \"Target triple cpu-manufacturer-kernel[-os]\n-                          to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                          for details)\", \"TRIPLE\"),\n-  optmulti(\"W\", \"warn\",\n-                        \"Set lint warnings\", \"OPT\"),\n-  optmulti(\"A\", \"allow\",\n-                        \"Set lint allowed\", \"OPT\"),\n-  optmulti(\"D\", \"deny\",\n-                        \"Set lint denied\", \"OPT\"),\n-  optmulti(\"F\", \"forbid\",\n-                        \"Set lint forbidden\", \"OPT\"),\n-  optmulti(\"C\", \"codegen\",\n-                        \"Set a codegen option\", \"OPT[=VALUE]\"),\n-  optmulti(\"Z\", \"\",   \"Set internal debugging options\", \"FLAG\"),\n-  optflag( \"v\", \"version\",\n-                        \"Print version info and exit\"),\n+  optopt(\"\", \"target\", \"Target triple cpu-manufacturer-kernel[-os]\n+                        to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n+                        for details)\", \"TRIPLE\"),\n+  optmulti(\"W\", \"warn\", \"Set lint warnings\", \"OPT\"),\n+  optmulti(\"A\", \"allow\", \"Set lint allowed\", \"OPT\"),\n+  optmulti(\"D\", \"deny\", \"Set lint denied\", \"OPT\"),\n+  optmulti(\"F\", \"forbid\", \"Set lint forbidden\", \"OPT\"),\n+  optmulti(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n+  optmulti(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+  optflag( \"v\", \"version\", \"Print version info and exit\"),\n  ]\n }\n "}, {"sha": "10d910636fca7b2645fe3e8ea555eb0a367c9115", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -114,6 +114,13 @@ pub enum OptLevel {\n     Aggressive // -O3\n }\n \n+#[deriving(Clone, Eq)]\n+pub enum DebugInfoLevel {\n+    NoDebugInfo,\n+    LimitedDebugInfo,\n+    FullDebugInfo,\n+}\n+\n #[deriving(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -122,7 +129,7 @@ pub struct Options {\n \n     gc: bool,\n     optimize: OptLevel,\n-    debuginfo: bool,\n+    debuginfo: DebugInfoLevel,\n     lint_opts: ~[(lint::Lint, lint::level)],\n     output_types: ~[back::link::OutputType],\n     // This was mutable for rustpkg, which updates search paths based on the\n@@ -314,7 +321,7 @@ pub fn basic_options() -> @Options {\n         crate_types: ~[],\n         gc: false,\n         optimize: No,\n-        debuginfo: false,\n+        debuginfo: NoDebugInfo,\n         lint_opts: ~[],\n         output_types: ~[],\n         addl_lib_search_paths: @RefCell::new(HashSet::new()),"}, {"sha": "13104cfa40ae718854058517891c9fb13408f447", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -195,6 +195,7 @@\n #[allow(non_camel_case_types)];\n \n use back::abi;\n+use driver::session::FullDebugInfo;\n use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n use middle::const_eval;\n use middle::borrowck::root_map_key;\n@@ -1393,7 +1394,7 @@ fn insert_lllocals<'a>(bcx: &'a Block<'a>,\n             llmap.get().insert(binding_info.id, datum);\n         }\n \n-        if bcx.sess().opts.debuginfo {\n+        if bcx.sess().opts.debuginfo == FullDebugInfo {\n             debuginfo::create_match_binding_metadata(bcx,\n                                                      ident,\n                                                      binding_info.id,\n@@ -2052,7 +2053,7 @@ pub fn store_arg<'a>(mut bcx: &'a Block<'a>,\n             // like `x: T`\n             let arg_ty = node_id_type(bcx, pat.id);\n             if type_of::arg_is_indirect(bcx.ccx(), arg_ty)\n-                && !bcx.ccx().sess.opts.debuginfo {\n+                && bcx.ccx().sess.opts.debuginfo != FullDebugInfo {\n                 // Don't copy an indirect argument to an alloca, the caller\n                 // already put it in a temporary alloca and gave it up, unless\n                 // we emit extra-debug-info, which requires local allocas :(."}, {"sha": "b9d5eb851b92802bf982d6216aa54a725a8d418b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -28,7 +28,7 @@\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n use driver::session;\n-use driver::session::Session;\n+use driver::session::{Session, NoDebugInfo, FullDebugInfo};\n use driver::driver::OutputFilenames;\n use driver::driver::{CrateAnalysis, CrateTranslation};\n use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n@@ -1367,7 +1367,7 @@ fn copy_args_to_allocas<'a>(fcx: &FunctionContext<'a>,\n \n         bcx = _match::store_arg(bcx, args[i].pat, arg_datum, arg_scope_id);\n \n-        if fcx.ccx.sess.opts.debuginfo {\n+        if fcx.ccx.sess.opts.debuginfo == FullDebugInfo {\n             debuginfo::create_argument_metadata(bcx, &args[i]);\n         }\n     }\n@@ -2678,7 +2678,7 @@ pub fn trans_crate(sess: session::Session,\n     }\n \n     glue::emit_tydescs(ccx);\n-    if ccx.sess.opts.debuginfo {\n+    if ccx.sess.opts.debuginfo != NoDebugInfo {\n         debuginfo::finalize(ccx);\n     }\n "}, {"sha": "aabe19deefccc6743a213dfd90dd6d387d3d284a", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -11,6 +11,7 @@\n \n use back::abi;\n use back::link::mangle_internal_name_by_path_and_seq;\n+use driver::session::FullDebugInfo;\n use lib::llvm::ValueRef;\n use middle::moves;\n use middle::trans::base::*;\n@@ -299,7 +300,7 @@ fn load_environment<'a>(bcx: &'a Block<'a>, cdata_ty: ty::t,\n \n     // Store the pointer to closure data in an alloca for debug info because that's what the\n     // llvm.dbg.declare intrinsic expects\n-    let env_pointer_alloca = if bcx.ccx().sess.opts.debuginfo {\n+    let env_pointer_alloca = if bcx.ccx().sess.opts.debuginfo == FullDebugInfo {\n         let alloc = alloc_ty(bcx, ty::mk_mut_ptr(bcx.tcx(), cdata_ty), \"__debuginfo_env_ptr\");\n         Store(bcx, llcdata, alloc);\n         Some(alloc)"}, {"sha": "5011ee8be6e4d000ba5bf641a72a6538c7f40bd8", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -10,6 +10,7 @@\n \n \n use driver::session;\n+use driver::session::NoDebugInfo;\n use lib::llvm::{ContextRef, ModuleRef, ValueRef};\n use lib::llvm::{llvm, TargetData, TypeNames};\n use lib::llvm::mk_target_data;\n@@ -151,7 +152,7 @@ impl CrateContext {\n             let tn = TypeNames::new();\n \n             let mut intrinsics = base::declare_intrinsics(llmod);\n-            if sess.opts.debuginfo {\n+            if sess.opts.debuginfo != NoDebugInfo {\n                 base::declare_dbg_intrinsics(llmod, &mut intrinsics);\n             }\n             let int_type = Type::int(targ_cfg.arch);\n@@ -165,7 +166,7 @@ impl CrateContext {\n             tn.associate_type(\"str_slice\", &str_slice_ty);\n \n             let (crate_map_name, crate_map) = decl_crate_map(sess, link_meta.clone(), llmod);\n-            let dbg_cx = if sess.opts.debuginfo {\n+            let dbg_cx = if sess.opts.debuginfo != NoDebugInfo {\n                 Some(debuginfo::CrateDebugContext::new(llmod))\n             } else {\n                 None"}, {"sha": "215f36a776d2f37969fd8d9f6bdf34e0824f95d2", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use lib::llvm::*;\n+use driver::session::FullDebugInfo;\n use middle::lang_items::{FailFnLangItem, FailBoundsCheckFnLangItem};\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -54,7 +55,7 @@ pub fn trans_stmt<'a>(cx: &'a Block<'a>,\n             match d.node {\n                 ast::DeclLocal(ref local) => {\n                     bcx = init_local(bcx, *local);\n-                    if cx.sess().opts.debuginfo {\n+                    if cx.sess().opts.debuginfo == FullDebugInfo {\n                         debuginfo::create_local_var_metadata(bcx, *local);\n                     }\n                 }"}, {"sha": "e88319e6d6773fadd3855a053a755ab887a43312", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -126,6 +126,7 @@ is still disabled, so there is no need to do anything special with source locati\n \n \n use driver::session;\n+use driver::session::{FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, ContextRef, ValueRef};\n use lib::llvm::debuginfo::*;\n@@ -530,7 +531,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                                      fn_ast_id: ast::NodeId,\n                                      param_substs: Option<@param_substs>,\n                                      llfn: ValueRef) -> FunctionDebugContext {\n-    if !cx.sess.opts.debuginfo {\n+    if cx.sess.opts.debuginfo == NoDebugInfo {\n         return DebugInfoDisabled;\n     }\n \n@@ -706,7 +707,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                               fn_decl: &ast::FnDecl,\n                               param_substs: Option<@param_substs>,\n                               error_span: Span) -> DIArray {\n-        if !cx.sess.opts.debuginfo {\n+        if cx.sess.opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), []);\n         }\n \n@@ -783,8 +784,8 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            // Only create type information if debuginfo is enabled\n-            if cx.sess.opts.debuginfo {\n+            // Only create type information if full debuginfo is enabled\n+            if cx.sess.opts.debuginfo == FullDebugInfo {\n                 let actual_self_type_metadata = type_metadata(cx,\n                                                               actual_self_type,\n                                                               codemap::DUMMY_SP);\n@@ -827,8 +828,8 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                 name_to_append_suffix_to.push_str(\",\");\n             }\n \n-            // Again, only create type information if debuginfo is enabled\n-            if cx.sess.opts.debuginfo {\n+            // Again, only create type information if full debuginfo is enabled\n+            if cx.sess.opts.debuginfo == FullDebugInfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n                 let param_metadata = token::get_ident(ident).get()\n                                                             .with_c_str(|name| {"}, {"sha": "af9b84085e3579f94d8eeded02a398ef527f2e8d", "filename": "src/test/debug-info/issue7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue7712.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-g\n+// compile-flags:-g1\n \n pub trait TraitWithDefaultMethod {\n     fn method(self) {"}, {"sha": "ec2c80034d2262339ce19fcc6b38289bd469c6e6", "filename": "src/test/debug-info/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-android: FIXME(#10381)\n \n-// compile-flags:-g\n+// compile-flags:-g1\n // debugger:run\n \n // Nothing to do here really, just make sure it compiles. See issue #8513."}, {"sha": "ccf1506a56517404f950c6a4f36c57f19dd4f72e", "filename": "src/test/debug-info/limited-debuginfo.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c620719c06fcb3222b95d0d1505306506efb86/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs?ref=14c620719c06fcb3222b95d0d1505306506efb86", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+\n+// compile-flags:-g1\n+\n+// Make sure functions have proper names\n+// debugger:info functions\n+// check:static void limited-debuginfo::main();\n+// check:static void limited-debuginfo::some_function();\n+// check:static void limited-debuginfo::some_other_function();\n+// check:static void limited-debuginfo::zzz();\n+\n+// debugger:rbreak zzz\n+// debugger:run\n+\n+// Make sure there is no information about locals\n+// debugger:finish\n+// debugger:info locals\n+// check:No locals.\n+// debugger:continue\n+\n+\n+#[allow(unused_variable)];\n+\n+struct Struct {\n+    a: i64,\n+    b: i32\n+}\n+\n+fn main() {\n+    some_function(101, 202);\n+}\n+\n+\n+fn zzz() {()}\n+\n+fn some_function(a: int, b: int) {\n+    let some_variable = Struct { a: 11, b: 22 };\n+    let some_other_variable = 23;\n+    zzz();\n+}\n+\n+fn some_other_function(a: int, b: int) -> bool { true }\n\\ No newline at end of file"}]}