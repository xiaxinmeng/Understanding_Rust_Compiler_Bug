{"sha": "fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTE3ZTNmOGQwMGFjZjY3ZjFmZTg2NTkwYzRlOWMwNjcxZGQyYmM=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-26T17:14:49Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-26T17:14:49Z"}, "message": "Adjust markdown text to be more like the rendered text", "tree": {"sha": "d083063f3744082f9f4b416793b955a3dcb0f7fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d083063f3744082f9f4b416793b955a3dcb0f7fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "html_url": "https://github.com/rust-lang/rust/commit/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "714feab05993c35e971a307191ee662932df1ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/714feab05993c35e971a307191ee662932df1ee5", "html_url": "https://github.com/rust-lang/rust/commit/714feab05993c35e971a307191ee662932df1ee5"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "6ec0f0b5ffc5b6200d0b0d23f9c3160da582eeb0", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "patch": "@@ -55,14 +55,12 @@ use crate::ptr;\n ///   and implementors must ensure such contracts remain true.\n ///\n /// * You may not rely on allocations actually happening, even if there are explicit\n-///   heap allocations in the source.\n-///   The optimizer may detect unused allocations that it can either\n+///   heap allocations in the source. The optimizer may detect unused allocations that it can either\n ///   eliminate entirely or move to the stack and thus never invoke the allocator. The\n ///   optimizer may further assume that allocation is infallible, so code that used to fail due\n ///   to allocator failures may now suddenly work because the optimizer worked around the\n-///   need for an allocation.\n-///   More concretely, the following code example is unsound, irrespective of whether your\n-///   custom allocator allows counting how many allocations have happened.\n+///   need for an allocation. More concretely, the following code example is unsound, irrespective\n+///   of whether your custom allocator allows counting how many allocations have happened.\n ///\n ///   ```rust,ignore (unsound and has placeholders)\n ///   drop(Box::new(42));"}, {"sha": "9c6e57381834be39e5a585c397c6610444f235a8", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=fba17e3f8d00acf67f1fe86590c4e9c0671dd2bc", "patch": "@@ -99,9 +99,8 @@ pub unsafe trait AllocRef {\n     /// eliminate entirely or move to the stack and thus never invoke the allocator. The\n     /// optimizer may further assume that allocation is infallible, so code that used to fail due\n     /// to allocator failures may now suddenly work because the optimizer worked around the\n-    /// need for an allocation.\n-    /// More concretely, the following code example is unsound, irrespective of whether your\n-    /// custom allocator allows counting how many allocations have happened.\n+    /// need for an allocation. More concretely, the following code example is unsound, irrespective\n+    /// of whether your custom allocator allows counting how many allocations have happened.\n     ///\n     /// ```rust,ignore (unsound and has placeholders)\n     /// Global::dealloc(Global::alloc(some_layout));"}]}