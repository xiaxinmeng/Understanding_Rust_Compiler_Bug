{"sha": "05a789c09dbe886c82eaece6b2af134de6d277de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTc4OWMwOWRiZTg4NmM4MmVhZWNlNmIyYWYxMzRkZTZkMjc3ZGU=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:07:07Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "refactor method generation assist", "tree": {"sha": "3d2a6bd882ec77fbe6b0d29749c001ca1fe53bb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2a6bd882ec77fbe6b0d29749c001ca1fe53bb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a789c09dbe886c82eaece6b2af134de6d277de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a789c09dbe886c82eaece6b2af134de6d277de", "html_url": "https://github.com/rust-lang/rust/commit/05a789c09dbe886c82eaece6b2af134de6d277de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a789c09dbe886c82eaece6b2af134de6d277de/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "url": "https://api.github.com/repos/rust-lang/rust/commits/9217f6dcf73ee9dd9fae8888ed33ada96ec49110", "html_url": "https://github.com/rust-lang/rust/commit/9217f6dcf73ee9dd9fae8888ed33ada96ec49110"}], "stats": {"total": 122, "additions": 54, "deletions": 68}, "files": [{"sha": "cb281d5dcb3ab07e6d1aa179ce5f2659d9a1a027", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 54, "deletions": 67, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/05a789c09dbe886c82eaece6b2af134de6d277de/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a789c09dbe886c82eaece6b2af134de6d277de/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=05a789c09dbe886c82eaece6b2af134de6d277de", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, ArgList, ArgListOwner, AstNode, ModuleItemOwner,\n+        make, ArgListOwner, AstNode, ModuleItemOwner,\n     },\n     SyntaxKind, SyntaxNode, TextSize,\n };\n@@ -17,27 +17,6 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n-enum FuncExpr {\n-    Func(ast::CallExpr),\n-    Method(ast::MethodCallExpr),\n-}\n-\n-impl FuncExpr {\n-    fn arg_list(&self) -> Option<ArgList> {\n-        match self {\n-            FuncExpr::Func(fn_call) => fn_call.arg_list(),\n-            FuncExpr::Method(m_call) => m_call.arg_list(),\n-        }\n-    }\n-\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            FuncExpr::Func(fn_call) => fn_call.syntax(),\n-            FuncExpr::Method(m_call) => m_call.syntax(),\n-        }\n-    }\n-}\n-\n // Assist: generate_function\n //\n // Adds a stub function with a signature matching the function under the cursor.\n@@ -64,6 +43,31 @@ impl FuncExpr {\n //\n // ```\n pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    gen_fn(acc, ctx).or_else(|| gen_method(acc, ctx))\n+}\n+\n+enum FuncExpr {\n+    Func(ast::CallExpr),\n+    Method(ast::MethodCallExpr),\n+}\n+\n+impl FuncExpr {\n+    fn arg_list(&self) -> Option<ast::ArgList> {\n+        match self {\n+            FuncExpr::Func(fn_call) => fn_call.arg_list(),\n+            FuncExpr::Method(m_call) => m_call.arg_list(),\n+        }\n+    }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            FuncExpr::Func(fn_call) => fn_call.syntax(),\n+            FuncExpr::Method(m_call) => m_call.syntax(),\n+        }\n+    }\n+}\n+\n+fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n \n@@ -100,7 +104,7 @@ pub(crate) fn generate_function(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     )\n }\n \n-pub(crate) fn generate_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n     let fn_name: ast::NameRef = ast::NameRef::cast(\n         call.syntax().children().find(|child| child.kind() == SyntaxKind::NAME_REF)?,\n@@ -1351,8 +1355,7 @@ fn bar(baz: ()) {}\n \n     #[test]\n     fn create_method_with_no_args() {\n-        // FIXME: This is wrong, this should just work.\n-        check_assist_not_applicable(\n+        check_assist(\n             generate_function,\n             r#\"\n struct Foo;\n@@ -1361,7 +1364,19 @@ impl Foo {\n         self.bar()$0;\n     }\n }\n-        \"#,\n+\"#,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {\n+        self.bar();\n+    }\n+\n+    fn bar(&self) ${0:-> ()} {\n+        todo!()\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -1389,52 +1404,38 @@ async fn bar(arg: i32) ${0:-> ()} {\n     #[test]\n     fn create_method() {\n         check_assist(\n-            generate_method,\n+            generate_function,\n             r\"\n struct S;\n-\n-fn foo() {\n-    S.bar$0();\n-}\n-\n+fn foo() {S.bar$0();}\n \",\n             r\"\n struct S;\n-\n-fn foo() {\n-    S.bar();\n-}\n+fn foo() {S.bar();}\n impl S {\n \n \n fn bar(&self) ${0:-> ()} {\n     todo!()\n }\n }\n-\n \",\n         )\n     }\n \n     #[test]\n     fn create_method_within_an_impl() {\n         check_assist(\n-            generate_method,\n+            generate_function,\n             r\"\n struct S;\n-\n-fn foo() {\n-    S.bar$0();\n-}\n+fn foo() {S.bar$0();}\n impl S {}\n \n \",\n             r\"\n struct S;\n-\n-fn foo() {\n-    S.bar();\n-}\n+fn foo() {S.bar();}\n impl S {\n     fn bar(&self) ${0:-> ()} {\n         todo!()\n@@ -1448,15 +1449,12 @@ impl S {\n     #[test]\n     fn create_method_from_different_module() {\n         check_assist(\n-            generate_method,\n+            generate_function,\n             r\"\n mod s {\n     pub struct S;\n }\n-fn foo() {\n-    s::S.bar$0();\n-}\n-\n+fn foo() {s::S.bar$0();}\n \",\n             r\"\n mod s {\n@@ -1469,18 +1467,15 @@ impl S {\n     }\n }\n }\n-fn foo() {\n-    s::S.bar();\n-}\n-\n+fn foo() {s::S.bar();}\n \",\n         )\n     }\n \n     #[test]\n     fn create_method_from_descendant_module() {\n         check_assist(\n-            generate_method,\n+            generate_function,\n             r\"\n struct S;\n mod s {\n@@ -1512,29 +1507,21 @@ fn bar(&self) ${0:-> ()} {\n     #[test]\n     fn create_method_with_cursor_anywhere_on_call_expresion() {\n         check_assist(\n-            generate_method,\n+            generate_function,\n             r\"\n struct S;\n-\n-fn foo() {\n-    $0S.bar();\n-}\n-\n+fn foo() {$0S.bar();}\n \",\n             r\"\n struct S;\n-\n-fn foo() {\n-    S.bar();\n-}\n+fn foo() {S.bar();}\n impl S {\n \n \n fn bar(&self) ${0:-> ()} {\n     todo!()\n }\n }\n-\n \",\n         )\n     }"}, {"sha": "bb9d5dd9915d2a842340859dfe5a42c2267e13c3", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05a789c09dbe886c82eaece6b2af134de6d277de/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a789c09dbe886c82eaece6b2af134de6d277de/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=05a789c09dbe886c82eaece6b2af134de6d277de", "patch": "@@ -151,7 +151,6 @@ mod handlers {\n             generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_function::generate_method,\n             generate_getter::generate_getter,\n             generate_getter::generate_getter_mut,\n             generate_impl::generate_impl,"}]}