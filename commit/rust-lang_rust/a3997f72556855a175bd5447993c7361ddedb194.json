{"sha": "a3997f72556855a175bd5447993c7361ddedb194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTk3ZjcyNTU2ODU1YTE3NWJkNTQ0Nzk5M2M3MzYxZGRlZGIxOTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-25T17:54:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-25T17:54:51Z"}, "message": "add regression test", "tree": {"sha": "edfe66f801810c3aafdc6ef7a71c045e39e33443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfe66f801810c3aafdc6ef7a71c045e39e33443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3997f72556855a175bd5447993c7361ddedb194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3997f72556855a175bd5447993c7361ddedb194", "html_url": "https://github.com/rust-lang/rust/commit/a3997f72556855a175bd5447993c7361ddedb194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3997f72556855a175bd5447993c7361ddedb194/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd5516272e44b08ec01fc48bf6987e9a3409b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd5516272e44b08ec01fc48bf6987e9a3409b71", "html_url": "https://github.com/rust-lang/rust/commit/2fd5516272e44b08ec01fc48bf6987e9a3409b71"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "9138dd50defa06146503c5691decd12b78a07ba0", "filename": "src/test/rustdoc/issue-52873.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/a3997f72556855a175bd5447993c7361ddedb194/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3997f72556855a175bd5447993c7361ddedb194/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-52873.rs?ref=a3997f72556855a175bd5447993c7361ddedb194", "patch": "@@ -0,0 +1,171 @@\n+// Regression test for #52873. We used to ICE due to unexpected\n+// overflows when checking for \"blanket impl inclusion\".\n+\n+use std::marker::PhantomData;\n+use std::cmp::Ordering;\n+use std::ops::{Add, Mul};\n+\n+pub type True = B1;\n+pub type False = B0;\n+pub type U0 = UTerm;\n+pub type U1 = UInt<UTerm, B1>;\n+\n+pub trait NonZero {}\n+\n+pub trait Bit {\n+}\n+\n+pub trait Unsigned {\n+}\n+\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Debug, Default)]\n+pub struct B0;\n+\n+impl B0 {\n+    #[inline]\n+    pub fn new() -> B0 {\n+        B0\n+    }\n+}\n+\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Debug, Default)]\n+pub struct B1;\n+\n+impl B1 {\n+    #[inline]\n+    pub fn new() -> B1 {\n+        B1\n+    }\n+}\n+\n+impl Bit for B0 {\n+}\n+\n+impl Bit for B1 {\n+}\n+\n+impl NonZero for B1 {}\n+\n+pub trait PrivatePow<Y, N> {\n+    type Output;\n+}\n+pub type PrivatePowOut<A, Y, N> = <A as PrivatePow<Y, N>>::Output;\n+\n+pub type Add1<A> = <A as Add<::B1>>::Output;\n+pub type Prod<A, B> = <A as Mul<B>>::Output;\n+pub type Square<A> = <A as Mul>::Output;\n+pub type Sum<A, B> = <A as Add<B>>::Output;\n+\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Debug, Default)]\n+pub struct UTerm;\n+\n+impl UTerm {\n+    #[inline]\n+    pub fn new() -> UTerm {\n+        UTerm\n+    }\n+}\n+\n+impl Unsigned for UTerm {\n+}\n+\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Debug, Default)]\n+pub struct UInt<U, B> {\n+    _marker: PhantomData<(U, B)>,\n+}\n+\n+impl<U: Unsigned, B: Bit> UInt<U, B> {\n+    #[inline]\n+    pub fn new() -> UInt<U, B> {\n+        UInt {\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+impl<U: Unsigned, B: Bit> Unsigned for UInt<U, B> {\n+}\n+\n+impl<U: Unsigned, B: Bit> NonZero for UInt<U, B> {}\n+\n+impl Add<B0> for UTerm {\n+    type Output = UTerm;\n+    fn add(self, _: B0) -> Self::Output {\n+        UTerm\n+    }\n+}\n+\n+impl<U: Unsigned, B: Bit> Add<B0> for UInt<U, B> {\n+    type Output = UInt<U, B>;\n+    fn add(self, _: B0) -> Self::Output {\n+        UInt::new()\n+    }\n+}\n+\n+impl<U: Unsigned> Add<U> for UTerm {\n+    type Output = U;\n+    fn add(self, _: U) -> Self::Output {\n+        unsafe { ::std::mem::uninitialized() }\n+    }\n+}\n+\n+impl<U: Unsigned, B: Bit> Mul<B0> for UInt<U, B> {\n+    type Output = UTerm;\n+    fn mul(self, _: B0) -> Self::Output {\n+        UTerm\n+    }\n+}\n+\n+impl<U: Unsigned, B: Bit> Mul<B1> for UInt<U, B> {\n+    type Output = UInt<U, B>;\n+    fn mul(self, _: B1) -> Self::Output {\n+        UInt::new()\n+    }\n+}\n+\n+impl<U: Unsigned> Mul<U> for UTerm {\n+    type Output = UTerm;\n+    fn mul(self, _: U) -> Self::Output {\n+        UTerm\n+    }\n+}\n+\n+impl<Ul: Unsigned, B: Bit, Ur: Unsigned> Mul<UInt<Ur, B>> for UInt<Ul, B0>\n+where\n+    Ul: Mul<UInt<Ur, B>>,\n+{\n+    type Output = UInt<Prod<Ul, UInt<Ur, B>>, B0>;\n+    fn mul(self, _: UInt<Ur, B>) -> Self::Output {\n+        unsafe { ::std::mem::uninitialized() }\n+    }\n+}\n+\n+pub trait Pow<Exp> {\n+    type Output;\n+}\n+\n+impl<X: Unsigned, N: Unsigned> Pow<N> for X\n+where\n+    X: PrivatePow<U1, N>,\n+{\n+    type Output = PrivatePowOut<X, U1, N>;\n+}\n+\n+impl<Y: Unsigned, X: Unsigned> PrivatePow<Y, U0> for X {\n+    type Output = Y;\n+}\n+\n+impl<Y: Unsigned, X: Unsigned> PrivatePow<Y, U1> for X\n+where\n+    X: Mul<Y>,\n+{\n+    type Output = Prod<X, Y>;\n+}\n+\n+impl<Y: Unsigned, U: Unsigned, B: Bit, X: Unsigned> PrivatePow<Y, UInt<UInt<U, B>, B0>> for X\n+where\n+    X: Mul,\n+    Square<X>: PrivatePow<Y, UInt<U, B>>,\n+{\n+    type Output = PrivatePowOut<Square<X>, Y, UInt<U, B>>;\n+}"}]}