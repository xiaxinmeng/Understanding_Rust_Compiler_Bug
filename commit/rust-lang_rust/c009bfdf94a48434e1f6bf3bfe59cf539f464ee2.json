{"sha": "c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDliZmRmOTRhNDg0MzRlMWY2YmYzYmZlNTljZjUzOWY0NjRlZTI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-25T01:22:40Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:31:34Z"}, "message": "Make at_exit initialize lazily", "tree": {"sha": "1285f0852045384fbba6e3b9ea4e157fe06c321b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1285f0852045384fbba6e3b9ea4e157fe06c321b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "html_url": "https://github.com/rust-lang/rust/commit/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66681cd31674e1a2d0b9675ef8183c463470bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66681cd31674e1a2d0b9675ef8183c463470bb5", "html_url": "https://github.com/rust-lang/rust/commit/b66681cd31674e1a2d0b9675ef8183c463470bb5"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "6ab00cfe8fa6a616cd67b54deec98bb7013065ef", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "patch": "@@ -138,7 +138,7 @@ pub use funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n pub use funcs::c95::stdio::{fwrite, perror, puts, remove, rename, rewind};\n pub use funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n \n-pub use funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit};\n+pub use funcs::c95::stdlib::{abs, atof, atoi, calloc, exit, _exit, atexit};\n pub use funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n pub use funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n pub use funcs::c95::stdlib::{strtoul, system};\n@@ -4102,7 +4102,7 @@ pub mod funcs {\n                 pub fn free(p: *mut c_void);\n                 pub fn exit(status: c_int) -> !;\n                 pub fn _exit(status: c_int) -> !;\n-                // Omitted: atexit.\n+                pub fn atexit(cb: extern fn()) -> c_int;\n                 pub fn system(s: *const c_char) -> c_int;\n                 pub fn getenv(s: *const c_char) -> *mut c_char;\n                 // Omitted: bsearch, qsort"}, {"sha": "550c8d2fabacaa1bc49a418e775e971ae377fab2", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "patch": "@@ -43,7 +43,6 @@ use boxed::Box;\n use ops::{Drop, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n-use os;\n use path::{Path, GenericPath, BytesContainer};\n use sys;\n use ptr::RawPtr;"}, {"sha": "9ddb59bfffcf537771483faf687e6c9bf9864d16", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "patch": "@@ -14,41 +14,32 @@\n \n use core::prelude::*;\n \n+use libc;\n use boxed::Box;\n use vec::Vec;\n-use sync::atomic;\n+use sync::{atomic, Once, ONCE_INIT};\n use mem;\n use thunk::Thunk;\n \n use rt::exclusive::Exclusive;\n \n type Queue = Exclusive<Vec<Thunk>>;\n \n+static INIT: Once = ONCE_INIT;\n static QUEUE: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n static RUNNING: atomic::AtomicBool = atomic::INIT_ATOMIC_BOOL;\n \n-pub fn init() {\n+fn init() {\n     let state: Box<Queue> = box Exclusive::new(Vec::new());\n     unsafe {\n-        rtassert!(!RUNNING.load(atomic::SeqCst));\n-        assert!(QUEUE.swap(mem::transmute(state), atomic::SeqCst) == 0);\n-    }\n-}\n-\n-pub fn push(f: Thunk) {\n-    unsafe {\n-        // Note that the check against 0 for the queue pointer is not atomic at\n-        // all with respect to `run`, meaning that this could theoretically be a\n-        // use-after-free. There's not much we can do to protect against that,\n-        // however. Let's just assume a well-behaved runtime and go from there!\n-        rtassert!(!RUNNING.load(atomic::SeqCst));\n-        let queue = QUEUE.load(atomic::SeqCst);\n-        rtassert!(queue != 0);\n-        (*(queue as *const Queue)).lock().push(f);\n+        QUEUE.store(mem::transmute(state), atomic::SeqCst);\n+        libc::atexit(run);\n     }\n }\n \n-pub fn run() {\n+// Note: this is private and so can only be called via atexit above,\n+// which guarantees initialization.\n+extern fn run() {\n     let cur = unsafe {\n         rtassert!(!RUNNING.load(atomic::SeqCst));\n         let queue = QUEUE.swap(0, atomic::SeqCst);\n@@ -63,3 +54,17 @@ pub fn run() {\n         to_run.invoke(());\n     }\n }\n+\n+pub fn push(f: Thunk) {\n+    INIT.doit(init);\n+    unsafe {\n+        // Note that the check against 0 for the queue pointer is not atomic at\n+        // all with respect to `run`, meaning that this could theoretically be a\n+        // use-after-free. There's not much we can do to protect against that,\n+        // however. Let's just assume a well-behaved runtime and go from there!\n+        rtassert!(!RUNNING.load(atomic::SeqCst));\n+        let queue = QUEUE.load(atomic::SeqCst);\n+        rtassert!(queue != 0);\n+        (*(queue as *const Queue)).lock().push(f);\n+    }\n+}"}, {"sha": "5d5ccefda5dc25acf689f97c4bfad7d42917156f", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c009bfdf94a48434e1f6bf3bfe59cf539f464ee2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=c009bfdf94a48434e1f6bf3bfe59cf539f464ee2", "patch": "@@ -100,7 +100,6 @@ pub fn init(argc: int, argv: *const *const u8) {\n     unsafe {\n         args::init(argc, argv);\n         local_ptr::init();\n-        at_exit_imp::init();\n         thread::init();\n         unwind::register(failure::on_fail);\n     }\n@@ -212,7 +211,6 @@ pub unsafe fn cleanup() {\n     args::cleanup();\n     thread::cleanup();\n     local_ptr::cleanup();\n-    at_exit_imp::run();\n }\n \n // FIXME: these probably shouldn't be public..."}]}