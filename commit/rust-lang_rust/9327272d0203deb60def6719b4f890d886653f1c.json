{"sha": "9327272d0203deb60def6719b4f890d886653f1c", "node_id": "C_kwDOAAsO6NoAKDkzMjcyNzJkMDIwM2RlYjYwZGVmNjcxOWI0Zjg5MGQ4ODY2NTNmMWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-23T18:02:06Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-24T13:44:21Z"}, "message": "Try out caching the stable hash of Ty within itself", "tree": {"sha": "9cad1f48035b54564b836f41c3266e3c80675953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cad1f48035b54564b836f41c3266e3c80675953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9327272d0203deb60def6719b4f890d886653f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9327272d0203deb60def6719b4f890d886653f1c", "html_url": "https://github.com/rust-lang/rust/commit/9327272d0203deb60def6719b4f890d886653f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9327272d0203deb60def6719b4f890d886653f1c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ccfe2ff1d59666dc0188dfd5847304fec257565", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ccfe2ff1d59666dc0188dfd5847304fec257565", "html_url": "https://github.com/rust-lang/rust/commit/7ccfe2ff1d59666dc0188dfd5847304fec257565"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "0416ed17977d60e034f0470d4956be3db9a385b4", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9327272d0203deb60def6719b4f890d886653f1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9327272d0203deb60def6719b4f890d886653f1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9327272d0203deb60def6719b4f890d886653f1c", "patch": "@@ -24,6 +24,7 @@ use crate::ty::{\n     RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut, UintTy,\n };\n use rustc_ast as ast;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::memmap::Mmap;\n@@ -58,6 +59,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n+use rustc_type_ir::TypeFlags;\n use smallvec::SmallVec;\n use std::any::Any;\n use std::borrow::Borrow;\n@@ -140,16 +142,40 @@ impl<'tcx> CtxtInterners<'tcx> {\n     /// Interns a type.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n-    fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {\n+    fn intern_ty(\n+        &self,\n+        kind: TyKind<'tcx>,\n+        sess: &Session,\n+        resolutions: &ty::ResolverOutputs,\n+    ) -> Ty<'tcx> {\n         Ty(Interned::new_unchecked(\n             self.type_\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n \n+                    let stable_hash = if flags.flags.intersects(TypeFlags::HAS_RE_INFER) {\n+                        Fingerprint::ZERO\n+                    } else {\n+                        let mut hasher = StableHasher::new();\n+                        let mut hcx = StableHashingContext::new(\n+                            sess,\n+                            &resolutions.definitions,\n+                            &*resolutions.cstore,\n+                        );\n+\n+                        hcx.while_hashing_spans(false, |hcx| {\n+                            hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                                kind.hash_stable(hcx, &mut hasher);\n+                            });\n+                        });\n+                        hasher.finish()\n+                    };\n+\n                     let ty_struct = TyS {\n                         kind,\n                         flags: flags.flags,\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n+                        stable_hash,\n                     };\n \n                     InternedInSet(self.arena.alloc(ty_struct))\n@@ -887,8 +913,12 @@ pub enum UserType<'tcx> {\n }\n \n impl<'tcx> CommonTypes<'tcx> {\n-    fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n-        let mk = |ty| interners.intern_ty(ty);\n+    fn new(\n+        interners: &CtxtInterners<'tcx>,\n+        sess: &Session,\n+        resolutions: &ty::ResolverOutputs,\n+    ) -> CommonTypes<'tcx> {\n+        let mk = |ty| interners.intern_ty(ty, sess, resolutions);\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -1162,7 +1192,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(arena);\n-        let common_types = CommonTypes::new(&interners);\n+        let common_types = CommonTypes::new(&interners, s, &resolutions);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n \n@@ -2276,7 +2306,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n-        self.interners.intern_ty(st)\n+        self.interners.intern_ty(st, self.sess, &self.gcx.untracked_resolutions)\n     }\n \n     #[inline]"}, {"sha": "7a14a568c1cb4e1ad60fb8670886d3cd88d14081", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9327272d0203deb60def6719b4f890d886653f1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9327272d0203deb60def6719b4f890d886653f1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9327272d0203deb60def6719b4f890d886653f1c", "patch": "@@ -17,6 +17,7 @@ pub use self::Variance::*;\n pub use adt::*;\n pub use assoc::*;\n pub use generics::*;\n+use rustc_data_structures::fingerprint::Fingerprint;\n pub use vtable::*;\n \n use crate::metadata::ModChild;\n@@ -424,11 +425,15 @@ crate struct TyS<'tcx> {\n     /// De Bruijn indices within the type are contained within `0..D`\n     /// (exclusive).\n     outer_exclusive_binder: ty::DebruijnIndex,\n+\n+    /// The stable hash of the type. This way hashing of types will not have to work\n+    /// on the address of the type anymore, but can instead just read this field\n+    stable_hash: Fingerprint,\n }\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(TyS<'_>, 40);\n+static_assert_size!(TyS<'_>, 56);\n \n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -442,21 +447,25 @@ static BOOL_TYS: TyS<'static> = TyS {\n     kind: ty::Bool,\n     flags: TypeFlags::empty(),\n     outer_exclusive_binder: DebruijnIndex::from_usize(0),\n+    stable_hash: Fingerprint::ZERO,\n };\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Ty<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let TyS {\n-            ref kind,\n+            kind,\n \n             // The other fields just provide fast access to information that is\n             // also contained in `kind`, so no need to hash them.\n             flags: _,\n \n             outer_exclusive_binder: _,\n+\n+            stable_hash,\n         } = self.0.0;\n \n-        kind.hash_stable(hcx, hasher);\n+        assert_ne!(*stable_hash, Fingerprint::ZERO, \"{:#?}\", kind);\n+        stable_hash.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "e4d58d3ccdb29b5994582e4d4fc2eb9b7b7e5d0e", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9327272d0203deb60def6719b4f890d886653f1c/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9327272d0203deb60def6719b4f890d886653f1c/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=9327272d0203deb60def6719b4f890d886653f1c", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h611df9c6948c15f7E)\n+error: symbol-name(_ZN5basic4main17h87acd86b3a6f1754E)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h611df9c6948c15f7)\n+error: demangling(basic::main::h87acd86b3a6f1754)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "c987ebc534302c852aec85945fbce5125aea38c5", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9327272d0203deb60def6719b4f890d886653f1c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9327272d0203deb60def6719b4f890d886653f1c/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=9327272d0203deb60def6719b4f890d886653f1c", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h5425dadb5b1e5fb6E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h8d22952c45e20d65E)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h5425dadb5b1e5fb6)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h8d22952c45e20d65)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}]}