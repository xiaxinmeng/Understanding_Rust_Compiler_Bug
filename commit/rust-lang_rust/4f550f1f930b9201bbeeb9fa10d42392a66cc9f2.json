{"sha": "4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTUwZjFmOTMwYjkyMDFiYmVlYjlmYTEwZDQyMzkyYTY2Y2M5ZjI=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-14T08:25:29Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-14T20:55:46Z"}, "message": "Improve warnings on incompatible options involving -Zinstrument-coverage\n\nAdds checks for:\n\n* `no_core` attribute\n* explicitly-enabled `legacy` symbol mangling\n* mir_opt_level > 1 (which enables inlining)\n\nI removed code from the `Inline` MIR pass that forcibly disabled\ninlining if `-Zinstrument-coverage` was set. The default `mir_opt_level`\ndoes not enable inlining anyway. But if the level is explicitly set and\nis greater than 1, I issue a warning.\n\nThe new warnings show up in tests, which is much better for diagnosing\npotential option conflicts in these cases.", "tree": {"sha": "da2913fa47cb8ec9ee48b10c190284fba50b7e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2913fa47cb8ec9ee48b10c190284fba50b7e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "html_url": "https://github.com/rust-lang/rust/commit/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb963ffe451bfbc001ea86712a94619903bfbaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb963ffe451bfbc001ea86712a94619903bfbaf8", "html_url": "https://github.com/rust-lang/rust/commit/eb963ffe451bfbc001ea86712a94619903bfbaf8"}], "stats": {"total": 152, "additions": 103, "deletions": 49}, "files": [{"sha": "7a7def0696dbd37d14da5a80b23fd5a30eb7b50d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -561,7 +561,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n-    tracked!(mir_opt_level, 3);\n+    tracked!(mir_opt_level, Some(3));\n     tracked!(mutable_noalias, true);\n     tracked!(new_llvm_pass_manager, true);\n     tracked!(no_codegen, true);\n@@ -587,7 +587,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n-    tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n+    tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));"}, {"sha": "019ca5174a22386986ca6f0f6f5ca89b492e432c", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -706,14 +706,21 @@ impl<'a> CrateLoader<'a> {\n         self.inject_dependency_if(cnum, \"a panic runtime\", &|data| data.needs_panic_runtime());\n     }\n \n-    fn inject_profiler_runtime(&mut self) {\n+    fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n         if (self.sess.opts.debugging_opts.instrument_coverage\n             || self.sess.opts.debugging_opts.profile\n             || self.sess.opts.cg.profile_generate.enabled())\n             && !self.sess.opts.debugging_opts.no_profiler_runtime\n         {\n             info!(\"loading profiler\");\n \n+            if self.sess.contains_name(&krate.attrs, sym::no_core) {\n+                self.sess.err(\n+                    \"`profiler_builtins` crate (required by compiler options) \\\n+                               is not compatible with crate attribute `#![no_core]`\",\n+                );\n+            }\n+\n             let name = sym::profiler_builtins;\n             let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n             let data = self.cstore.get_crate_data(cnum);\n@@ -879,7 +886,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.inject_profiler_runtime();\n+        self.inject_profiler_runtime(krate);\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n "}, {"sha": "b0c75c1de9d17c01066d7c8297437a26d0c8db83", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -663,7 +663,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),\n             panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),\n-            symbol_mangling_version: tcx.sess.opts.debugging_opts.symbol_mangling_version,\n+            symbol_mangling_version: tcx\n+                .sess\n+                .opts\n+                .debugging_opts\n+                .symbol_mangling_version\n+                .unwrap_or(SymbolManglingVersion::default()),\n \n             crate_deps,\n             dylib_dependency_formats,"}, {"sha": "49b1cf92600e82d1af58d380a61c9f0dfbbb5f30", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n     self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n@@ -708,7 +709,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 3 {\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) >= 3 {\n             self.eval_rvalue_with_identities(rvalue, place)\n         } else {\n             self.use_ecx(|this| this.ecx.eval_rvalue_into_place(rvalue, place))\n@@ -886,7 +887,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     /// Returns `true` if and only if this `op` should be const-propagated into.\n     fn should_const_prop(&mut self, op: OpTy<'tcx>) -> bool {\n-        let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n+        let mir_opt_level =\n+            self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT);\n \n         if mir_opt_level == 0 {\n             return false;\n@@ -1056,7 +1058,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n         // Only const prop copies and moves on `mir_opt_level=2` as doing so\n         // currently slightly increases compile time in some cases.\n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) >= 2 {\n             self.propagate_operand(operand)\n         }\n     }"}, {"sha": "2363b6d58e1d857799cc6fa87ea4baa11c873732", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -115,6 +115,7 @@ use rustc_middle::mir::{\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time\n@@ -129,7 +130,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Only run at mir-opt-level=2 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) <= 1 {\n             return;\n         }\n "}, {"sha": "023561923eebf7bba37ec9cbb8f6cb5384116560", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -1,6 +1,7 @@\n use crate::{transform::MirPass, util::patch::MirPatch};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use std::fmt::Debug;\n \n use super::simplify::simplify_cfg;\n@@ -26,7 +27,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 2 {\n             return;\n         }\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);"}, {"sha": "1a927f9bf505c19900a091eb7dcf4f060102a050", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -37,15 +38,7 @@ struct CallSite<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n-            return;\n-        }\n-\n-        if tcx.sess.opts.debugging_opts.instrument_coverage {\n-            // The current implementation of source code coverage injects code region counters\n-            // into the MIR, and assumes a 1-to-1 correspondence between MIR and source-code-\n-            // based function.\n-            debug!(\"function inlining is disabled when compiling with `instrument_coverage`\");\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 2 {\n             return;\n         }\n "}, {"sha": "e28e3f59a5e00188d2992f1a0d604b9039faee2a", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -1,6 +1,7 @@\n use crate::transform::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct MatchBranchSimplification;\n \n@@ -38,7 +39,7 @@ pub struct MatchBranchSimplification;\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) <= 1 {\n             return;\n         }\n "}, {"sha": "039dfe2c0d5009e39f46d154628f34c6267ee5bf", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n@@ -373,7 +374,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level;\n+    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT);\n \n     // Lowering generator control-flow and variables has to happen before we do anything else\n     // to them. We run some optimizations before that, because they may be harder to do on the state"}, {"sha": "de4aee7ddbcc22f011ccaff0568c3a0a612f546c", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -5,12 +5,13 @@ use crate::transform::{simplify, MirPass};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct MultipleReturnTerminators;\n \n impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 3 {\n             return;\n         }\n "}, {"sha": "6e1dc03b9cb31e44acfa6d1ffe6a2a04eea0e293", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -5,6 +5,7 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_middle::mir::visit::{MutVisitor, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n use crate::transform::MirPass;\n \n@@ -34,7 +35,7 @@ pub struct RenameReturnPlace;\n \n impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) == 0 {\n             return;\n         }\n "}, {"sha": "c9053ce81cd0079a354cbccac434d388cdeb3f1c", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -7,12 +7,13 @@ use crate::transform::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n     fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 3 {\n             // Enable only under -Zmir-opt-level=3 as in some cases (check the deeply-nested-opt\n             // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n             return;"}, {"sha": "47e494b78c7dfd8b8fefd5ba93761a7d218adedc", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -174,6 +174,8 @@ pub enum MirSpanview {\n     Block,\n }\n \n+pub const MIR_OPT_LEVEL_DEFAULT: usize = 1;\n+\n #[derive(Clone, PartialEq, Hash)]\n pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n@@ -212,6 +214,12 @@ pub enum SymbolManglingVersion {\n     V0,\n }\n \n+impl SymbolManglingVersion {\n+    pub fn default() -> Self {\n+        SymbolManglingVersion::Legacy\n+    }\n+}\n+\n impl_stable_hash_via_hash!(SymbolManglingVersion);\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n@@ -1757,7 +1765,33 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n-        debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n+        match debugging_opts.symbol_mangling_version {\n+            None => {\n+                debugging_opts.symbol_mangling_version = Some(SymbolManglingVersion::V0);\n+            }\n+            Some(SymbolManglingVersion::Legacy) => {\n+                early_warn(\n+                    error_format,\n+                    \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n+                    but `-Z symbol-mangling-version=legacy` was specified\",\n+                );\n+            }\n+            Some(SymbolManglingVersion::V0) => {}\n+        }\n+\n+        match debugging_opts.mir_opt_level {\n+            Some(level) if level > 1 => {\n+                early_warn(\n+                    error_format,\n+                    &format!(\n+                        \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n+                        limits the effectiveness of `-Z instrument-coverage`.\",\n+                        level,\n+                    ),\n+                );\n+            }\n+            _ => {}\n+        }\n     }\n \n     if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {\n@@ -2162,7 +2196,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n     impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n-    impl_dep_tracking_hash_via_hash!(SymbolManglingVersion);\n+    impl_dep_tracking_hash_via_hash!(Option<SymbolManglingVersion>);\n     impl_dep_tracking_hash_via_hash!(Option<SourceFileHashAlgorithm>);\n     impl_dep_tracking_hash_via_hash!(TrimmedDefPaths);\n "}, {"sha": "1909550aca489ab7ef5e1b22367f0e9b604822ab", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -677,12 +677,12 @@ macro_rules! options {\n         }\n \n         fn parse_symbol_mangling_version(\n-            slot: &mut SymbolManglingVersion,\n+            slot: &mut Option<SymbolManglingVersion>,\n             v: Option<&str>,\n         ) -> bool {\n             *slot = match v {\n-                Some(\"legacy\") => SymbolManglingVersion::Legacy,\n-                Some(\"v0\") => SymbolManglingVersion::V0,\n+                Some(\"legacy\") => Some(SymbolManglingVersion::Legacy),\n+                Some(\"v0\") => Some(SymbolManglingVersion::V0),\n                 _ => return false,\n             };\n             true\n@@ -970,7 +970,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: usize = (1, parse_uint, [TRACKED],\n+    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"MIR optimization level (0-3; default: 1)\"),\n     mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),\n@@ -1088,9 +1088,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n-    symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n+    symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n         parse_symbol_mangling_version, [TRACKED],\n-        \"which mangling version to use for symbol names\"),\n+        \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],"}, {"sha": "945e788a1460c35f406e806a555389a937855c98", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -245,7 +245,11 @@ fn compute_symbol_name(\n     // 2. we favor `instantiating_crate` where possible (i.e. when `Some`)\n     let mangling_version_crate = instantiating_crate.unwrap_or(def_id.krate);\n     let mangling_version = if mangling_version_crate == LOCAL_CRATE {\n-        tcx.sess.opts.debugging_opts.symbol_mangling_version\n+        tcx.sess\n+            .opts\n+            .debugging_opts\n+            .symbol_mangling_version\n+            .unwrap_or(SymbolManglingVersion::default())\n     } else {\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };"}, {"sha": "9e5ae21f7026e19db25fff9d29fbc0ef791997ba", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "patch": "@@ -41,7 +41,7 @@ fn arg_value<'a, T: Deref<Target = str>>(\n \n         match arg.next().or_else(|| args.next()) {\n             Some(v) if pred(v) => return Some(v),\n-            _ => {},\n+            _ => {}\n         }\n     }\n     None\n@@ -85,7 +85,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = 0;\n+        config.opts.debugging_opts.mir_opt_level = Some(0);\n     }\n }\n \n@@ -121,11 +121,12 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> = SyncLazy::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n+static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    SyncLazy::new(|| {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n+        hook\n+    });\n \n fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n@@ -257,14 +258,17 @@ pub fn main() {\n \n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n         // We're invoking the compiler programmatically, so we ignore this/\n-        let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n+        let wrapper_mode =\n+            orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n \n         if wrapper_mode {\n             // we still want to be able to invoke it normally though\n             orig_args.remove(1);\n         }\n \n-        if !wrapper_mode && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1) {\n+        if !wrapper_mode\n+            && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1)\n+        {\n             display_help();\n             exit(0);\n         }\n@@ -285,13 +289,11 @@ pub fn main() {\n         if clippy_enabled {\n             args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n             if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                    if s.is_empty() {\n-                        None\n-                    } else {\n-                        Some(s.to_string())\n-                    }\n-                }));\n+                args.extend(\n+                    extra_args\n+                        .split(\"__CLIPPY_HACKERY__\")\n+                        .filter_map(|s| if s.is_empty() { None } else { Some(s.to_string()) }),\n+                );\n             }\n         }\n         let mut clippy = ClippyCallbacks;"}]}