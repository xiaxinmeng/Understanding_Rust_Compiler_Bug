{"sha": "daf8bdca57d0a099f955a33c2f9552b335d06ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjhiZGNhNTdkMGEwOTlmOTU1YTMzYzJmOTU1MmIzMzVkMDZmZjY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-30T02:27:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-30T03:11:23Z"}, "message": "Fix typos in some x86 and arm intrinsics.", "tree": {"sha": "f81ce3af452c13a65a8f395f541bc82d24310e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f81ce3af452c13a65a8f395f541bc82d24310e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf8bdca57d0a099f955a33c2f9552b335d06ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf8bdca57d0a099f955a33c2f9552b335d06ff6", "html_url": "https://github.com/rust-lang/rust/commit/daf8bdca57d0a099f955a33c2f9552b335d06ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf8bdca57d0a099f955a33c2f9552b335d06ff6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9b72657600cdf301bf959f5c849e22a19d22a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9b72657600cdf301bf959f5c849e22a19d22a6", "html_url": "https://github.com/rust-lang/rust/commit/3e9b72657600cdf301bf959f5c849e22a19d22a6"}], "stats": {"total": 118, "additions": 71, "deletions": 47}, "files": [{"sha": "97db7cbb3e0a52fce179bc7c904e4fc460844bba", "filename": "src/etc/platform-intrinsics/arm.json", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Farm.json?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -337,56 +337,56 @@\n             \"args\": [\"0\", \"0\"]\n         },\n         {\n-            \"intrinsic\": \"qtbl1_{0.data_type}\",\n+            \"intrinsic\": \"tbl1_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbl1\",\n             \"ret\": \"i8\",\n-            \"args\": [\"0x128\", \"0u\"]\n+            \"args\": [\"0\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbx1_{0.data_type}\",\n+            \"intrinsic\": \"tbx1_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbx1\",\n             \"ret\": \"i8\",\n             \"args\": [\"0\", \"0\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbl2_{0.data_type}\",\n+            \"intrinsic\": \"tbl2_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbl2\",\n             \"ret\": \"i8\",\n             \"args\": [\"(0,0)f\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbx2_{0.data_type}\",\n+            \"intrinsic\": \"tbx2_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbx2\",\n             \"ret\": \"i8\",\n             \"args\": [\"(0,0)f\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbl3_{0.data_type}\",\n+            \"intrinsic\": \"tbl3_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbl3\",\n             \"ret\": \"i8\",\n             \"args\": [\"(0,0,0)f\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbx3_{0.data_type}\",\n+            \"intrinsic\": \"tbx3_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbx3\",\n             \"ret\": \"i8\",\n             \"args\": [\"0\", \"(0,0,0)f\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbl4_{0.data_type}\",\n+            \"intrinsic\": \"tbl4_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbl4\",\n             \"ret\": \"i8\",\n             \"args\": [\"(0,0,0,0)f\", \"0u\"]\n         },\n         {\n-            \"intrinsic\": \"qtbx4_{0.data_type}\",\n+            \"intrinsic\": \"tbx4_{0.data_type}\",\n             \"width\": [64],\n             \"llvm\": \"tbx4\",\n             \"ret\": \"i8\","}, {"sha": "27da842934c0cd1b7e7a841d492b4835bf0ad586", "filename": "src/etc/platform-intrinsics/x86/sse.json", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse.json?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -35,6 +35,13 @@\n             \"llvm\": \"rcp.ps\",\n             \"ret\": \"f32\",\n             \"args\": [\"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"_sqrt_ps\",\n+            \"width\": [128],\n+            \"llvm\": \"!llvm.sqrt.v4f32\",\n+            \"ret\": \"f32\",\n+            \"args\": [\"0\"]\n         }\n     ]\n }"}, {"sha": "b2a3fe60f1a427db2f0ee08c44eb68e130f53fea", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -99,6 +99,13 @@\n             \"ret\": \"u64\",\n             \"args\": [\"u8\", \"u8\"]\n         },\n+        {\n+            \"intrinsic\": \"_sqrt_pd\",\n+            \"width\": [128],\n+            \"llvm\": \"!llvm.sqrt.v2f64\",\n+            \"ret\": \"f64\",\n+            \"args\": [\"0\"]\n+        },\n         {\n             \"intrinsic\": \"_subs_{0.data_type}\",\n             \"width\": [128],"}, {"sha": "e63182d4857289ef7bcd5ae6cb243e8b9dce9ce5", "filename": "src/etc/platform-intrinsics/x86/sse42.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse42.json?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -25,7 +25,7 @@\n         {\n             \"intrinsic\": \"_cmpestrm\",\n             \"width\": [128],\n-            \"llvm\": \"pcmpestrim128\",\n+            \"llvm\": \"pcmpestrm128\",\n             \"ret\": \"s8\",\n             \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n         },\n@@ -55,49 +55,49 @@\n             \"width\": [128],\n             \"llvm\": \"pcmpistria128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrc\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistric128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistri\",\n             \"width\": [128],\n-            \"llvm\": \"pcmpistrii128\",\n+            \"llvm\": \"pcmpistri128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrm\",\n             \"width\": [128],\n-            \"llvm\": \"pcmpistrim128\",\n+            \"llvm\": \"pcmpistrm128\",\n             \"ret\": \"s8\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistro\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistrio128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrs\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistris128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         },\n         {\n             \"intrinsic\": \"_cmpistrz\",\n             \"width\": [128],\n             \"llvm\": \"pcmpistriz128\",\n             \"ret\": \"S32\",\n-            \"args\": [\"s8\", \"S32\", \"s8\", \"S32\", \"S32\"]\n+            \"args\": [\"s8\", \"s8\", \"S32\"]\n         }\n     ]\n }"}, {"sha": "8ea725ee95df8bb3a9e64975948d870873172dd8", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -2000,82 +2000,82 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(32), 4),\n             definition: Named(\"llvm.neon.vpminf.v4f32\")\n         },\n-        \"qtbl1_s8\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(u(8), 8)],\n+        \"tbl1_s8\" => Intrinsic {\n+            inputs: vec![v(i(8), 8), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbl1\")\n         },\n-        \"qtbl1_u8\" => Intrinsic {\n-            inputs: vec![v(u(8), 16), v(u(8), 8)],\n+        \"tbl1_u8\" => Intrinsic {\n+            inputs: vec![v(u(8), 8), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbl1\")\n         },\n-        \"qtbx1_s8\" => Intrinsic {\n+        \"tbx1_s8\" => Intrinsic {\n             inputs: vec![v(i(8), 8), v(i(8), 8), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbx1\")\n         },\n-        \"qtbx1_u8\" => Intrinsic {\n+        \"tbx1_u8\" => Intrinsic {\n             inputs: vec![v(u(8), 8), v(u(8), 8), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbx1\")\n         },\n-        \"qtbl2_s8\" => Intrinsic {\n+        \"tbl2_s8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbl2\")\n         },\n-        \"qtbl2_u8\" => Intrinsic {\n+        \"tbl2_u8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbl2\")\n         },\n-        \"qtbx2_s8\" => Intrinsic {\n+        \"tbx2_s8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbx2\")\n         },\n-        \"qtbx2_u8\" => Intrinsic {\n+        \"tbx2_u8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbx2\")\n         },\n-        \"qtbl3_s8\" => Intrinsic {\n+        \"tbl3_s8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(i(8), 8), v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbl3\")\n         },\n-        \"qtbl3_u8\" => Intrinsic {\n+        \"tbl3_u8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(u(8), 8), v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbl3\")\n         },\n-        \"qtbx3_s8\" => Intrinsic {\n+        \"tbx3_s8\" => Intrinsic {\n             inputs: vec![v(i(8), 8), agg(true, vec![v(i(8), 8), v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbx3\")\n         },\n-        \"qtbx3_u8\" => Intrinsic {\n+        \"tbx3_u8\" => Intrinsic {\n             inputs: vec![v(u(8), 8), agg(true, vec![v(u(8), 8), v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbx3\")\n         },\n-        \"qtbl4_s8\" => Intrinsic {\n+        \"tbl4_s8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(i(8), 8), v(i(8), 8), v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbl4\")\n         },\n-        \"qtbl4_u8\" => Intrinsic {\n+        \"tbl4_u8\" => Intrinsic {\n             inputs: vec![agg(true, vec![v(u(8), 8), v(u(8), 8), v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbl4\")\n         },\n-        \"qtbx4_s8\" => Intrinsic {\n+        \"tbx4_s8\" => Intrinsic {\n             inputs: vec![v(i(8), 8), agg(true, vec![v(i(8), 8), v(i(8), 8), v(i(8), 8), v(i(8), 8)]), v(u(8), 8)],\n             output: v(i(8), 8),\n             definition: Named(\"llvm.neon.vtbx4\")\n         },\n-        \"qtbx4_u8\" => Intrinsic {\n+        \"tbx4_u8\" => Intrinsic {\n             inputs: vec![v(u(8), 8), agg(true, vec![v(u(8), 8), v(u(8), 8), v(u(8), 8), v(u(8), 8)]), v(u(8), 8)],\n             output: v(u(8), 8),\n             definition: Named(\"llvm.neon.vtbx4\")"}, {"sha": "d86afa7f41f9f117beab1fd2510796060251d2d3", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf8bdca57d0a099f955a33c2f9552b335d06ff6/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=daf8bdca57d0a099f955a33c2f9552b335d06ff6", "patch": "@@ -45,6 +45,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(f(32), 4),\n             definition: Named(\"llvm.x86.sse.rcp.ps\")\n         },\n+        \"_sqrt_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.sqrt.v4f32\")\n+        },\n         \"_adds_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16), v(i(8), 16)],\n             output: v(i(8), 16),\n@@ -155,6 +160,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(64), 2),\n             definition: Named(\"llvm.x86.sse2.psad.bw\")\n         },\n+        \"_sqrt_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.sqrt.v2f64\")\n+        },\n         \"_subs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16), v(i(8), 16)],\n             output: v(i(8), 16),\n@@ -378,7 +388,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         \"_cmpestrm\" => Intrinsic {\n             inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n             output: v(i(8), 16),\n-            definition: Named(\"llvm.x86.sse42.pcmpestrim128\")\n+            definition: Named(\"llvm.x86.sse42.pcmpestrm128\")\n         },\n         \"_cmpestro\" => Intrinsic {\n             inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n@@ -396,37 +406,37 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.sse42.pcmpestriz128\")\n         },\n         \"_cmpistra\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistria128\")\n         },\n         \"_cmpistrc\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistric128\")\n         },\n         \"_cmpistri\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n-            definition: Named(\"llvm.x86.sse42.pcmpistrii128\")\n+            definition: Named(\"llvm.x86.sse42.pcmpistri128\")\n         },\n         \"_cmpistrm\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: v(i(8), 16),\n-            definition: Named(\"llvm.x86.sse42.pcmpistrim128\")\n+            definition: Named(\"llvm.x86.sse42.pcmpistrm128\")\n         },\n         \"_cmpistro\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistrio128\")\n         },\n         \"_cmpistrs\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistris128\")\n         },\n         \"_cmpistrz\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), i(32), v(i(8), 16), i(32), i(32)],\n+            inputs: vec![v(i(8), 16), v(i(8), 16), i(32)],\n             output: i(32),\n             definition: Named(\"llvm.x86.sse42.pcmpistriz128\")\n         },"}]}