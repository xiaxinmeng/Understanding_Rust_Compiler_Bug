{"sha": "0392e2996e828fe5f435b3f13037f8af7ad4563b", "node_id": "C_kwDOAAsO6NoAKDAzOTJlMjk5NmU4MjhmZTVmNDM1YjNmMTMwMzdmOGFmN2FkNDU2M2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T21:44:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T21:44:39Z"}, "message": "Rollup merge of #108954 - notriddle:notriddle/notable-trait-generic, r=camelid\n\nrustdoc: handle generics better when matching notable traits\n\nThis commit makes the `clean::Type::is_same` non-commutative (renaming it `is_doc_subtype_of`), so that a generic `impl` matches a concrete return, but a generic return does not match a concrete `impl`. It makes slice and vector Write for `u8` not match on every generic return value.\n\nFixes #100322\n\nFixes #55082\n\nPreview:\n\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/vec/struct.Vec.html#method.new\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/vec/struct.Vec.html#method.from-12\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/iter/trait.Iterator.html#method.intersperse_with\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/string/struct.String.html#method.as_bytes", "tree": {"sha": "75ef6b25f6b03ec6c6668ffa4dbfe7851affd04f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ef6b25f6b03ec6c6668ffa4dbfe7851affd04f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0392e2996e828fe5f435b3f13037f8af7ad4563b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG3bHCRBK7hj4Ov3rIwAAxzkIAK0+Cmtsz0a37YeSSl6nUaHo\n/aGaVqO8duNeyO7r9M19hPaUbFp75mhCCcDeNgueEN9b+1yDiKbaCkIVZgzRRaUz\nbQ7EIE4fDs3tXe2EXsvIKt43rTU29T/Pxq7XeWB6sOZlTEh0hqwHGGKVrZLrwblS\n18rBUg0Jyofbl3MZFTE1wdRmuqgCutL+tE4V2lxSm/ML/VFl2K+xkFlF5TbwUeLS\nwM/T0MupSJIRL/FXNOc7gPrViEhYkgfbqs+T9/h8vUt1hbNiiG3A3u7eEonH1vl1\n+nhqjHVeCFn3X7f57tBE07aIjhNR2ncCkwJOGtr0Qwu9ov1cxem2PaLN35tBCp8=\n=YlP1\n-----END PGP SIGNATURE-----\n", "payload": "tree 75ef6b25f6b03ec6c6668ffa4dbfe7851affd04f\nparent a266f11990d9544ee408e213e1eec8cc9eb032b7\nparent 7f76084933b69ae856bc872c3eecdc2378a21f4b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679521479 +0100\ncommitter GitHub <noreply@github.com> 1679521479 +0100\n\nRollup merge of #108954 - notriddle:notriddle/notable-trait-generic, r=camelid\n\nrustdoc: handle generics better when matching notable traits\n\nThis commit makes the `clean::Type::is_same` non-commutative (renaming it `is_doc_subtype_of`), so that a generic `impl` matches a concrete return, but a generic return does not match a concrete `impl`. It makes slice and vector Write for `u8` not match on every generic return value.\n\nFixes #100322\n\nFixes #55082\n\nPreview:\n\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/vec/struct.Vec.html#method.new\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/vec/struct.Vec.html#method.from-12\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/iter/trait.Iterator.html#method.intersperse_with\n* https://notriddle.com/rustdoc-demo-html-3/notable-trait-generic/std/string/struct.String.html#method.as_bytes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0392e2996e828fe5f435b3f13037f8af7ad4563b", "html_url": "https://github.com/rust-lang/rust/commit/0392e2996e828fe5f435b3f13037f8af7ad4563b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0392e2996e828fe5f435b3f13037f8af7ad4563b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a266f11990d9544ee408e213e1eec8cc9eb032b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a266f11990d9544ee408e213e1eec8cc9eb032b7", "html_url": "https://github.com/rust-lang/rust/commit/a266f11990d9544ee408e213e1eec8cc9eb032b7"}, {"sha": "7f76084933b69ae856bc872c3eecdc2378a21f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f76084933b69ae856bc872c3eecdc2378a21f4b", "html_url": "https://github.com/rust-lang/rust/commit/7f76084933b69ae856bc872c3eecdc2378a21f4b"}], "stats": {"total": 117, "additions": 105, "deletions": 12}, "files": [{"sha": "7dbb3f76a0a8366826f9e39d099b69a4649d9b62", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "patch": "@@ -1471,27 +1471,68 @@ impl Type {\n         result\n     }\n \n-    /// Check if two types are \"potentially the same\".\n+    pub(crate) fn is_borrowed_ref(&self) -> bool {\n+        matches!(self, Type::BorrowedRef { .. })\n+    }\n+\n+    /// Check if two types are \"the same\" for documentation purposes.\n+    ///\n     /// This is different from `Eq`, because it knows that things like\n     /// `Placeholder` are possible matches for everything.\n-    pub(crate) fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n-        match (self, other) {\n+    ///\n+    /// This relation is not commutative when generics are involved:\n+    ///\n+    /// ```ignore(private)\n+    /// # // see types/tests.rs:is_same_generic for the real test\n+    /// use rustdoc::format::cache::Cache;\n+    /// use rustdoc::clean::types::{Type, PrimitiveType};\n+    /// let cache = Cache::new(false);\n+    /// let generic = Type::Generic(rustc_span::symbol::sym::Any);\n+    /// let unit = Type::Primitive(PrimitiveType::Unit);\n+    /// assert!(!generic.is_same(&unit, &cache));\n+    /// assert!(unit.is_same(&generic, &cache));\n+    /// ```\n+    ///\n+    /// An owned type is also the same as its borrowed variants (this is commutative),\n+    /// but `&T` is not the same as `&mut T`.\n+    pub(crate) fn is_doc_subtype_of(&self, other: &Self, cache: &Cache) -> bool {\n+        // Strip the references so that it can compare the actual types, unless both are references.\n+        // If both are references, leave them alone and compare the mutabilities later.\n+        let (self_cleared, other_cleared) = if !self.is_borrowed_ref() || !other.is_borrowed_ref() {\n+            (self.without_borrowed_ref(), other.without_borrowed_ref())\n+        } else {\n+            (self, other)\n+        };\n+        match (self_cleared, other_cleared) {\n             // Recursive cases.\n             (Type::Tuple(a), Type::Tuple(b)) => {\n-                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(b, cache))\n+                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_doc_subtype_of(b, cache))\n             }\n-            (Type::Slice(a), Type::Slice(b)) => a.is_same(b, cache),\n-            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_same(b, cache),\n+            (Type::Slice(a), Type::Slice(b)) => a.is_doc_subtype_of(b, cache),\n+            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_doc_subtype_of(b, cache),\n             (Type::RawPointer(mutability, type_), Type::RawPointer(b_mutability, b_type_)) => {\n-                mutability == b_mutability && type_.is_same(b_type_, cache)\n+                mutability == b_mutability && type_.is_doc_subtype_of(b_type_, cache)\n             }\n             (\n                 Type::BorrowedRef { mutability, type_, .. },\n                 Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n-            ) => mutability == b_mutability && type_.is_same(b_type_, cache),\n-            // Placeholders and generics are equal to all other types.\n+            ) => mutability == b_mutability && type_.is_doc_subtype_of(b_type_, cache),\n+            // Placeholders are equal to all other types.\n             (Type::Infer, _) | (_, Type::Infer) => true,\n-            (Type::Generic(_), _) | (_, Type::Generic(_)) => true,\n+            // Generics match everything on the right, but not on the left.\n+            // If both sides are generic, this returns true.\n+            (_, Type::Generic(_)) => true,\n+            (Type::Generic(_), _) => false,\n+            // Paths account for both the path itself and its generics.\n+            (Type::Path { path: a }, Type::Path { path: b }) => {\n+                a.def_id() == b.def_id()\n+                    && a.generics()\n+                        .zip(b.generics())\n+                        .map(|(ag, bg)| {\n+                            ag.iter().zip(bg.iter()).all(|(at, bt)| at.is_doc_subtype_of(bt, cache))\n+                        })\n+                        .unwrap_or(true)\n+            }\n             // Other cases, such as primitives, just use recursion.\n             (a, b) => a\n                 .def_id(cache)"}, {"sha": "d8c91a9680479fd81c18e4525b2ae2f9ef2ed91a", "filename": "src/librustdoc/clean/types/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "patch": "@@ -69,3 +69,14 @@ fn should_not_trim() {\n     run_test(\"\\t    line1  \\n\\t    line2\", \"line1  \\nline2\");\n     run_test(\"    \\tline1  \\n    \\tline2\", \"line1  \\nline2\");\n }\n+\n+#[test]\n+fn is_same_generic() {\n+    use crate::clean::types::{PrimitiveType, Type};\n+    use crate::formats::cache::Cache;\n+    let cache = Cache::new(false);\n+    let generic = Type::Generic(rustc_span::symbol::sym::Any);\n+    let unit = Type::Primitive(PrimitiveType::Unit);\n+    assert!(!generic.is_doc_subtype_of(&unit, &cache));\n+    assert!(unit.is_doc_subtype_of(&generic, &cache));\n+}"}, {"sha": "d75d03071f892b3089e344e1fe261382a1efe0a5", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "patch": "@@ -1294,7 +1294,7 @@ pub(crate) fn notable_traits_button(ty: &clean::Type, cx: &mut Context<'_>) -> O\n     if let Some(impls) = cx.cache().impls.get(&did) {\n         for i in impls {\n             let impl_ = i.inner_impl();\n-            if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+            if !ty.is_doc_subtype_of(&impl_.for_, cx.cache()) {\n                 // Two different types might have the same did,\n                 // without actually being the same.\n                 continue;\n@@ -1330,7 +1330,7 @@ fn notable_traits_decl(ty: &clean::Type, cx: &Context<'_>) -> (String, String) {\n \n     for i in impls {\n         let impl_ = i.inner_impl();\n-        if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+        if !ty.is_doc_subtype_of(&impl_.for_, cx.cache()) {\n             // Two different types might have the same did,\n             // without actually being the same.\n             continue;"}, {"sha": "bfce46cf4444af0442dc41e8bb8d3b428462bfc9", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_an_iterator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait-mut_t_is_not_an_iterator.rs"}, {"sha": "b359dcea0ff471bd768f366a6a13a3b45a9d7110", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_ref_t.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait-mut_t_is_not_ref_t.rs"}, {"sha": "46be00a080482818f4af2c588dbdf6612953ea4a", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-slice.bare_fn_matches.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.bare_fn_matches.html", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.bare_fn_matches.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.bare_fn_matches.html?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait-slice.bare_fn_matches.html"}, {"sha": "ef206710b4b0829b9a757b1dbd36695fb3d8703f", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-slice.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "patch": "@@ -18,3 +18,9 @@ pub fn bare_fn_matches() -> &'static [SomeStruct] {\n pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n     &[]\n }\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_mut_no_matches.html\n+// @count - '//script[@id=\"notable-traits-data\"]' 0\n+pub fn bare_fn_mut_no_matches() -> &'static mut [SomeStruct] {\n+    &mut []\n+}", "previous_filename": "tests/rustdoc/doc-notable_trait-slice.rs"}, {"sha": "f592e3b375c026061ec0fb7274a8eef453f201b5", "filename": "tests/rustdoc/notable-trait/doc-notable_trait.bare-fn.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.bare-fn.html", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.bare-fn.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.bare-fn.html?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait.bare-fn.html"}, {"sha": "d8941769fa67ab2aad23682979a892fd6b803d63", "filename": "tests/rustdoc/notable-trait/doc-notable_trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait.rs"}, {"sha": "e8f4f6000457dcaee93238ded6d67463ecf74304", "filename": "tests/rustdoc/notable-trait/doc-notable_trait.some-struct-new.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.some-struct-new.html", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.some-struct-new.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.some-struct-new.html?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait.some-struct-new.html"}, {"sha": "e7909669b150a2720e172d0079f428f88ff9199f", "filename": "tests/rustdoc/notable-trait/doc-notable_trait.wrap-me.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.wrap-me.html", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.wrap-me.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait.wrap-me.html?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait.wrap-me.html"}, {"sha": "3fb00c7db84115b3661fd87b6ac4a3e5f9305f7b", "filename": "tests/rustdoc/notable-trait/doc-notable_trait_box_is_not_an_iterator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait_box_is_not_an_iterator.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/doc-notable_trait_box_is_not_an_iterator.rs"}, {"sha": "611902abad65b99fd7cf44a0dce276d86c35a8d7", "filename": "tests/rustdoc/notable-trait/notable-trait-generics.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "patch": "@@ -0,0 +1,35 @@\n+#![feature(doc_notable_trait)]\n+\n+// Notable traits SHOULD NOT be shown when the `impl` has a concrete type and\n+// the return type has a generic type.\n+pub mod generic_return {\n+    pub struct Wrapper<T>(T);\n+\n+    #[doc(notable_trait)]\n+    pub trait NotableTrait {}\n+\n+    impl NotableTrait for Wrapper<u8> {}\n+\n+    // @has notable_trait_generics/generic_return/fn.returning.html\n+    // @!has - '//a[@class=\"tooltip\"]/@data-notable-ty' 'Wrapper<T>'\n+    pub fn returning<T>() -> Wrapper<T> {\n+        loop {}\n+    }\n+}\n+\n+// Notable traits SHOULD be shown when the `impl` has a generic type and the\n+// return type has a concrete type.\n+pub mod generic_impl {\n+    pub struct Wrapper<T>(T);\n+\n+    #[doc(notable_trait)]\n+    pub trait NotableTrait {}\n+\n+    impl<T> NotableTrait for Wrapper<T> {}\n+\n+    // @has notable_trait_generics/generic_impl/fn.returning.html\n+    // @has - '//a[@class=\"tooltip\"]/@data-notable-ty' 'Wrapper<u8>'\n+    pub fn returning() -> Wrapper<u8> {\n+        loop {}\n+    }\n+}"}, {"sha": "5f54b7522ae38774e61e4c8cd7c44dc775ad410b", "filename": "tests/rustdoc/notable-trait/spotlight-from-dependency.odd.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.odd.html", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.odd.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.odd.html?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/spotlight-from-dependency.odd.html"}, {"sha": "426759c7bf8a218aca6c3a699782b037e8deccdb", "filename": "tests/rustdoc/notable-trait/spotlight-from-dependency.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0392e2996e828fe5f435b3f13037f8af7ad4563b/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fspotlight-from-dependency.rs?ref=0392e2996e828fe5f435b3f13037f8af7ad4563b", "previous_filename": "tests/rustdoc/spotlight-from-dependency.rs"}]}