{"sha": "c692e07b4ff648fea742c53c0dbad57d6f652068", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OTJlMDdiNGZmNjQ4ZmVhNzQyYzUzYzBkYmFkNTdkNmY2NTIwNjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-28T15:56:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-28T15:56:07Z"}, "message": "Merge #3367\n\n3367: Fix highlighting of const patterns r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d186df8fb298272eaa4ce14d2fccc854413bc566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d186df8fb298272eaa4ce14d2fccc854413bc566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c692e07b4ff648fea742c53c0dbad57d6f652068", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWTgXCRBK7hj4Ov3rIwAAdHIIACc0rvng7j8dlutYFCFx68c+\nUr7wvkUmR6BJybMsL7rZR/htIWwX/8xr6GIOZi3YNutS3Bdhk2FwQiViUXeIPphr\nGzgNG3Q2SQN874WTi8w1NgGHkTD227DoyKFVo73ZNwIYLcENYfJwgKSUZYuc/Bzj\nZNAgVsWGbziH0CqzCCYsNyzm3MxeltXGslU7Nm1BvDqmCAixeEOr4G5gI9ki8Y4J\n+4pl1fE7HG2mRCwVzsxr/r3szEP90gj+uQvMDOD/kmuG87+A0JsTBFYa082Phmyq\n+XZzWcWKr+byJv2j1IjFGblXa7+NjAvvGiOU7L/EwEDqQjCx0HM/rc6ZrL6mKzo=\n=8e2y\n-----END PGP SIGNATURE-----\n", "payload": "tree d186df8fb298272eaa4ce14d2fccc854413bc566\nparent 93f632ca4e7bb7fd54830e456d629a4948a92337\nparent 56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582905367 +0000\ncommitter GitHub <noreply@github.com> 1582905367 +0000\n\nMerge #3367\n\n3367: Fix highlighting of const patterns r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c692e07b4ff648fea742c53c0dbad57d6f652068", "html_url": "https://github.com/rust-lang/rust/commit/c692e07b4ff648fea742c53c0dbad57d6f652068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c692e07b4ff648fea742c53c0dbad57d6f652068/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f632ca4e7bb7fd54830e456d629a4948a92337", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f632ca4e7bb7fd54830e456d629a4948a92337", "html_url": "https://github.com/rust-lang/rust/commit/93f632ca4e7bb7fd54830e456d629a4948a92337"}, {"sha": "56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "html_url": "https://github.com/rust-lang/rust/commit/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06"}], "stats": {"total": 215, "additions": 144, "deletions": 71}, "files": [{"sha": "178d74be1a7693d16dbc94a61aa7e446241251bc", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -17,8 +17,8 @@ use crate::{\n     db::HirDatabase,\n     source_analyzer::{resolve_hir_path, ReferenceDescriptor, SourceAnalyzer},\n     source_binder::{ChildContainer, SourceBinder},\n-    Function, HirFileId, InFile, Local, MacroDef, Module, Name, Origin, Path, PathResolution,\n-    ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n+    Function, HirFileId, InFile, Local, MacroDef, Module, ModuleDef, Name, Origin, Path,\n+    PathResolution, ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n };\n use hir_expand::ExpansionInfo;\n use ra_prof::profile;\n@@ -129,6 +129,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    pub fn resolve_bind_pat_to_const(&self, pat: &ast::BindPat) -> Option<ModuleDef> {\n+        self.analyze(pat.syntax()).resolve_bind_pat_to_const(self.db, pat)\n+    }\n+\n     // FIXME: use this instead?\n     // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n "}, {"sha": "c650a9e08fb96bce2785d3009937c4994bf8ea04", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -11,9 +11,9 @@ use either::Either;\n use hir_def::{\n     body::{\n         scope::{ExprScopes, ScopeId},\n-        BodySourceMap,\n+        Body, BodySourceMap,\n     },\n-    expr::{ExprId, PatId},\n+    expr::{ExprId, Pat, PatId},\n     resolver::{resolver_for_scope, Resolver, TypeNs, ValueNs},\n     AsMacroCall, DefWithBodyId,\n };\n@@ -25,8 +25,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, Path, Static, Struct,\n-    Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, ModuleDef, Path, Static,\n+    Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -35,6 +35,7 @@ use crate::{\n pub(crate) struct SourceAnalyzer {\n     file_id: HirFileId,\n     pub(crate) resolver: Resolver,\n+    body: Option<Arc<Body>>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n     infer: Option<Arc<InferenceResult>>,\n     scopes: Option<Arc<ExprScopes>>,\n@@ -66,7 +67,7 @@ impl SourceAnalyzer {\n         node: InFile<&SyntaxNode>,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let (_body, source_map) = db.body_with_source_map(def);\n+        let (body, source_map) = db.body_with_source_map(def);\n         let scopes = db.expr_scopes(def);\n         let scope = match offset {\n             None => scope_for(&scopes, &source_map, node),\n@@ -75,6 +76,7 @@ impl SourceAnalyzer {\n         let resolver = resolver_for_scope(db, def, scope);\n         SourceAnalyzer {\n             resolver,\n+            body: Some(body),\n             body_source_map: Some(source_map),\n             infer: Some(db.infer(def)),\n             scopes: Some(scopes),\n@@ -88,6 +90,7 @@ impl SourceAnalyzer {\n     ) -> SourceAnalyzer {\n         SourceAnalyzer {\n             resolver,\n+            body: None,\n             body_source_map: None,\n             infer: None,\n             scopes: None,\n@@ -197,6 +200,24 @@ impl SourceAnalyzer {\n         self.resolver.resolve_path_as_macro(db, path.mod_path()).map(|it| it.into())\n     }\n \n+    pub(crate) fn resolve_bind_pat_to_const(\n+        &self,\n+        db: &impl HirDatabase,\n+        pat: &ast::BindPat,\n+    ) -> Option<ModuleDef> {\n+        let pat_id = self.pat_id(&pat.clone().into())?;\n+        let body = self.body.as_ref()?;\n+        let path = match &body[pat_id] {\n+            Pat::Path(path) => path,\n+            _ => return None,\n+        };\n+        let res = resolve_hir_path(db, &self.resolver, &path)?;\n+        match res {\n+            PathResolution::Def(def) => Some(def),\n+            _ => None,\n+        }\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "621ab982c350f3f3104ea3dc827c9338330b08d5", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -30,7 +30,9 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                name_definition(&sema, &name)?\n+                let def = classify_name(&sema, &name)?.definition();\n+                let nav = def.try_to_nav(sema.db)?;\n+                vec![nav]\n             },\n             _ => return None,\n         }\n@@ -88,15 +90,6 @@ pub(crate) fn reference_definition(\n     Approximate(navs)\n }\n \n-fn name_definition(\n-    sema: &Semantics<RootDatabase>,\n-    name: &ast::Name,\n-) -> Option<Vec<NavigationTarget>> {\n-    let def = classify_name(sema, name)?;\n-    let nav = def.try_to_nav(sema.db)?;\n-    Some(vec![nav])\n-}\n-\n #[cfg(test)]\n mod tests {\n     use test_utils::{assert_eq_text, covers};"}, {"sha": "5073bb1cf8964b410748893db5440065b0cbee3b", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -156,7 +156,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 classify_name_ref(&sema, &name_ref).map(|d| (name_ref.syntax().clone(), d))\n             },\n             ast::Name(name) => {\n-                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d))\n+                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d.definition()))\n             },\n             _ => None,\n         }\n@@ -785,13 +785,13 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     fn test_hover_through_literal_string_in_builtin_macro() {\n         check_hover_no_result(\n             r#\"\n-            //- /lib.rs            \n+            //- /lib.rs\n             #[rustc_builtin_macro]\n             macro_rules! assert {\n                 ($cond:expr) => {{ /* compiler built-in */ }};\n                 ($cond:expr,) => {{ /* compiler built-in */ }};\n                 ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n-            }        \n+            }\n \n             fn foo() {\n                 assert!(\"hel<|>lo\");"}, {"sha": "f763013aecc8c11d1d9a6c384766daf1a5aaf835", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -155,7 +155,7 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<(String, NameDefinition)>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?;\n+        let def = classify_name(sema, &name)?.definition();\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }"}, {"sha": "495b07f690e74deb917a52621f0a821312269aae", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -3,7 +3,7 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n@@ -27,48 +27,54 @@\n .control            { font-style: italic; }\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"builtin_type\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"builtin_type\">i32</span>,\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span>: <span class=\"builtin_type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n-    <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n-    <span class=\"function\">foo</span>::&lt;<span class=\"builtin_type\">i32</span>&gt;();\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n+    <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n }\n \n <span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> def_fn {\n     ($($tt:tt)*) =&gt; {$($tt)*}\n }\n \n <span class=\"macro\">def_fn</span><span class=\"macro\">!</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n         <span class=\"numeric_literal\">100</span>\n     }\n }\n \n <span class=\"comment\">// comment</span>\n-<span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">vec</span> = Vec::new();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = Vec::new();\n     <span class=\"keyword control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"numeric_literal\">92</span>;\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n         <span class=\"variable mutable\">vec</span>.push(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n     <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.set_len(<span class=\"numeric_literal\">0</span>); }\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &<span class=\"variable mutable\">y</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;\n \n     <span class=\"variable mutable\">y</span>;\n }\n \n-<span class=\"keyword\">enum</span> <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n-    <span class=\"enum_variant\">V</span>(<span class=\"type_param\">X</span>)\n+<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span>&lt;<span class=\"type_param declaration\">T</span>&gt; {\n+    <span class=\"enum_variant declaration\">Some</span>(<span class=\"type_param\">T</span>),\n+    <span class=\"enum_variant declaration\">None</span>,\n }\n+<span class=\"keyword\">use</span> <span class=\"enum\">Option</span>::*;\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type_param\">X</span>&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">T</span>&gt; {}\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type_param declaration\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span>&lt;<span class=\"type_param declaration\">U</span>&gt;(<span class=\"keyword\">self</span>, <span class=\"variable declaration\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> {\n+            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>(),\n+            <span class=\"variable declaration\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n+        }\n+    }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "dddbfc0dd69ab70cd6b5bd91b40abd6e812dcbb0", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -3,7 +3,7 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n@@ -26,15 +26,15 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n \n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "b94b6a0224d5a4588ed746e277a5a77d776d039b", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -7,7 +7,7 @@ mod tests;\n \n use hir::{Name, Semantics};\n use ra_ide_db::{\n-    defs::{classify_name, NameDefinition},\n+    defs::{classify_name, NameClass, NameDefinition},\n     RootDatabase,\n };\n use ra_prof::profile;\n@@ -169,19 +169,21 @@ fn highlight_element(\n             let name = element.into_node().and_then(ast::Name::cast).unwrap();\n             let name_kind = classify_name(sema, &name);\n \n-            if let Some(NameDefinition::Local(local)) = &name_kind {\n+            if let Some(NameClass::NameDefinition(NameDefinition::Local(local))) = &name_kind {\n                 if let Some(name) = local.name(db) {\n                     let shadow_count = bindings_shadow_count.entry(name.clone()).or_default();\n                     *shadow_count += 1;\n                     binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                 }\n             };\n \n-            let h = match name_kind {\n-                Some(name_kind) => highlight_name(db, name_kind),\n-                None => highlight_name_by_syntax(name),\n-            };\n-            h | HighlightModifier::Definition\n+            match name_kind {\n+                Some(NameClass::NameDefinition(def)) => {\n+                    highlight_name(db, def) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n+                None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n+            }\n         }\n \n         // Highlight references like the definitions they resolve to\n@@ -212,8 +214,13 @@ fn highlight_element(\n         INT_NUMBER | FLOAT_NUMBER => HighlightTag::NumericLiteral.into(),\n         BYTE => HighlightTag::ByteLiteral.into(),\n         CHAR => HighlightTag::CharLiteral.into(),\n-        // FIXME: set Declaration for decls\n-        LIFETIME => HighlightTag::Lifetime.into(),\n+        LIFETIME => {\n+            let h = Highlight::new(HighlightTag::Lifetime);\n+            dbg!(match element.parent().map(|it| it.kind()) {\n+                Some(LIFETIME_PARAM) | Some(LABEL) => h | HighlightModifier::Definition,\n+                _ => h,\n+            })\n+        }\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);"}, {"sha": "e13766c9da437d55a47290c07e9cff0ea4c87a07", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -80,7 +80,7 @@ const STYLE: &str = \"\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "8835a5de214ff6d04e261db6b939e764fc60c2ab", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -90,8 +90,12 @@ impl fmt::Display for HighlightTag {\n }\n \n impl HighlightModifier {\n-    const ALL: &'static [HighlightModifier] =\n-        &[HighlightModifier::Mutable, HighlightModifier::Unsafe, HighlightModifier::Control];\n+    const ALL: &'static [HighlightModifier] = &[\n+        HighlightModifier::Control,\n+        HighlightModifier::Definition,\n+        HighlightModifier::Mutable,\n+        HighlightModifier::Unsafe,\n+    ];\n \n     fn as_str(self) -> &'static str {\n         match self {"}, {"sha": "98c030791736800187c02d37dc17090613dc23a4", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -17,9 +17,8 @@ struct Foo {\n     pub y: i32,\n }\n \n-fn foo<T>() -> T {\n-    unimplemented!();\n-    foo::<i32>();\n+fn foo<'a, T>() -> T {\n+    foo::<'a, i32>()\n }\n \n macro_rules! def_fn {\n@@ -50,12 +49,19 @@ fn main() {\n     y;\n }\n \n-enum E<X> {\n-    V(X)\n+enum Option<T> {\n+    Some(T),\n+    None,\n }\n-\n-impl<X> E<X> {\n-    fn new<T>() -> E<T> {}\n+use Option::*;\n+\n+impl<T> Option<T> {\n+    fn and<U>(self, other: Option<U>) -> Option<(T, U)> {\n+        match other {\n+            None => unimplemented!(),\n+            Nope => Nope,\n+        }\n+    }\n }\n \"#\n         .trim(),\n@@ -123,5 +129,5 @@ fn test_ranges() {\n         .highlight_range(FileRange { file_id, range: TextRange::offset_len(82.into(), 1.into()) })\n         .unwrap();\n \n-    assert_eq!(&highlights[0].highlight.to_string(), \"field\");\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration\");\n }"}, {"sha": "93f32ba855d8df0ae930f475985d44744a169f2e", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -68,7 +68,38 @@ impl NameDefinition {\n     }\n }\n \n-pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameDefinition> {\n+pub enum NameClass {\n+    NameDefinition(NameDefinition),\n+    /// `None` in `if let None = Some(82) {}`\n+    ConstReference(NameDefinition),\n+}\n+\n+impl NameClass {\n+    pub fn into_definition(self) -> Option<NameDefinition> {\n+        match self {\n+            NameClass::NameDefinition(it) => Some(it),\n+            NameClass::ConstReference(_) => None,\n+        }\n+    }\n+\n+    pub fn definition(self) -> NameDefinition {\n+        match self {\n+            NameClass::NameDefinition(it) | NameClass::ConstReference(it) => it,\n+        }\n+    }\n+}\n+\n+pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n+    if let Some(bind_pat) = name.syntax().parent().and_then(ast::BindPat::cast) {\n+        if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n+            return Some(NameClass::ConstReference(NameDefinition::ModuleDef(def)));\n+        }\n+    }\n+\n+    classify_name_inner(sema, name).map(NameClass::NameDefinition)\n+}\n+\n+fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name\");\n     let parent = name.syntax().parent()?;\n "}, {"sha": "e5fc3c47012782cdc39c1b2c4faf520917891b6b", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c692e07b4ff648fea742c53c0dbad57d6f652068/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=c692e07b4ff648fea742c53c0dbad57d6f652068", "patch": "@@ -59,6 +59,7 @@ impl<'a> ImportsLocator<'a> {\n         } else {\n             candidate_node\n         };\n-        classify_name(&self.sema, &ast::Name::cast(candidate_name_node)?)\n+        let name = ast::Name::cast(candidate_name_node)?;\n+        classify_name(&self.sema, &name)?.into_definition()\n     }\n }"}]}