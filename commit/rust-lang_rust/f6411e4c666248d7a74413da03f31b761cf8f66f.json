{"sha": "f6411e4c666248d7a74413da03f31b761cf8f66f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NDExZTRjNjY2MjQ4ZDdhNzQ0MTNkYTAzZjMxYjc2MWNmOGY2NmY=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-06T22:08:56Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T03:50:57Z"}, "message": "Add Array Impl Lang Item in various places\n\nAdd basic test\n\nAnd also run fmt which is where the other changes are from\n\nFix mut issues\n\nThese only appear when running tests, so resolved by adding mut\n\nSwap order of forget\n\nAdd pub and rm guard impl\n\nAdd explicit type to guard\n\nAdd safety note\n\nChange guard type from T to S\n\nIt should never have been T, as it guards over [MaybeUninit<S>; N]\nAlso add feature to test", "tree": {"sha": "6c58d67f14b8f7b24aac3b44659a519de2d5aaba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c58d67f14b8f7b24aac3b44659a519de2d5aaba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6411e4c666248d7a74413da03f31b761cf8f66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6411e4c666248d7a74413da03f31b761cf8f66f", "html_url": "https://github.com/rust-lang/rust/commit/f6411e4c666248d7a74413da03f31b761cf8f66f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6411e4c666248d7a74413da03f31b761cf8f66f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e", "html_url": "https://github.com/rust-lang/rust/commit/d8718183b2f3e0dacc2731b5c84fe7b0eb197a6e"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "f85f5efbb9a3ce1265fb1f6eda117d394de04795", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -377,7 +377,7 @@ impl<T, const N: usize> [T; N] {\n     /// assert_eq!(y, [2,3,4]);\n     /// ```\n     #[unstable(feature = \"array_map\", issue = \"77777\")]\n-    fn map<F, S>(self, f: F) -> [S; N]\n+    pub fn map<F, S>(self, mut f: F) -> [S; N]\n     where\n         F: FnMut(T) -> S,\n     {\n@@ -387,12 +387,6 @@ impl<T, const N: usize> [T; N] {\n             curr_init: usize,\n         }\n \n-        impl<T, const N: usize> Guard<T, N> {\n-            fn new(dst: &mut [MaybeUninit<T>; N]) -> Self {\n-                Guard { dst: dst as *mut _ as *mut T, curr_init: 0 }\n-            }\n-        }\n-\n         impl<T, const N: usize> Drop for Guard<T, N> {\n             fn drop(&mut self) {\n                 debug_assert!(self.curr_init <= N);\n@@ -406,14 +400,17 @@ impl<T, const N: usize> [T; N] {\n                 }\n             }\n         }\n-        let dst = MaybeUninit::uninit_array::<N>();\n-        let mut guard = Guard::new(&mut dst);\n-        for (i, e) in self.into_iter().enumerate() {\n+        let mut dst = MaybeUninit::uninit_array::<N>();\n+        let mut guard: Guard<S, N> = Guard { dst: &mut dst as *mut _ as *mut S, curr_init: 0 };\n+        for (i, e) in IntoIter::new(self).enumerate() {\n             dst[i] = MaybeUninit::new(f(e));\n             guard.curr_init += 1;\n         }\n         // FIXME convert to crate::mem::transmute when works with generics\n         // unsafe { crate::mem::transmute::<[MaybeUninit<S>; N], [S; N]>(dst) }\n+        crate::mem::forget(guard);\n+        // SAFETY: At this point we've properly initialized the whole array\n+        // and we just need to cast it to the correct type\n         unsafe { (&mut dst as *mut _ as *mut [S; N]).read() }\n     }\n }"}, {"sha": "5ae622c1182e9802c48bfab53f39e26d29ef2bb4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -290,3 +290,10 @@ fn empty_array_is_always_default() {\n \n     let _arr = <[DoesNotImplDefault; 0]>::default();\n }\n+\n+#[test]\n+fn array_map() {\n+    let a = [1, 2, 3];\n+    let b = a.map(|v| v + 1);\n+    assert_eq!(b, [2, 3, 4]);\n+}"}, {"sha": "904e3f7284049b982ae68af411759276dc6eb3b4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -1,5 +1,6 @@\n #![feature(alloc_layout_extra)]\n #![feature(array_chunks)]\n+#![feature(array_map)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}, {"sha": "9078dc40041aa376c9648aca6b14791d442677bd", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -649,6 +649,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     self.assemble_inherent_impl_for_primitive(lang_def_id);\n                 }\n             }\n+            ty::Array(_, _) => {\n+                let lang_def_id = lang_items.array_impl();\n+                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n                 let (lang_def_id1, lang_def_id2) = match mutbl {\n                     hir::Mutability::Not => {"}, {"sha": "cd7429f166f26aa6fc141461aa70ea9d1282a9fa", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -112,6 +112,16 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n+            ty::Array(_, _) => {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.array_impl(),\n+                    None,\n+                    \"array\",\n+                    \"[T; N]\",\n+                    item.span,\n+                );\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Not })\n                 if matches!(inner.kind, ty::Slice(_)) =>\n             {"}, {"sha": "168967cdeb7cf8e7e79858bafe2ecb21830a4f1b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -388,7 +388,7 @@ pub fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut V\n             Bool => tcx.lang_items().bool_impl(),\n             Str => tcx.lang_items().str_impl(),\n             Slice => tcx.lang_items().slice_impl(),\n-            Array => tcx.lang_items().slice_impl(),\n+            Array => tcx.lang_items().array_impl(),\n             Tuple => None,\n             Unit => None,\n             RawPointer => tcx.lang_items().const_ptr_impl(),"}, {"sha": "a40b45f9a7e2c2f75471c095740183c3f53f998b", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6411e4c666248d7a74413da03f31b761cf8f66f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f6411e4c666248d7a74413da03f31b761cf8f66f", "patch": "@@ -55,6 +55,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         lang_items.bool_impl(),\n         lang_items.char_impl(),\n         lang_items.str_impl(),\n+        lang_items.array_impl(),\n         lang_items.slice_impl(),\n         lang_items.slice_u8_impl(),\n         lang_items.str_alloc_impl(),"}]}