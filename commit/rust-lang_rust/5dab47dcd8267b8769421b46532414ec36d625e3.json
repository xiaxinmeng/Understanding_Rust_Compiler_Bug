{"sha": "5dab47dcd8267b8769421b46532414ec36d625e3", "node_id": "C_kwDOAAsO6NoAKDVkYWI0N2RjZDgyNjdiODc2OTQyMWI0NjUzMjQxNGVjMzZkNjI1ZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-18T06:46:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-18T06:46:03Z"}, "message": "Auto merge of #90000 - matthiaskrgr:rollup-vj7wwur, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89950 (bootstrap: tweak verbosity settings)\n - #89965 (Fix ICE with `let...else` and `ref mut`)\n - #89974 (Nicer error message if the user attempts to do let...else if)\n - #89987 (Check implementing type for `#[doc(hidden)]`)\n - #89989 (rustdoc: Add static size assertion for `clean::Type`)\n - #89990 (rustc_span: `Ident::invalid` -> `Ident::empty`)\n - #89993 (Remove dead code from `compiletest::json`)\n - #89996 (Bump backtrace)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5f59bc1d1186ffeb8b453c1bef705171ca8736ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f59bc1d1186ffeb8b453c1bef705171ca8736ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dab47dcd8267b8769421b46532414ec36d625e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dab47dcd8267b8769421b46532414ec36d625e3", "html_url": "https://github.com/rust-lang/rust/commit/5dab47dcd8267b8769421b46532414ec36d625e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dab47dcd8267b8769421b46532414ec36d625e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e02151318ddd431aea6d58e23948246c1446044", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e02151318ddd431aea6d58e23948246c1446044", "html_url": "https://github.com/rust-lang/rust/commit/5e02151318ddd431aea6d58e23948246c1446044"}, {"sha": "2724b00065131c54294248ebb7983f32781bb35f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2724b00065131c54294248ebb7983f32781bb35f", "html_url": "https://github.com/rust-lang/rust/commit/2724b00065131c54294248ebb7983f32781bb35f"}], "stats": {"total": 200, "additions": 146, "deletions": 54}, "files": [{"sha": "927d7c6aaf6a4508549aa35a85790f6fa55ae5b3", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -62,7 +62,7 @@ impl NestedMetaItem {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a\n@@ -131,7 +131,7 @@ impl Attribute {\n         }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -166,7 +166,7 @@ impl MetaItem {\n         if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     // Example:"}, {"sha": "f673ab2f3efde30221843fb59968b5f80d4cdd09", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1060,7 +1060,7 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n         let item_vis =\n             Visibility { kind: VisibilityKind::Public, span: span.shrink_to_lo(), tokens: None };\n         let item = P(Item {\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             attrs,\n             id: DUMMY_NODE_ID,\n             vis: item_vis,"}, {"sha": "92b482e90ee2fffefa66562b61e8edbd74bda385", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1435,7 +1435,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         trace!(\"registering opaque type with id {:#?}\", opaque_ty_id);\n         let opaque_ty_item = hir::Item {\n             def_id: opaque_ty_id,\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             kind: opaque_ty_item_kind,\n             vis: respan(self.lower_span(span.shrink_to_lo()), hir::VisibilityKind::Inherited),\n             span: self.lower_span(opaque_ty_span),"}, {"sha": "d5ff4c6766f0fd2c9ee48ccf3c60515c83107872", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -45,12 +45,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place.as_ref());\n+        let access_place_desc = self.describe_any_place(access_place.as_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n             PlaceRef { local, projection: [] } => {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 if access_place.as_local().is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     // If we deref an immutable ref then the suggestion here doesn't help.\n                     return;\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                         reason = \", as it is not declared as mutable\".to_string();\n                     } else {\n@@ -96,17 +96,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_for_guard() =>\n             {\n-                item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                item_msg = access_place_desc;\n                 reason = \", as it is immutable for the pattern guard\".to_string();\n             }\n             PlaceRef { local, projection: [ProjectionElem::Deref] }\n                 if self.body.local_decls[local].is_ref_to_static() =>\n             {\n                 if access_place.projection.len() == 1 {\n-                    item_msg = format!(\"immutable static item `{}`\", access_place_desc.unwrap());\n+                    item_msg = format!(\"immutable static item {}\", access_place_desc);\n                     reason = String::new();\n                 } else {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     let local_info = &self.body.local_decls[local].local_info;\n                     if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n                         let static_name = &self.infcx.tcx.item_name(def_id);\n@@ -121,7 +121,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && proj_base.is_empty()\n                     && !self.upvars.is_empty()\n                 {\n-                    item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n+                    item_msg = access_place_desc;\n                     debug_assert!(\n                         self.body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty.is_region_ptr()\n                     );\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     });\n                     let pointer_type = source.describe_for_immutable_place(self.infcx.tcx);\n                     opt_source = Some(source);\n-                    if let Some(desc) = access_place_desc {\n+                    if let Some(desc) = self.describe_place(access_place.as_ref()) {\n                         item_msg = format!(\"`{}`\", desc);\n                         reason = match error_access {\n                             AccessKind::Mutate => format!(\", which is behind {}\", pointer_type),"}, {"sha": "198287f608e3973d318d9d4e6e869be0dbd48c26", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -812,7 +812,7 @@ pub fn expand_global_asm<'cx>(\n         Ok(args) => {\n             if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n                 MacEager::items(smallvec![P(ast::Item {\n-                    ident: Ident::invalid(),\n+                    ident: Ident::empty(),\n                     attrs: Vec::new(),\n                     id: ast::DUMMY_NODE_ID,\n                     kind: ast::ItemKind::GlobalAsm(inline_asm),"}, {"sha": "31a35b9b7b45ed86662168e575f9ecae9eb3b330", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -85,7 +85,7 @@ impl MultiItemModifier for Expander {\n fn dummy_annotatable() -> Annotatable {\n     Annotatable::GenericParam(ast::GenericParam {\n         id: ast::DUMMY_NODE_ID,\n-        ident: Ident::invalid(),\n+        ident: Ident::empty(),\n         attrs: Default::default(),\n         bounds: Default::default(),\n         is_placeholder: false,"}, {"sha": "a225b328ab6a4fc205c260e5bce01e440866384c", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -724,7 +724,7 @@ impl<'a> TraitDef<'a> {\n \n         cx.item(\n             self.span,\n-            Ident::invalid(),\n+            Ident::empty(),\n             a,\n             ast::ItemKind::Impl(Box::new(ast::ImplKind {\n                 unsafety,"}, {"sha": "fa389a51115782696ef49c9d7a7c860aaab1e624", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -178,7 +178,7 @@ fn inject_impl_of_structural_trait(\n \n     let newitem = cx.item(\n         span,\n-        Ident::invalid(),\n+        Ident::empty(),\n         attrs,\n         ItemKind::Impl(Box::new(ImplKind {\n             unsafety: ast::Unsafe::No,"}, {"sha": "e106f6014a31d597a0a84f18db3473a43d79b9b1", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -77,7 +77,7 @@ pub fn inject(\n \n     let use_item = cx.item(\n         span,\n-        Ident::invalid(),\n+        Ident::empty(),\n         vec![cx.attribute(cx.meta_word(span, sym::prelude_import))],\n         ast::ItemKind::Use(ast::UseTree {\n             prefix: cx.path(span, import_path),"}, {"sha": "65f0719ba99c246334f1d3252c5ca25e5804dff8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Unsafe::No,\n                 ModKind::Loaded(krate.items, Inline::Yes, krate.span)\n             ),\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             id: ast::DUMMY_NODE_ID,\n             vis: ast::Visibility {\n                 span: krate.span.shrink_to_lo(),\n@@ -1426,7 +1426,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            ast::ItemKind::Mod(_, ref mut mod_kind) if ident != Ident::invalid() => {\n+            ast::ItemKind::Mod(_, ref mut mod_kind) if ident != Ident::empty() => {\n                 let (file_path, dir_path, dir_ownership) = match mod_kind {\n                     ModKind::Loaded(_, inline, _) => {\n                         // Inline `mod foo { ... }`, but we still need to push directories.\n@@ -1508,7 +1508,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             _ => {\n                 item.attrs = attrs;\n                 // The crate root is special - don't assign an ID to it.\n-                if !(matches!(item.kind, ast::ItemKind::Mod(..)) && ident == Ident::invalid()) {\n+                if !(matches!(item.kind, ast::ItemKind::Mod(..)) && ident == Ident::empty()) {\n                     assign_id!(self, &mut item.id, || noop_flat_map_item(item, self))\n                 } else {\n                     noop_flat_map_item(item, self)"}, {"sha": "dedc6c618b9a482442828018babc4780bcff0e6e", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -204,7 +204,7 @@ fn parse_tree(\n                         pprust::token_to_string(&token),\n                     );\n                     sess.span_diagnostic.span_err(token.span, &msg);\n-                    TokenTree::MetaVar(token.span, Ident::invalid())\n+                    TokenTree::MetaVar(token.span, Ident::empty())\n                 }\n \n                 // There are no more tokens. Just return the `$` we already have."}, {"sha": "12b6bc7bbe7689efffaca0447e1e11af197a7e1f", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -23,7 +23,7 @@ pub fn placeholder(\n         }\n     }\n \n-    let ident = Ident::invalid();\n+    let ident = Ident::empty();\n     let attrs = Vec::new();\n     let vis = vis.unwrap_or(ast::Visibility {\n         span: DUMMY_SP,"}, {"sha": "f0ee21645f3c170f3c87c995b79604e50cbe9bc9", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -121,7 +121,7 @@ impl LifetimeName {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n             | LifetimeName::Implicit\n-            | LifetimeName::Error => Ident::invalid(),\n+            | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),\n@@ -233,7 +233,7 @@ impl<'hir> PathSegment<'hir> {\n     }\n \n     pub fn invalid() -> Self {\n-        Self::from_ident(Ident::invalid())\n+        Self::from_ident(Ident::empty())\n     }\n \n     pub fn args(&self) -> &GenericArgs<'hir> {\n@@ -310,7 +310,7 @@ impl GenericArg<'_> {\n     }\n \n     pub fn is_synthetic(&self) -> bool {\n-        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::invalid())\n+        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::empty())\n     }\n \n     pub fn descr(&self) -> &'static str {"}, {"sha": "c228ecb03fdec25f1d475fd9d9a2ef63ce0c6f0e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -657,6 +657,24 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             return;\n         }\n \n+        // If the method is an impl for an item with docs_hidden, don't doc.\n+        if method_context(cx, impl_item.hir_id()) == MethodLateContext::PlainImpl {\n+            let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let impl_ty = cx.tcx.type_of(parent);\n+            let outerdef = match impl_ty.kind() {\n+                ty::Adt(def, _) => Some(def.did),\n+                ty::Foreign(def_id) => Some(*def_id),\n+                _ => None,\n+            };\n+            let is_hidden = match outerdef {\n+                Some(id) => cx.tcx.is_doc_hidden(id),\n+                None => false,\n+            };\n+            if is_hidden {\n+                return;\n+            }\n+        }\n+\n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(cx, impl_item.def_id, impl_item.span, article, desc);\n     }"}, {"sha": "c30ab4c957a1912e5495a2fc6cb989d0565fbbdb", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -443,7 +443,7 @@ impl<'hir> Map<'hir> {\n     pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {\n         self.body(id).params.iter().map(|arg| match arg.pat.kind {\n             PatKind::Binding(_, _, ident, _) => ident,\n-            _ => Ident::new(kw::Empty, rustc_span::DUMMY_SP),\n+            _ => Ident::empty(),\n         })\n     }\n "}, {"sha": "1d9c3a4f3cf2b207292c9498de795584ad2f8a96", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -216,7 +216,7 @@ impl<'a> Parser<'a> {\n                 return Err(e);\n             }\n \n-            (Ident::invalid(), ItemKind::Use(tree))\n+            (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n-            (Ident::invalid(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n+            (Ident::empty(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n         } else {\n             return Ok(None);\n         };\n@@ -586,7 +586,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok((Ident::invalid(), item_kind))\n+        Ok((Ident::empty(), item_kind))\n     }\n \n     fn parse_item_list<T>(\n@@ -933,7 +933,7 @@ impl<'a> Parser<'a> {\n         let abi = self.parse_abi(); // ABI?\n         let items = self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?;\n         let module = ast::ForeignMod { unsafety, abi, items };\n-        Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n+        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block)."}, {"sha": "01e751ea8b5bff53bff164fd6a936c49e61f371e", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{\n };\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym};\n \n@@ -300,6 +300,12 @@ impl<'a> Parser<'a> {\n             None => LocalKind::Decl,\n             Some(init) => {\n                 if self.eat_keyword(kw::Else) {\n+                    if self.token.is_keyword(kw::If) {\n+                        // `let...else if`. Emit the same error that `parse_block()` would,\n+                        // but explicitly point out that this pattern is not allowed.\n+                        let msg = \"conditional `else if` is not supported for `let...else`\";\n+                        return Err(self.error_block_no_opening_brace_msg(msg));\n+                    }\n                     let els = self.parse_block()?;\n                     self.check_let_else_init_bool_expr(&init);\n                     self.check_let_else_init_trailing_brace(&init);\n@@ -392,10 +398,9 @@ impl<'a> Parser<'a> {\n         Ok(block)\n     }\n \n-    fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n+    fn error_block_no_opening_brace_msg(&mut self, msg: &str) -> DiagnosticBuilder<'a> {\n         let sp = self.token.span;\n-        let tok = super::token_descr(&self.token);\n-        let mut e = self.struct_span_err(sp, &format!(\"expected `{{`, found {}\", tok));\n+        let mut e = self.struct_span_err(sp, msg);\n         let do_not_suggest_help = self.token.is_keyword(kw::In) || self.token == token::Colon;\n \n         // Check to see if the user has written something like\n@@ -435,7 +440,13 @@ impl<'a> Parser<'a> {\n             _ => {}\n         }\n         e.span_label(sp, \"expected `{`\");\n-        Err(e)\n+        e\n+    }\n+\n+    fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n+        let tok = super::token_descr(&self.token);\n+        let msg = format!(\"expected `{{`, found {}\", tok);\n+        Err(self.error_block_no_opening_brace_msg(&msg))\n     }\n \n     /// Parses a block. Inner attributes are allowed."}, {"sha": "38fb1c760bd4e5fd9f30d62dcc941d4bd580aef5", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1327,7 +1327,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 if fst.ident.span.rust_2018() && !fst.ident.is_path_segment_keyword() =>\n             {\n                 // Insert a placeholder that's later replaced by `self`/`super`/etc.\n-                path.insert(0, Segment::from_ident(Ident::invalid()));\n+                path.insert(0, Segment::from_ident(Ident::empty()));\n             }\n             _ => return None,\n         }"}, {"sha": "936ab81914a99be5cfe57cf9b900c46d96d1e606", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     // HACK(eddyb) `lint_if_path_starts_with_module` needs at least\n                     // 2 segments, so the `resolve_path` above won't trigger it.\n                     let mut full_path = import.module_path.clone();\n-                    full_path.push(Segment::from_ident(Ident::invalid()));\n+                    full_path.push(Segment::from_ident(Ident::empty()));\n                     self.r.lint_if_path_starts_with_module(\n                         import.crate_lint(),\n                         &full_path,"}, {"sha": "ae148624a906884bafd28f5292a2cd1ff7d136f3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1453,7 +1453,7 @@ impl Ident {\n     }\n \n     #[inline]\n-    pub fn invalid() -> Ident {\n+    pub fn empty() -> Ident {\n         Ident::with_dummy_span(kw::Empty)\n     }\n "}, {"sha": "7f14f76c8ba6945c052fab77022e6e768b58e0b4", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1 +1 @@\n-Subproject commit cc89bb66f91b2b4a640b0b525ca5d753e3346d7e\n+Subproject commit 7f14f76c8ba6945c052fab77022e6e768b58e0b4"}, {"sha": "ed53a98e9a53f69967796a0da077cb4c10d139db", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -146,7 +146,7 @@ fn main() {\n     }\n \n     let is_test = args.iter().any(|a| a == \"--test\");\n-    if verbose > 1 {\n+    if verbose > 2 {\n         let rust_env_vars =\n             env::vars().filter(|(k, _)| k.starts_with(\"RUST\") || k.starts_with(\"CARGO\"));\n         let prefix = if is_test { \"[RUSTC-SHIM] rustc --test\" } else { \"[RUSTC-SHIM] rustc\" };"}, {"sha": "0c5a0cbc06eb9ae1571c4fe00f53ec4ec5c551b5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -980,7 +980,7 @@ def build_bootstrap(self):\n                 self.cargo()))\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n-        for _ in range(1, self.verbose):\n+        for _ in range(0, self.verbose):\n             args.append(\"--verbose\")\n         if self.use_locked_deps:\n             args.append(\"--locked\")"}, {"sha": "ac1841b691334638538f29942f57718060ef1273", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1483,7 +1483,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"WINAPI_NO_BUNDLED_LIBRARIES\", \"1\");\n         }\n \n-        for _ in 1..self.verbosity {\n+        for _ in 0..self.verbosity {\n             cargo.arg(\"-v\");\n         }\n "}, {"sha": "9dab0023ba3f1245341d3446f7affa327b97e2a1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -1450,6 +1450,10 @@ crate enum Type {\n     ImplTrait(Vec<GenericBound>),\n }\n \n+// `Type` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(Type, 72);\n+\n crate trait GetDefId {\n     /// Use this method to get the [`DefId`] of a [`clean`] AST node.\n     /// This will return [`None`] when called on a primitive [`clean::Type`]."}, {"sha": "d431f9e899c025163e8f18f74257fc0fa2b79b63", "filename": "src/test/ui/hidden-doc-associated-item.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Fhidden-doc-associated-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Fhidden-doc-associated-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhidden-doc-associated-item.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// See issue #85526.\n+// This test should produce no warnings.\n+\n+#![deny(missing_docs)]\n+//! Crate docs\n+\n+#[doc(hidden)]\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "8fd55adbfd428d9c67d244267b71b924a0ff87ae", "filename": "src/test/ui/let-else/issue-89960.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -0,0 +1,7 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    // FIXME: more precise diagnostics\n+    let Some(ref mut meow) = Some(()) else { return };\n+    //~^ ERROR: cannot borrow value as mutable, as `val` is not declared as mutable\n+}"}, {"sha": "697f04d6d2735c1b38409781dba25862251a72e4", "filename": "src/test/ui/let-else/issue-89960.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-89960.stderr?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow value as mutable, as `val` is not declared as mutable\n+  --> $DIR/issue-89960.rs:5:14\n+   |\n+LL |     let Some(ref mut meow) = Some(()) else { return };\n+   |     ---------^^^^^^^^^^^^-----------------------------\n+   |     |        |\n+   |     |        cannot borrow as mutable\n+   |     help: consider changing this to be mutable: `mut val`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "c3a17330d6e2fe117c8a81264c746f88b799ebb7", "filename": "src/test/ui/let-else/let-else-if.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -0,0 +1,10 @@\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(_) = Some(()) else if true {\n+        //~^ ERROR conditional `else if` is not supported for `let...else`\n+        return;\n+    } else {\n+        return;\n+    };\n+}"}, {"sha": "38c739fd85072d8530897ca9614695fa49a2cbcb", "filename": "src/test/ui/let-else/let-else-if.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -0,0 +1,18 @@\n+error: conditional `else if` is not supported for `let...else`\n+  --> $DIR/let-else-if.rs:4:33\n+   |\n+LL |     let Some(_) = Some(()) else if true {\n+   |                                 ^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL ~     let Some(_) = Some(()) else { if true {\n+LL +\n+LL +         return;\n+LL +     } else {\n+LL +         return;\n+LL ~     } };\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "95b8c6dfe89eea23435b45dfd0ae6386ae34367a", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\") == rustc_span::sym::clippy;\n     Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower;\n     Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper;\n-    Ident::invalid().name == rustc_span::sym::clippy;\n-    rustc_span::sym::clippy == Ident::invalid().name;\n+    Ident::empty().name == rustc_span::sym::clippy;\n+    rustc_span::sym::clippy == Ident::empty().name;\n }"}, {"sha": "ad6937cf60a65c71035adde5ff4ea9a6681ce63b", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\").as_str() == \"clippy\";\n     Symbol::intern(\"foo\").to_string() == \"self\";\n     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n-    &*Ident::invalid().as_str() == \"clippy\";\n-    \"clippy\" == Ident::invalid().to_string();\n+    &*Ident::empty().as_str() == \"clippy\";\n+    \"clippy\" == Ident::empty().to_string();\n }"}, {"sha": "8e04d447fbcaaa3de92c81f26ff4cc450c5f39cd", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -26,14 +26,13 @@ LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:14:5\n    |\n-LL |     &*Ident::invalid().as_str() == \"clippy\";\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::invalid().name == rustc_span::sym::clippy`\n+LL |     &*Ident::empty().as_str() == \"clippy\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::empty().name == rustc_span::sym::clippy`\n \n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:15:5\n    |\n-LL |     \"clippy\" == Ident::invalid().to_string();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::invalid().name`\n+LL |     \"clippy\" == Ident::empty().to_string();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::empty().name`\n \n error: aborting due to 5 previous errors\n-"}, {"sha": "a5ff779a4abfb5fda511554d944830ef90229128", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dab47dcd8267b8769421b46532414ec36d625e3/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=5dab47dcd8267b8769421b46532414ec36d625e3", "patch": "@@ -74,8 +74,6 @@ struct DiagnosticSpanMacroExpansion {\n struct DiagnosticCode {\n     /// The code itself.\n     code: String,\n-    /// An explanation for the code.\n-    explanation: Option<String>,\n }\n \n pub fn rustfix_diagnostics_only(output: &str) -> String {"}]}