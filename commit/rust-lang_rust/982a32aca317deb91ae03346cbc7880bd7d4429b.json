{"sha": "982a32aca317deb91ae03346cbc7880bd7d4429b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmEzMmFjYTMxN2RlYjkxYWUwMzM0NmNiYzc4ODBiZDdkNDQyOWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T11:28:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T11:28:51Z"}, "message": "Merge #2382\n\n2382: Remove ids module r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f2e52047aa684cc4d8b253b3071cfa5a2d753ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2e52047aa684cc4d8b253b3071cfa5a2d753ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982a32aca317deb91ae03346cbc7880bd7d4429b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2mlzCRBK7hj4Ov3rIwAAdHIIAKcHeDFZPnrelMUdA4C8lw3U\nMGBT0POXF+/RvgGL2+TGnX+PpJBS9GeV5FIeVS/SaZ9VUi+kRD9TBC7PONBMDAUP\nkS4F4PN0PJ2eFbys33CjL5Wt82xD/kptoZTofmqlz8ce5qe33VYAgODXiT95ZERs\nRGJ/oDhIWVMIiRAtwrzDAwpoPRuwc/7gt0SXZAHaP6RAbDzJMNUEvWTl8J2+7bLS\nck0bkKqQIkg65MUPL3O5yJFlGBlCAcj8CEz0XOHadLQxh9B3ZT24KjtyYqDVGZjN\nbkByr5ju2KO4J8G4NJErlFuzrNppzkQ4lQWDGOrKt7jKQL1seW1yJGGX7sqlvnM=\n=XIS3\n-----END PGP SIGNATURE-----\n", "payload": "tree f2e52047aa684cc4d8b253b3071cfa5a2d753ac9\nparent ea3124c12a52f28163a6375b6a5e3c79fc14312d\nparent 9c766db5ff9dad3ca13539c186f40f657380a831\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574594931 +0000\ncommitter GitHub <noreply@github.com> 1574594931 +0000\n\nMerge #2382\n\n2382: Remove ids module r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982a32aca317deb91ae03346cbc7880bd7d4429b", "html_url": "https://github.com/rust-lang/rust/commit/982a32aca317deb91ae03346cbc7880bd7d4429b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982a32aca317deb91ae03346cbc7880bd7d4429b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3124c12a52f28163a6375b6a5e3c79fc14312d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3124c12a52f28163a6375b6a5e3c79fc14312d", "html_url": "https://github.com/rust-lang/rust/commit/ea3124c12a52f28163a6375b6a5e3c79fc14312d"}, {"sha": "9c766db5ff9dad3ca13539c186f40f657380a831", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c766db5ff9dad3ca13539c186f40f657380a831", "html_url": "https://github.com/rust-lang/rust/commit/9c766db5ff9dad3ca13539c186f40f657380a831"}], "stats": {"total": 236, "additions": 106, "deletions": 130}, "files": [{"sha": "e8852531bfb075e4b7f29f0138e40baf208990fd", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -15,6 +15,20 @@ pub use crate::{\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;\n \n+#[macro_export]\n+macro_rules! impl_intern_key {\n+    ($name:ident) => {\n+        impl $crate::salsa::InternKey for $name {\n+            fn from_intern_id(v: $crate::salsa::InternId) -> Self {\n+                $name(v)\n+            }\n+            fn as_intern_id(&self) -> $crate::salsa::InternId {\n+                self.0\n+            }\n+        }\n+    };\n+}\n+\n pub trait CheckCanceled {\n     /// Aborts current query if there are pending changes.\n     ///"}, {"sha": "36ea8d8bf0aa4aa3a11c6c86b7b3a3520101f4f8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -12,24 +12,21 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, HasModule, ImplId, LocalEnumVariantId, LocalImportId, LocalModuleId,\n-    LocalStructFieldId, Lookup, ModuleId, UnionId,\n+    AstItemDef, ConstId, ContainerId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n+    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{self, AsName},\n-    AstId,\n+    AstId, MacroDefId,\n };\n use ra_db::{CrateId, Edition, FileId, FilePosition};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n-    ids::{\n-        AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n-        TypeAliasId,\n-    },\n     ty::{InferenceResult, Namespace, TraitRef},\n     Either, HasSource, Name, Source, Ty,\n };"}, {"sha": "59cda2e896d21ca3b6332ce48221024815eb6680", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -1,12 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir_def::{HasChildSource, HasSource as _, Lookup, VariantId};\n+use hir_def::{AstItemDef, HasChildSource, HasSource as _, Lookup, VariantId};\n use hir_expand::either::Either;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n-    ids::AstItemDef,\n     Const, Enum, EnumVariant, FieldSource, Function, HasBody, Import, MacroDef, Module,\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "a9dab2d2500eb3fc05c27da81f13c012f668a44b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -5,7 +5,6 @@ use std::sync::Arc;\n use ra_db::salsa;\n \n use crate::{\n-    ids,\n     ty::{\n         method_resolution::CrateImplBlocks,\n         traits::{AssocTyValue, Impl},\n@@ -71,11 +70,14 @@ pub trait HirDatabase: DefDatabase {\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n-    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> ids::TypeCtorId;\n+    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> crate::ty::TypeCtorId;\n     #[salsa::interned]\n-    fn intern_chalk_impl(&self, impl_: Impl) -> ids::GlobalImplId;\n+    fn intern_chalk_impl(&self, impl_: Impl) -> crate::ty::traits::GlobalImplId;\n     #[salsa::interned]\n-    fn intern_assoc_ty_value(&self, assoc_ty_value: AssocTyValue) -> ids::AssocTyValueId;\n+    fn intern_assoc_ty_value(\n+        &self,\n+        assoc_ty_value: AssocTyValue,\n+    ) -> crate::ty::traits::AssocTyValueId;\n \n     #[salsa::invoke(crate::ty::traits::chalk::associated_ty_data_query)]\n     fn associated_ty_data("}, {"sha": "7a2810f71aff1d227b197fdc908bfd666dfecf90", "filename": "crates/ra_hir/src/debug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -22,9 +22,10 @@\n \n use std::fmt;\n \n+use hir_expand::HirFileId;\n use ra_db::{CrateId, FileId};\n \n-use crate::{db::HirDatabase, Crate, HirFileId, Module, Name};\n+use crate::{db::HirDatabase, Crate, Module, Name};\n \n impl Crate {\n     pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {"}, {"sha": "dafacba70c373f99106d9dd647ea89994437248c", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -2,9 +2,10 @@\n \n use std::any::Any;\n \n+use hir_expand::HirFileId;\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n \n-use crate::{db::AstDatabase, HirFileId, Name, Source};\n+use crate::{db::AstDatabase, Name, Source};\n \n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};"}, {"sha": "c3c3b05ed3f551e1896b331769cd7f9b59d3e7c3", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n+use hir_def::{AstItemDef, LocationCtx, ModuleId, StructId, StructOrUnionId, UnionId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -9,7 +9,6 @@ use ra_syntax::{\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    ids::{AstItemDef, LocationCtx},\n     AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n     ImplBlock, Local, MacroDef, Module, ModuleDef, ModuleSource, Source, Static, Struct,\n     StructField, Trait, TypeAlias, Union, VariantDef,"}, {"sha": "2b59365fb6a43a3ffa45286bb2fe628998075789", "filename": "crates/ra_hir/src/ids.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ea3124c12a52f28163a6375b6a5e3c79fc14312d/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3124c12a52f28163a6375b6a5e3c79fc14312d/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=ea3124c12a52f28163a6375b6a5e3c79fc14312d", "patch": "@@ -1,45 +0,0 @@\n-//! hir makes heavy use of ids: integer (u32) handlers to various things. You\n-//! can think of id as a pointer (but without a lifetime) or a file descriptor\n-//! (but for hir objects).\n-//!\n-//! This module defines a bunch of ids we are using. The most important ones are\n-//! probably `HirFileId` and `DefId`.\n-\n-use ra_db::salsa;\n-\n-pub use hir_def::{\n-    AstItemDef, ConstId, EnumId, FunctionId, ItemLoc, LocationCtx, StaticId, StructId, TraitId,\n-    TypeAliasId,\n-};\n-pub use hir_expand::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, MacroFileKind};\n-\n-macro_rules! impl_intern_key {\n-    ($name:ident) => {\n-        impl salsa::InternKey for $name {\n-            fn from_intern_id(v: salsa::InternId) -> Self {\n-                $name(v)\n-            }\n-            fn as_intern_id(&self) -> salsa::InternId {\n-                self.0\n-            }\n-        }\n-    };\n-}\n-\n-/// This exists just for Chalk, because Chalk just has a single `StructId` where\n-/// we have different kinds of ADTs, primitive types and special type\n-/// constructors like tuples and function pointers.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeCtorId(salsa::InternId);\n-impl_intern_key!(TypeCtorId);\n-\n-/// This exists just for Chalk, because our ImplIds are only unique per module.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct GlobalImplId(salsa::InternId);\n-impl_intern_key!(GlobalImplId);\n-\n-/// This exists just for Chalk, because it needs a unique ID for each associated\n-/// type value in an impl (even synthetic ones).\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct AssocTyValueId(salsa::InternId);\n-impl_intern_key!(AssocTyValueId);"}, {"sha": "8c589c7282ea30863e0df5d87692eed6613306d0", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -31,7 +31,6 @@ pub mod debug;\n pub mod db;\n pub mod source_binder;\n \n-mod ids;\n mod ty;\n mod impl_block;\n mod expr;\n@@ -58,7 +57,6 @@ pub use crate::{\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n-    ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{\n         display::HirDisplay,\n@@ -73,4 +71,6 @@ pub use hir_def::{\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };\n-pub use hir_expand::{either::Either, name::Name, Source};\n+pub use hir_expand::{\n+    either::Either, name::Name, HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Source,\n+};"}, {"sha": "0a836c9130d8d199f6e2b6470226e100580c9a50", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -11,9 +11,11 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    DefWithBodyId,\n+    DefWithBodyId, LocationCtx,\n+};\n+use hir_expand::{\n+    name::AsName, AstId, HirFileId, MacroCallId, MacroCallLoc, MacroFileKind, Source,\n };\n-use hir_expand::{name::AsName, AstId, MacroCallId, MacroCallLoc, MacroFileKind, Source};\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n@@ -24,11 +26,10 @@ use ra_syntax::{\n use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n-    ids::LocationCtx,\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, ScopeDef, Static,\n-    Struct, Trait, Ty, TypeAlias,\n+    GenericParam, HasBody, Local, MacroDef, Module, Name, Path, ScopeDef, Static, Struct, Trait,\n+    Ty, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -544,7 +545,7 @@ fn adjust(\n }\n \n /// Given a `ast::MacroCall`, return what `MacroKindFile` it belongs to.\n-/// FIXME: Not completed  \n+/// FIXME: Not completed\n fn to_macro_file_kind(macro_call: &ast::MacroCall) -> MacroFileKind {\n     let syn = macro_call.syntax();\n     let parent = match syn.parent() {"}, {"sha": "309bd2727d25724fda934ceb9ff1e654716d829f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -18,6 +18,7 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use hir_def::{generics::GenericParams, AdtId};\n+use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n     db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy,\n@@ -114,6 +115,13 @@ pub enum TypeCtor {\n     Closure { def: DefWithBody, expr: ExprId },\n }\n \n+/// This exists just for Chalk, because Chalk just has a single `StructId` where\n+/// we have different kinds of ADTs, primitive types and special type\n+/// constructors like tuples and function pointers.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeCtorId(salsa::InternId);\n+impl_intern_key!(TypeCtorId);\n+\n impl TypeCtor {\n     pub fn num_ty_params(self, db: &impl HirDatabase) -> usize {\n         match self {"}, {"sha": "268fa09e4a26c5bef71b14d60e9ef732d066bb9f", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -3,7 +3,7 @@ use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n use log::debug;\n-use ra_db::salsa;\n+use ra_db::{impl_intern_key, salsa};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n@@ -304,6 +304,10 @@ pub enum Impl {\n     /// Closure types implement the Fn traits synthetically.\n     ClosureFnTraitImpl(ClosureFnTraitImplData),\n }\n+/// This exists just for Chalk, because our ImplIds are only unique per module.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct GlobalImplId(salsa::InternId);\n+impl_intern_key!(GlobalImplId);\n \n /// An associated type value. Usually this comes from a `type` declaration\n /// inside an impl block, but for built-in impls we have to synthesize it.\n@@ -315,3 +319,8 @@ pub enum AssocTyValue {\n     /// The output type of the Fn trait implementation.\n     ClosureFnTraitImplOutput(ClosureFnTraitImplData),\n }\n+/// This exists just for Chalk, because it needs a unique ID for each associated\n+/// type value in an impl (even synthetic ones).\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct AssocTyValueId(salsa::InternId);\n+impl_intern_key!(AssocTyValueId);"}, {"sha": "9efdc53c45fecfe6d046fb91710ee56bd27059e0", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -847,38 +847,38 @@ fn id_to_chalk<T: InternKey>(salsa_id: T) -> chalk_ir::RawId {\n     chalk_ir::RawId { index: salsa_id.as_intern_id().as_u32() }\n }\n \n-impl From<chalk_ir::StructId> for crate::ids::TypeCtorId {\n+impl From<chalk_ir::StructId> for crate::ty::TypeCtorId {\n     fn from(struct_id: chalk_ir::StructId) -> Self {\n         id_from_chalk(struct_id.0)\n     }\n }\n \n-impl From<crate::ids::TypeCtorId> for chalk_ir::StructId {\n-    fn from(type_ctor_id: crate::ids::TypeCtorId) -> Self {\n+impl From<crate::ty::TypeCtorId> for chalk_ir::StructId {\n+    fn from(type_ctor_id: crate::ty::TypeCtorId) -> Self {\n         chalk_ir::StructId(id_to_chalk(type_ctor_id))\n     }\n }\n \n-impl From<chalk_ir::ImplId> for crate::ids::GlobalImplId {\n+impl From<chalk_ir::ImplId> for crate::ty::traits::GlobalImplId {\n     fn from(impl_id: chalk_ir::ImplId) -> Self {\n         id_from_chalk(impl_id.0)\n     }\n }\n \n-impl From<crate::ids::GlobalImplId> for chalk_ir::ImplId {\n-    fn from(impl_id: crate::ids::GlobalImplId) -> Self {\n+impl From<crate::ty::traits::GlobalImplId> for chalk_ir::ImplId {\n+    fn from(impl_id: crate::ty::traits::GlobalImplId) -> Self {\n         chalk_ir::ImplId(id_to_chalk(impl_id))\n     }\n }\n \n-impl From<chalk_rust_ir::AssociatedTyValueId> for crate::ids::AssocTyValueId {\n+impl From<chalk_rust_ir::AssociatedTyValueId> for crate::ty::traits::AssocTyValueId {\n     fn from(id: chalk_rust_ir::AssociatedTyValueId) -> Self {\n         id_from_chalk(id.0)\n     }\n }\n \n-impl From<crate::ids::AssocTyValueId> for chalk_rust_ir::AssociatedTyValueId {\n-    fn from(assoc_ty_value_id: crate::ids::AssocTyValueId) -> Self {\n+impl From<crate::ty::traits::AssocTyValueId> for chalk_rust_ir::AssociatedTyValueId {\n+    fn from(assoc_ty_value_id: crate::ty::traits::AssocTyValueId) -> Self {\n         chalk_rust_ir::AssociatedTyValueId(id_to_chalk(assoc_ty_value_id))\n     }\n }"}, {"sha": "b063530c27b290c7bf84bdbe0705600bb75ab7d1", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -35,7 +35,7 @@ use std::hash::{Hash, Hasher};\n \n use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, MacroDefId, Source};\n use ra_arena::{impl_arena_id, map::ArenaMap, RawId};\n-use ra_db::{salsa, CrateId};\n+use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n \n use crate::{builtin_type::BuiltinType, db::InternDatabase};\n@@ -56,19 +56,6 @@ pub struct ModuleId {\n pub struct LocalModuleId(RawId);\n impl_arena_id!(LocalModuleId);\n \n-macro_rules! impl_intern_key {\n-    ($name:ident) => {\n-        impl salsa::InternKey for $name {\n-            fn from_intern_id(v: salsa::InternId) -> Self {\n-                $name(v)\n-            }\n-            fn as_intern_id(&self) -> salsa::InternId {\n-                self.0\n-            }\n-        }\n-    };\n-}\n-\n #[derive(Debug)]\n pub struct ItemLoc<N: AstNode> {\n     pub(crate) module: ModuleId,"}, {"sha": "f6cf59c5fa8660cd339ab5447c2583ce9d414461", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -66,7 +66,7 @@ use ra_arena::Arena;\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::ast;\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     builtin_type::BuiltinType,\n@@ -90,18 +90,6 @@ pub struct CrateDefMap {\n     root: LocalModuleId,\n     modules: Arena<LocalModuleId, ModuleData>,\n \n-    /// Some macros are not well-behavior, which leads to infinite loop\n-    /// e.g. macro_rules! foo { ($ty:ty) => { foo!($ty); } }\n-    /// We mark it down and skip it in collector\n-    ///\n-    /// FIXME:\n-    /// Right now it only handle a poison macro in a single crate,\n-    /// such that if other crate try to call that macro,\n-    /// the whole process will do again until it became poisoned in that crate.\n-    /// We should handle this macro set globally\n-    /// However, do we want to put it as a global variable?\n-    poison_macros: FxHashSet<MacroDefId>,\n-\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -234,7 +222,6 @@ impl CrateDefMap {\n                 prelude: None,\n                 root,\n                 modules,\n-                poison_macros: FxHashSet::default(),\n                 diagnostics: Vec::new(),\n             }\n         };\n@@ -267,16 +254,6 @@ impl CrateDefMap {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, module, sink))\n     }\n \n-    pub fn resolve_path(\n-        &self,\n-        db: &impl DefDatabase,\n-        original_module: LocalModuleId,\n-        path: &Path,\n-    ) -> (PerNs, Option<usize>) {\n-        let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n-        (res.resolved_def, res.segment_index)\n-    }\n-\n     pub fn modules(&self) -> impl Iterator<Item = LocalModuleId> + '_ {\n         self.modules.iter().map(|(id, _data)| id)\n     }\n@@ -287,6 +264,16 @@ impl CrateDefMap {\n             .filter(move |(_id, data)| data.definition == Some(file_id))\n             .map(|(id, _data)| id)\n     }\n+\n+    pub(crate) fn resolve_path(\n+        &self,\n+        db: &impl DefDatabase,\n+        original_module: LocalModuleId,\n+        path: &Path,\n+    ) -> (PerNs, Option<usize>) {\n+        let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n+        (res.resolved_def, res.segment_index)\n+    }\n }\n \n impl ModuleData {"}, {"sha": "1d004b6a600e454cd3f962d642ceab4eb4bb43bd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a32aca317deb91ae03346cbc7880bd7d4429b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=982a32aca317deb91ae03346cbc7880bd7d4429b", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n use ra_syntax::{ast, SmolStr};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::tested_by;\n \n use crate::{\n@@ -57,6 +57,7 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n         unexpanded_macros: Vec::new(),\n         mod_dirs: FxHashMap::default(),\n         macro_stack_monitor: MacroStackMonitor::default(),\n+        poison_macros: FxHashSet::default(),\n         cfg_options,\n     };\n     collector.collect();\n@@ -103,6 +104,17 @@ struct DefCollector<'a, DB> {\n     /// Some macro use `$tt:tt which mean we have to handle the macro perfectly\n     /// To prevent stack overflow, we add a deep counter here for prevent that.\n     macro_stack_monitor: MacroStackMonitor,\n+    /// Some macros are not well-behavior, which leads to infinite loop\n+    /// e.g. macro_rules! foo { ($ty:ty) => { foo!($ty); } }\n+    /// We mark it down and skip it in collector\n+    ///\n+    /// FIXME:\n+    /// Right now it only handle a poison macro in a single crate,\n+    /// such that if other crate try to call that macro,\n+    /// the whole process will do again until it became poisoned in that crate.\n+    /// We should handle this macro set globally\n+    /// However, do we want to put it as a global variable?\n+    poison_macros: FxHashSet<MacroDefId>,\n \n     cfg_options: &'a CfgOptions,\n }\n@@ -489,7 +501,7 @@ where\n         macro_call_id: MacroCallId,\n         macro_def_id: MacroDefId,\n     ) {\n-        if self.def_map.poison_macros.contains(&macro_def_id) {\n+        if self.poison_macros.contains(&macro_def_id) {\n             return;\n         }\n \n@@ -509,7 +521,7 @@ where\n             .collect(raw_items.items());\n         } else {\n             log::error!(\"Too deep macro expansion: {:?}\", macro_call_id);\n-            self.def_map.poison_macros.insert(macro_def_id);\n+            self.poison_macros.insert(macro_def_id);\n         }\n \n         self.macro_stack_monitor.decrease(macro_def_id);\n@@ -807,7 +819,7 @@ mod tests {\n         db: &impl DefDatabase,\n         def_map: CrateDefMap,\n         monitor: MacroStackMonitor,\n-    ) -> CrateDefMap {\n+    ) -> (CrateDefMap, FxHashSet<MacroDefId>) {\n         let mut collector = DefCollector {\n             db,\n             def_map,\n@@ -816,13 +828,18 @@ mod tests {\n             unexpanded_macros: Vec::new(),\n             mod_dirs: FxHashMap::default(),\n             macro_stack_monitor: monitor,\n+            poison_macros: FxHashSet::default(),\n             cfg_options: &CfgOptions::default(),\n         };\n         collector.collect();\n-        collector.finish()\n+        (collector.def_map, collector.poison_macros)\n     }\n \n-    fn do_limited_resolve(code: &str, limit: u32, poison_limit: u32) -> CrateDefMap {\n+    fn do_limited_resolve(\n+        code: &str,\n+        limit: u32,\n+        poison_limit: u32,\n+    ) -> (CrateDefMap, FxHashSet<MacroDefId>) {\n         let (db, _file_id) = TestDB::with_single_file(&code);\n         let krate = db.test_crate();\n \n@@ -837,7 +854,6 @@ mod tests {\n                 prelude: None,\n                 root,\n                 modules,\n-                poison_macros: FxHashSet::default(),\n                 diagnostics: Vec::new(),\n             }\n         };\n@@ -867,7 +883,7 @@ foo!(KABOOM);\n \n     #[test]\n     fn test_macro_expand_poisoned() {\n-        let def = do_limited_resolve(\n+        let (_, poison_macros) = do_limited_resolve(\n             r#\"\n         macro_rules! foo {\n             ($ty:ty) => { foo!($ty); }\n@@ -878,12 +894,12 @@ foo!(KABOOM);\n             16,\n         );\n \n-        assert_eq!(def.poison_macros.len(), 1);\n+        assert_eq!(poison_macros.len(), 1);\n     }\n \n     #[test]\n     fn test_macro_expand_normal() {\n-        let def = do_limited_resolve(\n+        let (_, poison_macros) = do_limited_resolve(\n             r#\"\n         macro_rules! foo {\n             ($ident:ident) => { struct $ident {} }\n@@ -894,6 +910,6 @@ foo!(Bar);\n             16,\n         );\n \n-        assert_eq!(def.poison_macros.len(), 0);\n+        assert_eq!(poison_macros.len(), 0);\n     }\n }"}]}