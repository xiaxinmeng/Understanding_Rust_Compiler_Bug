{"sha": "0f1ba8d8c786f625934908d7681f9779e21668b5", "node_id": "C_kwDOAAsO6NoAKDBmMWJhOGQ4Yzc4NmY2MjU5MzQ5MDhkNzY4MWY5Nzc5ZTIxNjY4YjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-17T16:18:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-17T16:18:58Z"}, "message": "Rollup merge of #89946 - JohnTitor:fix-89686, r=petrochenkov\n\nFix an ICE with TAITs and Future\n\nFixes #89686", "tree": {"sha": "31e8e9717ae021101eb62db728ed638fbfb4a47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e8e9717ae021101eb62db728ed638fbfb4a47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f1ba8d8c786f625934908d7681f9779e21668b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbEzyCRBK7hj4Ov3rIwAAmLMIAFhcWuQzqqWuwdG4Il9pXcRu\nNXoD7aTgFF6McW5/BBMlsAj/NWs5nUX3gt9xnZnBXvhD+lc+Sfpuh3xn5J4ItvGe\nSWvASD7jveLpkbm2vqGeNkEQ2ORQHgr8vrr8vhqoYdsKToiKBWoJEiFLAMZUGlfX\nHjIZ0dJm6Q1P+LvFJMK2/ZvbvENHhUTzct25dXyglxNQb5fZNTpotDTl/56dq50P\nn6hvAhjD98BgQmitHmO7LiBqnYncHsL2OqaLkwd4DL0zSgwlcOR6TRaPVB+wxh5s\nfaQmoCr7pQYFZzqiYjQc6PCF3ZJJlZ1D0LrOq2cVGU+udkyKsR/QHtQgJpUwrGM=\n=Nd0Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 31e8e9717ae021101eb62db728ed638fbfb4a47d\nparent 1520fffecc2ba17c4e0ca63fe9915e56b46d59be\nparent f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634487538 +0200\ncommitter GitHub <noreply@github.com> 1634487538 +0200\n\nRollup merge of #89946 - JohnTitor:fix-89686, r=petrochenkov\n\nFix an ICE with TAITs and Future\n\nFixes #89686\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1ba8d8c786f625934908d7681f9779e21668b5", "html_url": "https://github.com/rust-lang/rust/commit/0f1ba8d8c786f625934908d7681f9779e21668b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f1ba8d8c786f625934908d7681f9779e21668b5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1520fffecc2ba17c4e0ca63fe9915e56b46d59be", "url": "https://api.github.com/repos/rust-lang/rust/commits/1520fffecc2ba17c4e0ca63fe9915e56b46d59be", "html_url": "https://github.com/rust-lang/rust/commit/1520fffecc2ba17c4e0ca63fe9915e56b46d59be"}, {"sha": "f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea", "html_url": "https://github.com/rust-lang/rust/commit/f001e8c519c68a2233e56ea64b4bfe8c7fedf0ea"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "bac681bd96fb184d331b20cd9c6b20b9c93670e2", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f1ba8d8c786f625934908d7681f9779e21668b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1ba8d8c786f625934908d7681f9779e21668b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=0f1ba8d8c786f625934908d7681f9779e21668b5", "patch": "@@ -769,11 +769,16 @@ fn foo(&self) -> Self::T { String::new() }\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n         if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n-            let opaque_local_def_id = def_id.expect_local();\n-            let opaque_hir_id = self.hir().local_def_id_to_hir_id(opaque_local_def_id);\n-            let opaque_hir_ty = match &self.hir().expect_item(opaque_hir_id).kind {\n-                hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n-                _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+            let opaque_local_def_id = def_id.as_local();\n+            let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n+                let hir = self.hir();\n+                let opaque_hir_id = hir.local_def_id_to_hir_id(opaque_local_def_id);\n+                match &hir.expect_item(opaque_hir_id).kind {\n+                    hir::ItemKind::OpaqueTy(opaque_hir_ty) => opaque_hir_ty,\n+                    _ => bug!(\"The HirId comes from a `ty::Opaque`\"),\n+                }\n+            } else {\n+                return false;\n             };\n \n             let (trait_ref, assoc_substs) = proj_ty.trait_ref_and_own_substs(self);"}, {"sha": "2b6ce49e7e2d7bcc1efdfee652bac48a57488df3", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f1ba8d8c786f625934908d7681f9779e21668b5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1ba8d8c786f625934908d7681f9779e21668b5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=0f1ba8d8c786f625934908d7681f9779e21668b5", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+\n+#![feature(type_alias_impl_trait)]\n+\n+use std::future::Future;\n+\n+type G<'a, T> = impl Future<Output = ()>;\n+//~^ ERROR: type mismatch resolving `<impl Future as Future>::Output == ()`\n+//~| ERROR: the trait bound `T: Trait` is not satisfied\n+\n+trait Trait {\n+    type F: Future<Output = ()>;\n+\n+    fn f(&self) -> Self::F;\n+\n+    fn g<'a>(&'a self) -> G<'a, Self>\n+    where\n+        Self: Sized,\n+    {\n+        async move { self.f().await }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "accc84d30a7bde3a954866eb7e9c0432ae3337a1", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0f1ba8d8c786f625934908d7681f9779e21668b5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f1ba8d8c786f625934908d7681f9779e21668b5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=0f1ba8d8c786f625934908d7681f9779e21668b5", "patch": "@@ -0,0 +1,34 @@\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+...\n+LL |         async move { self.f().await }\n+   |                    ------------------ the found `async` block\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Future as Future>::Output`\n+   = help: consider constraining the associated type `<impl Future as Future>::Output` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/issue-89686.rs:7:17\n+   |\n+LL | type G<'a, T> = impl Future<Output = ()>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type G<'a, T: Trait> = impl Future<Output = ()>;\n+   |             +++++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}]}