{"sha": "11ec2a47a43ceba5506165e0db5fc8355bff4073", "node_id": "C_kwDOAAsO6NoAKDExZWMyYTQ3YTQzY2ViYTU1MDYxNjVlMGRiNWZjODM1NWJmZjQwNzM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-10-13T19:31:18Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-16T12:37:21Z"}, "message": "extract Res to `generics_of` def_id conversion", "tree": {"sha": "7c22a13c9330df19a624571b83a78ac077cb6613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c22a13c9330df19a624571b83a78ac077cb6613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ec2a47a43ceba5506165e0db5fc8355bff4073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ec2a47a43ceba5506165e0db5fc8355bff4073", "html_url": "https://github.com/rust-lang/rust/commit/11ec2a47a43ceba5506165e0db5fc8355bff4073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ec2a47a43ceba5506165e0db5fc8355bff4073/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "url": "https://api.github.com/repos/rust-lang/rust/commits/a240ccd81c74c105b6f5fe84c46f8d36edb7e306", "html_url": "https://github.com/rust-lang/rust/commit/a240ccd81c74c105b6f5fe84c46f8d36edb7e306"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "92d9cb2fc1b2b131c250dee59e04a48228d69914", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11ec2a47a43ceba5506165e0db5fc8355bff4073/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ec2a47a43ceba5506165e0db5fc8355bff4073/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=11ec2a47a43ceba5506165e0db5fc8355bff4073", "patch": "@@ -17,7 +17,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::NodeIdHashingMode;\n@@ -146,6 +146,37 @@ impl<'tcx> TyCtxt<'tcx> {\n         hasher.finish()\n     }\n \n+    pub fn res_generics_def_id(self, res: Res) -> Option<DefId> {\n+        match res {\n+            Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => {\n+                Some(self.parent(def_id).and_then(|def_id| self.parent(def_id)).unwrap())\n+            }\n+            Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n+                Some(self.parent(def_id).unwrap())\n+            }\n+            // Other `DefKind`s don't have generics and would ICE when calling\n+            // `generics_of`.\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::Enum\n+                | DefKind::Trait\n+                | DefKind::OpaqueTy\n+                | DefKind::TyAlias\n+                | DefKind::ForeignTy\n+                | DefKind::TraitAlias\n+                | DefKind::AssocTy\n+                | DefKind::Fn\n+                | DefKind::AssocFn\n+                | DefKind::AssocConst\n+                | DefKind::Impl,\n+                def_id,\n+            ) => Some(def_id),\n+            Res::Err => None,\n+            _ => None,\n+        }\n+    }\n+\n     pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n         if let ty::Adt(def, substs) = *ty.kind() {\n             for field in def.all_fields() {"}, {"sha": "65aa49971cb777eee921b95c05e69343020a7693", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/11ec2a47a43ceba5506165e0db5fc8355bff4073/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ec2a47a43ceba5506165e0db5fc8355bff4073/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=11ec2a47a43ceba5506165e0db5fc8355bff4073", "patch": "@@ -1,15 +1,14 @@\n use rustc_errors::{Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n-use rustc_hir::def::CtorOf;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -198,38 +197,9 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // Try to use the segment resolution if it is valid, otherwise we\n             // default to the path resolution.\n             let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-            let generics = match res {\n-                Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => tcx\n-                    .generics_of(tcx.parent(def_id).and_then(|def_id| tcx.parent(def_id)).unwrap()),\n-                Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n-                    tcx.generics_of(tcx.parent(def_id).unwrap())\n-                }\n-                // Other `DefKind`s don't have generics and would ICE when calling\n-                // `generics_of`.\n-                Res::Def(\n-                    DefKind::Struct\n-                    | DefKind::Union\n-                    | DefKind::Enum\n-                    | DefKind::Trait\n-                    | DefKind::OpaqueTy\n-                    | DefKind::TyAlias\n-                    | DefKind::ForeignTy\n-                    | DefKind::TraitAlias\n-                    | DefKind::AssocTy\n-                    | DefKind::Fn\n-                    | DefKind::AssocFn\n-                    | DefKind::AssocConst\n-                    | DefKind::Impl,\n-                    def_id,\n-                ) => tcx.generics_of(def_id),\n-                Res::Err => {\n-                    tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n-                    return None;\n-                }\n-                _ => {\n-                    // If the user tries to specify generics on a type that does not take them,\n-                    // e.g. `usize<T>`, we may hit this branch, in which case we treat it as if\n-                    // no arguments have been passed. An error should already have been emitted.\n+            let generics = match tcx.res_generics_def_id(res) {\n+                Some(def_id) => tcx.generics_of(def_id),\n+                None => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(def_id),\n                         &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),"}]}