{"sha": "6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYWIwMmNmMTQ5Nzg3ZGI2YzllMzBlZTBjZWVkOTc3NjhiYmU5YWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T00:57:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-30T00:57:53Z"}, "message": "simplify gated cfgs logic", "tree": {"sha": "69ca7363f283a7a6be0251062f76956dfd2bc4e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ca7363f283a7a6be0251062f76956dfd2bc4e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "html_url": "https://github.com/rust-lang/rust/commit/6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad4d15f3888f1339d52632d40e0a47697dd2a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad4d15f3888f1339d52632d40e0a47697dd2a24", "html_url": "https://github.com/rust-lang/rust/commit/8ad4d15f3888f1339d52632d40e0a47697dd2a24"}], "stats": {"total": 83, "additions": 32, "deletions": 51}, "files": [{"sha": "22f130ed3c9e9ae441aaa2b1604f97cf4dfa74cd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "patch": "@@ -62,9 +62,9 @@ use std::time::Instant;\n \n use syntax::ast;\n use syntax::source_map::FileLoader;\n-use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n-use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, FileName};\n+use syntax::feature_gate::{find_gated_cfg, UnstableFeatures};\n+use syntax_pos::symbol::sym;\n+use syntax_pos::FileName;\n \n pub mod pretty;\n mod args;\n@@ -677,12 +677,6 @@ impl RustcDefaultCalls {\n                         .is_nightly_build();\n \n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n-                        let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            path: ast::Path::from_ident(ast::Ident::with_dummy_span(name)),\n-                            kind: ast::MetaItemKind::Word,\n-                            span: DUMMY_SP,\n-                        });\n-\n                         // Note that crt-static is a specially recognized cfg\n                         // directive that's printed out here as part of\n                         // rust-lang/rust#37406, but in general the\n@@ -693,10 +687,11 @@ impl RustcDefaultCalls {\n                         // through to build scripts.\n                         let value = value.as_ref().map(|s| s.as_str());\n                         let value = value.as_ref().map(|s| s.as_ref());\n-                        if name != sym::target_feature || value != Some(\"crt-static\") {\n-                            if !allow_unstable_cfg && gated_cfg.is_some() {\n-                                return None\n-                            }\n+                        if (name != sym::target_feature || value != Some(\"crt-static\"))\n+                            && !allow_unstable_cfg\n+                            && find_gated_cfg(|cfg_sym| cfg_sym == name).is_some()\n+                        {\n+                            return None;\n                         }\n \n                         if let Some(value) = value {"}, {"sha": "4e7738439b27c5e1905cbe34834346b31ad9da14", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "patch": "@@ -1,8 +1,8 @@\n //! Parsing and validation of builtin attributes\n \n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n+use crate::feature_gate::{find_gated_cfg, emit_feature_err, GatedCfg, GateIssue};\n use crate::print::pprust;\n-use crate::feature_gate::GatedCfg;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n@@ -531,8 +531,9 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {\n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n     eval_condition(cfg, sess, &mut |cfg| {\n-        if let (Some(feats), Some(gated_cfg)) = (features, GatedCfg::gate(cfg)) {\n-            gated_cfg.check_and_emit(sess, feats);\n+        let gate = find_gated_cfg(|sym| cfg.check_name(sym));\n+        if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n+            gate_cfg(&gated_cfg, cfg.span, sess, feats);\n         }\n         let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n         if cfg.path.segments.len() != 1 {\n@@ -561,12 +562,21 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n     })\n }\n \n+fn gate_cfg(gated_cfg: &GatedCfg, cfg_span: Span, sess: &ParseSess, features: &Features) {\n+    let (cfg, feature, has_feature) = gated_cfg;\n+    if !has_feature(features) && !cfg_span.allows_unstable(*feature) {\n+        let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n+        emit_feature_err(sess, *feature, cfg_span, GateIssue::Language, &explain);\n+    }\n+}\n+\n /// Evaluate a cfg-like condition (with `any` and `all`), using `eval` to\n /// evaluate individual items.\n-pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n-                         -> bool\n-    where F: FnMut(&ast::MetaItem) -> bool\n-{\n+pub fn eval_condition(\n+    cfg: &ast::MetaItem,\n+    sess: &ParseSess,\n+    eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n+) -> bool {\n     match cfg.kind {\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {"}, {"sha": "36916de57fca6172be02d1b443d8e00cb4d3b352", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "patch": "@@ -3,19 +3,15 @@\n use AttributeType::*;\n use AttributeGate::*;\n \n-use super::check::{emit_feature_err, GateIssue};\n use super::check::{EXPLAIN_ALLOW_INTERNAL_UNSAFE, EXPLAIN_ALLOW_INTERNAL_UNSTABLE};\n use rustc_feature::{Features, Stability};\n \n use crate::ast;\n-use crate::sess::ParseSess;\n \n use syntax_pos::symbol::{Symbol, sym};\n-use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n use lazy_static::lazy_static;\n \n-\n type GateFn = fn(&Features) -> bool;\n \n macro_rules! cfg_fn {\n@@ -24,39 +20,19 @@ macro_rules! cfg_fn {\n     }\n }\n \n+pub type GatedCfg = (Symbol, Symbol, GateFn);\n+\n /// `cfg(...)`'s that are feature gated.\n-const GATED_CFGS: &[(Symbol, Symbol, GateFn)] = &[\n+const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n ];\n \n-#[derive(Debug)]\n-pub struct GatedCfg {\n-    span: Span,\n-    index: usize,\n-}\n-\n-impl GatedCfg {\n-    pub fn gate(cfg: &ast::MetaItem) -> Option<GatedCfg> {\n-        GATED_CFGS.iter()\n-                  .position(|info| cfg.check_name(info.0))\n-                  .map(|idx| {\n-                      GatedCfg {\n-                          span: cfg.span,\n-                          index: idx\n-                      }\n-                  })\n-    }\n-\n-    pub fn check_and_emit(&self, sess: &ParseSess, features: &Features) {\n-        let (cfg, feature, has_feature) = GATED_CFGS[self.index];\n-        if !has_feature(features) && !self.span.allows_unstable(feature) {\n-            let explain = format!(\"`cfg({})` is experimental and subject to change\", cfg);\n-            emit_feature_err(sess, feature, self.span, GateIssue::Language, &explain);\n-        }\n-    }\n+/// Find a gated cfg determined by the `pred`icate which is given the cfg's name.\n+pub fn find_gated_cfg(pred: impl Fn(Symbol) -> bool) -> Option<&'static GatedCfg> {\n+    GATED_CFGS.iter().find(|(cfg_sym, ..)| pred(*cfg_sym))\n }\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "7f28ebb2b2de13912ae00cc19651b3edaa0f07d1", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cab02cf149787db6c9e30ee0ceed97768bbe9aa/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6cab02cf149787db6c9e30ee0ceed97768bbe9aa", "patch": "@@ -101,7 +101,7 @@ pub mod feature_gate {\n     };\n     mod builtin_attrs;\n     pub use builtin_attrs::{\n-        AttributeGate, AttributeTemplate, AttributeType, GatedCfg,\n+        AttributeGate, AttributeTemplate, AttributeType, find_gated_cfg, GatedCfg,\n         BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n         deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n     };"}]}