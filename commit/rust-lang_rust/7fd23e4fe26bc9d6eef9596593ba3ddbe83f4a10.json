{"sha": "7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZDIzZTRmZTI2YmM5ZDZlZWY5NTk2NTkzYmEzZGRiZTgzZjRhMTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-23T04:32:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-25T06:12:28Z"}, "message": "Convert uses of transmute which don't need it", "tree": {"sha": "040bfc01bf2a74228692a6b1efa781310761e114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040bfc01bf2a74228692a6b1efa781310761e114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "html_url": "https://github.com/rust-lang/rust/commit/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467d381d3afce474309d6ba9a334fa9b463c3a7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/467d381d3afce474309d6ba9a334fa9b463c3a7f", "html_url": "https://github.com/rust-lang/rust/commit/467d381d3afce474309d6ba9a334fa9b463c3a7f"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "da24fef157858c12e9de9ca5a96a78a276ced0a7", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "patch": "@@ -13,7 +13,6 @@\n use libc::c_void;\n use ptr::{mut_null};\n use repr::BoxRepr;\n-use cast::transmute;\n use unstable::intrinsics::TyDesc;\n \n type DropGlue<'self> = &'self fn(**TyDesc, *c_void);\n@@ -40,18 +39,17 @@ unsafe fn each_live_alloc(read_next_before: bool,\n     let box = local_heap::live_allocs();\n     let mut box: *mut BoxRepr = transmute(box);\n     while box != mut_null() {\n-        let next_before = transmute((*box).header.next);\n-        let uniq =\n-            (*box).header.ref_count == managed::raw::RC_MANAGED_UNIQUE;\n+        let next_before = (*box).next;\n+        let uniq = (*box).ref_count == managed::RC_MANAGED_UNIQUE;\n \n-        if !f(box, uniq) {\n+        if !f(box as *mut raw::Box<()>, uniq) {\n             return false;\n         }\n \n         if read_next_before {\n             box = next_before;\n         } else {\n-            box = transmute((*box).header.next);\n+            box = (*box).next;\n         }\n     }\n     return true;\n@@ -113,9 +111,9 @@ pub unsafe fn annihilate() {\n     // callback, as the original value may have been freed.\n     for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n-            let tydesc: *TyDesc = transmute((*box).header.type_desc);\n-            let data = transmute(&(*box).data);\n-            ((*tydesc).drop_glue)(data);\n+            let tydesc = (*box).type_desc;\n+            let data = &(*box).data as *();\n+            ((*tydesc).drop_glue)(data as *i8);\n         }\n     }\n \n@@ -130,7 +128,7 @@ pub unsafe fn annihilate() {\n             stats.n_bytes_freed +=\n                 (*((*box).header.type_desc)).size\n                 + sys::size_of::<BoxRepr>();\n-            local_free(transmute(box));\n+            local_free(box as *u8);\n         }\n     }\n "}, {"sha": "4feec26a2d982e4b923df0b67a46e95a530baee1", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=7fd23e4fe26bc9d6eef9596593ba3ddbe83f4a10", "patch": "@@ -74,14 +74,14 @@ pub mod rustrt {\n }\n \n unsafe fn bump<T, U>(ptr: *T, count: uint) -> *U {\n-    return cast::transmute(ptr::offset(ptr, count));\n+    return ptr::offset(ptr, count) as *U;\n }\n \n unsafe fn align_to_pointer<T>(ptr: *T) -> *T {\n     let align = sys::min_align_of::<*T>();\n-    let ptr: uint = cast::transmute(ptr);\n+    let ptr = ptr as uint;\n     let ptr = (ptr + (align - 1)) & -align;\n-    return cast::transmute(ptr);\n+    return ptr as *T;\n }\n \n unsafe fn get_safe_point_count() -> uint {\n@@ -126,8 +126,8 @@ type Visitor<'self> = &'self fn(root: **Word, tydesc: *TyDesc) -> bool;\n // Walks the list of roots for the given safe point, and calls visitor\n // on each root.\n unsafe fn _walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) -> bool {\n-    let fp_bytes: *u8 = cast::transmute(fp);\n-    let sp_meta: *u32 = cast::transmute(sp.sp_meta);\n+    let fp_bytes = fp as *u8;\n+    let sp_meta = sp.sp_meta as *u32;\n \n     let num_stack_roots = *sp_meta as uint;\n     let num_reg_roots = *ptr::offset(sp_meta, 1) as uint;\n@@ -173,9 +173,9 @@ unsafe fn walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) -> bool {\n \n // Is fp contained in segment?\n unsafe fn is_frame_in_segment(fp: *Word, segment: *StackSegment) -> bool {\n-    let begin: Word = cast::transmute(segment);\n-    let end: Word = cast::transmute((*segment).end);\n-    let frame: Word = cast::transmute(fp);\n+    let begin = segment as Word;\n+    let end = (*segment).end as Word;\n+    let frame = fp as Word;\n \n     return begin <= frame && frame <= end;\n }"}]}