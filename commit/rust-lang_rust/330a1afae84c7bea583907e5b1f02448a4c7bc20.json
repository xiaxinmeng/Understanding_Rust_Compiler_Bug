{"sha": "330a1afae84c7bea583907e5b1f02448a4c7bc20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMGExYWZhZTg0YzdiZWE1ODM5MDdlNWIxZjAyNDQ4YTRjN2JjMjA=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:24:27Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-18T00:14:14Z"}, "message": "Fix compilation and tests after the roll-up", "tree": {"sha": "923a76ce609c49eb49f6bd3f50eeed333c2587e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/923a76ce609c49eb49f6bd3f50eeed333c2587e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/330a1afae84c7bea583907e5b1f02448a4c7bc20", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/330a1afae84c7bea583907e5b1f02448a4c7bc20", "html_url": "https://github.com/rust-lang/rust/commit/330a1afae84c7bea583907e5b1f02448a4c7bc20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/330a1afae84c7bea583907e5b1f02448a4c7bc20/comments", "author": null, "committer": null, "parents": [{"sha": "9673365b3712102c025db451b497500ae82d5f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9673365b3712102c025db451b497500ae82d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/9673365b3712102c025db451b497500ae82d5f3a"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "f0a14c02382ee9af3f18a347a638875b1d40f583", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=330a1afae84c7bea583907e5b1f02448a4c7bc20", "patch": "@@ -47,6 +47,7 @@\n use clone::Clone;\n use kinds::Sized;\n use ops::Deref;\n+use self::Cow::*;\n \n /// A trait for borrowing data.\n pub trait BorrowFrom<Sized? Owned> for Sized? {"}, {"sha": "447869436762161c11be24b1e0d2fe1fc00b627f", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=330a1afae84c7bea583907e5b1f02448a4c7bc20", "patch": "@@ -836,7 +836,7 @@ r#\"digraph syntax_tree {\n \n     #[test]\n     fn simple_id_construction() {\n-        let id1 = dot::Id::new(\"hello\");\n+        let id1 = Id::new(\"hello\");\n         match id1 {\n             Ok(_) => {;},\n             Err(_) => panic!(\"'hello' is not a valid value for id anymore\")\n@@ -845,7 +845,7 @@ r#\"digraph syntax_tree {\n \n     #[test]\n     fn badly_formatted_id() {\n-        let id2 = dot::Id::new(\"Weird { struct : ure } !!!\");\n+        let id2 = Id::new(\"Weird { struct : ure } !!!\");\n         match id2 {\n             Ok(_) => panic!(\"graphviz id suddenly allows spaces, brackets and stuff\"),\n             Err(_) => {;}"}, {"sha": "4d0474b68da85914c2a703c93fdeae48de7b4bf9", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330a1afae84c7bea583907e5b1f02448a4c7bc20/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=330a1afae84c7bea583907e5b1f02448a4c7bc20", "patch": "@@ -79,8 +79,8 @@ impl<'v> Visitor<'v> for Annotator {\n         }\n     }\n \n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,\n-                b: &'v Block, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: FnKind<'v>, _: &'v FnDecl,\n+                _: &'v Block, _: Span, _: NodeId) {\n         match fk {\n             FkMethod(_, _, meth) => {\n                 // Methods are not already annotated, so we annotate it"}]}