{"sha": "bb1987b45e90a4f4bceabe4added1998dc0b2092", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMTk4N2I0NWU5MGE0ZjRiY2VhYmU0YWRkZWQxOTk4ZGMwYjIwOTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-30T12:57:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-30T12:57:39Z"}, "message": "Merge #10085\n\n10085: fix: avoid panic when parsing extern block r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "faa8e255033e8210b1213a53cecebabd587d09a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa8e255033e8210b1213a53cecebabd587d09a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1987b45e90a4f4bceabe4added1998dc0b2092", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLNXDCRBK7hj4Ov3rIwAAcCoIAGq8MT0b6Jq6WmR1nTvG6BYK\nUzMeezfv9sSghLxqf6dexbPVafBj6vXwfSuN2rEWbfXhE6udFm7qRHu498RXTrr+\nCVh48ogqCnTHGE/8vtxb61syQ9fgXq4VVS42l76/tFKCgUwPQ5HA6mtHJ/4vIuCz\nWdtU3qgUnw8yJmRhPD22dojgZpCML6/2k4X/j3KdzSy4kCSKyILk9E9UJDGKj/7d\nIKIsGWw1/c2OHLHuUNZc/Y4j9wIgsqvaRE4RfzBxSjVVoCPD9Ax4QASunAXy21o8\nRPTR4Ec4I2VU1PFIP6Pj4ZGu0avcRRbmxluOicu+G61q6uSP/l+weFfZsdGC4Cg=\n=Shte\n-----END PGP SIGNATURE-----\n", "payload": "tree faa8e255033e8210b1213a53cecebabd587d09a5\nparent cbae5969417eba9c9fbaee0337c8f57e566fd286\nparent 4452f9ec48011e689bddc0502cafd2ebc87300c8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630328259 +0000\ncommitter GitHub <noreply@github.com> 1630328259 +0000\n\nMerge #10085\n\n10085: fix: avoid panic when parsing extern block r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1987b45e90a4f4bceabe4added1998dc0b2092", "html_url": "https://github.com/rust-lang/rust/commit/bb1987b45e90a4f4bceabe4added1998dc0b2092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1987b45e90a4f4bceabe4added1998dc0b2092/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbae5969417eba9c9fbaee0337c8f57e566fd286", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbae5969417eba9c9fbaee0337c8f57e566fd286", "html_url": "https://github.com/rust-lang/rust/commit/cbae5969417eba9c9fbaee0337c8f57e566fd286"}, {"sha": "4452f9ec48011e689bddc0502cafd2ebc87300c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4452f9ec48011e689bddc0502cafd2ebc87300c8", "html_url": "https://github.com/rust-lang/rust/commit/4452f9ec48011e689bddc0502cafd2ebc87300c8"}], "stats": {"total": 109, "additions": 68, "deletions": 41}, "files": [{"sha": "3421078bba6a3914b6e5f2325e9282f141234691", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=bb1987b45e90a4f4bceabe4added1998dc0b2092", "patch": "@@ -93,6 +93,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     };\n \n     let mut has_mods = false;\n+    let mut has_extern = false;\n \n     // modifiers\n     if p.at(T![const]) && p.nth(1) != T!['{'] {\n@@ -102,7 +103,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n \n     // test_err async_without_semicolon\n     // fn foo() { let _ = async {} }\n-    if p.at(T![async]) && p.nth(1) != T!['{'] && p.nth(1) != T![move] && p.nth(1) != T![|] {\n+    if p.at(T![async]) && !matches!(p.nth(1), T!['{'] | T![move] | T![|]) {\n         p.eat(T![async]);\n         has_mods = true;\n     }\n@@ -114,7 +115,8 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         has_mods = true;\n     }\n \n-    if p.at(T![extern]) && p.nth(1) != T!['{'] && (p.nth(1) != STRING || p.nth(2) != T!['{']) {\n+    if p.at(T![extern]) {\n+        has_extern = true;\n         has_mods = true;\n         abi(p);\n     }\n@@ -211,25 +213,24 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             type_alias(p, m);\n         }\n \n+        // test extern_block\n         // unsafe extern \"C\" {}\n-        T![extern] => {\n-            abi(p);\n+        // extern {}\n+        T!['{'] if has_extern => {\n             extern_item_list(p);\n             m.complete(p, EXTERN_BLOCK);\n         }\n \n-        _ => {\n-            if !has_visibility && !has_mods {\n-                return Err(m);\n+        _ if has_visibility || has_mods => {\n+            if has_mods {\n+                p.error(\"expected existential, fn, trait or impl\");\n             } else {\n-                if has_mods {\n-                    p.error(\"expected existential, fn, trait or impl\");\n-                } else {\n-                    p.error(\"expected an item\");\n-                }\n-                m.complete(p, ERROR);\n+                p.error(\"expected an item\");\n             }\n+            m.complete(p, ERROR);\n         }\n+\n+        _ => return Err(m),\n     }\n     Ok(())\n }\n@@ -240,10 +241,11 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         // test extern_crate\n         // extern crate foo;\n         T![extern] if la == T![crate] => extern_crate(p, m),\n-        T![type] => {\n-            type_alias(p, m);\n-        }\n+        T![use] => use_item::use_(p, m),\n         T![mod] => mod_item(p, m),\n+\n+        T![type] => type_alias(p, m),\n+\n         T![struct] => {\n             // test struct_items\n             // struct Foo;\n@@ -256,14 +258,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             // }\n             adt::strukt(p, m);\n         }\n-        // test pub_macro_def\n-        // pub macro m($:ident) {}\n-        T![macro] => {\n-            macro_def(p, m);\n-        }\n-        IDENT if p.at_contextual_kw(\"macro_rules\") && p.nth(1) == BANG => {\n-            macro_rules(p, m);\n-        }\n+        T![enum] => adt::enum_(p, m),\n         IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n             // union Foo {}\n@@ -273,17 +268,19 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n             // }\n             adt::union(p, m);\n         }\n-        T![enum] => adt::enum_(p, m),\n-        T![use] => use_item::use_(p, m),\n+\n+        // test pub_macro_def\n+        // pub macro m($:ident) {}\n+        T![macro] => {\n+            macro_def(p, m);\n+        }\n+        IDENT if p.at_contextual_kw(\"macro_rules\") && p.nth(1) == BANG => {\n+            macro_rules(p, m);\n+        }\n+\n         T![const] if (la == IDENT || la == T![_] || la == T![mut]) => consts::konst(p, m),\n         T![static] => consts::static_(p, m),\n-        // test extern_block\n-        // extern {}\n-        T![extern] if la == T!['{'] || (la == STRING && p.nth(2) == T!['{']) => {\n-            abi(p);\n-            extern_item_list(p);\n-            m.complete(p, EXTERN_BLOCK);\n-        }\n+\n         _ => return Err(m),\n     };\n     Ok(())\n@@ -292,6 +289,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n fn extern_crate(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![extern]));\n     p.bump(T![extern]);\n+\n     assert!(p.at(T![crate]));\n     p.bump(T![crate]);\n "}, {"sha": "85e10ca36dbc3309a905666bdf32ffa2e477865a", "filename": "crates/syntax/test_data/parser/err/0048_repated_extern_modifier.rast", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rast?ref=bb1987b45e90a4f4bceabe4added1998dc0b2092", "patch": "@@ -0,0 +1,15 @@\n+SOURCE_FILE@0..22\n+  ERROR@0..10\n+    ABI@0..10\n+      EXTERN_KW@0..6 \"extern\"\n+      WHITESPACE@6..7 \" \"\n+      STRING@7..10 \"\\\"C\\\"\"\n+  WHITESPACE@10..11 \" \"\n+  ERROR@11..21\n+    ABI@11..21\n+      EXTERN_KW@11..17 \"extern\"\n+      WHITESPACE@17..18 \" \"\n+      STRING@18..21 \"\\\"C\\\"\"\n+  WHITESPACE@21..22 \"\\n\"\n+error 10..10: expected existential, fn, trait or impl\n+error 21..21: expected existential, fn, trait or impl"}, {"sha": "1fb18eaf1bcc5facfbc2ff491e4844fa168c1dcf", "filename": "crates/syntax/test_data/parser/err/0048_repated_extern_modifier.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0048_repated_extern_modifier.rs?ref=bb1987b45e90a4f4bceabe4added1998dc0b2092", "patch": "@@ -0,0 +1 @@\n+extern \"C\" extern \"C\"\r"}, {"sha": "beac566e592ba3ed899a72cea2b20260dcfcb79c", "filename": "crates/syntax/test_data/parser/inline/ok/0010_extern_block.rast", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rast?ref=bb1987b45e90a4f4bceabe4added1998dc0b2092", "patch": "@@ -1,9 +1,21 @@\n-SOURCE_FILE@0..10\n-  EXTERN_BLOCK@0..9\n-    ABI@0..6\n-      EXTERN_KW@0..6 \"extern\"\n+SOURCE_FILE@0..31\n+  EXTERN_BLOCK@0..20\n+    UNSAFE_KW@0..6 \"unsafe\"\n     WHITESPACE@6..7 \" \"\n-    EXTERN_ITEM_LIST@7..9\n-      L_CURLY@7..8 \"{\"\n-      R_CURLY@8..9 \"}\"\n-  WHITESPACE@9..10 \"\\n\"\n+    ABI@7..17\n+      EXTERN_KW@7..13 \"extern\"\n+      WHITESPACE@13..14 \" \"\n+      STRING@14..17 \"\\\"C\\\"\"\n+    WHITESPACE@17..18 \" \"\n+    EXTERN_ITEM_LIST@18..20\n+      L_CURLY@18..19 \"{\"\n+      R_CURLY@19..20 \"}\"\n+  WHITESPACE@20..21 \"\\n\"\n+  EXTERN_BLOCK@21..30\n+    ABI@21..27\n+      EXTERN_KW@21..27 \"extern\"\n+    WHITESPACE@27..28 \" \"\n+    EXTERN_ITEM_LIST@28..30\n+      L_CURLY@28..29 \"{\"\n+      R_CURLY@29..30 \"}\"\n+  WHITESPACE@30..31 \"\\n\""}, {"sha": "bee5ac8453ed563effcddf3fa38a4a70fadb44a1", "filename": "crates/syntax/test_data/parser/inline/ok/0010_extern_block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1987b45e90a4f4bceabe4added1998dc0b2092/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0010_extern_block.rs?ref=bb1987b45e90a4f4bceabe4added1998dc0b2092", "patch": "@@ -1 +1,2 @@\n+unsafe extern \"C\" {}\n extern {}"}]}