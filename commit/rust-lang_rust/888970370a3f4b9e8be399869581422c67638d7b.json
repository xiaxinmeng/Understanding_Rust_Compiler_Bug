{"sha": "888970370a3f4b9e8be399869581422c67638d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ODk3MDM3MGEzZjRiOWU4YmUzOTk4Njk1ODE0MjJjNjc2MzhkN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-12T14:43:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-12T14:43:57Z"}, "message": "Auto merge of #36414 - nnethercote:char_lit, r=jseyfried\n\nImprove char_lit's readability and speed\n\nThis is my first contribution to rustc. Please let me know if I've done anything wrong. (I ran `make tidy` before making the pull request.)", "tree": {"sha": "85b2f525bff72888321cb2fd94148475b93643b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b2f525bff72888321cb2fd94148475b93643b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888970370a3f4b9e8be399869581422c67638d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888970370a3f4b9e8be399869581422c67638d7b", "html_url": "https://github.com/rust-lang/rust/commit/888970370a3f4b9e8be399869581422c67638d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888970370a3f4b9e8be399869581422c67638d7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85592fbe60ee4e6878bb1f11da0243c3a3a440f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85592fbe60ee4e6878bb1f11da0243c3a3a440f3", "html_url": "https://github.com/rust-lang/rust/commit/85592fbe60ee4e6878bb1f11da0243c3a3a440f3"}, {"sha": "826f673664023e79e86409296d3d67527c9b0a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/826f673664023e79e86409296d3d67527c9b0a5a", "html_url": "https://github.com/rust-lang/rust/commit/826f673664023e79e86409296d3d67527c9b0a5a"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "a1eceb6921c6d7f21ca07c03662b73ea18737c11", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/888970370a3f4b9e8be399869581422c67638d7b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888970370a3f4b9e8be399869581422c67638d7b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=888970370a3f4b9e8be399869581422c67638d7b", "patch": "@@ -287,29 +287,21 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n     use std::char;\n \n     let mut chars = lit.chars();\n-    let c = match (chars.next(), chars.next()) {\n+    match (chars.next(), chars.next()) {\n         (Some(c), None) if c != '\\\\' => return (c, 1),\n         (Some('\\\\'), Some(c)) => match c {\n-            '\"' => Some('\"'),\n-            'n' => Some('\\n'),\n-            'r' => Some('\\r'),\n-            't' => Some('\\t'),\n-            '\\\\' => Some('\\\\'),\n-            '\\'' => Some('\\''),\n-            '0' => Some('\\0'),\n-            _ => { None }\n+            '\"' => return ('\"', 2),\n+            'n' => return ('\\n', 2),\n+            'r' => return ('\\r', 2),\n+            't' => return ('\\t', 2),\n+            '\\\\' => return ('\\\\', 2),\n+            '\\'' => return ('\\'', 2),\n+            '0' => return ('\\0', 2),\n+            _ => {}\n         },\n         _ => panic!(\"lexer accepted invalid char escape `{}`\", lit)\n     };\n \n-    match c {\n-        Some(x) => return (x, 2),\n-        None => { }\n-    }\n-\n-    let msg = format!(\"lexer should have rejected a bad character escape {}\", lit);\n-    let msg2 = &msg[..];\n-\n     fn esc(len: usize, lit: &str) -> Option<(char, isize)> {\n         u32::from_str_radix(&lit[2..len], 16).ok()\n         .and_then(char::from_u32)\n@@ -318,7 +310,10 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n \n     let unicode_escape = || -> Option<(char, isize)> {\n         if lit.as_bytes()[2] == b'{' {\n-            let idx = lit.find('}').expect(msg2);\n+            let idx = lit.find('}').unwrap_or_else(|| {\n+                panic!(\"lexer should have rejected a bad character escape {}\", lit)\n+            });\n+\n             let subslice = &lit[3..idx];\n             u32::from_str_radix(subslice, 16).ok()\n                 .and_then(char::from_u32)\n@@ -334,7 +329,9 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n         'u' => unicode_escape(),\n         'U' => esc(10, lit),\n         _ => None,\n-    }.expect(msg2);\n+    }.unwrap_or_else(|| {\n+        panic!(\"lexer should have rejected a bad character escape {}\", lit)\n+    })\n }\n \n /// Parse a string representing a string literal into its final form. Does"}]}