{"sha": "b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYWNjMTMwYmI5NmZkY2UzNWFiNTBjMGI2NGE4YTZkNDcwYmEyYTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-23T04:01:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-24T18:05:13Z"}, "message": "check alignment of pointers on Ref", "tree": {"sha": "775eed349ff7998db2be051409f7ba9e0bf5c359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/775eed349ff7998db2be051409f7ba9e0bf5c359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "html_url": "https://github.com/rust-lang/rust/commit/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c8df2291f2f727a2886cbb3f239d6261884722", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c8df2291f2f727a2886cbb3f239d6261884722", "html_url": "https://github.com/rust-lang/rust/commit/f0c8df2291f2f727a2886cbb3f239d6261884722"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "c08fb24c03fcb0c54d5a24201bd616f0198d6765", "filename": "src/eval_context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -664,6 +664,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Ref(_, _, ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n                 let (ptr, extra) = self.force_allocation(src)?.to_ptr_and_extra();\n+                let ty = self.lvalue_ty(lvalue);\n \n                 let val = match extra {\n                     LvalueExtra::None => Value::ByVal(ptr),\n@@ -673,6 +674,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n \n+                // Check alignment and non-NULLness.\n+                let (_, align) = self.size_and_align_of_dst(ty, val)?;\n+                if ptr.is_ptr() {\n+                    let ptr = ptr.to_ptr()?;\n+                    if !ptr.points_to_zst() { // assume ZST pointer to be always fully alignd (and anyway ZST pointers are going to disappear soon)\n+                        self.memory.check_align(ptr, align, 0)?;\n+                    }\n+                } else {\n+                    let v = (ptr.to_u128()? % (1 << self.memory.pointer_size())) as u64;\n+                    if v == 0 {\n+                        return Err(EvalError::InvalidNullPointerUsage);\n+                    }\n+                    if v % align != 0 {\n+                        return Err(EvalError::AlignmentCheckFailed {\n+                            has: v % align,\n+                            required: align,\n+                        });\n+                    }\n+                }\n+\n                 self.write_value(val, dest, dest_ty)?;\n             }\n "}, {"sha": "ae5f65a7166c6847fcfb0959fc27435a87123af8", "filename": "tests/compile-fail/int_ptr_cast.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 2usize as *const u32;\n+    // This must fail because alignment is violated\n+    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+}"}, {"sha": "1897066f7bcc3c7078ebee8135f9b34da862acc7", "filename": "tests/compile-fail/int_ptr_cast2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast2.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 0usize as *const u32;\n+    // This must fail because the pointer is NULL\n+    let _ = unsafe { &*x }; //~ ERROR: invalid use of NULL pointer\n+}"}, {"sha": "4cf353298b9e8c7757adba02e770109f4fcb18fc", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p = &foo.x;\n-    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n-}\n\\ No newline at end of file\n+    let p = &foo.x; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p;\n+}"}, {"sha": "b5893cd1019711fe4145b84cdfa560ec6f984e72", "filename": "tests/compile-fail/reference_to_packed_unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p: *const i32 = &foo.x;\n-    let x = unsafe { *p + foo.x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let p: *const i32 = &foo.x; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let x = unsafe { *p + foo.x };\n }"}, {"sha": "fcab430f8fcbc869d04273ff171990b05b0a0aee", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=b1acc130bb96fdce35ab50c0b64a8a6d470ba2a0", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let x = &2u16;\n+    let x = x as *const _ as *const u32;\n+    // This must fail because alignment is violated\n+    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+}"}]}