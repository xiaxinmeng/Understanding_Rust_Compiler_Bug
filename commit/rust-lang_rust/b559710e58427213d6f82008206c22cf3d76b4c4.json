{"sha": "b559710e58427213d6f82008206c22cf3d76b4c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NTk3MTBlNTg0MjcyMTNkNmY4MjAwODIwNmMyMmNmM2Q3NmI0YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-17T02:05:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-17T02:05:39Z"}, "message": "Auto merge of #50807 - kennytm:rollup, r=kennytm\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #50170 (Implement From for more types on Cow)\n - #50638 (Don't unconditionally set CLOEXEC twice on every fd we open on Linux)\n - #50656 (Fix `fn main() -> impl Trait` for non-`Termination` trait)\n - #50669 (rustdoc: deprecate `#![doc(passes, plugins, no_default_passes)]`)\n - #50726 (read2: Use inner function instead of closure)\n - #50728 (Fix rustdoc panic with `impl Trait` in type parameters)\n - #50736 (env: remove unwrap in examples in favor of try op)\n - #50740 (Remove LazyBTreeMap.)\n - #50752 (Add missing error codes in libsyntax-ext asm)\n - #50779 (Make mutable_noalias and arg_align_attributes be tracked)\n - #50787 (Fix run-make wasm tests)\n - #50788 (Fix an ICE when casting a nonexistent const)\n - #50789 (Ensure libraries built in stage0 have unique metadata)\n - #50793 (tidy: Add a check for empty UI test files)\n - #50797 (fix a typo in signed-integer::from_str_radix())\n - #50808 (Stabilize num::NonZeroU*)\n - #50809 (GitHub: Stop treating Cargo.lock as a generated file.)\n\nFailed merges:", "tree": {"sha": "d62ab7dd18ca9dd186257cbc398351281adf79ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62ab7dd18ca9dd186257cbc398351281adf79ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b559710e58427213d6f82008206c22cf3d76b4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b559710e58427213d6f82008206c22cf3d76b4c4", "html_url": "https://github.com/rust-lang/rust/commit/b559710e58427213d6f82008206c22cf3d76b4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b559710e58427213d6f82008206c22cf3d76b4c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4208bd5ed8d2b62d151d759bcffec16f98248d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/4208bd5ed8d2b62d151d759bcffec16f98248d53", "html_url": "https://github.com/rust-lang/rust/commit/4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "3c261a4ea9d931d6af8562ab3c669a64cbf2c023", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c261a4ea9d931d6af8562ab3c669a64cbf2c023", "html_url": "https://github.com/rust-lang/rust/commit/3c261a4ea9d931d6af8562ab3c669a64cbf2c023"}], "stats": {"total": 950, "additions": 589, "deletions": 361}, "files": [{"sha": "7f25bddc06cfefdbf78a4c681b3dc3ec79731a0b", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -7,4 +7,4 @@\n src/etc/installer/gfx/* binary\n *.woff binary\n src/vendor/** -text\n-Cargo.lock -merge\n+Cargo.lock -merge linguist-generated=false"}, {"sha": "e5824010ef2cc0309e5f0006ba0bff76d630dde6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -592,7 +592,15 @@ impl<'a> Builder<'a> {\n \n         // FIXME: Temporary fix for https://github.com/rust-lang/cargo/issues/3005\n         // Force cargo to output binaries with disambiguating hashes in the name\n-        cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &self.config.channel);\n+        let metadata = if compiler.stage == 0 {\n+            // Treat stage0 like special channel, whether it's a normal prior-\n+            // release rustc or a local rebuild with the same version, so we\n+            // never mix these libraries by accident.\n+            \"bootstrap\"\n+        } else {\n+            &self.config.channel\n+        };\n+        cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &metadata);\n \n         let stage;\n         if compiler.stage == 0 && self.local_rebuild {"}, {"sha": "1f81a617237cc0b82bd3cc1383b3accec1abd077", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -838,7 +838,7 @@ test!(RunFailFullDepsPretty {\n     host: true\n });\n \n-host_test!(RunMake {\n+default_test!(RunMake {\n     path: \"src/test/run-make\",\n     mode: \"run-make\",\n     suite: \"run-make\"\n@@ -1041,7 +1041,7 @@ impl Step for Compiletest {\n \n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n-            if !builder.config.dry_run && mode == \"run-make\" {\n+            if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n                 cmd.arg(\"--cc\").arg(builder.cc(target))\n@@ -1054,13 +1054,13 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if mode == \"run-make\" && !builder.config.llvm_enabled {\n+        if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n             builder.info(\n                 &format!(\"Ignoring run-make test suite as they generally don't work without LLVM\"));\n             return;\n         }\n \n-        if mode != \"run-make\" {\n+        if suite != \"run-make-fulldeps\" {\n             cmd.arg(\"--cc\").arg(\"\")\n                .arg(\"--cxx\").arg(\"\")\n                .arg(\"--cflags\").arg(\"\")"}, {"sha": "f7dd9d4f010a4235162b6239e93c893314f8fc14", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -102,7 +102,6 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(needs_allocator)]\n-#![feature(nonzero)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n #![feature(pin)]"}, {"sha": "449e3152d8f13ad06c7a9c6bf82e393525ceda3f", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -2240,6 +2240,14 @@ impl<'a> From<String> for Cow<'a, str> {\n     }\n }\n \n+#[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]\n+impl<'a> From<&'a String> for Cow<'a, str> {\n+    #[inline]\n+    fn from(s: &'a String) -> Cow<'a, str> {\n+        Cow::Borrowed(s.as_str())\n+    }\n+}\n+\n #[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]\n impl<'a> FromIterator<char> for Cow<'a, str> {\n     fn from_iter<I: IntoIterator<Item = char>>(it: I) -> Cow<'a, str> {"}, {"sha": "d30f8cd0fca20fb7f67cd2950a2a28f063d8d668", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -2286,6 +2286,13 @@ impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> {\n     }\n }\n \n+#[stable(feature = \"cow_from_vec_ref\", since = \"1.28.0\")]\n+impl<'a, T: Clone> From<&'a Vec<T>> for Cow<'a, [T]> {\n+    fn from(v: &'a Vec<T>) -> Cow<'a, [T]> {\n+        Cow::Borrowed(v.as_slice())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n     fn from_iter<I: IntoIterator<Item = T>>(it: I) -> Cow<'a, [T]> {"}, {"sha": "06fbfcecba801d31c2a2c3a34ef12ae10e433884", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -171,7 +171,6 @@ pub mod prelude;\n \n pub mod intrinsics;\n pub mod mem;\n-pub mod nonzero;\n pub mod ptr;\n pub mod hint;\n \n@@ -221,6 +220,7 @@ pub mod heap {\n \n // note: does not need to be public\n mod iter_private;\n+mod nonzero;\n mod tuple;\n mod unit;\n "}, {"sha": "ee5230cef8dd9597d89809ec0451bd0397d78fd6", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 3, "deletions": 93, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -9,103 +9,13 @@\n // except according to those terms.\n \n //! Exposes the NonZero lang item which provides optimization hints.\n-#![unstable(feature = \"nonzero\", reason = \"deprecated\", issue = \"49137\")]\n-#![rustc_deprecated(reason = \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n-                    since = \"1.26.0\")]\n-#![allow(deprecated)]\n \n use ops::CoerceUnsized;\n \n-/// Unsafe trait to indicate what types are usable with the NonZero struct\n-pub unsafe trait Zeroable {\n-    /// Whether this value is zero\n-    fn is_zero(&self) -> bool;\n-}\n-\n-macro_rules! impl_zeroable_for_pointer_types {\n-    ( $( $Ptr: ty )+ ) => {\n-        $(\n-            /// For fat pointers to be considered \"zero\", only the \"data\" part needs to be null.\n-            unsafe impl<T: ?Sized> Zeroable for $Ptr {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    (*self).is_null()\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-macro_rules! impl_zeroable_for_integer_types {\n-    ( $( $Int: ty )+ ) => {\n-        $(\n-            unsafe impl Zeroable for $Int {\n-                #[inline]\n-                fn is_zero(&self) -> bool {\n-                    *self == 0\n-                }\n-            }\n-        )+\n-    }\n-}\n-\n-impl_zeroable_for_pointer_types! {\n-    *const T\n-    *mut T\n-}\n-\n-impl_zeroable_for_integer_types! {\n-    usize u8 u16 u32 u64 u128\n-    isize i8 i16 i32 i64 i128\n-}\n-\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[lang = \"non_zero\"]\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n-pub struct NonZero<T: Zeroable>(pub(crate) T);\n-\n-impl<T: Zeroable> NonZero<T> {\n-    /// Creates an instance of NonZero with the provided value.\n-    /// You must indeed ensure that the value is actually \"non-zero\".\n-    #[inline]\n-    pub const unsafe fn new_unchecked(inner: T) -> Self {\n-        NonZero(inner)\n-    }\n-\n-    /// Creates an instance of NonZero with the provided value.\n-    #[inline]\n-    pub fn new(inner: T) -> Option<Self> {\n-        if inner.is_zero() {\n-            None\n-        } else {\n-            Some(NonZero(inner))\n-        }\n-    }\n-\n-    /// Gets the inner value.\n-    pub fn get(self) -> T {\n-        self.0\n-    }\n-}\n-\n-impl<T: Zeroable+CoerceUnsized<U>, U: Zeroable> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*mut T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n-\n-impl<'a, T: ?Sized> From<&'a mut T> for NonZero<*const T> {\n-    fn from(reference: &'a mut T) -> Self {\n-        let ptr: *mut T = reference;\n-        NonZero(ptr)\n-    }\n-}\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n \n-impl<'a, T: ?Sized> From<&'a T> for NonZero<*const T> {\n-    fn from(reference: &'a T) -> Self {\n-        NonZero(reference)\n-    }\n-}\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}"}, {"sha": "6df8ca98ba92c45976fa477b31ae53660891a9d3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -16,15 +16,14 @@ use convert::TryFrom;\n use fmt;\n use intrinsics;\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n use ops;\n use str::FromStr;\n \n macro_rules! impl_nonzero_fmt {\n-    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n-            #[$stability]\n-            #[allow(deprecated)]\n+            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -36,7 +35,7 @@ macro_rules! impl_nonzero_fmt {\n }\n \n macro_rules! nonzero_integers {\n-    ( #[$stability: meta] #[$deprecation: meta] $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n         $(\n             /// An integer that is known not to equal zero.\n             ///\n@@ -47,27 +46,24 @@ macro_rules! nonzero_integers {\n             /// use std::mem::size_of;\n             /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n             /// ```\n-            #[$stability]\n-            #[$deprecation]\n-            #[allow(deprecated)]\n+            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n             #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n             pub struct $Ty(NonZero<$Int>);\n \n-            #[allow(deprecated)]\n             impl $Ty {\n                 /// Create a non-zero without checking the value.\n                 ///\n                 /// # Safety\n                 ///\n                 /// The value must not be zero.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     $Ty(NonZero(n))\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -78,7 +74,7 @@ macro_rules! nonzero_integers {\n                 }\n \n                 /// Returns the value as a primitive type.\n-                #[$stability]\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn get(self) -> $Int {\n                     self.0 .0\n@@ -87,16 +83,13 @@ macro_rules! nonzero_integers {\n             }\n \n             impl_nonzero_fmt! {\n-                #[$stability]\n                 (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n             }\n         )+\n     }\n }\n \n nonzero_integers! {\n-    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n-    #[allow(deprecated)]  // Redundant, works around \"error: inconsistent lockstep iteration\"\n     NonZeroU8(u8);\n     NonZeroU16(u16);\n     NonZeroU32(u32);\n@@ -105,19 +98,6 @@ nonzero_integers! {\n     NonZeroUsize(usize);\n }\n \n-nonzero_integers! {\n-    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n-    #[rustc_deprecated(since = \"1.26.0\", reason = \"\\\n-        signed non-zero integers are considered for removal due to lack of known use cases. \\\n-        If you\u2019re using them, please comment on https://github.com/rust-lang/rust/issues/49137\")]\n-    NonZeroI8(i8);\n-    NonZeroI16(i16);\n-    NonZeroI32(i32);\n-    NonZeroI64(i64);\n-    NonZeroI128(i128);\n-    NonZeroIsize(isize);\n-}\n-\n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n /// Operations like `+` on `u32` values is intended to never overflow,\n@@ -252,7 +232,7 @@ depending on `radix`:\n \n  * `0-9`\n  * `a-z`\n- * `a-z`\n+ * `A-Z`\n \n # Panics\n "}, {"sha": "63bcc024020155fe753716f68dc2d6f1e2e2c046", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n use mem;\n-#[allow(deprecated)] use nonzero::NonZero;\n+use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n \n@@ -2742,7 +2742,6 @@ impl<T: ?Sized> PartialOrd for *mut T {\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n-#[allow(deprecated)]\n #[doc(hidden)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n@@ -2790,7 +2789,6 @@ impl<T: Sized> Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n@@ -2855,15 +2853,13 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n         Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n@@ -2896,7 +2892,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n-    #[allow(deprecated)] pointer: NonZero<*const T>,\n+    pointer: NonZero<*const T>,\n }\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n@@ -2923,7 +2919,6 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n-#[allow(deprecated)]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n@@ -3054,15 +3049,13 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-#[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero(reference as _) }"}, {"sha": "7fb4b503c01efea48e8acc5e46bb5efc8c356486", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -26,7 +26,6 @@\n #![feature(iterator_step_by)]\n #![feature(iterator_flatten)]\n #![feature(iterator_repeat_with)]\n-#![feature(nonzero)]\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]"}, {"sha": "acd5c44c1a4d807a71d5cab62a86a116b0dc0650", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -19,10 +19,10 @@ use super::{CombinedSnapshot,\n use super::combine::CombineFields;\n use super::region_constraints::{TaintDirections};\n \n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n use ty::{self, TyCtxt, Binder, TypeFoldable};\n use ty::error::TypeError;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n+use std::collections::BTreeMap;\n use syntax_pos::Span;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n@@ -247,8 +247,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot<'a, 'tcx>,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &LazyBTreeMap<ty::BoundRegion,\n-                                                                  ty::Region<'tcx>>,\n+                                             a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                              r0: ty::Region<'tcx>)\n                                              -> ty::Region<'tcx> {\n             // Regions that pre-dated the LUB computation stay as they are.\n@@ -344,8 +343,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot<'a, 'tcx>,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &LazyBTreeMap<ty::BoundRegion,\n-                                                                  ty::Region<'tcx>>,\n+                                             a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                              a_vars: &[ty::RegionVid],\n                                              b_vars: &[ty::RegionVid],\n                                              r0: ty::Region<'tcx>)\n@@ -414,7 +412,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         fn rev_lookup<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                       span: Span,\n-                                      a_map: &LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n+                                      a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                       r: ty::Region<'tcx>) -> ty::Region<'tcx>\n         {\n             for (a_br, a_r) in a_map {\n@@ -437,7 +435,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n }\n \n fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,\n-                           map: &LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+                           map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n                            -> Vec<ty::RegionVid> {\n     map.iter()\n        .map(|(_, &r)| match *r {"}, {"sha": "f105ecf7ee4f8c63aea365128d5ea250adeae313", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -28,9 +28,9 @@ use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n use traits::{self, ObligationCause, PredicateObligations};\n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n+use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n@@ -198,7 +198,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n /// region that each late-bound region was replaced with.\n-pub type SkolemizationMap<'tcx> = LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n+pub type SkolemizationMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n \n /// See `error_reporting` module for more details\n #[derive(Clone, Debug)]\n@@ -1235,7 +1235,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n         value: &ty::Binder<T>)\n-        -> (T, LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+        -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where T : TypeFoldable<'tcx>\n     {\n         self.tcx.replace_late_bound_regions("}, {"sha": "ac6ff6831adb804ceb61a80d6a0cbf16abfb13d3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -56,7 +56,6 @@\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(non_exhaustive)]\n-#![feature(nonzero)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(optin_builtin_traits)]"}, {"sha": "489197e038176a0183ff9fa04eef49b02ecf6dea", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -1239,9 +1239,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"print the result of the translation item collection pass\"),\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n           \"set the MIR optimization level (0-3, default: 1)\"),\n-    mutable_noalias: bool = (false, parse_bool, [UNTRACKED],\n+    mutable_noalias: bool = (false, parse_bool, [TRACKED],\n           \"emit noalias metadata for mutable references\"),\n-    arg_align_attributes: bool = (false, parse_bool, [UNTRACKED],\n+    arg_align_attributes: bool = (false, parse_bool, [TRACKED],\n           \"emit align metadata for reference arguments\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"dump MIR state at various points in translation\"),"}, {"sha": "250f33d9dbafb6800eb4ef27f7503f60e7f6877a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -43,7 +43,7 @@ use middle::const_val::ConstVal;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n+use std::collections::BTreeMap;\n use std::fmt;\n use util::nodemap::FxHashSet;\n \n@@ -332,7 +332,7 @@ struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     current_depth: u32,\n     fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-    map: LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n+    map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -347,7 +347,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn replace_late_bound_regions<T,F>(self,\n         value: &Binder<T>,\n         mut f: F)\n-        -> (T, LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+        -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F : FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n               T : TypeFoldable<'tcx>,\n     {\n@@ -460,7 +460,7 @@ impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> {\n             tcx,\n             current_depth: 1,\n             fld_r,\n-            map: LazyBTreeMap::default()\n+            map: BTreeMap::default()\n         }\n     }\n }"}, {"sha": "74f91af10fe637888342d6a7c39407a3e239cd3e", "filename": "src/librustc_data_structures/lazy_btree_map.rs", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Flibrustc_data_structures%2Flazy_btree_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Flibrustc_data_structures%2Flazy_btree_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flazy_btree_map.rs?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53", "patch": "@@ -1,108 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::collections::btree_map;\n-use std::collections::BTreeMap;\n-\n-/// A thin wrapper around BTreeMap that avoids allocating upon creation.\n-///\n-/// Vec, HashSet and HashMap all have the nice feature that they don't do any\n-/// heap allocation when creating a new structure of the default size. In\n-/// contrast, BTreeMap *does* allocate in that situation. The compiler uses\n-/// B-Tree maps in some places such that many maps are created but few are\n-/// inserted into, so having a BTreeMap alternative that avoids allocating on\n-/// creation is a performance win.\n-///\n-/// Only a fraction of BTreeMap's functionality is currently supported.\n-/// Additional functionality should be added on demand.\n-#[derive(Debug)]\n-pub struct LazyBTreeMap<K, V>(Option<BTreeMap<K, V>>);\n-\n-impl<K, V> LazyBTreeMap<K, V> {\n-    pub fn new() -> LazyBTreeMap<K, V> {\n-        LazyBTreeMap(None)\n-    }\n-\n-    pub fn iter(&self) -> Iter<K, V> {\n-        Iter(self.0.as_ref().map(|btm| btm.iter()))\n-    }\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.0.as_ref().map_or(true, |btm| btm.is_empty())\n-    }\n-}\n-\n-impl<K: Ord, V> LazyBTreeMap<K, V> {\n-    fn instantiate(&mut self) -> &mut BTreeMap<K, V> {\n-        if let Some(ref mut btm) = self.0 {\n-            btm\n-        } else {\n-            let btm = BTreeMap::new();\n-            self.0 = Some(btm);\n-            self.0.as_mut().unwrap()\n-        }\n-    }\n-\n-    pub fn insert(&mut self, key: K, value: V) -> Option<V> {\n-        self.instantiate().insert(key, value)\n-    }\n-\n-    pub fn entry(&mut self, key: K) -> btree_map::Entry<K, V> {\n-        self.instantiate().entry(key)\n-    }\n-\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n-        Values(self.0.as_ref().map(|btm| btm.values()))\n-    }\n-}\n-\n-impl<K: Ord, V> Default for LazyBTreeMap<K, V> {\n-    fn default() -> LazyBTreeMap<K, V> {\n-        LazyBTreeMap::new()\n-    }\n-}\n-\n-impl<'a, K: 'a, V: 'a> IntoIterator for &'a LazyBTreeMap<K, V> {\n-    type Item = (&'a K, &'a V);\n-    type IntoIter = Iter<'a, K, V>;\n-\n-    fn into_iter(self) -> Iter<'a, K, V> {\n-        self.iter()\n-    }\n-}\n-\n-pub struct Iter<'a, K: 'a, V: 'a>(Option<btree_map::Iter<'a, K, V>>);\n-\n-impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n-    type Item = (&'a K, &'a V);\n-\n-    fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        self.0.as_mut().and_then(|iter| iter.next())\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.as_ref().map_or_else(|| (0, Some(0)), |iter| iter.size_hint())\n-    }\n-}\n-\n-pub struct Values<'a, K: 'a, V: 'a>(Option<btree_map::Values<'a, K, V>>);\n-\n-impl<'a, K, V> Iterator for Values<'a, K, V> {\n-    type Item = &'a V;\n-\n-    fn next(&mut self) -> Option<&'a V> {\n-        self.0.as_mut().and_then(|values| values.next())\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.as_ref().map_or_else(|| (0, Some(0)), |values| values.size_hint())\n-    }\n-}\n-"}, {"sha": "9a6705fe9cac32b6cad2d276f672abef2e5b6d45", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -21,7 +21,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(collections_range)]\n-#![feature(nonzero)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]\n@@ -61,7 +60,6 @@ pub mod bitvec;\n pub mod graph;\n pub mod indexed_set;\n pub mod indexed_vec;\n-pub mod lazy_btree_map;\n pub mod obligation_forest;\n pub mod sip128;\n pub mod snapshot_map;"}, {"sha": "ecced1b81682e94d365b34389a4234a4ff868700", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -30,7 +30,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(nonzero)]\n #![feature(inclusive_range_methods)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]"}, {"sha": "2e737a016da7761c53d2075017d1a6626f057c72", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -275,7 +275,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprCast(ref from, _) => {\n             debug!(\"Checking const cast(id={})\", from.id);\n             match v.tables.cast_kinds().get(from.hir_id) {\n-                None => span_bug!(e.span, \"no kind for cast\"),\n+                None => v.tcx.sess.delay_span_bug(e.span, \"no kind for cast\"),\n                 Some(&CastKind::PtrAddrCast) | Some(&CastKind::FnPtrAddrCast) => {\n                     v.promotable = false;\n                 }"}, {"sha": "39de09fe34f401ce4f360445b141859c00cd32c6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -1031,13 +1031,13 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.id);\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);\n \n-    let ret_ty = fn_sig.output();\n-    fcx.require_type_is_sized(ret_ty, decl.output.span(), traits::SizedReturnType);\n-    let ret_ty = fcx.instantiate_anon_types_from_return_value(fn_id, &ret_ty);\n-    fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n+    let declared_ret_ty = fn_sig.output();\n+    fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n+    let revealed_ret_ty = fcx.instantiate_anon_types_from_return_value(fn_id, &declared_ret_ty);\n+    fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(revealed_ret_ty)));\n     fn_sig = fcx.tcx.mk_fn_sig(\n         fn_sig.inputs().iter().cloned(),\n-        ret_ty,\n+        revealed_ret_ty,\n         fn_sig.variadic,\n         fn_sig.unsafety,\n         fn_sig.abi\n@@ -1119,15 +1119,15 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         actual_return_ty = fcx.next_diverging_ty_var(\n             TypeVariableOrigin::DivergingFn(span));\n     }\n-    fcx.demand_suptype(span, ret_ty, actual_return_ty);\n+    fcx.demand_suptype(span, revealed_ret_ty, actual_return_ty);\n \n     // Check that the main return type implements the termination trait.\n     if let Some(term_id) = fcx.tcx.lang_items().termination() {\n         if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n             if id == fn_id {\n                 match entry_type {\n                     config::EntryMain => {\n-                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n+                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(declared_ret_ty)));\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n                         let cause = traits::ObligationCause::new("}, {"sha": "c233e57a8018eb5af05b226117be975b99f3d4e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -1754,16 +1754,39 @@ pub struct Generics {\n \n impl Clean<Generics> for hir::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n+        // Synthetic type-parameters are inserted after normal ones.\n+        // In order for normal parameters to be able to refer to synthetic ones,\n+        // scans them first.\n+        fn is_impl_trait(param: &hir::GenericParam) -> bool {\n+            if let hir::GenericParam::Type(ref tp) = param {\n+                tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait)\n+            } else {\n+                false\n+            }\n+        }\n+        let impl_trait_params = self.params\n+            .iter()\n+            .filter(|p| is_impl_trait(p))\n+            .map(|p| {\n+                let p = p.clean(cx);\n+                if let GenericParamDef::Type(ref tp) = p {\n+                    cx.impl_trait_bounds\n+                        .borrow_mut()\n+                        .insert(tp.did, tp.bounds.clone());\n+                } else {\n+                    unreachable!()\n+                }\n+                p\n+            })\n+            .collect::<Vec<_>>();\n+\n         let mut params = Vec::with_capacity(self.params.len());\n-        for p in &self.params {\n+        for p in self.params.iter().filter(|p| !is_impl_trait(p)) {\n             let p = p.clean(cx);\n-            if let GenericParamDef::Type(ref tp) = p {\n-                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n-                    cx.impl_trait_bounds.borrow_mut().insert(tp.did, tp.bounds.clone());\n-                }\n-            }\n             params.push(p);\n         }\n+        params.extend(impl_trait_params);\n+\n         let mut g = Generics {\n             params,\n             where_predicates: self.where_clause.predicates.clean(cx)"}, {"sha": "a14a27d5d619347aacf6c8f765fbab3ad3e9b8c2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -654,25 +654,55 @@ where R: 'static + Send,\n \n         krate.version = crate_version;\n \n+        let diag = core::new_handler(error_format, None);\n+\n+        fn report_deprecated_attr(name: &str, diag: &errors::Handler) {\n+            let mut msg = diag.struct_warn(&format!(\"the `#![doc({})]` attribute is \\\n+                                                     considered deprecated\", name));\n+            msg.warn(\"please see https://github.com/rust-lang/rust/issues/44136\");\n+\n+            if name == \"no_default_passes\" {\n+                msg.help(\"you may want to use `#![doc(document_private_items)]`\");\n+            }\n+\n+            msg.emit();\n+        }\n+\n         // Process all of the crate attributes, extracting plugin metadata along\n         // with the passes which we are supposed to run.\n         for attr in krate.module.as_ref().unwrap().attrs.lists(\"doc\") {\n             let name = attr.name().map(|s| s.as_str());\n             let name = name.as_ref().map(|s| &s[..]);\n             if attr.is_word() {\n                 if name == Some(\"no_default_passes\") {\n+                    report_deprecated_attr(\"no_default_passes\", &diag);\n                     default_passes = false;\n                 }\n             } else if let Some(value) = attr.value_str() {\n                 let sink = match name {\n-                    Some(\"passes\") => &mut passes,\n-                    Some(\"plugins\") => &mut plugins,\n+                    Some(\"passes\") => {\n+                        report_deprecated_attr(\"passes = \\\"...\\\"\", &diag);\n+                        &mut passes\n+                    },\n+                    Some(\"plugins\") => {\n+                        report_deprecated_attr(\"plugins = \\\"...\\\"\", &diag);\n+                        &mut plugins\n+                    },\n                     _ => continue,\n                 };\n                 for p in value.as_str().split_whitespace() {\n                     sink.push(p.to_string());\n                 }\n             }\n+\n+            if attr.is_word() && name == Some(\"document_private_items\") {\n+                default_passes = false;\n+\n+                passes = vec![\n+                    String::from(\"collapse-docs\"),\n+                    String::from(\"unindent-comments\"),\n+                ];\n+            }\n         }\n \n         if default_passes {"}, {"sha": "91e417c64da6e9a314de21be4a0950dfa7272df3", "filename": "src/libstd/env.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -49,9 +49,11 @@ use sys::os as os_imp;\n /// ```\n /// use std::env;\n ///\n-/// // We assume that we are in a valid directory.\n-/// let path = env::current_dir().unwrap();\n-/// println!(\"The current directory is {}\", path.display());\n+/// fn main() -> std::io::Result<()> {\n+///     let path = env::current_dir()?;\n+///     println!(\"The current directory is {}\", path.display());\n+///     Ok(())\n+/// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_dir() -> io::Result<PathBuf> {\n@@ -441,15 +443,18 @@ pub struct JoinPathsError {\n /// Joining paths on a Unix-like platform:\n ///\n /// ```\n-/// # if cfg!(unix) {\n /// use std::env;\n /// use std::ffi::OsString;\n /// use std::path::Path;\n ///\n-/// let paths = [Path::new(\"/bin\"), Path::new(\"/usr/bin\")];\n-/// let path_os_string = env::join_paths(paths.iter()).unwrap();\n-/// assert_eq!(path_os_string, OsString::from(\"/bin:/usr/bin\"));\n+/// fn main() -> Result<(), env::JoinPathsError> {\n+/// # if cfg!(unix) {\n+///     let paths = [Path::new(\"/bin\"), Path::new(\"/usr/bin\")];\n+///     let path_os_string = env::join_paths(paths.iter())?;\n+///     assert_eq!(path_os_string, OsString::from(\"/bin:/usr/bin\"));\n /// # }\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Joining a path containing a colon on a Unix-like platform results in an error:\n@@ -471,11 +476,15 @@ pub struct JoinPathsError {\n /// use std::env;\n /// use std::path::PathBuf;\n ///\n-/// if let Some(path) = env::var_os(\"PATH\") {\n-///     let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n-///     paths.push(PathBuf::from(\"/home/xyz/bin\"));\n-///     let new_path = env::join_paths(paths).unwrap();\n-///     env::set_var(\"PATH\", &new_path);\n+/// fn main() -> Result<(), env::JoinPathsError> {\n+///     if let Some(path) = env::var_os(\"PATH\") {\n+///         let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n+///         paths.push(PathBuf::from(\"/home/xyz/bin\"));\n+///         let new_path = env::join_paths(paths)?;\n+///         env::set_var(\"PATH\", &new_path);\n+///     }\n+///\n+///     Ok(())\n /// }\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "6513d11dd517c436c25afe16c7def1f54d1cea0c", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -682,6 +682,14 @@ impl Borrow<CStr> for CString {\n     fn borrow(&self) -> &CStr { self }\n }\n \n+#[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]\n+impl<'a> From<Cow<'a, CStr>> for CString {\n+    #[inline]\n+    fn from(s: Cow<'a, CStr>) -> Self {\n+        s.into_owned()\n+    }\n+}\n+\n #[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n impl<'a> From<&'a CStr> for Box<CStr> {\n     fn from(s: &'a CStr) -> Box<CStr> {\n@@ -706,6 +714,30 @@ impl From<CString> for Box<CStr> {\n     }\n }\n \n+#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n+impl<'a> From<CString> for Cow<'a, CStr> {\n+    #[inline]\n+    fn from(s: CString) -> Cow<'a, CStr> {\n+        Cow::Owned(s)\n+    }\n+}\n+\n+#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n+impl<'a> From<&'a CStr> for Cow<'a, CStr> {\n+    #[inline]\n+    fn from(s: &'a CStr) -> Cow<'a, CStr> {\n+        Cow::Borrowed(s)\n+    }\n+}\n+\n+#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n+impl<'a> From<&'a CString> for Cow<'a, CStr> {\n+    #[inline]\n+    fn from(s: &'a CString) -> Cow<'a, CStr> {\n+        Cow::Borrowed(s.as_c_str())\n+    }\n+}\n+\n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n     #[inline]"}, {"sha": "0a3148029d053ce1fbac909bf77dd0d77fcf3053", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -664,6 +664,38 @@ impl<'a> From<&'a OsStr> for Rc<OsStr> {\n     }\n }\n \n+#[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n+impl<'a> From<OsString> for Cow<'a, OsStr> {\n+    #[inline]\n+    fn from(s: OsString) -> Cow<'a, OsStr> {\n+        Cow::Owned(s)\n+    }\n+}\n+\n+#[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n+impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n+    #[inline]\n+    fn from(s: &'a OsStr) -> Cow<'a, OsStr> {\n+        Cow::Borrowed(s)\n+    }\n+}\n+\n+#[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n+impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n+    #[inline]\n+    fn from(s: &'a OsString) -> Cow<'a, OsStr> {\n+        Cow::Borrowed(s.as_os_str())\n+    }\n+}\n+\n+#[stable(feature = \"osstring_from_cow_osstr\", since = \"1.28.0\")]\n+impl<'a> From<Cow<'a, OsStr>> for OsString {\n+    #[inline]\n+    fn from(s: Cow<'a, OsStr>) -> Self {\n+        s.into_owned()\n+    }\n+}\n+\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     fn default() -> Box<OsStr> {"}, {"sha": "9cdc6a21622467af00052f3b006b99c20b71e7a9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -277,7 +277,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}, {"sha": "3f90c1fa3b1f2cf39c1d60b0f4ec1d32e9d5a940", "filename": "src/libstd/num.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -21,12 +21,8 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::Wrapping;\n \n-#[unstable(feature = \"nonzero\", issue = \"49137\")]\n-#[allow(deprecated)]\n-pub use core::num::{\n-    NonZeroU8, NonZeroI8, NonZeroU16, NonZeroI16, NonZeroU32, NonZeroI32,\n-    NonZeroU64, NonZeroI64, NonZeroU128, NonZeroI128, NonZeroUsize, NonZeroIsize,\n-};\n+#[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n \n #[cfg(test)] use fmt;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};"}, {"sha": "13f55e9261fc2acf9a8a4eb98e2da340ca5bb8d8", "filename": "src/libstd/path.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -1504,6 +1504,22 @@ impl<'a> From<PathBuf> for Cow<'a, Path> {\n     }\n }\n \n+#[stable(feature = \"cow_from_pathbuf_ref\", since = \"1.28.0\")]\n+impl<'a> From<&'a PathBuf> for Cow<'a, Path> {\n+    #[inline]\n+    fn from(p: &'a PathBuf) -> Cow<'a, Path> {\n+        Cow::Borrowed(p.as_path())\n+    }\n+}\n+\n+#[stable(feature = \"pathbuf_from_cow_path\", since = \"1.28.0\")]\n+impl<'a> From<Cow<'a, Path>> for PathBuf {\n+    #[inline]\n+    fn from(p: Cow<'a, Path>) -> Self {\n+        p.into_owned()\n+    }\n+}\n+\n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n     #[inline]"}, {"sha": "4830e38d6a92fd8c4c2b337e54b97c1af0a848cc", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -154,6 +154,13 @@ impl FileDesc {\n         }\n     }\n \n+    #[cfg(target_os = \"linux\")]\n+    pub fn get_cloexec(&self) -> io::Result<bool> {\n+        unsafe {\n+            Ok((cvt(libc::fcntl(self.fd, libc::F_GETFD))? & libc::FD_CLOEXEC) != 0)\n+        }\n+    }\n+\n     #[cfg(not(any(target_env = \"newlib\",\n                   target_os = \"solaris\",\n                   target_os = \"emscripten\","}, {"sha": "77968ffdedf37a8afe888477f8d7206f57666e91", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -441,15 +441,48 @@ impl File {\n \n         // Currently the standard library supports Linux 2.6.18 which did not\n         // have the O_CLOEXEC flag (passed above). If we're running on an older\n-        // Linux kernel then the flag is just ignored by the OS, so we continue\n-        // to explicitly ask for a CLOEXEC fd here.\n+        // Linux kernel then the flag is just ignored by the OS. After we open\n+        // the first file, we check whether it has CLOEXEC set. If it doesn't,\n+        // we will explicitly ask for a CLOEXEC fd for every further file we\n+        // open, if it does, we will skip that step.\n         //\n         // The CLOEXEC flag, however, is supported on versions of macOS/BSD/etc\n         // that we support, so we only do this on Linux currently.\n-        if cfg!(target_os = \"linux\") {\n-            fd.set_cloexec()?;\n+        #[cfg(target_os = \"linux\")]\n+        fn ensure_cloexec(fd: &FileDesc) -> io::Result<()> {\n+            use sync::atomic::{AtomicUsize, Ordering};\n+\n+            const OPEN_CLOEXEC_UNKNOWN: usize = 0;\n+            const OPEN_CLOEXEC_SUPPORTED: usize = 1;\n+            const OPEN_CLOEXEC_NOTSUPPORTED: usize = 2;\n+            static OPEN_CLOEXEC: AtomicUsize = AtomicUsize::new(OPEN_CLOEXEC_UNKNOWN);\n+\n+            let need_to_set;\n+            match OPEN_CLOEXEC.load(Ordering::Relaxed) {\n+                OPEN_CLOEXEC_UNKNOWN => {\n+                    need_to_set = !fd.get_cloexec()?;\n+                    OPEN_CLOEXEC.store(if need_to_set {\n+                        OPEN_CLOEXEC_NOTSUPPORTED\n+                    } else {\n+                        OPEN_CLOEXEC_SUPPORTED\n+                    }, Ordering::Relaxed);\n+                },\n+                OPEN_CLOEXEC_SUPPORTED => need_to_set = false,\n+                OPEN_CLOEXEC_NOTSUPPORTED => need_to_set = true,\n+                _ => unreachable!(),\n+            }\n+            if need_to_set {\n+                fd.set_cloexec()?;\n+            }\n+            Ok(())\n+        }\n+\n+        #[cfg(not(target_os = \"linux\"))]\n+        fn ensure_cloexec(_: &FileDesc) -> io::Result<()> {\n+            Ok(())\n         }\n \n+        ensure_cloexec(&fd)?;\n         Ok(File(fd))\n     }\n "}, {"sha": "0a5dccddddae250c9e6cd35531b921bbf18f9ca4", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -100,24 +100,6 @@ pub fn read2(p1: AnonPipe,\n         // wait for either pipe to become readable using `poll`\n         cvt_r(|| unsafe { libc::poll(fds.as_mut_ptr(), 2, -1) })?;\n \n-        // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n-        // EAGAIN. If we hit EOF, then this will happen because the underlying\n-        // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n-        // this case we flip the other fd back into blocking mode and read\n-        // whatever's leftover on that file descriptor.\n-        let read = |fd: &FileDesc, dst: &mut Vec<u8>| {\n-            match fd.read_to_end(dst) {\n-                Ok(_) => Ok(true),\n-                Err(e) => {\n-                    if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n-                       e.raw_os_error() == Some(libc::EAGAIN) {\n-                        Ok(false)\n-                    } else {\n-                        Err(e)\n-                    }\n-                }\n-            }\n-        };\n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking(false)?;\n             return p2.read_to_end(v2).map(|_| ());\n@@ -127,4 +109,23 @@ pub fn read2(p1: AnonPipe,\n             return p1.read_to_end(v1).map(|_| ());\n         }\n     }\n+\n+    // Read as much as we can from each pipe, ignoring EWOULDBLOCK or\n+    // EAGAIN. If we hit EOF, then this will happen because the underlying\n+    // reader will return Ok(0), in which case we'll see `Ok` ourselves. In\n+    // this case we flip the other fd back into blocking mode and read\n+    // whatever's leftover on that file descriptor.\n+    fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {\n+        match fd.read_to_end(dst) {\n+            Ok(_) => Ok(true),\n+            Err(e) => {\n+                if e.raw_os_error() == Some(libc::EWOULDBLOCK) ||\n+                   e.raw_os_error() == Some(libc::EAGAIN) {\n+                    Ok(false)\n+                } else {\n+                    Err(e)\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "369c5b1ff60dbba182d5c272b6b551d98af2b3b7", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -179,9 +179,11 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                     let (constraint, _str_style) = panictry!(p.parse_str());\n \n                     if constraint.as_str().starts_with(\"=\") {\n-                        cx.span_err(p.prev_span, \"input operand constraint contains '='\");\n+                        span_err_if_not_stage0!(cx, p.prev_span, E0662,\n+                                                \"input operand constraint contains '='\");\n                     } else if constraint.as_str().starts_with(\"+\") {\n-                        cx.span_err(p.prev_span, \"input operand constraint contains '+'\");\n+                        span_err_if_not_stage0!(cx, p.prev_span, E0663,\n+                                                \"input operand constraint contains '+'\");\n                     }\n \n                     panictry!(p.expect(&token::OpenDelim(token::Paren)));\n@@ -203,7 +205,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                     if OPTIONS.iter().any(|&opt| s == opt) {\n                         cx.span_warn(p.prev_span, \"expected a clobber, found an option\");\n                     } else if s.as_str().starts_with(\"{\") || s.as_str().ends_with(\"}\") {\n-                        cx.span_err(p.prev_span, \"clobber should not be surrounded by braces\");\n+                        span_err_if_not_stage0!(cx, p.prev_span, E0664,\n+                                                \"clobber should not be surrounded by braces\");\n                     }\n \n                     clobs.push(s);"}, {"sha": "33ae24c37e53f2791c9bfe51630c3071a1e43816", "filename": "src/libsyntax_ext/diagnostics.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibsyntax_ext%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Flibsyntax_ext%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fdiagnostics.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -38,6 +38,58 @@ let a;\n asm!(\"nop\" : \"r\"(a));\n ```\n \n+Considering that this would be a long explanation, we instead recommend you to\n+take a look at the unstable book:\n+https://doc.rust-lang.org/unstable-book/language-features/asm.html\n+\"##,\n+\n+E0662: r##\"\n+An invalid input operand constraint was passed to the `asm` macro (third line).\n+\n+Erroneous code example:\n+\n+```compile_fail,E0662\n+asm!(\"xor %eax, %eax\"\n+     :\n+     : \"=test\"(\"a\")\n+    );\n+```\n+\n+Considering that this would be a long explanation, we instead recommend you to\n+take a look at the unstable book:\n+https://doc.rust-lang.org/unstable-book/language-features/asm.html\n+\"##,\n+\n+E0663: r##\"\n+An invalid input operand constraint was passed to the `asm` macro (third line).\n+\n+Erroneous code example:\n+\n+```compile_fail,E0663\n+asm!(\"xor %eax, %eax\"\n+     :\n+     : \"+test\"(\"a\")\n+    );\n+```\n+\n+Considering that this would be a long explanation, we instead recommend you to\n+take a look at the unstable book:\n+https://doc.rust-lang.org/unstable-book/language-features/asm.html\n+\"##,\n+\n+E0664: r##\"\n+A clobber was surrounded by braces in the `asm` macro.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0663\n+asm!(\"mov $$0x200, %eax\"\n+     :\n+     :\n+     : \"{eax}\"\n+    );\n+```\n+\n Considering that this would be a long explanation, we instead recommend you to\n take a look at the unstable book:\n https://doc.rust-lang.org/unstable-book/language-features/asm.html"}, {"sha": "f5480178db0d14aff54b2ed1898a11fcf705b9b0", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -2,7 +2,7 @@\n # min-llvm-version 4.0\n # ignore-mingw\n \n--include ../../run-make-fulldeps/tools.mk\n+-include ../tools.mk\n \n # This test makes sure that the expected .llvmbc sections for use by\n # linker-based LTO are available in object files when compiling with", "previous_filename": "src/test/run-make/cross-lang-lto/Makefile"}, {"sha": "b2a5b946160f03edb827750e416e9f5576e2dffd", "filename": "src/test/run-make-fulldeps/cross-lang-lto/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Flib.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "previous_filename": "src/test/run-make/cross-lang-lto/lib.rs"}, {"sha": "ccd34c9e4dbedc109152a91bc9bd0349c1b8a107", "filename": "src/test/run-make-fulldeps/cross-lang-lto/main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2Fmain.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "previous_filename": "src/test/run-make/cross-lang-lto/main.rs"}, {"sha": "d5f3e88fd52e86f31301503ba0004ee8d0cb9379", "filename": "src/test/run-pass/ctfe/tuple-struct-constructors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Ftuple-struct-constructors.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -10,11 +10,9 @@\n \n // https://github.com/rust-lang/rust/issues/41898\n \n-#![feature(nonzero, const_fn)]\n-extern crate core;\n-use core::nonzero::NonZero;\n+use std::num::NonZeroU64;\n \n fn main() {\n-    const FOO: NonZero<u64> = unsafe { NonZero::new_unchecked(2) };\n+    const FOO: NonZeroU64 = unsafe { NonZeroU64::new_unchecked(2) };\n     if let FOO = FOO {}\n }"}, {"sha": "34ed589d418c16e570d9adadd77b03da8f5e623a", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(nonzero, core)]\n-\n use std::mem::size_of;\n use std::num::NonZeroUsize;\n use std::ptr::NonNull;"}, {"sha": "5bce3f8045eeb9091272e1daffed56a085aeb284", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-impl-termination.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-impl-termination.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(termination_trait_lib)]\n+\n+fn main() -> impl std::process::Termination { }"}, {"sha": "dd2e05aeeb4dd610aa9aca466efbbab66bf5fef7", "filename": "src/test/rustdoc-ui/deprecated-attrs.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![doc(no_default_passes, passes = \"collapse-docs unindent-comments\")]\n+\n+struct SomeStruct;\n+\n+pub struct OtherStruct;"}, {"sha": "77ba4b2a2b67e2be186e1251b29a89ce445d4ca9", "filename": "src/test/rustdoc-ui/deprecated-attrs.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,9 @@\n+warning: the `#![doc(no_default_passes)]` attribute is considered deprecated\n+  |\n+  = warning: please see https://github.com/rust-lang/rust/issues/44136\n+  = help: you may want to use `#![doc(document_private_items)]`\n+\n+warning: the `#![doc(passes = \"...\")]` attribute is considered deprecated\n+  |\n+  = warning: please see https://github.com/rust-lang/rust/issues/44136\n+"}, {"sha": "1c1124282d478655d884e90fab35f750c28433e9", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(universal_impl_trait)]\n #![crate_name = \"foo\"]\n \n use std::io::Read;\n+use std::borrow::Borrow;\n \n // @has foo/fn.foo.html\n // @has - //pre 'foo('\n@@ -51,3 +51,15 @@ impl<T> S<T> {\n // @has - 'method</a>('\n // @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n impl<T> Trait for S<T> {}\n+\n+// @has foo/fn.much_universe.html\n+// @matches - 'T:.+Borrow.+impl .+trait\\.Trait\\.html'\n+// @matches - 'U:.+IntoIterator.+= impl.+Iterator\\.html.+= impl.+Clone\\.html'\n+// @matches - '_: impl .+trait\\.Read\\.html.+ \\+ .+trait\\.Clone\\.html'\n+pub fn much_universe<\n+    T: Borrow<impl Trait>,\n+    U: IntoIterator<Item = impl Iterator<Item = impl Clone>>,\n+>(\n+    _: impl Read + Clone,\n+) {\n+}"}, {"sha": "6adb11c56169c956be8eb69665dad27a0ba15c33", "filename": "src/test/ui/E0662.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    asm!(\"xor %eax, %eax\"\n+         :\n+         : \"=test\"(\"a\") //~ ERROR E0662\n+        );\n+}"}, {"sha": "215e3a6d2f02357e7d1087ad3415cc756361ea11", "filename": "src/test/ui/E0662.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,9 @@\n+error[E0662]: input operand constraint contains '='\n+  --> $DIR/E0662.rs:18:12\n+   |\n+LL |          : \"=test\"(\"a\") //~ ERROR E0662\n+   |            ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0662`."}, {"sha": "9eb05ada4a82a0c79d65d29149d1ce6efe198329", "filename": "src/test/ui/E0663.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    asm!(\"xor %eax, %eax\"\n+         :\n+         : \"+test\"(\"a\") //~ ERROR E0663\n+        );\n+}"}, {"sha": "123aa73eccc5e9e0e135c49e432f61bf7a3e9184", "filename": "src/test/ui/E0663.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,9 @@\n+error[E0663]: input operand constraint contains '+'\n+  --> $DIR/E0663.rs:18:12\n+   |\n+LL |          : \"+test\"(\"a\") //~ ERROR E0663\n+   |            ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0663`."}, {"sha": "738ffc18e38271bd353dfc3063090e331990516a", "filename": "src/test/ui/E0664.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    asm!(\"mov $$0x200, %eax\"\n+         :\n+         :\n+         : \"{eax}\" //~ ERROR E0664\n+        );\n+}"}, {"sha": "570811729be85a26bdb1142979a10a7cb0bb7807", "filename": "src/test/ui/E0664.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,9 @@\n+error[E0664]: clobber should not be surrounded by braces\n+  --> $DIR/E0664.rs:19:12\n+   |\n+LL |          : \"{eax}\" //~ ERROR E0664\n+   |            ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0664`."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/proj-outlives-region.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stdout?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/region-extra.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stdout?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/compare-method/region-unrelated.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-unrelated.stdout?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/const-eval/const_transmute.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/const-expr-addr-operator.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-expr-addr-operator.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/const-pattern-not-const-evaluable.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-pattern-not-const-evaluable.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/feature-gate-const-indexing.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const-indexing.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/issue-38875/issue_38875.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "f46a562ce7a182dcedd4ad157a1e4c2c5b017b34", "filename": "src/test/ui/issue-50599.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50599.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    const N: u32 = 1_000;\n+    const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n+    let mut digits = [0u32; M];\n+}"}, {"sha": "8337a31ec140b1ddb15cb98e321e6e07cdb01eea", "filename": "src/test/ui/issue-50599.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50599.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find value `LOG10_2` in module `std::f64`\n+  --> $DIR/issue-50599.rs:13:48\n+   |\n+LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n+   |                                                ^^^^^^^ not found in `std::f64`\n+help: possible candidates are found in other modules, you can import them into scope\n+   |\n+LL | use std::f32::consts::LOG10_2;\n+   |\n+LL | use std::f64::consts::LOG10_2;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/nll/drop-may-dangle.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-may-dangle.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/nll/maybe-initialized-drop-uninitialized.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-uninitialized.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/nll/ty-outlives/ty-param-implied-bounds.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/print_type_sizes/anonymous.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/print_type_sizes/anonymous.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.stdout?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/print_type_sizes/multiple_types.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "17e7a21cd02e52ca0305dcae1fdb4dba101fd05e", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -22,7 +22,6 @@\n // padding and overall computed sizes can be quite different.\n \n #![feature(start)]\n-#![feature(nonzero)]\n #![allow(dead_code)]\n \n use std::num::NonZeroU32;"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/print_type_sizes/packed.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/print_type_sizes/repr-align.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/reachable/expr_andand.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_andand.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/reachable/expr_oror.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_oror.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "92d21864c748344b2ff311da09679226ca4b7883", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-impl-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that an `impl Trait` that is not `impl Termination` will not work.\n+fn main() -> impl Copy { }\n+//~^ ERROR `main` has invalid return type `impl std::marker::Copy`"}, {"sha": "7485f3066bb2709d4b217aae34f4f5bd7e62ccd7", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-impl-trait.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-impl-trait.stderr?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: `main` has invalid return type `impl std::marker::Copy`\n+  --> $DIR/termination-trait-impl-trait.rs:12:14\n+   |\n+LL | fn main() -> impl Copy { }\n+   |              ^^^^^^^^^ `main` can only return types that implement `std::process::Termination`\n+   |\n+   = help: consider using `()`, or a `Result`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stdout?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/trivial-bounds-inconsistent-associated-functions.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-associated-functions.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/union/union-const-eval.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208bd5ed8d2b62d151d759bcffec16f98248d53/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr?ref=4208bd5ed8d2b62d151d759bcffec16f98248d53"}, {"sha": "0899ebd5d80f732a40436ed3d06711e142ac27e7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -614,8 +614,8 @@ pub fn is_test(file_name: &OsString) -> bool {\n }\n \n pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn {\n-\n     let early_props = if config.mode == Mode::RunMake {\n+        // Allow `ignore` directives to be in the Makefile.\n         EarlyProps::from_file(config, &testpaths.file.join(\"Makefile\"))\n     } else {\n         EarlyProps::from_file(config, &testpaths.file)"}, {"sha": "c15744078077e3d376347c5a518064308f7db9ae", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b559710e58427213d6f82008206c22cf3d76b4c4/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=b559710e58427213d6f82008206c22cf3d76b4c4", "patch": "@@ -10,32 +10,49 @@\n \n //! Tidy check to ensure that there are no stray `.stderr` files in UI test directories.\n \n+use std::fs;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n-                     &mut |_| false,\n-                     &mut |file_path| {\n-        if let Some(ext) = file_path.extension() {\n-            if ext == \"stderr\" || ext == \"stdout\" {\n-                // Test output filenames have the format:\n-                // $testname.stderr\n-                // $testname.$mode.stderr\n-                // $testname.$revision.stderr\n-                // $testname.$revision.$mode.stderr\n-                //\n-                // For now, just make sure that there is a corresponding\n-                // $testname.rs file.\n-                let testname = file_path.file_name().unwrap()\n-                                        .to_str().unwrap()\n-                                        .splitn(2, '.').next().unwrap();\n-                if !file_path.with_file_name(testname)\n-                             .with_extension(\"rs\")\n-                             .exists() {\n-                    println!(\"Stray file with UI testing output: {:?}\", file_path);\n-                    *bad = true;\n+    super::walk_many(\n+        &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n+        &mut |_| false,\n+        &mut |file_path| {\n+            if let Some(ext) = file_path.extension() {\n+                if ext == \"stderr\" || ext == \"stdout\" {\n+                    // Test output filenames have the format:\n+                    // $testname.stderr\n+                    // $testname.$mode.stderr\n+                    // $testname.$revision.stderr\n+                    // $testname.$revision.$mode.stderr\n+                    //\n+                    // For now, just make sure that there is a corresponding\n+                    // $testname.rs file.\n+                    let testname = file_path\n+                        .file_name()\n+                        .unwrap()\n+                        .to_str()\n+                        .unwrap()\n+                        .splitn(2, '.')\n+                        .next()\n+                        .unwrap();\n+                    if !file_path\n+                        .with_file_name(testname)\n+                        .with_extension(\"rs\")\n+                        .exists()\n+                    {\n+                        println!(\"Stray file with UI testing output: {:?}\", file_path);\n+                        *bad = true;\n+                    }\n+\n+                    if let Ok(metadata) = fs::metadata(file_path) {\n+                        if metadata.len() == 0 {\n+                            println!(\"Empty file with UI testing output: {:?}\", file_path);\n+                            *bad = true;\n+                        }\n+                    }\n                 }\n             }\n-        }\n-    });\n+        },\n+    );\n }"}]}