{"sha": "9709bd39ca8a564d517372ee33304d34ac0b09bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDliZDM5Y2E4YTU2NGQ1MTczNzJlZTMzMzA0ZDM0YWMwYjA5YmY=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-14T20:42:56Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-14T20:42:56Z"}, "message": "Get rid of failure: ra_lsp_server & ra_project_model", "tree": {"sha": "4d12b93f2aab3a85898099c2308d364501946dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d12b93f2aab3a85898099c2308d364501946dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9709bd39ca8a564d517372ee33304d34ac0b09bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE84DWFaalCZAXJAejN68UFUDeVX0FAl0EBtAACgkQN68UFUDe\nVX1f8Q/+Px8vcisbdLXiMQa7jHf2YrxJmnpAvJU2Moiciblz8HgrXRZMANPrx0Ea\nH2QUaavkYoO7oSuMnjkBXH/1HPZ8x0nS4+/HO9T6kIfFflji5VdG3ib1ugCVU17x\nw2uM1jyiiDi3/lGBGeDs7BFSeJfEXDmOJMZFT6YrEGJgy0Kfy59qI3wfr2TcPP1i\n2G2TsJKdQlCurD9j0RteCrVQIkIzXLElxj3RoUEkV+qvzoLI00TfiY1Jqz/P/6rk\nytunHAISqAtE90wGYFF9wCLBEl4xMPZC1SR9ROyF0bR3D6Hfj84ecFjNB4KudaSp\n4MqsQqo8EvPijAI4eG4GhBI8RU2OMwIds4BJICZNbV1kwpxXYeBhtRjvd/RPHh4v\nQWojkMrDJLntgyxYFhwW2Z3YEe842DB1WdBEH5qJBeDAwNBuj6WFEFWw81MSYdZZ\nJjNUAr5wFM2HFZWMw7aAqdIsji/0WYuq8Yi2DCEv3/H1Ca/UWqlSxaQxgyGzKT9V\ni7N1HyLYoqV59I7FeleCZFy7iaKXicHU6uz4Y/OSYmss99NRLdyV6GTaSE2dNm/a\n83kbZM65mdCnHtmBGBM1mdWRbz1XIyNDHVpWVvJk/FlKT6BLpY4pa6+kSIcD0UnI\nWWjslnm1CY2QLDYSl+ebj7JfIz7TDR7CXFR5Ubkl5LdxkbrOhUI=\n=iDOG\n-----END PGP SIGNATURE-----", "payload": "tree 4d12b93f2aab3a85898099c2308d364501946dbb\nparent a931fb1ef633473e272bb3f9ba86968dd90f44a7\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1560544976 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1560544976 +0600\n\nGet rid of failure: ra_lsp_server & ra_project_model\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9709bd39ca8a564d517372ee33304d34ac0b09bf", "html_url": "https://github.com/rust-lang/rust/commit/9709bd39ca8a564d517372ee33304d34ac0b09bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9709bd39ca8a564d517372ee33304d34ac0b09bf/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a931fb1ef633473e272bb3f9ba86968dd90f44a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a931fb1ef633473e272bb3f9ba86968dd90f44a7", "html_url": "https://github.com/rust-lang/rust/commit/a931fb1ef633473e272bb3f9ba86968dd90f44a7"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "990672a0ac3343c7ce49c1617483e5dfe9f335c7", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -1128,8 +1128,6 @@ name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gen_lsp_server 0.2.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1187,7 +1185,6 @@ name = \"ra_project_model\"\n version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\","}, {"sha": "142467cc9039291f0d5254bd8447bf0fb780b55c", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -7,8 +7,6 @@ authors = [\"rust-analyzer developers\"]\n [dependencies]\n threadpool = \"1.7.1\"\n relative-path = \"0.4.0\"\n-failure = \"0.1.4\"\n-failure_derive = \"0.1.4\"\n serde_json = \"1.0.34\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }\n crossbeam-channel = \"0.3.5\""}, {"sha": "14cfa401f5c18b3e3ce93ce48b33cc518198fd09", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -9,5 +9,5 @@ pub mod req;\n pub mod init;\n mod world;\n \n-pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError, init::InitializationOptions};"}, {"sha": "7749d97d6edbf8009cf08595fbadb9e37b6c08a0", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -25,7 +25,7 @@ fn main() -> Result<()> {\n         }\n         Err(_) => {\n             log::error!(\"server panicked\");\n-            failure::bail!(\"server panicked\")\n+            Err(\"server panicked\")?\n         }\n     }\n }"}, {"sha": "fe6b360d40a722965531b6005077c46f7ff1daf8", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -2,11 +2,9 @@ mod handlers;\n mod subscriptions;\n pub(crate) mod pending_requests;\n \n-use std::{fmt, path::PathBuf, sync::Arc, time::Instant};\n+use std::{fmt, path::PathBuf, sync::Arc, time::Instant, error::Error};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n-use failure::{bail, format_err};\n-use failure_derive::Fail;\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n@@ -32,8 +30,7 @@ use crate::{\n const THREADPOOL_SIZE: usize = 8;\n const MAX_IN_FLIGHT_LIBS: usize = THREADPOOL_SIZE - 3;\n \n-#[derive(Debug, Fail)]\n-#[fail(display = \"Language Server request failed with {}. ({})\", code, message)]\n+#[derive(Debug)]\n pub struct LspError {\n     pub code: i32,\n     pub message: String,\n@@ -45,6 +42,14 @@ impl LspError {\n     }\n }\n \n+impl fmt::Display for LspError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Language Server request failed with {}. ({})\", self.code, self.message)\n+    }\n+}\n+\n+impl Error for LspError {}\n+\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     options: InitializationOptions,\n@@ -177,12 +182,12 @@ fn main_loop_inner(\n         let event = select! {\n             recv(msg_receiver) -> msg => match msg {\n                 Ok(msg) => Event::Msg(msg),\n-                Err(RecvError) => bail!(\"client exited without shutdown\"),\n+                Err(RecvError) => Err(\"client exited without shutdown\")?,\n             },\n             recv(task_receiver) -> task => Event::Task(task.unwrap()),\n             recv(state.vfs.read().task_receiver()) -> task => match task {\n                 Ok(task) => Event::Vfs(task),\n-                Err(RecvError) => bail!(\"vfs died\"),\n+                Err(RecvError) => Err(\"vfs died\")?,\n             },\n             recv(libdata_receiver) -> data => Event::Lib(data.unwrap())\n         };\n@@ -380,7 +385,7 @@ fn on_notification(\n     let not = match not.cast::<req::DidOpenTextDocument>() {\n         Ok(params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n@@ -393,9 +398,9 @@ fn on_notification(\n     let not = match not.cast::<req::DidChangeTextDocument>() {\n         Ok(mut params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             let text =\n-                params.content_changes.pop().ok_or_else(|| format_err!(\"empty changes\"))?.text;\n+                params.content_changes.pop().ok_or_else(|| format!(\"empty changes\"))?.text;\n             state.vfs.write().change_file_overlay(path.as_path(), text);\n             return Ok(());\n         }\n@@ -404,7 +409,7 @@ fn on_notification(\n     let not = match not.cast::<req::DidCloseTextDocument>() {\n         Ok(params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n                 subs.remove_sub(FileId(file_id.0));\n             }\n@@ -546,7 +551,7 @@ where\n                     RawResponse::err(\n                         id,\n                         ErrorCode::InternalError as i32,\n-                        format!(\"{}\\n{}\", e, e.backtrace()),\n+                        e.to_string()\n                     )\n                 }\n             }\n@@ -599,6 +604,6 @@ fn show_message(typ: req::MessageType, message: impl Into<String>, sender: &Send\n     sender.send(not.into()).unwrap();\n }\n \n-fn is_canceled(e: &failure::Error) -> bool {\n+fn is_canceled(e: &Box<dyn std::error::Error + Send + Sync>) -> bool {\n     e.downcast_ref::<Canceled>().is_some()\n }"}, {"sha": "7822e1c1c5c29dc6489fbcc7a4a1968ea91f1abd", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -11,7 +11,6 @@ use ra_ide_api::{\n use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n use relative_path::RelativePathBuf;\n use parking_lot::RwLock;\n-use failure::{Error, format_err};\n use gen_lsp_server::ErrorCode;\n \n use crate::{\n@@ -169,29 +168,29 @@ impl WorldSnapshot {\n     }\n \n     pub fn uri_to_file_id(&self, uri: &Url) -> Result<FileId> {\n-        let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+        let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n         let file = self.vfs.read().path2file(&path).ok_or_else(|| {\n             // Show warning as this file is outside current workspace\n-            Error::from(LspError {\n+            LspError {\n                 code: ErrorCode::InvalidRequest as i32,\n                 message: \"Rust file outside current workspace is not supported yet.\".to_string(),\n-            })\n+            }\n         })?;\n         Ok(FileId(file.0))\n     }\n \n     pub fn file_id_to_uri(&self, id: FileId) -> Result<Url> {\n         let path = self.vfs.read().file2path(VfsFile(id.0));\n         let url = Url::from_file_path(&path)\n-            .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n \n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n         let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);\n         let url = Url::from_file_path(&path)\n-            .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n "}, {"sha": "c1a91d9502b11edde389f2750a0d01f65ee4b80e", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -9,8 +9,6 @@ log = \"0.4.5\"\n rustc-hash = \"1.0\"\n relative-path = \"0.4.0\"\n \n-failure = \"0.1.4\"\n-\n walkdir = \"2.2.7\"\n \n cargo_metadata = \"0.7.0\""}, {"sha": "d5ebf2c7a84a61db312000fe07b5d3e56af236a3", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -3,7 +3,6 @@ use std::path::{Path, PathBuf};\n use cargo_metadata::{MetadataCommand, CargoOpt};\n use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n-use failure::format_err;\n use ra_db::Edition;\n \n use crate::Result;\n@@ -127,7 +126,7 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n-        let meta = meta.exec().map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n+        let meta = meta.exec().map_err(|e| format!(\"cargo metadata failed: {}\", e))?;\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();"}, {"sha": "a3af153f1aa02dd36451136f98a8af492d40f9d0", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -6,9 +6,9 @@ use std::{\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n+    error::Error\n };\n \n-use failure::bail;\n use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId, Edition};\n@@ -24,7 +24,7 @@ pub use crate::{\n };\n \n // FIXME use proper error enum\n-pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n@@ -298,5 +298,5 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    bail!(\"can't find Cargo.toml at {}\", path.display())\n+    Err(format!(\"can't find Cargo.toml at {}\", path.display()))?\n }"}, {"sha": "d6eb824a3449a0d3986f306595478cab5af76ef2", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709bd39ca8a564d517372ee33304d34ac0b09bf/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=9709bd39ca8a564d517372ee33304d34ac0b09bf", "patch": "@@ -38,18 +38,18 @@ impl Sysroot {\n             .args(&[\"--print\", \"sysroot\"])\n             .output()?;\n         if !rustc_output.status.success() {\n-            failure::bail!(\"failed to locate sysroot\")\n+            Err(\"failed to locate sysroot\")?\n         }\n         let stdout = String::from_utf8(rustc_output.stdout)?;\n         let sysroot_path = Path::new(stdout.trim());\n         let src = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n         if !src.exists() {\n-            failure::bail!(\n+            Err(format!(\n                 \"can't load standard library from sysroot\\n\\\n                  {:?}\\n\\\n                  try running `rustup component add rust-src`\",\n                 src,\n-            );\n+            ))?;\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };"}]}