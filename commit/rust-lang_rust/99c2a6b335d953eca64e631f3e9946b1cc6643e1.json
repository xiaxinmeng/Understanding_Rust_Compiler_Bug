{"sha": "99c2a6b335d953eca64e631f3e9946b1cc6643e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzJhNmIzMzVkOTUzZWNhNjRlNjMxZjNlOTk0NmIxY2M2NjQzZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-11T18:27:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T10:44:14Z"}, "message": "modify #[deriving(Eq)] to emit #[structural_match]\n\nto careful use of the span from deriving, we\ncan permit it in stable code if it derives from\nderiving (not-even-a-pun intended)", "tree": {"sha": "9d1ef76571e5375395b451cb543349b602008758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d1ef76571e5375395b451cb543349b602008758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c2a6b335d953eca64e631f3e9946b1cc6643e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c2a6b335d953eca64e631f3e9946b1cc6643e1", "html_url": "https://github.com/rust-lang/rust/commit/99c2a6b335d953eca64e631f3e9946b1cc6643e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c2a6b335d953eca64e631f3e9946b1cc6643e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc286806023ef4d63bceec4ba703399ba9ee2f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc286806023ef4d63bceec4ba703399ba9ee2f7", "html_url": "https://github.com/rust-lang/rust/commit/5bc286806023ef4d63bceec4ba703399ba9ee2f7"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "8e7f4876ee2abedb2232a729a656df80651ae877", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=99c2a6b335d953eca64e631f3e9946b1cc6643e1", "patch": "@@ -109,6 +109,8 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", \"1.0.0\", None, Accepted),\n \n+    (\"structural_match\", \"1.8.0\", Some(31434), Active),\n+\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n     (\"opt_out_copy\", \"1.0.0\", None, Removed),\n \n@@ -304,6 +306,11 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"link_args\", Normal, Ungated),\n     (\"macro_escape\", Normal, Ungated),\n \n+    // RFC #1445.\n+    (\"structural_match\", Whitelisted, Gated(\"structural_match\",\n+                                            \"the semantics of constant patterns is \\\n+                                             not yet settled\")),\n+\n     // Not used any more, but we can't feature gate it\n     (\"no_stack_check\", Normal, Ungated),\n \n@@ -676,7 +683,7 @@ impl<'a> Context<'a> {\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         let has_feature = self.has_feature(feature);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", feature, span, has_feature);\n-        if !has_feature {\n+        if !has_feature && !self.cm.span_allows_unstable(span) {\n             emit_feature_err(self.span_handler, feature, span, GateIssue::Language, explain);\n         }\n     }"}, {"sha": "dbd3cbd4fbaa3f8b6bb4d866709d1c21e3df5098", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=99c2a6b335d953eca64e631f3e9946b1cc6643e1", "patch": "@@ -78,7 +78,10 @@ fn expand_derive(cx: &mut ExtCtxt,\n                  mitem: &MetaItem,\n                  annotatable: Annotatable)\n                  -> Annotatable {\n-    annotatable.map_item_or(|item| {\n+    debug!(\"expand_derive: span = {:?}\", span);\n+    debug!(\"expand_derive: mitem = {:?}\", mitem);\n+    debug!(\"expand_derive: annotatable input  = {:?}\", annotatable);\n+    let annot = annotatable.map_item_or(|item| {\n         item.map(|mut item| {\n             if mitem.value_str().is_some() {\n                 cx.span_err(mitem.span, \"unexpected value in `derive`\");\n@@ -107,6 +110,45 @@ fn expand_derive(cx: &mut ExtCtxt,\n                     continue;\n                 }\n \n+                // RFC #1445. `#[derive(Eq)]` adds a (trusted)\n+                // `#[structural_match]` attribute.\n+                if &tname[..] == \"Eq\" {\n+                    // This span is **very** sensitive and crucial to\n+                    // getting the stability behavior we want. What we\n+                    // are doing is marking `#[structural_match]` with\n+                    // the span of the `#[deriving(Eq)]` attribute\n+                    // (the entire attribute, not just the `Eq` part),\n+                    // but with the current backtrace. The current\n+                    // backtrace will contain a topmost entry that IS\n+                    // this `#[deriving(Eq)]` attribute and with the\n+                    // \"allow-unstable\" flag set to true.\n+                    //\n+                    // Note that we do NOT use the span of the `Eq`\n+                    // text itself.  You might think this is\n+                    // equivalent, because the `Eq` appears within the\n+                    // `#[deriving(Eq)]` attribute, and hence we would\n+                    // inherit the \"allows unstable\" from the\n+                    // backtrace.  But in fact this is not always the\n+                    // case. The actual source text that led to\n+                    // deriving can be `#[$attr]`, for example, where\n+                    // `$attr == deriving(Eq)`. In that case, the\n+                    // \"#[structural_match]\" would be considered to\n+                    // originate not from the deriving call but from\n+                    // text outside the deriving call, and hence would\n+                    // be forbidden from using unstable\n+                    // content.\n+                    //\n+                    // See tests src/run-pass/rfc1445 for\n+                    // examples. --nmatsakis\n+                    let span = Span { expn_id: cx.backtrace(), .. span };\n+                    assert!(cx.parse_sess.codemap().span_allows_unstable(span));\n+                    debug!(\"inserting structural_match with span {:?}\", span);\n+                    let structural_match = intern_and_get_ident(\"structural_match\");\n+                    item.attrs.push(cx.attribute(span,\n+                                                 cx.meta_word(span,\n+                                                              structural_match)));\n+                }\n+\n                 // #[derive(Foo, Bar)] expands to #[derive_Foo] #[derive_Bar]\n                 item.attrs.push(cx.attribute(titem.span, cx.meta_word(titem.span,\n                     intern_and_get_ident(&format!(\"derive_{}\", tname)))));\n@@ -117,7 +159,9 @@ fn expand_derive(cx: &mut ExtCtxt,\n     }, |a| {\n         cx.span_err(span, \"`derive` can only be applied to items\");\n         a\n-    })\n+    });\n+    debug!(\"expand_derive: annotatable output = {:?}\", annot);\n+    annot\n }\n \n macro_rules! derive_traits {"}, {"sha": "f214ecdc3368dd4278ee4565b070b46c0bafb30c", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c2a6b335d953eca64e631f3e9946b1cc6643e1/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=99c2a6b335d953eca64e631f3e9946b1cc6643e1", "patch": "@@ -24,6 +24,7 @@\n #![feature(str_char)]\n \n extern crate fmt_macros;\n+#[macro_use] extern crate log;\n #[macro_use]\n extern crate syntax;\n "}]}