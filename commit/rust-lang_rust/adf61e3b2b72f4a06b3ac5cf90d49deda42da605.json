{"sha": "adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "node_id": "C_kwDOAAsO6NoAKGFkZjYxZTNiMmI3MmY0YTA2YjNhYzVjZjkwZDQ5ZGVkYTQyZGE2MDU", "commit": {"author": {"name": "Ivan Lozano", "email": "ivanlozano@google.com", "date": "2022-06-17T18:14:58Z"}, "committer": {"name": "Ivan Lozano", "email": "ivanlozano@google.com", "date": "2022-07-20T13:43:34Z"}, "message": "Add ShadowCallStack Support\n\nAdds support for the LLVM ShadowCallStack sanitizer.", "tree": {"sha": "cc7b018bca40d9d783f7b707965662da2569624f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7b018bca40d9d783f7b707965662da2569624f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "html_url": "https://github.com/rust-lang/rust/commit/adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/comments", "author": {"login": "ivanloz", "id": 45980681, "node_id": "MDQ6VXNlcjQ1OTgwNjgx", "avatar_url": "https://avatars.githubusercontent.com/u/45980681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanloz", "html_url": "https://github.com/ivanloz", "followers_url": "https://api.github.com/users/ivanloz/followers", "following_url": "https://api.github.com/users/ivanloz/following{/other_user}", "gists_url": "https://api.github.com/users/ivanloz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanloz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanloz/subscriptions", "organizations_url": "https://api.github.com/users/ivanloz/orgs", "repos_url": "https://api.github.com/users/ivanloz/repos", "events_url": "https://api.github.com/users/ivanloz/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanloz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivanloz", "id": 45980681, "node_id": "MDQ6VXNlcjQ1OTgwNjgx", "avatar_url": "https://avatars.githubusercontent.com/u/45980681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanloz", "html_url": "https://github.com/ivanloz", "followers_url": "https://api.github.com/users/ivanloz/followers", "following_url": "https://api.github.com/users/ivanloz/following{/other_user}", "gists_url": "https://api.github.com/users/ivanloz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanloz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanloz/subscriptions", "organizations_url": "https://api.github.com/users/ivanloz/orgs", "repos_url": "https://api.github.com/users/ivanloz/repos", "events_url": "https://api.github.com/users/ivanloz/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanloz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a289cfcfb32593c63d75f113547f63ffe2dde285", "url": "https://api.github.com/repos/rust-lang/rust/commits/a289cfcfb32593c63d75f113547f63ffe2dde285", "html_url": "https://github.com/rust-lang/rust/commit/a289cfcfb32593c63d75f113547f63ffe2dde285"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "1a96dd8bec47a606eef74a08ee39dd116522dbfc", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -69,6 +69,9 @@ pub fn sanitize_attrs<'ll>(\n     if enabled.contains(SanitizerSet::HWADDRESS) {\n         attrs.push(llvm::AttributeKind::SanitizeHWAddress.create_attr(cx.llcx));\n     }\n+    if enabled.contains(SanitizerSet::SHADOWCALLSTACK) {\n+        attrs.push(llvm::AttributeKind::ShadowCallStack.create_attr(cx.llcx));\n+    }\n     if enabled.contains(SanitizerSet::MEMTAG) {\n         // Check to make sure the mte target feature is actually enabled.\n         let features = cx.tcx.global_backend_features(());"}, {"sha": "8a6101e051b7c5bee7cde41a17e614c6ad1e0c19", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -192,6 +192,7 @@ pub enum AttributeKind {\n     NoUndef = 33,\n     SanitizeMemTag = 34,\n     NoCfCheck = 35,\n+    ShadowCallStack = 36,\n }\n \n /// LLVMIntPredicate"}, {"sha": "bca5425e7287c947d10a29e53e2af42e8710c247", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -85,6 +85,7 @@ enum LLVMRustAttribute {\n   NoUndef = 33,\n   SanitizeMemTag = 34,\n   NoCfCheck = 35,\n+  ShadowCallStack = 36,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "4615558b912984e4537e058c82e8aad292369e7f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -232,6 +232,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::NoUndef;\n   case SanitizeMemTag:\n     return Attribute::SanitizeMemTag;\n+  case ShadowCallStack:\n+    return Attribute::ShadowCallStack;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "8a0b4d14d50a1b19f0125489bd454288bb9e6b10", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -377,7 +377,7 @@ mod desc {\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -683,6 +683,7 @@ mod parse {\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n                     \"memtag\" => SanitizerSet::MEMTAG,\n+                    \"shadow-call-stack\" => SanitizerSet::SHADOWCALLSTACK,\n                     \"thread\" => SanitizerSet::THREAD,\n                     \"hwaddress\" => SanitizerSet::HWADDRESS,\n                     _ => return false,"}, {"sha": "361facca31b0278ad717ea7f87956259ca1d6a21", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -1282,6 +1282,7 @@ symbols! {\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n+        shadow_call_stack,\n         shl,\n         shl_assign,\n         should_panic,"}, {"sha": "c85f7f62a4239106b221e75a92571f728d6ad8ca", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n             supported_sanitizers: SanitizerSet::CFI\n                 | SanitizerSet::HWADDRESS\n                 | SanitizerSet::MEMTAG\n+                | SanitizerSet::SHADOWCALLSTACK\n                 | SanitizerSet::ADDRESS,\n             ..super::android_base::opts()\n         },"}, {"sha": "f7abeafd38f10d5870e037edca98ca230c0bd3c2", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -618,6 +618,7 @@ bitflags::bitflags! {\n         const HWADDRESS = 1 << 4;\n         const CFI     = 1 << 5;\n         const MEMTAG  = 1 << 6;\n+        const SHADOWCALLSTACK = 1 << 7;\n     }\n }\n \n@@ -632,6 +633,7 @@ impl SanitizerSet {\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n             SanitizerSet::MEMTAG => \"memtag\",\n+            SanitizerSet::SHADOWCALLSTACK => \"shadow-call-stack\",\n             SanitizerSet::THREAD => \"thread\",\n             SanitizerSet::HWADDRESS => \"hwaddress\",\n             _ => return None,\n@@ -666,6 +668,7 @@ impl IntoIterator for SanitizerSet {\n             SanitizerSet::LEAK,\n             SanitizerSet::MEMORY,\n             SanitizerSet::MEMTAG,\n+            SanitizerSet::SHADOWCALLSTACK,\n             SanitizerSet::THREAD,\n             SanitizerSet::HWADDRESS,\n         ]\n@@ -1960,6 +1963,7 @@ impl Target {\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n                                 Some(\"memtag\") => SanitizerSet::MEMTAG,\n+                                Some(\"shadow-call-stack\") => SanitizerSet::SHADOWCALLSTACK,\n                                 Some(\"thread\") => SanitizerSet::THREAD,\n                                 Some(\"hwaddress\") => SanitizerSet::HWADDRESS,\n                                 Some(s) => return Err(format!(\"unknown sanitizer {}\", s)),"}, {"sha": "a35c3430278234a5964ccbcc208d299c8fbb93d2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -2939,14 +2939,16 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::memtag) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMTAG;\n+                    } else if item.has_name(sym::shadow_call_stack) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::SHADOWCALLSTACK;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n                     } else if item.has_name(sym::hwaddress) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\")\n+                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "9e11a154db9a66502a6b6fb3b05afb1aa6371226", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -18,11 +18,13 @@ This feature allows for use of one of following sanitizers:\n * [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n * [MemTagSanitizer][clang-memtag] fast memory error detector based on\n   Armv8.5-A Memory Tagging Extension.\n+* [ShadowCallStack][clang-scs] provides backward-edge control flow protection.\n * [ThreadSanitizer][clang-tsan] a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n `-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n-`-Zsanitizer=memtag`, or `-Zsanitizer=thread`. You might also need the `--target` and `build-std` flags. Example:\n+`-Zsanitizer=memtag`, `-Zsanitizer=shadow-call-stack`, or `-Zsanitizer=thread`.\n+You might also need the `--target` and `build-std` flags. Example:\n ```shell\n $ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu\n ```\n@@ -513,6 +515,18 @@ To enable this target feature compile with `-C target-feature=\"+mte\"`.\n \n More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n \n+# ShadowCallStack\n+\n+ShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.\n+\n+ShadowCallStack requires a platform ABI which reserves `x18` as the instrumentation makes use of this register.\n+\n+ShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and is supported on the following targets:\n+\n+* `aarch64-linux-android`\n+\n+A runtime must be provided by the application or operating system. See the [LLVM documentation][clang-scs] for further details.\n+\n # ThreadSanitizer\n \n ThreadSanitizer is a data race detection tool. It is supported on the following\n@@ -610,4 +624,5 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-hwasan]: https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\n [clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n+[clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}, {"sha": "0b53db3b767cd0744ccae63f54bdcc902068cd60", "filename": "src/test/codegen/sanitizer_scs_attr_check.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer_scs_attr_check.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -0,0 +1,17 @@\n+// This tests that the shadowcallstack attribute is\n+// applied when enabling the shadow-call-stack sanitizer.\n+//\n+// needs-sanitizer-shadow-call-stack\n+// compile-flags: -Zsanitizer=shadow-call-stack\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_sanitize)]\n+\n+// CHECK: ; Function Attrs:{{.*}}shadowcallstack\n+// CHECK-NEXT: scs\n+pub fn scs() {}\n+\n+// CHECK-NOT: ; Function Attrs:{{.*}}shadowcallstack\n+// CHECK-NEXT: no_scs\n+#[no_sanitize(shadow_call_stack)]\n+pub fn no_scs() {}"}, {"sha": "d328cafa00b9345f51bfbaa1b26de8bef76a4355", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, or `thread`\n+   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "37643c29d4d0348c151daa9a0d5215f03428f171", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -862,6 +862,7 @@ pub fn make_test_description<R: Read>(\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_shadow_call_stack = util::SHADOWCALLSTACK_SUPPORTED_TARGETS.contains(&&*config.target);\n     // for `-Z gcc-ld=lld`\n     let has_rust_lld = config\n         .compile_lib_path\n@@ -899,6 +900,8 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n         ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n         ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n+        ignore |= !has_shadow_call_stack\n+            && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\");\n         ignore |= config.target_panic == PanicStrategy::Abort\n             && config.parse_name_directive(ln, \"needs-unwind\");\n         ignore |= config.target == \"wasm32-unknown-unknown\""}, {"sha": "102b9308dc90c6e3d49712733b3afada838a34cf", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf61e3b2b72f4a06b3ac5cf90d49deda42da605/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=adf61e3b2b72f4a06b3ac5cf90d49deda42da605", "patch": "@@ -121,6 +121,8 @@ pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n pub const MEMTAG_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n+pub const SHADOWCALLSTACK_SUPPORTED_TARGETS: &[&str] = &[\"aarch64-linux-android\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}