{"sha": "d363770851650d9e137d628de2efeb90b3154bb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjM3NzA4NTE2NTBkOWUxMzdkNjI4ZGUyZWZlYjkwYjMxNTRiYjA=", "commit": {"author": {"name": "root", "email": "root@localhost", "date": "2014-08-24T13:04:28Z"}, "committer": {"name": "root", "email": "root@localhost", "date": "2014-08-24T13:11:23Z"}, "message": "libcore: Simplify Enumerate, Zip::next_back\n\nUse ExactSize::len() and defer to its decisions about overly defensive\nassertions. Remove the length double-check and simply put a failure\ncase if the Zip finds an uneven end in .next_back().\n\nFixing this up since I think I wrote this, and it's been known to\nconfuse rusties (PR#15886).", "tree": {"sha": "5c3b7863d8a28124475bfa0a486cd6567431e7a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3b7863d8a28124475bfa0a486cd6567431e7a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d363770851650d9e137d628de2efeb90b3154bb0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d363770851650d9e137d628de2efeb90b3154bb0", "html_url": "https://github.com/rust-lang/rust/commit/d363770851650d9e137d628de2efeb90b3154bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d363770851650d9e137d628de2efeb90b3154bb0/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "262d5a4686c80675fe5bfcb79b26b341b9a0bf7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/262d5a4686c80675fe5bfcb79b26b341b9a0bf7a", "html_url": "https://github.com/rust-lang/rust/commit/262d5a4686c80675fe5bfcb79b26b341b9a0bf7a"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "b2bd8d46fb597aa333d531aa455a67e3aadcb638", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d363770851650d9e137d628de2efeb90b3154bb0/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363770851650d9e137d628de2efeb90b3154bb0/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=d363770851650d9e137d628de2efeb90b3154bb0", "patch": "@@ -728,6 +728,10 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n     /// Return the exact length of the iterator.\n     fn len(&self) -> uint {\n         let (lower, upper) = self.size_hint();\n+        // Note: This assertion is overly defensive, but it checks the invariant\n+        // guaranteed by the trait. If this trait were rust-internal,\n+        // we could use debug_assert!; assert_eq! will check all Rust user\n+        // implementations too.\n         assert_eq!(upper, Some(lower));\n         lower\n     }\n@@ -1195,21 +1199,20 @@ impl<A, B, T: ExactSize<A>, U: ExactSize<B>> DoubleEndedIterator<(A, B)>\n for Zip<T, U> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(A, B)> {\n-        let (a_sz, a_upper) = self.a.size_hint();\n-        let (b_sz, b_upper) = self.b.size_hint();\n-        assert!(a_upper == Some(a_sz));\n-        assert!(b_upper == Some(b_sz));\n-        if a_sz < b_sz {\n-            for _ in range(0, b_sz - a_sz) { self.b.next_back(); }\n-        } else if a_sz > b_sz {\n-            for _ in range(0, a_sz - b_sz) { self.a.next_back(); }\n-        }\n-        let (a_sz, _) = self.a.size_hint();\n-        let (b_sz, _) = self.b.size_hint();\n-        assert!(a_sz == b_sz);\n+        let a_sz = self.a.len();\n+        let b_sz = self.b.len();\n+        if a_sz != b_sz {\n+            // Adjust a, b to equal length\n+            if a_sz > b_sz {\n+                for _ in range(0, a_sz - b_sz) { self.a.next_back(); }\n+            } else {\n+                for _ in range(0, b_sz - a_sz) { self.b.next_back(); }\n+            }\n+        }\n         match (self.a.next_back(), self.b.next_back()) {\n             (Some(x), Some(y)) => Some((x, y)),\n-            _ => None\n+            (None, None) => None,\n+            _ => unreachable!(),\n         }\n     }\n }\n@@ -1395,9 +1398,8 @@ impl<A, T: ExactSize<A>> DoubleEndedIterator<(uint, A)> for Enumerate<T> {\n     fn next_back(&mut self) -> Option<(uint, A)> {\n         match self.iter.next_back() {\n             Some(a) => {\n-                let (lower, upper) = self.iter.size_hint();\n-                assert!(upper == Some(lower));\n-                Some((self.count + lower, a))\n+                let len = self.iter.len();\n+                Some((self.count + len, a))\n             }\n             _ => None\n         }"}]}