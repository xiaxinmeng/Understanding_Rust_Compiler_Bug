{"sha": "5f0a123f0d1c8718b015c973b3780bc9353e9159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGExMjNmMGQxYzg3MThiMDE1Yzk3M2IzNzgwYmM5MzUzZTkxNTk=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-03T22:53:15Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-04T00:40:41Z"}, "message": "Construct const fns based on the type, not the definition.\n\nOtherwise we can add a null environment when we shouldn't.\n\nFixes #5210.", "tree": {"sha": "c711c19a4ec1839b31f41728e42f80d18af93652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c711c19a4ec1839b31f41728e42f80d18af93652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0a123f0d1c8718b015c973b3780bc9353e9159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0a123f0d1c8718b015c973b3780bc9353e9159", "html_url": "https://github.com/rust-lang/rust/commit/5f0a123f0d1c8718b015c973b3780bc9353e9159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0a123f0d1c8718b015c973b3780bc9353e9159/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7de81ac3e559dcddfa9652d83457341a534a74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7de81ac3e559dcddfa9652d83457341a534a74d", "html_url": "https://github.com/rust-lang/rust/commit/a7de81ac3e559dcddfa9652d83457341a534a74d"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "3cfafde1043aa92bacc405aa92e1f3156ff49bc2", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f0a123f0d1c8718b015c973b3780bc9353e9159/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0a123f0d1c8718b015c973b3780bc9353e9159/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5f0a123f0d1c8718b015c973b3780bc9353e9159", "patch": "@@ -394,13 +394,22 @@ pub fn const_expr(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n           ast::expr_path(pth) => {\n             assert pth.types.len() == 0;\n             match cx.tcx.def_map.find(&e.id) {\n-                Some(ast::def_fn(def_id, purity)) => {\n+                Some(ast::def_fn(def_id, _purity)) => {\n                     assert ast_util::is_local(def_id);\n                     let f = base::get_item_val(cx, def_id.node);\n-                    match purity {\n-                      ast::extern_fn =>\n-                        llvm::LLVMConstPointerCast(f, T_ptr(T_i8())),\n-                      _ => C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+                    let ety = ty::expr_ty_adjusted(cx.tcx, e);\n+                    match ty::get(ety).sty {\n+                        ty::ty_bare_fn(*) | ty::ty_ptr(*) => {\n+                            llvm::LLVMConstPointerCast(f, T_ptr(T_i8()))\n+                        }\n+                        ty::ty_closure(*) => {\n+                            C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+                        }\n+                        _ => {\n+                            cx.sess.span_bug(e.span, fmt!(\n+                                \"unexpected const fn type: %s\",\n+                                ty_to_str(cx.tcx, ety)))\n+                        }\n                     }\n                 }\n                 Some(ast::def_const(def_id)) => {"}]}