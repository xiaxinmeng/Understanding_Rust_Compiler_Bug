{"sha": "7879369fa684cde8721e2fd966e7c87a46940b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzkzNjlmYTY4NGNkZTg3MjFlMmZkOTY2ZTdjODdhNDY5NDBiOTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-19T11:47:53Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-30T09:45:11Z"}, "message": "Remove some global state from the lowering pass", "tree": {"sha": "66ca517f1cd48946283861d87541f85dd7ca06b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66ca517f1cd48946283861d87541f85dd7ca06b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7879369fa684cde8721e2fd966e7c87a46940b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7879369fa684cde8721e2fd966e7c87a46940b96", "html_url": "https://github.com/rust-lang/rust/commit/7879369fa684cde8721e2fd966e7c87a46940b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7879369fa684cde8721e2fd966e7c87a46940b96/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87005c0fd99e273d325f3b2cd2852271c974812b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87005c0fd99e273d325f3b2cd2852271c974812b", "html_url": "https://github.com/rust-lang/rust/commit/87005c0fd99e273d325f3b2cd2852271c974812b"}], "stats": {"total": 127, "additions": 76, "deletions": 51}, "files": [{"sha": "8f2ce9a18eef45d81e2f7618717fbc32b717df8c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 76, "deletions": 51, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/7879369fa684cde8721e2fd966e7c87a46940b96/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7879369fa684cde8721e2fd966e7c87a46940b96/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7879369fa684cde8721e2fd966e7c87a46940b96", "patch": "@@ -110,13 +110,6 @@ pub struct LoweringContext<'a> {\n     /// written at all (e.g., `&T` or `std::cell::Ref<T>`).\n     anonymous_lifetime_mode: AnonymousLifetimeMode,\n \n-    // This is a list of in-band type definitions being generated by\n-    // Argument-position `impl Trait`.\n-    // When traversing a signature such as `fn foo(x: impl Trait)`,\n-    // we record `impl Trait` as a new type parameter, then later\n-    // add it on to `foo`s generics.\n-    in_band_ty_params: Vec<hir::GenericParam>,\n-\n     // Used to create lifetime definitions from in-band lifetime usages.\n     // e.g. `fn foo(x: &'x u8) -> &'x u8` to `fn foo<'x>(x: &'x u8) -> &'x u8`\n     // When a named lifetime is encountered in a function or impl header and\n@@ -172,12 +165,14 @@ pub trait Resolver {\n     ) -> hir::Path;\n }\n \n-#[derive(Clone, Copy, Debug)]\n-enum ImplTraitContext {\n+#[derive(Debug)]\n+enum ImplTraitContext<'a> {\n     /// Treat `impl Trait` as shorthand for a new universal generic parameter.\n     /// Example: `fn foo(x: impl Debug)`, where `impl Debug` is conceptually\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n-    Universal,\n+    ///\n+    /// Newly generated parameters should be inserted into the given `Vec`\n+    Universal(&'a mut Vec<hir::GenericParam>),\n \n     /// Treat `impl Trait` as shorthand for a new universal existential parameter.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -190,6 +185,17 @@ enum ImplTraitContext {\n     Disallowed,\n }\n \n+impl<'a> ImplTraitContext<'a> {\n+    fn reborrow(&'b mut self) -> ImplTraitContext<'b> {\n+        use self::ImplTraitContext::*;\n+        match self {\n+            Universal(params) => Universal(params),\n+            Existential(did) => Existential(*did),\n+            Disallowed => Disallowed,\n+        }\n+    }\n+}\n+\n pub fn lower_crate(\n     sess: &Session,\n     cstore: &CrateStore,\n@@ -224,7 +230,6 @@ pub fn lower_crate(\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_in_trait_impl: false,\n-        in_band_ty_params: Vec::new(),\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n@@ -645,7 +650,7 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (Vec<hir::GenericParam>, T)\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext) -> (Vec<hir::GenericParam>, T),\n     {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n@@ -656,13 +661,11 @@ impl<'a> LoweringContext<'a> {\n             self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n         }\n \n-        assert!(self.in_band_ty_params.is_empty());\n-        let res = f(self);\n+        let (in_band_ty_params, res) = f(self);\n \n         self.is_collecting_in_band_lifetimes = false;\n         self.anonymous_lifetime_mode = old_anonymous_lifetime_mode;\n \n-        let in_band_ty_params = self.in_band_ty_params.split_off(0);\n         let lifetimes_to_define = self.lifetimes_to_define.split_off(0);\n \n         let params = lifetimes_to_define\n@@ -796,14 +799,19 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (hir::Generics, T)\n     where\n-        F: FnOnce(&mut LoweringContext) -> T,\n+        F: FnOnce(&mut LoweringContext, &mut Vec<hir::GenericParam>) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n             &generics.params,\n             |this| {\n-                let itctx = ImplTraitContext::Universal;\n                 this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n-                    (this.lower_generics(generics, itctx), f(this))\n+                    let mut params = Vec::new();\n+                    let generics = this.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Universal(&mut params),\n+                    );\n+                    let res = f(this, &mut params);\n+                    (params, (generics, res))\n                 })\n             },\n         );\n@@ -1069,7 +1077,7 @@ impl<'a> LoweringContext<'a> {\n         P(self.lower_ty_direct(t, itctx))\n     }\n \n-    fn lower_ty_direct(&mut self, t: &Ty, itctx: ImplTraitContext) -> hir::Ty {\n+    fn lower_ty_direct(&mut self, t: &Ty, mut itctx: ImplTraitContext) -> hir::Ty {\n         let kind = match t.node {\n             TyKind::Infer => hir::TyInfer,\n             TyKind::Err => hir::TyErr,\n@@ -1106,7 +1114,9 @@ impl<'a> LoweringContext<'a> {\n             ),\n             TyKind::Never => hir::TyNever,\n             TyKind::Tup(ref tys) => {\n-                hir::TyTup(tys.iter().map(|ty| self.lower_ty_direct(ty, itctx)).collect())\n+                hir::TyTup(tys.iter().map(|ty| {\n+                    self.lower_ty_direct(ty, itctx.reborrow())\n+                }).collect())\n             }\n             TyKind::Paren(ref ty) => {\n                 return self.lower_ty_direct(ty, itctx);\n@@ -1140,7 +1150,7 @@ impl<'a> LoweringContext<'a> {\n                     .iter()\n                     .filter_map(|bound| match *bound {\n                         GenericBound::Trait(ref ty, TraitBoundModifier::None) => {\n-                            Some(self.lower_poly_trait_ref(ty, itctx))\n+                            Some(self.lower_poly_trait_ref(ty, itctx.reborrow()))\n                         }\n                         GenericBound::Trait(_, TraitBoundModifier::Maybe) => None,\n                         GenericBound::Outlives(ref lifetime) => {\n@@ -1167,7 +1177,7 @@ impl<'a> LoweringContext<'a> {\n                             |this| this.lower_param_bounds(bounds, itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal => {\n+                    ImplTraitContext::Universal(in_band_ty_params) => {\n                         self.lower_node_id(def_node_id);\n                         // Add a definition for the in-band TyParam\n                         let def_index = self\n@@ -1176,10 +1186,13 @@ impl<'a> LoweringContext<'a> {\n                             .opt_def_index(def_node_id)\n                             .unwrap();\n \n-                        let hir_bounds = self.lower_param_bounds(bounds, itctx);\n+                        let hir_bounds = self.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::Universal(in_band_ty_params),\n+                        );\n                         // Set the name to `impl Bound1 + Bound2`\n                         let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n-                        self.in_band_ty_params.push(hir::GenericParam {\n+                        in_band_ty_params.push(hir::GenericParam {\n                             id: def_node_id,\n                             name: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n@@ -1502,10 +1515,10 @@ impl<'a> LoweringContext<'a> {\n         qself: &Option<QSelf>,\n         p: &Path,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::QPath {\n         let qself_position = qself.as_ref().map(|q| q.position);\n-        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx));\n+        let qself = qself.as_ref().map(|q| self.lower_ty(&q.ty, itctx.reborrow()));\n \n         let resolution = self.resolver\n             .get_resolution(id)\n@@ -1592,7 +1605,7 @@ impl<'a> LoweringContext<'a> {\n                         param_mode,\n                         num_lifetimes,\n                         parenthesized_generic_args,\n-                        itctx,\n+                        itctx.reborrow(),\n                     )\n                 })\n                 .collect(),\n@@ -1635,7 +1648,7 @@ impl<'a> LoweringContext<'a> {\n                 param_mode,\n                 0,\n                 ParenthesizedGenericArgs::Warn,\n-                itctx,\n+                itctx.reborrow(),\n             ));\n             let qpath = hir::QPath::TypeRelative(ty, segment);\n \n@@ -1752,16 +1765,16 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n-        itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext,\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref bindings, .. } = data;\n         let has_types = args.iter().any(|arg| match arg {\n             ast::GenericArg::Type(_) => true,\n             _ => false,\n         });\n         (hir::GenericArgs {\n-            args: args.iter().map(|a| self.lower_generic_arg(a, itctx)).collect(),\n-            bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n+            args: args.iter().map(|a| self.lower_generic_arg(a, itctx.reborrow())).collect(),\n+            bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx.reborrow())).collect(),\n             parenthesized: false,\n         },\n         !has_types && param_mode == ParamMode::Optional)\n@@ -1866,15 +1879,15 @@ impl<'a> LoweringContext<'a> {\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n-        fn_def_id: Option<DefId>,\n+        mut in_band_ty_params: Option<(DefId, &mut Vec<hir::GenericParam>)>,\n         impl_trait_return_allow: bool,\n         make_ret_async: Option<NodeId>,\n     ) -> P<hir::FnDecl> {\n         let inputs = decl.inputs\n             .iter()\n             .map(|arg| {\n-                if fn_def_id.is_some() {\n-                    self.lower_ty_direct(&arg.ty, ImplTraitContext::Universal)\n+                if let Some((_, ref mut ibty)) = in_band_ty_params {\n+                    self.lower_ty_direct(&arg.ty, ImplTraitContext::Universal(ibty))\n                 } else {\n                     self.lower_ty_direct(&arg.ty, ImplTraitContext::Disallowed)\n                 }\n@@ -1883,11 +1896,15 @@ impl<'a> LoweringContext<'a> {\n \n         let output = if let Some(ret_id) = make_ret_async {\n             self.lower_async_fn_ret_ty(\n-                &inputs, &decl.output, fn_def_id.expect(\"make_ret_async but no fn_def_id\"), ret_id)\n+                &inputs,\n+                &decl.output,\n+                in_band_ty_params.expect(\"make_ret_async but no fn_def_id\").0,\n+                ret_id,\n+            )\n         } else {\n             match decl.output {\n-                FunctionRetTy::Ty(ref ty) => match fn_def_id {\n-                    Some(def_id) if impl_trait_return_allow => {\n+                FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n+                    Some((def_id, _)) if impl_trait_return_allow => {\n                         hir::Return(self.lower_ty(ty, ImplTraitContext::Existential(def_id)))\n                     }\n                     _ => hir::Return(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n@@ -2191,17 +2208,19 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         params: &Vec<GenericParam>,\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n-        itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n-        params.iter().map(|param| self.lower_generic_param(param, add_bounds, itctx)).collect()\n+        params.iter().map(|param| {\n+            self.lower_generic_param(param, add_bounds, itctx.reborrow())\n+        }).collect()\n     }\n \n     fn lower_generic_param(&mut self,\n                            param: &GenericParam,\n                            add_bounds: &NodeMap<Vec<GenericBound>>,\n-                           itctx: ImplTraitContext)\n+                           mut itctx: ImplTraitContext)\n                            -> hir::GenericParam {\n-        let mut bounds = self.lower_param_bounds(&param.bounds, itctx);\n+        let mut bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n         match param.kind {\n             GenericParamKind::Lifetime => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n@@ -2238,8 +2257,9 @@ impl<'a> LoweringContext<'a> {\n \n                 let add_bounds = add_bounds.get(&param.id).map_or(&[][..], |x| &x);\n                 if !add_bounds.is_empty() {\n+                    let params = self.lower_param_bounds(add_bounds, itctx.reborrow()).into_iter();\n                     bounds = bounds.into_iter()\n-                                   .chain(self.lower_param_bounds(add_bounds, itctx).into_iter())\n+                                   .chain(params)\n                                    .collect();\n                 }\n \n@@ -2434,10 +2454,10 @@ impl<'a> LoweringContext<'a> {\n     fn lower_poly_trait_ref(\n         &mut self,\n         p: &PolyTraitRef,\n-        itctx: ImplTraitContext,\n+        mut itctx: ImplTraitContext,\n     ) -> hir::PolyTraitRef {\n         let bound_generic_params =\n-            self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx);\n+            self.lower_generic_params(&p.bound_generic_params, &NodeMap(), itctx.reborrow());\n         let trait_ref = self.with_parent_impl_lifetime_defs(\n             &bound_generic_params,\n             |this| this.lower_trait_ref(&p.trait_ref, itctx),\n@@ -2482,9 +2502,9 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_param_bounds(&mut self, bounds: &[GenericBound], itctx: ImplTraitContext)\n+    fn lower_param_bounds(&mut self, bounds: &[GenericBound], mut itctx: ImplTraitContext)\n         -> hir::GenericBounds {\n-        bounds.iter().map(|bound| self.lower_param_bound(bound, itctx)).collect()\n+        bounds.iter().map(|bound| self.lower_param_bound(bound, itctx.reborrow())).collect()\n     }\n \n     fn lower_block(&mut self, b: &Block, targeted_by_break: bool) -> P<hir::Block> {\n@@ -2585,8 +2605,8 @@ impl<'a> LoweringContext<'a> {\n                         generics,\n                         fn_def_id,\n                         AnonymousLifetimeMode::PassThrough,\n-                        |this| this.lower_fn_decl(\n-                            decl, Some(fn_def_id), true, header.asyncness.opt_return_id())\n+                        |this, idty| this.lower_fn_decl(\n+                            decl, Some((fn_def_id, idty)), true, header.asyncness.opt_return_id()),\n                     );\n \n                     hir::ItemFn(\n@@ -2656,7 +2676,7 @@ impl<'a> LoweringContext<'a> {\n                     ast_generics,\n                     def_id,\n                     AnonymousLifetimeMode::CreateParameter,\n-                    |this| {\n+                    |this, _| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(trait_ref, ImplTraitContext::Disallowed)\n                         });\n@@ -3191,7 +3211,7 @@ impl<'a> LoweringContext<'a> {\n                         generics,\n                         def_id,\n                         AnonymousLifetimeMode::PassThrough,\n-                        |this| {\n+                        |this, _| {\n                             (\n                                 // Disallow impl Trait in foreign items\n                                 this.lower_fn_decl(fdec, None, false, None),\n@@ -3226,7 +3246,12 @@ impl<'a> LoweringContext<'a> {\n             generics,\n             fn_def_id,\n             AnonymousLifetimeMode::PassThrough,\n-            |cx| cx.lower_fn_decl(&sig.decl, Some(fn_def_id), impl_trait_return_allow, is_async),\n+            |this, idty| this.lower_fn_decl(\n+                &sig.decl,\n+                Some((fn_def_id, idty)),\n+                impl_trait_return_allow,\n+                is_async,\n+            ),\n         );\n         (generics, hir::MethodSig { header, decl })\n     }"}]}