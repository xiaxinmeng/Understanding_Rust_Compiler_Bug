{"sha": "ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWE3MzAyOWNlNDIyY2NkNTJjM2M2NTlhMzJjMTlhYzYwZDBkNGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T01:54:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T01:54:47Z"}, "message": "tutorial: Minor tweaks", "tree": {"sha": "9aec21f5ad87c671fd61c1275eb171841bf94018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aec21f5ad87c671fd61c1275eb171841bf94018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "html_url": "https://github.com/rust-lang/rust/commit/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1880d783b73387c1baac9e5cb0167d7a0f6e768c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1880d783b73387c1baac9e5cb0167d7a0f6e768c", "html_url": "https://github.com/rust-lang/rust/commit/1880d783b73387c1baac9e5cb0167d7a0f6e768c"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "beebac6ed89b4b9ad3f8c2811a791ecbe18932dc", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "patch": "@@ -957,7 +957,7 @@ Rust has three competing goals that inform its view of memory:\n Most languages that offer strong memory safety guarantees rely upon a\n garbage-collected heap to manage all of the objects. This approach is\n straightforward both in concept and in implementation, but has\n-significant costs. Languages that take this approach tend to\n+significant costs. Languages that follow this path tend to\n aggressively pursue ways to ameliorate allocation costs (think the\n Java Virtual Machine). Rust supports this strategy with _managed\n boxes_: memory allocated on the heap whose lifetime is managed\n@@ -982,7 +982,7 @@ tasks. Experience in other languages has proven that isolating each\n task's heap from the others is a reliable strategy and one that is\n easy for programmers to reason about. Heap isolation has the\n additional benefit that garbage collection must only be done\n-per-heap. Rust never \"stops the world\" to garbage-collect memory.\n+per-heap. Rust never \"stops the world\" to reclaim memory.\n \n Complete isolation of heaps between tasks implies that any data\n transferred between tasks must be copied. While this is a fine and"}]}