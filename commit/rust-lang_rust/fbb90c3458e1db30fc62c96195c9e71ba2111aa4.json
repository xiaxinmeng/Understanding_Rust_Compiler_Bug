{"sha": "fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjkwYzM0NThlMWRiMzBmYzYyYzk2MTk1YzllNzFiYTIxMTFhYTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2014-10-25T17:33:54Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2014-11-03T20:07:43Z"}, "message": "Clean-up transmutes in libsyntax", "tree": {"sha": "7e1faee56bce0a40c502b987cd1759be6b008777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1faee56bce0a40c502b987cd1759be6b008777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "html_url": "https://github.com/rust-lang/rust/commit/fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2790505c19b158a5494139dba084b6af82810b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/2790505c19b158a5494139dba084b6af82810b96", "html_url": "https://github.com/rust-lang/rust/commit/2790505c19b158a5494139dba084b6af82810b96"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "1edcb35289a3be16a68eda444d7350dde4f78717", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "patch": "@@ -119,7 +119,7 @@ impl Name {\n     pub fn as_str<'a>(&'a self) -> &'a str {\n         unsafe {\n             // FIXME #12938: can't use copy_lifetime since &str isn't a &T\n-            ::std::mem::transmute(token::get_name(*self).get())\n+            ::std::mem::transmute::<&str,&str>(token::get_name(*self).get())\n         }\n     }\n "}, {"sha": "615cd34ca14df9b25f8d6ff9d0ec04a5c6c45f8d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "patch": "@@ -668,12 +668,12 @@ impl InternedString {\n \n impl BytesContainer for InternedString {\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        // FIXME(pcwalton): This is a workaround for the incorrect signature\n+        // FIXME #12938: This is a workaround for the incorrect signature\n         // of `BytesContainer`, which is itself a workaround for the lack of\n         // DST.\n         unsafe {\n             let this = self.get();\n-            mem::transmute(this.container_as_bytes())\n+            mem::transmute::<&[u8],&[u8]>(this.container_as_bytes())\n         }\n     }\n }"}, {"sha": "4cfc95d4c3ff690d5417066d9bf02870522911ea", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb90c3458e1db30fc62c96195c9e71ba2111aa4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fbb90c3458e1db30fc62c96195c9e71ba2111aa4", "patch": "@@ -169,17 +169,14 @@ pub fn to_string(f: |&mut State| -> IoResult<()>) -> String {\n     let mut s = rust_printer(box MemWriter::new());\n     f(&mut s).unwrap();\n     eof(&mut s.s).unwrap();\n-    unsafe {\n+    let wr = unsafe {\n         // FIXME(pcwalton): A nasty function to extract the string from an `io::Writer`\n         // that we \"know\" to be a `MemWriter` that works around the lack of checked\n         // downcasts.\n-        let obj: TraitObject = mem::transmute_copy(&s.s.out);\n-        let wr: Box<MemWriter> = mem::transmute(obj.data);\n-        let result =\n-            String::from_utf8(wr.get_ref().as_slice().to_vec()).unwrap();\n-        mem::forget(wr);\n-        result.to_string()\n-    }\n+        let obj: &TraitObject = mem::transmute(&s.s.out);\n+        mem::transmute::<*mut (), &MemWriter>(obj.data)\n+    };\n+    String::from_utf8(wr.get_ref().to_vec()).unwrap()\n }\n \n pub fn binop_to_string(op: BinOpToken) -> &'static str {"}]}