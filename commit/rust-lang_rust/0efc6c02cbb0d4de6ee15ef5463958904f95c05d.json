{"sha": "0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "node_id": "C_kwDOAAsO6NoAKDBlZmM2YzAyY2JiMGQ0ZGU2ZWUxNWVmNTQ2Mzk1ODkwNGY5NWMwNWQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-25T11:50:00Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-14T06:37:14Z"}, "message": "fast_reject: remove `StripReferences`", "tree": {"sha": "ab038c3b1845985dc055f0277a0cbddbb8c851a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab038c3b1845985dc055f0277a0cbddbb8c851a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "html_url": "https://github.com/rust-lang/rust/commit/0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "165142e993f521f992bd94b505e814ee67e7f0dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/165142e993f521f992bd94b505e814ee67e7f0dd", "html_url": "https://github.com/rust-lang/rust/commit/165142e993f521f992bd94b505e814ee67e7f0dd"}], "stats": {"total": 88, "additions": 20, "deletions": 68}, "files": [{"sha": "4d6b97eff24fe7100d077f8315e84b879ad3654c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n@@ -2066,7 +2066,6 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {\n                         self.tcx,\n                         trait_ref.self_ty(),\n                         SimplifyParams::No,\n-                        StripReferences::No,\n                     );\n \n                     self.impls"}, {"sha": "983057bff95d6f0abb14e414f85c0bfaedad7c44", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -54,12 +54,6 @@ pub enum SimplifyParams {\n     No,\n }\n \n-#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-pub enum StripReferences {\n-    Yes,\n-    No,\n-}\n-\n /// Tries to simplify a type by only returning the outermost injective\u00b9 layer, if one exists.\n ///\n /// The idea is to get something simple that we can use to quickly decide if two types could unify,\n@@ -73,8 +67,6 @@ pub enum StripReferences {\n /// When using `SimplifyParams::Yes`, we still return a simplified type for params and projections\u00b2,\n /// the reasoning for this can be seen at the places doing this.\n ///\n-/// For diagnostics we strip references with `StripReferences::Yes`. This is currently the best\n-/// way to skip some unhelpful suggestions.\n ///\n /// \u00b9 meaning that if two outermost layers are different, then the whole types are also different.\n /// \u00b2 FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during\n@@ -87,7 +79,6 @@ pub fn simplify_type(\n     tcx: TyCtxt<'_>,\n     ty: Ty<'_>,\n     can_simplify_params: SimplifyParams,\n-    strip_references: StripReferences,\n ) -> Option<SimplifiedType> {\n     match *ty.kind() {\n         ty::Bool => Some(BoolSimplifiedType),\n@@ -106,16 +97,7 @@ pub fn simplify_type(\n             }\n             _ => Some(MarkerTraitObjectSimplifiedType),\n         },\n-        ty::Ref(_, ty, mutbl) => {\n-            if strip_references == StripReferences::Yes {\n-                // For diagnostics, when recommending similar impls we want to\n-                // recommend impls even when there is a reference mismatch,\n-                // so we treat &T and T equivalently in that case.\n-                simplify_type(tcx, ty, can_simplify_params, strip_references)\n-            } else {\n-                Some(RefSimplifiedType(mutbl))\n-            }\n-        }\n+        ty::Ref(_, _, mutbl) => Some(RefSimplifiedType(mutbl)),\n         ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),\n         ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),\n         ty::GeneratorWitness(ref tys) => {"}, {"sha": "597f7dd95a211eb7f5eee85d603955ddb89986cf", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::specialization_graph;\n-use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ident, Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -150,9 +150,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n     ) -> impl Iterator<Item = DefId> + 'tcx {\n         let impls = self.trait_impls_of(def_id);\n-        if let Some(simp) =\n-            fast_reject::simplify_type(self, self_ty, SimplifyParams::No, StripReferences::No)\n-        {\n+        if let Some(simp) = fast_reject::simplify_type(self, self_ty, SimplifyParams::No) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 return impls.iter().copied();\n             }\n@@ -189,9 +187,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // whose outer level is not a parameter or projection. Especially for things like\n         // `T: Clone` this is incredibly useful as we would otherwise look at all the impls\n         // of `Clone` for `Option<T>`, `Vec<T>`, `ConcreteType` and so on.\n-        if let Some(simp) =\n-            fast_reject::simplify_type(self, self_ty, SimplifyParams::Yes, StripReferences::No)\n-        {\n+        if let Some(simp) = fast_reject::simplify_type(self, self_ty, SimplifyParams::Yes) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n                     if let result @ Some(_) = f(impl_def_id) {\n@@ -251,7 +247,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n         }\n \n         if let Some(simplified_self_ty) =\n-            fast_reject::simplify_type(tcx, impl_self_ty, SimplifyParams::No, StripReferences::No)\n+            fast_reject::simplify_type(tcx, impl_self_ty, SimplifyParams::No)\n         {\n             impls.non_blanket_impls.entry(simplified_self_ty).or_default().push(impl_def_id);\n         } else {"}, {"sha": "ed1bf433c2c1518f4137773de38cb7b1841d6d06", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -15,7 +15,7 @@ use crate::traits::{\n };\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifyParams};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -82,8 +82,8 @@ where\n         impl2_ref.iter().flat_map(|tref| tref.substs.types()),\n     )\n     .any(|(ty1, ty2)| {\n-        let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No, StripReferences::No);\n-        let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No, StripReferences::No);\n+        let t1 = fast_reject::simplify_type(tcx, ty1, SimplifyParams::No);\n+        let t2 = fast_reject::simplify_type(tcx, ty2, SimplifyParams::No);\n \n         if let (Some(t1), Some(t2)) = (t1, t2) {\n             // Simplified successfully"}, {"sha": "ee21eb029a88878213e7697e138309f5f48b26d0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -36,7 +36,7 @@ use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifyParams};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n@@ -2172,14 +2172,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             self.tcx(),\n                             obligation_ty,\n                             SimplifyParams::Yes,\n-                            StripReferences::No,\n-                        );\n-                        let simplified_impl_ty = fast_reject::simplify_type(\n-                            self.tcx(),\n-                            impl_ty,\n-                            SimplifyParams::No,\n-                            StripReferences::No,\n                         );\n+                        let simplified_impl_ty =\n+                            fast_reject::simplify_type(self.tcx(), impl_ty, SimplifyParams::No);\n \n                         simplified_obligation_ty.is_some()\n                             && simplified_impl_ty.is_some()"}, {"sha": "497ac207bbe4f3a226d277165e722a61ed10e9ee", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -2,7 +2,7 @@ use super::OverlapError;\n \n use crate::traits;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n \n@@ -49,12 +49,7 @@ impl ChildrenExt<'_> for Children {\n     /// Insert an impl into this set of children without comparing to any existing impls.\n     fn insert_blindly(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-        if let Some(st) = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        ) {\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No) {\n             debug!(\"insert_blindly: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             self.non_blanket_impls.entry(st).or_default().push(impl_def_id)\n         } else {\n@@ -69,12 +64,7 @@ impl ChildrenExt<'_> for Children {\n     fn remove_existing(&mut self, tcx: TyCtxt<'_>, impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let vec: &mut Vec<DefId>;\n-        if let Some(st) = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        ) {\n+        if let Some(st) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No) {\n             debug!(\"remove_existing: impl_def_id={:?} st={:?}\", impl_def_id, st);\n             vec = self.non_blanket_impls.get_mut(&st).unwrap();\n         } else {\n@@ -322,12 +312,7 @@ impl GraphExt for Graph {\n \n         let mut parent = trait_def_id;\n         let mut last_lint = None;\n-        let simplified = fast_reject::simplify_type(\n-            tcx,\n-            trait_ref.self_ty(),\n-            SimplifyParams::No,\n-            StripReferences::No,\n-        );\n+        let simplified = fast_reject::simplify_type(tcx, trait_ref.self_ty(), SimplifyParams::No);\n \n         // Descend the specialization tree, where `parent` is the current parent node.\n         loop {"}, {"sha": "55dce71bdfbd41207038095f5d02f5007658fab5", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0efc6c02cbb0d4de6ee15ef5463958904f95c05d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams};\n use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n@@ -1748,8 +1748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // FIXME: Even though negative bounds are not implemented, we could maybe handle\n                 // cases where a positive bound implies a negative impl.\n                 (candidates, Vec::new())\n-            } else if let Some(simp_rcvr_ty) =\n-                simplify_type(self.tcx, rcvr_ty, SimplifyParams::Yes, StripReferences::No)\n+            } else if let Some(simp_rcvr_ty) = simplify_type(self.tcx, rcvr_ty, SimplifyParams::Yes)\n             {\n                 let mut potential_candidates = Vec::new();\n                 let mut explicitly_negative = Vec::new();\n@@ -1763,12 +1762,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         })\n                         .any(|imp_did| {\n                             let imp = self.tcx.impl_trait_ref(imp_did).unwrap();\n-                            let imp_simp = simplify_type(\n-                                self.tcx,\n-                                imp.self_ty(),\n-                                SimplifyParams::Yes,\n-                                StripReferences::No,\n-                            );\n+                            let imp_simp =\n+                                simplify_type(self.tcx, imp.self_ty(), SimplifyParams::Yes);\n                             imp_simp.map_or(false, |s| s == simp_rcvr_ty)\n                         })\n                     {"}]}