{"sha": "8046218f0f18b853df571d85ac4ace003c3905b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDYyMThmMGYxOGI4NTNkZjU3MWQ4NWFjNGFjZTAwM2MzOTA1Yjk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T19:34:00Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T02:05:07Z"}, "message": "std: Add iterator::Repeat to repeat an element endlessly", "tree": {"sha": "33105677fce9059cb73ad5897a0949b6ec147cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33105677fce9059cb73ad5897a0949b6ec147cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8046218f0f18b853df571d85ac4ace003c3905b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8046218f0f18b853df571d85ac4ace003c3905b9", "html_url": "https://github.com/rust-lang/rust/commit/8046218f0f18b853df571d85ac4ace003c3905b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8046218f0f18b853df571d85ac4ace003c3905b9/comments", "author": null, "committer": null, "parents": [{"sha": "a05a9a1c02f50ffe8bfbddfeec093784f454c199", "url": "https://api.github.com/repos/rust-lang/rust/commits/a05a9a1c02f50ffe8bfbddfeec093784f454c199", "html_url": "https://github.com/rust-lang/rust/commit/a05a9a1c02f50ffe8bfbddfeec093784f454c199"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "bf55b4f7ce2e311d7424866778a163c338e9fa1b", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8046218f0f18b853df571d85ac4ace003c3905b9/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8046218f0f18b853df571d85ac4ace003c3905b9/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=8046218f0f18b853df571d85ac4ace003c3905b9", "patch": "@@ -1565,6 +1565,39 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n     }\n }\n \n+/// An iterator that repeats an element endlessly\n+#[deriving(Clone, DeepClone)]\n+pub struct Repeat<A> {\n+    priv element: A\n+}\n+\n+impl<A: Clone> Repeat<A> {\n+    /// Create a new `Repeat` that enlessly repeats the element `elt`.\n+    #[inline]\n+    pub fn new(elt: A) -> Repeat<A> {\n+        Repeat{element: elt}\n+    }\n+}\n+\n+impl<A: Clone> Iterator<A> for Repeat<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { self.idx(0) }\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) { (uint::max_value, None) }\n+}\n+\n+impl<A: Clone> DoubleEndedIterator<A> for Repeat<A> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.idx(0) }\n+}\n+\n+impl<A: Clone> RandomAccessIterator<A> for Repeat<A> {\n+    #[inline]\n+    fn indexable(&self) -> uint { uint::max_value }\n+    #[inline]\n+    fn idx(&self, _: uint) -> Option<A> { Some(self.element.clone()) }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}