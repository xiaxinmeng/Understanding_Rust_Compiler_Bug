{"sha": "334be18a74c770e30a7cf4a069106bc0d4ae8daf", "node_id": "C_kwDOAAsO6NoAKDMzNGJlMThhNzRjNzcwZTMwYTdjZjRhMDY5MTA2YmMwZDRhZThkYWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T21:39:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T21:39:06Z"}, "message": "Auto merge of #9412 - xFrednet:jst-r-bool-to-int-lint, r=xFrednet\n\nNew lint `bool_to_int_with_if`\n\nThis is a rebased version of https://github.com/rust-lang/rust-clippy/pull/9086 I could sadly not push directly push to the PR branch as it's protected.\n\nThe lint implementation comes from `@jst-r.` Thank you for the work you put into this :)\n\n---\n\nCloses: https://github.com/rust-lang/rust-clippy/issues/8131\nCloses: https://github.com/rust-lang/rust-clippy/pull/9086\n\nchangelog: Add lint [`bool_to_int_with_if`]\n\nr? `@ghost`", "tree": {"sha": "0f106b02ffef511a3a1f12ec4ea695477fcb39db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f106b02ffef511a3a1f12ec4ea695477fcb39db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334be18a74c770e30a7cf4a069106bc0d4ae8daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334be18a74c770e30a7cf4a069106bc0d4ae8daf", "html_url": "https://github.com/rust-lang/rust/commit/334be18a74c770e30a7cf4a069106bc0d4ae8daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334be18a74c770e30a7cf4a069106bc0d4ae8daf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80e278036f5d79d8987920496990ea0810ac110", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80e278036f5d79d8987920496990ea0810ac110", "html_url": "https://github.com/rust-lang/rust/commit/a80e278036f5d79d8987920496990ea0810ac110"}, {"sha": "b1f86a49ea0119e66ee7dced613c91824d56c6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f86a49ea0119e66ee7dced613c91824d56c6d0", "html_url": "https://github.com/rust-lang/rust/commit/b1f86a49ea0119e66ee7dced613c91824d56c6d0"}], "stats": {"total": 436, "additions": 419, "deletions": 17}, "files": [{"sha": "257add86b6e5bf7251439102ffea615865aaec1a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -3603,6 +3603,7 @@ Released 2018-09-13\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n+[`bool_to_int_with_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if\n [`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n [`borrow_deref_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const"}, {"sha": "a4b8cbb0d82aaf8294ee89a9b9303efb283f7b94", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -0,0 +1,125 @@\n+use rustc_ast::{ExprPrecedence, LitKind};\n+use rustc_hir::{Block, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, source::snippet_block_with_applicability};\n+use rustc_errors::Applicability;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Instead of using an if statement to convert a bool to an int,\n+    /// this lint suggests using a `from()` function or an `as` coercion.\n+    ///\n+    /// ### Why is this bad?\n+    /// Coercion or `from()` is idiomatic way to convert bool to a number.\n+    /// Both methods are guaranteed to return 1 for true, and 0 for false.\n+    ///\n+    /// See https://doc.rust-lang.org/std/primitive.bool.html#impl-From%3Cbool%3E\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let condition = false;\n+    /// if condition {\n+    ///     1_i64\n+    /// } else {\n+    ///     0\n+    /// };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let condition = false;\n+    /// i64::from(condition);\n+    /// ```\n+    /// or\n+    /// ```rust\n+    /// # let condition = false;\n+    /// condition as i64;\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub BOOL_TO_INT_WITH_IF,\n+    style,\n+    \"using if to convert bool to int\"\n+}\n+declare_lint_pass!(BoolToIntWithIf => [BOOL_TO_INT_WITH_IF]);\n+\n+impl<'tcx> LateLintPass<'tcx> for BoolToIntWithIf {\n+    fn check_expr(&mut self, ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n+        if !expr.span.from_expansion() {\n+            check_if_else(ctx, expr);\n+        }\n+    }\n+}\n+\n+fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx>) {\n+    if let ExprKind::If(check, then, Some(else_)) = expr.kind\n+        && let Some(then_lit) = int_literal(then)\n+        && let Some(else_lit) = int_literal(else_)\n+        && check_int_literal_equals_val(then_lit, 1)\n+        && check_int_literal_equals_val(else_lit, 0)\n+    {\n+        let mut applicability = Applicability::MachineApplicable;\n+        let snippet = snippet_block_with_applicability(ctx, check.span, \"..\", None, &mut applicability);\n+        let snippet_with_braces = {\n+            let need_parens = should_have_parentheses(check);\n+            let (left_paren, right_paren) = if need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n+            format!(\"{left_paren}{snippet}{right_paren}\")\n+        };\n+\n+        let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n+\n+        let suggestion = {\n+            let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n+            let (left_curly, right_curly) = if wrap_in_curly {(\"{\", \"}\")} else {(\"\", \"\")};\n+            format!(\n+                \"{left_curly}{ty}::from({snippet}){right_curly}\"\n+            )\n+        }; // when used in else clause if statement should be wrapped in curly braces\n+\n+        span_lint_and_then(ctx,\n+            BOOL_TO_INT_WITH_IF,\n+            expr.span,\n+            \"boolean to int conversion using if\",\n+            |diag| {\n+            diag.span_suggestion(\n+                expr.span,\n+                \"replace with from\",\n+                suggestion,\n+                applicability,\n+            );\n+            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{snippet_with_braces}.into()` can also be valid options\"));\n+        });\n+    };\n+}\n+\n+// If block contains only a int literal expression, return literal expression\n+fn int_literal<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>) -> Option<&'tcx rustc_hir::Expr<'tcx>> {\n+    if let ExprKind::Block(block, _) = expr.kind\n+        && let Block {\n+            stmts: [],       // Shouldn't lint if statements with side effects\n+            expr: Some(expr),\n+            ..\n+        } = block\n+        && let ExprKind::Lit(lit) = &expr.kind\n+        && let LitKind::Int(_, _) = lit.node\n+    {\n+        Some(expr)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn check_int_literal_equals_val<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>, expected_value: u128) -> bool {\n+    if let ExprKind::Lit(lit) = &expr.kind\n+        && let LitKind::Int(val, _) = lit.node\n+        && val == expected_value\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn should_have_parentheses<'tcx>(check: &'tcx rustc_hir::Expr<'tcx>) -> bool {\n+    check.precedence().order() < ExprPrecedence::Cast.order()\n+}"}, {"sha": "1f85382347aa1d992ad9ccc526ceb52e818de481", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -17,6 +17,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(bool_to_int_with_if::BOOL_TO_INT_WITH_IF),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),"}, {"sha": "13b573beea1ba985d3cb0f15e4a7148ed8da36db", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -56,6 +56,7 @@ store.register_lints(&[\n     await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n     blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n     bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n+    bool_to_int_with_if::BOOL_TO_INT_WITH_IF,\n     booleans::NONMINIMAL_BOOL,\n     booleans::OVERLY_COMPLEX_BOOL_EXPR,\n     borrow_deref_ref::BORROW_DEREF_REF,"}, {"sha": "05d2ec2e9e1e6002c1d2c3eb2eff1842b49a2da6", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -6,6 +6,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n+    LintId::of(bool_to_int_with_if::BOOL_TO_INT_WITH_IF),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),\n     LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n     LintId::of(collapsible_if::COLLAPSIBLE_ELSE_IF),"}, {"sha": "a26e129f094e4e8cd08b4167a7a9806c7a473e2e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -178,6 +178,7 @@ mod attrs;\n mod await_holding_invalid;\n mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n+mod bool_to_int_with_if;\n mod booleans;\n mod borrow_deref_ref;\n mod cargo;\n@@ -900,6 +901,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(manual_string_new::ManualStringNew));\n     store.register_late_pass(|| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n+    store.register_late_pass(|| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "52632e88b1bd9b5ef38f62de3c077afd347aa49c", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -201,12 +201,8 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             // in the arms, so we need to evaluate the correct offsets here in order to iterate in\n             // both arms at the same time.\n             let len = max(\n-                left_in.len() + {\n-                    if left_pos.is_some() { 1 } else { 0 }\n-                },\n-                right_in.len() + {\n-                    if right_pos.is_some() { 1 } else { 0 }\n-                },\n+                left_in.len() + usize::from(left_pos.is_some()),\n+                right_in.len() + usize::from(right_pos.is_some()),\n             );\n             let mut left_pos = left_pos.unwrap_or(usize::MAX);\n             let mut right_pos = right_pos.unwrap_or(usize::MAX);"}, {"sha": "c55478b3441f1e2d93fd7c1b4d1df83158661bbd", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -234,11 +234,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n             })) => (\n                 def_id.to_def_id(),\n                 FnKind::TraitFn,\n-                if sig.decl.implicit_self.has_implicit_self() {\n-                    1\n-                } else {\n-                    0\n-                },\n+                usize::from(sig.decl.implicit_self.has_implicit_self()),\n             ),\n             Some(Node::ImplItem(&ImplItem {\n                 kind: ImplItemKind::Fn(ref sig, _),\n@@ -253,11 +249,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                     (\n                         trait_item_id,\n                         FnKind::ImplTraitFn(cx.tcx.erase_regions(trait_ref.substs) as *const _ as usize),\n-                        if sig.decl.implicit_self.has_implicit_self() {\n-                            1\n-                        } else {\n-                            0\n-                        },\n+                        usize::from(sig.decl.implicit_self.has_implicit_self()),\n                     )\n                 } else {\n                     (def_id.to_def_id(), FnKind::Fn, 0)"}, {"sha": "a99bdfc1313792999485940405d71c418a1aa2bd", "filename": "tests/ui/author/struct.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fauthor%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fauthor%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fstruct.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -1,4 +1,9 @@\n-#[allow(clippy::unnecessary_operation, clippy::single_match)]\n+#![allow(\n+    clippy::unnecessary_operation,\n+    clippy::single_match,\n+    clippy::no_effect,\n+    clippy::bool_to_int_with_if\n+)]\n fn main() {\n     struct Test {\n         field: u32,"}, {"sha": "9c1098dc4c17aa10ea216d3502f8b763b461eb70", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+\n+#![warn(clippy::bool_to_int_with_if)]\n+#![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n+\n+fn main() {\n+    let a = true;\n+    let b = false;\n+\n+    let x = 1;\n+    let y = 2;\n+\n+    // Should lint\n+    // precedence\n+    i32::from(a);\n+    i32::from(!a);\n+    i32::from(a || b);\n+    i32::from(cond(a, b));\n+    i32::from(x + y < 4);\n+\n+    // if else if\n+    if a {\n+        123\n+    } else {i32::from(b)};\n+\n+    // Shouldn't lint\n+\n+    if a {\n+        1\n+    } else if b {\n+        0\n+    } else {\n+        3\n+    };\n+\n+    if a {\n+        3\n+    } else if b {\n+        1\n+    } else {\n+        -2\n+    };\n+\n+    if a {\n+        3\n+    } else {\n+        0\n+    };\n+    if a {\n+        side_effect();\n+        1\n+    } else {\n+        0\n+    };\n+    if a {\n+        1\n+    } else {\n+        side_effect();\n+        0\n+    };\n+\n+    // multiple else ifs\n+    if a {\n+        123\n+    } else if b {\n+        1\n+    } else if a | b {\n+        0\n+    } else {\n+        123\n+    };\n+\n+    some_fn(a);\n+}\n+\n+// Lint returns and type inference\n+fn some_fn(a: bool) -> u8 {\n+    u8::from(a)\n+}\n+\n+fn side_effect() {}\n+\n+fn cond(a: bool, b: bool) -> bool {\n+    a || b\n+}"}, {"sha": "0c967dac6e2dd906155338b065ab573dca4e5018", "filename": "tests/ui/bool_to_int_with_if.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.rs?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -0,0 +1,109 @@\n+// run-rustfix\n+\n+#![warn(clippy::bool_to_int_with_if)]\n+#![allow(unused, dead_code, clippy::unnecessary_operation, clippy::no_effect)]\n+\n+fn main() {\n+    let a = true;\n+    let b = false;\n+\n+    let x = 1;\n+    let y = 2;\n+\n+    // Should lint\n+    // precedence\n+    if a {\n+        1\n+    } else {\n+        0\n+    };\n+    if !a {\n+        1\n+    } else {\n+        0\n+    };\n+    if a || b {\n+        1\n+    } else {\n+        0\n+    };\n+    if cond(a, b) {\n+        1\n+    } else {\n+        0\n+    };\n+    if x + y < 4 {\n+        1\n+    } else {\n+        0\n+    };\n+\n+    // if else if\n+    if a {\n+        123\n+    } else if b {\n+        1\n+    } else {\n+        0\n+    };\n+\n+    // Shouldn't lint\n+\n+    if a {\n+        1\n+    } else if b {\n+        0\n+    } else {\n+        3\n+    };\n+\n+    if a {\n+        3\n+    } else if b {\n+        1\n+    } else {\n+        -2\n+    };\n+\n+    if a {\n+        3\n+    } else {\n+        0\n+    };\n+    if a {\n+        side_effect();\n+        1\n+    } else {\n+        0\n+    };\n+    if a {\n+        1\n+    } else {\n+        side_effect();\n+        0\n+    };\n+\n+    // multiple else ifs\n+    if a {\n+        123\n+    } else if b {\n+        1\n+    } else if a | b {\n+        0\n+    } else {\n+        123\n+    };\n+\n+    some_fn(a);\n+}\n+\n+// Lint returns and type inference\n+fn some_fn(a: bool) -> u8 {\n+    if a { 1 } else { 0 }\n+}\n+\n+fn side_effect() {}\n+\n+fn cond(a: bool, b: bool) -> bool {\n+    a || b\n+}"}, {"sha": "8647a9cffbede3e289c312d1d26f2831031b795d", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334be18a74c770e30a7cf4a069106bc0d4ae8daf/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=334be18a74c770e30a7cf4a069106bc0d4ae8daf", "patch": "@@ -0,0 +1,84 @@\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:15:5\n+   |\n+LL | /     if a {\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(a)`\n+   |\n+   = note: `-D clippy::bool-to-int-with-if` implied by `-D warnings`\n+   = note: `a as i32` or `a.into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:20:5\n+   |\n+LL | /     if !a {\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(!a)`\n+   |\n+   = note: `!a as i32` or `!a.into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:25:5\n+   |\n+LL | /     if a || b {\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(a || b)`\n+   |\n+   = note: `(a || b) as i32` or `(a || b).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:30:5\n+   |\n+LL | /     if cond(a, b) {\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(cond(a, b))`\n+   |\n+   = note: `cond(a, b) as i32` or `cond(a, b).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:35:5\n+   |\n+LL | /     if x + y < 4 {\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `i32::from(x + y < 4)`\n+   |\n+   = note: `(x + y < 4) as i32` or `(x + y < 4).into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:44:12\n+   |\n+LL |       } else if b {\n+   |  ____________^\n+LL | |         1\n+LL | |     } else {\n+LL | |         0\n+LL | |     };\n+   | |_____^ help: replace with from: `{i32::from(b)}`\n+   |\n+   = note: `b as i32` or `b.into()` can also be valid options\n+\n+error: boolean to int conversion using if\n+  --> $DIR/bool_to_int_with_if.rs:102:5\n+   |\n+LL |     if a { 1 } else { 0 }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `u8::from(a)`\n+   |\n+   = note: `a as u8` or `a.into()` can also be valid options\n+\n+error: aborting due to 7 previous errors\n+"}]}