{"sha": "6e2ac83a0cbf6681750b1f136137116612799684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMmFjODNhMGNiZjY2ODE3NTBiMWYxMzYxMzcxMTY2MTI3OTk2ODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-30T17:20:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-30T17:20:44Z"}, "message": "Merge pull request #1056 from bjorn3/misc_fixes\n\nMisc fixes", "tree": {"sha": "8ef6032c0a7f93bd231a94186cc222f8af5d0b1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef6032c0a7f93bd231a94186cc222f8af5d0b1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e2ac83a0cbf6681750b1f136137116612799684", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+3RsCRBK7hj4Ov3rIwAAdHIIAJNYbc9wPOfgD5WxQW47N6j4\nGn7FRQaj23rsrsNO/C5Yn8sq3odQvS6mV3CVRLINnJ5xqIXlAqFgG9PLqxys5TgX\nyaHaB2Xr/BBqIGeLoArw3wHXvbBFG2Tn1Nk2hEu1oYVx4YY/+xk0gF724zG9jSQh\nSL1UPqTYze2cKrLBlr42TYhauk627v56ewR/7we4JdNgLV8K6hwmOIcezXmw7A0N\nWWZ/1697UHpDv1F4eI31ZtEu5rIM/vAuB8NExJYWbhrnhpSw16hQcJqPGbpy69uX\nQzjpieu/mkxuX1WcR/oe2GqH5Ffyzg/w5jofjoTQi5sdS5YZqnL0Em/lZ8pl5l4=\n=qIUk\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ef6032c0a7f93bd231a94186cc222f8af5d0b1e\nparent de336e17e4800299aa21d7531c351d7ec1eab6b9\nparent eb89a2c092b8189ee71b34862a3e2fec48bb1c6a\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1593537644 +0200\ncommitter GitHub <noreply@github.com> 1593537644 +0200\n\nMerge pull request #1056 from bjorn3/misc_fixes\n\nMisc fixes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ac83a0cbf6681750b1f136137116612799684", "html_url": "https://github.com/rust-lang/rust/commit/6e2ac83a0cbf6681750b1f136137116612799684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ac83a0cbf6681750b1f136137116612799684/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de336e17e4800299aa21d7531c351d7ec1eab6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/de336e17e4800299aa21d7531c351d7ec1eab6b9", "html_url": "https://github.com/rust-lang/rust/commit/de336e17e4800299aa21d7531c351d7ec1eab6b9"}, {"sha": "eb89a2c092b8189ee71b34862a3e2fec48bb1c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb89a2c092b8189ee71b34862a3e2fec48bb1c6a", "html_url": "https://github.com/rust-lang/rust/commit/eb89a2c092b8189ee71b34862a3e2fec48bb1c6a"}], "stats": {"total": 129, "additions": 106, "deletions": 23}, "files": [{"sha": "85c0c21c33daaea51d61786ecf077af3209e4c31", "filename": "src/base.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6e2ac83a0cbf6681750b1f136137116612799684", "patch": "@@ -515,12 +515,43 @@ fn trans_stmt<'tcx>(\n                             _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n                         }\n \n-                        let discr = crate::discriminant::codegen_get_discriminant(\n-                            fx,\n-                            operand,\n-                            fx.layout_of(to_ty),\n-                        );\n-                        lval.write_cvalue(fx, discr);\n+                        use rustc_target::abi::{TagEncoding, Int, Variants};\n+\n+                        match &operand.layout().variants {\n+                            Variants::Single { index } => {\n+                                let discr = operand.layout().ty.discriminant_for_variant(fx.tcx, *index).unwrap();\n+                                let discr = if discr.ty.is_signed() {\n+                                    rustc_middle::mir::interpret::sign_extend(discr.val, fx.layout_of(discr.ty).size)\n+                                } else {\n+                                    discr.val\n+                                };\n+\n+                                let discr = CValue::const_val(fx, fx.layout_of(to_ty), discr);\n+                                lval.write_cvalue(fx, discr);\n+                            }\n+                            Variants::Multiple {\n+                                tag,\n+                                tag_field,\n+                                tag_encoding: TagEncoding::Direct,\n+                                variants: _,\n+                            } => {\n+                                let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n+\n+                                // Read the tag/niche-encoded discriminant from memory.\n+                                let encoded_discr = operand.value_field(fx, mir::Field::new(*tag_field));\n+                                let encoded_discr = encoded_discr.load_scalar(fx);\n+\n+                                // Decode the discriminant (specifically if it's niche-encoded).\n+                                let signed = match tag.value {\n+                                    Int(_, signed) => signed,\n+                                    _ => false,\n+                                };\n+                                let val = clif_intcast(fx, encoded_discr, cast_to, signed);\n+                                let val = CValue::by_val(val, dest_layout);\n+                                lval.write_cvalue(fx, val);\n+                            }\n+                            Variants::Multiple { ..} => unreachable!(),\n+                        }\n                     } else {\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n                         let from = operand.load_scalar(fx);"}, {"sha": "5c760a467c63190c5a7f917a322d9bba9830e674", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=6e2ac83a0cbf6681750b1f136137116612799684", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n                             fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align);\n+                            let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n@@ -182,7 +182,7 @@ fn pointer_for_allocation<'tcx>(\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n     fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n+    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align, alloc.mutability);\n \n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n@@ -195,12 +195,13 @@ fn data_id_for_alloc_id<B: Backend>(\n     module: &mut Module<B>,\n     alloc_id: AllocId,\n     align: Align,\n+    mutability: rustc_hir::Mutability,\n ) -> DataId {\n     module\n         .declare_data(\n             &format!(\"__alloc_{}\", alloc_id.0),\n             Linkage::Local,\n-            false,\n+            mutability == rustc_hir::Mutability::Mut,\n             false,\n             Some(align.bytes() as u8),\n         )\n@@ -271,7 +272,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align);\n+                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align, alloc.mutability);\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -333,9 +334,9 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     data_ctx.write_function_addr(offset.bytes() as u32, local_func_id);\n                     continue;\n                 }\n-                GlobalAlloc::Memory(_) => {\n+                GlobalAlloc::Memory(target_alloc) => {\n                     cx.todo.push(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc, alloc.align)\n+                    data_id_for_alloc_id(module, reloc, target_alloc.align, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {"}, {"sha": "aa950067f7b582a12e7d9227d5875da04edd89f2", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=6e2ac83a0cbf6681750b1f136137116612799684", "patch": "@@ -471,7 +471,26 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             assert_eq!(args.len(), 3);\n             let byte_amount = fx.bcx.ins().imul(count, elem_size);\n \n-            if intrinsic.ends_with(\"_nonoverlapping\") {\n+            if intrinsic.contains(\"nonoverlapping\") {\n+                // FIXME emit_small_memcpy\n+                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+            } else {\n+                // FIXME emit_small_memmove\n+                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+            }\n+        };\n+        // NOTE: the volatile variants have src and dst swapped\n+        volatile_copy_memory | volatile_copy_nonoverlapping_memory, <elem_ty> (v dst, v src, v count) {\n+            let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n+            let elem_size = fx\n+                .bcx\n+                .ins()\n+                .iconst(fx.pointer_type, elem_size as i64);\n+            assert_eq!(args.len(), 3);\n+            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+\n+            // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n+            if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n                 fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n             } else {\n@@ -633,11 +652,13 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         transmute, (c from) {\n             ret.write_cvalue_transmute(fx, from);\n         };\n-        write_bytes, (c dst, v val, v count) {\n+        write_bytes | volatile_set_memory, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let count = fx.bcx.ins().imul_imm(count, pointee_size as i64);\n             let dst_ptr = dst.load_scalar(fx);\n+            // FIXME make the memset actually volatile when switching to emit_small_memset\n+            // FIXME use emit_small_memset\n             fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n@@ -812,7 +833,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             let pointee_size: u64 = fx.layout_of(T).size.bytes();\n             let diff = fx.bcx.ins().isub(ptr, base);\n             // FIXME this can be an exact division.\n-            let val = CValue::by_val(fx.bcx.ins().udiv_imm(diff, pointee_size as i64), isize_layout);\n+            let val = CValue::by_val(fx.bcx.ins().sdiv_imm(diff, pointee_size as i64), isize_layout);\n             ret.write_cvalue(fx, val);\n         };\n \n@@ -966,6 +987,28 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             let ret_val = CValue::const_val(fx, ret.layout(), 0);\n             ret.write_cvalue(fx, ret_val);\n         };\n+\n+        fadd_fast | fsub_fast | fmul_fast | fdiv_fast | frem_fast, (c x, c y) {\n+            let res = crate::num::trans_float_binop(fx, match intrinsic {\n+                \"fadd_fast\" => BinOp::Add,\n+                \"fsub_fast\" => BinOp::Sub,\n+                \"fmul_fast\" => BinOp::Mul,\n+                \"fdiv_fast\" => BinOp::Div,\n+                \"frem_fast\" => BinOp::Rem,\n+                _ => unreachable!(),\n+            }, x, y);\n+            ret.write_cvalue(fx, res);\n+        };\n+        float_to_int_unchecked, (v f) {\n+            let res = crate::cast::clif_int_or_float_cast(\n+                fx,\n+                f,\n+                false,\n+                fx.clif_type(ret.layout().ty).unwrap(),\n+                type_sign(ret.layout().ty),\n+            );\n+            ret.write_cvalue(fx, CValue::by_val(res, ret.layout()));\n+        };\n     }\n \n     if let Some((_, dest)) = destination {"}, {"sha": "22269b5ee29e596a8029cfcbcec4ffcdbaf979be", "filename": "src/num.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e2ac83a0cbf6681750b1f136137116612799684/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=6e2ac83a0cbf6681750b1f136137116612799684", "patch": "@@ -168,16 +168,18 @@ pub(crate) fn trans_int_binop<'tcx>(\n         BinOp::BitOr => b.bor(lhs, rhs),\n         BinOp::Shl => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let rhs = clif_intcast(fx, rhs, lhs_ty, false);\n-            fx.bcx.ins().ishl(lhs, rhs)\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n+            fx.bcx.ins().ishl(lhs, actual_shift)\n         }\n         BinOp::Shr => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n-            let rhs = clif_intcast(fx, rhs, lhs_ty, false);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             if signed {\n-                fx.bcx.ins().sshr(lhs, rhs)\n+                fx.bcx.ins().sshr(lhs, actual_shift)\n             } else {\n-                fx.bcx.ins().ushr(lhs, rhs)\n+                fx.bcx.ins().ushr(lhs, actual_shift)\n             }\n         }\n         // Compare binops handles by `codegen_binop`.\n@@ -283,18 +285,24 @@ pub(crate) fn trans_checked_int_binop<'tcx>(\n             }\n         }\n         BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n+            let val = fx.bcx.ins().ishl(lhs, actual_shift);\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;\n             let has_overflow =\n                 fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n             (val, has_overflow)\n         }\n         BinOp::Shr => {\n+            let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n+            let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n+            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, rhs)\n+                fx.bcx.ins().ushr(lhs, actual_shift)\n             } else {\n-                fx.bcx.ins().sshr(lhs, rhs)\n+                fx.bcx.ins().sshr(lhs, actual_shift)\n             };\n             let ty = fx.bcx.func.dfg.value_type(val);\n             let max_shift = i64::from(ty.bits()) - 1;"}]}