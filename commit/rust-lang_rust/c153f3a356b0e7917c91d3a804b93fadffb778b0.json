{"sha": "c153f3a356b0e7917c91d3a804b93fadffb778b0", "node_id": "C_kwDOAAsO6NoAKGMxNTNmM2EzNTZiMGU3OTE3YzkxZDNhODA0YjkzZmFkZmZiNzc4YjA", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-06-05T00:21:00Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-06-16T15:36:02Z"}, "message": "Ignore the always part of #[inline(always)] in MIR inlining", "tree": {"sha": "952578ab7bf02fc596dafa32c1d64f83bebd6708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952578ab7bf02fc596dafa32c1d64f83bebd6708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c153f3a356b0e7917c91d3a804b93fadffb778b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c153f3a356b0e7917c91d3a804b93fadffb778b0", "html_url": "https://github.com/rust-lang/rust/commit/c153f3a356b0e7917c91d3a804b93fadffb778b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c153f3a356b0e7917c91d3a804b93fadffb778b0/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b334696fffe8c08d2e6a978862849d5a89f875", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b334696fffe8c08d2e6a978862849d5a89f875", "html_url": "https://github.com/rust-lang/rust/commit/99b334696fffe8c08d2e6a978862849d5a89f875"}], "stats": {"total": 1283, "additions": 349, "deletions": 934}, "files": [{"sha": "b28fed7159f1e84a37a02b3e6f95388a93be0c9a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -479,11 +479,12 @@ impl<'tcx> Inliner<'tcx> {\n         // Abort if type validation found anything fishy.\n         checker.validation?;\n \n+        // N.B. We still apply our cost threshold to #[inline(always)] functions.\n+        // That attribute is often applied to very large functions that exceed LLVM's (very\n+        // generous) inlining threshold. Such functions are very poor MIR inlining candidates.\n+        // Always inlining #[inline(always)] functions in MIR, on net, slows down the compiler.\n         let cost = checker.cost;\n-        if let InlineAttr::Always = callee_attrs.inline {\n-            debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n-            Ok(())\n-        } else if cost <= threshold {\n+        if cost <= threshold {\n             debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n             Ok(())\n         } else {"}, {"sha": "bd6cd69215ae852880edaf84cf10e00674c9773f", "filename": "src/tools/miri/tests/fail/terminate-terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fterminate-terminator.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmir-opt-level=3\n+//@compile-flags: -Zmir-opt-level=3 -Zinline-mir-hint-threshold=1000\n // Enable MIR inlining to ensure that `TerminatorKind::Terminate` is generated\n // instead of just `UnwindAction::Terminate`.\n "}, {"sha": "573ae1ba68d4d92606d0e33360711cf5ce00fe3c", "filename": "tests/mir-opt/inline/asm_unwind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -2,6 +2,7 @@\n //\n // EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // needs-asm-support\n+// compile-flags: -Zinline-mir-hint-threshold=1000\n #![feature(asm_unwind)]\n \n struct D;\n@@ -10,7 +11,7 @@ impl Drop for D {\n     fn drop(&mut self) {}\n }\n \n-#[inline(always)]\n+#[inline]\n fn foo() {\n     let _d = D;\n     unsafe { std::arch::asm!(\"\", options(may_unwind)) };"}, {"sha": "1b74d818451e7d78da45b682563db9049b4130f7", "filename": "tests/mir-opt/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -1,4 +1,5 @@\n // EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n+// compile-flags: -Zinline-mir-hint-threshold=1000\n \n // EMIT_MIR cycle.f.Inline.diff\n #[inline(always)]"}, {"sha": "e01c4c1dd02143864f51676b2f88153ec74a732f", "filename": "tests/mir-opt/inline/inline_diverging.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -1,6 +1,7 @@\n // Tests inlining of diverging calls.\n //\n // EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n+// compile-flags: -Zinline-mir-hint-threshold=1000\n #![crate_type = \"lib\"]\n \n // EMIT_MIR inline_diverging.f.Inline.diff"}, {"sha": "e05c605a4e47f7f590672a4c38211345df78428d", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.panic-abort.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-abort.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,30 +4,30 @@\n   fn main() -> () {\n       let mut _0: ();\n       let _1: std::ops::GeneratorState<i32, bool>;\n-      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>;\n-      let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n-      let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8];\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>;\n+      let mut _3: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n+      let mut _4: [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +     let mut _5: bool;\n       scope 1 {\n           debug _r => _1;\n       }\n +     scope 2 (inlined g) {\n +     }\n-+     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new) {\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new) {\n +         debug pointer => _3;\n +         scope 4 {\n-+             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new_unchecked) {\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new_unchecked) {\n +                 debug pointer => _3;\n +             }\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {\n +         debug a => _5;\n-+         let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n++         let mut _6: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +         let mut _7: u32;\n +         let mut _8: i32;\n-+         let mut _9: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n-+         let mut _10: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n++         let mut _9: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n++         let mut _10: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +     }\n   \n       bb0: {\n@@ -39,18 +39,18 @@\n -     }\n - \n -     bb1: {\n-+         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)];\n++         _4 = [generator@$DIR/inline_generator.rs:16:5: 16:8 (#0)];\n           _3 = &mut _4;\n--         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind unreachable];\n+-         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new(move _3) -> [return: bb2, unwind unreachable];\n -     }\n - \n -     bb2: {\n-+         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _3 };\n++         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]> { pointer: move _3 };\n           StorageDead(_3);\n--         _1 = <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind unreachable];\n+-         _1 = <[generator@$DIR/inline_generator.rs:16:5: 16:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind unreachable];\n +         StorageLive(_5);\n +         _5 = const false;\n-+         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         _7 = discriminant((*_6));\n +         switchInt(move _7) -> [0: bb2, 1: bb6, 3: bb7, otherwise: bb8];\n       }\n@@ -82,7 +82,7 @@\n + \n +     bb5: {\n +         _1 = GeneratorState::<i32, bool>::Yielded(move _8);\n-+         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         discriminant((*_9)) = 3;\n +         goto -> bb1;\n +     }\n@@ -95,7 +95,7 @@\n +         StorageLive(_8);\n +         StorageDead(_8);\n +         _1 = GeneratorState::<i32, bool>::Complete(_5);\n-+         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         discriminant((*_10)) = 1;\n +         goto -> bb1;\n +     }"}, {"sha": "588f04048d67dbfb15263d9eb065fdaefe639b2f", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.panic-unwind.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.panic-unwind.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,30 +4,30 @@\n   fn main() -> () {\n       let mut _0: ();\n       let _1: std::ops::GeneratorState<i32, bool>;\n-      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>;\n-      let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n-      let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8];\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>;\n+      let mut _3: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n+      let mut _4: [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +     let mut _5: bool;\n       scope 1 {\n           debug _r => _1;\n       }\n +     scope 2 (inlined g) {\n +     }\n-+     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new) {\n++     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new) {\n +         debug pointer => _3;\n +         scope 4 {\n-+             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new_unchecked) {\n++             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new_unchecked) {\n +                 debug pointer => _3;\n +             }\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {\n +         debug a => _5;\n-+         let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n++         let mut _6: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +         let mut _7: u32;\n +         let mut _8: i32;\n-+         let mut _9: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n-+         let mut _10: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8];\n++         let mut _9: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n++         let mut _10: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8];\n +     }\n   \n       bb0: {\n@@ -39,18 +39,18 @@\n -     }\n - \n -     bb1: {\n-+         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)];\n++         _4 = [generator@$DIR/inline_generator.rs:16:5: 16:8 (#0)];\n           _3 = &mut _4;\n--         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new(move _3) -> [return: bb2, unwind: bb4];\n+-         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]>::new(move _3) -> [return: bb2, unwind: bb4];\n -     }\n - \n -     bb2: {\n-+         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _3 };\n++         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:16:5: 16:8]> { pointer: move _3 };\n           StorageDead(_3);\n--         _1 = <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4];\n+-         _1 = <[generator@$DIR/inline_generator.rs:16:5: 16:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4];\n +         StorageLive(_5);\n +         _5 = const false;\n-+         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         _7 = discriminant((*_6));\n +         switchInt(move _7) -> [0: bb3, 1: bb7, 3: bb8, otherwise: bb9];\n       }\n@@ -87,7 +87,7 @@\n + \n +     bb6: {\n +         _1 = GeneratorState::<i32, bool>::Yielded(move _8);\n-+         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         discriminant((*_9)) = 3;\n +         goto -> bb1;\n +     }\n@@ -100,7 +100,7 @@\n +         StorageLive(_8);\n +         StorageDead(_8);\n +         _1 = GeneratorState::<i32, bool>::Complete(_5);\n-+         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]);\n++         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:16:5: 16:8]);\n +         discriminant((*_10)) = 1;\n +         goto -> bb1;\n +     }"}, {"sha": "2d71458c1741a7257875b9796463d31142aba7ee", "filename": "tests/mir-opt/inline/inline_generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -1,4 +1,5 @@\n // EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n+// compile-flags: -Zinline-mir-hint-threshold=1000\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n@@ -9,8 +10,8 @@ fn main() {\n     let _r = Pin::new(&mut g()).resume(false);\n }\n \n-#[inline(always)]\n+#[inline]\n pub fn g() -> impl Generator<bool> {\n-    #[inline(always)]\n+    #[inline]\n     |a| { yield if a { 7 } else { 13 } }\n }"}, {"sha": "f3a6923415a1491eb8d4458dd6ef5fdf921522d7", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.panic-abort.diff", "status": "modified", "additions": 145, "deletions": 4, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-abort.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -18,6 +18,99 @@\n +         let mut _6: *mut u8;\n +         let mut _7: *const std::vec::Vec<u32>;\n +         scope 4 {\n++             scope 5 (inlined alloc::alloc::exchange_malloc) {\n++                 debug size => _4;\n++                 debug align => _5;\n++                 let _8: std::alloc::Layout;\n++                 let mut _9: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;\n++                 let mut _10: isize;\n++                 let mut _12: !;\n++                 scope 6 {\n++                     debug layout => _8;\n++                     let _11: std::ptr::NonNull<[u8]>;\n++                     let mut _13: &std::alloc::Global;\n++                     scope 8 {\n++                         debug ptr => _11;\n++                         scope 18 (inlined NonNull::<[u8]>::as_mut_ptr) {\n++                             debug self => _11;\n++                             let mut _15: std::ptr::NonNull<u8>;\n++                             scope 19 (inlined NonNull::<[u8]>::as_non_null_ptr) {\n++                                 debug self => _11;\n++                                 let mut _16: *mut u8;\n++                                 let mut _17: *mut [u8];\n++                                 scope 20 {\n++                                     scope 21 (inlined NonNull::<[u8]>::as_ptr) {\n++                                         debug self => _11;\n++                                         let mut _18: *const [u8];\n++                                     }\n++                                     scope 22 (inlined ptr::mut_ptr::<impl *mut [u8]>::as_mut_ptr) {\n++                                         debug self => _17;\n++                                     }\n++                                     scope 23 (inlined NonNull::<u8>::new_unchecked) {\n++                                         debug ptr => _16;\n++                                         let mut _19: *const u8;\n++                                         scope 24 {\n++                                             scope 25 (inlined NonNull::<T>::new_unchecked::runtime::<u8>) {\n++                                                 debug ptr => _16;\n++                                                 scope 26 (inlined ptr::mut_ptr::<impl *mut u8>::is_null) {\n++                                                     debug self => _16;\n++                                                     let mut _20: *mut u8;\n++                                                     scope 27 {\n++                                                         scope 28 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) {\n++                                                             debug ptr => _20;\n++                                                             scope 29 (inlined ptr::mut_ptr::<impl *mut u8>::addr) {\n++                                                                 debug self => _20;\n++                                                                 scope 30 {\n++                                                                     scope 31 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) {\n++                                                                         debug self => _20;\n++                                                                     }\n++                                                                 }\n++                                                             }\n++                                                         }\n++                                                     }\n++                                                 }\n++                                             }\n++                                         }\n++                                     }\n++                                 }\n++                             }\n++                             scope 32 (inlined NonNull::<u8>::as_ptr) {\n++                                 debug self => _15;\n++                                 let mut _21: *const u8;\n++                             }\n++                         }\n++                     }\n++                     scope 17 (inlined <std::alloc::Global as Allocator>::allocate) {\n++                         debug self => const _;\n++                         debug layout => _8;\n++                     }\n++                 }\n++                 scope 7 {\n++                     scope 9 (inlined Layout::from_size_align_unchecked) {\n++                         debug size => _4;\n++                         debug align => _5;\n++                         let mut _14: std::ptr::Alignment;\n++                         scope 10 {\n++                             scope 11 (inlined std::ptr::Alignment::new_unchecked) {\n++                                 debug align => _5;\n++                                 scope 12 {\n++                                     scope 14 (inlined std::ptr::Alignment::new_unchecked::runtime) {\n++                                         debug align => _5;\n++                                         scope 15 (inlined core::num::<impl usize>::is_power_of_two) {\n++                                             debug self => _5;\n++                                             scope 16 (inlined core::num::<impl usize>::count_ones) {\n++                                                 debug self => _5;\n++                                             }\n++                                         }\n++                                     }\n++                                 }\n++                                 scope 13 {\n++                                 }\n++                             }\n++                         }\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -31,7 +124,17 @@\n +         StorageDead(_3);\n +         _4 = SizeOf(std::vec::Vec<u32>);\n +         _5 = AlignOf(std::vec::Vec<u32>);\n-+         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb2, unwind unreachable];\n++         StorageLive(_8);\n++         StorageLive(_11);\n++         StorageLive(_12);\n++         StorageLive(_13);\n++         StorageLive(_14);\n++         _14 = _5 as std::ptr::Alignment (Transmute);\n++         _8 = Layout { size: _4, align: move _14 };\n++         StorageDead(_14);\n++         StorageLive(_9);\n++         _13 = const _;\n++         _9 = std::alloc::Global::alloc_impl(_13, _8, const false) -> [return: bb5, unwind unreachable];\n       }\n   \n       bb1: {\n@@ -41,18 +144,56 @@\n       }\n   \n       bb2: {\n++         _12 = handle_alloc_error(_8) -> unwind unreachable;\n++     }\n++ \n++     bb3: {\n++         unreachable;\n++     }\n++ \n++     bb4: {\n++         _11 = ((_9 as Ok).0: std::ptr::NonNull<[u8]>);\n++         StorageLive(_15);\n++         StorageLive(_16);\n++         StorageLive(_17);\n++         StorageLive(_18);\n++         _18 = (_11.0: *const [u8]);\n++         _17 = move _18 as *mut [u8] (PtrToPtr);\n++         StorageDead(_18);\n++         _16 = _17 as *mut u8 (PtrToPtr);\n++         StorageDead(_17);\n++         StorageLive(_19);\n++         StorageLive(_20);\n++         _19 = _16 as *const u8 (Pointer(MutToConstPointer));\n++         _15 = NonNull::<u8> { pointer: _19 };\n++         StorageDead(_20);\n++         StorageDead(_19);\n++         StorageDead(_16);\n++         StorageLive(_21);\n++         _21 = (_15.0: *const u8);\n++         _6 = move _21 as *mut u8 (PtrToPtr);\n++         StorageDead(_21);\n++         StorageDead(_15);\n++         StorageDead(_9);\n++         StorageDead(_13);\n++         StorageDead(_12);\n++         StorageDead(_11);\n++         StorageDead(_8);\n +         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>);\n +         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>);\n +         (*_7) = move _2;\n           StorageDead(_2);\n           _0 = const ();\n -         drop(_1) -> [return: bb3, unwind unreachable];\n--     }\n-- \n++         drop(_1) -> [return: bb1, unwind unreachable];\n+      }\n+  \n -     bb3: {\n -         StorageDead(_1);\n -         return;\n-+         drop(_1) -> [return: bb1, unwind unreachable];\n++     bb5: {\n++         _10 = discriminant(_9);\n++         switchInt(move _10) -> [0: bb4, 1: bb2, otherwise: bb3];\n       }\n   }\n   "}, {"sha": "4615a3f98267b68d7546aa0d86760df8a2798ac7", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.panic-unwind.diff", "status": "modified", "additions": 152, "deletions": 7, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.panic-unwind.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -18,6 +18,99 @@\n +         let mut _6: *mut u8;\n +         let mut _7: *const std::vec::Vec<u32>;\n +         scope 4 {\n++             scope 5 (inlined alloc::alloc::exchange_malloc) {\n++                 debug size => _4;\n++                 debug align => _5;\n++                 let _8: std::alloc::Layout;\n++                 let mut _9: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;\n++                 let mut _10: isize;\n++                 let mut _12: !;\n++                 scope 6 {\n++                     debug layout => _8;\n++                     let _11: std::ptr::NonNull<[u8]>;\n++                     let mut _13: &std::alloc::Global;\n++                     scope 8 {\n++                         debug ptr => _11;\n++                         scope 18 (inlined NonNull::<[u8]>::as_mut_ptr) {\n++                             debug self => _11;\n++                             let mut _15: std::ptr::NonNull<u8>;\n++                             scope 19 (inlined NonNull::<[u8]>::as_non_null_ptr) {\n++                                 debug self => _11;\n++                                 let mut _16: *mut u8;\n++                                 let mut _17: *mut [u8];\n++                                 scope 20 {\n++                                     scope 21 (inlined NonNull::<[u8]>::as_ptr) {\n++                                         debug self => _11;\n++                                         let mut _18: *const [u8];\n++                                     }\n++                                     scope 22 (inlined ptr::mut_ptr::<impl *mut [u8]>::as_mut_ptr) {\n++                                         debug self => _17;\n++                                     }\n++                                     scope 23 (inlined NonNull::<u8>::new_unchecked) {\n++                                         debug ptr => _16;\n++                                         let mut _19: *const u8;\n++                                         scope 24 {\n++                                             scope 25 (inlined NonNull::<T>::new_unchecked::runtime::<u8>) {\n++                                                 debug ptr => _16;\n++                                                 scope 26 (inlined ptr::mut_ptr::<impl *mut u8>::is_null) {\n++                                                     debug self => _16;\n++                                                     let mut _20: *mut u8;\n++                                                     scope 27 {\n++                                                         scope 28 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) {\n++                                                             debug ptr => _20;\n++                                                             scope 29 (inlined ptr::mut_ptr::<impl *mut u8>::addr) {\n++                                                                 debug self => _20;\n++                                                                 scope 30 {\n++                                                                     scope 31 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) {\n++                                                                         debug self => _20;\n++                                                                     }\n++                                                                 }\n++                                                             }\n++                                                         }\n++                                                     }\n++                                                 }\n++                                             }\n++                                         }\n++                                     }\n++                                 }\n++                             }\n++                             scope 32 (inlined NonNull::<u8>::as_ptr) {\n++                                 debug self => _15;\n++                                 let mut _21: *const u8;\n++                             }\n++                         }\n++                     }\n++                     scope 17 (inlined <std::alloc::Global as Allocator>::allocate) {\n++                         debug self => const _;\n++                         debug layout => _8;\n++                     }\n++                 }\n++                 scope 7 {\n++                     scope 9 (inlined Layout::from_size_align_unchecked) {\n++                         debug size => _4;\n++                         debug align => _5;\n++                         let mut _14: std::ptr::Alignment;\n++                         scope 10 {\n++                             scope 11 (inlined std::ptr::Alignment::new_unchecked) {\n++                                 debug align => _5;\n++                                 scope 12 {\n++                                     scope 14 (inlined std::ptr::Alignment::new_unchecked::runtime) {\n++                                         debug align => _5;\n++                                         scope 15 (inlined core::num::<impl usize>::is_power_of_two) {\n++                                             debug self => _5;\n++                                             scope 16 (inlined core::num::<impl usize>::count_ones) {\n++                                                 debug self => _5;\n++                                             }\n++                                         }\n++                                     }\n++                                 }\n++                                 scope 13 {\n++                                 }\n++                             }\n++                         }\n++                     }\n++                 }\n++             }\n +         }\n +     }\n   \n@@ -31,7 +124,17 @@\n +         StorageDead(_3);\n +         _4 = SizeOf(std::vec::Vec<u32>);\n +         _5 = AlignOf(std::vec::Vec<u32>);\n-+         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb3, unwind: bb4];\n++         StorageLive(_8);\n++         StorageLive(_11);\n++         StorageLive(_12);\n++         StorageLive(_13);\n++         StorageLive(_14);\n++         _14 = _5 as std::ptr::Alignment (Transmute);\n++         _8 = Layout { size: _4, align: move _14 };\n++         StorageDead(_14);\n++         StorageLive(_9);\n++         _13 = const _;\n++         _9 = std::alloc::Global::alloc_impl(_13, _8, const false) -> [return: bb7, unwind: bb3];\n       }\n   \n       bb1: {\n@@ -48,20 +151,62 @@\n +         resume;\n       }\n   \n-      bb3: {\n+-     bb3: {\n -         StorageDead(_1);\n -         return;\n++     bb3 (cleanup): {\n++         drop(_2) -> [return: bb2, unwind terminate];\n+      }\n+  \n+-     bb4 (cleanup): {\n+-         resume;\n++     bb4: {\n++         _12 = handle_alloc_error(_8) -> bb3;\n++     }\n++ \n++     bb5: {\n++         unreachable;\n++     }\n++ \n++     bb6: {\n++         _11 = ((_9 as Ok).0: std::ptr::NonNull<[u8]>);\n++         StorageLive(_15);\n++         StorageLive(_16);\n++         StorageLive(_17);\n++         StorageLive(_18);\n++         _18 = (_11.0: *const [u8]);\n++         _17 = move _18 as *mut [u8] (PtrToPtr);\n++         StorageDead(_18);\n++         _16 = _17 as *mut u8 (PtrToPtr);\n++         StorageDead(_17);\n++         StorageLive(_19);\n++         StorageLive(_20);\n++         _19 = _16 as *const u8 (Pointer(MutToConstPointer));\n++         _15 = NonNull::<u8> { pointer: _19 };\n++         StorageDead(_20);\n++         StorageDead(_19);\n++         StorageDead(_16);\n++         StorageLive(_21);\n++         _21 = (_15.0: *const u8);\n++         _6 = move _21 as *mut u8 (PtrToPtr);\n++         StorageDead(_21);\n++         StorageDead(_15);\n++         StorageDead(_9);\n++         StorageDead(_13);\n++         StorageDead(_12);\n++         StorageDead(_11);\n++         StorageDead(_8);\n +         _1 = ShallowInitBox(move _6, std::vec::Vec<u32>);\n +         _7 = (((_1.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>);\n +         (*_7) = move _2;\n +         StorageDead(_2);\n +         _0 = const ();\n +         drop(_1) -> [return: bb1, unwind: bb2];\n-      }\n-  \n-      bb4 (cleanup): {\n--         resume;\n-+         drop(_2) -> [return: bb2, unwind terminate];\n++     }\n++ \n++     bb7: {\n++         _10 = discriminant(_9);\n++         switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5];\n       }\n   }\n   "}, {"sha": "56f174e515b312cbec3a58dfb44f94470d45c57b", "filename": "tests/mir-opt/inline/inline_into_box_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -1,7 +1,7 @@\n // ignore-endian-big\n // EMIT_MIR_FOR_EACH_PANIC_STRATEGY\n // ignore-debug MIR alignment checks in std alter the diff, breaking the test\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Zmir-opt-level=4 -Zinline-mir-hint-threshold=200\n \n // EMIT_MIR inline_into_box_place.main.Inline.diff\n fn main() {"}, {"sha": "093925b8e4fa107b903f158680900201bc29a7e4", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-abort.diff", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-abort.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -7,129 +7,19 @@\n       let mut _0: u16;\n       let mut _3: u16;\n       let mut _4: u32;\n-+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) {\n-+         debug self => _3;\n-+         debug rhs => _4;\n-+         let mut _5: u16;\n-+         scope 2 {\n-+             scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) {\n-+                 debug x => _4;\n-+                 let mut _6: std::option::Option<u16>;\n-+                 let mut _7: std::result::Result<u16, std::num::TryFromIntError>;\n-+                 scope 4 {\n-+                     scope 5 (inlined <u32 as TryInto<u16>>::try_into) {\n-+                         debug self => _4;\n-+                         scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) {\n-+                             debug u => _4;\n-+                             let mut _8: bool;\n-+                             let mut _9: u32;\n-+                             let mut _10: u16;\n-+                         }\n-+                     }\n-+                     scope 7 (inlined Result::<u16, TryFromIntError>::ok) {\n-+                         debug self => _7;\n-+                         let mut _11: isize;\n-+                         let _12: u16;\n-+                         scope 8 {\n-+                             debug x => _12;\n-+                         }\n-+                     }\n-+                     scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) {\n-+                         debug self => _6;\n-+                         let mut _13: &std::option::Option<u16>;\n-+                         let mut _14: isize;\n-+                         scope 10 {\n-+                             debug val => _5;\n-+                         }\n-+                         scope 11 {\n-+                             scope 13 (inlined unreachable_unchecked) {\n-+                                 scope 14 {\n-+                                     scope 15 (inlined unreachable_unchecked::runtime) {\n-+                                     }\n-+                                 }\n-+                             }\n-+                         }\n-+                         scope 12 (inlined Option::<u16>::is_some) {\n-+                             debug self => _13;\n-+                         }\n-+                     }\n-+                 }\n-+             }\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_3);\n           _3 = _1;\n           StorageLive(_4);\n           _4 = _2;\n--         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> [return: bb1, unwind unreachable];\n-+         StorageLive(_5);\n-+         StorageLive(_6);\n-+         StorageLive(_7);\n-+         StorageLive(_8);\n-+         StorageLive(_9);\n-+         _9 = const 65535_u32;\n-+         _8 = Gt(_4, move _9);\n-+         StorageDead(_9);\n-+         switchInt(move _8) -> [0: bb3, otherwise: bb2];\n+          _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-+         StorageDead(_5);\n           StorageDead(_4);\n           StorageDead(_3);\n           return;\n-+     }\n-+ \n-+     bb2: {\n-+         _7 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(()));\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb3: {\n-+         StorageLive(_10);\n-+         _10 = _4 as u16 (IntToInt);\n-+         _7 = Result::<u16, TryFromIntError>::Ok(move _10);\n-+         StorageDead(_10);\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb4: {\n-+         StorageDead(_8);\n-+         StorageLive(_12);\n-+         _11 = discriminant(_7);\n-+         switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];\n-+     }\n-+ \n-+     bb5: {\n-+         _6 = Option::<u16>::None;\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb6: {\n-+         unreachable;\n-+     }\n-+ \n-+     bb7: {\n-+         _12 = move ((_7 as Ok).0: u16);\n-+         _6 = Option::<u16>::Some(move _12);\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb8: {\n-+         StorageDead(_12);\n-+         StorageDead(_7);\n-+         StorageLive(_13);\n-+         _14 = discriminant(_6);\n-+         switchInt(move _14) -> [1: bb9, otherwise: bb6];\n-+     }\n-+ \n-+     bb9: {\n-+         _5 = move ((_6 as Some).0: u16);\n-+         StorageDead(_13);\n-+         StorageDead(_6);\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb1, unwind unreachable];\n       }\n   }\n   "}, {"sha": "50934e0439a3b180adf7dbdc0e1fe5f85676a580", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-unwind.diff", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.panic-unwind.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -7,129 +7,19 @@\n       let mut _0: u16;\n       let mut _3: u16;\n       let mut _4: u32;\n-+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) {\n-+         debug self => _3;\n-+         debug rhs => _4;\n-+         let mut _5: u16;\n-+         scope 2 {\n-+             scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) {\n-+                 debug x => _4;\n-+                 let mut _6: std::option::Option<u16>;\n-+                 let mut _7: std::result::Result<u16, std::num::TryFromIntError>;\n-+                 scope 4 {\n-+                     scope 5 (inlined <u32 as TryInto<u16>>::try_into) {\n-+                         debug self => _4;\n-+                         scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) {\n-+                             debug u => _4;\n-+                             let mut _8: bool;\n-+                             let mut _9: u32;\n-+                             let mut _10: u16;\n-+                         }\n-+                     }\n-+                     scope 7 (inlined Result::<u16, TryFromIntError>::ok) {\n-+                         debug self => _7;\n-+                         let mut _11: isize;\n-+                         let _12: u16;\n-+                         scope 8 {\n-+                             debug x => _12;\n-+                         }\n-+                     }\n-+                     scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) {\n-+                         debug self => _6;\n-+                         let mut _13: &std::option::Option<u16>;\n-+                         let mut _14: isize;\n-+                         scope 10 {\n-+                             debug val => _5;\n-+                         }\n-+                         scope 11 {\n-+                             scope 13 (inlined unreachable_unchecked) {\n-+                                 scope 14 {\n-+                                     scope 15 (inlined unreachable_unchecked::runtime) {\n-+                                     }\n-+                                 }\n-+                             }\n-+                         }\n-+                         scope 12 (inlined Option::<u16>::is_some) {\n-+                             debug self => _13;\n-+                         }\n-+                     }\n-+                 }\n-+             }\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_3);\n           _3 = _1;\n           StorageLive(_4);\n           _4 = _2;\n--         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1;\n-+         StorageLive(_5);\n-+         StorageLive(_6);\n-+         StorageLive(_7);\n-+         StorageLive(_8);\n-+         StorageLive(_9);\n-+         _9 = const 65535_u32;\n-+         _8 = Gt(_4, move _9);\n-+         StorageDead(_9);\n-+         switchInt(move _8) -> [0: bb3, otherwise: bb2];\n+          _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1;\n       }\n   \n       bb1: {\n-+         StorageDead(_5);\n           StorageDead(_4);\n           StorageDead(_3);\n           return;\n-+     }\n-+ \n-+     bb2: {\n-+         _7 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(()));\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb3: {\n-+         StorageLive(_10);\n-+         _10 = _4 as u16 (IntToInt);\n-+         _7 = Result::<u16, TryFromIntError>::Ok(move _10);\n-+         StorageDead(_10);\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb4: {\n-+         StorageDead(_8);\n-+         StorageLive(_12);\n-+         _11 = discriminant(_7);\n-+         switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];\n-+     }\n-+ \n-+     bb5: {\n-+         _6 = Option::<u16>::None;\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb6: {\n-+         unreachable;\n-+     }\n-+ \n-+     bb7: {\n-+         _12 = move ((_7 as Ok).0: u16);\n-+         _6 = Option::<u16>::Some(move _12);\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb8: {\n-+         StorageDead(_12);\n-+         StorageDead(_7);\n-+         StorageLive(_13);\n-+         _14 = discriminant(_6);\n-+         switchInt(move _14) -> [1: bb9, otherwise: bb6];\n-+     }\n-+ \n-+     bb9: {\n-+         _5 = move ((_6 as Some).0: u16);\n-+         StorageDead(_13);\n-+         StorageDead(_6);\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb1, unwind unreachable];\n       }\n   }\n   "}, {"sha": "46f3511b14ca9ddcc9b1611399e15e6fe80ea7ee", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-abort.mir", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-abort.mir?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,121 +4,12 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     debug a => _1;\n     debug b => _2;\n     let mut _0: u16;\n-    scope 1 (inlined core::num::<impl u16>::unchecked_shl) {\n-        debug self => _1;\n-        debug rhs => _2;\n-        let mut _11: u16;\n-        scope 2 {\n-            scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) {\n-                debug x => _2;\n-                let mut _6: std::result::Result<u16, std::num::TryFromIntError>;\n-                let mut _9: std::option::Option<u16>;\n-                scope 4 {\n-                    scope 5 (inlined <u32 as TryInto<u16>>::try_into) {\n-                        debug self => _2;\n-                        scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) {\n-                            debug u => _2;\n-                            let mut _3: u32;\n-                            let mut _4: bool;\n-                            let mut _5: u16;\n-                        }\n-                    }\n-                    scope 7 (inlined Result::<u16, TryFromIntError>::ok) {\n-                        debug self => _6;\n-                        let mut _7: isize;\n-                        let _8: u16;\n-                        scope 8 {\n-                            debug x => _8;\n-                        }\n-                    }\n-                    scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) {\n-                        debug self => _9;\n-                        let mut _10: isize;\n-                        let mut _12: &std::option::Option<u16>;\n-                        scope 10 {\n-                            debug val => _11;\n-                        }\n-                        scope 11 {\n-                            scope 13 (inlined unreachable_unchecked) {\n-                                scope 14 {\n-                                    scope 15 (inlined unreachable_unchecked::runtime) {\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        scope 12 (inlined Option::<u16>::is_some) {\n-                            debug self => _12;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n \n     bb0: {\n-        StorageLive(_11);\n-        StorageLive(_9);\n-        StorageLive(_6);\n-        StorageLive(_4);\n-        StorageLive(_3);\n-        _3 = const 65535_u32;\n-        _4 = Gt(_2, move _3);\n-        StorageDead(_3);\n-        switchInt(move _4) -> [0: bb1, otherwise: bb2];\n+        _0 = core::num::<impl u16>::unchecked_shl(_1, _2) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageLive(_5);\n-        _5 = _2 as u16 (IntToInt);\n-        _6 = Result::<u16, TryFromIntError>::Ok(move _5);\n-        StorageDead(_5);\n-        goto -> bb3;\n-    }\n-\n-    bb2: {\n-        _6 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(()));\n-        goto -> bb3;\n-    }\n-\n-    bb3: {\n-        StorageDead(_4);\n-        StorageLive(_8);\n-        _7 = discriminant(_6);\n-        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb9];\n-    }\n-\n-    bb4: {\n-        _8 = move ((_6 as Ok).0: u16);\n-        _9 = Option::<u16>::Some(move _8);\n-        goto -> bb6;\n-    }\n-\n-    bb5: {\n-        _9 = Option::<u16>::None;\n-        goto -> bb6;\n-    }\n-\n-    bb6: {\n-        StorageDead(_8);\n-        StorageDead(_6);\n-        StorageLive(_12);\n-        _10 = discriminant(_9);\n-        switchInt(move _10) -> [1: bb7, otherwise: bb9];\n-    }\n-\n-    bb7: {\n-        _11 = move ((_9 as Some).0: u16);\n-        StorageDead(_12);\n-        StorageDead(_9);\n-        _0 = unchecked_shl::<u16>(_1, move _11) -> [return: bb8, unwind unreachable];\n-    }\n-\n-    bb8: {\n-        StorageDead(_11);\n         return;\n     }\n-\n-    bb9: {\n-        unreachable;\n-    }\n }"}, {"sha": "35fee449c35c8dd81eac59ac71499420356e8c56", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-unwind.mir", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.panic-unwind.mir?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,121 +4,12 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     debug a => _1;\n     debug b => _2;\n     let mut _0: u16;\n-    scope 1 (inlined core::num::<impl u16>::unchecked_shl) {\n-        debug self => _1;\n-        debug rhs => _2;\n-        let mut _11: u16;\n-        scope 2 {\n-            scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) {\n-                debug x => _2;\n-                let mut _6: std::result::Result<u16, std::num::TryFromIntError>;\n-                let mut _9: std::option::Option<u16>;\n-                scope 4 {\n-                    scope 5 (inlined <u32 as TryInto<u16>>::try_into) {\n-                        debug self => _2;\n-                        scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) {\n-                            debug u => _2;\n-                            let mut _3: u32;\n-                            let mut _4: bool;\n-                            let mut _5: u16;\n-                        }\n-                    }\n-                    scope 7 (inlined Result::<u16, TryFromIntError>::ok) {\n-                        debug self => _6;\n-                        let mut _7: isize;\n-                        let _8: u16;\n-                        scope 8 {\n-                            debug x => _8;\n-                        }\n-                    }\n-                    scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) {\n-                        debug self => _9;\n-                        let mut _10: isize;\n-                        let mut _12: &std::option::Option<u16>;\n-                        scope 10 {\n-                            debug val => _11;\n-                        }\n-                        scope 11 {\n-                            scope 13 (inlined unreachable_unchecked) {\n-                                scope 14 {\n-                                    scope 15 (inlined unreachable_unchecked::runtime) {\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        scope 12 (inlined Option::<u16>::is_some) {\n-                            debug self => _12;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n \n     bb0: {\n-        StorageLive(_11);\n-        StorageLive(_9);\n-        StorageLive(_6);\n-        StorageLive(_4);\n-        StorageLive(_3);\n-        _3 = const 65535_u32;\n-        _4 = Gt(_2, move _3);\n-        StorageDead(_3);\n-        switchInt(move _4) -> [0: bb1, otherwise: bb2];\n+        _0 = core::num::<impl u16>::unchecked_shl(_1, _2) -> bb1;\n     }\n \n     bb1: {\n-        StorageLive(_5);\n-        _5 = _2 as u16 (IntToInt);\n-        _6 = Result::<u16, TryFromIntError>::Ok(move _5);\n-        StorageDead(_5);\n-        goto -> bb3;\n-    }\n-\n-    bb2: {\n-        _6 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(()));\n-        goto -> bb3;\n-    }\n-\n-    bb3: {\n-        StorageDead(_4);\n-        StorageLive(_8);\n-        _7 = discriminant(_6);\n-        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb9];\n-    }\n-\n-    bb4: {\n-        _8 = move ((_6 as Ok).0: u16);\n-        _9 = Option::<u16>::Some(move _8);\n-        goto -> bb6;\n-    }\n-\n-    bb5: {\n-        _9 = Option::<u16>::None;\n-        goto -> bb6;\n-    }\n-\n-    bb6: {\n-        StorageDead(_8);\n-        StorageDead(_6);\n-        StorageLive(_12);\n-        _10 = discriminant(_9);\n-        switchInt(move _10) -> [1: bb7, otherwise: bb9];\n-    }\n-\n-    bb7: {\n-        _11 = move ((_9 as Some).0: u16);\n-        StorageDead(_12);\n-        StorageDead(_9);\n-        _0 = unchecked_shl::<u16>(_1, move _11) -> [return: bb8, unwind unreachable];\n-    }\n-\n-    bb8: {\n-        StorageDead(_11);\n         return;\n     }\n-\n-    bb9: {\n-        unreachable;\n-    }\n }"}, {"sha": "1659a51b090d23670110fa88e084126dc17ea3af", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-abort.diff", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-abort.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-abort.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-abort.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -7,129 +7,19 @@\n       let mut _0: i16;\n       let mut _3: i16;\n       let mut _4: u32;\n-+     scope 1 (inlined core::num::<impl i16>::unchecked_shr) {\n-+         debug self => _3;\n-+         debug rhs => _4;\n-+         let mut _5: i16;\n-+         scope 2 {\n-+             scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) {\n-+                 debug x => _4;\n-+                 let mut _6: std::option::Option<i16>;\n-+                 let mut _7: std::result::Result<i16, std::num::TryFromIntError>;\n-+                 scope 4 {\n-+                     scope 5 (inlined <u32 as TryInto<i16>>::try_into) {\n-+                         debug self => _4;\n-+                         scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) {\n-+                             debug u => _4;\n-+                             let mut _8: bool;\n-+                             let mut _9: u32;\n-+                             let mut _10: i16;\n-+                         }\n-+                     }\n-+                     scope 7 (inlined Result::<i16, TryFromIntError>::ok) {\n-+                         debug self => _7;\n-+                         let mut _11: isize;\n-+                         let _12: i16;\n-+                         scope 8 {\n-+                             debug x => _12;\n-+                         }\n-+                     }\n-+                     scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) {\n-+                         debug self => _6;\n-+                         let mut _13: &std::option::Option<i16>;\n-+                         let mut _14: isize;\n-+                         scope 10 {\n-+                             debug val => _5;\n-+                         }\n-+                         scope 11 {\n-+                             scope 13 (inlined unreachable_unchecked) {\n-+                                 scope 14 {\n-+                                     scope 15 (inlined unreachable_unchecked::runtime) {\n-+                                     }\n-+                                 }\n-+                             }\n-+                         }\n-+                         scope 12 (inlined Option::<i16>::is_some) {\n-+                             debug self => _13;\n-+                         }\n-+                     }\n-+                 }\n-+             }\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_3);\n           _3 = _1;\n           StorageLive(_4);\n           _4 = _2;\n--         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> [return: bb1, unwind unreachable];\n-+         StorageLive(_5);\n-+         StorageLive(_6);\n-+         StorageLive(_7);\n-+         StorageLive(_8);\n-+         StorageLive(_9);\n-+         _9 = const 32767_u32;\n-+         _8 = Gt(_4, move _9);\n-+         StorageDead(_9);\n-+         switchInt(move _8) -> [0: bb3, otherwise: bb2];\n+          _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> [return: bb1, unwind unreachable];\n       }\n   \n       bb1: {\n-+         StorageDead(_5);\n           StorageDead(_4);\n           StorageDead(_3);\n           return;\n-+     }\n-+ \n-+     bb2: {\n-+         _7 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(()));\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb3: {\n-+         StorageLive(_10);\n-+         _10 = _4 as i16 (IntToInt);\n-+         _7 = Result::<i16, TryFromIntError>::Ok(move _10);\n-+         StorageDead(_10);\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb4: {\n-+         StorageDead(_8);\n-+         StorageLive(_12);\n-+         _11 = discriminant(_7);\n-+         switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];\n-+     }\n-+ \n-+     bb5: {\n-+         _6 = Option::<i16>::None;\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb6: {\n-+         unreachable;\n-+     }\n-+ \n-+     bb7: {\n-+         _12 = move ((_7 as Ok).0: i16);\n-+         _6 = Option::<i16>::Some(move _12);\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb8: {\n-+         StorageDead(_12);\n-+         StorageDead(_7);\n-+         StorageLive(_13);\n-+         _14 = discriminant(_6);\n-+         switchInt(move _14) -> [1: bb9, otherwise: bb6];\n-+     }\n-+ \n-+     bb9: {\n-+         _5 = move ((_6 as Some).0: i16);\n-+         StorageDead(_13);\n-+         StorageDead(_6);\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb1, unwind unreachable];\n       }\n   }\n   "}, {"sha": "cb5ec37feb3606852a4d6e27efcdaf196478155b", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-unwind.diff", "status": "modified", "additions": 1, "deletions": 111, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-unwind.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-unwind.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.panic-unwind.diff?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -7,129 +7,19 @@\n       let mut _0: i16;\n       let mut _3: i16;\n       let mut _4: u32;\n-+     scope 1 (inlined core::num::<impl i16>::unchecked_shr) {\n-+         debug self => _3;\n-+         debug rhs => _4;\n-+         let mut _5: i16;\n-+         scope 2 {\n-+             scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) {\n-+                 debug x => _4;\n-+                 let mut _6: std::option::Option<i16>;\n-+                 let mut _7: std::result::Result<i16, std::num::TryFromIntError>;\n-+                 scope 4 {\n-+                     scope 5 (inlined <u32 as TryInto<i16>>::try_into) {\n-+                         debug self => _4;\n-+                         scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) {\n-+                             debug u => _4;\n-+                             let mut _8: bool;\n-+                             let mut _9: u32;\n-+                             let mut _10: i16;\n-+                         }\n-+                     }\n-+                     scope 7 (inlined Result::<i16, TryFromIntError>::ok) {\n-+                         debug self => _7;\n-+                         let mut _11: isize;\n-+                         let _12: i16;\n-+                         scope 8 {\n-+                             debug x => _12;\n-+                         }\n-+                     }\n-+                     scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) {\n-+                         debug self => _6;\n-+                         let mut _13: &std::option::Option<i16>;\n-+                         let mut _14: isize;\n-+                         scope 10 {\n-+                             debug val => _5;\n-+                         }\n-+                         scope 11 {\n-+                             scope 13 (inlined unreachable_unchecked) {\n-+                                 scope 14 {\n-+                                     scope 15 (inlined unreachable_unchecked::runtime) {\n-+                                     }\n-+                                 }\n-+                             }\n-+                         }\n-+                         scope 12 (inlined Option::<i16>::is_some) {\n-+                             debug self => _13;\n-+                         }\n-+                     }\n-+                 }\n-+             }\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_3);\n           _3 = _1;\n           StorageLive(_4);\n           _4 = _2;\n--         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1;\n-+         StorageLive(_5);\n-+         StorageLive(_6);\n-+         StorageLive(_7);\n-+         StorageLive(_8);\n-+         StorageLive(_9);\n-+         _9 = const 32767_u32;\n-+         _8 = Gt(_4, move _9);\n-+         StorageDead(_9);\n-+         switchInt(move _8) -> [0: bb3, otherwise: bb2];\n+          _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1;\n       }\n   \n       bb1: {\n-+         StorageDead(_5);\n           StorageDead(_4);\n           StorageDead(_3);\n           return;\n-+     }\n-+ \n-+     bb2: {\n-+         _7 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(()));\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb3: {\n-+         StorageLive(_10);\n-+         _10 = _4 as i16 (IntToInt);\n-+         _7 = Result::<i16, TryFromIntError>::Ok(move _10);\n-+         StorageDead(_10);\n-+         goto -> bb4;\n-+     }\n-+ \n-+     bb4: {\n-+         StorageDead(_8);\n-+         StorageLive(_12);\n-+         _11 = discriminant(_7);\n-+         switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];\n-+     }\n-+ \n-+     bb5: {\n-+         _6 = Option::<i16>::None;\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb6: {\n-+         unreachable;\n-+     }\n-+ \n-+     bb7: {\n-+         _12 = move ((_7 as Ok).0: i16);\n-+         _6 = Option::<i16>::Some(move _12);\n-+         goto -> bb8;\n-+     }\n-+ \n-+     bb8: {\n-+         StorageDead(_12);\n-+         StorageDead(_7);\n-+         StorageLive(_13);\n-+         _14 = discriminant(_6);\n-+         switchInt(move _14) -> [1: bb9, otherwise: bb6];\n-+     }\n-+ \n-+     bb9: {\n-+         _5 = move ((_6 as Some).0: i16);\n-+         StorageDead(_13);\n-+         StorageDead(_6);\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb1, unwind unreachable];\n       }\n   }\n   "}, {"sha": "9f2f40002a32d99fa48e86323b9e21f385652e1d", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-abort.mir", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-abort.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-abort.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-abort.mir?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,121 +4,12 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     debug a => _1;\n     debug b => _2;\n     let mut _0: i16;\n-    scope 1 (inlined core::num::<impl i16>::unchecked_shr) {\n-        debug self => _1;\n-        debug rhs => _2;\n-        let mut _11: i16;\n-        scope 2 {\n-            scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) {\n-                debug x => _2;\n-                let mut _6: std::result::Result<i16, std::num::TryFromIntError>;\n-                let mut _9: std::option::Option<i16>;\n-                scope 4 {\n-                    scope 5 (inlined <u32 as TryInto<i16>>::try_into) {\n-                        debug self => _2;\n-                        scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) {\n-                            debug u => _2;\n-                            let mut _3: u32;\n-                            let mut _4: bool;\n-                            let mut _5: i16;\n-                        }\n-                    }\n-                    scope 7 (inlined Result::<i16, TryFromIntError>::ok) {\n-                        debug self => _6;\n-                        let mut _7: isize;\n-                        let _8: i16;\n-                        scope 8 {\n-                            debug x => _8;\n-                        }\n-                    }\n-                    scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) {\n-                        debug self => _9;\n-                        let mut _10: isize;\n-                        let mut _12: &std::option::Option<i16>;\n-                        scope 10 {\n-                            debug val => _11;\n-                        }\n-                        scope 11 {\n-                            scope 13 (inlined unreachable_unchecked) {\n-                                scope 14 {\n-                                    scope 15 (inlined unreachable_unchecked::runtime) {\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        scope 12 (inlined Option::<i16>::is_some) {\n-                            debug self => _12;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n \n     bb0: {\n-        StorageLive(_11);\n-        StorageLive(_9);\n-        StorageLive(_6);\n-        StorageLive(_4);\n-        StorageLive(_3);\n-        _3 = const 32767_u32;\n-        _4 = Gt(_2, move _3);\n-        StorageDead(_3);\n-        switchInt(move _4) -> [0: bb1, otherwise: bb2];\n+        _0 = core::num::<impl i16>::unchecked_shr(_1, _2) -> [return: bb1, unwind unreachable];\n     }\n \n     bb1: {\n-        StorageLive(_5);\n-        _5 = _2 as i16 (IntToInt);\n-        _6 = Result::<i16, TryFromIntError>::Ok(move _5);\n-        StorageDead(_5);\n-        goto -> bb3;\n-    }\n-\n-    bb2: {\n-        _6 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(()));\n-        goto -> bb3;\n-    }\n-\n-    bb3: {\n-        StorageDead(_4);\n-        StorageLive(_8);\n-        _7 = discriminant(_6);\n-        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb9];\n-    }\n-\n-    bb4: {\n-        _8 = move ((_6 as Ok).0: i16);\n-        _9 = Option::<i16>::Some(move _8);\n-        goto -> bb6;\n-    }\n-\n-    bb5: {\n-        _9 = Option::<i16>::None;\n-        goto -> bb6;\n-    }\n-\n-    bb6: {\n-        StorageDead(_8);\n-        StorageDead(_6);\n-        StorageLive(_12);\n-        _10 = discriminant(_9);\n-        switchInt(move _10) -> [1: bb7, otherwise: bb9];\n-    }\n-\n-    bb7: {\n-        _11 = move ((_9 as Some).0: i16);\n-        StorageDead(_12);\n-        StorageDead(_9);\n-        _0 = unchecked_shr::<i16>(_1, move _11) -> [return: bb8, unwind unreachable];\n-    }\n-\n-    bb8: {\n-        StorageDead(_11);\n         return;\n     }\n-\n-    bb9: {\n-        unreachable;\n-    }\n }"}, {"sha": "aaf3bb62e8a33412f793088e7874efc19b3fa8b8", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-unwind.mir", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-unwind.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c153f3a356b0e7917c91d3a804b93fadffb778b0/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-unwind.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.panic-unwind.mir?ref=c153f3a356b0e7917c91d3a804b93fadffb778b0", "patch": "@@ -4,121 +4,12 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     debug a => _1;\n     debug b => _2;\n     let mut _0: i16;\n-    scope 1 (inlined core::num::<impl i16>::unchecked_shr) {\n-        debug self => _1;\n-        debug rhs => _2;\n-        let mut _11: i16;\n-        scope 2 {\n-            scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) {\n-                debug x => _2;\n-                let mut _6: std::result::Result<i16, std::num::TryFromIntError>;\n-                let mut _9: std::option::Option<i16>;\n-                scope 4 {\n-                    scope 5 (inlined <u32 as TryInto<i16>>::try_into) {\n-                        debug self => _2;\n-                        scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) {\n-                            debug u => _2;\n-                            let mut _3: u32;\n-                            let mut _4: bool;\n-                            let mut _5: i16;\n-                        }\n-                    }\n-                    scope 7 (inlined Result::<i16, TryFromIntError>::ok) {\n-                        debug self => _6;\n-                        let mut _7: isize;\n-                        let _8: i16;\n-                        scope 8 {\n-                            debug x => _8;\n-                        }\n-                    }\n-                    scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) {\n-                        debug self => _9;\n-                        let mut _10: isize;\n-                        let mut _12: &std::option::Option<i16>;\n-                        scope 10 {\n-                            debug val => _11;\n-                        }\n-                        scope 11 {\n-                            scope 13 (inlined unreachable_unchecked) {\n-                                scope 14 {\n-                                    scope 15 (inlined unreachable_unchecked::runtime) {\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        scope 12 (inlined Option::<i16>::is_some) {\n-                            debug self => _12;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n \n     bb0: {\n-        StorageLive(_11);\n-        StorageLive(_9);\n-        StorageLive(_6);\n-        StorageLive(_4);\n-        StorageLive(_3);\n-        _3 = const 32767_u32;\n-        _4 = Gt(_2, move _3);\n-        StorageDead(_3);\n-        switchInt(move _4) -> [0: bb1, otherwise: bb2];\n+        _0 = core::num::<impl i16>::unchecked_shr(_1, _2) -> bb1;\n     }\n \n     bb1: {\n-        StorageLive(_5);\n-        _5 = _2 as i16 (IntToInt);\n-        _6 = Result::<i16, TryFromIntError>::Ok(move _5);\n-        StorageDead(_5);\n-        goto -> bb3;\n-    }\n-\n-    bb2: {\n-        _6 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(()));\n-        goto -> bb3;\n-    }\n-\n-    bb3: {\n-        StorageDead(_4);\n-        StorageLive(_8);\n-        _7 = discriminant(_6);\n-        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb9];\n-    }\n-\n-    bb4: {\n-        _8 = move ((_6 as Ok).0: i16);\n-        _9 = Option::<i16>::Some(move _8);\n-        goto -> bb6;\n-    }\n-\n-    bb5: {\n-        _9 = Option::<i16>::None;\n-        goto -> bb6;\n-    }\n-\n-    bb6: {\n-        StorageDead(_8);\n-        StorageDead(_6);\n-        StorageLive(_12);\n-        _10 = discriminant(_9);\n-        switchInt(move _10) -> [1: bb7, otherwise: bb9];\n-    }\n-\n-    bb7: {\n-        _11 = move ((_9 as Some).0: i16);\n-        StorageDead(_12);\n-        StorageDead(_9);\n-        _0 = unchecked_shr::<i16>(_1, move _11) -> [return: bb8, unwind unreachable];\n-    }\n-\n-    bb8: {\n-        StorageDead(_11);\n         return;\n     }\n-\n-    bb9: {\n-        unreachable;\n-    }\n }"}]}