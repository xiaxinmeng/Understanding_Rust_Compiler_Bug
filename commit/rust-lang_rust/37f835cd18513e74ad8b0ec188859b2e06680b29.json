{"sha": "37f835cd18513e74ad8b0ec188859b2e06680b29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjgzNWNkMTg1MTNlNzRhZDhiMGVjMTg4ODU5YjJlMDY2ODBiMjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-19T04:03:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-19T04:03:23Z"}, "message": "Rollup merge of #60064 - estebank:issue-59980, r=varkor\n\nPoint at try `?` on errors affecting the err match arm of the desugared code\n\nFix #59980.", "tree": {"sha": "8b49d1cbee424d1d99b7454ffbcac468b1f92c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b49d1cbee424d1d99b7454ffbcac468b1f92c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f835cd18513e74ad8b0ec188859b2e06680b29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcuUiLCRBK7hj4Ov3rIwAAdHIIAIJktSaWlLZ82/vCEMSoJYpQ\nr9rPSqG6Oo3YrQg0HvLRow5FOwRrz/v2i4uU4w0OXpo0vKBtmufPW+zBwbNiYMO/\nKzyG8cS8vVW+Gx+xfhlP0W325olMWypjfa+n6HifhwdPBzpiGqdb0Om1smpTivUt\ndPI+EuRaKknjeGvLfnCanu+JCZ5BfuWbRh/khgznHAFOMakqNNZsFD7uXy44kjC+\n8vzspCrGiRTaI2XV6WEH7Noj7JixxD3Quf264loFUt0m+QgACV9X58QoaPtTrDiY\nKYO4A1lXgNka8O/A3SM9u0CFUWFgSW3pBNLBAdX/JRtEyKD36UTO+y7vNhyyJ3c=\n=wh45\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b49d1cbee424d1d99b7454ffbcac468b1f92c00\nparent aa58242b287195283cf30533d5d258456ee20005\nparent 1e99b2ec9dc60dc01a413118051d273ed7688c7e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555646603 +0200\ncommitter GitHub <noreply@github.com> 1555646603 +0200\n\nRollup merge of #60064 - estebank:issue-59980, r=varkor\n\nPoint at try `?` on errors affecting the err match arm of the desugared code\n\nFix #59980.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f835cd18513e74ad8b0ec188859b2e06680b29", "html_url": "https://github.com/rust-lang/rust/commit/37f835cd18513e74ad8b0ec188859b2e06680b29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f835cd18513e74ad8b0ec188859b2e06680b29/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa58242b287195283cf30533d5d258456ee20005", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa58242b287195283cf30533d5d258456ee20005", "html_url": "https://github.com/rust-lang/rust/commit/aa58242b287195283cf30533d5d258456ee20005"}, {"sha": "1e99b2ec9dc60dc01a413118051d273ed7688c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e99b2ec9dc60dc01a413118051d273ed7688c7e", "html_url": "https://github.com/rust-lang/rust/commit/1e99b2ec9dc60dc01a413118051d273ed7688c7e"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "42ad571cf283259d8ea496a4be57254634917b7d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -4685,6 +4685,14 @@ impl<'a> LoweringContext<'a> {\n                         Symbol::intern(\"try_trait\")\n                     ].into()),\n                 );\n+                let try_span = self.sess.source_map().end_point(e.span);\n+                let try_span = self.mark_span_with_reason(\n+                    CompilerDesugaringKind::QuestionMark,\n+                    try_span,\n+                    Some(vec![\n+                        Symbol::intern(\"try_trait\")\n+                    ].into()),\n+                );\n \n                 // `Try::into_result(<expr>)`\n                 let discr = {\n@@ -4729,14 +4737,14 @@ impl<'a> LoweringContext<'a> {\n                 //              return Try::from_error(From::from(err)),`\n                 let err_arm = {\n                     let err_ident = self.str_to_ident(\"err\");\n-                    let (err_local, err_local_nid) = self.pat_ident(e.span, err_ident);\n+                    let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n                     let from_expr = {\n                         let path = &[\"convert\", \"From\", \"from\"];\n                         let from = P(self.expr_std_path(\n-                                e.span, path, None, ThinVec::new()));\n-                        let err_expr = self.expr_ident(e.span, err_ident, err_local_nid);\n+                                try_span, path, None, ThinVec::new()));\n+                        let err_expr = self.expr_ident(try_span, err_ident, err_local_nid);\n \n-                        self.expr_call(e.span, from, hir_vec![err_expr])\n+                        self.expr_call(try_span, from, hir_vec![err_expr])\n                     };\n                     let from_err_expr =\n                         self.wrap_in_try_constructor(\"from_error\", from_expr, unstable_span);\n@@ -4745,7 +4753,7 @@ impl<'a> LoweringContext<'a> {\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n                         let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n                         P(self.expr(\n-                            e.span,\n+                            try_span,\n                             hir::ExprKind::Break(\n                                 hir::Destination {\n                                     label: None,\n@@ -4756,10 +4764,10 @@ impl<'a> LoweringContext<'a> {\n                             thin_attrs,\n                         ))\n                     } else {\n-                        P(self.expr(e.span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n+                        P(self.expr(try_span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n                     };\n \n-                    let err_pat = self.pat_err(e.span, err_local);\n+                    let err_pat = self.pat_err(try_span, err_local);\n                     self.arm(hir_vec![err_pat], ret_expr)\n                 };\n "}, {"sha": "14c81a806c259fbcda9f11d648765aedb3baae51", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -638,6 +638,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n+                        let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n+                            .map(|s| &s == \"?\")\n+                            .unwrap_or(false);\n+                        let is_from = format!(\"{}\", trait_ref).starts_with(\"std::convert::From<\");\n+                        let message = if is_try && is_from {\n+                            Some(format!(\n+                                \"`?` couldn't convert the error to `{}`\",\n+                                trait_ref.self_ty(),\n+                            ))\n+                        } else {\n+                            message\n+                        };\n \n                         let mut err = struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "84cca5b20af472d800fcc13e5c2ce366ec000683", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::convert::From<{integer}>` is not satisfied\n-  --> $DIR/issue-32709.rs:4:5\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/issue-32709.rs:4:11\n    |\n LL |     Err(5)?;\n-   |     ^^^^^^^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n+   |           ^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}, {"sha": "4dfc8e6a2fca497f1dc77ebb8fffd8ec957ce4dd", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -4,7 +4,7 @@\n \n pub fn main() {\n     let res: Result<u32, i32> = try {\n-        Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n+        Err(\"\")?; //~ ERROR `?` couldn't convert the error\n         5\n     };\n "}, {"sha": "7c7366df1dc3ed6b59eac7c13fbf3b20c8ee6f18", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `i32: std::convert::From<&str>` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:7:9\n+error[E0277]: `?` couldn't convert the error to `i32`\n+  --> $DIR/try-block-bad-type.rs:7:16\n    |\n LL |         Err(\"\")?;\n-   |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n+   |                ^ the trait `std::convert::From<&str>` is not implemented for `i32`\n    |\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>"}, {"sha": "5d94cee8e37215406317b5e84a2ae5064b16e9c9", "filename": "src/test/ui/try-on-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.rs?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -4,12 +4,12 @@ fn main() {}\n \n fn foo() -> Result<u32, ()> {\n     let x: Option<u32> = None;\n-    x?; //~ the trait bound\n+    x?; //~ ERROR `?` couldn't convert the error\n     Ok(22)\n }\n \n fn bar() -> u32 {\n     let x: Option<u32> = None;\n-    x?; //~ the `?` operator\n+    x?; //~ ERROR the `?` operator\n     22\n }"}, {"sha": "4465fbe14b75cd39f2f9b3265dd245f4738b9f8a", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37f835cd18513e74ad8b0ec188859b2e06680b29/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=37f835cd18513e74ad8b0ec188859b2e06680b29", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::convert::From<std::option::NoneError>` is not satisfied\n-  --> $DIR/try-on-option.rs:7:5\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/try-on-option.rs:7:6\n    |\n LL |     x?;\n-   |     ^^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}]}