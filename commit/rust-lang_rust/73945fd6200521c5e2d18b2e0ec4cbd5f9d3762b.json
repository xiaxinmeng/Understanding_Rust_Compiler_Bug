{"sha": "73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "node_id": "C_kwDOAAsO6NoAKDczOTQ1ZmQ2MjAwNTIxYzVlMmQxOGIyZTBlYzRjYmQ1ZjlkMzc2MmI", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-14T00:17:09Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-01-14T00:27:12Z"}, "message": "fix bug", "tree": {"sha": "c823b264cfa6367cb9326fca85593d3d6ca7dcb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c823b264cfa6367cb9326fca85593d3d6ca7dcb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "html_url": "https://github.com/rust-lang/rust/commit/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e491ac7ed454d34669151a8b6464cb643c9b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e491ac7ed454d34669151a8b6464cb643c9b41", "html_url": "https://github.com/rust-lang/rust/commit/22e491ac7ed454d34669151a8b6464cb643c9b41"}], "stats": {"total": 97, "additions": 51, "deletions": 46}, "files": [{"sha": "7a348a2c94aedcdf34792214dc5c77cdcd657596", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "patch": "@@ -293,10 +293,6 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn is_const(&self) -> bool {\n-        matches!(self, GenericArg::Const(_))\n-    }\n-\n     pub fn is_synthetic(&self) -> bool {\n         matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::empty())\n     }"}, {"sha": "06f224802041ff1ce89b64a08677fb52c0baef8f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "patch": "@@ -18,6 +18,7 @@ use super::{bad_placeholder, is_suggestable_infer_ty};\n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n /// This should be called using the query `tcx.opt_const_param_of`.\n+#[instrument(level = \"debug\", skip(tcx))]\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n     // FIXME(generic_arg_infer): allow for returning DefIds of inference of\n     // GenericArg::Infer below. This may require a change where GenericArg::Infer has some flag\n@@ -29,7 +30,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node_id = tcx.hir().get_parent_node(hir_id);\n         let parent_node = tcx.hir().get(parent_node_id);\n \n-        match parent_node {\n+        let (generics, arg_idx) = match parent_node {\n             // This match arm is for when the def_id appears in a GAT whose\n             // path can't be resolved without typechecking e.g.\n             //\n@@ -75,27 +76,22 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         .and_then(|args| {\n                             args.args\n                                 .iter()\n-                                .filter(|arg| arg.is_const())\n+                                .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n                                 .position(|arg| arg.id() == hir_id)\n                         })\n                         .unwrap_or_else(|| {\n                             bug!(\"no arg matching AnonConst in segment\");\n                         });\n \n-                    return generics\n-                        .params\n-                        .iter()\n-                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                        .nth(arg_index)\n-                        .map(|param| param.def_id);\n+                    (generics, arg_index)\n+                } else {\n+                    // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n+                    tcx.sess.delay_span_bug(\n+                        tcx.def_span(def_id),\n+                        \"unexpected non-GAT usage of an anon const\",\n+                    );\n+                    return None;\n                 }\n-\n-                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n-                tcx.sess.delay_span_bug(\n-                    tcx.def_span(def_id),\n-                    \"unexpected non-GAT usage of an anon const\",\n-                );\n-                return None;\n             }\n             Node::Expr(&Expr {\n                 kind:\n@@ -113,19 +109,14 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     .and_then(|args| {\n                         args.args\n                             .iter()\n-                            .filter(|arg| arg.is_const())\n+                            .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n                             .position(|arg| arg.id() == hir_id)\n                     })\n                     .unwrap_or_else(|| {\n                         bug!(\"no arg matching AnonConst in segment\");\n                     });\n \n-                tcx.generics_of(type_dependent_def)\n-                    .params\n-                    .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                    .nth(idx)\n-                    .map(|param| param.def_id)\n+                (tcx.generics_of(type_dependent_def), idx)\n             }\n \n             Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n@@ -178,7 +169,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n                     .find_map(|(args, seg)| {\n                         args.iter()\n-                            .filter(|arg| arg.is_const())\n+                            .filter(|arg| !matches!(arg, GenericArg::Lifetime(_)))\n                             .position(|arg| arg.id() == hir_id)\n                             .map(|index| (index, seg))\n                     });\n@@ -238,15 +229,29 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     }\n                 };\n \n-                generics\n-                    .params\n-                    .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                    .nth(arg_index)\n-                    .map(|param| param.def_id)\n+                (generics, arg_index)\n             }\n-            _ => None,\n-        }\n+            _ => return None,\n+        };\n+\n+        debug!(?parent_node);\n+        debug!(?generics);\n+        debug!(?arg_idx);\n+        generics\n+            .params\n+            .iter()\n+            .filter(|param| !matches!(param.kind, ty::GenericParamDefKind::Lifetime { .. }))\n+            .nth(match generics.has_self && generics.parent.is_none() {\n+                true => arg_idx + 1,\n+                false => arg_idx,\n+            })\n+            .and_then(|param| match param.kind {\n+                ty::GenericParamDefKind::Const { .. } => {\n+                    debug!(?param);\n+                    Some(param.def_id)\n+                }\n+                _ => None,\n+            })\n     } else {\n         None\n     }"}, {"sha": "23c8d7537521819e2c50dea7dbc66ae8a8dcba01", "filename": "src/test/ui/const-generics/generic_arg_infer/infer_arg_and_const_arg.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs?ref=73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![feature(generic_arg_infer)]\n+\n+struct Foo<const N: bool, const M: u8>;\n+struct Bar<const N: u8, const M: u32>;\n+\n+fn main() {\n+    let _: Foo<true, _> = Foo::<_, 1>;\n+    let _: Foo<_, 1> = Foo::<true, _>;\n+    let _: Bar<1, _> = Bar::<_, 300>;\n+    let _: Bar<_, 300> = Bar::<1, _>;\n+}"}, {"sha": "3a2b291d7ba1f127fd71bdbb95c4c8d3ed2c9a6c", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "patch": "@@ -4,13 +4,6 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-62878.rs:10:15\n-   |\n-LL |     foo::<_, {[1]}>();\n-   |               ^^^ expected `usize`, found array `[{integer}; 1]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0770.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "578ce765b2fb82048309f1be5ef325f467ed28c2", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=73945fd6200521c5e2d18b2e0ec4cbd5f9d3762b", "patch": "@@ -7,6 +7,5 @@ fn foo<const N: usize, const A: [u8; N]>() {}\n //[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {\n-    foo::<_, {[1]}>();\n-    //[full]~^ ERROR mismatched types\n+    foo::<_, { [1] }>();\n }"}]}