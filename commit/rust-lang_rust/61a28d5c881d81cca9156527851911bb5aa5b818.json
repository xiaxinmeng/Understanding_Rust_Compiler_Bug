{"sha": "61a28d5c881d81cca9156527851911bb5aa5b818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTI4ZDVjODgxZDgxY2NhOTE1NjUyNzg1MTkxMWJiNWFhNWI4MTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T13:04:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-09-16T13:04:33Z"}, "message": "do the variant idx computations on the host (non-overflowing)", "tree": {"sha": "db731e08df604d2521a8b447e8d5c58be05d9c20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db731e08df604d2521a8b447e8d5c58be05d9c20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a28d5c881d81cca9156527851911bb5aa5b818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a28d5c881d81cca9156527851911bb5aa5b818", "html_url": "https://github.com/rust-lang/rust/commit/61a28d5c881d81cca9156527851911bb5aa5b818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a28d5c881d81cca9156527851911bb5aa5b818/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75fe84f4fc764e0684e7fdafbe6139cc92082a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fe84f4fc764e0684e7fdafbe6139cc92082a44", "html_url": "https://github.com/rust-lang/rust/commit/75fe84f4fc764e0684e7fdafbe6139cc92082a44"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "9e7ae32f1eacfb5e132d0f92b46340ca1af14c98", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61a28d5c881d81cca9156527851911bb5aa5b818/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a28d5c881d81cca9156527851911bb5aa5b818/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=61a28d5c881d81cca9156527851911bb5aa5b818", "patch": "@@ -687,24 +687,22 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },\n                     Ok(raw_discr) => {\n+                        // We need to use machine arithmetic to get the relative variant idx.\n                         let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                         let discr_val = ImmTy::from_uint(raw_discr, discr_layout);\n-                        // We need to use machine arithmetic.\n                         let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n-                        let variants_start_val = ImmTy::from_uint(variants_start, discr_layout);\n                         let variant_index_relative_val = self.binary_op(\n                             mir::BinOp::Sub,\n                             discr_val,\n                             niche_start_val,\n                         )?;\n-                        let variant_index_val = self.binary_op(\n-                            mir::BinOp::Add,\n-                            variant_index_relative_val,\n-                            variants_start_val,\n-                        )?;\n-                        let variant_index = variant_index_val\n+                        let variant_index_relative = variant_index_relative_val\n                             .to_scalar()?\n                             .assert_bits(discr_val.layout.size);\n+                        // Then computing the absolute variant idx should not overflow any more.\n+                        let variant_index = variants_start\n+                            .checked_add(variant_index_relative)\n+                            .expect(\"oveflow computing absolute variant idx\");\n                         // Check if this is in the range that indicates an actual discriminant.\n                         if variants_start <= variant_index && variant_index <= variants_end {\n                             let index = variant_index as usize;"}, {"sha": "5f4903d61e3b2332ce68c560e76632ee0d470bae", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61a28d5c881d81cca9156527851911bb5aa5b818/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a28d5c881d81cca9156527851911bb5aa5b818/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=61a28d5c881d81cca9156527851911bb5aa5b818", "patch": "@@ -1060,17 +1060,15 @@ where\n                     variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len(),\n                 );\n                 if variant_index != dataful_variant {\n-                    let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n-                    // We need to use machine arithmetic.\n                     let variants_start = niche_variants.start().as_u32();\n-                    let variants_start_val = ImmTy::from_uint(variants_start, discr_layout);\n+                    let variant_index_relative = variant_index.as_u32()\n+                        .checked_sub(variants_start)\n+                        .expect(\"overflow computing relative variant idx\");\n+                    // We need to use machine arithmetic when taking into account `niche_start`.\n+                    let discr_layout = self.layout_of(discr_layout.value.to_int_ty(*self.tcx))?;\n                     let niche_start_val = ImmTy::from_uint(niche_start, discr_layout);\n-                    let variant_index_val = ImmTy::from_uint(variant_index.as_u32(), discr_layout);\n-                    let variant_index_relative_val = self.binary_op(\n-                        mir::BinOp::Sub,\n-                        variant_index_val,\n-                        variants_start_val,\n-                    )?;\n+                    let variant_index_relative_val =\n+                        ImmTy::from_uint(variant_index_relative, discr_layout);\n                     let discr_val = self.binary_op(\n                         mir::BinOp::Add,\n                         variant_index_relative_val,"}]}