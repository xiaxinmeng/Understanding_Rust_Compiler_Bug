{"sha": "13bcc7362559342737fac1061f27327ffbd19475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYmNjNzM2MjU1OTM0MjczN2ZhYzEwNjFmMjczMjdmZmJkMTk0NzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T00:14:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-19T00:40:49Z"}, "message": "core: Rename vec::position_elt to position_elem", "tree": {"sha": "f355a603a661cda419917a0ba32764515f719e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f355a603a661cda419917a0ba32764515f719e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bcc7362559342737fac1061f27327ffbd19475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bcc7362559342737fac1061f27327ffbd19475", "html_url": "https://github.com/rust-lang/rust/commit/13bcc7362559342737fac1061f27327ffbd19475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bcc7362559342737fac1061f27327ffbd19475/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab02145bae18f4ba1d08864fd973926b38fc472", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab02145bae18f4ba1d08864fd973926b38fc472", "html_url": "https://github.com/rust-lang/rust/commit/cab02145bae18f4ba1d08864fd973926b38fc472"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "1116e682af99631f8cdde15bf8106588a146aa3b", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13bcc7362559342737fac1061f27327ffbd19475/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/13bcc7362559342737fac1061f27327ffbd19475/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=13bcc7362559342737fac1061f27327ffbd19475", "patch": "@@ -921,8 +921,8 @@ for the parameter list, as in `{|| ...}`.\n Partial application is done using the `bind` keyword in Rust.\n \n ~~~~\n-let daynum = bind vec::position_elt([\"mo\", \"tu\", \"we\", \"do\",\n-                                     \"fr\", \"sa\", \"su\"], _);\n+let daynum = bind vec::position_elem([\"mo\", \"tu\", \"we\", \"do\",\n+                                      \"fr\", \"sa\", \"su\"], _);\n ~~~~\n \n Binding a function produces a boxed closure (`fn@` type) in which some"}, {"sha": "a24ea84b518849d36499e6dd1c9274f76f720fb6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13bcc7362559342737fac1061f27327ffbd19475/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bcc7362559342737fac1061f27327ffbd19475/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=13bcc7362559342737fac1061f27327ffbd19475", "patch": "@@ -50,10 +50,10 @@ export find;\n export find_from;\n export rfind;\n export rfind_from;\n-export position_elt;\n+export position_elem;\n export position;\n export position_from;\n-export position_elt;\n+export position_elem;\n export rposition;\n export rposition_from;\n export unzip;\n@@ -613,7 +613,7 @@ fn rfind_from<T: copy>(v: [const T], start: uint, end: uint,\n }\n \n #[doc = \"Find the first index containing a matching value\"]\n-fn position_elt<T>(v: [const T], x: T) -> option<uint> {\n+fn position_elem<T>(v: [const T], x: T) -> option<uint> {\n     position(v) { |y| x == y }\n }\n \n@@ -645,7 +645,7 @@ fn position_from<T>(v: [const T], start: uint, end: uint,\n }\n \n #[doc = \"Find the last index containing a matching value\"]\n-fn rposition_elt<T>(v: [const T], x: T) -> option<uint> {\n+fn rposition_elem<T>(v: [const T], x: T) -> option<uint> {\n     rposition(v) { |y| x == y }\n }\n \n@@ -1439,14 +1439,14 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_position_elt() {\n-        assert position_elt([], 1) == none;\n+    fn test_position_elem() {\n+        assert position_elem([], 1) == none;\n \n         let v1 = [1, 2, 3, 3, 2, 5];\n-        assert position_elt(v1, 1) == some(0u);\n-        assert position_elt(v1, 2) == some(1u);\n-        assert position_elt(v1, 5) == some(5u);\n-        assert position_elt(v1, 4) == none;\n+        assert position_elem(v1, 1) == some(0u);\n+        assert position_elem(v1, 2) == some(1u);\n+        assert position_elem(v1, 5) == some(5u);\n+        assert position_elem(v1, 4) == none;\n     }\n \n     #[test]"}, {"sha": "b85627c6856e7f5c571fe6f5ee6fb2d4423c5d67", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bcc7362559342737fac1061f27327ffbd19475/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bcc7362559342737fac1061f27327ffbd19475/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=13bcc7362559342737fac1061f27327ffbd19475", "patch": "@@ -91,7 +91,8 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n                   some(last_use::closes_over(vars)) { vars }\n                   none { [] }\n                 };\n-                if option::is_some(vec::position_elt(last_uses, id)) { cont; }\n+                if option::is_some(\n+                    vec::position_elem(last_uses, id)) { cont; }\n             }\n             let ty = ty::node_id_to_type(cx.tcx, id);\n             checker(cx, ty, span);"}, {"sha": "2029b86b9742e0cb9528ba5135cf33337f9ad496", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bcc7362559342737fac1061f27327ffbd19475/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bcc7362559342737fac1061f27327ffbd19475/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=13bcc7362559342737fac1061f27327ffbd19475", "patch": "@@ -393,7 +393,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       }\n       ty::ty_param(n, _) {\n         // Find the type parameter in the parameter list.\n-        alt vec::position_elt(ty_param_map, n) {\n+        alt vec::position_elem(ty_param_map, n) {\n           some(i) { [shape_var, i as u8] }\n           none { fail \"ty param not found in ty_param_map\"; }\n         }"}]}