{"sha": "d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTUxZWEwZTJlMGM3ZDM2M2E0MjAyYzBhZTM5NWYzMjBhMTlmM2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T15:11:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T09:21:56Z"}, "message": "Patch rustdoc to include missing types, make the match exhaustive\nto prevent such oversights in the future.", "tree": {"sha": "6b500206192fc9115dc5e2511aac26ebbebbfdba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b500206192fc9115dc5e2511aac26ebbebbfdba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "html_url": "https://github.com/rust-lang/rust/commit/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "html_url": "https://github.com/rust-lang/rust/commit/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "8045dab6c2d6780cd241b15bc02fcce7a2599705", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "patch": "@@ -1165,12 +1165,19 @@ pub enum Type {\n         mutability: Mutability,\n         type_: Box<Type>,\n     },\n+\n+    // <Type as Trait>::Name\n     QPath {\n         name: String,\n         self_type: Box<Type>,\n         trait_: Box<Type>\n     },\n-    // region, raw, other boxes, mutable\n+\n+    // _\n+    Infer,\n+\n+    // for<'a> Foo(&'a)\n+    PolyTraitRef(Vec<TyParamBound>),\n }\n \n #[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash)]\n@@ -1307,11 +1314,18 @@ impl Clean<Type> for ast::Ty {\n                 }\n             }\n             TyClosure(ref c) => Closure(box c.clean(cx)),\n-            TyProc(ref c) => Proc(box c.clean(cx)),\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyParen(ref ty) => ty.clean(cx),\n             TyQPath(ref qp) => qp.clean(cx),\n-            ref x => panic!(\"Unimplemented type {}\", x),\n+            TyPolyTraitRef(ref bounds) => {\n+                PolyTraitRef(bounds.clean(cx))\n+            },\n+            TyInfer(..) => {\n+                Infer\n+            },\n+            TyTypeof(..) => {\n+                panic!(\"Unimplemented type {}\", self.node)\n+            },\n         }\n     }\n }"}, {"sha": "cf92a71369fa33524d1e6ebaaa14f5ff22ff19fb", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d8e51ea0e2e0c7d363a4202c0ae395f320a19f3d", "patch": "@@ -390,6 +390,16 @@ impl fmt::Show for clean::Type {\n                 try!(resolved_path(f, did, path, false));\n                 tybounds(f, typarams)\n             }\n+            clean::PolyTraitRef(ref bounds) => {\n+                for (i, bound) in bounds.iter().enumerate() {\n+                    if i != 0 {\n+                        try!(write!(f, \" + \"));\n+                    }\n+                    try!(write!(f, \"{}\", *bound));\n+                }\n+                Ok(())\n+            }\n+            clean::Infer => write!(f, \"_\"),\n             clean::Self(..) => f.write(\"Self\".as_bytes()),\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n             clean::Closure(ref decl) => {"}]}