{"sha": "065542378c86eb0ae6ceb2d106f2601a6ac121aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NTU0MjM3OGM4NmViMGFlNmNlYjJkMTA2ZjI2MDFhNmFjMTIxYWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T18:26:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T18:26:29Z"}, "message": "Teach ty.unify about ty_obj.", "tree": {"sha": "53926efb51e5b7579175ec5ab5e1dc78b2420ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53926efb51e5b7579175ec5ab5e1dc78b2420ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065542378c86eb0ae6ceb2d106f2601a6ac121aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065542378c86eb0ae6ceb2d106f2601a6ac121aa", "html_url": "https://github.com/rust-lang/rust/commit/065542378c86eb0ae6ceb2d106f2601a6ac121aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065542378c86eb0ae6ceb2d106f2601a6ac121aa/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1d8d07687ef686c214044d11780a13b4b958e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1d8d07687ef686c214044d11780a13b4b958e2", "html_url": "https://github.com/rust-lang/rust/commit/aa1d8d07687ef686c214044d11780a13b4b958e2"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "d54f7436e0097de56143a16bc6646b918f589f6e", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/065542378c86eb0ae6ceb2d106f2601a6ac121aa/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065542378c86eb0ae6ceb2d106f2601a6ac121aa/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=065542378c86eb0ae6ceb2d106f2601a6ac121aa", "patch": "@@ -60,6 +60,8 @@ tag type_err {\n     terr_record_size(uint, uint);\n     terr_record_mutability;\n     terr_record_fields(ast.ident,ast.ident);\n+    terr_meth_count;\n+    terr_obj_meths(ast.ident,ast.ident);\n     terr_arg_count;\n }\n \n@@ -724,6 +726,67 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n \n     }\n \n+    fn unify_obj(&hashmap[int,@ty.t] bindings,\n+                @ty.t expected,\n+                @ty.t actual,\n+                &unify_handler handler,\n+                vec[method] expected_meths,\n+                vec[method] actual_meths) -> unify_result {\n+      let vec[method] result_meths = vec();\n+      let uint i = 0u;\n+      let uint expected_len = _vec.len[method](expected_meths);\n+      let uint actual_len = _vec.len[method](actual_meths);\n+\n+      if (expected_len != actual_len) {\n+        ret ures_err(terr_meth_count, expected, actual);\n+      }\n+\n+      // FIXME: work around buggy typestate logic for 'alt', sigh.\n+      fn is_ok(&unify_result r) -> bool {\n+        alt (r) {\n+          case (ures_ok(?tfn)) {\n+            ret true;\n+          }\n+          case (_) {}\n+        }\n+        ret false;\n+      }\n+\n+      fn append_if_ok(&method e_meth,\n+                      &unify_result r, &mutable vec[method] result_meths) {\n+        alt (r) {\n+          case (ures_ok(?tfn)) {\n+            alt (tfn.struct) {\n+              case (ty_fn(?ins, ?out)) {\n+                result_meths += vec(rec(inputs = ins,\n+                                        output = out\n+                                        with e_meth));\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      while (i < expected_len) {\n+        auto e_meth = expected_meths.(i);\n+        auto a_meth = actual_meths.(i);\n+        if (! _str.eq(e_meth.ident, a_meth.ident)) {\n+          ret ures_err(terr_obj_meths(e_meth.ident, a_meth.ident),\n+                       expected, actual);\n+        }\n+        auto r = unify_fn(bindings, expected, actual, handler,\n+                          e_meth.inputs, e_meth.output,\n+                          a_meth.inputs, a_meth.output);\n+        if (!is_ok(r)) {\n+          ret r;\n+        }\n+        append_if_ok(e_meth, r, result_meths);\n+        i += 1u;\n+      }\n+      auto t = plain_ty(ty_obj(result_meths));\n+      ret ures_ok(t);\n+    }\n+\n     fn unify_step(&hashmap[int,@ty.t] bindings, @ty.t expected, @ty.t actual,\n                   &unify_handler handler) -> unify_result {\n         // TODO: rewrite this using tuple pattern matching when available, to\n@@ -961,6 +1024,18 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                 }\n             }\n \n+            case (ty.ty_obj(?expected_meths)) {\n+              alt (actual.struct) {\n+                case (ty.ty_obj(?actual_meths)) {\n+                  ret unify_obj(bindings, expected, actual, handler,\n+                                expected_meths, actual_meths);\n+                }\n+                case (_) {\n+                  ret ures_err(terr_mismatch, expected, actual);\n+                }\n+              }\n+            }\n+\n             case (ty.ty_var(?expected_id)) {\n                 alt (bindings.find(expected_id)) {\n                     case (some[@ty.t](?expected_ty)) {\n@@ -1042,6 +1117,14 @@ fn type_err_to_str(&ty.type_err err) -> str {\n         case (terr_arg_count) {\n             ret \"incorrect number of function parameters\";\n         }\n+        case (terr_meth_count) {\n+            ret \"incorrect number of object methods\";\n+        }\n+        case (terr_obj_meths(?e_meth, ?a_meth)) {\n+            ret \"expected an obj with method '\" + e_meth +\n+                \"' but found one with method '\" + a_meth +\n+                \"'\";\n+        }\n     }\n }\n "}]}