{"sha": "0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOTBjZGVkMTQ5Yjc0YjRjZWI1MWE3ZWE1ZDMzOTRhZWI0ZTA2YTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-15T21:50:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T17:27:36Z"}, "message": "Introduce some sanity checking assertions in trans, erase regions more aggressively.", "tree": {"sha": "f5d46e94a975a055772c626c898a270abef08f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d46e94a975a055772c626c898a270abef08f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "html_url": "https://github.com/rust-lang/rust/commit/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ab0c588ff3adb8e9bf4209b59e08f90fe281903", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab0c588ff3adb8e9bf4209b59e08f90fe281903", "html_url": "https://github.com/rust-lang/rust/commit/4ab0c588ff3adb8e9bf4209b59e08f90fe281903"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "2662d6ef1908cf0c8fdb69a9a0e620034b5c7bcf", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -5824,7 +5824,8 @@ pub fn erase_late_bound_regions<HR>(\n {\n     /*!\n      * Replace any late-bound regions bound in `value` with `'static`.\n-     * Useful in trans.\n+     * Useful in trans but also method lookup and a few other places\n+     * where precise region relationships are not required.\n      */\n \n     replace_late_bound_regions(tcx, value, |_, _| ty::ReStatic).0"}, {"sha": "9c4a532790ddea6e1993b3ac4095a3fce91d7d59", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -519,8 +519,9 @@ pub fn get_res_dtor(ccx: &CrateContext,\n         let name = csearch::get_symbol(&ccx.sess().cstore, did);\n         let class_ty = ty::lookup_item_type(tcx, parent_id).ty.subst(tcx, substs);\n         let llty = type_of_dtor(ccx, class_ty);\n-        let dtor_ty = ty::mk_ctor_fn(ccx.tcx(), ast::DUMMY_NODE_ID,\n-                                     &[glue::get_drop_glue_type(ccx, t)], ty::mk_nil(ccx.tcx()));\n+        let dtor_ty = ty::mk_ctor_fn(ccx.tcx(),\n+                                     &[glue::get_drop_glue_type(ccx, t)],\n+                                     ty::mk_nil(ccx.tcx()));\n         get_extern_fn(ccx,\n                       &mut *ccx.externs().borrow_mut(),\n                       name.as_slice(),"}, {"sha": "cbd0d756f08ccb0ef7f83b4760befed820679811", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -432,6 +432,8 @@ pub fn trans_fn_ref_with_substs(\n            substs.repr(tcx));\n \n     assert!(substs.types.all(|t| !ty::type_needs_infer(*t)));\n+    assert!(substs.types.all(|t| !ty::type_has_escaping_regions(*t)));\n+    let substs = substs.erase_regions();\n \n     // Load the info for the appropriate trait if necessary.\n     match ty::trait_of_item(tcx, def_id) {\n@@ -470,8 +472,9 @@ pub fn trans_fn_ref_with_substs(\n                                  default methods\");\n \n                     // Compute the first substitution\n-                    let first_subst = make_substs_for_receiver_types(\n-                        tcx, &*trait_ref, &*method);\n+                    let first_subst =\n+                        make_substs_for_receiver_types(tcx, &*trait_ref, &*method)\n+                        .erase_regions();\n \n                     // And compose them\n                     let new_substs = first_subst.subst(tcx, &substs);\n@@ -661,7 +664,7 @@ pub fn trans_lang_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                 trans_fn_ref_with_substs_to_callee(bcx,\n                                                                    did,\n                                                                    0,\n-                                                                   subst::Substs::empty())\n+                                                                   subst::Substs::trans_empty())\n                              },\n                              ArgVals(args),\n                              dest)"}, {"sha": "3cb823aec34c1c6e905d01c0c480d8350a8aee6d", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -486,7 +486,7 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     let llfn = get_or_create_declaration_if_unboxed_closure(\n         bcx,\n         closure_id,\n-        &bcx.fcx.param_substs.substs).unwrap();\n+        bcx.fcx.param_substs.substs()).unwrap();\n \n     let function_type = (*bcx.tcx().unboxed_closures.borrow())[closure_id]\n                                                               .closure_type"}, {"sha": "21cf313866144da8fd47f00dff90ff94fcc57d6d", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -191,10 +191,21 @@ pub type ExternMap = FnvHashMap<String, ValueRef>;\n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n pub struct param_substs {\n-    pub substs: subst::Substs,\n+    substs: subst::Substs,\n }\n \n impl param_substs {\n+    pub fn new(substs: subst::Substs) -> param_substs {\n+        assert!(substs.types.all(|t| !ty::type_needs_infer(*t)));\n+        assert!(substs.types.all(|t| !ty::type_has_params(*t)));\n+        assert!(substs.types.all(|t| !ty::type_has_escaping_regions(*t)));\n+        param_substs { substs: substs.erase_regions() }\n+    }\n+\n+    pub fn substs(&self) -> &subst::Substs {\n+        &self.substs\n+    }\n+\n     pub fn empty() -> param_substs {\n         param_substs {\n             substs: subst::Substs::trans_empty(),\n@@ -822,6 +833,8 @@ pub fn fulfill_obligation(ccx: &CrateContext,\n         None => { }\n     }\n \n+    debug!(\"trans fulfill_obligation: trait_ref={}\", trait_ref.repr(ccx.tcx()));\n+\n     ty::populate_implementations_for_trait_if_necessary(tcx, trait_ref.def_id);\n     let infcx = infer::new_infer_ctxt(tcx);\n "}, {"sha": "65fd95667608a6f64bd9f0af540ba11dd6f32905", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -1410,7 +1410,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                                file_metadata: DIFile,\n                                name_to_append_suffix_to: &mut String)\n                                -> DIArray {\n-        let self_type = param_substs.substs.self_ty();\n+        let self_type = param_substs.substs().self_ty();\n \n         // Only true for static default methods:\n         let has_self_type = self_type.is_some();\n@@ -1467,7 +1467,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         }\n \n         // Handle other generic parameters\n-        let actual_types = param_substs.substs.types.get_slice(subst::FnSpace);\n+        let actual_types = param_substs.substs().types.get_slice(subst::FnSpace);\n         for (index, &ast::TyParam{ ident, .. }) in generics.ty_params.iter().enumerate() {\n             let actual_type = actual_types[index];\n             // Add actual type name to <...> clause of function name"}, {"sha": "40a4d6047aa5387c02989176e93a91b5880823c4", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -329,12 +329,12 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                           bcx.ty_to_string(unsized_ty)).as_slice())\n             },\n             &ty::UnsizeVtable(ty::TyTrait { ref principal, .. }, _) => {\n-                let substs = principal.substs.with_self_ty(unsized_ty);\n+                let substs = principal.substs.with_self_ty(unsized_ty).erase_regions();\n                 let trait_ref =\n                     Rc::new(ty::TraitRef { def_id: principal.def_id,\n                                            substs: substs });\n                 let trait_ref =\n-                    trait_ref.subst(bcx.tcx(), &bcx.fcx.param_substs.substs);\n+                    trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs.substs());\n                 let box_ty = mk_ty(unsized_ty);\n                 PointerCast(bcx,\n                             meth::get_vtable(bcx, box_ty, trait_ref),\n@@ -1122,7 +1122,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                              .map(|t| (*t).clone())\n                                              .unwrap();\n                 let trait_ref =\n-                    trait_ref.subst(bcx.tcx(), &bcx.fcx.param_substs.substs);\n+                    trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs.substs());\n                 let datum = unpack_datum!(bcx, trans(bcx, &**val));\n                 meth::trans_trait_cast(bcx, datum, expr.id,\n                                        trait_ref, dest)"}, {"sha": "f86a0994bf95c9c3b52ad6dc3b9ba36da8f7f5cf", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -536,7 +536,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n     let _icx = push_ctxt(\"foreign::build_foreign_fn\");\n \n     let fnty = ty::node_id_to_type(ccx.tcx(), id);\n-    let mty = fnty.subst(ccx.tcx(), &param_substs.substs);\n+    let mty = fnty.subst(ccx.tcx(), param_substs.substs());\n     let tys = foreign_types_for_fn_ty(ccx, mty);\n \n     unsafe { // unsafe because we call LLVM operations\n@@ -558,7 +558,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n         let _icx = push_ctxt(\"foreign::foreign::build_rust_fn\");\n         let tcx = ccx.tcx();\n         let t = ty::node_id_to_type(tcx, id).subst(\n-            ccx.tcx(), &param_substs.substs);\n+            ccx.tcx(), param_substs.substs());\n \n         let ps = ccx.tcx().map.with_path(id, |path| {\n             let abi = Some(ast_map::PathName(special_idents::clownshoe_abi.name));"}, {"sha": "5188ca773503abdbef3d822e6f9c6314a6ac7927", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -287,8 +287,9 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                              val, *ty);\n         }\n \n-        let dtor_ty = ty::mk_ctor_fn(variant_cx.tcx(), ast::DUMMY_NODE_ID,\n-                                     &[get_drop_glue_type(bcx.ccx(), t)], ty::mk_nil(bcx.tcx()));\n+        let dtor_ty = ty::mk_ctor_fn(bcx.tcx(),\n+                                     &[get_drop_glue_type(bcx.ccx(), t)],\n+                                     ty::mk_nil(bcx.tcx()));\n         let (_, variant_cx) = invoke(variant_cx, dtor_addr, args, dtor_ty, None, false);\n \n         variant_cx.fcx.pop_and_trans_custom_cleanup_scope(variant_cx, field_scope);"}, {"sha": "90777afff7e7204105cd026c0eef12bd4e241636", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -137,8 +137,11 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }) => {\n             let trait_ref =\n                 Rc::new(trait_ref.subst(bcx.tcx(),\n-                                        &bcx.fcx.param_substs.substs));\n+                                        bcx.fcx.param_substs.substs()));\n             let span = bcx.tcx().map.span(method_call.expr_id);\n+            debug!(\"method_call={} trait_ref={}\",\n+                   method_call,\n+                   trait_ref.repr(bcx.tcx()));\n             let origin = fulfill_obligation(bcx.ccx(),\n                                             span,\n                                             (*trait_ref).clone());"}, {"sha": "52aa81fa427da2117117f3eee08899465fd7e8ab", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "patch": "@@ -63,9 +63,8 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         None => ()\n     }\n \n-    let psubsts = param_substs {\n-        substs: (*real_substs).clone(),\n-    };\n+    debug!(\"creating param_substs with real_substs={}\", real_substs.repr(ccx.tcx()));\n+    let psubsts = param_substs::new((*real_substs).clone());\n \n     debug!(\"monomorphic_fn(\\\n             fn_id={}, \\"}]}