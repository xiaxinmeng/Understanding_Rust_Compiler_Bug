{"sha": "30f92f8a2735bb978869f10fbb7c52414692b9ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjkyZjhhMjczNWJiOTc4ODY5ZjEwZmJiN2M1MjQxNDY5MmI5YmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T03:46:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-04T03:50:19Z"}, "message": "catch overflows that are hidden by first casting the RHS to u32", "tree": {"sha": "b9f3d6b6d14609058df2d15f563cfed2ae228fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f3d6b6d14609058df2d15f563cfed2ae228fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f92f8a2735bb978869f10fbb7c52414692b9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f92f8a2735bb978869f10fbb7c52414692b9ba", "html_url": "https://github.com/rust-lang/rust/commit/30f92f8a2735bb978869f10fbb7c52414692b9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f92f8a2735bb978869f10fbb7c52414692b9ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd482e2f5e5b5635922613500b13f0ba6150aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd482e2f5e5b5635922613500b13f0ba6150aaf", "html_url": "https://github.com/rust-lang/rust/commit/ffd482e2f5e5b5635922613500b13f0ba6150aaf"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "e1362f52eedda7b37b6d34681d9a72c7917739d6", "filename": "src/operator.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/30f92f8a2735bb978869f10fbb7c52414692b9ba/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f92f8a2735bb978869f10fbb7c52414692b9ba/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=30f92f8a2735bb978869f10fbb7c52414692b9ba", "patch": "@@ -93,19 +93,20 @@ macro_rules! int_shift {\n     ($kind:expr, $int_op:ident, $l:expr, $r:expr) => ({\n         let l = $l;\n         let r = $r;\n+        let r_wrapped = r as u32;\n         match $kind {\n-            I8  => overflow!($int_op, l as i8,  r),\n-            I16 => overflow!($int_op, l as i16, r),\n-            I32 => overflow!($int_op, l as i32, r),\n-            I64 => overflow!($int_op, l as i64, r),\n-            I128 => overflow!($int_op, l as i128, r),\n-            U8  => overflow!($int_op, l as u8,  r),\n-            U16 => overflow!($int_op, l as u16, r),\n-            U32 => overflow!($int_op, l as u32, r),\n-            U64 => overflow!($int_op, l as u64, r),\n-            U128 => overflow!($int_op, l as u128, r),\n+            I8  => overflow!($int_op, l as i8,  r_wrapped),\n+            I16 => overflow!($int_op, l as i16, r_wrapped),\n+            I32 => overflow!($int_op, l as i32, r_wrapped),\n+            I64 => overflow!($int_op, l as i64, r_wrapped),\n+            I128 => overflow!($int_op, l as i128, r_wrapped),\n+            U8  => overflow!($int_op, l as u8,  r_wrapped),\n+            U16 => overflow!($int_op, l as u16, r_wrapped),\n+            U32 => overflow!($int_op, l as u32, r_wrapped),\n+            U64 => overflow!($int_op, l as u64, r_wrapped),\n+            U128 => overflow!($int_op, l as u128, r_wrapped),\n             _ => bug!(\"int_shift should only be called on int primvals\"),\n-        }\n+        }.map(|(val, over)| (val, over || r != r_wrapped as u128))\n     })\n }\n \n@@ -226,10 +227,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         // These ops can have an RHS with a different numeric type.\n         if right_kind.is_int() && (bin_op == Shl || bin_op == Shr) {\n-            // FIXME: The \"as u32\" here could hide an overflow\n             return match bin_op {\n-                Shl => int_shift!(left_kind, overflowing_shl, l, r as u32),\n-                Shr => int_shift!(left_kind, overflowing_shr, l, r as u32),\n+                Shl => int_shift!(left_kind, overflowing_shl, l, r),\n+                Shr => int_shift!(left_kind, overflowing_shr, l, r),\n                 _ => bug!(\"it has already been checked that this is a shift op\"),\n             };\n         }"}, {"sha": "ac09a1740c43e5b8d93138a6632b0ad7361831c2", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30f92f8a2735bb978869f10fbb7c52414692b9ba/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f92f8a2735bb978869f10fbb7c52414692b9ba/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=30f92f8a2735bb978869f10fbb7c52414692b9ba", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(exceeding_bitshifts, const_err)]\n+\n+fn main() {\n+    // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ Overflow(Shr)\n+}"}, {"sha": "a7ac9d1d50398d1f50fb9cd00152cf1808a3b77c", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/30f92f8a2735bb978869f10fbb7c52414692b9ba/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f92f8a2735bb978869f10fbb7c52414692b9ba/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=30f92f8a2735bb978869f10fbb7c52414692b9ba", "previous_filename": "tests/compile-fail/overflowing-rsh-6.rs"}]}