{"sha": "90f20f8c539843f53a7a2b1cfb83b3673ec78534", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjIwZjhjNTM5ODQzZjUzYTdhMmIxY2ZiODNiMzY3M2VjNzg1MzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-22T09:13:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-22T09:38:24Z"}, "message": "less verbose debug", "tree": {"sha": "57e252955404bba9978f3a3a3c288a0636a87173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e252955404bba9978f3a3a3c288a0636a87173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f20f8c539843f53a7a2b1cfb83b3673ec78534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f20f8c539843f53a7a2b1cfb83b3673ec78534", "html_url": "https://github.com/rust-lang/rust/commit/90f20f8c539843f53a7a2b1cfb83b3673ec78534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f20f8c539843f53a7a2b1cfb83b3673ec78534/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94241cec04f0dfa4aa725f114abc0405f65b00b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/94241cec04f0dfa4aa725f114abc0405f65b00b9", "html_url": "https://github.com/rust-lang/rust/commit/94241cec04f0dfa4aa725f114abc0405f65b00b9"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "f68cbc541d0f640d6eb7456dcd4ef066334d5af1", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90f20f8c539843f53a7a2b1cfb83b3673ec78534/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f20f8c539843f53a7a2b1cfb83b3673ec78534/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=90f20f8c539843f53a7a2b1cfb83b3673ec78534", "patch": "@@ -152,12 +152,18 @@ impl RawNotification {\n             params: to_value(params).unwrap(),\n         }\n     }\n+    pub fn is<N>(&self) -> bool\n+    where\n+        N: Notification,\n+    {\n+        self.method == N::METHOD\n+    }\n     pub fn cast<N>(self) -> ::std::result::Result<N::Params, RawNotification>\n     where\n         N: Notification,\n         N::Params: serde::de::DeserializeOwned,\n     {\n-        if self.method != N::METHOD {\n+        if !self.is::<N>() {\n             return Err(self);\n         }\n         Ok(from_value(self.params).unwrap())"}, {"sha": "84f88eefff1d09810abdd3e8c0bcef726a63e575", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/90f20f8c539843f53a7a2b1cfb83b3673ec78534/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f20f8c539843f53a7a2b1cfb83b3673ec78534/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=90f20f8c539843f53a7a2b1cfb83b3673ec78534", "patch": "@@ -2,6 +2,7 @@ mod handlers;\n mod subscriptions;\n \n use std::{\n+    fmt,\n     path::PathBuf,\n     sync::Arc,\n };\n@@ -109,6 +110,43 @@ pub fn main_loop(\n     Ok(())\n }\n \n+enum Event {\n+    Msg(RawMessage),\n+    Task(Task),\n+    Vfs(VfsTask),\n+    Lib(LibraryData),\n+}\n+\n+impl fmt::Debug for Event {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let debug_verbose_not = |not: &RawNotification, f: &mut fmt::Formatter| {\n+            f.debug_struct(\"RawNotification\")\n+                .field(\"method\", &not.method)\n+                .finish()\n+        };\n+\n+        match self {\n+            Event::Msg(RawMessage::Notification(not)) => {\n+                if not.is::<req::DidOpenTextDocument>() || not.is::<req::DidChangeTextDocument>() {\n+                    return debug_verbose_not(not, f);\n+                }\n+            }\n+            Event::Task(Task::Notify(not)) => {\n+                if not.is::<req::PublishDecorations>() || not.is::<req::PublishDiagnostics>() {\n+                    return debug_verbose_not(not, f);\n+                }\n+            }\n+            _ => (),\n+        }\n+        match self {\n+            Event::Msg(it) => fmt::Debug::fmt(it, f),\n+            Event::Task(it) => fmt::Debug::fmt(it, f),\n+            Event::Vfs(it) => fmt::Debug::fmt(it, f),\n+            Event::Lib(it) => fmt::Debug::fmt(it, f),\n+        }\n+    }\n+}\n+\n fn main_loop_inner(\n     internal_mode: bool,\n     publish_decorations: bool,\n@@ -123,13 +161,6 @@ fn main_loop_inner(\n ) -> Result<()> {\n     let (libdata_sender, libdata_receiver) = unbounded();\n     loop {\n-        #[derive(Debug)]\n-        enum Event {\n-            Msg(RawMessage),\n-            Task(Task),\n-            Vfs(VfsTask),\n-            Lib(LibraryData),\n-        }\n         log::trace!(\"selecting\");\n         let event = select! {\n             recv(msg_receiver, msg) => match msg {"}]}