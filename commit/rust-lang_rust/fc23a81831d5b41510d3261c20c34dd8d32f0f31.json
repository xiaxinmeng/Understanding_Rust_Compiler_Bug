{"sha": "fc23a81831d5b41510d3261c20c34dd8d32f0f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjNhODE4MzFkNWI0MTUxMGQzMjYxYzIwYzM0ZGQ4ZDMyZjBmMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T20:48:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T20:48:27Z"}, "message": "Auto merge of #68491 - pnkfelix:hide-niches-under-unsafe-cell, r=oli\n\nHide niches under UnsafeCell\n\nHide any niche of T from type-construction context of `UnsafeCell<T>`.\n\nFix #68303\nFix #68206", "tree": {"sha": "90c1cf4eb8be2a6149857e0562326259cfaac727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c1cf4eb8be2a6149857e0562326259cfaac727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc23a81831d5b41510d3261c20c34dd8d32f0f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc23a81831d5b41510d3261c20c34dd8d32f0f31", "html_url": "https://github.com/rust-lang/rust/commit/fc23a81831d5b41510d3261c20c34dd8d32f0f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc23a81831d5b41510d3261c20c34dd8d32f0f31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f32e3001e3a64c1baa509d3d1734dff53f14d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f32e3001e3a64c1baa509d3d1734dff53f14d81", "html_url": "https://github.com/rust-lang/rust/commit/3f32e3001e3a64c1baa509d3d1734dff53f14d81"}, {"sha": "1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c", "html_url": "https://github.com/rust-lang/rust/commit/1b12232b8f6ede69485d4fd48f1ac8044d5d7c7c"}], "stats": {"total": 545, "additions": 521, "deletions": 24}, "files": [{"sha": "5bb5436bec59d3faafa838e5d3fb32b232a17292", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -48,7 +48,7 @@ RUN /tmp/build-solaris-toolchain.sh sparcv9 sparcv9 solaris-sparc\n COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n # We pass the commit id of the port of LLVM's libunwind to the build script.\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n-RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"53b586346f2c7870e20b170decdc30729d97c42b\"\n+RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"5125c169b30837208a842f85f7ae44a83533bd0e\"\n \n COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n RUN /tmp/build-wasi-toolchain.sh"}, {"sha": "8b8bda2e6b44fb9c08a9326a5b38da713a5f319c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -1475,6 +1475,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n #[lang = \"unsafe_cell\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n+#[cfg_attr(not(bootstrap), repr(no_niche))] // rust-lang/rust#68303.\n pub struct UnsafeCell<T: ?Sized> {\n     value: T,\n }"}, {"sha": "12647fae9004e34c7936b72a2c6f6d6102097f99", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -139,6 +139,7 @@\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n #![feature(assoc_int_consts)]\n+#![cfg_attr(not(bootstrap), feature(no_niche))] // rust-lang/rust#68303\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "e8bf2eb9a12c98413c9e01131e095336492fb7af", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -356,12 +356,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             debug!(\"univariant offset: {:?} field: {:#?}\", offset, field);\n             offsets[i as usize] = offset;\n \n-            if let Some(mut niche) = field.largest_niche.clone() {\n-                let available = niche.available(dl);\n-                if available > largest_niche_available {\n-                    largest_niche_available = available;\n-                    niche.offset += offset;\n-                    largest_niche = Some(niche);\n+            if !repr.hide_niche() {\n+                if let Some(mut niche) = field.largest_niche.clone() {\n+                    let available = niche.available(dl);\n+                    if available > largest_niche_available {\n+                        largest_niche_available = available;\n+                        niche.offset += offset;\n+                        largest_niche = Some(niche);\n+                    }\n                 }\n             }\n \n@@ -838,7 +840,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             }\n \n                             // Update `largest_niche` if we have introduced a larger niche.\n-                            let niche = Niche::from_scalar(dl, Size::ZERO, scalar.clone());\n+                            let niche = if def.repr.hide_niche() {\n+                                None\n+                            } else {\n+                                Niche::from_scalar(dl, Size::ZERO, scalar.clone())\n+                            };\n                             if let Some(niche) = niche {\n                                 match &st.largest_niche {\n                                     Some(largest_niche) => {\n@@ -863,6 +869,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     return Ok(tcx.intern_layout(st));\n                 }\n \n+                // At this point, we have handled all unions and\n+                // structs. (We have also handled univariant enums\n+                // that allow representation optimization.)\n+                assert!(def.is_enum());\n+\n                 // The current code for niche-filling relies on variant indices\n                 // instead of actual discriminants, so dataful enums with\n                 // explicit discriminants (RFC #2363) would misbehave."}, {"sha": "60296b8116d8374f196e03467daddd2a6ba05f64", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -2041,7 +2041,8 @@ bitflags! {\n         const IS_TRANSPARENT     = 1 << 2;\n         // Internal only for now. If true, don't reorder fields.\n         const IS_LINEAR          = 1 << 3;\n-\n+        // If true, don't expose any niche to type's context.\n+        const HIDE_NICHE         = 1 << 4;\n         // Any of these flags being set prevent field reordering optimisation.\n         const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits |\n                                    ReprFlags::IS_SIMD.bits |\n@@ -2078,6 +2079,7 @@ impl ReprOptions {\n                         ReprFlags::empty()\n                     }\n                     attr::ReprTransparent => ReprFlags::IS_TRANSPARENT,\n+                    attr::ReprNoNiche => ReprFlags::HIDE_NICHE,\n                     attr::ReprSimd => ReprFlags::IS_SIMD,\n                     attr::ReprInt(i) => {\n                         size = Some(i);\n@@ -2118,6 +2120,10 @@ impl ReprOptions {\n     pub fn linear(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_LINEAR)\n     }\n+    #[inline]\n+    pub fn hide_niche(&self) -> bool {\n+        self.flags.contains(ReprFlags::HIDE_NICHE)\n+    }\n \n     pub fn discr_type(&self) -> attr::IntType {\n         self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))"}, {"sha": "ac1a191fa230134e5d780f77280bc7a2cf3efdcd", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -840,6 +840,7 @@ pub enum ReprAttr {\n     ReprSimd,\n     ReprTransparent,\n     ReprAlign(u32),\n+    ReprNoNiche,\n }\n \n #[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone, HashStable_Generic)]\n@@ -895,6 +896,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                         sym::packed => Some(ReprPacked(1)),\n                         sym::simd => Some(ReprSimd),\n                         sym::transparent => Some(ReprTransparent),\n+                        sym::no_niche => Some(ReprNoNiche),\n                         name => int_type_of_word(name).map(ReprInt),\n                     };\n "}, {"sha": "f99008a6d5c1416a01710a758bb0a00296454377", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -825,7 +825,8 @@ fn find_repr_type_name(sess: &ParseSess, type_attrs: &[ast::Attribute]) -> &'sta\n                 attr::ReprPacked(_)\n                 | attr::ReprSimd\n                 | attr::ReprAlign(_)\n-                | attr::ReprTransparent => continue,\n+                | attr::ReprTransparent\n+                | attr::ReprNoNiche => continue,\n \n                 attr::ReprC => \"i32\",\n "}, {"sha": "0082f4f1a6e8985e647b7797c71120d1e96cee95", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -204,6 +204,10 @@ declare_features! (\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n \n+    /// Allows `#[repr(no_niche)]` (an implementation detail of `rustc`,\n+    /// it is not on path for eventual stabilization).\n+    (active, no_niche, \"1.42.0\", None, None),\n+\n     // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------"}, {"sha": "855970d9342641652a362a7bc93507ffdcbb046d", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -16,9 +16,10 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::Attribute;\n+use syntax::ast::{Attribute, NestedMetaItem};\n use syntax::attr;\n \n fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n@@ -278,6 +279,21 @@ impl CheckAttrVisitor<'tcx> {\n                         _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n+                sym::no_niche => {\n+                    if !self.tcx.features().enabled(sym::no_niche) {\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::no_niche,\n+                            hint.span(),\n+                            \"the attribute `repr(no_niche)` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    match target {\n+                        Target::Struct | Target::Enum => continue,\n+                        _ => (\"a\", \"struct or enum\"),\n+                    }\n+                }\n                 sym::i8\n                 | sym::u8\n                 | sym::i16\n@@ -305,8 +321,10 @@ impl CheckAttrVisitor<'tcx> {\n         // This is not ideal, but tracking precisely which ones are at fault is a huge hassle.\n         let hint_spans = hints.iter().map(|hint| hint.span());\n \n-        // Error on repr(transparent, <anything else>).\n-        if is_transparent && hints.len() > 1 {\n+        // Error on repr(transparent, <anything else apart from no_niche>).\n+        let non_no_niche = |hint: &&NestedMetaItem| hint.name_or_empty() != sym::no_niche;\n+        let non_no_niche_count = hints.iter().filter(non_no_niche).count();\n+        if is_transparent && non_no_niche_count > 1 {\n             let hint_spans: Vec<_> = hint_spans.clone().collect();\n             struct_span_err!(\n                 self.tcx.sess,"}, {"sha": "1cc4a27788098e6f54ede20880154705aec51d55", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -491,6 +491,7 @@ symbols! {\n         non_exhaustive,\n         non_modrs_mods,\n         no_sanitize,\n+        no_niche,\n         no_stack_check,\n         no_start,\n         no_std,\n@@ -587,6 +588,7 @@ symbols! {\n         repr128,\n         repr_align,\n         repr_align_enum,\n+        repr_no_niche,\n         repr_packed,\n         repr_simd,\n         repr_transparent,"}, {"sha": "722b4f5e0ba387fcc98b584025d8ee59aa6629bf", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -10,10 +10,10 @@ pub struct RWLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-// Below is to check at compile time, that RWLock has size of 128 bytes.\n+// Check at compile time that RWLock size matches C definition (see test_c_rwlock_initializer below)\n #[allow(dead_code)]\n unsafe fn rw_lock_size_assert(r: RWLock) {\n-    mem::transmute::<RWLock, [u8; 128]>(r);\n+    mem::transmute::<RWLock, [u8; 144]>(r);\n }\n \n impl RWLock {\n@@ -210,15 +210,17 @@ mod tests {\n     // be changed too.\n     #[test]\n     fn test_c_rwlock_initializer() {\n+        #[rustfmt::skip]\n         const RWLOCK_INIT: &[u8] = &[\n-            0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n-            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x00 */ 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x10 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x20 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x30 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x40 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x50 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x60 */ 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x70 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            /* 0x80 */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n         ];\n \n         #[inline(never)]\n@@ -239,7 +241,7 @@ mod tests {\n             zero_stack();\n             let mut init = MaybeUninit::<RWLock>::zeroed();\n             rwlock_new(&mut init);\n-            assert_eq!(mem::transmute::<_, [u8; 128]>(init.assume_init()).as_slice(), RWLOCK_INIT)\n+            assert_eq!(mem::transmute::<_, [u8; 144]>(init.assume_init()).as_slice(), RWLOCK_INIT)\n         };\n     }\n }"}, {"sha": "4ca3f7a1aad94a50cd1152dc18ce0d72f9aee672", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,32 @@\n+// For rust-lang/rust#68303: the contents of `UnsafeCell<T>` cannot\n+// participate in the niche-optimization for enum discriminants. This\n+// test checks that an `Option<UnsafeCell<NonZeroU32>>` has the same\n+// size in memory as an `Option<UnsafeCell<u32>>` (namely, 8 bytes).\n+\n+// run-pass\n+\n+#![feature(no_niche)]\n+\n+use std::cell::UnsafeCell;\n+use std::mem::size_of;\n+use std::num::NonZeroU32 as N32;\n+\n+struct Wrapper<T>(T);\n+\n+#[repr(transparent)]\n+struct Transparent<T>(T);\n+\n+#[repr(no_niche)]\n+struct NoNiche<T>(T);\n+\n+fn main() {\n+    assert_eq!(size_of::<Option<Wrapper<u32>>>(),     8);\n+    assert_eq!(size_of::<Option<Wrapper<N32>>>(),     4);\n+    assert_eq!(size_of::<Option<Transparent<u32>>>(), 8);\n+    assert_eq!(size_of::<Option<Transparent<N32>>>(), 4);\n+    assert_eq!(size_of::<Option<NoNiche<u32>>>(),     8);\n+    assert_eq!(size_of::<Option<NoNiche<N32>>>(),     8);\n+\n+    assert_eq!(size_of::<Option<UnsafeCell<u32>>>(),  8);\n+    assert_eq!(size_of::<Option<UnsafeCell<N32>>>(),  8);\n+}"}, {"sha": "8872ee7119e4a399bba16b4895b5d6bc6026f4a4", "filename": "src/test/ui/repr/feature-gate-no-niche.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,20 @@\n+use std::num::NonZeroU8 as N8;\n+use std::num::NonZeroU16 as N16;\n+\n+#[repr(no_niche)]\n+pub struct Cloaked(N16);\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(transparent, no_niche)]\n+pub struct Shadowy(N16);\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(no_niche)]\n+pub enum Cloaked1 { _A(N16), }\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+#[repr(no_niche)]\n+pub enum Cloaked2 { _A(N16), _B(u8, N8) }\n+//~^^ ERROR the attribute `repr(no_niche)` is currently unstable [E0658]\n+\n+fn main() { }"}, {"sha": "34fd417cc99a2e0c4f7e085cf3b6fe82d4e9f49e", "filename": "src/test/ui/repr/feature-gate-no-niche.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Ffeature-gate-no-niche.stderr?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,35 @@\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:4:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:8:21\n+   |\n+LL | #[repr(transparent, no_niche)]\n+   |                     ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:12:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error[E0658]: the attribute `repr(no_niche)` is currently unstable\n+  --> $DIR/feature-gate-no-niche.rs:16:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+   |\n+   = help: add `#![feature(no_niche)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "308634651a384151eb8ee9a6d3dfc064ea8f7188", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,14 @@\n+#![feature(no_niche)]\n+\n+use std::num::NonZeroU8 as N8;\n+use std::num::NonZeroU16 as N16;\n+\n+#[repr(no_niche)]\n+pub union Cloaked1 { _A: N16 }\n+//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+\n+#[repr(no_niche)]\n+pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n+//~^^ ERROR attribute should be applied to struct or enum [E0517]\n+\n+fn main() { }"}, {"sha": "4c542c5f0da6438381ce2a8221cc37408c82c684", "filename": "src/test/ui/repr/repr-no-niche-inapplicable-to-unions.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche-inapplicable-to-unions.stderr?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,19 @@\n+error[E0517]: attribute should be applied to struct or enum\n+  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:6:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+LL | pub union Cloaked1 { _A: N16 }\n+   | ------------------------------ not a struct or enum\n+\n+error[E0517]: attribute should be applied to struct or enum\n+  --> $DIR/repr-no-niche-inapplicable-to-unions.rs:10:8\n+   |\n+LL | #[repr(no_niche)]\n+   |        ^^^^^^^^\n+LL | pub union Cloaked2 { _A: N16, _B: (u8, N8) }\n+   | -------------------------------------------- not a struct or enum\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0517`."}, {"sha": "a7f0d509af52169e39a6c343bd1db2ba026bb89e", "filename": "src/test/ui/repr/repr-no-niche.rs", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a81831d5b41510d3261c20c34dd8d32f0f31/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs?ref=fc23a81831d5b41510d3261c20c34dd8d32f0f31", "patch": "@@ -0,0 +1,329 @@\n+// run-pass\n+\n+// This file tests repr(no_niche), which causes an struct/enum to hide\n+// any niche space that may exist in its internal state from the\n+// context it appears in.\n+\n+// Here are the axes this test is seeking to cover:\n+//\n+// repr annotation:\n+// visible: (); cloaked: (no_niche); transparent: (transparent); shadowy: (transparent, no_niche)\n+//\n+// enum vs struct\n+//\n+// niche-type via type-parameter vs inline declaration\n+\n+#![feature(decl_macro)]\n+#![feature(no_niche)]\n+\n+use std::mem::size_of;\n+use std::num::{NonZeroU8, NonZeroU16};\n+\n+mod struct_inline {\n+    use std::num::NonZeroU16 as N16;\n+\n+    #[derive(Debug)] pub struct Visible(N16);\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub struct Cloaked(N16);\n+\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub struct Transparent(N16);\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub struct Shadowy(N16);\n+}\n+\n+mod struct_param {\n+    #[derive(Debug)] pub struct Visible<T>(T);\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub struct Cloaked<T>(T);\n+\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub struct Transparent<T>(T);\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub struct Shadowy<T>(T);\n+}\n+\n+mod enum_inline {\n+    use crate::two_fifty_six_variant_enum;\n+    use std::num::{NonZeroU8 as N8, NonZeroU16 as N16};\n+\n+    #[derive(Debug)] pub enum Visible1 { _A(N16), }\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub enum Cloaked1 { _A(N16), }\n+\n+    // (N.B.: transparent enums must be univariant)\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub enum Transparent { _A(N16), }\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub enum Shadowy { _A(N16), }\n+\n+    // including multivariant enums for completeness. Payload and\n+    // number of variants (i.e. discriminant size) have been chosen so\n+    // that layout including discriminant is 4 bytes, with no space in\n+    // padding to hide another discrimnant from the surrounding\n+    // context.\n+    //\n+    // (Note that multivariant enums cannot usefully expose a niche in\n+    // general; this test is relying on that.)\n+    two_fifty_six_variant_enum!(Visible2, N8);\n+\n+    #[repr(no_niche)]\n+    two_fifty_six_variant_enum!(Cloaked2, N8);\n+}\n+\n+mod enum_param {\n+    use super::two_fifty_six_variant_enum;\n+\n+    #[derive(Debug)] pub enum Visible1<T> { _A(T), }\n+\n+    #[repr(no_niche)]\n+    #[derive(Debug)] pub enum Cloaked1<T> { _A(T), }\n+\n+    // (N.B.: transparent enums must be univariant)\n+    #[repr(transparent)]\n+    #[derive(Debug)] pub enum Transparent<T> { _A(T), }\n+\n+    #[repr(transparent, no_niche)]\n+    #[derive(Debug)] pub enum Shadowy<T> { _A(T), }\n+\n+    // including multivariant enums for completeness. Same notes apply\n+    // here as above (assuming `T` is instantiated with `NonZeroU8`).\n+    two_fifty_six_variant_enum!(Visible2<T>);\n+\n+    #[repr(no_niche)]\n+    two_fifty_six_variant_enum!(Cloaked2<T>);\n+}\n+\n+fn main() {\n+    // sanity-checks\n+    assert_eq!(size_of::<struct_inline::Visible>(),               2);\n+    assert_eq!(size_of::<struct_inline::Cloaked>(),               2);\n+    assert_eq!(size_of::<struct_inline::Transparent>(),           2);\n+    assert_eq!(size_of::<struct_inline::Shadowy>(),               2);\n+\n+    assert_eq!(size_of::<struct_param::Visible<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Cloaked<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Transparent<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<struct_param::Shadowy<NonZeroU16>>(), 2);\n+\n+    assert_eq!(size_of::<enum_inline::Visible1>(),    2);\n+    assert_eq!(size_of::<enum_inline::Cloaked1>(),    2);\n+    assert_eq!(size_of::<enum_inline::Transparent>(), 2); // transparent enums are univariant\n+    assert_eq!(size_of::<enum_inline::Shadowy>(),     2);\n+    assert_eq!(size_of::<enum_inline::Visible2>(),    4);\n+    assert_eq!(size_of::<enum_inline::Cloaked2>(),    4);\n+\n+    assert_eq!(size_of::<enum_param::Visible1<NonZeroU16>>(),    2);\n+    assert_eq!(size_of::<enum_param::Cloaked1<NonZeroU16>>(),    2);\n+    assert_eq!(size_of::<enum_param::Transparent<NonZeroU16>>(), 2);\n+    assert_eq!(size_of::<enum_param::Shadowy<NonZeroU16>>(),     2);\n+    assert_eq!(size_of::<enum_param::Visible2<NonZeroU8>>(),     4);\n+    assert_eq!(size_of::<enum_param::Cloaked2<NonZeroU8>>(),     4);\n+\n+    // now the actual tests of no_niche: how do inputs above compose\n+    // with `Option` type constructor. The cases with a `_+2` are the\n+    // ones where no_niche fires.\n+    assert_eq!(size_of::<Option<struct_inline::Visible>>(),       2);\n+    assert_eq!(size_of::<Option<struct_inline::Cloaked>>(),       2+2);\n+    assert_eq!(size_of::<Option<struct_inline::Transparent>>(),   2);\n+    assert_eq!(size_of::<Option<struct_inline::Shadowy>>(),       2+2);\n+\n+    assert_eq!(size_of::<Option<struct_param::Visible<NonZeroU16>>>(),     2);\n+    assert_eq!(size_of::<Option<struct_param::Cloaked<NonZeroU16>>>(),     2+2);\n+    assert_eq!(size_of::<Option<struct_param::Transparent<NonZeroU16>>>(), 2);\n+    assert_eq!(size_of::<Option<struct_param::Shadowy<NonZeroU16>>>(),     2+2);\n+\n+    assert_eq!(size_of::<Option<enum_inline::Visible1>>(),    2);\n+    assert_eq!(size_of::<Option<enum_inline::Cloaked1>>(),    2+2);\n+    assert_eq!(size_of::<Option<enum_inline::Transparent>>(), 2);\n+    assert_eq!(size_of::<Option<enum_inline::Shadowy>>(),     2+2);\n+    // cannot use niche of multivariant payload\n+    assert_eq!(size_of::<Option<enum_inline::Visible2>>(),    4+2);\n+    assert_eq!(size_of::<Option<enum_inline::Cloaked2>>(),    4+2);\n+\n+    assert_eq!(size_of::<Option<enum_param::Visible1<NonZeroU16>>>(),    2);\n+    assert_eq!(size_of::<Option<enum_param::Cloaked1<NonZeroU16>>>(),    2+2);\n+    assert_eq!(size_of::<Option<enum_param::Transparent<NonZeroU16>>>(), 2);\n+    assert_eq!(size_of::<Option<enum_param::Shadowy<NonZeroU16>>>(),     2+2);\n+    // cannot use niche of multivariant payload\n+    assert_eq!(size_of::<Option<enum_param::Visible2<NonZeroU8>>>(),    4+2);\n+    assert_eq!(size_of::<Option<enum_param::Cloaked2<NonZeroU8>>>(),    4+2);\n+}\n+\n+macro two_fifty_six_variant_enum {\n+    ($name:ident<$param:ident>) => {\n+        #[derive(Debug)]\n+        pub enum $name<$param> {\n+            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n+            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n+            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n+            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n+\n+            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n+            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n+            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n+            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n+\n+            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n+            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n+            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n+            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n+\n+            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n+            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n+            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n+            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n+\n+            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n+            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n+            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n+            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n+\n+            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n+            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n+            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n+            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n+\n+            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n+            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n+            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n+            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n+\n+            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n+            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n+            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n+            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n+\n+            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n+            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n+            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n+            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n+\n+            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n+            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n+            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n+            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n+\n+            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n+            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n+            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n+            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n+\n+            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n+            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n+            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n+            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n+\n+            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n+            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n+            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n+            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n+\n+            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n+            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n+            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n+            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n+\n+            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n+            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n+            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n+            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n+\n+            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n+            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n+            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n+            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n+        }\n+    },\n+\n+    ($name:ident, $param:ty) => {\n+        #[derive(Debug)]\n+        pub enum $name {\n+            _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n+            _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n+            _V08($param, u16), _V09(u16, $param), _V0a($param, u16), _V0b(u16, $param),\n+            _V0c($param, u16), _V0d(u16, $param), _V0e($param, u16), _V0f(u16, $param),\n+\n+            _V10($param, u16), _V11(u16, $param), _V12($param, u16), _V13(u16, $param),\n+            _V14($param, u16), _V15(u16, $param), _V16($param, u16), _V17(u16, $param),\n+            _V18($param, u16), _V19(u16, $param), _V1a($param, u16), _V1b(u16, $param),\n+            _V1c($param, u16), _V1d(u16, $param), _V1e($param, u16), _V1f(u16, $param),\n+\n+            _V20($param, u16), _V21(u16, $param), _V22($param, u16), _V23(u16, $param),\n+            _V24($param, u16), _V25(u16, $param), _V26($param, u16), _V27(u16, $param),\n+            _V28($param, u16), _V29(u16, $param), _V2a($param, u16), _V2b(u16, $param),\n+            _V2c($param, u16), _V2d(u16, $param), _V2e($param, u16), _V2f(u16, $param),\n+\n+            _V30($param, u16), _V31(u16, $param), _V32($param, u16), _V33(u16, $param),\n+            _V34($param, u16), _V35(u16, $param), _V36($param, u16), _V37(u16, $param),\n+            _V38($param, u16), _V39(u16, $param), _V3a($param, u16), _V3b(u16, $param),\n+            _V3c($param, u16), _V3d(u16, $param), _V3e($param, u16), _V3f(u16, $param),\n+\n+            _V40($param, u16), _V41(u16, $param), _V42($param, u16), _V43(u16, $param),\n+            _V44($param, u16), _V45(u16, $param), _V46($param, u16), _V47(u16, $param),\n+            _V48($param, u16), _V49(u16, $param), _V4a($param, u16), _V4b(u16, $param),\n+            _V4c($param, u16), _V4d(u16, $param), _V4e($param, u16), _V4f(u16, $param),\n+\n+            _V50($param, u16), _V51(u16, $param), _V52($param, u16), _V53(u16, $param),\n+            _V54($param, u16), _V55(u16, $param), _V56($param, u16), _V57(u16, $param),\n+            _V58($param, u16), _V59(u16, $param), _V5a($param, u16), _V5b(u16, $param),\n+            _V5c($param, u16), _V5d(u16, $param), _V5e($param, u16), _V5f(u16, $param),\n+\n+            _V60($param, u16), _V61(u16, $param), _V62($param, u16), _V63(u16, $param),\n+            _V64($param, u16), _V65(u16, $param), _V66($param, u16), _V67(u16, $param),\n+            _V68($param, u16), _V69(u16, $param), _V6a($param, u16), _V6b(u16, $param),\n+            _V6c($param, u16), _V6d(u16, $param), _V6e($param, u16), _V6f(u16, $param),\n+\n+            _V70($param, u16), _V71(u16, $param), _V72($param, u16), _V73(u16, $param),\n+            _V74($param, u16), _V75(u16, $param), _V76($param, u16), _V77(u16, $param),\n+            _V78($param, u16), _V79(u16, $param), _V7a($param, u16), _V7b(u16, $param),\n+            _V7c($param, u16), _V7d(u16, $param), _V7e($param, u16), _V7f(u16, $param),\n+\n+            _V80($param, u16), _V81(u16, $param), _V82($param, u16), _V83(u16, $param),\n+            _V84($param, u16), _V85(u16, $param), _V86($param, u16), _V87(u16, $param),\n+            _V88($param, u16), _V89(u16, $param), _V8a($param, u16), _V8b(u16, $param),\n+            _V8c($param, u16), _V8d(u16, $param), _V8e($param, u16), _V8f(u16, $param),\n+\n+            _V90($param, u16), _V91(u16, $param), _V92($param, u16), _V93(u16, $param),\n+            _V94($param, u16), _V95(u16, $param), _V96($param, u16), _V97(u16, $param),\n+            _V98($param, u16), _V99(u16, $param), _V9a($param, u16), _V9b(u16, $param),\n+            _V9c($param, u16), _V9d(u16, $param), _V9e($param, u16), _V9f(u16, $param),\n+\n+            _Va0($param, u16), _Va1(u16, $param), _Va2($param, u16), _Va3(u16, $param),\n+            _Va4($param, u16), _Va5(u16, $param), _Va6($param, u16), _Va7(u16, $param),\n+            _Va8($param, u16), _Va9(u16, $param), _Vaa($param, u16), _Vab(u16, $param),\n+            _Vac($param, u16), _Vad(u16, $param), _Vae($param, u16), _Vaf(u16, $param),\n+\n+            _Vb0($param, u16), _Vb1(u16, $param), _Vb2($param, u16), _Vb3(u16, $param),\n+            _Vb4($param, u16), _Vb5(u16, $param), _Vb6($param, u16), _Vb7(u16, $param),\n+            _Vb8($param, u16), _Vb9(u16, $param), _Vba($param, u16), _Vbb(u16, $param),\n+            _Vbc($param, u16), _Vbd(u16, $param), _Vbe($param, u16), _Vbf(u16, $param),\n+\n+            _Vc0($param, u16), _Vc1(u16, $param), _Vc2($param, u16), _Vc3(u16, $param),\n+            _Vc4($param, u16), _Vc5(u16, $param), _Vc6($param, u16), _Vc7(u16, $param),\n+            _Vc8($param, u16), _Vc9(u16, $param), _Vca($param, u16), _Vcb(u16, $param),\n+            _Vcc($param, u16), _Vcd(u16, $param), _Vce($param, u16), _Vcf(u16, $param),\n+\n+            _Vd0($param, u16), _Vd1(u16, $param), _Vd2($param, u16), _Vd3(u16, $param),\n+            _Vd4($param, u16), _Vd5(u16, $param), _Vd6($param, u16), _Vd7(u16, $param),\n+            _Vd8($param, u16), _Vd9(u16, $param), _Vda($param, u16), _Vdb(u16, $param),\n+            _Vdc($param, u16), _Vdd(u16, $param), _Vde($param, u16), _Vdf(u16, $param),\n+\n+            _Ve0($param, u16), _Ve1(u16, $param), _Ve2($param, u16), _Ve3(u16, $param),\n+            _Ve4($param, u16), _Ve5(u16, $param), _Ve6($param, u16), _Ve7(u16, $param),\n+            _Ve8($param, u16), _Ve9(u16, $param), _Vea($param, u16), _Veb(u16, $param),\n+            _Vec($param, u16), _Ved(u16, $param), _Vee($param, u16), _Vef(u16, $param),\n+\n+            _Vf0($param, u16), _Vf1(u16, $param), _Vf2($param, u16), _Vf3(u16, $param),\n+            _Vf4($param, u16), _Vf5(u16, $param), _Vf6($param, u16), _Vf7(u16, $param),\n+            _Vf8($param, u16), _Vf9(u16, $param), _Vfa($param, u16), _Vfb(u16, $param),\n+            _Vfc($param, u16), _Vfd(u16, $param), _Vfe($param, u16), _Vff(u16, $param),\n+        }\n+    }\n+}"}]}