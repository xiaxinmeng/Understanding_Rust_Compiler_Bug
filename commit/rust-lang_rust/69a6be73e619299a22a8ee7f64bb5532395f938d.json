{"sha": "69a6be73e619299a22a8ee7f64bb5532395f938d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTZiZTczZTYxOTI5OWEyMmE4ZWU3ZjY0YmI1NTMyMzk1ZjkzOGQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-10T13:11:40Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Rename const eval queries to reflect the validation changes", "tree": {"sha": "554bbd13cad92c4b8ceba6d86bbbde085ec026c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554bbd13cad92c4b8ceba6d86bbbde085ec026c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a6be73e619299a22a8ee7f64bb5532395f938d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a6be73e619299a22a8ee7f64bb5532395f938d", "html_url": "https://github.com/rust-lang/rust/commit/69a6be73e619299a22a8ee7f64bb5532395f938d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a6be73e619299a22a8ee7f64bb5532395f938d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c2087eb5623a724d0a24db925f9c9afcd4df0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c2087eb5623a724d0a24db925f9c9afcd4df0d", "html_url": "https://github.com/rust-lang/rust/commit/40c2087eb5623a724d0a24db925f9c9afcd4df0d"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "20577bdc6bdee06c5d4ab4145fe2ccd07958956a", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -69,9 +69,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         // improve caching of queries.\n         let inputs = self.erase_regions(&param_env.and(cid));\n         if let Some(span) = span {\n-            self.at(span).const_eval_validated(inputs)\n+            self.at(span).const_eval_for_ty(inputs)\n         } else {\n-            self.const_eval_validated(inputs)\n+            self.const_eval_for_ty(inputs)\n         }\n     }\n \n@@ -94,7 +94,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n         trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n-        let raw_const = self.const_eval_raw(param_env.and(gid))?;\n+        let raw_const = self.const_eval(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n }"}, {"sha": "dc89cf3564897bf8a7e43ead42f14304ad004e20", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -707,29 +707,22 @@ rustc_queries! {\n     }\n \n     Other {\n-        /// Evaluates a constant without running sanity checks.\n-        ///\n-        /// **Do not use this** outside const eval. Const eval uses this to break query cycles\n-        /// during validation. Please add a comment to every use site explaining why using\n-        /// `const_eval_validated` isn't sufficient. The returned constant also isn't in a suitable\n-        /// form to be used outside of const eval.\n-        query const_eval_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        /// Evaluates a constant and returns the computed allocation.\n+        query const_eval(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalRawResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating `{}`\",\n                 key.value.display(tcx)\n             }\n         }\n \n-        /// Results of evaluating const items or constants embedded in\n-        /// other items (such as enum variant explicit discriminants).\n-        ///\n-        /// In contrast to `const_eval_raw` this performs some validation on the constant, and\n-        /// returns a proper constant that is usable by the rest of the compiler.\n+        /// Evaluates const items or anonymous constants\n+        /// (such as enum variant explicit discriminants or array lengths)\n+        /// into a representation suitable for the type system and const generics.\n         ///\n         /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n         /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_global_id`.\n-        query const_eval_validated(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+        query const_eval_for_ty(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating + checking `{}`\","}, {"sha": "3b01328df56c080f3bb2f25078e1757743bcee3d", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -200,21 +200,21 @@ fn turn_into_const<'tcx>(\n     );\n     assert!(\n         !is_static || cid.promoted.is_some(),\n-        \"the const eval query should not be used for statics, use `const_eval_raw` instead\"\n+        \"the `const_eval_for_ty` query should not be used for statics, use `const_eval` instead\"\n     );\n     // Turn this into a proper constant.\n     op_to_const(&ecx, mplace.into())\n }\n \n-pub fn const_eval_validated_provider<'tcx>(\n+pub fn const_eval_for_ty_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::ConstEvalResult<'tcx> {\n-    // see comment in const_eval_raw_provider for what we're doing here\n+    // see comment in const_eval_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval_validated(key) {\n+        match tcx.const_eval_for_ty(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls\n@@ -237,10 +237,10 @@ pub fn const_eval_validated_provider<'tcx>(\n         });\n     }\n \n-    tcx.const_eval_raw(key).map(|val| turn_into_const(tcx, val, key))\n+    tcx.const_eval(key).map(|val| turn_into_const(tcx, val, key))\n }\n \n-pub fn const_eval_raw_provider<'tcx>(\n+pub fn const_eval_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::ConstEvalRawResult<'tcx> {\n@@ -255,7 +255,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval_raw(key) {\n+        match tcx.const_eval(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls"}, {"sha": "ef05d136da17ba5797caff103b715818f766b16f", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -889,7 +889,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        let val = self.tcx.const_eval_raw(param_env.and(gid))?;\n+        let val = self.tcx.const_eval(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "64918a7685718f23fc3b36a14dab925c14dba9f5", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -469,7 +469,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Notice that every static has two `AllocId` that will resolve to the same\n                 // thing here: one maps to `GlobalAlloc::Static`, this is the \"lazy\" ID,\n                 // and the other one is maps to `GlobalAlloc::Memory`, this is returned by\n-                // `const_eval_raw` and it is the \"resolved\" ID.\n+                // `const_eval` and it is the \"resolved\" ID.\n                 // The resolved ID is never used by the interpreted program, it is hidden.\n                 // This is relied upon for soundness of const-patterns; a pointer to the resolved\n                 // ID would \"sidestep\" the checks that make sure consts do not point to statics!"}, {"sha": "07defa2d66d4dbfda2bf47709b2eb30bde49b634", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6be73e619299a22a8ee7f64bb5532395f938d/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=69a6be73e619299a22a8ee7f64bb5532395f938d", "patch": "@@ -52,8 +52,8 @@ pub fn provide(providers: &mut Providers) {\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n     monomorphize::polymorphize::provide(providers);\n-    providers.const_eval_validated = const_eval::const_eval_validated_provider;\n-    providers.const_eval_raw = const_eval::const_eval_raw_provider;\n+    providers.const_eval_for_ty = const_eval::const_eval_for_ty_provider;\n+    providers.const_eval = const_eval::const_eval_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();"}]}