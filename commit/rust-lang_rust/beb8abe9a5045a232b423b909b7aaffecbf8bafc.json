{"sha": "beb8abe9a5045a232b423b909b7aaffecbf8bafc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjhhYmU5YTUwNDVhMjMyYjQyM2I5MDliN2FhZmZlY2JmOGJhZmM=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "message": "Introduce temporary target feature crt_static_respected\n\nThis feature allows targets to opt in to full support of the crt-static\nfeature. Currently, crt-static is allowed on all targets, even those\nthat really can't or really shouldn't support it. This works because it\nis very loose in the specification of its effects. Changing the behavior\nof crt-static to be more strict in how it chooses libraries and links\nexecutables would likely cause compilation to fail on these platforms.\n\nTo avoid breaking existing uses of crt-static, whitelist targets that\nsupport the new, stricter behavior. For all other targets, this changes\ncrt-static from being \"mostly a no-op\" to \"explicitly a no-op\".", "tree": {"sha": "695128ae6220d49deaa619ad9940d6cb3d39740a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695128ae6220d49deaa619ad9940d6cb3d39740a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb8abe9a5045a232b423b909b7aaffecbf8bafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb8abe9a5045a232b423b909b7aaffecbf8bafc", "html_url": "https://github.com/rust-lang/rust/commit/beb8abe9a5045a232b423b909b7aaffecbf8bafc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb8abe9a5045a232b423b909b7aaffecbf8bafc/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cb987862fbb4bd54a1239978965600574c20d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb987862fbb4bd54a1239978965600574c20d02", "html_url": "https://github.com/rust-lang/rust/commit/3cb987862fbb4bd54a1239978965600574c20d02"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "23dcaf27c2c704502a3d4609bf2e8bf491813b30", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=beb8abe9a5045a232b423b909b7aaffecbf8bafc", "patch": "@@ -430,6 +430,15 @@ impl Session {\n     }\n \n     pub fn crt_static(&self) -> bool {\n+        // If the target does not opt in to crt-static support, use its default.\n+        if self.target.target.options.crt_static_respected {\n+            self.crt_static_feature()\n+        } else {\n+            self.target.target.options.crt_static_default\n+        }\n+    }\n+\n+    pub fn crt_static_feature(&self) -> bool {\n         let requested_features = self.opts.cg.target_feature.split(',');\n         let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n         let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");"}, {"sha": "e77a40e3a3aa9c0c8e531ff52b154c479b5ad2f8", "filename": "src/librustc_back/target/linux_musl_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs?ref=beb8abe9a5045a232b423b909b7aaffecbf8bafc", "patch": "@@ -69,6 +69,8 @@ pub fn opts() -> TargetOptions {\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;\n+    // These targets allow the user to choose between static and dynamic linking.\n+    base.crt_static_respected = true;\n \n     base\n }"}, {"sha": "0ff633ffe37747dbaacdaa082b1a7692255fed4c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=beb8abe9a5045a232b423b909b7aaffecbf8bafc", "patch": "@@ -418,6 +418,8 @@ pub struct TargetOptions {\n \n     /// Whether or not the CRT is statically linked by default.\n     pub crt_static_default: bool,\n+    /// Whether or not crt-static is respected by the compiler (or is a no-op).\n+    pub crt_static_respected: bool,\n \n     /// Whether or not stack probes (__rust_probestack) are enabled\n     pub stack_probes: bool,\n@@ -479,6 +481,7 @@ impl Default for TargetOptions {\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n             crt_static_default: false,\n+            crt_static_respected: false,\n             stack_probes: false,\n         }\n     }\n@@ -715,6 +718,7 @@ impl Target {\n         key!(min_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n         key!(crt_static_default, bool);\n+        key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n@@ -903,6 +907,7 @@ impl ToJson for Target {\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n         target_option_val!(crt_static_default);\n+        target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);\n \n         if default.abi_blacklist != self.options.abi_blacklist {"}, {"sha": "f44a9b44426d88349375661d69591205c4b0b151", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=beb8abe9a5045a232b423b909b7aaffecbf8bafc", "patch": "@@ -63,6 +63,7 @@ pub fn opts() -> TargetOptions {\n         is_like_windows: true,\n         is_like_msvc: true,\n         pre_link_args: args,\n+        crt_static_respected: true,\n \n         .. Default::default()\n     }"}, {"sha": "96264472b5f8e53e0fe752afd6f5d174ef6ebcdf", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb8abe9a5045a232b423b909b7aaffecbf8bafc/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=beb8abe9a5045a232b423b909b7aaffecbf8bafc", "patch": "@@ -25,7 +25,7 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n         cfg.insert((tf, Some(feat)));\n     }\n \n-    if sess.crt_static() {\n+    if sess.crt_static_feature() {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }\n }"}]}