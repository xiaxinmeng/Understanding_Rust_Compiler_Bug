{"sha": "72868e017bdade60603a25889e253f556305f996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODY4ZTAxN2JkYWRlNjA2MDNhMjU4ODllMjUzZjU1NjMwNWY5OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-11T02:21:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-11T02:21:52Z"}, "message": "Auto merge of #85961 - 1000teslas:issue-71519-fix, r=petrochenkov\n\nMVP for using rust-lld as part of cc\n\nWill fix #71519. I need to figure out how to write a test showing that lld is used instead of whatever linker cc normally uses. When I manually run rustc using `echo 'fn main() {}' | RUSTC_LOG=rustc_codegen_ssa::back::link=debug ./rustc -Clinker-flavor=gcc-lld --crate-type bin -Clink-arg=-Wl,-v` (thanks to bjorn3 on Zulip), I can see that lld is used, but I'm not sure how to inspect that output in a test.", "tree": {"sha": "55431a349ced82022083e568e86062145535179a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55431a349ced82022083e568e86062145535179a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72868e017bdade60603a25889e253f556305f996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72868e017bdade60603a25889e253f556305f996", "html_url": "https://github.com/rust-lang/rust/commit/72868e017bdade60603a25889e253f556305f996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72868e017bdade60603a25889e253f556305f996/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ad16b70f16795f419eb04b823f4c6485867b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ad16b70f16795f419eb04b823f4c6485867b32", "html_url": "https://github.com/rust-lang/rust/commit/46ad16b70f16795f419eb04b823f4c6485867b32"}, {"sha": "2a76762695325e6f189bcd865b57e7154dbf3574", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a76762695325e6f189bcd865b57e7154dbf3574", "html_url": "https://github.com/rust-lang/rust/commit/2a76762695325e6f189bcd865b57e7154dbf3574"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "6c9ec9e7b0dae909fe262739f4c5a46892133867", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -5,7 +5,7 @@ use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{DllImport, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, Strip};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n@@ -1927,6 +1927,8 @@ fn add_order_independent_options(\n     out_filename: &Path,\n     tmpdir: &Path,\n ) {\n+    add_gcc_ld_path(cmd, sess, flavor);\n+\n     add_apple_sdk(cmd, sess, flavor);\n \n     add_link_script(cmd, sess, tmpdir, crate_type);\n@@ -2528,3 +2530,30 @@ fn get_apple_sdk_root(sdk_name: &str) -> Result<String, String> {\n         Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n     }\n }\n+\n+fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n+    if let Some(ld_impl) = sess.opts.debugging_opts.gcc_ld {\n+        if let LinkerFlavor::Gcc = flavor {\n+            match ld_impl {\n+                LdImpl::Lld => {\n+                    let tools_path =\n+                        sess.host_filesearch(PathKind::All).get_tools_search_paths(false);\n+                    let lld_path = tools_path\n+                        .into_iter()\n+                        .map(|p| p.join(\"gcc-ld\"))\n+                        .find(|p| {\n+                            p.join(if sess.host.is_like_windows { \"ld.exe\" } else { \"ld\" }).exists()\n+                        })\n+                        .unwrap_or_else(|| sess.fatal(\"rust-lld (as ld) not found\"));\n+                    cmd.cmd().arg({\n+                        let mut arg = OsString::from(\"-B\");\n+                        arg.push(lld_path);\n+                        arg\n+                    });\n+                }\n+            }\n+        } else {\n+            sess.fatal(\"option `-Z gcc-ld` is used even though linker flavor is not gcc\");\n+        }\n+    }\n+}"}, {"sha": "2b547f8be92286559e4d14dc2513d1b9cb3ac2df", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -2417,6 +2417,7 @@ impl PpMode {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n crate mod dep_tracking {\n+    use super::LdImpl;\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n         LtoCli, OptLevel, OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath,\n@@ -2497,6 +2498,7 @@ crate mod dep_tracking {\n         SymbolManglingVersion,\n         SourceFileHashAlgorithm,\n         TrimmedDefPaths,\n+        Option<LdImpl>,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "1946bfd78cc38ebab2b757616d79c7dacfe1be18", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -370,6 +370,7 @@ mod desc {\n     pub const parse_wasi_exec_model: &str = \"either `command` or `reactor`\";\n     pub const parse_split_debuginfo: &str =\n         \"one of supported split-debuginfo modes (`off`, `packed`, or `unpacked`)\";\n+    pub const parse_gcc_ld: &str = \"one of: no value, `lld`\";\n }\n \n mod parse {\n@@ -864,6 +865,15 @@ mod parse {\n         }\n         true\n     }\n+\n+    crate fn parse_gcc_ld(slot: &mut Option<LdImpl>, v: Option<&str>) -> bool {\n+        match v {\n+            None => *slot = None,\n+            Some(\"lld\") => *slot = Some(LdImpl::Lld),\n+            _ => return false,\n+        }\n+        true\n+    }\n }\n \n options! {\n@@ -1067,6 +1077,7 @@ options! {\n         \"set the optimization fuel quota for a crate\"),\n     function_sections: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether each function should go in its own section\"),\n+    gcc_ld: Option<LdImpl> = (None, parse_gcc_ld, [TRACKED], \"implementation of ld used by cc\"),\n     graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\n         \"use dark-themed colors in graphviz output (default: no)\"),\n     graphviz_font: String = (\"Courier, monospace\".to_string(), parse_string, [UNTRACKED],\n@@ -1321,3 +1332,8 @@ pub enum WasiExecModel {\n     Command,\n     Reactor,\n }\n+\n+#[derive(Clone, Copy, Hash)]\n+pub enum LdImpl {\n+    Lld,\n+}"}, {"sha": "112a6ea939869a47b34435c6e9d2e755999da2a5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -1108,6 +1108,13 @@ impl Step for Assemble {\n             let src_exe = exe(\"lld\", target_compiler.host);\n             let dst_exe = exe(\"rust-lld\", target_compiler.host);\n             builder.copy(&lld_install.join(\"bin\").join(&src_exe), &libdir_bin.join(&dst_exe));\n+            // for `-Z gcc-ld=lld`\n+            let gcc_ld_dir = libdir_bin.join(\"gcc-ld\");\n+            t!(fs::create_dir(&gcc_ld_dir));\n+            builder.copy(\n+                &lld_install.join(\"bin\").join(&src_exe),\n+                &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)),\n+            );\n         }\n \n         // Similarly, copy `llvm-dwp` into libdir for Split DWARF. Only copy it when the LLVM"}, {"sha": "71ed0af4a7c049e82178e12f27e3f143c69663cc", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -402,6 +402,10 @@ impl Step for Rustc {\n             if builder.config.lld_enabled {\n                 let exe = exe(\"rust-lld\", compiler.host);\n                 builder.copy(&src_dir.join(&exe), &dst_dir.join(&exe));\n+                // for `-Z gcc-ld=lld`\n+                let gcc_lld_dir = dst_dir.join(\"gcc-ld\");\n+                t!(fs::create_dir(&gcc_lld_dir));\n+                builder.copy(&src_dir.join(&exe), &gcc_lld_dir.join(&exe));\n             }\n \n             // Copy over llvm-dwp if it's there"}, {"sha": "636665ec1d0c2e1ef5460f60ccd17a01ce29903d", "filename": "src/test/run-make/issue-71519/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -0,0 +1,6 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# needs-rust-lld\n+all:\n+\tRUSTC_LOG=rustc_codegen_ssa::back::link=info $(RUSTC) -Z gcc-ld=lld -C link-args=-Wl,-v main.rs 2> $(TMPDIR)/output.txt\n+\t$(CGREP) -e \"^LLD [0-9]+\\.[0-9]+\\.[0-9]+\" < $(TMPDIR)/output.txt"}, {"sha": "f8d09e8975330f30cf65c8ca4ae70b83ef091c83", "filename": "src/test/run-make/issue-71519/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/src%2Ftest%2Frun-make%2Fissue-71519%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/src%2Ftest%2Frun-make%2Fissue-71519%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-71519%2Fmain.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -0,0 +1,4 @@\n+// test linking using cc with rust-lld injected into search path as ld\n+// see rust-lang/rust#71519 for more info\n+\n+fn main() {}"}, {"sha": "26c1710be742ea9596614af6e513431f3f98ac3f", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/72868e017bdade60603a25889e253f556305f996/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72868e017bdade60603a25889e253f556305f996/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=72868e017bdade60603a25889e253f556305f996", "patch": "@@ -50,6 +50,15 @@ impl EarlyProps {\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        // for `-Z gcc-ld=lld`\n+        let has_rust_lld = config\n+            .compile_lib_path\n+            .join(\"rustlib\")\n+            .join(&config.target)\n+            .join(\"bin\")\n+            .join(\"gcc-ld\")\n+            .join(if config.host.contains(\"windows\") { \"ld.exe\" } else { \"ld\" })\n+            .exists();\n \n         iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n@@ -136,6 +145,10 @@ impl EarlyProps {\n                 if config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln) {\n                     props.ignore = true;\n                 }\n+\n+                if !has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\") {\n+                    props.ignore = true;\n+                }\n             }\n \n             if let Some(s) = config.parse_aux_build(ln) {"}]}