{"sha": "dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOWY4NGYyZDNjMDFkODdiOGU0ZDZmOTZhOWM0YjQ2ZDhlMjI5OTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-15T21:26:59Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-15T21:47:28Z"}, "message": "Removed `ignore-test-compare-mode-nll` from borrowck-closures-unique.rs\nby strengthening the tests there.\n\nIn almost all cases the strengthening amount to just encoding a use\nthat models the original lexical lifetime. A more invasive revision\nwas made in one case where it seems the actual issue is MIR-borrowck's\ngreater \"knowledge\" of unreachable code in the control flow...", "tree": {"sha": "4808e0159fbd4632efb40211054dc83db2f4648a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4808e0159fbd4632efb40211054dc83db2f4648a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "html_url": "https://github.com/rust-lang/rust/commit/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5733050de780ae4d11e3a7af615df792fdf908e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5733050de780ae4d11e3a7af615df792fdf908e", "html_url": "https://github.com/rust-lang/rust/commit/a5733050de780ae4d11e3a7af615df792fdf908e"}], "stats": {"total": 98, "additions": 90, "deletions": 8}, "files": [{"sha": "17519ccb1438dded93710c0d229dc3533c02a84c", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "patch": "@@ -0,0 +1,54 @@\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+   |              ^^       - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n+   |\n+LL |     let c1 = || set(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              first closure is constructed here\n+LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              second closure is constructed here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/borrowck-closures-unique.rs:57:38\n+   |\n+LL | fn e(x: &'static mut isize) {\n+   |      - help: consider changing this to be mutable: `mut x`\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |                                      ^^^^^ cannot assign\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0500, E0524, E0594.\n+For more information about an error, try `rustc --explain E0500`."}, {"sha": "caf5785f481c2bded03c8b17be98998af959d92f", "filename": "src/test/ui/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs?ref=dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Tests that a closure which requires mutable access to the referent\n // of an `&mut` requires a \"unique\" borrow -- that is, the variable to\n // be borrowed (here, `x`) will not be borrowed *mutably*, but\n //  may be *immutable*, but we cannot allow\n // multiple borrows.\n \n+\n+\n fn get(x: &isize) -> isize {\n     *x\n }\n@@ -27,25 +27,40 @@ fn set(x: &mut isize) -> isize {\n fn a(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || get(x);\n+    c1();\n+    c2();\n }\n \n fn b(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn c(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn d(x: &mut isize) {\n     let c1 = || set(x);\n     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+    c1;\n+}\n+\n+// This test was originally encoded in the form shown as `fn f` below.\n+// However, since MIR-borrowck and thus NLL takes more control-flow information\n+// into account, it was necessary to change the test in order to witness the\n+// same (expected) error under both AST-borrowck and NLL.\n+fn e(x: &'static mut isize) {\n+    let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n-fn e(x: &mut isize) {\n+fn f(x: &'static mut isize) {\n     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n fn main() {"}, {"sha": "cfcb81b31e700947cc09d72fd0358eaf004a4872", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=dd9f84f2d3c01d87b8e4d6f96a9c4b46d8e22992", "patch": "@@ -1,5 +1,5 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:34:14\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -9,11 +9,12 @@ LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:39:14\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -23,11 +24,12 @@ LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique acce\n    |              ^^       - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-unique.rs:44:14\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n    |\n LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -37,11 +39,22 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n+LL |     c1;\n LL | }\n    | - borrow from first closure ends here\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:48:14\n+  --> $DIR/borrowck-closures-unique.rs:57:14\n+   |\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |     x //~ ERROR closure cannot assign to immutable argument\n+   |     ^\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/borrowck-closures-unique.rs:62:14\n    |\n LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n    |              ^^ cannot borrow mutably\n@@ -50,7 +63,7 @@ help: consider removing the `&mut`, as it is an immutable binding to a mutable r\n LL |     x //~ ERROR closure cannot assign to immutable argument\n    |     ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0500, E0524, E0595.\n For more information about an error, try `rustc --explain E0500`."}]}