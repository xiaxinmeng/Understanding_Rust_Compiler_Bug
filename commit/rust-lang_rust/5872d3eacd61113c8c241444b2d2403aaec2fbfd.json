{"sha": "5872d3eacd61113c8c241444b2d2403aaec2fbfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NzJkM2VhY2Q2MTExM2M4YzI0MTQ0NGIyZDI0MDNhYWVjMmZiZmQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-03T13:20:20Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-03T13:20:20Z"}, "message": "Deterministic external crate suggestion.\n\nThis commit ensures that the external crate suggestion is deterministic\nby using a `BTreeMap` rather than a `FxHashMap`. This is particularly\nuseful as `std` and `core` will often contain the same items and\ntherefore the suggestion would previously suggest either for any given\nerror - in this case, the suggestion will always prefer `std` now.", "tree": {"sha": "bfbc85b2a5627e6fa33adca42524e06d961ccbd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfbc85b2a5627e6fa33adca42524e06d961ccbd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5872d3eacd61113c8c241444b2d2403aaec2fbfd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlu0wm0ACgkQAXYLT59T\n8VQE0g//ex+PMU/4zJWykXhmW1rlYSXYTarBybhJKjqPcx0YOSvSUZ/m+aMYGjNl\nR54yLY0PQF7Dp8YfjF7i4t47Nhncjf1VgFo7acHRi4dDFUhOqieXnSMRNmfdQP28\nP0SSmJ46Wsqy86USUDzpNiHFBCETjjrkbBOE+W3kujSCmHCxE7NvuMA4A/+MjFWt\nR/5xFzlzrWeLfGq1eeZ7dQd/9P0hxPn1+pDHMGviv02xrf7iUgobJnNOC+5mm2rF\nFzLRofxCf9re1r0wKAyVlwNVKFsx4TJgiAU36JcDN5pBOW5ljUJ4yASaZ3KBhXL4\nSqJ4kaE6BOmY+CC6cgGw//LPkyKF6uhEAd+GAIKufRJ6mTv/EQewNIgIEnHhXI5j\nheqOsjbIIkkb9quEGLZqaLOB1S/xOk7HTTzWy/8NFiH6+iDQxpcDbKeYrvgXauM8\nuQqidrrA9B8vuUezzfuNQ8cIgqDnCPAa3OgF7k0Vpv7nrpAhtnxYbX+W5EgSdUcI\nKg+ZWCV4w2Zt+s9SFQQu1CCN7W5T3ExBEJLu3feNhYpwo/b/7Nmw7FQVfLDd3BaY\nv6yZ/qxe7/krzZX51DfJqTD8zk1tRaSpFSE77muc83r7YABM3ya22g4BrYa+iAP6\nwAByNzzqBxHMuTUBoYuKcPhrKNlKTD0qtGYp89KqaE4qpmSvK70=\n=2S2g\n-----END PGP SIGNATURE-----", "payload": "tree bfbc85b2a5627e6fa33adca42524e06d961ccbd3\nparent 9d408e0511aeb02ae46c692b2432886372f71c37\nauthor David Wood <david@davidtw.co> 1538572820 +0200\ncommitter David Wood <david@davidtw.co> 1538572820 +0200\n\nDeterministic external crate suggestion.\n\nThis commit ensures that the external crate suggestion is deterministic\nby using a `BTreeMap` rather than a `FxHashMap`. This is particularly\nuseful as `std` and `core` will often contain the same items and\ntherefore the suggestion would previously suggest either for any given\nerror - in this case, the suggestion will always prefer `std` now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5872d3eacd61113c8c241444b2d2403aaec2fbfd", "html_url": "https://github.com/rust-lang/rust/commit/5872d3eacd61113c8c241444b2d2403aaec2fbfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5872d3eacd61113c8c241444b2d2403aaec2fbfd/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d408e0511aeb02ae46c692b2432886372f71c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d408e0511aeb02ae46c692b2432886372f71c37", "html_url": "https://github.com/rust-lang/rust/commit/9d408e0511aeb02ae46c692b2432886372f71c37"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "b9194fdfc15d73d9e0986c0f3955a47620af368e", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5872d3eacd61113c8c241444b2d2403aaec2fbfd/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5872d3eacd61113c8c241444b2d2403aaec2fbfd/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=5872d3eacd61113c8c241444b2d2403aaec2fbfd", "patch": "@@ -10,8 +10,10 @@\n \n use {CrateLint, PathResult};\n \n+use std::collections::BTreeSet;\n+\n use syntax::ast::Ident;\n-use syntax::symbol::keywords;\n+use syntax::symbol::{keywords, Symbol};\n use syntax_pos::Span;\n \n use resolve_imports::ImportResolver;\n@@ -131,14 +133,19 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         span: Span,\n         mut path: Vec<Ident>\n     ) -> Option<Vec<Ident>> {\n-        // Need to clone else we can't call `resolve_path` without a borrow error.\n-        let external_crate_names = self.resolver.session.extern_prelude.clone();\n+        // Need to clone else we can't call `resolve_path` without a borrow error. We also store\n+        // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n+        // each time.\n+        let external_crate_names: BTreeSet<Symbol> = self.resolver.session.extern_prelude\n+            .clone().drain().collect();\n \n         // Insert a new path segment that we can replace.\n         let new_path_segment = path[0].clone();\n         path.insert(1, new_path_segment);\n \n-        for name in &external_crate_names {\n+        // Iterate in reverse so that we start with crates at the end of the alphabet. This means\n+        // that we'll always get `std` before `core`.\n+        for name in external_crate_names.iter().rev() {\n             let ident = Ident::with_empty_ctxt(*name);\n             // Calling `maybe_process_path_extern` ensures that we're only running `resolve_path`\n             // on a crate name that won't ICE."}]}