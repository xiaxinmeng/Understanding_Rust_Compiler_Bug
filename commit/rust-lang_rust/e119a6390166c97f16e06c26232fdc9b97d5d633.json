{"sha": "e119a6390166c97f16e06c26232fdc9b97d5d633", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMTlhNjM5MDE2NmM5N2YxNmUwNmMyNjIzMmZkYzliOTdkNWQ2MzM=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-05-12T10:24:04Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-05-17T15:30:55Z"}, "message": "Add metadata suffix, close rust-lang/cargo#4028", "tree": {"sha": "b62b6ff38c1cd187b1f9560c32ac1f1a7a2a230b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62b6ff38c1cd187b1f9560c32ac1f1a7a2a230b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e119a6390166c97f16e06c26232fdc9b97d5d633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e119a6390166c97f16e06c26232fdc9b97d5d633", "html_url": "https://github.com/rust-lang/rust/commit/e119a6390166c97f16e06c26232fdc9b97d5d633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e119a6390166c97f16e06c26232fdc9b97d5d633/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e79b9790a5d1b547b7766762cb0e2938cfc369a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e79b9790a5d1b547b7766762cb0e2938cfc369a", "html_url": "https://github.com/rust-lang/rust/commit/0e79b9790a5d1b547b7766762cb0e2938cfc369a"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "eb2cef133a34f2401b014f7a9b545bb7535845ab", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e119a6390166c97f16e06c26232fdc9b97d5d633/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e119a6390166c97f16e06c26232fdc9b97d5d633/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e119a6390166c97f16e06c26232fdc9b97d5d633", "patch": "@@ -38,7 +38,24 @@ use std::path::PathBuf;\n use std::process::{Command, ExitStatus};\n \n fn main() {\n-    let args = env::args_os().skip(1).collect::<Vec<_>>();\n+    let mut args = env::args_os().skip(1).collect::<Vec<_>>();\n+\n+    // Append metadata suffix for internal crates. See the corresponding entry\n+    // in bootstrap/lib.rs for details.\n+    if let Ok(s) = env::var(\"RUSTC_METADATA_SUFFIX\") {\n+        for i in 1..args.len() {\n+            // Dirty code for borrowing issues\n+            let mut new = None;\n+            if let Some(current_as_str) = args[i].to_str() {\n+                if (&*args[i - 1] == \"-C\" && current_as_str.starts_with(\"metadata\")) ||\n+                   current_as_str.starts_with(\"-Cmetadata\") {\n+                    new = Some(format!(\"{}-{}\", current_as_str, s));\n+                }\n+            }\n+            if let Some(new) = new { args[i] = new.into(); }\n+        }\n+    }\n+\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n     let target = args.windows(2)"}, {"sha": "4b36fcef91bab188be0fd6ac1d272e81fa36c104", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e119a6390166c97f16e06c26232fdc9b97d5d633/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e119a6390166c97f16e06c26232fdc9b97d5d633/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e119a6390166c97f16e06c26232fdc9b97d5d633", "patch": "@@ -475,12 +475,30 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n-        // Tools don't get debuginfo right now, e.g. cargo and rls don't get\n-        // compiled with debuginfo.\n         if mode != Mode::Tool {\n-             cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n-                  .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n-                  .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n+            // Tools don't get debuginfo right now, e.g. cargo and rls don't\n+            // get compiled with debuginfo.\n+            cargo.env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n+                 .env(\"RUSTC_DEBUGINFO_LINES\", self.config.rust_debuginfo_lines.to_string())\n+                 .env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n+\n+            // Currently the compiler depends on crates from crates.io, and\n+            // then other crates can depend on the compiler (e.g. proc-macro\n+            // crates). Let's say, for example that rustc itself depends on the\n+            // bitflags crate. If an external crate then depends on the\n+            // bitflags crate as well, we need to make sure they don't\n+            // conflict, even if they pick the same verison of bitflags. We'll\n+            // want to make sure that e.g. a plugin and rustc each get their\n+            // own copy of bitflags.\n+\n+            // Cargo ensures that this works in general through the -C metadata\n+            // flag. This flag will frob the symbols in the binary to make sure\n+            // they're different, even though the source code is the exact\n+            // same. To solve this problem for the compiler we extend Cargo's\n+            // already-passed -C metadata flag with our own. Our rustc.rs\n+            // wrapper around the actual rustc will detect -C metadata being\n+            // passed and frob it with this extra string we're passing in.\n+            cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n         }\n \n         // Enable usage of unstable features"}]}