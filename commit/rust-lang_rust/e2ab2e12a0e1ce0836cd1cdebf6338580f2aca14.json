{"sha": "e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWIyZTEyYTBlMWNlMDgzNmNkMWNkZWJmNjMzODU4MGYyYWNhMTQ=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T11:09:50Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T14:24:54Z"}, "message": "wip", "tree": {"sha": "83f883b4d0e99d19d615d9e2b34882fde88f426f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83f883b4d0e99d19d615d9e2b34882fde88f426f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "html_url": "https://github.com/rust-lang/rust/commit/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2e547d5879eb26883e520319347795cbc84f0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2e547d5879eb26883e520319347795cbc84f0f9", "html_url": "https://github.com/rust-lang/rust/commit/f2e547d5879eb26883e520319347795cbc84f0f9"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "887fa34c781a561f156999fcc45e3004d3032458", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "patch": "@@ -35,8 +35,8 @@ use crate::{\n // struct S;\n //\n // impl Debug for S {\n-//     fn fmt(&self, f: &mut Formatter) -> Result<()> {\n-//         ${0:todo!()}\n+//     $0fn fmt(&self, f: &mut Formatter) -> Result<()> {\n+//         f.debug_struct(S)\n //     }\n // }\n // ```\n@@ -114,7 +114,7 @@ fn add_assist(\n         |builder| {\n             let insert_pos = adt.syntax().text_range().end();\n             let impl_def_with_items =\n-                impl_def_from_trait(&ctx.sema, &annotated_name, trait_, trait_path);\n+                impl_def_from_trait(&ctx.sema, adt, &annotated_name, trait_, trait_path);\n             update_attribute(builder, input, &trait_name, attr);\n             let trait_path = format!(\"{}\", trait_path);\n             match (ctx.config.snippet_cap, impl_def_with_items) {\n@@ -155,6 +155,7 @@ fn add_assist(\n \n fn impl_def_from_trait(\n     sema: &hir::Semantics<ide_db::RootDatabase>,\n+    adt: &ast::Adt,\n     annotated_name: &ast::Name,\n     trait_: Option<hir::Trait>,\n     trait_path: &ast::Path,\n@@ -169,25 +170,41 @@ fn impl_def_from_trait(\n         make::impl_trait(trait_path.clone(), make::ext::ident_path(&annotated_name.text()));\n     let (impl_def, first_assoc_item) =\n         add_trait_assoc_items_to_impl(sema, trait_items, trait_, impl_def, target_scope);\n+\n     if let ast::AssocItem::Fn(fn_) = &first_assoc_item {\n         if trait_path.segment().unwrap().name_ref().unwrap().text() == \"Debug\" {\n-            let f_expr = make::expr_path(make::ext::ident_path(\"f\"));\n-            let args = make::arg_list(Some(make::expr_path(make::ext::ident_path(\n-                annotated_name.text().as_str(),\n-            ))));\n-            let body =\n-                make::block_expr(None, Some(make::expr_method_call(f_expr, \"debug_struct\", args)))\n-                    .indent(ast::edit::IndentLevel(1));\n-\n-            ted::replace(\n-                fn_.body().unwrap().tail_expr().unwrap().syntax(),\n-                body.clone_for_update().syntax(),\n-            );\n+            gen_debug_impl(adt, fn_, annotated_name);\n         }\n     }\n     Some((impl_def, first_assoc_item))\n }\n \n+fn gen_debug_impl(adt: &ast::Adt, fn_: &ast::Fn, annotated_name: &ast::Name) {\n+    match adt {\n+        ast::Adt::Union(_) => {} // `Debug` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Enum(_) => {}  // TODO\n+        ast::Adt::Struct(strukt) => {\n+            match strukt.field_list() {\n+                Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                    let name = format!(\"\\\"{}\\\"\", annotated_name);\n+                    let args = make::arg_list(Some(make::expr_literal(&name).into()));\n+                    let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                    let mut expr = make::expr_method_call(target, \"debug_struct\", args);\n+                    for field in field_list.fields() {\n+                        let args = make::arg_list(Some(make::expr_path(&name).into()));\n+                        expr = make::expr_method_call(expr, \"field\", args);\n+                    }\n+                    let expr = make::expr_method_call(expr, \"finish\", make::arg_list(None));\n+                    let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+                    ted::replace(fn_.body().unwrap().syntax(), body.clone_for_update().syntax());\n+                }\n+                Some(ast::FieldList::TupleFieldList(field_list)) => {}\n+                None => {} // `Debug` cannot be implemented for an incomplete struct.\n+            }\n+        }\n+    }\n+}\n+\n fn update_attribute(\n     builder: &mut AssistBuilder,\n     input: &ast::TokenTree,"}, {"sha": "54dde4767c3ca471283d30411f27b19fc851ca28", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e2ab2e12a0e1ce0836cd1cdebf6338580f2aca14", "patch": "@@ -1363,8 +1363,8 @@ trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n struct S;\n \n impl Debug for S {\n-    fn fmt(&self, f: &mut Formatter) -> Result<()> {\n-        ${0:todo!()}\n+    $0fn fmt(&self, f: &mut Formatter) -> Result<()> {\n+        f.debug_struct(S)\n     }\n }\n \"#####,"}]}