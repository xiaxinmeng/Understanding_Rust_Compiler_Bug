{"sha": "8d786dc4c3ce26dbb3432023c7461bd879993bfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNzg2ZGM0YzNjZTI2ZGJiMzQzMjAyM2M3NDYxYmQ4Nzk5OTNiZmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T20:26:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T20:42:21Z"}, "message": "Replace Range<usize> usage with TextRange", "tree": {"sha": "48c00ba0590c4d00052317151aa82d69e365de32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c00ba0590c4d00052317151aa82d69e365de32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d786dc4c3ce26dbb3432023c7461bd879993bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d786dc4c3ce26dbb3432023c7461bd879993bfd", "html_url": "https://github.com/rust-lang/rust/commit/8d786dc4c3ce26dbb3432023c7461bd879993bfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d786dc4c3ce26dbb3432023c7461bd879993bfd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43359b64e98aeb73d3d63c883054644ba27e608", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43359b64e98aeb73d3d63c883054644ba27e608", "html_url": "https://github.com/rust-lang/rust/commit/c43359b64e98aeb73d3d63c883054644ba27e608"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "74bb6de35b1e0c7aca7ccddb7604c5ad2a048d03", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8d786dc4c3ce26dbb3432023c7461bd879993bfd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d786dc4c3ce26dbb3432023c7461bd879993bfd/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=8d786dc4c3ce26dbb3432023c7461bd879993bfd", "patch": "@@ -1,8 +1,8 @@\n //! A higher level attributes based on TokenTree, with also some shortcuts.\n \n use std::{\n-    cmp::Ordering,\n-    ops::{self, Range},\n+    convert::{TryFrom, TryInto},\n+    ops,\n     sync::Arc,\n };\n \n@@ -479,16 +479,17 @@ impl AttrsWithOwner {\n             if !doc.is_empty() {\n                 for line in doc.split('\\n') {\n                     let line = line.trim_end();\n+                    let line_len = line.len();\n                     let (offset, line) = match line.char_indices().nth(indent) {\n                         Some((offset, _)) => (offset, &line[offset..]),\n                         None => (0, line),\n                     };\n                     let buf_offset = buf.len();\n                     buf.push_str(line);\n                     mapping.push((\n-                        Range { start: buf_offset, end: buf.len() },\n+                        TextRange::new(buf_offset.try_into().ok()?, buf.len().try_into().ok()?),\n                         idx,\n-                        Range { start: offset, end: line.len() },\n+                        TextRange::new(offset.try_into().ok()?, line_len.try_into().ok()?),\n                     ));\n                     buf.push('\\n');\n                 }\n@@ -565,31 +566,18 @@ pub struct DocsRangeMap {\n     // (docstring-line-range, attr_index, attr-string-range)\n     // a mapping from the text range of a line of the [`Documentation`] to the attribute index and\n     // the original (untrimmed) syntax doc line\n-    mapping: Vec<(Range<usize>, u32, Range<usize>)>,\n+    mapping: Vec<(TextRange, u32, TextRange)>,\n }\n \n impl DocsRangeMap {\n-    pub fn map(&self, range: Range<usize>) -> Option<InFile<TextRange>> {\n-        let found = self\n-            .mapping\n-            .binary_search_by(|(probe, ..)| {\n-                if probe.contains(&range.start) {\n-                    Ordering::Equal\n-                } else {\n-                    probe.start.cmp(&range.end)\n-                }\n-            })\n-            .ok()?;\n+    pub fn map(&self, range: TextRange) -> Option<InFile<TextRange>> {\n+        let found = self.mapping.binary_search_by(|(probe, ..)| probe.ordering(range)).ok()?;\n         let (line_docs_range, idx, original_line_src_range) = self.mapping[found].clone();\n-        if range.end > line_docs_range.end {\n+        if !line_docs_range.contains_range(range) {\n             return None;\n         }\n \n-        let relative_range = Range {\n-            start: range.start - line_docs_range.start,\n-            end: range.end - line_docs_range.start,\n-        };\n-        let range_len = TextSize::from((range.end - range.start) as u32);\n+        let relative_range = range - line_docs_range.start();\n \n         let &InFile { file_id, value: ref source } = &self.source[idx as usize];\n         match source {\n@@ -599,12 +587,10 @@ impl DocsRangeMap {\n                 let text_range = comment.syntax().text_range();\n                 let range = TextRange::at(\n                     text_range.start()\n-                        + TextSize::from(\n-                            (comment.prefix().len()\n-                                + original_line_src_range.start\n-                                + relative_range.start) as u32,\n-                        ),\n-                    text_range.len().min(range_len),\n+                        + TextSize::try_from(comment.prefix().len()).ok()?\n+                        + original_line_src_range.start()\n+                        + relative_range.start(),\n+                    text_range.len().min(range.len()),\n                 );\n                 Some(InFile { file_id, value: range })\n             }"}, {"sha": "2edd551cbcaa89cd3209b8cd1f0571ad5e4d5e2f", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8d786dc4c3ce26dbb3432023c7461bd879993bfd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d786dc4c3ce26dbb3432023c7461bd879993bfd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=8d786dc4c3ce26dbb3432023c7461bd879993bfd", "patch": "@@ -1,6 +1,9 @@\n //! Extracts, resolves and rewrites links and intra-doc links in markdown documentation.\n \n-use std::{convert::TryFrom, iter::once, ops::Range};\n+use std::{\n+    convert::{TryFrom, TryInto},\n+    iter::once,\n+};\n \n use itertools::Itertools;\n use pulldown_cmark::{BrokenLink, CowStr, Event, InlineStr, LinkType, Options, Parser, Tag};\n@@ -15,7 +18,9 @@ use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n-use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, TokenAtOffset, T};\n+use syntax::{\n+    ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, TextRange, TokenAtOffset, T,\n+};\n \n use crate::{FilePosition, Semantics};\n \n@@ -115,7 +120,7 @@ pub(crate) fn external_docs(\n /// Extracts all links from a given markdown text.\n pub(crate) fn extract_definitions_from_markdown(\n     markdown: &str,\n-) -> Vec<(Range<usize>, String, Option<hir::Namespace>)> {\n+) -> Vec<(TextRange, String, Option<hir::Namespace>)> {\n     Parser::new_with_broken_link_callback(\n         markdown,\n         Options::empty(),\n@@ -126,7 +131,11 @@ pub(crate) fn extract_definitions_from_markdown(\n         if let Event::Start(Tag::Link(_, target, title)) = event {\n             let link = if target.is_empty() { title } else { target };\n             let (link, ns) = parse_intra_doc_link(&link);\n-            Some((range, link.to_string(), ns))\n+            Some((\n+                TextRange::new(range.start.try_into().ok()?, range.end.try_into().ok()?),\n+                link.to_string(),\n+                ns,\n+            ))\n         } else {\n             None\n         }"}]}