{"sha": "d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMDdhODdkMzRjMWZjMzUyMWFhYWI3YTI1NzZmZmJhZjU5Y2IyY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T09:51:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T09:51:42Z"}, "message": "Auto merge of #80503 - JohnTitor:rollup-b26vglu, r=JohnTitor\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #79812 (Lint on redundant trailing semicolon after item)\n - #80348 (remove redundant clones (clippy::redundant_clone))\n - #80358 (Edit rustc_span documentation)\n - #80457 (Add missing commas to `rustc_ast_pretty::pp` docs)\n - #80461 (Add llvm-libunwind change to bootstrap CHANGELOG)\n - #80464 (Use Option::map_or instead of open coding it)\n - #80465 (Fix typo in ffi-pure.md)\n - #80467 (More uses of the matches! macro)\n - #80469 (Fix small typo in time comment)\n - #80472 (Use sans-serif font for the \"all items\" page links)\n - #80477 (Make forget intrinsic safe)\n - #80482 (don't clone copy types)\n - #80487 (don't redundantly repeat field names)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a4ea1c022cc428edb66f77ac2661f5eb2e3aa227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ea1c022cc428edb66f77ac2661f5eb2e3aa227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "html_url": "https://github.com/rust-lang/rust/commit/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c403be11bef38638b38012be80444ad3f09dde", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c403be11bef38638b38012be80444ad3f09dde", "html_url": "https://github.com/rust-lang/rust/commit/b9c403be11bef38638b38012be80444ad3f09dde"}, {"sha": "3812909919bd8a2a65b825acbb27f9f7748f626d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3812909919bd8a2a65b825acbb27f9f7748f626d", "html_url": "https://github.com/rust-lang/rust/commit/3812909919bd8a2a65b825acbb27f9f7748f626d"}], "stats": {"total": 306, "additions": 164, "deletions": 142}, "files": [{"sha": "fa0ef165cb4f3cf22f07b4cb88fca188a23ca57a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1092,15 +1092,9 @@ impl Expr {\n         if let ExprKind::Block(ref block, _) = self.kind {\n             match block.stmts.last().map(|last_stmt| &last_stmt.kind) {\n                 // Implicit return\n-                Some(&StmtKind::Expr(_)) => true,\n-                Some(&StmtKind::Semi(ref expr)) => {\n-                    if let ExprKind::Ret(_) = expr.kind {\n-                        // Last statement is explicit return.\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n+                Some(StmtKind::Expr(_)) => true,\n+                // Last statement is an explicit return?\n+                Some(StmtKind::Semi(expr)) => matches!(expr.kind, ExprKind::Ret(_)),\n                 // This is a block that doesn't end in either an implicit or explicit return.\n                 _ => false,\n             }\n@@ -1950,7 +1944,7 @@ impl TyKind {\n     }\n \n     pub fn is_unit(&self) -> bool {\n-        if let TyKind::Tup(ref tys) = *self { tys.is_empty() } else { false }\n+        matches!(self, TyKind::Tup(tys) if tys.is_empty())\n     }\n }\n "}, {"sha": "f08f514f6f7f65692b810365b4858588cf9f4f66", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1857,12 +1857,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             output,\n             c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n-                let is_mutable_pat = match arg.pat.kind {\n-                    PatKind::Ident(BindingMode::ByValue(mt) | BindingMode::ByRef(mt), _, _) => {\n-                        mt == Mutability::Mut\n-                    }\n-                    _ => false,\n-                };\n+                use BindingMode::{ByRef, ByValue};\n+                let is_mutable_pat = matches!(\n+                    arg.pat.kind,\n+                    PatKind::Ident(ByValue(Mutability::Mut) | ByRef(Mutability::Mut), ..)\n+                );\n \n                 match arg.ty.kind {\n                     TyKind::ImplicitSelf if is_mutable_pat => hir::ImplicitSelfKind::Mut,"}, {"sha": "6a9d6d2ed121eabad7d4405414c866b44a65e449", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -397,10 +397,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match i.kind {\n             ast::ForeignItemKind::Fn(..) | ast::ForeignItemKind::Static(..) => {\n                 let link_name = self.sess.first_attr_value_str_by_name(&i.attrs, sym::link_name);\n-                let links_to_llvm = match link_name {\n-                    Some(val) => val.as_str().starts_with(\"llvm.\"),\n-                    _ => false,\n-                };\n+                let links_to_llvm =\n+                    link_name.map_or(false, |val| val.as_str().starts_with(\"llvm.\"));\n                 if links_to_llvm {\n                     gate_feature_post!(\n                         &self,"}, {"sha": "ea298d28e72c6a983bc7409067d6273c635fbfca", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -75,15 +75,15 @@\n //! breaking inconsistently to become\n //!\n //! ```\n-//! foo(hello, there\n+//! foo(hello, there,\n //!     good, friends);\n //! ```\n //!\n //! whereas a consistent breaking would yield:\n //!\n //! ```\n //! foo(hello,\n-//!     there\n+//!     there,\n //!     good,\n //!     friends);\n //! ```"}, {"sha": "e27eac3f69b00e5fe25620529303c436cf53012c", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -116,7 +116,7 @@ pub struct NativeLib {\n \n impl From<&cstore::NativeLib> for NativeLib {\n     fn from(lib: &cstore::NativeLib) -> Self {\n-        NativeLib { kind: lib.kind.clone(), name: lib.name.clone(), cfg: lib.cfg.clone() }\n+        NativeLib { kind: lib.kind, name: lib.name, cfg: lib.cfg.clone() }\n     }\n }\n "}, {"sha": "e2cbb09ce5e6d29e54c70975f4ff5c49f5903298", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -523,7 +523,7 @@ where\n                             successors_len: 0,\n                             min_depth: depth,\n                             min_cycle_root: successor_node,\n-                            successor_node: successor_node,\n+                            successor_node,\n                         });\n                         continue 'recurse;\n                     }"}, {"sha": "56d9634213ae515b4c39c85d86a55b36b1bb249a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1317,7 +1317,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         if !value.needs_infer() {\n-            return value.clone(); // Avoid duplicated subst-folding.\n+            return value; // Avoid duplicated subst-folding.\n         }\n         let mut r = resolve::OpportunisticVarResolver::new(self);\n         value.fold_with(&mut r)"}, {"sha": "0fe6564880f010b8e46de5a64a3c589753a39f34", "filename": "compiler/rustc_lint/src/redundant_semicolon.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fredundant_semicolon.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -28,40 +28,26 @@ declare_lint_pass!(RedundantSemicolons => [REDUNDANT_SEMICOLONS]);\n \n impl EarlyLintPass for RedundantSemicolons {\n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n-        let mut after_item_stmt = false;\n         let mut seq = None;\n         for stmt in block.stmts.iter() {\n             match (&stmt.kind, &mut seq) {\n                 (StmtKind::Empty, None) => seq = Some((stmt.span, false)),\n                 (StmtKind::Empty, Some(seq)) => *seq = (seq.0.to(stmt.span), true),\n-                (_, seq) => {\n-                    maybe_lint_redundant_semis(cx, seq, after_item_stmt);\n-                    after_item_stmt = matches!(stmt.kind, StmtKind::Item(_));\n-                }\n+                (_, seq) => maybe_lint_redundant_semis(cx, seq),\n             }\n         }\n-        maybe_lint_redundant_semis(cx, &mut seq, after_item_stmt);\n+        maybe_lint_redundant_semis(cx, &mut seq);\n     }\n }\n \n-fn maybe_lint_redundant_semis(\n-    cx: &EarlyContext<'_>,\n-    seq: &mut Option<(Span, bool)>,\n-    after_item_stmt: bool,\n-) {\n+fn maybe_lint_redundant_semis(cx: &EarlyContext<'_>, seq: &mut Option<(Span, bool)>) {\n     if let Some((span, multiple)) = seq.take() {\n         // FIXME: Find a better way of ignoring the trailing\n         // semicolon from macro expansion\n         if span == rustc_span::DUMMY_SP {\n             return;\n         }\n \n-        // FIXME: Lint on semicolons after item statements\n-        // once doing so doesn't break bootstrapping\n-        if after_item_stmt {\n-            return;\n-        }\n-\n         cx.struct_span_lint(REDUNDANT_SEMICOLONS, span, |lint| {\n             let (msg, rem) = if multiple {\n                 (\"unnecessary trailing semicolons\", \"remove these semicolons\")"}, {"sha": "00db19019c480d690023a13d2ecd605f23762d51", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -110,10 +110,7 @@ impl<'tcx> PlaceWithHirId<'tcx> {\n         base: PlaceBase,\n         projections: Vec<Projection<'tcx>>,\n     ) -> PlaceWithHirId<'tcx> {\n-        PlaceWithHirId {\n-            hir_id: hir_id,\n-            place: Place { base_ty: base_ty, base: base, projections: projections },\n-        }\n+        PlaceWithHirId { hir_id, place: Place { base_ty, base, projections } }\n     }\n }\n "}, {"sha": "023555d91cc920d71d29e53fcf9c79738f5cc562", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -306,13 +306,13 @@ macro_rules! make_mir_visitor {\n \n                 let mut index = 0;\n                 for statement in statements {\n-                    let location = Location { block: block, statement_index: index };\n+                    let location = Location { block, statement_index: index };\n                     self.visit_statement(statement, location);\n                     index += 1;\n                 }\n \n                 if let Some(terminator) = terminator {\n-                    let location = Location { block: block, statement_index: index };\n+                    let location = Location { block, statement_index: index };\n                     self.visit_terminator(terminator, location);\n                 }\n             }"}, {"sha": "4475d4e9f2deac8421494998ecdbb44ab7975a0b", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1634,7 +1634,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let layout = tcx.intern_layout(Layout {\n             variants: Variants::Multiple {\n-                tag: tag,\n+                tag,\n                 tag_encoding: TagEncoding::Direct,\n                 tag_field: tag_index,\n                 variants,"}, {"sha": "db2fa5730a338b2e6129dbaf66d38273ae9fe34b", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -328,8 +328,8 @@ struct SplitIntRange {\n }\n \n impl SplitIntRange {\n-    fn new(r: IntRange) -> Self {\n-        SplitIntRange { range: r.clone(), borders: Vec::new() }\n+    fn new(range: IntRange) -> Self {\n+        SplitIntRange { range, borders: Vec::new() }\n     }\n \n     /// Internal use"}, {"sha": "efbb0a23a6f012a679f80ed764775d90c1bf9b7e", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -4,24 +4,25 @@ use std::str::FromStr;\n \n use rustc_macros::HashStable_Generic;\n \n-/// The edition of the compiler (RFC 2052)\n+/// The edition of the compiler. (See [RFC 2052](https://github.com/rust-lang/rfcs/blob/master/text/2052-epochs.md).)\n #[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, Encodable, Decodable, Eq)]\n #[derive(HashStable_Generic)]\n pub enum Edition {\n-    // editions must be kept in order, oldest to newest\n+    // When adding new editions, be sure to do the following:\n+    //\n+    // - update the `ALL_EDITIONS` const\n+    // - update the `EDITION_NAME_LIST` const\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // Editions *must* be kept in order, oldest to newest.\n     /// The 2015 edition\n     Edition2015,\n     /// The 2018 edition\n     Edition2018,\n-    // when adding new editions, be sure to update:\n-    //\n-    // - Update the `ALL_EDITIONS` const\n-    // - Update the EDITION_NAME_LIST const\n-    // - add a `rust_####()` function to the session\n-    // - update the enum in Cargo's sources as well\n }\n \n-// must be in order from oldest to newest\n+// Must be in order from oldest to newest.\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n pub const EDITION_NAME_LIST: &str = \"2015|2018\";"}, {"sha": "cea7871923bc689dc44ca295518c64f8c502eeac", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1,10 +1,16 @@\n+//! Levenshtein distances.\n+//!\n+//! The [Levenshtein distance] is a metric for measuring the difference between two strings.\n+//!\n+//! [Levenshtein distance]: https://en.wikipedia.org/wiki/Levenshtein_distance\n+\n use crate::symbol::Symbol;\n use std::cmp;\n \n #[cfg(test)]\n mod tests;\n \n-/// Finds the Levenshtein distance between two strings\n+/// Finds the Levenshtein distance between two strings.\n pub fn lev_distance(a: &str, b: &str) -> usize {\n     // cases which don't require further computation\n     if a.is_empty() {\n@@ -35,14 +41,14 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n     dcol[t_last + 1]\n }\n \n-/// Finds the best match for a given word in the given iterator\n+/// Finds the best match for a given word in the given iterator.\n ///\n /// As a loose rule to avoid the obviously incorrect suggestions, it takes\n /// an optional limit for the maximum allowable edit distance, which defaults\n /// to one-third of the given word.\n ///\n-/// Besides Levenshtein, we use case insensitive comparison to improve accuracy on an edge case with\n-/// a lower(upper)case letters mismatch.\n+/// Besides Levenshtein, we use case insensitive comparison to improve accuracy\n+/// on an edge case with a lower(upper)case letters mismatch.\n #[cold]\n pub fn find_best_match_for_name(\n     name_vec: &[Symbol],\n@@ -98,7 +104,7 @@ fn find_match_by_sorted_words(iter_names: &[Symbol], lookup: &str) -> Option<Sym\n \n fn sort_by_words(name: &str) -> String {\n     let mut split_words: Vec<&str> = name.split('_').collect();\n-    // We are sorting primitive &strs and can use unstable sort here\n+    // We are sorting primitive &strs and can use unstable sort here.\n     split_words.sort_unstable();\n     split_words.join(\"_\")\n }"}, {"sha": "8009530717566370f18e0d2448af299c5c769469", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1,4 +1,13 @@\n-//! The source positions and related helper functions.\n+//! Source positions and related helper functions.\n+//!\n+//! Important concepts in this module include:\n+//!\n+//! - the *span*, represented by [`SpanData`] and related types;\n+//! - source code as represented by a [`SourceMap`]; and\n+//! - interned strings, represented by [`Symbol`]s, with some common symbols available statically in the [`sym`] module.\n+//!\n+//! Unlike most compilers, the span contains not only the position in the source code, but also various other metadata,\n+//! such as the edition and macro hygiene. This metadata is stored in [`SyntaxContext`] and [`ExpnData`].\n //!\n //! ## Note\n //!\n@@ -124,7 +133,7 @@ pub enum RealFileName {\n \n impl RealFileName {\n     /// Returns the path suitable for reading from the file system on the local host.\n-    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n+    /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn local_path(&self) -> &Path {\n         match self {\n             RealFileName::Named(p)\n@@ -133,7 +142,7 @@ impl RealFileName {\n     }\n \n     /// Returns the path suitable for reading from the file system on the local host.\n-    /// Avoid embedding this in build artifacts; see `stable_name` for that.\n+    /// Avoid embedding this in build artifacts; see `stable_name()` for that.\n     pub fn into_local_path(self) -> PathBuf {\n         match self {\n             RealFileName::Named(p)\n@@ -143,7 +152,7 @@ impl RealFileName {\n \n     /// Returns the path suitable for embedding into build artifacts. Note that\n     /// a virtualized path will not correspond to a valid file system path; see\n-    /// `local_path` for something that is more likely to return paths into the\n+    /// `local_path()` for something that is more likely to return paths into the\n     /// local host file system.\n     pub fn stable_name(&self) -> &Path {\n         match self {\n@@ -173,7 +182,7 @@ pub enum FileName {\n     /// Custom sources for explicit parser calls from plugins and drivers.\n     Custom(String),\n     DocTest(PathBuf, isize),\n-    /// Post-substitution inline assembly from LLVM\n+    /// Post-substitution inline assembly from LLVM.\n     InlineAsm(u64),\n }\n \n@@ -266,14 +275,17 @@ impl FileName {\n     }\n }\n \n+/// Represents a span.\n+///\n /// Spans represent a region of code, used for error reporting. Positions in spans\n-/// are *absolute* positions from the beginning of the source_map, not positions\n-/// relative to `SourceFile`s. Methods on the `SourceMap` can be used to relate spans back\n+/// are *absolute* positions from the beginning of the [`SourceMap`], not positions\n+/// relative to [`SourceFile`]s. Methods on the `SourceMap` can be used to relate spans back\n /// to the original source.\n-/// You must be careful if the span crosses more than one file - you will not be\n+///\n+/// You must be careful if the span crosses more than one file, since you will not be\n /// able to use many of the functions on spans in source_map and you cannot assume\n-/// that the length of the `span = hi - lo`; there may be space in the `BytePos`\n-/// range between files.\n+/// that the length of the span is equal to `span.hi - span.lo`; there may be space in the\n+/// [`BytePos`] range between files.\n ///\n /// `SpanData` is public because `Span` uses a thread-local interner and can't be\n /// sent to other threads, but some pieces of performance infra run in a separate thread.\n@@ -384,7 +396,7 @@ impl Span {\n         Span::new(lo, hi, SyntaxContext::root())\n     }\n \n-    /// Returns a new span representing an empty span at the beginning of this span\n+    /// Returns a new span representing an empty span at the beginning of this span.\n     #[inline]\n     pub fn shrink_to_lo(self) -> Span {\n         let span = self.data();\n@@ -398,7 +410,7 @@ impl Span {\n     }\n \n     #[inline]\n-    /// Returns true if hi == lo\n+    /// Returns `true` if `hi == lo`.\n     pub fn is_empty(&self) -> bool {\n         let span = self.data();\n         span.hi == span.lo\n@@ -512,7 +524,7 @@ impl Span {\n     }\n \n     /// Checks if a span is \"internal\" to a macro in which `unsafe`\n-    /// can be used without triggering the `unsafe_code` lint\n+    /// can be used without triggering the `unsafe_code` lint.\n     //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n     pub fn allows_unsafe(&self) -> bool {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n@@ -700,6 +712,7 @@ impl Span {\n     }\n }\n \n+/// A span together with some additional data.\n #[derive(Clone, Debug)]\n pub struct SpanLabel {\n     /// The span we are going to include in the final snippet.\n@@ -743,7 +756,7 @@ impl<D: Decoder> Decodable<D> for Span {\n /// any spans that are debug-printed during the closure's execution.\n ///\n /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n-/// (see `rustc_interface::callbacks::span_debug1). However, some parts\n+/// (see `rustc_interface::callbacks::span_debug1`). However, some parts\n /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n /// a `TyCtxt` is available. In this case, we fall back to\n /// the `SourceMap` provided to this function. If that is not available,\n@@ -994,9 +1007,9 @@ pub enum ExternalSource {\n     Unneeded,\n     Foreign {\n         kind: ExternalSourceKind,\n-        /// This SourceFile's byte-offset within the source_map of its original crate\n+        /// This SourceFile's byte-offset within the source_map of its original crate.\n         original_start_pos: BytePos,\n-        /// The end of this SourceFile within the source_map of its original crate\n+        /// The end of this SourceFile within the source_map of its original crate.\n         original_end_pos: BytePos,\n     },\n }\n@@ -1099,7 +1112,7 @@ impl SourceFileHash {\n     }\n }\n \n-/// A single source in the `SourceMap`.\n+/// A single source in the [`SourceMap`].\n #[derive(Clone)]\n pub struct SourceFile {\n     /// The name of the file that the source came from. Source that doesn't\n@@ -1580,7 +1593,7 @@ fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {\n \n /// Replaces `\\r\\n` with `\\n` in-place in `src`.\n ///\n-/// Returns error if there's a lone `\\r` in the string\n+/// Returns error if there's a lone `\\r` in the string.\n fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {\n     if !src.as_bytes().contains(&b'\\r') {\n         return;\n@@ -1705,13 +1718,16 @@ macro_rules! impl_pos {\n }\n \n impl_pos! {\n-    /// A byte offset. Keep this small (currently 32-bits), as AST contains\n-    /// a lot of them.\n+    /// A byte offset.\n+    ///\n+    /// Keep this small (currently 32-bits), as AST contains a lot of them.\n     #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n     pub struct BytePos(pub u32);\n \n-    /// A character offset. Because of multibyte UTF-8 characters, a byte offset\n-    /// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n+    /// A character offset.\n+    ///\n+    /// Because of multibyte UTF-8 characters, a byte offset\n+    /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]\n     /// values to `CharPos` values as necessary.\n     #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n     pub struct CharPos(pub usize);\n@@ -1835,8 +1851,9 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n }\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n-/// This is a hack to allow using the `HashStable_Generic` derive macro\n-/// instead of implementing everything in librustc_middle.\n+///\n+/// This is a hack to allow using the [`HashStable_Generic`] derive macro\n+/// instead of implementing everything in rustc_middle.\n pub trait HashStableContext {\n     fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn hash_crate_num(&mut self, _: CrateNum, hasher: &mut StableHasher);\n@@ -1856,6 +1873,7 @@ where\n     /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)\n     /// triple, which stays the same even if the containing `SourceFile` has moved\n     /// within the `SourceMap`.\n+    ///\n     /// Also note that we are hashing byte offsets for the column, not unicode\n     /// codepoint offsets. For the purpose of the hash that's sufficient.\n     /// Also, hashing filenames is expensive so we avoid doing it twice when the"}, {"sha": "fefc0cb48ddd8efea9b86f5346d4b2555ebcd75c", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1,9 +1,11 @@\n-//! The `SourceMap` tracks all the source code used within a single crate, mapping\n+//! Types for tracking pieces of source code within a crate.\n+//!\n+//! The [`SourceMap`] tracks all the source code used within a single crate, mapping\n //! from integer byte positions to the original source code location. Each bit\n //! of source parsed during crate parsing (typically files, in-memory strings,\n //! or various bits of macro expansion) cover a continuous range of bytes in the\n-//! `SourceMap` and are represented by `SourceFile`s. Byte positions are stored in\n-//! `Span` and used pervasively in the compiler. They are absolute positions\n+//! `SourceMap` and are represented by [`SourceFile`]s. Byte positions are stored in\n+//! [`Span`] and used pervasively in the compiler. They are absolute positions\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n "}, {"sha": "ceb9b59b13ad1609489eab9cd8ef03307a42b25f", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxIndexSet;\n \n /// A compressed span.\n ///\n-/// `SpanData` is 12 bytes, which is a bit too big to stick everywhere. `Span`\n+/// Whereas [`SpanData`] is 12 bytes, which is a bit too big to stick everywhere, `Span`\n /// is a form that only takes up 8 bytes, with less space for the length and\n /// context. The vast majority (99.9%+) of `SpanData` instances will fit within\n /// those 8 bytes; any `SpanData` whose fields don't fit into a `Span` are\n@@ -42,13 +42,11 @@ use rustc_data_structures::fx::FxIndexSet;\n /// - `base` is 32 bits in both `Span` and `SpanData`, which means that `base`\n ///   values never cause interning. The number of bits needed for `base`\n ///   depends on the crate size. 32 bits allows up to 4 GiB of code in a crate.\n-///   `script-servo` is the largest crate in `rustc-perf`, requiring 26 bits\n-///   for some spans.\n /// - `len` is 15 bits in `Span` (a u16, minus 1 bit for the tag) and 32 bits\n ///   in `SpanData`, which means that large `len` values will cause interning.\n ///   The number of bits needed for `len` does not depend on the crate size.\n-///   The most common number of bits for `len` are 0--7, with a peak usually at\n-///   3 or 4, and then it drops off quickly from 8 onwards. 15 bits is enough\n+///   The most common numbers of bits for `len` are from 0 to 7, with a peak usually\n+///   at 3 or 4, and then it drops off quickly from 8 onwards. 15 bits is enough\n ///   for 99.99%+ of cases, but larger values (sometimes 20+ bits) might occur\n ///   dozens of times in a typical crate.\n /// - `ctxt` is 16 bits in `Span` and 32 bits in `SpanData`, which means that"}, {"sha": "673dec6c7f9a74b81abe70d5cd8e19e8fcfea593", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -92,6 +92,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n         | sym::rustc_peek\n         | sym::maxnumf64\n         | sym::type_name\n+        | sym::forget\n         | sym::variant_count => hir::Unsafety::Normal,\n         _ => hir::Unsafety::Unsafe,\n     }"}, {"sha": "e8cbefd44ee6d842477c1c4dc905e9bd5930dc79", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let min_cap_list = match root_var_min_capture_list.get_mut(&var_hir_id) {\n                 None => {\n-                    let min_cap_list = vec![ty::CapturedPlace { place: place, info: capture_info }];\n+                    let min_cap_list = vec![ty::CapturedPlace { place, info: capture_info }];\n                     root_var_min_capture_list.insert(var_hir_id, min_cap_list);\n                     continue;\n                 }"}, {"sha": "a601123c8d0555a8acf5c0277beb54af279dd391", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         kind: ProjectionKind,\n     ) -> PlaceWithHirId<'tcx> {\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: kind, ty: ty });\n+        projections.push(Projection { kind, ty });\n         let ret = PlaceWithHirId::new(\n             node.hir_id(),\n             base_place.place.base_ty,"}, {"sha": "87956787242ac6216aa6396aa3af413c1498fc9d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -151,9 +151,14 @@ pub const fn forget<T>(t: T) {\n #[inline]\n #[unstable(feature = \"forget_unsized\", issue = \"none\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n+    #[cfg(bootstrap)]\n     // SAFETY: the forget intrinsic could be safe, but there's no point in making it safe since\n     // we'll be implementing this function soon via `ManuallyDrop`\n-    unsafe { intrinsics::forget(t) }\n+    unsafe {\n+        intrinsics::forget(t)\n+    }\n+    #[cfg(not(bootstrap))]\n+    intrinsics::forget(t)\n }\n \n /// Returns the size of a type in bytes."}, {"sha": "23a5c81c0053bb4abdf8b2cc2c4f520dcc035b0c", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -237,7 +237,7 @@ mod inner {\n         // `denom` field.\n         //\n         // Encoding this as a single `AtomicU64` allows us to use `Relaxed`\n-        // operations, as we are only interested in in the effects on a single\n+        // operations, as we are only interested in the effects on a single\n         // memory location.\n         static INFO_BITS: AtomicU64 = AtomicU64::new(0);\n "}, {"sha": "f899f21080ebee6fa1da91eb764aeb6452c3b0b8", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -4,7 +4,12 @@ All notable changes to bootstrap will be documented in this file.\n \n The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n-## [Non-breaking changes since the last major version]\n+\n+## [Changes since the last major version]\n+\n+- `llvm-libunwind` now accepts `in-tree` (formerly true), `system` or `no` (formerly false) [#77703](https://github.com/rust-lang/rust/pull/77703)\n+\n+### Non-breaking changes\n \n - `x.py check` needs opt-in to check tests (--all-targets) [#77473](https://github.com/rust-lang/rust/pull/77473)\n - The default bootstrap profiles are now located at `bootstrap/defaults/config.$PROFILE.toml` (previously they were located at `bootstrap/defaults/config.toml.$PROFILE`) [#77558](https://github.com/rust-lang/rust/pull/77558)"}, {"sha": "236ccb9f905368b0ed9eb1b2cf9e2c4d537a5dc8", "filename": "src/doc/unstable-book/src/language-features/ffi-pure.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -31,7 +31,7 @@ parameters (e.g. pointers), globals, etc. `#[ffi_pure]` functions are not\n referentially-transparent, and are therefore more relaxed than `#[ffi_const]`\n functions.\n \n-However, accesing global memory through volatile or atomic reads can violate the\n+However, accessing global memory through volatile or atomic reads can violate the\n requirement that two consecutive function calls shall return the same value.\n \n A `pure` function that returns unit has no effect on the abstract machine's"}, {"sha": "2a8b6a321f1c6c7841af3bea2684fecf6307892e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -597,7 +597,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                             ref mut bindings, ..\n                                         } => {\n                                             bindings.push(TypeBinding {\n-                                                name: left_name.clone(),\n+                                                name: left_name,\n                                                 kind: TypeBindingKind::Equality { ty: rhs },\n                                             });\n                                         }\n@@ -665,7 +665,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 GenericParamDefKind::Type { ref mut default, ref mut bounds, .. } => {\n                     // We never want something like `impl<T=Foo>`.\n                     default.take();\n-                    let generic_ty = Type::Generic(param.name.clone());\n+                    let generic_ty = Type::Generic(param.name);\n                     if !has_sized.contains(&generic_ty) {\n                         bounds.insert(0, GenericBound::maybe_sized(self.cx));\n                     }"}, {"sha": "e56556b5af70c4395662d51b5f2dba5600157eb7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         where_predicates.retain(|pred| match *pred {\n             WP::BoundPredicate { ty: Generic(ref g), ref bounds } => {\n                 if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n-                    sized_params.insert(g.clone());\n+                    sized_params.insert(*g);\n                     false\n                 } else {\n                     true\n@@ -847,7 +847,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 && !sized_params.contains(&tp.name)\n             {\n                 where_predicates.push(WP::BoundPredicate {\n-                    ty: Type::Generic(tp.name.clone()),\n+                    ty: Type::Generic(tp.name),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n                 })\n             }"}, {"sha": "2cde0c209ee9ba2905a52729fb7077111341d6c6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -74,7 +74,7 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             )\n         }));\n         m.items.extend(keywords.into_iter().map(|(def_id, kw)| {\n-            Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n+            Item::from_def_id_and_parts(def_id, Some(kw), ItemKind::KeywordItem(kw), cx)\n         }));\n     }\n \n@@ -307,7 +307,7 @@ crate fn strip_path(path: &Path) -> Path {\n         .segments\n         .iter()\n         .map(|s| PathSegment {\n-            name: s.name.clone(),\n+            name: s.name,\n             args: GenericArgs::AngleBracketed { args: vec![], bindings: vec![] },\n         })\n         .collect();"}, {"sha": "02dd42ce0c14df4691250a86f74180be66dd6ae5", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -558,12 +558,12 @@ crate fn make_test(\n                     \"fn main() {{ {}fn {}() -> Result<(), impl core::fmt::Debug> {{\\n\",\n                     inner_attr, inner_fn_name\n                 ),\n-                format!(\"\\n}}; {}().unwrap() }}\", inner_fn_name),\n+                format!(\"\\n}} {}().unwrap() }}\", inner_fn_name),\n             )\n         } else if test_id.is_some() {\n             (\n                 format!(\"fn main() {{ {}fn {}() {{\\n\", inner_attr, inner_fn_name),\n-                format!(\"\\n}}; {}() }}\", inner_fn_name),\n+                format!(\"\\n}} {}() }}\", inner_fn_name),\n             )\n         } else {\n             (\"fn main() {\\n\".into(), \"\\n}\".into())"}, {"sha": "465b2b1d69b34551d0b0945176c89afd36e924bc", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -292,7 +292,7 @@ use std::io;\n let mut input = String::new();\n io::stdin().read_line(&mut input)?;\n Ok::<(), io:Error>(())\n-}; _inner().unwrap() }\"\n+} _inner().unwrap() }\"\n         .to_string();\n     let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n     assert_eq!((output, len), (expected, 2));\n@@ -306,7 +306,7 @@ fn make_test_named_wrapper() {\n     let expected = \"#![allow(unused)]\n fn main() { #[allow(non_snake_case)] fn _doctest_main__some_unique_name() {\n assert_eq!(2+2, 4);\n-}; _doctest_main__some_unique_name() }\"\n+} _doctest_main__some_unique_name() }\"\n         .to_string();\n     let (output, len, _) =\n         make_test(input, None, false, &opts, DEFAULT_EDITION, Some(\"_some_unique_name\"));"}, {"sha": "9c206dfce591219d6bca9f6ca7c48abf9a23f21e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1027,7 +1027,7 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n     fn push(s: &mut String, text_length: &mut usize, text: &str) {\n         s.push_str(text);\n         *text_length += text.len();\n-    };\n+    }\n \n     'outer: for event in Parser::new_ext(md, summary_opts()) {\n         match &event {"}, {"sha": "407076ed6fff61953742943b777e06ab5d7b3c6e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -538,7 +538,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n         let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n-        let crate_name = krate.name.clone();\n+        let crate_name = krate.name;\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n         if !root_path.ends_with('/') {\n@@ -3967,7 +3967,7 @@ fn render_impl(\n         cache: &Cache,\n     ) {\n         for trait_item in &t.items {\n-            let n = trait_item.name.clone();\n+            let n = trait_item.name;\n             if i.items.iter().any(|m| m.name == n) {\n                 continue;\n             }"}, {"sha": "62b08e519bf5ced361751f68f4cdf31040ae4b67", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -122,7 +122,9 @@ h3.impl, h3.method, h3.type {\n h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .content table td:first-child > a,\n .collapse-toggle, div.item-list .out-of-band,\n-#source-sidebar, #sidebar-toggle {\n+#source-sidebar, #sidebar-toggle,\n+/* This selector is for the items listed in the \"all items\" page. */\n+#main > ul.docblock > li > a {\n \tfont-family: \"Fira Sans\", sans-serif;\n }\n "}, {"sha": "aa100363a38baee2b0ac67c6d858fe5cce13065e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1234,7 +1234,7 @@ impl LinkCollector<'_, '_> {\n     ) -> Option<(Res, Option<String>)> {\n         // Try to look up both the result and the corresponding side channel value\n         if let Some(ref cached) = self.visited_links.get(&key) {\n-            self.kind_side_channel.set(cached.side_channel.clone());\n+            self.kind_side_channel.set(cached.side_channel);\n             return Some(cached.res.clone());\n         }\n "}, {"sha": "096bba64c0bb882522373957cc04aa07f3df9440", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -4,27 +4,21 @@\n   fn forget(_1: T) -> () {\n       debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:18:18: 18:19\n       let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:18:24: 18:24\n-      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:19:14: 19:41\n-      let mut _3: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:19:39: 19:40\n-      scope 1 {\n-      }\n+      let mut _2: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:43\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:39: 19:40\n-          _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:19:39: 19:40\n--         _2 = std::intrinsics::forget::<T>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n+          _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n+-         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:19:14: 19:38\n--                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(Scalar(<ZST>)) }\n-+         _2 = const ();                   // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n-+         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:19:14: 19:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:19:5: 19:29\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(Scalar(<ZST>)) }\n++         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:40: 19:41\n-          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:43: 19:44\n-          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:18:24: 20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:31: 19:32\n           goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:20:1: 20:2\n       }\n   "}, {"sha": "d9891465dabb743fc4afd282f76549e7b2205f4c", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -16,7 +16,7 @@ pub fn size_of<T>() -> usize {\n \n // EMIT_MIR lower_intrinsics.forget.LowerIntrinsics.diff\n pub fn forget<T>(t: T) {\n-    unsafe { core::intrinsics::forget(t) };\n+    core::intrinsics::forget(t)\n }\n \n // EMIT_MIR lower_intrinsics.unreachable.LowerIntrinsics.diff"}, {"sha": "8c79630b7fd2cb5fb9776ae49f8be6843b63e894", "filename": "src/test/ui/lint/redundant-semicolon/item-stmt-semi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -1,10 +1,6 @@\n-// check-pass\n-// This test should stop compiling\n-// we decide to enable this lint for item statements.\n-\n #![deny(redundant_semicolons)]\n \n fn main() {\n-    fn inner() {};\n-    struct Bar {};\n+    fn inner() {}; //~ ERROR unnecessary\n+    struct Bar {}; //~ ERROR unnecessary\n }"}, {"sha": "451b152cbe5a05f4318e8f3508a7425dc3d9601f", "filename": "src/test/ui/lint/redundant-semicolon/item-stmt-semi.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fitem-stmt-semi.stderr?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -0,0 +1,20 @@\n+error: unnecessary trailing semicolon\n+  --> $DIR/item-stmt-semi.rs:4:18\n+   |\n+LL |     fn inner() {};\n+   |                  ^ help: remove this semicolon\n+   |\n+note: the lint level is defined here\n+  --> $DIR/item-stmt-semi.rs:1:9\n+   |\n+LL | #![deny(redundant_semicolons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary trailing semicolon\n+  --> $DIR/item-stmt-semi.rs:5:18\n+   |\n+LL |     struct Bar {};\n+   |                  ^ help: remove this semicolon\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "84981a52597327992a772f61ceff6ea23dcd59be", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -39,7 +39,7 @@ fn main() {\n         B(i32),\n         C,\n         D,\n-    };\n+    }\n     let x = E::A(2);\n     {\n         // lint"}, {"sha": "94c7c3cadacf749799ba4a32510e28466e560001", "filename": "src/tools/clippy/tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "patch": "@@ -51,7 +51,7 @@ fn main() {\n         B(i32),\n         C,\n         D,\n-    };\n+    }\n     let x = E::A(2);\n     {\n         // lint"}]}