{"sha": "276219e0e2ead9dfbe38c4f80ce53f078d25cd63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjIxOWUwZTJlYWQ5ZGZiZTM4YzRmODBjZTUzZjA3OGQyNWNkNjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-02T15:59:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:11:12Z"}, "message": "fix dumping MIR from another crate", "tree": {"sha": "a5643493c5beaccabd24d3e272cb76bb732be6f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5643493c5beaccabd24d3e272cb76bb732be6f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276219e0e2ead9dfbe38c4f80ce53f078d25cd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276219e0e2ead9dfbe38c4f80ce53f078d25cd63", "html_url": "https://github.com/rust-lang/rust/commit/276219e0e2ead9dfbe38c4f80ce53f078d25cd63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276219e0e2ead9dfbe38c4f80ce53f078d25cd63/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5bbcf3818285abd253930554da90fc97cba3690", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bbcf3818285abd253930554da90fc97cba3690", "html_url": "https://github.com/rust-lang/rust/commit/f5bbcf3818285abd253930554da90fc97cba3690"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "bef880ad386096e4501ae1f572b3eb6bfe8c8877", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/276219e0e2ead9dfbe38c4f80ce53f078d25cd63/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276219e0e2ead9dfbe38c4f80ce53f078d25cd63/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=276219e0e2ead9dfbe38c4f80ce53f078d25cd63", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n use rustc::mir::visit::Visitor;\n@@ -184,7 +183,7 @@ fn dump_path(\n     let mut file_path = PathBuf::new();\n     file_path.push(Path::new(&tcx.sess.opts.debugging_opts.dump_mir_dir));\n \n-    let item_name = tcx.hir()\n+    let item_name = tcx\n         .def_path(source.def_id)\n         .to_filename_friendly_no_crate();\n \n@@ -574,25 +573,26 @@ fn write_mir_sig(\n     mir: &Mir<'_>,\n     w: &mut dyn Write,\n ) -> io::Result<()> {\n-    let id = tcx.hir().as_local_node_id(src.def_id).unwrap();\n-    let body_owner_kind = tcx.hir().body_owner_kind(id);\n-    match (body_owner_kind, src.promoted) {\n+    use rustc::hir::def::Def;\n+\n+    debug!(\"write_mir_sig: {:?}\", src.def_id);\n+    let descr = tcx.describe_def(src.def_id).unwrap();\n+    match (descr, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in\", i)?,\n-        (hir::BodyOwnerKind::Closure, _) |\n-        (hir::BodyOwnerKind::Fn, _) => write!(w, \"fn\")?,\n-        (hir::BodyOwnerKind::Const, _) => write!(w, \"const\")?,\n-        (hir::BodyOwnerKind::Static(hir::MutImmutable), _) => write!(w, \"static\")?,\n-        (hir::BodyOwnerKind::Static(hir::MutMutable), _) => write!(w, \"static mut\")?,\n+        (Def::Fn(_), _) => write!(w, \"fn\")?,\n+        (Def::Const(_), _) => write!(w, \"const\")?,\n+        (Def::Static(_, /*is_mutbl*/false), _) => write!(w, \"static\")?,\n+        (Def::Static(_, /*is_mutbl*/true), _) => write!(w, \"static mut\")?,\n+        _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n \n     item_path::with_forced_impl_filename_line(|| {\n         // see notes on #41697 elsewhere\n         write!(w, \" {}\", tcx.item_path_str(src.def_id))\n     })?;\n \n-    match (body_owner_kind, src.promoted) {\n-        (hir::BodyOwnerKind::Closure, None) |\n-        (hir::BodyOwnerKind::Fn, None) => {\n+    match (descr, src.promoted) {\n+        (Def::Fn(_), None) => {\n             write!(w, \"(\")?;\n \n             // fn argument types.\n@@ -605,10 +605,11 @@ fn write_mir_sig(\n \n             write!(w, \") -> {}\", mir.return_ty())?;\n         }\n-        (hir::BodyOwnerKind::Const, _) | (hir::BodyOwnerKind::Static(_), _) | (_, Some(_)) => {\n+        (Def::Const(_), _) | (Def::Static(_, _), _) | (_, Some(_)) => {\n             assert_eq!(mir.arg_count, 0);\n             write!(w, \": {} =\", mir.return_ty())?;\n         }\n+        _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n \n     if let Some(yield_ty) = mir.yield_ty {"}]}