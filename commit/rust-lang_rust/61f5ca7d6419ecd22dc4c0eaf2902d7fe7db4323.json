{"sha": "61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjVjYTdkNjQxOWVjZDIyZGM0YzBlYWYyOTAyZDdmZTdkYjQzMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-05T07:40:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-05T07:40:36Z"}, "message": "Auto merge of #54703 - davidtwco:issue-52086, r=nikomatsakis\n\nerror message when trying to move from an Rc or Arc is ungreat\n\nFixes #52086.\n\nr? @nikomatsakis", "tree": {"sha": "7abf0dab8cabc00fcfef57072a25614858a91fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abf0dab8cabc00fcfef57072a25614858a91fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "html_url": "https://github.com/rust-lang/rust/commit/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bea5a0a6aef3966008787a25949344f8cf6942", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bea5a0a6aef3966008787a25949344f8cf6942", "html_url": "https://github.com/rust-lang/rust/commit/b8bea5a0a6aef3966008787a25949344f8cf6942"}, {"sha": "8c6d08b71f56541a540d365746aab460862d3149", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6d08b71f56541a540d365746aab460862d3149", "html_url": "https://github.com/rust-lang/rust/commit/8c6d08b71f56541a540d365746aab460862d3149"}], "stats": {"total": 228, "additions": 216, "deletions": 12}, "files": [{"sha": "b16739b4743a9ebb0070527216419f6388da4fb3", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -311,3 +311,5 @@ the source code.\n   - `freeze`: `libcore/marker.rs`\n   - `debug_trait`: `libcore/fmt/mod.rs`\n   - `non_zero`: `libcore/nonzero.rs`\n+  - `arc`: `liballoc/sync.rs`\n+  - `rc`: `liballoc/rc.rs`"}, {"sha": "915b8e7787e998d0d12fb19147172675cda8a236", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -282,6 +282,7 @@ struct RcBox<T: ?Sized> {\n /// type `T`.\n ///\n /// [get_mut]: #method.get_mut\n+#[cfg_attr(all(not(stage0), not(test)), lang = \"rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n     ptr: NonNull<RcBox<T>>,"}, {"sha": "9e245fbd7bbe563595a72054a70f69ed72a5dffe", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -199,6 +199,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// counting in general.\n ///\n /// [rc_examples]: ../../std/rc/index.html#examples\n+#[cfg_attr(all(not(stage0), not(test)), lang = \"arc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n     ptr: NonNull<ArcInner<T>>,"}, {"sha": "ef70a4cc45d56e0c95082d90bc88d6db1631d000", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -362,6 +362,9 @@ language_item_table! {\n     AlignOffsetLangItem,             \"align_offset\",            align_offset_fn;\n \n     TerminationTraitLangItem,        \"termination\",             termination;\n+\n+    Arc,                             \"arc\",                     arc;\n+    Rc,                              \"rc\",                      rc;\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {"}, {"sha": "3cc2b0f4d3ca4642b073c5f6aa7786f68da38913", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -1706,9 +1706,13 @@ bitflags! {\n         const IS_FUNDAMENTAL      = 1 << 2;\n         const IS_UNION            = 1 << 3;\n         const IS_BOX              = 1 << 4;\n+        /// Indicates whether the type is an `Arc`.\n+        const IS_ARC              = 1 << 5;\n+        /// Indicates whether the type is an `Rc`.\n+        const IS_RC               = 1 << 6;\n         /// Indicates whether the variant list of this ADT is `#[non_exhaustive]`.\n         /// (i.e., this flag is never set unless this ADT is an enum).\n-        const IS_VARIANT_LIST_NON_EXHAUSTIVE   = 1 << 5;\n+        const IS_VARIANT_LIST_NON_EXHAUSTIVE   = 1 << 7;\n     }\n }\n \n@@ -2028,6 +2032,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         if Some(did) == tcx.lang_items().owned_box() {\n             flags = flags | AdtFlags::IS_BOX;\n         }\n+        if Some(did) == tcx.lang_items().arc() {\n+            flags = flags | AdtFlags::IS_ARC;\n+        }\n+        if Some(did) == tcx.lang_items().rc() {\n+            flags = flags | AdtFlags::IS_RC;\n+        }\n         if kind == AdtKind::Enum && tcx.has_attr(did, \"non_exhaustive\") {\n             debug!(\"found non-exhaustive variant list for {:?}\", did);\n             flags = flags | AdtFlags::IS_VARIANT_LIST_NON_EXHAUSTIVE;\n@@ -2106,6 +2116,16 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.flags.intersects(AdtFlags::IS_PHANTOM_DATA)\n     }\n \n+    /// Returns `true` if this is `Arc<T>`.\n+    pub fn is_arc(&self) -> bool {\n+        self.flags.intersects(AdtFlags::IS_ARC)\n+    }\n+\n+    /// Returns `true` if this is `Rc<T>`.\n+    pub fn is_rc(&self) -> bool {\n+        self.flags.intersects(AdtFlags::IS_RC)\n+    }\n+\n     /// Returns true if this is Box<T>.\n     #[inline]\n     pub fn is_box(&self) -> bool {"}, {"sha": "bc8efa23ebb3395b266df7c7e5c30f6f0b2f2fcd", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -1602,6 +1602,22 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this type is an `Arc<T>`.\n+    pub fn is_arc(&self) -> bool {\n+        match self.sty {\n+            Adt(def, _) => def.is_arc(),\n+            _ => false,\n+        }\n+    }\n+\n+    /// Returns `true` if this type is an `Rc<T>`.\n+    pub fn is_rc(&self) -> bool {\n+        match self.sty {\n+            Adt(def, _) => def.is_rc(),\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_box(&self) -> bool {\n         match self.sty {\n             Adt(def, _) => def.is_box(),"}, {"sha": "693cfea3c95f0d4b3cbabdaa44d944abfb407c83", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -9,15 +9,19 @@\n // except according to those terms.\n \n use core::unicode::property::Pattern_White_Space;\n+use std::fmt::{self, Display};\n+\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n use borrow_check::prefixes::PrefixSet;\n-use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n-use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n+use dataflow::move_paths::{\n+    IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n+    LookupResult, MoveError, MovePathIndex,\n+};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n // Often when desugaring a pattern match we may have many individual moves in\n@@ -61,6 +65,22 @@ enum GroupedMoveError<'tcx> {\n     },\n }\n \n+enum BorrowedContentSource {\n+    Arc,\n+    Rc,\n+    Other,\n+}\n+\n+impl Display for BorrowedContentSource {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n+            BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n+            BorrowedContentSource::Other => write!(f, \"borrowed content\"),\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n     pub(crate) fn report_move_errors(&mut self, move_errors: Vec<(Place<'tcx>, MoveError<'tcx>)>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n@@ -305,9 +325,12 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n                                 diag\n                             }\n-                            _ => self.infcx.tcx.cannot_move_out_of(\n-                                span, \"borrowed content\", origin\n-                            ),\n+                            _ => {\n+                                let source = self.borrowed_content_source(place);\n+                                self.infcx.tcx.cannot_move_out_of(\n+                                    span, &format!(\"{}\", source), origin\n+                                )\n+                            },\n                         }\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n@@ -471,4 +494,94 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             );\n         }\n     }\n+\n+    fn borrowed_content_source(&self, place: &Place<'tcx>) -> BorrowedContentSource {\n+        // Look up the provided place and work out the move path index for it,\n+        // we'll use this to work back through where this value came from and check whether it\n+        // was originally part of an `Rc` or `Arc`.\n+        let initial_mpi = match self.move_data.rev_lookup.find(place) {\n+            LookupResult::Exact(mpi) | LookupResult::Parent(Some(mpi)) => mpi,\n+            _ => return BorrowedContentSource::Other,\n+        };\n+\n+        let mut queue = vec![initial_mpi];\n+        let mut visited = Vec::new();\n+        debug!(\"borrowed_content_source: queue={:?}\", queue);\n+        while let Some(mpi) = queue.pop() {\n+            debug!(\n+                \"borrowed_content_source: mpi={:?} queue={:?} visited={:?}\",\n+                mpi, queue, visited\n+            );\n+\n+            // Don't visit the same path twice.\n+            if visited.contains(&mpi) {\n+                continue;\n+            }\n+            visited.push(mpi);\n+\n+            for i in &self.move_data.init_path_map[mpi] {\n+                let init = &self.move_data.inits[*i];\n+                debug!(\"borrowed_content_source: init={:?}\", init);\n+                // We're only interested in statements that initialized a value, not the\n+                // initializations from arguments.\n+                let loc = match init.location {\n+                    InitLocation::Statement(stmt) => stmt,\n+                    _ => continue,\n+                };\n+\n+                let bbd = &self.mir[loc.block];\n+                let is_terminator = bbd.statements.len() == loc.statement_index;\n+                debug!(\"borrowed_content_source: loc={:?} is_terminator={:?}\", loc, is_terminator);\n+                if !is_terminator {\n+                    let stmt = &bbd.statements[loc.statement_index];\n+                    debug!(\"borrowed_content_source: stmt={:?}\", stmt);\n+                    // We're only interested in assignments (in particular, where the\n+                    // assignment came from - was it an `Rc` or `Arc`?).\n+                    if let StatementKind::Assign(_, box Rvalue::Ref(_, _, source)) = &stmt.kind {\n+                        let ty = source.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                        let ty = match ty.sty {\n+                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            _ => ty,\n+                        };\n+                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n+\n+                        if ty.is_arc() {\n+                            return BorrowedContentSource::Arc;\n+                        } else if ty.is_rc() {\n+                            return BorrowedContentSource::Rc;\n+                        } else {\n+                            queue.push(init.path);\n+                        }\n+                    }\n+                } else if let Some(Terminator {\n+                    kind: TerminatorKind::Call { args, .. },\n+                    ..\n+                }) = &bbd.terminator {\n+                    for arg in args {\n+                        let source = match arg {\n+                            Operand::Copy(place) | Operand::Move(place) => place,\n+                            _ => continue,\n+                        };\n+\n+                        let ty = source.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                        let ty = match ty.sty {\n+                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            _ => ty,\n+                        };\n+                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n+\n+                        if ty.is_arc() {\n+                            return BorrowedContentSource::Arc;\n+                        } else if ty.is_rc() {\n+                            return BorrowedContentSource::Rc;\n+                        } else {\n+                            queue.push(init.path);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        BorrowedContentSource::Other\n+    }\n }"}, {"sha": "d58beabb3038af551493e03d3d7a35312c100b9f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of an `Rc`\n+  --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:17:14\n+   |\n+LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n+   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "d58beabb3038af551493e03d3d7a35312c100b9f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:17:14\n    |\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n \n error: aborting due to previous error\n "}, {"sha": "c9c8cf104ce2e769fa4aa36749ce6b14f9c1894f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-deref.rs:14:14\n    |\n LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              cannot move out of borrowed content\n+   |              cannot move out of an `Rc`\n    |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error"}, {"sha": "248f4ba066023bd8470507506301f09370e1f71d", "filename": "src/test/ui/nll/issue-52086.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+struct Bar { field: Vec<i32> }\n+\n+fn main() {\n+    let x = Rc::new(Bar { field: vec![] });\n+    drop(x.field);\n+\n+    let y = Arc::new(Bar { field: vec![] });\n+    drop(y.field);\n+}"}, {"sha": "1455c49ea161c74946b93d7868c29a6eca9d0700", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of an `Rc`\n+  --> $DIR/issue-52086.rs:20:10\n+   |\n+LL |     drop(x.field);\n+   |          ^^^^^^^ cannot move out of an `Rc`\n+\n+error[E0507]: cannot move out of an `Arc`\n+  --> $DIR/issue-52086.rs:23:10\n+   |\n+LL |     drop(y.field);\n+   |          ^^^^^^^ cannot move out of an `Arc`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "8b8268b5b2c4986bf9973beb5bfc450b926d857f", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=61f5ca7d6419ecd22dc4c0eaf2902d7fe7db4323", "patch": "@@ -25,13 +25,13 @@ LL |     let s = **r;\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `*r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:40:13\n    |\n LL |     let s = *r;\n    |             ^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             cannot move out of an `Rc`\n    |             help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array"}]}