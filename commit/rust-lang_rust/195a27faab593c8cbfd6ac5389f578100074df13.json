{"sha": "195a27faab593c8cbfd6ac5389f578100074df13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NWEyN2ZhYWI1OTNjOGNiZmQ2YWM1Mzg5ZjU3ODEwMDA3NGRmMTM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-22T01:56:39Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-14T01:30:19Z"}, "message": "Move node id assigning into `resolve`", "tree": {"sha": "6f3c13511e156cd34b1bd5d1f6bef07a9db990d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f3c13511e156cd34b1bd5d1f6bef07a9db990d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195a27faab593c8cbfd6ac5389f578100074df13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195a27faab593c8cbfd6ac5389f578100074df13", "html_url": "https://github.com/rust-lang/rust/commit/195a27faab593c8cbfd6ac5389f578100074df13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195a27faab593c8cbfd6ac5389f578100074df13/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3265bd54b5b3f32d038273afec7554f007a5ce1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3265bd54b5b3f32d038273afec7554f007a5ce1d", "html_url": "https://github.com/rust-lang/rust/commit/3265bd54b5b3f32d038273afec7554f007a5ce1d"}], "stats": {"total": 130, "additions": 73, "deletions": 57}, "files": [{"sha": "81fb825604edf7875a943ef161b336a9e13b0b45", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 13, "deletions": 57, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=195a27faab593c8cbfd6ac5389f578100074df13", "patch": "@@ -50,7 +50,6 @@ use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use syntax::{ast, diagnostics, visit};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::fold::Folder;\n use syntax::parse::{self, PResult, token};\n use syntax::util::node_count::NodeCounter;\n use syntax;\n@@ -695,6 +694,19 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n                                          sess.diagnostic())\n     });\n \n+    let resolver_arenas = Resolver::arenas();\n+    let mut resolver = Resolver::new(sess, make_glob_map, &resolver_arenas);\n+\n+    let krate = time(sess.time_passes(), \"assigning node ids\", || resolver.assign_node_ids(krate));\n+\n+    if sess.opts.debugging_opts.input_stats {\n+        println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n+    }\n+\n+    if sess.opts.debugging_opts.ast_json {\n+        println!(\"{}\", json::as_json(&krate));\n+    }\n+\n     time(time_passes,\n          \"checking for inline asm in case the target doesn't support it\",\n          || no_asm::check_crate(sess, &krate));\n@@ -710,15 +722,6 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n         })\n     })?;\n \n-    if sess.opts.debugging_opts.input_stats {\n-        println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n-    }\n-\n-    krate = assign_node_ids(sess, krate);\n-\n-    let resolver_arenas = Resolver::arenas();\n-    let mut resolver = Resolver::new(sess, make_glob_map, &resolver_arenas);\n-\n     // Collect defintions for def ids.\n     time(sess.time_passes(), \"collecting defs\", || resolver.definitions.collect(&krate));\n \n@@ -783,53 +786,6 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     })\n }\n \n-pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n-    use syntax::ptr::P;\n-    use syntax::util::move_map::MoveMap;\n-\n-    struct NodeIdAssigner<'a> {\n-        sess: &'a Session,\n-    }\n-\n-    impl<'a> Folder for NodeIdAssigner<'a> {\n-        fn new_id(&mut self, old_id: ast::NodeId) -> ast::NodeId {\n-            assert_eq!(old_id, ast::DUMMY_NODE_ID);\n-            self.sess.next_node_id()\n-        }\n-\n-        fn fold_block(&mut self, block: P<ast::Block>) -> P<ast::Block> {\n-            block.map(|mut block| {\n-                block.id = self.new_id(block.id);\n-\n-                let stmt = block.stmts.pop();\n-                block.stmts = block.stmts.move_flat_map(|s| self.fold_stmt(s).into_iter());\n-                if let Some(ast::Stmt { node: ast::StmtKind::Expr(expr), span, .. }) = stmt {\n-                    let expr = self.fold_expr(expr);\n-                    block.stmts.push(ast::Stmt {\n-                        id: expr.id,\n-                        node: ast::StmtKind::Expr(expr),\n-                        span: span,\n-                    });\n-                } else if let Some(stmt) = stmt {\n-                    block.stmts.extend(self.fold_stmt(stmt));\n-                }\n-\n-                block\n-            })\n-        }\n-    }\n-\n-    let krate = time(sess.time_passes(),\n-                     \"assigning node ids\",\n-                     || NodeIdAssigner { sess: sess }.fold_crate(krate));\n-\n-    if sess.opts.debugging_opts.ast_json {\n-        println!(\"{}\", json::as_json(&krate));\n-    }\n-\n-    krate\n-}\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis."}, {"sha": "f3aa78bd4e2bab8a163b42af91127f035b2a48fc", "filename": "src/librustc_resolve/assign_ids.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_resolve%2Fassign_ids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_resolve%2Fassign_ids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fassign_ids.rs?ref=195a27faab593c8cbfd6ac5389f578100074df13", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use Resolver;\n+use rustc::session::Session;\n+use syntax::ast;\n+use syntax::fold::Folder;\n+use syntax::ptr::P;\n+use syntax::util::move_map::MoveMap;\n+\n+impl<'a> Resolver<'a> {\n+    pub fn assign_node_ids(&mut self, krate: ast::Crate) -> ast::Crate {\n+        NodeIdAssigner {\n+            sess: self.session,\n+        }.fold_crate(krate)\n+    }\n+}\n+\n+struct NodeIdAssigner<'a> {\n+    sess: &'a Session,\n+}\n+\n+impl<'a> Folder for NodeIdAssigner<'a> {\n+    fn new_id(&mut self, old_id: ast::NodeId) -> ast::NodeId {\n+        assert_eq!(old_id, ast::DUMMY_NODE_ID);\n+        self.sess.next_node_id()\n+    }\n+\n+    fn fold_block(&mut self, block: P<ast::Block>) -> P<ast::Block> {\n+        block.map(|mut block| {\n+            block.id = self.new_id(block.id);\n+\n+            let stmt = block.stmts.pop();\n+            block.stmts = block.stmts.move_flat_map(|s| self.fold_stmt(s).into_iter());\n+            if let Some(ast::Stmt { node: ast::StmtKind::Expr(expr), span, .. }) = stmt {\n+                // Avoid wasting a node id on a trailing expression statement,\n+                // which shares a HIR node with the expression itself.\n+                let expr = self.fold_expr(expr);\n+                block.stmts.push(ast::Stmt {\n+                    id: expr.id,\n+                    node: ast::StmtKind::Expr(expr),\n+                    span: span,\n+                });\n+            } else if let Some(stmt) = stmt {\n+                block.stmts.extend(self.fold_stmt(stmt));\n+            }\n+\n+            block\n+        })\n+    }\n+}\n+"}, {"sha": "15e9d85381cf24cb36a189b0dd476c4fb0298820", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195a27faab593c8cbfd6ac5389f578100074df13/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=195a27faab593c8cbfd6ac5389f578100074df13", "patch": "@@ -83,6 +83,7 @@ mod diagnostics;\n mod check_unused;\n mod build_reduced_graph;\n mod resolve_imports;\n+mod assign_ids;\n \n enum SuggestionType {\n     Macro(String),"}]}