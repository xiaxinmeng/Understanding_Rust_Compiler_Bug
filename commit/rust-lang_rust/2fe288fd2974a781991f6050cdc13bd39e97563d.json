{"sha": "2fe288fd2974a781991f6050cdc13bd39e97563d", "node_id": "C_kwDOAAsO6NoAKDJmZTI4OGZkMjk3NGE3ODE5OTFmNjA1MGNkYzEzYmQzOWU5NzU2M2Q", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-06T12:04:33Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-06T12:04:33Z"}, "message": "emit the suspicious_auto_trait_impls for negative impls as well", "tree": {"sha": "22db0c143cbb30ce36ff2b231ee8e7867420d930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22db0c143cbb30ce36ff2b231ee8e7867420d930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe288fd2974a781991f6050cdc13bd39e97563d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe288fd2974a781991f6050cdc13bd39e97563d", "html_url": "https://github.com/rust-lang/rust/commit/2fe288fd2974a781991f6050cdc13bd39e97563d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe288fd2974a781991f6050cdc13bd39e97563d/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c0f83d773370150a6ea1b40b36b55566e40a73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0f83d773370150a6ea1b40b36b55566e40a73c", "html_url": "https://github.com/rust-lang/rust/commit/8c0f83d773370150a6ea1b40b36b55566e40a73c"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "47c47de8cedbaa3515e9b8fb8ddde220d8faebd1", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe288fd2974a781991f6050cdc13bd39e97563d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe288fd2974a781991f6050cdc13bd39e97563d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=2fe288fd2974a781991f6050cdc13bd39e97563d", "patch": "@@ -478,10 +478,6 @@ fn lint_auto_trait_impl<'tcx>(\n     trait_ref: ty::TraitRef<'tcx>,\n     impl_def_id: LocalDefId,\n ) {\n-    if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n-        return;\n-    }\n-\n     assert_eq!(trait_ref.substs.len(), 1);\n     let self_ty = trait_ref.self_ty();\n     let (self_type_did, substs) = match self_ty.kind() {"}, {"sha": "86ee2fd67039df20b90b431ef88b4d22246c5bf0", "filename": "tests/ui/auto-traits/suspicious-impls-lint.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fe288fd2974a781991f6050cdc13bd39e97563d/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe288fd2974a781991f6050cdc13bd39e97563d/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.rs?ref=2fe288fd2974a781991f6050cdc13bd39e97563d", "patch": "@@ -1,3 +1,4 @@\n+#![feature(negative_impls)]\n #![deny(suspicious_auto_trait_impls)]\n \n use std::marker::PhantomData;\n@@ -21,6 +22,9 @@ struct ContainsVec<T>(Vec<T>);\n unsafe impl Send for ContainsVec<i32> {}\n //~^ ERROR\n //~| WARNING this will change its meaning\n+impl !Send for ContainsVec<u32> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n \n struct TwoParams<T, U>(T, U);\n unsafe impl<T: Send, U: Send> Send for TwoParams<T, U> {} // ok\n@@ -40,11 +44,17 @@ pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n //~^ ERROR\n //~| WARNING this will change its meaning\n+impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n \n pub struct WithLifetime<'a, T>(&'a (), T);\n unsafe impl<T> Send for WithLifetime<'static, T> {} // ok\n unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n //~^ ERROR\n //~| WARNING this will change its meaning\n+impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n \n fn main() {}"}, {"sha": "d4e7fe636e6771bfcb5ecabdf1e96e22d6e243e0", "filename": "tests/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2fe288fd2974a781991f6050cdc13bd39e97563d/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe288fd2974a781991f6050cdc13bd39e97563d/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=2fe288fd2974a781991f6050cdc13bd39e97563d", "patch": "@@ -1,5 +1,5 @@\n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n-  --> $DIR/suspicious-impls-lint.rs:9:1\n+  --> $DIR/suspicious-impls-lint.rs:10:1\n    |\n LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,18 +8,18 @@ LL | unsafe impl<T: Send> Send for MayImplementSendErr<&T> {}\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `&T` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n-  --> $DIR/suspicious-impls-lint.rs:8:1\n+  --> $DIR/suspicious-impls-lint.rs:9:1\n    |\n LL | struct MayImplementSendErr<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n-  --> $DIR/suspicious-impls-lint.rs:1:9\n+  --> $DIR/suspicious-impls-lint.rs:2:9\n    |\n LL | #![deny(suspicious_auto_trait_impls)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n-  --> $DIR/suspicious-impls-lint.rs:21:1\n+  --> $DIR/suspicious-impls-lint.rs:22:1\n    |\n LL | unsafe impl Send for ContainsVec<i32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,13 +28,28 @@ LL | unsafe impl Send for ContainsVec<i32> {}\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `i32` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n-  --> $DIR/suspicious-impls-lint.rs:20:1\n+  --> $DIR/suspicious-impls-lint.rs:21:1\n    |\n LL | struct ContainsVec<T>(Vec<T>);\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n-  --> $DIR/suspicious-impls-lint.rs:32:1\n+  --> $DIR/suspicious-impls-lint.rs:25:1\n+   |\n+LL | impl !Send for ContainsVec<u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `u32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:21:1\n+   |\n+LL | struct ContainsVec<T>(Vec<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:36:1\n    |\n LL | unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -43,13 +58,13 @@ LL | unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `T` is mentioned multiple times\n note: try using the same sequence of generic parameters as the struct definition\n-  --> $DIR/suspicious-impls-lint.rs:31:1\n+  --> $DIR/suspicious-impls-lint.rs:35:1\n    |\n LL | struct TwoParamsSame<T, U>(T, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n-  --> $DIR/suspicious-impls-lint.rs:40:1\n+  --> $DIR/suspicious-impls-lint.rs:44:1\n    |\n LL | unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -58,13 +73,28 @@ LL | unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `*const T` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n-  --> $DIR/suspicious-impls-lint.rs:39:1\n+  --> $DIR/suspicious-impls-lint.rs:43:1\n+   |\n+LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:47:1\n+   |\n+LL | impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `*const T` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:43:1\n    |\n LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n-  --> $DIR/suspicious-impls-lint.rs:46:1\n+  --> $DIR/suspicious-impls-lint.rs:53:1\n    |\n LL | unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -73,10 +103,25 @@ LL | unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n    = note: `Vec<T>` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n-  --> $DIR/suspicious-impls-lint.rs:44:1\n+  --> $DIR/suspicious-impls-lint.rs:51:1\n+   |\n+LL | pub struct WithLifetime<'a, T>(&'a (), T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n+  --> $DIR/suspicious-impls-lint.rs:56:1\n+   |\n+LL | impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `Option<T>` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-impls-lint.rs:51:1\n    |\n LL | pub struct WithLifetime<'a, T>(&'a (), T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 8 previous errors\n "}]}