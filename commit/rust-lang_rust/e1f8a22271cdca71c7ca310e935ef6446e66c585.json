{"sha": "e1f8a22271cdca71c7ca310e935ef6446e66c585", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjhhMjIyNzFjZGNhNzFjN2NhMzEwZTkzNWVmNjQ0NmU2NmM1ODU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-18T18:35:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-27T18:54:07Z"}, "message": "Rename `RequiresStorage` to `MaybeRequiresStorage`\n\n...to be consistent with the naming of other dataflow analyses.", "tree": {"sha": "1d05fe64a2be629ee185199a091be5b5bed21649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d05fe64a2be629ee185199a091be5b5bed21649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f8a22271cdca71c7ca310e935ef6446e66c585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f8a22271cdca71c7ca310e935ef6446e66c585", "html_url": "https://github.com/rust-lang/rust/commit/e1f8a22271cdca71c7ca310e935ef6446e66c585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f8a22271cdca71c7ca310e935ef6446e66c585/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecad4341af86665a2fb94dac732362d47608c73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecad4341af86665a2fb94dac732362d47608c73f", "html_url": "https://github.com/rust-lang/rust/commit/ecad4341af86665a2fb94dac732362d47608c73f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "fabe562e68a590efe645d925ec4e1e7d16408042", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=e1f8a22271cdca71c7ca310e935ef6446e66c585", "patch": "@@ -71,24 +71,24 @@ type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorro\n \n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n-pub struct RequiresStorage<'mir, 'tcx> {\n+pub struct MaybeRequiresStorage<'mir, 'tcx> {\n     body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n     borrowed_locals: RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n }\n \n-impl<'mir, 'tcx> RequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     pub fn new(\n         body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n         borrowed_locals: &'mir Results<'tcx, MaybeBorrowedLocals>,\n     ) -> Self {\n-        RequiresStorage {\n+        MaybeRequiresStorage {\n             body,\n             borrowed_locals: RefCell::new(ResultsRefCursor::new(*body, borrowed_locals)),\n         }\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for RequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     type Idx = Local;\n \n     const NAME: &'static str = \"requires_storage\";\n@@ -106,7 +106,7 @@ impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for RequiresStorage<'mir, 'tcx>\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for RequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     fn before_statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -232,15 +232,15 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for RequiresStorage<'mir, 'tcx>\n     }\n }\n \n-impl<'mir, 'tcx> RequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     /// Kill locals that are fully moved and have not been borrowed.\n     fn check_for_move(&self, trans: &mut impl GenKill<Local>, loc: Location) {\n         let mut visitor = MoveVisitor { trans, borrowed_locals: &self.borrowed_locals };\n         visitor.visit_location(self.body, loc);\n     }\n }\n \n-impl<'mir, 'tcx> BottomValue for RequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> BottomValue for MaybeRequiresStorage<'mir, 'tcx> {\n     /// bottom = dead\n     const BOTTOM_VALUE: bool = false;\n }"}, {"sha": "0b45f660c3ae0ef280ddc2ceff36d0a40434d7fc", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=e1f8a22271cdca71c7ca310e935ef6446e66c585", "patch": "@@ -25,7 +25,7 @@ pub use self::impls::DefinitelyInitializedPlaces;\n pub use self::impls::EverInitializedPlaces;\n pub use self::impls::{MaybeBorrowedLocals, MaybeMutBorrowedLocals};\n pub use self::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-pub use self::impls::{MaybeStorageLive, RequiresStorage};\n+pub use self::impls::{MaybeRequiresStorage, MaybeStorageLive};\n \n use self::move_paths::MoveData;\n "}, {"sha": "770f93517d05897c23aab20c60eecc8f4e522923", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f8a22271cdca71c7ca310e935ef6446e66c585/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e1f8a22271cdca71c7ca310e935ef6446e66c585", "patch": "@@ -50,7 +50,7 @@\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n use crate::dataflow::generic::{self as dataflow, Analysis};\n-use crate::dataflow::{MaybeBorrowedLocals, MaybeStorageLive, RequiresStorage};\n+use crate::dataflow::{MaybeBorrowedLocals, MaybeRequiresStorage, MaybeStorageLive};\n use crate::transform::no_landing_pads::no_landing_pads;\n use crate::transform::simplify;\n use crate::transform::{MirPass, MirSource};\n@@ -490,7 +490,7 @@ fn locals_live_across_suspend_points(\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n-    let requires_storage_results = RequiresStorage::new(body, &borrowed_locals_results)\n+    let requires_storage_results = MaybeRequiresStorage::new(body, &borrowed_locals_results)\n         .into_engine(tcx, body_ref, def_id)\n         .iterate_to_fixpoint();\n     let mut requires_storage_cursor =\n@@ -600,7 +600,7 @@ fn compute_storage_conflicts(\n     body: &'mir Body<'tcx>,\n     stored_locals: &liveness::LiveVarSet,\n     ignored: &StorageIgnored,\n-    requires_storage: dataflow::Results<'tcx, RequiresStorage<'mir, 'tcx>>,\n+    requires_storage: dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), ignored.0.domain_size());\n     assert_eq!(body.local_decls.len(), stored_locals.domain_size());"}]}