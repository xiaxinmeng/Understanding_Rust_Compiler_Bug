{"sha": "a4f7ba376eef754ea76467d5d48f81dddb83b089", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZjdiYTM3NmVlZjc1NGVhNzY0NjdkNWQ0OGY4MWRkZGI4M2IwODk=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-25T00:22:59Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-26T02:06:17Z"}, "message": "Add AccumulateVec, a potentially stack-allocated vector.\n\nAccumulateVec is generic over the Array trait, which is currently only\nimplemented for [T; 8].", "tree": {"sha": "ec891db652dd2213e9a311cc5a461c652da1faa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec891db652dd2213e9a311cc5a461c652da1faa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4f7ba376eef754ea76467d5d48f81dddb83b089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f7ba376eef754ea76467d5d48f81dddb83b089", "html_url": "https://github.com/rust-lang/rust/commit/a4f7ba376eef754ea76467d5d48f81dddb83b089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4f7ba376eef754ea76467d5d48f81dddb83b089/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d337f345ca8b3bb4aac988ace1c0676abc5310a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d337f345ca8b3bb4aac988ace1c0676abc5310a0", "html_url": "https://github.com/rust-lang/rust/commit/d337f345ca8b3bb4aac988ace1c0676abc5310a0"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "3894db40277a16a61fc22db04748947798f65184", "filename": "src/librustc_data_structures/accumulate_vec.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Faccumulate_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Faccumulate_vec.rs?ref=a4f7ba376eef754ea76467d5d48f81dddb83b089", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A vector type intended to be used for collecting from iterators onto the stack.\n+//!\n+//! Space for up to N elements is provided on the stack.  If more elements are collected, Vec is\n+//! used to store the values on the heap. This type does not support re-allocating onto the heap,\n+//! and there is no way to push more elements onto the existing storage.\n+//!\n+//! The N above is determined by Array's implementor, by way of an associatated constant.\n+\n+use std::ops::Deref;\n+use std::iter::{IntoIterator, FromIterator};\n+\n+use array_vec::{Array, ArrayVec};\n+\n+#[derive(Debug)]\n+pub enum AccumulateVec<A: Array> {\n+    Array(ArrayVec<A>),\n+    Heap(Vec<A::Element>)\n+}\n+\n+impl<A: Array> Deref for AccumulateVec<A> {\n+    type Target = [A::Element];\n+    fn deref(&self) -> &Self::Target {\n+        match *self {\n+            AccumulateVec::Array(ref v) => &v[..],\n+            AccumulateVec::Heap(ref v) => &v[..],\n+        }\n+    }\n+}\n+\n+impl<A: Array> FromIterator<A::Element> for AccumulateVec<A> {\n+    fn from_iter<I>(iter: I) -> AccumulateVec<A> where I: IntoIterator<Item=A::Element> {\n+        let iter = iter.into_iter();\n+        if iter.size_hint().1.map_or(false, |n| n <= A::LEN) {\n+            let mut v = ArrayVec::new();\n+            v.extend(iter);\n+            AccumulateVec::Array(v)\n+        } else {\n+            AccumulateVec::Heap(iter.collect())\n+        }\n+    }\n+}\n+"}, {"sha": "f87426cee59ea6bc8e0d3986b2cb2650dc58ceb4", "filename": "src/librustc_data_structures/array_vec.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=a4f7ba376eef754ea76467d5d48f81dddb83b089", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A stack-allocated vector, allowing storage of N elements on the stack.\n+//!\n+//! Currently, only the N = 8 case is supported (due to Array only being impl-ed for [T; 8]).\n+\n+use std::marker::Unsize;\n+use std::iter::Extend;\n+use std::ptr::drop_in_place;\n+use std::ops::{Deref, DerefMut};\n+use std::slice;\n+use std::fmt;\n+\n+pub unsafe trait Array {\n+    type Element;\n+    type PartialStorage: Default + Unsize<[ManuallyDrop<Self::Element>]>;\n+    const LEN: usize;\n+}\n+\n+unsafe impl<T> Array for [T; 8] {\n+    type Element = T;\n+    type PartialStorage = [ManuallyDrop<T>; 8];\n+    const LEN: usize = 8;\n+}\n+\n+pub struct ArrayVec<A: Array> {\n+    count: usize,\n+    values: A::PartialStorage\n+}\n+\n+impl<A: Array> ArrayVec<A> {\n+    pub fn new() -> Self {\n+        ArrayVec {\n+            count: 0,\n+            values: Default::default(),\n+        }\n+    }\n+}\n+\n+impl<A> fmt::Debug for ArrayVec<A>\n+    where A: Array,\n+          A::Element: fmt::Debug {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self[..].fmt(f)\n+    }\n+}\n+\n+impl<A: Array> Deref for ArrayVec<A> {\n+    type Target = [A::Element];\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            slice::from_raw_parts(&self.values as *const _ as *const A::Element, self.count)\n+        }\n+    }\n+}\n+\n+impl<A: Array> DerefMut for ArrayVec<A> {\n+    fn deref_mut(&mut self) -> &mut [A::Element] {\n+        unsafe {\n+            slice::from_raw_parts_mut(&mut self.values as *mut _ as *mut A::Element, self.count)\n+        }\n+    }\n+}\n+\n+impl<A: Array> Drop for ArrayVec<A> {\n+    fn drop(&mut self) {\n+        unsafe {\n+            drop_in_place(&mut self[..])\n+        }\n+    }\n+}\n+\n+impl<A: Array> Extend<A::Element> for ArrayVec<A> {\n+    fn extend<I>(&mut self, iter: I) where I: IntoIterator<Item=A::Element> {\n+        for el in iter {\n+            unsafe {\n+                let arr = &mut self.values as &mut [ManuallyDrop<_>];\n+                arr[self.count].value = el;\n+            }\n+            self.count += 1;\n+        }\n+    }\n+}\n+\n+// FIXME: This should use repr(transparent) from rust-lang/rfcs#1758.\n+#[allow(unions_with_drop_fields)]\n+pub union ManuallyDrop<T> {\n+    value: T,\n+    #[allow(dead_code)]\n+    empty: (),\n+}\n+\n+impl<T> Default for ManuallyDrop<T> {\n+    fn default() -> Self {\n+        ManuallyDrop { empty: () }\n+    }\n+}\n+"}, {"sha": "143c180f823d05e7d5489f673d87fca70872defd", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f7ba376eef754ea76467d5d48f81dddb83b089/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=a4f7ba376eef754ea76467d5d48f81dddb83b089", "patch": "@@ -30,6 +30,9 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n+#![feature(untagged_unions)]\n+#![feature(associated_consts)]\n+#![feature(unsize)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n@@ -41,6 +44,8 @@ extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n \n+pub mod array_vec;\n+pub mod accumulate_vec;\n pub mod bitslice;\n pub mod blake2b;\n pub mod bitvec;"}]}