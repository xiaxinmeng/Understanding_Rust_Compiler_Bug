{"sha": "bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2E4ZWI0MGExYzY4NGZmYzljYjQwNDc3NTU4ZWMyNzYyNTNjM2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T09:24:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T09:24:26Z"}, "message": "Merge #8142\n\n8142: temp disable broken ref match completions for struct fields/methods r=matklad a=JoshMcguigan\n\nThis PR implements a temporary workaround for #8058 by disabling ref match completions for struct fields and methods. Disabling this doesn't break any existing functionality (that I am aware of) since these completions were broken.\r\n\r\nI plan to keep working on a real fix for the underlying issue here, but I think a proper fix could take some time, so I'd prefer to quickly fix the bug to buy some more time to implement a better solution (which would ultimately allow re-enabling ref matches for struct fields and methods). \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "11980d33f4b957019df0a6172c26446e4a4783c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11980d33f4b957019df0a6172c26446e4a4783c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWbPKCRBK7hj4Ov3rIwAAdHIIAJk1ywaFj/aEPsiskD+9w8Hr\ncyU4iZGK12fBuV5B8uvdfo0X7qw9S8BIpdL+zNlV3aX02fdnKNrhsigbS/GAXSBI\n37xuugsqN8Cfkff5aQsmMLNZ2rnTBs3Qcszet8xhvzEhFAO7NH8guDCMFbJnjXoM\nhf72PDtIWZLtMgxVDM6GsJ0f9l/whhqg5dMBxQLkYntMxikfuhkymFFhQPYuFbf8\nOyPJophvr9FrGLsAKWvBYdabYfP1OTd234+wgvp0RIuWMFyldtOzUSJcJL1K4SAb\nc7mtfhLrHO57shx8/l22Wg5rsmVeZpsU+WGv7RvL2oqLckhZHcNjsk5ODjoMEVI=\n=yBeq\n-----END PGP SIGNATURE-----\n", "payload": "tree 11980d33f4b957019df0a6172c26446e4a4783c0\nparent 4b997b86633b1c0ca134d89e8236d285422c04e3\nparent 18c3fb2df549da2d51104d74107d3b8cd27ee996\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616491466 +0000\ncommitter GitHub <noreply@github.com> 1616491466 +0000\n\nMerge #8142\n\n8142: temp disable broken ref match completions for struct fields/methods r=matklad a=JoshMcguigan\n\nThis PR implements a temporary workaround for #8058 by disabling ref match completions for struct fields and methods. Disabling this doesn't break any existing functionality (that I am aware of) since these completions were broken.\r\n\r\nI plan to keep working on a real fix for the underlying issue here, but I think a proper fix could take some time, so I'd prefer to quickly fix the bug to buy some more time to implement a better solution (which would ultimately allow re-enabling ref matches for struct fields and methods). \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "html_url": "https://github.com/rust-lang/rust/commit/bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b997b86633b1c0ca134d89e8236d285422c04e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b997b86633b1c0ca134d89e8236d285422c04e3", "html_url": "https://github.com/rust-lang/rust/commit/4b997b86633b1c0ca134d89e8236d285422c04e3"}, {"sha": "18c3fb2df549da2d51104d74107d3b8cd27ee996", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c3fb2df549da2d51104d74107d3b8cd27ee996", "html_url": "https://github.com/rust-lang/rust/commit/18c3fb2df549da2d51104d74107d3b8cd27ee996"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "6d572a8361637d2f26d883094828a996de0aab6b", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     render::{\n         const_::render_const,\n         enum_variant::render_variant,\n-        function::render_fn,\n+        function::{render_fn, render_method},\n         macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n@@ -123,6 +123,17 @@ impl Completions {\n         }\n     }\n \n+    pub(crate) fn add_method(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        func: hir::Function,\n+        local_name: Option<String>,\n+    ) {\n+        if let Some(item) = render_method(RenderContext::new(ctx), None, local_name, func) {\n+            self.add(item)\n+        }\n+    }\n+\n     pub(crate) fn add_variant_pat(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "7e4efe5898149ee8aa98c8a84783215ee36b3b86", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "patch": "@@ -51,7 +51,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n                 && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {\n-                acc.add_function(ctx, func, None);\n+                acc.add_method(ctx, func, None);\n             }\n             None::<()>\n         });"}, {"sha": "9ce49074f9d1f5e172b2c280ab9698c1f844c809", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "patch": "@@ -148,8 +148,10 @@ impl<'a> Render<'a> {\n             ..CompletionRelevance::default()\n         });\n \n-        if let Some(ref_match) = compute_ref_match(self.ctx.completion, ty) {\n-            item.ref_match(ref_match);\n+        if let Some(_ref_match) = compute_ref_match(self.ctx.completion, ty) {\n+            // FIXME\n+            // For now we don't properly calculate the edits for ref match\n+            // completions on struct fields, so we've disabled them. See #8058.\n         }\n \n         item.build()\n@@ -1313,4 +1315,42 @@ fn main() {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn struct_field_method_ref() {\n+        check(\n+            r#\"\n+struct Foo { bar: u32 }\n+impl Foo { fn baz(&self) -> u32 { 0 } }\n+\n+fn foo(f: Foo) { let _: &u32 = f.b$0 }\n+\"#,\n+            // FIXME\n+            // Ideally we'd also suggest &f.bar and &f.baz() as exact\n+            // type matches. See #8058.\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"bar\",\n+                        source_range: 98..99,\n+                        delete: 98..99,\n+                        insert: \"bar\",\n+                        kind: SymbolKind(\n+                            Field,\n+                        ),\n+                        detail: \"u32\",\n+                    },\n+                    CompletionItem {\n+                        label: \"baz()\",\n+                        source_range: 98..99,\n+                        delete: 98..99,\n+                        insert: \"baz()$0\",\n+                        kind: Method,\n+                        lookup: \"baz\",\n+                        detail: \"fn(&self) -> u32\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "b1eba20e8260ab8bd1bbfcffa68da07b3cf90e9d", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3a8eb40a1c684ffc9cb40477558ec276253c3b/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=bf3a8eb40a1c684ffc9cb40477558ec276253c3b", "patch": "@@ -20,7 +20,17 @@ pub(crate) fn render_fn<'a>(\n     fn_: hir::Function,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_fn\");\n-    Some(FunctionRender::new(ctx, local_name, fn_)?.render(import_to_add))\n+    Some(FunctionRender::new(ctx, local_name, fn_, false)?.render(import_to_add))\n+}\n+\n+pub(crate) fn render_method<'a>(\n+    ctx: RenderContext<'a>,\n+    import_to_add: Option<ImportEdit>,\n+    local_name: Option<String>,\n+    fn_: hir::Function,\n+) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_method\");\n+    Some(FunctionRender::new(ctx, local_name, fn_, true)?.render(import_to_add))\n }\n \n #[derive(Debug)]\n@@ -29,18 +39,20 @@ struct FunctionRender<'a> {\n     name: String,\n     func: hir::Function,\n     ast_node: Fn,\n+    is_method: bool,\n }\n \n impl<'a> FunctionRender<'a> {\n     fn new(\n         ctx: RenderContext<'a>,\n         local_name: Option<String>,\n         fn_: hir::Function,\n+        is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n         let ast_node = fn_.source(ctx.db())?.value;\n \n-        Some(FunctionRender { ctx, name, func: fn_, ast_node })\n+        Some(FunctionRender { ctx, name, func: fn_, ast_node, is_method })\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n@@ -67,7 +79,12 @@ impl<'a> FunctionRender<'a> {\n         });\n \n         if let Some(ref_match) = compute_ref_match(self.ctx.completion, &ret_type) {\n-            item.ref_match(ref_match);\n+            // FIXME\n+            // For now we don't properly calculate the edits for ref match\n+            // completions on methods, so we've disabled them. See #8058.\n+            if !self.is_method {\n+                item.ref_match(ref_match);\n+            }\n         }\n \n         item.build()"}]}