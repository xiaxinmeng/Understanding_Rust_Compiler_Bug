{"sha": "96c955e66b39f23eca553644aeb2ea5f41ff355a", "node_id": "C_kwDOAAsO6NoAKDk2Yzk1NWU2NmIzOWYyM2VjYTU1MzY0NGFlYjJlYTVmNDFmZjM1NWE", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-08-02T04:25:45Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-08-02T05:29:32Z"}, "message": "Properly reject the `may_unwind` option in `global_asm!`\n\nThis was accidentally accepted even though it had no effect in\n`global_asm!`. The option only makes sense for `asm!` which runs within\na function.", "tree": {"sha": "50074822bdea34079a41404ca4710f3e2f067e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50074822bdea34079a41404ca4710f3e2f067e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c955e66b39f23eca553644aeb2ea5f41ff355a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c955e66b39f23eca553644aeb2ea5f41ff355a", "html_url": "https://github.com/rust-lang/rust/commit/96c955e66b39f23eca553644aeb2ea5f41ff355a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c955e66b39f23eca553644aeb2ea5f41ff355a/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5cd21a5d4d5325b1f1c9903d000d19e3703e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5cd21a5d4d5325b1f1c9903d000d19e3703e2a", "html_url": "https://github.com/rust-lang/rust/commit/9d5cd21a5d4d5325b1f1c9903d000d19e3703e2a"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "fc310129b249e31a2a1a817ce058100a5c93ee65", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c955e66b39f23eca553644aeb2ea5f41ff355a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c955e66b39f23eca553644aeb2ea5f41ff355a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=96c955e66b39f23eca553644aeb2ea5f41ff355a", "patch": "@@ -410,12 +410,12 @@ fn parse_options<'a>(\n             try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n         } else if !is_global_asm && p.eat_keyword(sym::nostack) {\n             try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n+        } else if !is_global_asm && p.eat_keyword(sym::may_unwind) {\n+            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else if p.eat_keyword(sym::att_syntax) {\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n         } else if p.eat_keyword(kw::Raw) {\n             try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::RAW);\n-        } else if p.eat_keyword(sym::may_unwind) {\n-            try_set_option(p, args, kw::Raw, ast::InlineAsmOptions::MAY_UNWIND);\n         } else {\n             return p.unexpected();\n         }"}, {"sha": "21bcc4a9c7badd4ddbc01351734661187eb6d68a", "filename": "src/test/ui/asm/aarch64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr?ref=96c955e66b39f23eca553644aeb2ea5f41ff355a", "patch": "@@ -36,41 +36,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n    |                    |\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:28:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:30:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:32:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:34:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:36:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:38:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "804966b06ba7dfdf1f19b368bc5c85f4fb61dcb2", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=96c955e66b39f23eca553644aeb2ea5f41ff355a", "patch": "@@ -260,23 +260,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:102:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:108:30"}, {"sha": "e2351840eef211612b880b82ec4c538f50e3cfeb", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=96c955e66b39f23eca553644aeb2ea5f41ff355a", "patch": "@@ -45,41 +45,41 @@ LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"), clobber_abi(\"C\"));\n    |                    |             clobber_abi\n    |                    generic outputs\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/bad-options.rs:31:25\n    |\n LL | global_asm!(\"\", options(nomem));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `readonly`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n   --> $DIR/bad-options.rs:33:25\n    |\n LL | global_asm!(\"\", options(readonly));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `noreturn`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n   --> $DIR/bad-options.rs:35:25\n    |\n LL | global_asm!(\"\", options(noreturn));\n-   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `pure`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n   --> $DIR/bad-options.rs:37:25\n    |\n LL | global_asm!(\"\", options(pure));\n-   |                         ^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nostack`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n   --> $DIR/bad-options.rs:39:25\n    |\n LL | global_asm!(\"\", options(nostack));\n-   |                         ^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `preserves_flags`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n   --> $DIR/bad-options.rs:41:25\n    |\n LL | global_asm!(\"\", options(preserves_flags));\n-   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: invalid ABI for `clobber_abi`\n   --> $DIR/bad-options.rs:20:18"}, {"sha": "57702c37b7ce2ff29554eb5bc166d5b66fbca13d", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96c955e66b39f23eca553644aeb2ea5f41ff355a/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=96c955e66b39f23eca553644aeb2ea5f41ff355a", "patch": "@@ -266,23 +266,23 @@ error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n LL | global_asm!(\"{}\", const(reg) FOO);\n    |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `FOO`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n   --> $DIR/parse-error.rs:104:25\n    |\n LL | global_asm!(\"\", options(FOO));\n-   |                         ^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:106:25\n    |\n LL | global_asm!(\"\", options(nomem FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n-error: expected one of `)`, `att_syntax`, `may_unwind`, or `raw`, found `nomem`\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n   --> $DIR/parse-error.rs:108:25\n    |\n LL | global_asm!(\"\", options(nomem, FOO));\n-   |                         ^^^^^ expected one of `)`, `att_syntax`, `may_unwind`, or `raw`\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n \n error: arguments are not allowed after options\n   --> $DIR/parse-error.rs:110:30"}]}