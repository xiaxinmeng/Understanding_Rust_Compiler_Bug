{"sha": "4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MThmYWI0ZjI0ZTY0OTdhYTJhMWY3MWJiNGNmOTYzYzI5NzFhMjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-16T03:19:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-16T03:28:02Z"}, "message": "Update to latest Syntex\n\n+ Cargo update\n+ 0.6.2 release", "tree": {"sha": "14fb7740585773063b6db5b6101dacad50aa2ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14fb7740585773063b6db5b6101dacad50aa2ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "html_url": "https://github.com/rust-lang/rust/commit/4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9712b075eae4929eb813459994b58d00b143bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9712b075eae4929eb813459994b58d00b143bbe", "html_url": "https://github.com/rust-lang/rust/commit/f9712b075eae4929eb813459994b58d00b143bbe"}], "stats": {"total": 424, "additions": 227, "deletions": 197}, "files": [{"sha": "82405e5d3198f50e7661fbbdbc2ca606da4ace71", "filename": "Cargo.lock", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -1,29 +1,30 @@\n [root]\n name = \"rustfmt\"\n-version = \"0.6.0\"\n+version = \"0.6.2\"\n dependencies = [\n  \"diff 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.4.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_syntax 0.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"walkdir 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.5.2\"\n+version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -41,11 +42,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.3.4\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -55,7 +56,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"itertools\"\n-version = \"0.4.17\"\n+version = \"0.4.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -69,7 +70,7 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.15\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -82,7 +83,7 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -92,19 +93,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"regex\"\n-version = \"0.1.73\"\n+version = \"0.1.77\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"aho-corasick 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.3.4\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -121,25 +122,39 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"syntex_syntax\"\n-version = \"0.33.0\"\n+name = \"syntex_errors\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n-name = \"term\"\n-version = \"0.2.14\"\n+name = \"syntex_pos\"\n+version = \"0.43.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.43.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -157,7 +172,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -193,7 +208,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"walkdir\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -211,30 +226,31 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n-\"checksum aho-corasick 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b3fb52b09c1710b961acb35390d514be82e4ac96a9969a8e38565a29b878dc9\"\n+\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n \"checksum diff 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e48977eec6d3b7707462c2dc2e1363ad91b5dd822cf942537ccdc2085dc87587\"\n-\"checksum env_logger 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"82dcb9ceed3868a03b335657b85a159736c961900f7e7747d3b0b97b9ccb5ccb\"\n+\"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum itertools 0.4.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ddb83e0e9730d830afba4e6839077948b4efa22075f7cd80a3867ec286c610f\"\n+\"checksum itertools 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4a9b56eb56058f43dc66e58f40a214b2ccbc9f3df51861b63d51dec7b65bc3f\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum libc 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e3757828fa702a20072c37ff47938e9dd331b92fac6e223d26d4b7a55f7ee2\"\n+\"checksum libc 0.2.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"408014cace30ee0f767b1c4517980646a573ec61a57957aeeabcac8ac0a02e8d\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n-\"checksum regex 0.1.73 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56b7ee9f764ecf412c6e2fff779bca4b22980517ae335a21aeaf4e32625a5df2\"\n-\"checksum regex-syntax 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31040aad7470ad9d8c46302dcffba337bb4289ca5da2e3cd6e37b64109a85199\"\n+\"checksum regex 0.1.77 (registry+https://github.com/rust-lang/crates.io-index)\" = \"64b03446c466d35b42f2a8b203c8e03ed8b91c0f17b56e1f84f7210a257aa665\"\n+\"checksum regex-syntax 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279401017ae31cf4e15344aa3f085d0e2e5c1e70067289ef906906fdbe92c8fd\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n \"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n-\"checksum syntex_syntax 0.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44bded3cabafc65c90b663b1071bd2d198a9ab7515e6ce729e4570aaf53c407e\"\n-\"checksum term 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2077e54d38055cf1ca0fd7933a2e00cd3ec8f6fed352b2a377f06dcdaaf3281\"\n+\"checksum syntex_errors 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cad40c64b27f251ee286cf18e157e40fe3586bd1ad89e2318d336829e4f6bb41\"\n+\"checksum syntex_pos 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e56b7e73e8826c0bdd111da685becee1d42a42200139f72687242b6c0394247\"\n+\"checksum syntex_syntax 0.43.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1590efa9a3862c1f812abb205e16e15c81a36a6c22cdaa28962c2eb80f1453e\"\n \"checksum term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3deff8a2b3b6607d6d7cc32ac25c0b33709453ca9cceac006caac51e963cf94a\"\n \"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55dd963dbaeadc08aa7266bf7f91c3154a7805e32bb94b820b769d2ef3b4744d\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b905d0fc2a1f0befd86b0e72e31d1787944efef9d38b9358a9e92a69757f7e3b\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n-\"checksum walkdir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ad450634b9022aeb0e8e7f1c79c1ded92d0fc5bee831033d148479771bd218d\"\n+\"checksum walkdir 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d42144c31c9909882ce76e696b306b88a5b091721251137d5d522d1ef3da7cf9\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\""}, {"sha": "13265da20bf31382ac8b1f02a8fddd94ff6aa549", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -1,7 +1,7 @@\n [package]\n \n name = \"rustfmt\"\n-version = \"0.6.0\"\n+version = \"0.6.2\"\n authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"Marcus Klaas <mail@marcusklaas.nl>\", \"The Rustfmt contributors\"]\n description = \"Tool to find and fix Rust formatting issues\"\n repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n@@ -22,7 +22,8 @@ regex = \"0.1\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.33\"\n+syntex_syntax = \"0.43\"\n+syntex_errors = \"0.43\"\n log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\""}, {"sha": "bece2ef91fe568da0475c02558b40563ca350033", "filename": "src/expr.rs", "status": "modified", "additions": 57, "deletions": 41, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -22,7 +22,7 @@ use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTacti\n             DefinitiveListTactic, definitive_tactic, ListItem, format_item_list};\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n-            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n+            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_block, stmt_expr};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -150,7 +150,7 @@ fn format_expr(expr: &ast::Expr,\n         ast::ExprKind::AssignOp(ref op, ref lhs, ref rhs) => {\n             rewrite_assignment(context, lhs, rhs, Some(op), width, offset)\n         }\n-        ast::ExprKind::Again(ref opt_ident) => {\n+        ast::ExprKind::Continue(ref opt_ident) => {\n             let id_str = match *opt_ident {\n                 Some(ident) => format!(\" {}\", ident.node),\n                 None => String::new(),\n@@ -400,7 +400,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         prefix.push_str(&ret_str);\n     }\n \n-    if body.expr.is_none() && body.stmts.is_empty() {\n+    if body.stmts.is_empty() {\n         return Some(format!(\"{} {{}}\", prefix));\n     }\n \n@@ -412,10 +412,17 @@ fn rewrite_closure(capture: ast::CaptureBy,\n     let mut had_braces = true;\n     let mut inner_block = body;\n \n+    let mut trailing_expr = stmt_expr(&inner_block.stmts[inner_block.stmts.len() - 1]);\n+\n     // If there is an inner block and we can ignore it, do so.\n-    if body.stmts.is_empty() {\n-        if let ast::ExprKind::Block(ref inner) = inner_block.expr.as_ref().unwrap().node {\n+    if body.stmts.len() == 1 && trailing_expr.is_some() {\n+        if let Some(ref inner) = stmt_block(&inner_block.stmts[0]) {\n             inner_block = inner;\n+            trailing_expr = if inner_block.stmts.is_empty() {\n+                None\n+            } else {\n+                stmt_expr(&inner_block.stmts[inner_block.stmts.len() - 1])\n+            };\n         } else if !force_block {\n             had_braces = false;\n         }\n@@ -426,14 +433,13 @@ fn rewrite_closure(capture: ast::CaptureBy,\n \n     if try_single_line && !force_block {\n         let must_preserve_braces =\n-            !classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(inner_block.expr\n-                .as_ref()\n-                .unwrap()));\n+            trailing_expr.is_none() ||\n+            !classify::expr_requires_semi_to_be_stmt(left_most_sub_expr(trailing_expr.unwrap()));\n         if !(must_preserve_braces && had_braces) &&\n            (must_preserve_braces || !prefix.contains('\\n')) {\n             // If we got here, then we can try to format without braces.\n \n-            let inner_expr = inner_block.expr.as_ref().unwrap();\n+            let inner_expr = &inner_block.stmts[0];\n             let mut rewrite = inner_expr.rewrite(context, budget, offset + extra_offset);\n \n             if must_preserve_braces {\n@@ -456,7 +462,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n     // still prefer a one-liner (we might also have fallen through because of\n     // lack of space).\n     if try_single_line && !prefix.contains('\\n') {\n-        let inner_expr = inner_block.expr.as_ref().unwrap();\n+        let inner_expr = &inner_block.stmts[0];\n         // 4 = braces and spaces.\n         let mut rewrite = inner_expr.rewrite(context,\n                                              try_opt!(budget.checked_sub(4)),\n@@ -538,15 +544,11 @@ impl Rewrite for ast::Block {\n                 };\n \n                 if is_simple_block(self, context.codemap) && prefix.len() < width {\n-                    let body = self.expr\n-                        .as_ref()\n-                        .unwrap()\n-                        .rewrite(context, width - prefix.len(), offset);\n-                    if let Some(ref expr_str) = body {\n-                        let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n-                        if result.len() <= width && !result.contains('\\n') {\n-                            return Some(result);\n-                        }\n+                    let expr_str = self.stmts[0].rewrite(context, width - prefix.len(), offset);\n+                    let expr_str = try_opt!(expr_str);\n+                    let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n+                    if result.len() <= width && !result.contains('\\n') {\n+                        return Some(result);\n                     }\n                 }\n \n@@ -568,25 +570,26 @@ impl Rewrite for ast::Block {\n impl Rewrite for ast::Stmt {\n     fn rewrite(&self, context: &RewriteContext, _width: usize, offset: Indent) -> Option<String> {\n         let result = match self.node {\n-            ast::StmtKind::Decl(ref decl, _) => {\n-                if let ast::DeclKind::Local(ref local) = decl.node {\n-                    local.rewrite(context, context.config.max_width, offset)\n-                } else {\n-                    None\n-                }\n+            ast::StmtKind::Local(ref local) => {\n+                local.rewrite(context, context.config.max_width, offset)\n             }\n-            ast::StmtKind::Expr(ref ex, _) |\n-            ast::StmtKind::Semi(ref ex, _) => {\n+            ast::StmtKind::Expr(ref ex) |\n+            ast::StmtKind::Semi(ref ex) => {\n                 let suffix = if semicolon_for_stmt(self) { \";\" } else { \"\" };\n \n                 format_expr(ex,\n-                            ExprType::Statement,\n+                            match self.node {\n+                                ast::StmtKind::Expr(_) => ExprType::SubExpression,\n+                                ast::StmtKind::Semi(_) => ExprType::Statement,\n+                                _ => unreachable!(),\n+                            },\n                             context,\n                             context.config.max_width - offset.width() - suffix.len(),\n                             offset)\n                     .map(|s| s + suffix)\n             }\n-            ast::StmtKind::Mac(..) => None,\n+            ast::StmtKind::Mac(..) |\n+            ast::StmtKind::Item(..) => None,\n         };\n         result.and_then(|res| recover_comment_removed(res, self.span, context, _width, offset))\n     }\n@@ -876,11 +879,11 @@ fn single_line_if_else(context: &RewriteContext,\n         }\n \n         let new_width = try_opt!(width.checked_sub(pat_expr_str.len() + fixed_cost));\n-        let if_expr = if_node.expr.as_ref().unwrap();\n+        let if_expr = &if_node.stmts[0];\n         let if_str = try_opt!(if_expr.rewrite(context, new_width, Indent::empty()));\n \n         let new_width = try_opt!(new_width.checked_sub(if_str.len()));\n-        let else_expr = else_node.expr.as_ref().unwrap();\n+        let else_expr = &else_node.stmts[0];\n         let else_str = try_opt!(else_expr.rewrite(context, new_width, Indent::empty()));\n \n         // FIXME: this check shouldn't be necessary. Rewrites should either fail\n@@ -907,18 +910,25 @@ fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n // FIXME: incorrectly returns false when comment is contained completely within\n // the expression.\n pub fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    block.stmts.is_empty() && block.expr.is_some() && !block_contains_comment(block, codemap)\n+    block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0]) &&\n+    !block_contains_comment(block, codemap)\n }\n \n /// Checks whether a block contains at most one statement or expression, and no comments.\n pub fn is_simple_block_stmt(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    (block.stmts.is_empty() || (block.stmts.len() == 1 && block.expr.is_none())) &&\n-    !block_contains_comment(block, codemap)\n+    block.stmts.len() <= 1 && !block_contains_comment(block, codemap)\n }\n \n /// Checks whether a block contains no statements, expressions, or comments.\n pub fn is_empty_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    block.stmts.is_empty() && block.expr.is_none() && !block_contains_comment(block, codemap)\n+    block.stmts.is_empty() && !block_contains_comment(block, codemap)\n+}\n+\n+pub fn stmt_is_expr(stmt: &ast::Stmt) -> bool {\n+    match stmt.node {\n+        ast::StmtKind::Expr(..) => true,\n+        _ => false,\n+    }\n }\n \n fn is_unsafe_block(block: &ast::Block) -> bool {\n@@ -1138,14 +1148,20 @@ impl Rewrite for ast::Arm {\n             line_start += offset.width();\n         }\n \n-        let body = match **body {\n-            ast::Expr { node: ast::ExprKind::Block(ref block), .. }\n-                if !is_unsafe_block(block) && is_simple_block(block, context.codemap) &&\n-                   context.config.wrap_match_arms => block.expr.as_ref().map(|e| &**e).unwrap(),\n-            ref x => x,\n+        let body = match body.node {\n+            ast::ExprKind::Block(ref block) if !is_unsafe_block(block) &&\n+                                               is_simple_block(block, context.codemap) &&\n+                                               context.config.wrap_match_arms => {\n+                if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n+                    expr\n+                } else {\n+                    &**body\n+                }\n+            }\n+            _ => &**body,\n         };\n \n-        let comma = arm_comma(context.config, self, body);\n+        let comma = arm_comma(&context.config, self, body);\n         let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n \n         // Let's try and get the arm body on the same line as the condition."}, {"sha": "66c937c37c91caedb169ee93d219f26cd19c7fc5", "filename": "src/file_lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n //! This module contains types and functions to support formatting specific line ranges.\n+\n use std::{cmp, iter, path, str};\n \n use itertools::Itertools;"}, {"sha": "ed74d828a9cb0fd9eecb1512050a3eb00d3fa4a5", "filename": "src/imports.rs", "status": "modified", "additions": 23, "deletions": 45, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -43,34 +43,30 @@ fn compare_paths(a: &ast::Path, b: &ast::Path) -> Ordering {\n }\n \n fn compare_path_list_items(a: &ast::PathListItem, b: &ast::PathListItem) -> Ordering {\n-    let name_ordering = match a.node.name() {\n-        Some(a_name) => {\n-            match b.node.name() {\n-                Some(b_name) => a_name.name.as_str().cmp(&b_name.name.as_str()),\n-                None => Ordering::Greater,\n-            }\n+    let a_name_str = a.node.name.name.as_str();\n+    let b_name_str = b.node.name.name.as_str();\n+    let name_ordering = if a_name_str == \"self\" {\n+        if b_name_str == \"self\" {\n+            Ordering::Equal\n+        } else {\n+            Ordering::Less\n         }\n-        None => {\n-            match b.node.name() {\n-                Some(_) => Ordering::Less,\n-                None => Ordering::Equal,\n-            }\n+    } else {\n+        if b_name_str == \"self\" {\n+            Ordering::Greater\n+        } else {\n+            a_name_str.cmp(&b_name_str)\n         }\n     };\n     if name_ordering == Ordering::Equal {\n-        match a.node.rename() {\n+        match a.node.rename {\n             Some(a_rename) => {\n-                match b.node.rename() {\n+                match b.node.rename {\n                     Some(b_rename) => a_rename.name.as_str().cmp(&b_rename.name.as_str()),\n                     None => Ordering::Greater,\n                 }\n             }\n-            None => {\n-                match b.node.name() {\n-                    Some(_) => Ordering::Less,\n-                    None => Ordering::Equal,\n-                }\n-            }\n+            None => Ordering::Less,\n         }\n     } else {\n         name_ordering\n@@ -241,41 +237,23 @@ impl<'a> FmtVisitor<'a> {\n }\n \n fn rewrite_single_use_list(path_str: Option<String>, vpi: &ast::PathListItem) -> String {\n-    let path_item_str = if let ast::PathListItemKind::Ident { name, .. } = vpi.node {\n-        // A name.\n-        match path_str {\n-            Some(path_str) => format!(\"{}::{}\", path_str, name),\n-            None => name.to_string(),\n-        }\n-    } else {\n-        // `self`.\n-        match path_str {\n-            Some(path_str) => path_str,\n-            // This catches the import: use {self}, which is a compiler error, so we just\n-            // leave it alone.\n-            None => \"{self}\".to_owned(),\n-        }\n+    let path_item_str = match path_str {\n+        Some(ref path_str) if vpi.node.name.to_string() == \"self\" => path_str.to_owned(),\n+        Some(path_str) => format!(\"{}::{}\", path_str, vpi.node.name),\n+        None => vpi.node.name.to_string(),\n     };\n \n     append_alias(path_item_str, vpi)\n }\n \n fn rewrite_path_item(vpi: &&ast::PathListItem) -> Option<String> {\n-    let path_item_str = match vpi.node {\n-        ast::PathListItemKind::Ident { name, .. } => name.to_string(),\n-        ast::PathListItemKind::Mod { .. } => \"self\".to_owned(),\n-    };\n-\n-    Some(append_alias(path_item_str, vpi))\n+    Some(append_alias(vpi.node.name.to_string(), vpi))\n }\n \n fn append_alias(path_item_str: String, vpi: &ast::PathListItem) -> String {\n-    match vpi.node {\n-        ast::PathListItemKind::Ident { rename: Some(rename), .. } |\n-        ast::PathListItemKind::Mod { rename: Some(rename), .. } => {\n-            format!(\"{} as {}\", path_item_str, rename)\n-        }\n-        _ => path_item_str,\n+    match vpi.node.rename {\n+        Some(rename) => format!(\"{} as {}\", path_item_str, rename),\n+        None => path_item_str,\n     }\n }\n "}, {"sha": "1071a4017d4aa6d89a45eacafe1e1463224484a6", "filename": "src/items.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -13,7 +13,7 @@\n use Indent;\n use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n-            last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n+            last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annotation_separator};\n@@ -240,7 +240,7 @@ impl<'a> FmtVisitor<'a> {\n                                                        &sig.decl,\n                                                        &sig.generics,\n                                                        sig.unsafety,\n-                                                       sig.constness,\n+                                                       sig.constness.node,\n                                                        ast::Defaultness::Final,\n                                                        sig.abi,\n                                                        &ast::Visibility::Inherited,\n@@ -268,18 +268,23 @@ impl<'a> FmtVisitor<'a> {\n \n         if self.config.fn_single_line && is_simple_block_stmt(block, codemap) {\n             let rewrite = {\n-                if let Some(ref e) = block.expr {\n-                    let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n-\n-                    e.rewrite(&self.get_context(),\n-                                 self.config.max_width - self.block_indent.width(),\n-                                 self.block_indent)\n-                        .map(|s| s + suffix)\n-                        .or_else(|| Some(self.snippet(e.span)))\n-                } else if let Some(stmt) = block.stmts.first() {\n-                    stmt.rewrite(&self.get_context(),\n-                                 self.config.max_width - self.block_indent.width(),\n-                                 self.block_indent)\n+                if let Some(ref stmt) = block.stmts.first() {\n+                    match stmt_expr(stmt) {\n+                        Some(e) => {\n+                            let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n+\n+                            e.rewrite(&self.get_context(),\n+                                         self.config.max_width - self.block_indent.width(),\n+                                         self.block_indent)\n+                                .map(|s| s + suffix)\n+                                .or_else(|| Some(self.snippet(e.span)))\n+                        }\n+                        None => {\n+                            stmt.rewrite(&self.get_context(),\n+                                         self.config.max_width - self.block_indent.width(),\n+                                         self.block_indent)\n+                        }\n+                    }\n                 } else {\n                     None\n                 }\n@@ -1153,13 +1158,6 @@ impl Rewrite for ast::FunctionRetTy {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         match *self {\n             ast::FunctionRetTy::Default(_) => Some(String::new()),\n-            ast::FunctionRetTy::None(_) => {\n-                if width >= 4 {\n-                    Some(\"-> !\".to_owned())\n-                } else {\n-                    None\n-                }\n-            }\n             ast::FunctionRetTy::Ty(ref ty) => {\n                 let inner_width = try_opt!(width.checked_sub(3));\n                 ty.rewrite(context, inner_width, offset + 3).map(|r| format!(\"-> {}\", r))\n@@ -1259,7 +1257,6 @@ pub fn is_named_arg(arg: &ast::Arg) -> bool {\n \n fn span_for_return(ret: &ast::FunctionRetTy) -> Span {\n     match *ret {\n-        ast::FunctionRetTy::None(ref span) |\n         ast::FunctionRetTy::Default(ref span) => span.clone(),\n         ast::FunctionRetTy::Ty(ref ty) => ty.span,\n     }"}, {"sha": "740e058489332f8748eb04861aab254e1d7ed395", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -16,6 +16,7 @@\n extern crate log;\n \n extern crate syntex_syntax as syntax;\n+extern crate syntex_errors as errors;\n extern crate rustc_serialize;\n \n extern crate strings;\n@@ -27,10 +28,10 @@ extern crate term;\n extern crate itertools;\n extern crate multimap;\n \n+use errors::{Handler, DiagnosticBuilder};\n+use errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::ast;\n use syntax::codemap::{mk_sp, CodeMap, Span};\n-use syntax::errors::{Handler, DiagnosticBuilder};\n-use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::parse::{self, ParseSess};\n \n use strings::string_buffer::StringBuffer;\n@@ -419,7 +420,7 @@ pub fn format_input<T: Write>(input: Input,\n     let codemap = Rc::new(CodeMap::new());\n \n     let tty_handler =\n-        Handler::with_tty_emitter(ColorConfig::Auto, None, true, false, codemap.clone());\n+        Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()));\n     let mut parse_session = ParseSess::with_span_handler(tty_handler, codemap.clone());\n \n     let main_file = match input {\n@@ -443,7 +444,7 @@ pub fn format_input<T: Write>(input: Input,\n     }\n \n     // Suppress error output after parsing.\n-    let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None, codemap.clone()));\n+    let silent_emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), Some(codemap.clone())));\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n \n     let mut report = FormatReport::new();"}, {"sha": "9c275716ad21d0a7aaa23519973d4de7729ed4a1", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -23,6 +23,7 @@ use syntax::ast;\n use syntax::parse::token::Token;\n use syntax::parse::tts_to_parser;\n use syntax::codemap::{mk_sp, BytePos};\n+use syntax::util::ThinVec;\n \n use Indent;\n use codemap::SpanUtils;\n@@ -159,7 +160,7 @@ pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::\n             id: 0, // dummy value\n             node: ast::ExprKind::Try(try_opt!(parser.parse_expr().ok())),\n             span: mac.span, // incorrect span, but shouldn't matter too much\n-            attrs: None,\n+            attrs: ThinVec::new(),\n         })\n     } else {\n         None"}, {"sha": "1aaa28b853aee4114d405d211743486945d7faa1", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -54,9 +54,6 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n-            PatKind::QPath(ref q_self, ref path) => {\n-                rewrite_path(context, true, Some(q_self), path, width, offset)\n-            }\n             PatKind::Range(ref lhs, ref rhs) => {\n                 rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, width, offset)\n             }\n@@ -67,7 +64,9 @@ impl Rewrite for Pat {\n             PatKind::Tuple(ref items, dotdot_pos) => {\n                 rewrite_tuple_pat(items, dotdot_pos, None, self.span, context, width, offset)\n             }\n-            PatKind::Path(ref path) => rewrite_path(context, true, None, path, width, offset),\n+            PatKind::Path(ref q_self, ref path) => {\n+                rewrite_path(context, true, q_self.as_ref(), path, width, offset)\n+            }\n             PatKind::TupleStruct(ref path, ref pat_vec, dotdot_pos) => {\n                 let path_str = try_opt!(rewrite_path(context, true, None, path, width, offset));\n                 rewrite_tuple_pat(pat_vec,"}, {"sha": "cb310e13c332798ce5a604ab2e1c712fe8182a91", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -302,7 +302,6 @@ fn format_function_type<'a, I>(inputs: I,\n             let type_str = try_opt!(ty.rewrite(context, budget, offset + 4));\n             format!(\" -> {}\", type_str)\n         }\n-        FunctionRetTy::None(..) => \" -> !\".to_owned(),\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n@@ -594,9 +593,14 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::BareFn(ref bare_fn) => {\n                 rewrite_bare_fn(bare_fn, self.span, context, width, offset)\n             }\n+            ast::TyKind::Never => Some(String::from(\"!\")),\n             ast::TyKind::Mac(..) |\n             ast::TyKind::Typeof(..) => unreachable!(),\n             ast::TyKind::ImplicitSelf => Some(String::from(\"\")),\n+            ast::TyKind::ImplTrait(..) => {\n+                // FIXME(#1154) Implement impl Trait\n+                Some(String::from(\"impl TODO\"))\n+            }\n         }\n     }\n }"}, {"sha": "49472bb10aafb741f39d936e68f826e5fd96cf0f", "filename": "src/utils.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -13,7 +13,8 @@ use std::cmp::Ordering;\n \n use itertools::Itertools;\n \n-use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, Path};\n+use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, NestedMetaItem,\n+                  NestedMetaItemKind, Path};\n use syntax::codemap::BytePos;\n use syntax::abi;\n \n@@ -101,11 +102,21 @@ pub fn trimmed_last_line_width(s: &str) -> usize {\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n         MetaItemKind::Word(ref s) => *s == SKIP_ANNOTATION,\n-        MetaItemKind::List(ref s, ref l) => *s == \"cfg_attr\" && l.len() == 2 && is_skip(&l[1]),\n+        MetaItemKind::List(ref s, ref l) => {\n+            *s == \"cfg_attr\" && l.len() == 2 && is_skip_nested(&l[1])\n+        }\n         _ => false,\n     }\n }\n \n+#[inline]\n+fn is_skip_nested(meta_item: &NestedMetaItem) -> bool {\n+    match meta_item.node {\n+        NestedMetaItemKind::MetaItem(ref mi) => is_skip(mi),\n+        NestedMetaItemKind::Literal(_) => false,\n+    }\n+}\n+\n #[inline]\n pub fn contains_skip(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|a| is_skip(&a.node.value))\n@@ -129,7 +140,7 @@ pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n pub fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n     match expr.node {\n         ast::ExprKind::Ret(..) |\n-        ast::ExprKind::Again(..) |\n+        ast::ExprKind::Continue(..) |\n         ast::ExprKind::Break(..) => true,\n         _ => false,\n     }\n@@ -138,7 +149,7 @@ pub fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n #[inline]\n pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n     match stmt.node {\n-        ast::StmtKind::Semi(ref expr, _) => {\n+        ast::StmtKind::Semi(ref expr) => {\n             match expr.node {\n                 ast::ExprKind::While(..) |\n                 ast::ExprKind::WhileLet(..) |\n@@ -152,6 +163,27 @@ pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n     }\n }\n \n+#[inline]\n+pub fn stmt_block(stmt: &ast::Stmt) -> Option<&ast::Block> {\n+    match stmt.node {\n+        ast::StmtKind::Expr(ref expr) => {\n+            match expr.node {\n+                ast::ExprKind::Block(ref inner) => Some(inner),\n+                _ => None,\n+            }\n+        }\n+        _ => None,\n+    }\n+}\n+\n+#[inline]\n+pub fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n+    match stmt.node {\n+        ast::StmtKind::Expr(ref expr) => Some(expr),\n+        _ => None,\n+    }\n+}\n+\n #[inline]\n pub fn trim_newlines(input: &str) -> &str {\n     match input.find(|c| c != '\\n' && c != '\\r') {\n@@ -330,9 +362,8 @@ pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n         ast::ExprKind::Field(ref e, _) |\n         ast::ExprKind::TupField(ref e, _) |\n         ast::ExprKind::Index(ref e, _) |\n-        ast::ExprKind::Range(Some(ref e), _, _) => left_most_sub_expr(e),\n-        // FIXME needs Try in Syntex\n-        // ast::ExprKind::Try(ref f) => left_most_sub_expr(e),\n+        ast::ExprKind::Range(Some(ref e), _, _) |\n+        ast::ExprKind::Try(ref e) => left_most_sub_expr(e),\n         _ => e,\n     }\n }"}, {"sha": "d37bf760a2628395aae3c2a6b43cc63008f975d2", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -52,17 +52,10 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         match stmt.node {\n-            ast::StmtKind::Decl(ref decl, _) => {\n-                if let ast::DeclKind::Item(ref item) = decl.node {\n-                    self.visit_item(item);\n-                } else {\n-                    let rewrite = stmt.rewrite(&self.get_context(),\n-                                               self.config.max_width - self.block_indent.width(),\n-                                               self.block_indent);\n-\n-                    self.push_rewrite(stmt.span, rewrite);\n-                }\n+            ast::StmtKind::Item(ref item) => {\n+                self.visit_item(item);\n             }\n+            ast::StmtKind::Local(..) |\n             ast::StmtKind::Expr(..) |\n             ast::StmtKind::Semi(..) => {\n                 let rewrite = stmt.rewrite(&self.get_context(),\n@@ -71,7 +64,8 @@ impl<'a> FmtVisitor<'a> {\n \n                 self.push_rewrite(stmt.span, rewrite);\n             }\n-            ast::StmtKind::Mac(ref mac, _macro_style, _) => {\n+            ast::StmtKind::Mac(ref mac) => {\n+                let (ref mac, _macro_style, _) = **mac;\n                 self.format_missing_with_indent(source!(self, stmt.span).lo);\n                 self.visit_mac(mac, None);\n             }\n@@ -96,18 +90,11 @@ impl<'a> FmtVisitor<'a> {\n             self.visit_stmt(stmt)\n         }\n \n-        if let Some(ref e) = b.expr {\n-            self.format_missing_with_indent(source!(self, e.span).lo);\n-            let rewrite = e.rewrite(&self.get_context(),\n-                         self.config.max_width - self.block_indent.width(),\n-                         self.block_indent)\n-                .unwrap_or_else(|| self.snippet(e.span));\n-\n-            self.buffer.push_str(&rewrite);\n-            self.last_pos = source!(self, e.span).hi;\n-\n-            if utils::semicolon_for_expr(e) {\n-                self.buffer.push_str(\";\");\n+        if !b.stmts.is_empty() {\n+            if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n+                if utils::semicolon_for_expr(expr) {\n+                    self.buffer.push_str(\";\");\n+                }\n             }\n         }\n \n@@ -150,7 +137,7 @@ impl<'a> FmtVisitor<'a> {\n                                 fd,\n                                 generics,\n                                 unsafety,\n-                                constness,\n+                                constness.node,\n                                 defaultness,\n                                 abi,\n                                 vis,\n@@ -163,7 +150,7 @@ impl<'a> FmtVisitor<'a> {\n                                 fd,\n                                 &sig.generics,\n                                 sig.unsafety,\n-                                sig.constness,\n+                                sig.constness.node,\n                                 defaultness,\n                                 sig.abi,\n                                 vis.unwrap_or(&ast::Visibility::Inherited),\n@@ -347,6 +334,9 @@ impl<'a> FmtVisitor<'a> {\n                                                  item.span);\n                 self.push_rewrite(item.span, rewrite);\n             }\n+            ast::ItemKind::Union(..) => {\n+                // FIXME(#1157): format union definitions.\n+            }\n         }\n     }\n \n@@ -387,6 +377,9 @@ impl<'a> FmtVisitor<'a> {\n                                                       self.block_indent);\n                 self.push_rewrite(ti.span, rewrite);\n             }\n+            ast::TraitItemKind::Macro(..) => {\n+                // FIXME(#1158) Macros in trait item position\n+            }\n         }\n     }\n "}, {"sha": "fc13a9edd171ecd94aedb0b4947076c51aca4d40", "filename": "tests/source/file-lines-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-1.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -17,7 +17,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "7812c75223933863ec1331f6ffa0a05e83b34ba0", "filename": "tests/source/file-lines-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-2.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -17,7 +17,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "29a0e6bb20f58e6f499e869da035a21daf900729", "filename": "tests/source/file-lines-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-3.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -17,7 +17,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "c6c0a5f82a043279b3eeab0318c8412dd704035b", "filename": "tests/source/file-lines-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Fsource%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-4.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -18,7 +18,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "250b25e6ea3a7182ec45860da0af7b028b28f0db", "filename": "tests/target/file-lines-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-1.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -18,7 +18,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "c889fc3fd6659adcc2c7dd05da60bb3c2990fb35", "filename": "tests/target/file-lines-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-2.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -12,7 +12,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "d8096dccd6729167b631e77cde569fc31eaed6e1", "filename": "tests/target/file-lines-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-3.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -13,7 +13,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}, {"sha": "c6c0a5f82a043279b3eeab0318c8412dd704035b", "filename": "tests/target/file-lines-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4418fab4f24e6497aa2a1f71bb4cf963c2971a28/tests%2Ftarget%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-4.rs?ref=4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "patch": "@@ -18,7 +18,6 @@ fn floaters() {\n     {\n         match x {\n             PushParam => {\n-                // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n                                             Some(d) => d as usize - 1,\n                                             None => return Err(\"bad param number\".to_owned()),"}]}