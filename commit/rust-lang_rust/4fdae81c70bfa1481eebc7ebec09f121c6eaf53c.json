{"sha": "4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "node_id": "C_kwDOAAsO6NoAKDRmZGFlODFjNzBiZmExNDgxZWViYzdlYmVjMDlmMTIxYzZlYWY1M2M", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2023-02-27T11:57:32Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2023-03-20T14:51:01Z"}, "message": "add large future lint", "tree": {"sha": "5d752395d7de7997d4e806c3ecaff5643197a99e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d752395d7de7997d4e806c3ecaff5643197a99e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "html_url": "https://github.com/rust-lang/rust/commit/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7fd68e87cd13ece77baa83684396c8b9cbc633", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7fd68e87cd13ece77baa83684396c8b9cbc633", "html_url": "https://github.com/rust-lang/rust/commit/ba7fd68e87cd13ece77baa83684396c8b9cbc633"}], "stats": {"total": 293, "additions": 292, "deletions": 1}, "files": [{"sha": "0352f956dfb75ed37f90947bfabb7a05974ad0d9", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -278,7 +278,7 @@ Released 2022-12-15\n   [#9490](https://github.com/rust-lang/rust-clippy/pull/9490)\n * [`almost_complete_letter_range`]: No longer lints in external macros\n   [#9467](https://github.com/rust-lang/rust-clippy/pull/9467)\n-* [`drop_copy`]: No longer lints on idiomatic cases in match arms \n+* [`drop_copy`]: No longer lints on idiomatic cases in match arms\n   [#9491](https://github.com/rust-lang/rust-clippy/pull/9491)\n * [`question_mark`]: No longer lints in const context\n   [#9487](https://github.com/rust-lang/rust-clippy/pull/9487)\n@@ -4485,6 +4485,7 @@ Released 2018-09-13\n [`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n+[`large_futures`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_futures\n [`large_include_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`large_types_passed_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value"}, {"sha": "208112b4025a114ccc0b779e621899b65ac4c7f5", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -216,6 +216,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,\n     crate::large_const_arrays::LARGE_CONST_ARRAYS_INFO,\n     crate::large_enum_variant::LARGE_ENUM_VARIANT_INFO,\n+    crate::large_futures::LARGE_FUTURES_INFO,\n     crate::large_include_file::LARGE_INCLUDE_FILE_INFO,\n     crate::large_stack_arrays::LARGE_STACK_ARRAYS_INFO,\n     crate::len_zero::COMPARISON_TO_EMPTY_INFO,"}, {"sha": "494bb2a97d265b839701fdffdfaca20ecdbf545d", "filename": "clippy_lints/src/large_futures.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_futures.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,90 @@\n+use clippy_utils::source::snippet;\n+use clippy_utils::{diagnostics::span_lint_and_sugg, ty::implements_trait};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_target::abi::Size;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// It checks for the size of a `Future` created by `async fn` or `async {}`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Due to the current [unideal implemention](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n+    /// large size of a `Future` may cause stack overflows.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// async fn wait(f: impl std::future::Future<Output = ()>) {}\n+    ///\n+    /// async fn big_fut(arg: [u8; 1024]) {}\n+    ///\n+    /// pub async fn test() {\n+    ///     let fut = big_fut([0u8; 1024]);\n+    ///     wait(fut).await;\n+    /// }\n+    /// ```\n+    ///\n+    /// `Box::pin` the big future instead.\n+    ///\n+    /// ```rust\n+    /// async fn wait(f: impl std::future::Future<Output = ()>) {}\n+    ///\n+    /// async fn big_fut(arg: [u8; 1024]) {}\n+    ///\n+    /// pub async fn test() {\n+    ///     let fut = Box::pin(big_fut([0u8; 1024]));\n+    ///     wait(fut).await;\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub LARGE_FUTURES,\n+    pedantic,\n+    \"large future may lead to unexpected stack overflows\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct LargeFuture {\n+    future_size_threshold: u64,\n+}\n+\n+impl LargeFuture {\n+    pub fn new(future_size_threshold: u64) -> Self {\n+        Self { future_size_threshold }\n+    }\n+}\n+\n+impl_lint_pass!(LargeFuture => [LARGE_FUTURES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for LargeFuture {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Match(expr, _, MatchSource::AwaitDesugar) = expr.kind {\n+            if let ExprKind::Call(func, [expr, ..]) = expr.kind {\n+                if matches!(\n+                    func.kind,\n+                    ExprKind::Path(QPath::LangItem(LangItem::IntoFutureIntoFuture, ..))\n+                ) {\n+                    let ty = cx.typeck_results().expr_ty(expr);\n+                    if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n+                        && implements_trait(cx, ty, future_trait_def_id, &[]) {\n+                            if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty)) {\n+                                let size = layout.layout.size();\n+                                if size >= Size::from_bytes(self.future_size_threshold) {\n+                                    span_lint_and_sugg(\n+                                        cx,\n+                                        LARGE_FUTURES,\n+                                        expr.span,\n+                                        &format!(\"large future with a size of {} bytes\", size.bytes()),\n+                                        \"consider `Box::pin` on it\",\n+                                        format!(\"Box::pin({})\", snippet(cx, expr.span, \"..\")),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                            }\n+                        }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "155aa106322be245bddbde57d084dfc716784ed6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -161,6 +161,7 @@ mod items_after_statements;\n mod iter_not_returning_iterator;\n mod large_const_arrays;\n mod large_enum_variant;\n+mod large_futures;\n mod large_include_file;\n mod large_stack_arrays;\n mod len_zero;\n@@ -800,6 +801,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv())));\n     store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n     store.register_late_pass(|_| Box::new(future_not_send::FutureNotSend));\n+    let future_size_threshold = conf.future_size_threshold;\n+    store.register_late_pass(move |_| Box::new(large_futures::LargeFuture::new(future_size_threshold)));\n     store.register_late_pass(|_| Box::new(if_let_mutex::IfLetMutex));\n     store.register_late_pass(|_| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|_| Box::new(equatable_if_let::PatternEquality));"}, {"sha": "639f8d95877682ca89ddaf3d13b406e10ca85c2b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -459,6 +459,10 @@ define_Conf! {\n     /// Whether to **only** check for missing documentation in items visible within the current\n     /// crate. For example, `pub(crate)` items.\n     (missing_docs_in_crate_items: bool = false),\n+    /// Lint: LARGE_FUTURES.\n+    ///\n+    /// The maximum byte size a `Future` can have, before it triggers the `clippy::large_futures` lint\n+    (future_size_threshold: u64 = 16 * 1024),\n }\n \n /// Search for the configuration file."}, {"sha": "61bb17fdf6bdb4c8b3f85a400a1bce7dff4f2486", "filename": "tests/ui-toml/large_futures/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Fclippy.toml?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1 @@\n+future-size-threshold = 1024"}, {"sha": "1238c512b0fa2a2d507a768f07693d8acdf0a6f8", "filename": "tests/ui-toml/large_futures/large_futures.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_futures)]\n+\n+fn main() {}\n+\n+pub async fn should_warn() {\n+    let x = [0u8; 1024];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn should_not_warn() {\n+    let x = [0u8; 1020];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn bar() {\n+    Box::pin(should_warn()).await;\n+\n+    async {\n+        let x = [0u8; 1024];\n+        dbg!(x);\n+    }\n+    .await;\n+\n+    should_not_warn().await;\n+}"}, {"sha": "80039d9047b39864ea668a6d5dca17ac3c8e3938", "filename": "tests/ui-toml/large_futures/large_futures.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_futures)]\n+\n+fn main() {}\n+\n+pub async fn should_warn() {\n+    let x = [0u8; 1024];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn should_not_warn() {\n+    let x = [0u8; 1020];\n+    async {}.await;\n+    dbg!(x);\n+}\n+\n+pub async fn bar() {\n+    should_warn().await;\n+\n+    async {\n+        let x = [0u8; 1024];\n+        dbg!(x);\n+    }\n+    .await;\n+\n+    should_not_warn().await;\n+}"}, {"sha": "f7895f8eaf7a1c0c234a0ee89ef967bd81c3a2d9", "filename": "tests/ui-toml/large_futures/large_futures.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,10 @@\n+error: large future with a size of 1026 bytes\n+  --> $DIR/large_futures.rs:20:5\n+   |\n+LL |     should_warn().await;\n+   |     ^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(should_warn())`\n+   |\n+   = note: `-D clippy::large-futures` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "8447c31722dd015249440af39faddafc7cd125e3", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -24,6 +24,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            enforced-import-renames\n            enum-variant-name-threshold\n            enum-variant-size-threshold\n+           future-size-threshold\n            ignore-interior-mutability\n            large-error-threshold\n            literal-representation-threshold"}, {"sha": "9d839998afd7b4e14d3086290ec9de71d7b006db", "filename": "tests/ui/large_futures.fixed", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.fixed?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+\n+#![feature(generators)]\n+#![warn(clippy::large_futures)]\n+#![allow(clippy::future_not_send)]\n+#![allow(clippy::manual_async_fn)]\n+\n+async fn big_fut(_arg: [u8; 1024 * 16]) {}\n+\n+async fn wait() {\n+    let f = async {\n+        Box::pin(big_fut([0u8; 1024 * 16])).await;\n+    };\n+    Box::pin(f).await\n+}\n+async fn calls_fut(fut: impl std::future::Future<Output = ()>) {\n+    loop {\n+        Box::pin(wait()).await;\n+        if true {\n+            return fut.await;\n+        } else {\n+            Box::pin(wait()).await;\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    let fut = big_fut([0u8; 1024 * 16]);\n+    Box::pin(foo()).await;\n+    Box::pin(calls_fut(fut)).await;\n+}\n+\n+pub fn foo() -> impl std::future::Future<Output = ()> {\n+    async {\n+        let x = [0i32; 1024 * 16];\n+        async {}.await;\n+        dbg!(x);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8b7aaa61b888bbd76e7c97263e474975e35d52db", "filename": "tests/ui/large_futures.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.rs?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+\n+#![feature(generators)]\n+#![warn(clippy::large_futures)]\n+#![allow(clippy::future_not_send)]\n+#![allow(clippy::manual_async_fn)]\n+\n+async fn big_fut(_arg: [u8; 1024 * 16]) {}\n+\n+async fn wait() {\n+    let f = async {\n+        big_fut([0u8; 1024 * 16]).await;\n+    };\n+    f.await\n+}\n+async fn calls_fut(fut: impl std::future::Future<Output = ()>) {\n+    loop {\n+        wait().await;\n+        if true {\n+            return fut.await;\n+        } else {\n+            wait().await;\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    let fut = big_fut([0u8; 1024 * 16]);\n+    foo().await;\n+    calls_fut(fut).await;\n+}\n+\n+pub fn foo() -> impl std::future::Future<Output = ()> {\n+    async {\n+        let x = [0i32; 1024 * 16];\n+        async {}.await;\n+        dbg!(x);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "557455299a9c014823aa343fc1384fb3e134b936", "filename": "tests/ui/large_futures.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.stderr?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -0,0 +1,40 @@\n+error: large future with a size of 16385 bytes\n+  --> $DIR/large_futures.rs:12:9\n+   |\n+LL |         big_fut([0u8; 1024 * 16]).await;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(big_fut([0u8; 1024 * 16]))`\n+   |\n+   = note: `-D clippy::large-futures` implied by `-D warnings`\n+\n+error: large future with a size of 16386 bytes\n+  --> $DIR/large_futures.rs:14:5\n+   |\n+LL |     f.await\n+   |     ^ help: consider `Box::pin` on it: `Box::pin(f)`\n+\n+error: large future with a size of 16387 bytes\n+  --> $DIR/large_futures.rs:18:9\n+   |\n+LL |         wait().await;\n+   |         ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n+\n+error: large future with a size of 16387 bytes\n+  --> $DIR/large_futures.rs:22:13\n+   |\n+LL |             wait().await;\n+   |             ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n+\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:29:5\n+   |\n+LL |     foo().await;\n+   |     ^^^^^ help: consider `Box::pin` on it: `Box::pin(foo())`\n+\n+error: large future with a size of 49159 bytes\n+  --> $DIR/large_futures.rs:30:5\n+   |\n+LL |     calls_fut(fut).await;\n+   |     ^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(calls_fut(fut))`\n+\n+error: aborting due to 6 previous errors\n+"}]}