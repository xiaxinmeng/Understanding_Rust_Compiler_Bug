{"sha": "278e7c33115a448eb7bbe6420404331c1820f1af", "node_id": "C_kwDOAAsO6NoAKDI3OGU3YzMzMTE1YTQ0OGViN2JiZTY0MjA0MDQzMzFjMTgyMGYxYWY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-05T14:19:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-11T14:49:09Z"}, "message": "more frugal map", "tree": {"sha": "78fc2a8352a495ae06315445b82475dc107e5e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78fc2a8352a495ae06315445b82475dc107e5e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/278e7c33115a448eb7bbe6420404331c1820f1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/278e7c33115a448eb7bbe6420404331c1820f1af", "html_url": "https://github.com/rust-lang/rust/commit/278e7c33115a448eb7bbe6420404331c1820f1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/278e7c33115a448eb7bbe6420404331c1820f1af/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "html_url": "https://github.com/rust-lang/rust/commit/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "173bbb801dda299efac32ea546a572101387d6e6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278e7c33115a448eb7bbe6420404331c1820f1af/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/278e7c33115a448eb7bbe6420404331c1820f1af/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=278e7c33115a448eb7bbe6420404331c1820f1af", "patch": "@@ -525,11 +525,11 @@ dependencies = [\n  \"cfg\",\n  \"cov-mark\",\n  \"either\",\n+ \"hashbrown\",\n  \"itertools\",\n  \"la-arena\",\n  \"limit\",\n  \"mbe\",\n- \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n  \"syntax\","}, {"sha": "039861f7f7bd66fa3af9c9f09726913212491683", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/278e7c33115a448eb7bbe6420404331c1820f1af/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/278e7c33115a448eb7bbe6420404331c1820f1af/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=278e7c33115a448eb7bbe6420404331c1820f1af", "patch": "@@ -16,7 +16,7 @@ either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/arena\" }\n itertools = \"0.10.0\"\n-once_cell = \"1\"\n+hashbrown = { version = \"0.11\", features = [\"inline-more\"], default-features = false }\n \n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "43c8a3db5c5df41756265c668b47f7d4ff1b3c52", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/278e7c33115a448eb7bbe6420404331c1820f1af/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/278e7c33115a448eb7bbe6420404331c1820f1af/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=278e7c33115a448eb7bbe6420404331c1820f1af", "patch": "@@ -8,13 +8,13 @@\n use std::{\n     any::type_name,\n     fmt,\n-    hash::{Hash, Hasher},\n+    hash::{BuildHasher, BuildHasherDefault, Hash, Hasher},\n     marker::PhantomData,\n };\n \n use la_arena::{Arena, Idx};\n use profile::Count;\n-use rustc_hash::FxHashMap;\n+use rustc_hash::FxHasher;\n use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n@@ -63,11 +63,10 @@ type ErasedFileAstId = Idx<SyntaxNodePtr>;\n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n #[derive(Default)]\n pub struct AstIdMap {\n+    /// Maps stable id to unstable ptr.\n     arena: Arena<SyntaxNodePtr>,\n-    /// Reversed mapping lazily derived from [`self.arena`].\n-    ///\n-    /// FIXE: Do not store `SyntaxNodePtr` twice.\n-    map: once_cell::sync::OnceCell<FxHashMap<SyntaxNodePtr, ErasedFileAstId>>,\n+    /// Reverse: map ptr to id.\n+    map: hashbrown::HashMap<Idx<SyntaxNodePtr>, (), ()>,\n     _c: Count<Self>,\n }\n \n@@ -107,26 +106,34 @@ impl AstIdMap {\n                 }\n             }\n         });\n+        res.map = hashbrown::HashMap::with_capacity_and_hasher(res.arena.len(), ());\n+        for (idx, ptr) in res.arena.iter() {\n+            let hash = hash_ptr(ptr);\n+            match res.map.raw_entry_mut().from_hash(hash, |idx2| *idx2 == idx) {\n+                hashbrown::hash_map::RawEntryMut::Occupied(_) => unreachable!(),\n+                hashbrown::hash_map::RawEntryMut::Vacant(entry) => {\n+                    entry.insert_with_hasher(hash, idx, (), |&idx| hash_ptr(&res.arena[idx]));\n+                }\n+            }\n+        }\n         res\n     }\n-    fn map(&self) -> &FxHashMap<SyntaxNodePtr, ErasedFileAstId> {\n-        self.map.get_or_init(|| self.arena.iter().map(|(idx, ptr)| (ptr.clone(), idx)).collect())\n-    }\n \n     pub fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n         let raw = self.erased_ast_id(item.syntax());\n         FileAstId { raw, _ty: PhantomData }\n     }\n-\n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n-        *self.map().get(&ptr).unwrap_or_else(|| {\n-            panic!(\n+        let hash = hash_ptr(&ptr);\n+        match self.map.raw_entry().from_hash(hash, |&idx| self.arena[idx] == ptr) {\n+            Some((&idx, &())) => idx,\n+            None => panic!(\n                 \"Can't find {:?} in AstIdMap:\\n{:?}\",\n                 item,\n                 self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n-            )\n-        })\n+            ),\n+        }\n     }\n \n     pub fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n@@ -138,6 +145,12 @@ impl AstIdMap {\n     }\n }\n \n+fn hash_ptr(ptr: &SyntaxNodePtr) -> u64 {\n+    let mut hasher = BuildHasherDefault::<FxHasher>::default().build_hasher();\n+    ptr.hash(&mut hasher);\n+    hasher.finish()\n+}\n+\n /// Walks the subtree in bdfs order, calling `f` for each node. What is bdfs\n /// order? It is a mix of breadth-first and depth first orders. Nodes for which\n /// `f` returns true are visited breadth-first, all the other nodes are explored"}]}