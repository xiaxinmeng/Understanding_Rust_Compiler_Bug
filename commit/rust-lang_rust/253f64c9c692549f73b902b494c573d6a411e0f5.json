{"sha": "253f64c9c692549f73b902b494c573d6a411e0f5", "node_id": "C_kwDOAAsO6NoAKDI1M2Y2NGM5YzY5MjU0OWY3M2I5MDJiNDk0YzU3M2Q2YTQxMWUwZjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-26T22:45:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-26T22:45:23Z"}, "message": "Rollup merge of #92778 - tavianator:linux-readdir-no-r, r=joshtriplett\n\nfs: Use readdir() instead of readdir_r() on Linux and Android\n\nSee #40021 for more details.  Fixes #86649.  Fixes #34668.", "tree": {"sha": "3d5e326744f3fca068c7240809f406bbfaa0462e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5e326744f3fca068c7240809f406bbfaa0462e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253f64c9c692549f73b902b494c573d6a411e0f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8c8DCRBK7hj4Ov3rIwAAEVgIAK8KT6PVLs5BoK9W2gp4PX77\nA7q0CZe0VnAmHcDgOvUsfWmGnPG5tsiir5S1hBUu4dwVwMQAtcp1K/u3S7t5Is5r\nCGPmPXfMKdGYYFpM0g7crEGLoiNM8pv05bKMA9g1MyIc9rTu/g1N2B6qywosvxW3\nODNAOjxqWOOxhXuklrn7t5FF93pruRAd9hf7VQHEB79lDXWhwCO5H5h4M4V1NWm1\n/tOXTH0Ko3Dia/i+GY88BLL/O+xnelHvJYt5j1q4NMVDrxIYA1fJfn++X5WlB8rT\n55F1QqW0bI4woQ7ldP6dRDnMjCCRRN3Unbx1dakyW61HqTuboqMVLAm35wmC1Ng=\n=t1WR\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d5e326744f3fca068c7240809f406bbfaa0462e\nparent e2b2bfe10ce5d36e9568173cb6cb9c7456b03a61\nparent 3eeb3ca40732ac56a9c5a9e4d9dc961644409db2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643237123 +0100\ncommitter GitHub <noreply@github.com> 1643237123 +0100\n\nRollup merge of #92778 - tavianator:linux-readdir-no-r, r=joshtriplett\n\nfs: Use readdir() instead of readdir_r() on Linux and Android\n\nSee #40021 for more details.  Fixes #86649.  Fixes #34668.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253f64c9c692549f73b902b494c573d6a411e0f5", "html_url": "https://github.com/rust-lang/rust/commit/253f64c9c692549f73b902b494c573d6a411e0f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253f64c9c692549f73b902b494c573d6a411e0f5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b2bfe10ce5d36e9568173cb6cb9c7456b03a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b2bfe10ce5d36e9568173cb6cb9c7456b03a61", "html_url": "https://github.com/rust-lang/rust/commit/e2b2bfe10ce5d36e9568173cb6cb9c7456b03a61"}, {"sha": "3eeb3ca40732ac56a9c5a9e4d9dc961644409db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeb3ca40732ac56a9c5a9e4d9dc961644409db2", "html_url": "https://github.com/rust-lang/rust/commit/3eeb3ca40732ac56a9c5a9e4d9dc961644409db2"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "3bb80b458485c796c14169807f45e5c0f493ef45", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/253f64c9c692549f73b902b494c573d6a411e0f5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253f64c9c692549f73b902b494c573d6a411e0f5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=253f64c9c692549f73b902b494c573d6a411e0f5", "patch": "@@ -34,7 +34,20 @@ use libc::c_char;\n use libc::dirfd;\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n use libc::fstatat64;\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"solaris\",\n+    target_os = \"fuchsia\",\n+    target_os = \"redox\",\n+    target_os = \"illumos\"\n+))]\n+use libc::readdir as readdir64;\n+#[cfg(target_os = \"linux\")]\n+use libc::readdir64;\n+#[cfg(any(target_os = \"emscripten\", target_os = \"l4re\"))]\n+use libc::readdir64_r;\n #[cfg(not(any(\n+    target_os = \"android\",\n     target_os = \"linux\",\n     target_os = \"emscripten\",\n     target_os = \"solaris\",\n@@ -60,9 +73,7 @@ use libc::{\n     lstat as lstat64, off_t as off64_t, open as open64, stat as stat64,\n };\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"l4re\"))]\n-use libc::{\n-    dirent64, fstat64, ftruncate64, lseek64, lstat64, off64_t, open64, readdir64_r, stat64,\n-};\n+use libc::{dirent64, fstat64, ftruncate64, lseek64, lstat64, off64_t, open64, stat64};\n \n pub use crate::sys_common::fs::try_exists;\n \n@@ -202,6 +213,8 @@ struct InnerReadDir {\n pub struct ReadDir {\n     inner: Arc<InnerReadDir>,\n     #[cfg(not(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"fuchsia\",\n@@ -218,11 +231,12 @@ unsafe impl Sync for Dir {}\n pub struct DirEntry {\n     entry: dirent64,\n     dir: Arc<InnerReadDir>,\n-    // We need to store an owned copy of the entry name\n-    // on Solaris and Fuchsia because a) it uses a zero-length\n-    // array to store the name, b) its lifetime between readdir\n-    // calls is not guaranteed.\n+    // We need to store an owned copy of the entry name on platforms that use\n+    // readdir() (not readdir_r()), because a) struct dirent may use a flexible\n+    // array to store the name, b) it lives only until the next readdir() call.\n     #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"fuchsia\",\n@@ -449,6 +463,8 @@ impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n         target_os = \"solaris\",\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n@@ -457,12 +473,13 @@ impl Iterator for ReadDir {\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             loop {\n-                // Although readdir_r(3) would be a correct function to use here because\n-                // of the thread safety, on Illumos and Fuchsia the readdir(3C) function\n-                // is safe to use in threaded applications and it is generally preferred\n-                // over the readdir_r(3C) function.\n+                // As of POSIX.1-2017, readdir() is not required to be thread safe; only\n+                // readdir_r() is. However, readdir_r() cannot correctly handle platforms\n+                // with unlimited or variable NAME_MAX.  Many modern platforms guarantee\n+                // thread safety for readdir() as long an individual DIR* is not accessed\n+                // concurrently, which is sufficient for Rust.\n                 super::os::set_errno(0);\n-                let entry_ptr = libc::readdir(self.inner.dirp.0);\n+                let entry_ptr = readdir64(self.inner.dirp.0);\n                 if entry_ptr.is_null() {\n                     // null can mean either the end is reached or an error occurred.\n                     // So we had to clear errno beforehand to check for an error now.\n@@ -486,6 +503,8 @@ impl Iterator for ReadDir {\n     }\n \n     #[cfg(not(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n         target_os = \"solaris\",\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n@@ -531,17 +550,17 @@ impl Drop for Dir {\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        self.dir.root.join(OsStr::from_bytes(self.name_bytes()))\n+        self.dir.root.join(self.file_name_os_str())\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        OsStr::from_bytes(self.name_bytes()).to_os_string()\n+        self.file_name_os_str().to_os_string()\n     }\n \n     #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n     pub fn metadata(&self) -> io::Result<FileAttr> {\n         let fd = cvt(unsafe { dirfd(self.dir.dirp.0) })?;\n-        let name = self.entry.d_name.as_ptr();\n+        let name = self.name_cstr().as_ptr();\n \n         cfg_has_statx! {\n             if let Some(ret) = unsafe { try_statx(\n@@ -639,29 +658,21 @@ impl DirEntry {\n             )\n         }\n     }\n-    #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"linux\",\n-        target_os = \"emscripten\",\n-        target_os = \"l4re\",\n-        target_os = \"haiku\",\n-        target_os = \"vxworks\",\n-        target_os = \"espidf\"\n-    ))]\n-    fn name_bytes(&self) -> &[u8] {\n-        unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes() }\n-    }\n-    #[cfg(any(\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-        target_os = \"fuchsia\",\n-        target_os = \"redox\"\n-    ))]\n+    #[cfg(not(any(\n+        target_os = \"macos\",\n+        target_os = \"ios\",\n+        target_os = \"netbsd\",\n+        target_os = \"openbsd\",\n+        target_os = \"freebsd\",\n+        target_os = \"dragonfly\"\n+    )))]\n     fn name_bytes(&self) -> &[u8] {\n-        self.name.as_bytes()\n+        self.name_cstr().to_bytes()\n     }\n \n     #[cfg(not(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"fuchsia\",\n@@ -670,7 +681,14 @@ impl DirEntry {\n     fn name_cstr(&self) -> &CStr {\n         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()) }\n     }\n-    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\"))]\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\"\n+    ))]\n     fn name_cstr(&self) -> &CStr {\n         &self.name\n     }\n@@ -1076,6 +1094,8 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n             Ok(ReadDir {\n                 inner: Arc::new(inner),\n                 #[cfg(not(any(\n+                    target_os = \"android\",\n+                    target_os = \"linux\",\n                     target_os = \"solaris\",\n                     target_os = \"illumos\",\n                     target_os = \"fuchsia\",\n@@ -1615,6 +1635,8 @@ mod remove_dir_impl {\n             ReadDir {\n                 inner: Arc::new(InnerReadDir { dirp, root: dummy_root }),\n                 #[cfg(not(any(\n+                    target_os = \"android\",\n+                    target_os = \"linux\",\n                     target_os = \"solaris\",\n                     target_os = \"illumos\",\n                     target_os = \"fuchsia\","}, {"sha": "7466c77356c7c40a35a5b1d23359e7ba9f7e799d", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/253f64c9c692549f73b902b494c573d6a411e0f5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253f64c9c692549f73b902b494c573d6a411e0f5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=253f64c9c692549f73b902b494c573d6a411e0f5", "patch": "@@ -75,7 +75,7 @@ pub fn errno() -> i32 {\n }\n \n /// Sets the platform-specific value of errno\n-#[cfg(all(not(target_os = \"linux\"), not(target_os = \"dragonfly\"), not(target_os = \"vxworks\")))] // needed for readdir and syscall!\n+#[cfg(all(not(target_os = \"dragonfly\"), not(target_os = \"vxworks\")))] // needed for readdir and syscall!\n #[allow(dead_code)] // but not all target cfgs actually end up using it\n pub fn set_errno(e: i32) {\n     unsafe { *errno_location() = e as c_int }"}]}