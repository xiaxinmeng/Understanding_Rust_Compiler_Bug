{"sha": "87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5", "node_id": "C_kwDOAAsO6NoAKDg3Njk2ZmQ1YTFhMWI3Y2Q3NWNkOWE2Njg5NmRlYWUwYWI1NmNmYjU", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-12T22:52:34Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-12T22:52:34Z"}, "message": "Add a better approach comment in `ptr::read` to justify the intrinsic", "tree": {"sha": "ddaeb15423dcf90b4432e0cca80d2cc4c6c59c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddaeb15423dcf90b4432e0cca80d2cc4c6c59c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5", "html_url": "https://github.com/rust-lang/rust/commit/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f70bb8c43054d3948ffb579ba3809822a889c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f70bb8c43054d3948ffb579ba3809822a889c62", "html_url": "https://github.com/rust-lang/rust/commit/1f70bb8c43054d3948ffb579ba3809822a889c62"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "86929e2c4889ce6e99ffdded90a943169a310f57", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=87696fd5a1a1b7cd75cd9a66896deae0ab56cfb5", "patch": "@@ -1135,17 +1135,31 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n-    // We are calling the intrinsics directly to avoid function calls in the generated code\n-    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n-    #[cfg(bootstrap)]\n-    extern \"rust-intrinsic\" {\n-        #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n-        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-    }\n+    // It would be semantically correct to implement this via `copy_nonoverlapping`\n+    // and `MaybeUninit`, as was done before PR #109035.\n+\n+    // However, it switched to intrinsic that lowers to `_0 = *src` in MIR in\n+    // order to address a few implementation issues:\n+    //\n+    // - Using `MaybeUninit::assume_init` after a `copy_nonoverlapping` was not\n+    //   turning the untyped copy into a typed load. As such, the generated\n+    //   `load` in LLVM didn't get various metadata, such as `!range` (#73258),\n+    //   `!nonnull`, and `!noundef`, resulting in poorer optimization.\n+    // - Going through the extra local resulted in multiple extra copies, even\n+    //   in optimized MIR.  (Ignoring StorageLive/Dead, the intrinsic is one\n+    //   MIR statement, while the previous implementation was eight.)  LLVM\n+    //   could sometimes optimize them away, but because `read` is at the core\n+    //   of so many things, not having them in the first place improves what we\n+    //   hand off to the backend.  For example, `mem::replace::<Big>` previously\n+    //   emitted 4 `alloca` and 6 `memcpy`s, but is now 1 `alloc` and 3 `memcpy`s.\n+    // - In general, this approach keeps us from getting any more bugs (like\n+    //   #106369) that boil down to \"`read(p)` is worse than `*p`\", as this\n+    //   makes them look identical to the backend (or other MIR consumers).\n+    //\n+    // Future enhancements to MIR optimizations might well allow this to return\n+    // to the previous implementation, rather than using an intrinsic.\n \n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n-    // `src` cannot overlap `tmp` because `tmp` was just allocated on\n-    // the stack as a separate allocated object.\n     unsafe {\n         assert_unsafe_precondition!(\n             \"ptr::read requires that the pointer argument is aligned and non-null\",\n@@ -1154,14 +1168,21 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n \n         #[cfg(bootstrap)]\n         {\n+            // We are calling the intrinsics directly to avoid function calls in the\n+            // generated code as `intrinsics::copy_nonoverlapping` is a wrapper function.\n+            extern \"rust-intrinsic\" {\n+                #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n+                fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+            }\n+\n+            // `src` cannot overlap `tmp` because `tmp` was just allocated on\n+            // the stack as a separate allocated object.\n             let mut tmp = MaybeUninit::<T>::uninit();\n             copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n             tmp.assume_init()\n         }\n         #[cfg(not(bootstrap))]\n         {\n-            // This uses a dedicated intrinsic, not `copy_nonoverlapping`,\n-            // so that it gets a *typed* copy, not an *untyped* one.\n             crate::intrinsics::read_via_copy(src)\n         }\n     }"}]}