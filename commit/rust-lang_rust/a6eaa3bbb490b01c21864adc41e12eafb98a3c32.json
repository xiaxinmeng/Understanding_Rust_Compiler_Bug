{"sha": "a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZWFhM2JiYjQ5MGIwMWMyMTg2NGFkYzQxZTEyZWFmYjk4YTNjMzI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-30T17:28:20Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-30T18:14:55Z"}, "message": "iter: add max and min functions", "tree": {"sha": "e0880954184861b09e904ea8fd88a0eff85431dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0880954184861b09e904ea8fd88a0eff85431dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "html_url": "https://github.com/rust-lang/rust/commit/a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6eaa3bbb490b01c21864adc41e12eafb98a3c32/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f18bb550e1293e77281b1cc76f1830a4da2d355", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f18bb550e1293e77281b1cc76f1830a4da2d355", "html_url": "https://github.com/rust-lang/rust/commit/6f18bb550e1293e77281b1cc76f1830a4da2d355"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "8fc2db6d6f19a9289b281bd4d630347c98ad7777", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a6eaa3bbb490b01c21864adc41e12eafb98a3c32/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6eaa3bbb490b01c21864adc41e12eafb98a3c32/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "patch": "@@ -41,6 +41,7 @@ much easier to implement.\n \n */\n \n+use cmp::Ord;\n use option::{Option, Some, None};\n \n pub trait Times {\n@@ -107,8 +108,7 @@ pub fn all<T>(predicate: &fn(T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> bool {\n }\n \n /**\n- * Return the first element where `predicate` returns `true`, otherwise return `Npne` if no element\n- * is found.\n+ * Return the first element where `predicate` returns `true`. Return `None` if no element is found.\n  *\n  * # Example:\n  *\n@@ -127,6 +127,58 @@ pub fn find<T>(predicate: &fn(&T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> Opti\n     None\n }\n \n+/**\n+ * Return the largest item yielded by an iterator. Return `None` if the iterator is empty.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+ * assert_eq!(max(|f| xs.each(f)).unwrap(), &15);\n+ * ~~~~\n+ */\n+#[inline]\n+pub fn max<T: Ord>(iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    let mut result = None;\n+    for iter |x| {\n+        match result {\n+            Some(ref mut y) => {\n+                if x > *y {\n+                    *y = x;\n+                }\n+            }\n+            None => result = Some(x)\n+        }\n+    }\n+    result\n+}\n+\n+/**\n+ * Return the smallest item yielded by an iterator. Return `None` if the iterator is empty.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+ * assert_eq!(max(|f| xs.each(f)).unwrap(), &-5);\n+ * ~~~~\n+ */\n+#[inline]\n+pub fn min<T: Ord>(iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    let mut result = None;\n+    for iter |x| {\n+        match result {\n+            Some(ref mut y) => {\n+                if x < *y {\n+                    *y = x;\n+                }\n+            }\n+            None => result = Some(x)\n+        }\n+    }\n+    result\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -157,4 +209,16 @@ mod tests {\n         let xs = ~[1u, 2, 3, 4, 5, 6];\n         assert_eq!(*find(|& &x: & &uint| x > 3, |f| xs.each(f)).unwrap(), 4);\n     }\n+\n+    #[test]\n+    fn test_max() {\n+        let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+        assert_eq!(max(|f| xs.each(f)).unwrap(), &15);\n+    }\n+\n+    #[test]\n+    fn test_min() {\n+        let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+        assert_eq!(min(|f| xs.each(f)).unwrap(), &-5);\n+    }\n }"}]}