{"sha": "41d79374930ba9db67467008fc318f5e8fd8b93d", "node_id": "C_kwDOAAsO6NoAKDQxZDc5Mzc0OTMwYmE5ZGI2NzQ2NzAwOGZjMzE4ZjVlOGZkOGI5M2Q", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-20T02:05:02Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T07:19:37Z"}, "message": "Remove unnecessary `test_kind` field and `TestKind` struct", "tree": {"sha": "b295bdbeae9e26473d6cc66a7c05cc0cae5ff102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b295bdbeae9e26473d6cc66a7c05cc0cae5ff102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d79374930ba9db67467008fc318f5e8fd8b93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d79374930ba9db67467008fc318f5e8fd8b93d", "html_url": "https://github.com/rust-lang/rust/commit/41d79374930ba9db67467008fc318f5e8fd8b93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d79374930ba9db67467008fc318f5e8fd8b93d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572c0d553f2bd1b934b08fe240310112369a5c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/572c0d553f2bd1b934b08fe240310112369a5c76", "html_url": "https://github.com/rust-lang/rust/commit/572c0d553f2bd1b934b08fe240310112369a5c76"}], "stats": {"total": 87, "additions": 21, "deletions": 66}, "files": [{"sha": "5b5e5fe6662f081c1186a1963d1788540a220ee6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=41d79374930ba9db67467008fc318f5e8fd8b93d", "patch": "@@ -634,6 +634,14 @@ impl Kind {\n             Kind::Suggest => \"suggest\",\n         }\n     }\n+\n+    pub fn test_description(&self) -> &'static str {\n+        match self {\n+            Kind::Test => \"Testing\",\n+            Kind::Bench => \"Benchmarking\",\n+            _ => panic!(\"not a test command: {}!\", self.as_str()),\n+        }\n+    }\n }\n \n impl<'a> Builder<'a> {"}, {"sha": "72ac46b6bfdddd314b752ab9a680e34f995528a9", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=41d79374930ba9db67467008fc318f5e8fd8b93d", "patch": "@@ -578,7 +578,6 @@ mod dist {\n                 compiler: Compiler { host, stage: 0 },\n                 target: host,\n                 mode: Mode::Std,\n-                test_kind: test::TestKind::Test,\n                 crates: vec![INTERNER.intern_str(\"std\")],\n             },]\n         );"}, {"sha": "7f843d1c7d2ed8357a962b81e4ba7e6a34f184cb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 65, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d79374930ba9db67467008fc318f5e8fd8b93d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=41d79374930ba9db67467008fc318f5e8fd8b93d", "patch": "@@ -27,44 +27,6 @@ use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n \n-/// The two modes of the test runner; tests or benchmarks.\n-#[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, PartialOrd, Ord)]\n-pub enum TestKind {\n-    /// Run `cargo test`.\n-    Test,\n-    /// Run `cargo bench`.\n-    Bench,\n-}\n-\n-impl From<Kind> for TestKind {\n-    fn from(kind: Kind) -> Self {\n-        match kind {\n-            Kind::Test => TestKind::Test,\n-            Kind::Bench => TestKind::Bench,\n-            _ => panic!(\"unexpected kind in crate: {:?}\", kind),\n-        }\n-    }\n-}\n-\n-impl TestKind {\n-    // Return the cargo subcommand for this test kind\n-    fn subcommand(self) -> &'static str {\n-        match self {\n-            TestKind::Test => \"test\",\n-            TestKind::Bench => \"bench\",\n-        }\n-    }\n-}\n-\n-impl Into<Kind> for TestKind {\n-    fn into(self) -> Kind {\n-        match self {\n-            TestKind::Test => Kind::Test,\n-            TestKind::Bench => Kind::Bench,\n-        }\n-    }\n-}\n-\n fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if !builder.fail_fast {\n         if !builder.try_run(cmd) {\n@@ -2111,7 +2073,6 @@ impl Step for RustcGuide {\n pub struct CrateLibrustc {\n     compiler: Compiler,\n     target: TargetSelection,\n-    test_kind: TestKind,\n     crates: Vec<Interned<String>>,\n }\n \n@@ -2133,17 +2094,15 @@ impl Step for CrateLibrustc {\n             .iter()\n             .map(|p| builder.crate_paths[&p.assert_single_path().path].clone())\n             .collect();\n-        let test_kind = builder.kind.into();\n \n-        builder.ensure(CrateLibrustc { compiler, target: run.target, test_kind, crates });\n+        builder.ensure(CrateLibrustc { compiler, target: run.target, crates });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n         builder.ensure(Crate {\n             compiler: self.compiler,\n             target: self.target,\n             mode: Mode::Rustc,\n-            test_kind: self.test_kind,\n             crates: self.crates,\n         });\n     }\n@@ -2154,7 +2113,6 @@ pub struct Crate {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n     pub mode: Mode,\n-    pub test_kind: TestKind,\n     pub crates: Vec<Interned<String>>,\n }\n \n@@ -2170,14 +2128,13 @@ impl Step for Crate {\n         let builder = run.builder;\n         let host = run.build_triple();\n         let compiler = builder.compiler_for(builder.top_stage, host, host);\n-        let test_kind = builder.kind.into();\n         let crates = run\n             .paths\n             .iter()\n             .map(|p| builder.crate_paths[&p.assert_single_path().path].clone())\n             .collect();\n \n-        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, test_kind, crates });\n+        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, crates });\n     }\n \n     /// Runs all unit tests plus documentation tests for a given crate defined\n@@ -2192,7 +2149,6 @@ impl Step for Crate {\n         let compiler = self.compiler;\n         let target = self.target;\n         let mode = self.mode;\n-        let test_kind = self.test_kind;\n \n         builder.ensure(compile::Std::new(compiler, target));\n         builder.ensure(RemoteCopyLibs { compiler, target });\n@@ -2204,7 +2160,7 @@ impl Step for Crate {\n         let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n         let mut cargo =\n-            builder.cargo(compiler, mode, SourceType::InTree, target, test_kind.subcommand());\n+            builder.cargo(compiler, mode, SourceType::InTree, target, builder.kind.as_str());\n         match mode {\n             Mode::Std => {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n@@ -2220,7 +2176,7 @@ impl Step for Crate {\n         // Pass in some standard flags then iterate over the graph we've discovered\n         // in `cargo metadata` with the maps above and figure out what `-p`\n         // arguments need to get passed.\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n+        if builder.kind == Kind::Test && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n         match builder.doc_tests {\n@@ -2270,7 +2226,7 @@ impl Step for Crate {\n         }\n \n         let _guard = builder.msg(\n-            test_kind,\n+            builder.kind,\n             compiler.stage,\n             crate_description(&self.crates),\n             compiler.host,\n@@ -2285,7 +2241,6 @@ impl Step for Crate {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdoc {\n     host: TargetSelection,\n-    test_kind: TestKind,\n }\n \n impl Step for CrateRustdoc {\n@@ -2300,13 +2255,10 @@ impl Step for CrateRustdoc {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n \n-        let test_kind = builder.kind.into();\n-\n-        builder.ensure(CrateRustdoc { host: run.target, test_kind });\n+        builder.ensure(CrateRustdoc { host: run.target });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let test_kind = self.test_kind;\n         let target = self.host;\n \n         let compiler = if builder.download_rustc() {\n@@ -2325,12 +2277,12 @@ impl Step for CrateRustdoc {\n             compiler,\n             Mode::ToolRustc,\n             target,\n-            test_kind.subcommand(),\n+            builder.kind.as_str(),\n             \"src/tools/rustdoc\",\n             SourceType::InTree,\n             &[],\n         );\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n+        if builder.kind == Kind::Test && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n         match builder.doc_tests {\n@@ -2391,7 +2343,7 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"--quiet\");\n         }\n \n-        let _guard = builder.msg(test_kind, compiler.stage, \"rustdoc\", compiler.host, target);\n+        let _guard = builder.msg(builder.kind, compiler.stage, \"rustdoc\", compiler.host, target);\n \n         let _time = util::timeit(&builder);\n \n@@ -2402,7 +2354,6 @@ impl Step for CrateRustdoc {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct CrateRustdocJsonTypes {\n     host: TargetSelection,\n-    test_kind: TestKind,\n }\n \n impl Step for CrateRustdocJsonTypes {\n@@ -2417,13 +2368,10 @@ impl Step for CrateRustdocJsonTypes {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n \n-        let test_kind = builder.kind.into();\n-\n-        builder.ensure(CrateRustdocJsonTypes { host: run.target, test_kind });\n+        builder.ensure(CrateRustdocJsonTypes { host: run.target });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        let test_kind = self.test_kind;\n         let target = self.host;\n \n         // Use the previous stage compiler to reuse the artifacts that are\n@@ -2438,12 +2386,12 @@ impl Step for CrateRustdocJsonTypes {\n             compiler,\n             Mode::ToolRustc,\n             target,\n-            test_kind.subcommand(),\n+            builder.kind.as_str(),\n             \"src/rustdoc-json-types\",\n             SourceType::InTree,\n             &[],\n         );\n-        if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n+        if builder.kind == Kind::Test && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n \n@@ -2457,7 +2405,7 @@ impl Step for CrateRustdocJsonTypes {\n         }\n \n         let _guard =\n-            builder.msg(test_kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n+            builder.msg(builder.kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n         let _time = util::timeit(&builder);\n \n         add_flags_and_try_run_tests(builder, &mut cargo.into());"}]}