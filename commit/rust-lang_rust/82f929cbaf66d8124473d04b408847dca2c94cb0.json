{"sha": "82f929cbaf66d8124473d04b408847dca2c94cb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjkyOWNiYWY2NmQ4MTI0NDczZDA0YjQwODg0N2RjYTJjOTRjYjA=", "commit": {"author": {"name": "Jacek Pospychala", "email": "jacek.pospychala@gmail.com", "date": "2020-03-29T20:22:28Z"}, "committer": {"name": "Jacek Pospychala", "email": "jacek.pospychala@gmail.com", "date": "2020-03-29T20:22:36Z"}, "message": "`unused_self` false positive", "tree": {"sha": "7cd85e640c252f767dae52895a6a63157a25c4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd85e640c252f767dae52895a6a63157a25c4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f929cbaf66d8124473d04b408847dca2c94cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f929cbaf66d8124473d04b408847dca2c94cb0", "html_url": "https://github.com/rust-lang/rust/commit/82f929cbaf66d8124473d04b408847dca2c94cb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f929cbaf66d8124473d04b408847dca2c94cb0/comments", "author": {"login": "jpospychala", "id": 601783, "node_id": "MDQ6VXNlcjYwMTc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/601783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpospychala", "html_url": "https://github.com/jpospychala", "followers_url": "https://api.github.com/users/jpospychala/followers", "following_url": "https://api.github.com/users/jpospychala/following{/other_user}", "gists_url": "https://api.github.com/users/jpospychala/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpospychala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpospychala/subscriptions", "organizations_url": "https://api.github.com/users/jpospychala/orgs", "repos_url": "https://api.github.com/users/jpospychala/repos", "events_url": "https://api.github.com/users/jpospychala/events{/privacy}", "received_events_url": "https://api.github.com/users/jpospychala/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jpospychala", "id": 601783, "node_id": "MDQ6VXNlcjYwMTc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/601783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpospychala", "html_url": "https://github.com/jpospychala", "followers_url": "https://api.github.com/users/jpospychala/followers", "following_url": "https://api.github.com/users/jpospychala/following{/other_user}", "gists_url": "https://api.github.com/users/jpospychala/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpospychala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpospychala/subscriptions", "organizations_url": "https://api.github.com/users/jpospychala/orgs", "repos_url": "https://api.github.com/users/jpospychala/repos", "events_url": "https://api.github.com/users/jpospychala/events{/privacy}", "received_events_url": "https://api.github.com/users/jpospychala/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c40a1519f1dffda658338d1cffcbac036e1e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c40a1519f1dffda658338d1cffcbac036e1e12", "html_url": "https://github.com/rust-lang/rust/commit/d3c40a1519f1dffda658338d1cffcbac036e1e12"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "bca73a377cad67b042fb59e6eb4a5381b21f9fd5", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/82f929cbaf66d8124473d04b408847dca2c94cb0/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f929cbaf66d8124473d04b408847dca2c94cb0/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=82f929cbaf66d8124473d04b408847dca2c94cb0", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::map::Map;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{AssocItemKind, HirId, ImplItem, ImplItemKind, ImplItemRef, ItemKind, Path};\n+use rustc_hir::{HirId, ImplItem, ImplItemKind, ItemKind, Path};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -45,45 +45,36 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n             return;\n         }\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n-        let item = cx.tcx.hir().expect_item(parent);\n-        if let ItemKind::Impl {\n-            of_trait: None,\n-            items: impl_item_refs,\n-            ..\n-        } = item.kind\n-        {\n-            for impl_item_ref in impl_item_refs {\n-                if_chain! {\n-                    if let ImplItemRef {\n-                        kind: AssocItemKind::Method { has_self: true },\n-                        ..\n-                    } = impl_item_ref;\n-                    if let ImplItemKind::Fn(_, body_id) = &impl_item.kind;\n-                    let body = cx.tcx.hir().body(*body_id);\n-                    if !body.params.is_empty();\n-                    then {\n-                        let self_param = &body.params[0];\n-                        let self_hir_id = self_param.pat.hir_id;\n-                        let mut visitor = UnusedSelfVisitor {\n-                            cx,\n-                            uses_self: false,\n-                            self_hir_id: &self_hir_id,\n-                        };\n-                        visitor.visit_body(body);\n-                        if !visitor.uses_self {\n-                            span_lint_and_help(\n-                                cx,\n-                                UNUSED_SELF,\n-                                self_param.span,\n-                                \"unused `self` argument\",\n-                                \"consider refactoring to a associated function\",\n-                            );\n-                            return;\n-                        }\n-                    }\n+        let parent_item = cx.tcx.hir().expect_item(parent);\n+        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n+        let assoc_item = cx.tcx.associated_item(def_id);\n+        if_chain! {\n+            if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n+            if assoc_item.method_has_self_argument;\n+            if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n+            let body = cx.tcx.hir().body(*body_id);\n+            if !body.params.is_empty();\n+            then {\n+                let self_param = &body.params[0];\n+                let self_hir_id = self_param.pat.hir_id;\n+                let mut visitor = UnusedSelfVisitor {\n+                    cx,\n+                    uses_self: false,\n+                    self_hir_id: &self_hir_id,\n+                };\n+                visitor.visit_body(body);\n+                if !visitor.uses_self {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNUSED_SELF,\n+                        self_param.span,\n+                        \"unused `self` argument\",\n+                        \"consider refactoring to a associated function\",\n+                    );\n+                    return;\n                 }\n             }\n-        };\n+        }\n     }\n }\n "}, {"sha": "7a4bbdda1ab273879245443c17e6275c5a240737", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82f929cbaf66d8124473d04b408847dca2c94cb0/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f929cbaf66d8124473d04b408847dca2c94cb0/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=82f929cbaf66d8124473d04b408847dca2c94cb0", "patch": "@@ -42,6 +42,17 @@ mod unused_self_allow {\n     impl B {\n         fn unused_self_move(self) {}\n     }\n+\n+    struct C {}\n+\n+    #[allow(clippy::unused_self)]\n+    impl C {\n+        #[warn(clippy::unused_self)]\n+        fn some_fn((): ()) {}\n+\n+        // shouldn't trigger\n+        fn unused_self_move(self) {}\n+    }\n }\n \n mod used_self {"}]}