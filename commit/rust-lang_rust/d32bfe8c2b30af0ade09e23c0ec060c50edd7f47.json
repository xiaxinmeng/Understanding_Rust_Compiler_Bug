{"sha": "d32bfe8c2b30af0ade09e23c0ec060c50edd7f47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmJmZThjMmIzMGFmMGFkZTA5ZTIzYzBlYzA2MGM1MGVkZDdmNDc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-01T18:03:00Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-01T18:03:00Z"}, "message": "Fix pointer types in the manual.", "tree": {"sha": "27778f1e4e1da5296a3630bc996911bab6ea3d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27778f1e4e1da5296a3630bc996911bab6ea3d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47", "html_url": "https://github.com/rust-lang/rust/commit/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb7589a1881e7a649cb7c23e973f01a60aac78b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7589a1881e7a649cb7c23e973f01a60aac78b3", "html_url": "https://github.com/rust-lang/rust/commit/eb7589a1881e7a649cb7c23e973f01a60aac78b3"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "5fcdbcc85a6064cc1c5bd0ed9a1e3ac5cad17561", "filename": "src/doc/rust.md", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d32bfe8c2b30af0ade09e23c0ec060c50edd7f47/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=d32bfe8c2b30af0ade09e23c0ec060c50edd7f47", "patch": "@@ -3668,32 +3668,17 @@ let a: List<int> = Cons(7, box Cons(13, box Nil));\n \n All pointers in Rust are explicit first-class values.\n They can be copied, stored into data structures, and returned from functions.\n-There are four varieties of pointer in Rust:\n-\n-* Owning pointers (`Box`)\n-  : These point to owned heap allocations (or \"boxes\") in the shared, inter-task heap.\n-    Each owned box has a single owning pointer; pointer and pointee retain a 1:1 relationship at all times.\n-    Owning pointers are written `Box<content>`,\n-    for example `Box<int>` means an owning pointer to an owned box containing an integer.\n-    Copying an owned box is a \"deep\" operation:\n-    it involves allocating a new owned box and copying the contents of the old box into the new box.\n-    Releasing an owning pointer immediately releases its corresponding owned box.\n+There are two varieties of pointer in Rust:\n \n * References (`&`)\n   : These point to memory _owned by some other value_.\n-    References arise by (automatic) conversion from owning pointers, managed pointers,\n-    or by applying the borrowing operator `&` to some other value,\n-    including [lvalues, rvalues or temporaries](#lvalues,-rvalues-and-temporaries).\n-    A borrow expression is written `&content`.\n-\n-    A reference type is written `&'f type` for some lifetime-variable `f`,\n-    or just `&type` when the lifetime can be elided;\n-    for example `&int` means a reference to an integer.\n+    A reference type is written `&type` for some lifetime-variable `f`,\n+    or just `&'a type` when you need an explicit lifetime.\n     Copying a reference is a \"shallow\" operation:\n     it involves only copying the pointer itself.\n     Releasing a reference typically has no effect on the value it points to,\n-    with the exception of temporary values,\n-    which are released when the last reference to them is released.\n+    with the exception of temporary values, which are released when the last\n+    reference to them is released.\n \n * Raw pointers (`*`)\n   : Raw pointers are pointers without safety or liveness guarantees.\n@@ -3706,6 +3691,9 @@ There are four varieties of pointer in Rust:\n     they exist to support interoperability with foreign code,\n     and writing performance-critical or low-level functions.\n \n+The standard library contains addtional 'smart pointer' types beyond references\n+and raw pointers.\n+\n ### Function types\n \n The function type constructor `fn` forms new function types."}]}