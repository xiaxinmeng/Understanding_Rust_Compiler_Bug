{"sha": "c94c74e2d936213cabcbb9675f81007ac7c3b78a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NGM3NGUyZDkzNjIxM2NhYmNiYjk2NzVmODEwMDdhYzdjM2I3OGE=", "commit": {"author": {"name": "Christoph Schmidler", "email": "c.schmidler@gmail.com", "date": "2020-01-21T15:46:07Z"}, "committer": {"name": "Christoph Schmidler", "email": "c.schmidler@gmail.com", "date": "2020-03-05T07:09:52Z"}, "message": "Opt out of CTFE if the 'const_eval_limit' is set to 0", "tree": {"sha": "15189209ddd04691f9c7053e5c1f691a35b6121f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15189209ddd04691f9c7053e5c1f691a35b6121f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c94c74e2d936213cabcbb9675f81007ac7c3b78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c94c74e2d936213cabcbb9675f81007ac7c3b78a", "html_url": "https://github.com/rust-lang/rust/commit/c94c74e2d936213cabcbb9675f81007ac7c3b78a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c94c74e2d936213cabcbb9675f81007ac7c3b78a/comments", "author": {"login": "TheSamsa", "id": 13667299, "node_id": "MDQ6VXNlcjEzNjY3Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/13667299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSamsa", "html_url": "https://github.com/TheSamsa", "followers_url": "https://api.github.com/users/TheSamsa/followers", "following_url": "https://api.github.com/users/TheSamsa/following{/other_user}", "gists_url": "https://api.github.com/users/TheSamsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSamsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSamsa/subscriptions", "organizations_url": "https://api.github.com/users/TheSamsa/orgs", "repos_url": "https://api.github.com/users/TheSamsa/repos", "events_url": "https://api.github.com/users/TheSamsa/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSamsa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TheSamsa", "id": 13667299, "node_id": "MDQ6VXNlcjEzNjY3Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/13667299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheSamsa", "html_url": "https://github.com/TheSamsa", "followers_url": "https://api.github.com/users/TheSamsa/followers", "following_url": "https://api.github.com/users/TheSamsa/following{/other_user}", "gists_url": "https://api.github.com/users/TheSamsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheSamsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheSamsa/subscriptions", "organizations_url": "https://api.github.com/users/TheSamsa/orgs", "repos_url": "https://api.github.com/users/TheSamsa/repos", "events_url": "https://api.github.com/users/TheSamsa/events{/privacy}", "received_events_url": "https://api.github.com/users/TheSamsa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "288e142737af75007ef973c037cd4ded87d7e510", "url": "https://api.github.com/repos/rust-lang/rust/commits/288e142737af75007ef973c037cd4ded87d7e510", "html_url": "https://github.com/rust-lang/rust/commit/288e142737af75007ef973c037cd4ded87d7e510"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "df68e83bcac744e1b5fd4fa99f3b058955b81f99", "filename": "src/doc/unstable-book/src/language-features/const-eval-limit.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-eval-limit.md?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -2,6 +2,6 @@\n \n The tracking issue for this feature is: [#67217]\n \n-[#57563]: https://github.com/rust-lang/rust/issues/67217\n+[#67217]: https://github.com/rust-lang/rust/issues/67217\n \n-The `const_eval_limit` allows someone to limit the evaluation steps the CTFE undertakes to evaluate a `const fn`.\n\\ No newline at end of file\n+The `const_eval_limit` allows someone to limit the evaluation steps the CTFE undertakes to evaluate a `const fn`."}, {"sha": "1bf748e66e2a04c90b756594e5cfe8ba9bbd7b22", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -89,7 +89,7 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n     InterpCx::new(\n         tcx.at(span),\n         param_env,\n-        CompileTimeInterpreter::new(),\n+        CompileTimeInterpreter::new(*tcx.sess.const_eval_limit.get()),\n         MemoryExtra { can_access_statics },\n     )\n }\n@@ -297,7 +297,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     let mut ecx = InterpCx::new(\n         tcx.at(span),\n         key.param_env,\n-        CompileTimeInterpreter::new(),\n+        CompileTimeInterpreter::new(*tcx.sess.const_eval_limit.get()),\n         MemoryExtra { can_access_statics: is_static },\n     );\n "}, {"sha": "ed8029834680c2c84710ad183439cf42142e7b99", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::{self, Ty};\n use std::borrow::{Borrow, Cow};\n use std::collections::hash_map::Entry;\n+use std::convert::TryFrom;\n use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -85,9 +86,6 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n     }\n }\n \n-/// Number of steps until the detector even starts doing anything.\n-/// Also, a warning is shown to the user when this number is reached.\n-const STEPS_UNTIL_DETECTOR_ENABLED: isize = 1_000_000;\n /// The number of steps between loop detector snapshots.\n /// Should be a power of two for performance reasons.\n const DETECTOR_SNAPSHOT_PERIOD: isize = 256;\n@@ -100,6 +98,8 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     /// detector period.\n     pub(super) steps_since_detector_enabled: isize,\n \n+    pub(super) is_detector_enabled: bool,\n+\n     /// Extra state to detect loops.\n     pub(super) loop_detector: snapshot::InfiniteLoopDetector<'mir, 'tcx>,\n }\n@@ -111,10 +111,14 @@ pub struct MemoryExtra {\n }\n \n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n-    pub(super) fn new() -> Self {\n+    pub(super) fn new(const_eval_limit: usize) -> Self {\n+        let steps_until_detector_enabled =\n+            isize::try_from(const_eval_limit).unwrap_or(std::isize::MAX);\n+\n         CompileTimeInterpreter {\n             loop_detector: Default::default(),\n-            steps_since_detector_enabled: -STEPS_UNTIL_DETECTOR_ENABLED,\n+            steps_since_detector_enabled: -steps_until_detector_enabled,\n+            is_detector_enabled: const_eval_limit != 0,\n         }\n     }\n }\n@@ -343,6 +347,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        if !ecx.machine.is_detector_enabled {\n+            return Ok(());\n+        }\n+\n         {\n             let steps = &mut ecx.machine.steps_since_detector_enabled;\n "}, {"sha": "1e146d447fa99fa8750495df2aa0594592b0be0d", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.rs?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -1,8 +1,10 @@\n+// only-x86_64\n // check-pass\n #![feature(const_eval_limit)]\n #![const_eval_limit=\"2\"]\n \n const CONSTANT: usize = limit();\n+//~^ WARNING Constant evaluating a complex constant, this might take some time\n \n fn main() {\n     assert_eq!(CONSTANT, 1764);"}, {"sha": "8301dff6005c7918312222a3bc0abe2c94dca212", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -0,0 +1,6 @@\n+warning: Constant evaluating a complex constant, this might take some time\n+  --> $DIR/const_eval_limit_reached.rs:6:1\n+   |\n+LL | const CONSTANT: usize = limit();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "5bd29c7dfd22b8f116a5119e53ed15fa871c6543", "filename": "src/test/ui/consts/const_limit/feature-gate-const_eval_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c94c74e2d936213cabcbb9675f81007ac7c3b78a/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Ffeature-gate-const_eval_limit.stderr?ref=c94c74e2d936213cabcbb9675f81007ac7c3b78a", "patch": "@@ -4,7 +4,7 @@ error[E0658]: the `#[const_eval_limit]` attribute is an experimental feature\n LL | #![const_eval_limit=\"42\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/67217\n+   = note: see issue #67217 <https://github.com/rust-lang/rust/issues/67217> for more information\n    = help: add `#![feature(const_eval_limit)]` to the crate attributes to enable\n \n error: aborting due to previous error"}]}