{"sha": "39849d5128609040087e9942978af3405e17f958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODQ5ZDUxMjg2MDkwNDAwODdlOTk0Mjk3OGFmMzQwNWUxN2Y5NTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-16T23:14:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-22T18:58:51Z"}, "message": "First step to generic trait impls", "tree": {"sha": "0a9b4ea800f72ddb666fde5e81ead30a3272516b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9b4ea800f72ddb666fde5e81ead30a3272516b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39849d5128609040087e9942978af3405e17f958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39849d5128609040087e9942978af3405e17f958", "html_url": "https://github.com/rust-lang/rust/commit/39849d5128609040087e9942978af3405e17f958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39849d5128609040087e9942978af3405e17f958/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ea8eb232fd17ca903cfa29848f7ea70ad167ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ea8eb232fd17ca903cfa29848f7ea70ad167ff", "html_url": "https://github.com/rust-lang/rust/commit/54ea8eb232fd17ca903cfa29848f7ea70ad167ff"}], "stats": {"total": 134, "additions": 114, "deletions": 20}, "files": [{"sha": "e8fc8fec93cf802d2ad0d794066796361aa95bac", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 113, "deletions": 19, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=39849d5128609040087e9942978af3405e17f958", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::{self, hir};\n+use rustc::hir;\n use rustc::traits::{self, auto_trait as auto};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc::ty::subst::Subst;\n+use rustc::infer::InferOk;\n use std::fmt::Debug;\n+use syntax_pos::DUMMY_SP;\n \n use super::*;\n \n@@ -82,22 +85,115 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         name: Option<String>,\n     ) -> Vec<Item>\n     where F: Fn(DefId) -> Def {\n+        let tcx = self.cx.tcx;\n+        let generics = self.cx.tcx.generics_of(def_id);\n \n-        if ::std::env::var(\"LOL\").is_ok() {\n-            let ty = self.cx.tcx.type_of(def_id);\n-            if let ty::TyAdt(_adt, _) = ty.sty {\n-                let subts = ty::subst::Substs::identity_for_item(self.cx.tcx.clone(), def_id);\n-                self.cx.tcx.infer_ctxt().enter(|infcx| {\n-                    for impl_ in infcx.tcx.all_trait_implementations(LOCAL_CRATE).iter() {\n-                        let trait_ref = rustc::ty::TraitRef::new(*impl_, subts);\n-                        let pred = trait_ref.to_predicate();\n-                        let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n-                                                                 rustc::ty::ParamEnv::empty(),\n-                                                                 pred);\n-                        println!(\"{} => {}\",\n-                                 infcx.tcx.item_name(*impl_).to_string(),\n-                                 infcx.predicate_may_hold(&obligation));\n-                    }\n+        let ty = self.cx.tcx.type_of(def_id);\n+        let mut traits = FxHashMap();\n+        if let ty::TyAdt(_adt, _) = ty.sty {\n+            use std::rc::Rc;\n+\n+            let name = Rc::new(name.clone());\n+            let param_env = self.cx.tcx.param_env(def_id);\n+            for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n+                let name = name.clone();\n+                self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n+                    let name = name.clone();\n+                    self.cx.tcx.infer_ctxt().enter(|infcx| {\n+                        let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n+                        let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n+                        let ty = ty.subst(infcx.tcx, substs);\n+                        let param_env = param_env.subst(infcx.tcx, substs);\n+\n+                        let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n+                        let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n+\n+                        // Require the type the impl is implemented on to match\n+                        // our type, and ignore the impl if there was a mismatch.\n+                        let cause = traits::ObligationCause::dummy();\n+                        let eq_result = infcx.at(&cause, param_env).eq(trait_ref.self_ty(), ty);\n+                        if let Ok(InferOk { value: (), obligations }) = eq_result {\n+                            // FIXME(eddyb) ignoring `obligations` might cause false positives.\n+                            drop(obligations);\n+\n+                            let may_apply = infcx.predicate_may_hold(&traits::Obligation::new(\n+                                cause.clone(),\n+                                param_env,\n+                                trait_ref.to_predicate(),\n+                            ));\n+                            if may_apply {\n+                                // FIXME: add crate's id before the name to avoid removing a\n+                                // trait which doesn't exist.\n+                                if traits.get(&trait_def_id).is_none() {\n+                                    /*let generics = (infcx.tcx.generics_of(trait_def_id), &predicates).clean(cx);\n+                                    get_path_for_type(self.cx.tcx, trait_def_id, hir::def::Def::Trait)*/\n+                                    /*if let Some(i) = self.get_auto_trait_impl_for(\n+                                        def_id,\n+                                        name.clone(),\n+                                        generics.clone(),\n+                                        def_ctor,\n+                                        trait_def_id,\n+                                    ) {\n+                                        traits.insert(trait_name, i);\n+                                    }*/\n+\n+                                    let path = get_path_for_type(infcx.tcx, def_id, def_ctor);\n+                                    let mut segments = path.clone().segments.into_vec();\n+                                    let last = segments.pop().unwrap();\n+\n+                                    use std::ops::Deref;\n+                                    let t_name: Option<String> = name.deref().clone();\n+                                    let real_name = t_name.map(|name| Ident::from_str(&name)).unwrap_or(last.ident);\n+\n+                                    segments.push(hir::PathSegment::new(\n+                                        real_name,\n+                                        self.generics_to_path_params(generics.clone()),\n+                                        false,\n+                                    ));\n+                                    let new_path = hir::Path {\n+                                        span: path.span,\n+                                        def: path.def,\n+                                        segments: HirVec::from_vec(segments),\n+                                    };\n+                                    let ty = hir::Ty {\n+                                        id: ast::DUMMY_NODE_ID,\n+                                        node: hir::Ty_::TyPath(hir::QPath::Resolved(None, P(new_path))),\n+                                        span: DUMMY_SP,\n+                                        hir_id: hir::DUMMY_HIR_ID,\n+                                    };\n+                                    traits.insert(trait_def_id, Item {\n+                                        source: Span::empty(),\n+                                        name: None,\n+                                        attrs: Default::default(),\n+                                        visibility: None,\n+                                        def_id: self.next_def_id(def_id.krate),\n+                                        stability: None,\n+                                        deprecation: None,\n+                                        inner: ImplItem(Impl {\n+                                            unsafety: hir::Unsafety::Normal,\n+                                            generics: Generics {\n+                                                params: generics.params.clean(self.cx),\n+                                                where_predicates: Vec::new(),\n+                                            },\n+                                            provided_trait_methods: FxHashSet(),\n+                                            trait_: Some(hir::TraitRef {\n+                                                path,\n+                                                ref_id: ast::DUMMY_NODE_ID,\n+                                            }.clean(self.cx)),\n+\n+                                            //Some(trait_ref.clean(self.cx)),\n+                                            for_: ty.clean(self.cx),\n+                                            items: Vec::new(),\n+                                            polarity: None,\n+                                            synthetic: true,\n+                                        })\n+                                    });\n+                                }\n+                                //println!(\"=> {}\", infcx.tcx.item_name(trait_def_id).to_string());\n+                            }\n+                            debug!(\"{:?} => {}\", trait_ref, may_apply);\n+                        }\n+                    });\n                 });\n             }\n         }\n@@ -117,9 +213,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             return Vec::new();\n         }\n \n-        let tcx = self.cx.tcx;\n-        let generics = self.cx.tcx.generics_of(def_id);\n-\n         debug!(\n             \"get_auto_trait_impls(def_id={:?}, def_ctor=..., generics={:?}\",\n             def_id, generics\n@@ -143,6 +236,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),\n             ).into_iter())\n+            .chain(traits.into_iter().map(|(_, v)| v))\n             .collect();\n \n         debug!("}, {"sha": "68842522223c5bdd34e28ce0be2267b40ec0b6da", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=39849d5128609040087e9942978af3405e17f958", "patch": "@@ -1551,7 +1551,6 @@ impl GenericBound {\n     }\n \n     fn get_trait_type(&self) -> Option<Type> {\n-\n         if let GenericBound::TraitBound(PolyTrait { ref trait_, .. }, _) = *self {\n             return Some(trait_.clone());\n         }"}, {"sha": "606cf7a61251dcf26d28495e7ab1d8aec712aba9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39849d5128609040087e9942978af3405e17f958/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=39849d5128609040087e9942978af3405e17f958", "patch": "@@ -2082,6 +2082,7 @@ where F: Fn(&mut fmt::Formatter) -> fmt::Result {\n impl<'a> fmt::Display for Item<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         debug_assert!(!self.item.is_stripped());\n+        println!(\"=> {:?}\", self.item.name);\n         // Write the breadcrumb trail header for the top\n         write!(fmt, \"<h1 class='fqn'><span class='in-band'>\")?;\n         match self.item.inner {"}]}