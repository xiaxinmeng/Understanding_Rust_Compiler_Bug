{"sha": "3051f6e9c497018b507c407a04a56957f9c83df7", "node_id": "C_kwDOAAsO6NoAKDMwNTFmNmU5YzQ5NzAxOGI1MDdjNDA3YTA0YTU2OTU3ZjljODNkZjc", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-12-23T08:12:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-09T01:22:06Z"}, "message": "rustc_metadata: Rename `item_children(_untracked)` to `module_children(_untracked)`\n\nAnd `each_child_of_item` to `for_each_module_child`", "tree": {"sha": "5ad212f2b0ea84e84776ec6919025a2655a17274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad212f2b0ea84e84776ec6919025a2655a17274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3051f6e9c497018b507c407a04a56957f9c83df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3051f6e9c497018b507c407a04a56957f9c83df7", "html_url": "https://github.com/rust-lang/rust/commit/3051f6e9c497018b507c407a04a56957f9c83df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3051f6e9c497018b507c407a04a56957f9c83df7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c6a50e9650fe4fbbd2abf547ed39cc108b69f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c6a50e9650fe4fbbd2abf547ed39cc108b69f1", "html_url": "https://github.com/rust-lang/rust/commit/96c6a50e9650fe4fbbd2abf547ed39cc108b69f1"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "91696088cdd610a171736bfabf51c3ff0676af7e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -1079,7 +1079,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     /// including both proper items and reexports.\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    fn each_child_of_item(&self, id: DefIndex, mut callback: impl FnMut(Export), sess: &Session) {\n+    fn for_each_module_child(\n+        &self,\n+        id: DefIndex,\n+        mut callback: impl FnMut(Export),\n+        sess: &Session,\n+    ) {\n         if let Some(data) = &self.root.proc_macro_data {\n             // If we are loading as a proc macro, we want to return\n             // the view of this crate as a proc macro crate.\n@@ -1164,7 +1169,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 }\n             }\n             EntryKind::Enum(..) | EntryKind::Trait(..) => {}\n-            _ => bug!(\"`each_child_of_item` is called on a non-module: {:?}\", self.def_kind(id)),\n+            _ => bug!(\"`for_each_module_child` is called on a non-module: {:?}\", self.def_kind(id)),\n         }\n     }\n "}, {"sha": "f0d87241dd33fa6f677f174064f13a20bb51e9be", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -196,9 +196,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let r = *cdata.dep_kind.lock();\n         r\n     }\n-    item_children => {\n+    module_children => {\n         let mut result = SmallVec::<[_; 8]>::new();\n-        cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n+        cdata.for_each_module_child(def_id.index, |child| result.push(child), tcx.sess);\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n@@ -342,7 +342,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n             };\n \n             while let Some(def) = bfs_queue.pop_front() {\n-                for child in tcx.item_children(def).iter() {\n+                for child in tcx.module_children(def).iter() {\n                     add_child(bfs_queue, child, def);\n                 }\n             }\n@@ -388,9 +388,9 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<Export> {\n+    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<Export> {\n         let mut result = vec![];\n-        self.get_crate_data(def_id.krate).each_child_of_item(\n+        self.get_crate_data(def_id.krate).for_each_module_child(\n             def_id.index,\n             |child| result.push(child),\n             sess,"}, {"sha": "33e7e9dd6e020257173970ea0faed0962dfd5112", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -1528,7 +1528,7 @@ rustc_queries! {\n         desc { \"fetching what a crate is named\" }\n         separate_provide_extern\n     }\n-    query item_children(def_id: DefId) -> &'tcx [Export] {\n+    query module_children(def_id: DefId) -> &'tcx [Export] {\n         desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }"}, {"sha": "c6454f3e0d02ae836fb1aa2ed15404386c51f92d", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -458,7 +458,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // that's public and whose identifier isn't `_`.\n                 let reexport = self\n                     .tcx()\n-                    .item_children(visible_parent)\n+                    .module_children(visible_parent)\n                     .iter()\n                     .filter(|child| child.res.opt_def_id() == Some(def_id))\n                     .find(|child| child.vis.is_public() && child.ident.name != kw::Underscore)\n@@ -2602,7 +2602,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n \n     // Iterate external crate defs but be mindful about visibility\n     while let Some(def) = queue.pop() {\n-        for child in tcx.item_children(def).iter() {\n+        for child in tcx.module_children(def).iter() {\n             if !child.vis.is_public() {\n                 continue;\n             }"}, {"sha": "5de8b39f2ae980350af3a24efa8b6170188aadee", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -214,7 +214,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        for child in self.cstore().item_children_untracked(module.def_id(), self.session) {\n+        for child in self.cstore().module_children_untracked(module.def_id(), self.session) {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);"}, {"sha": "1a6fcbc57bff20614c938fa84cb2a62fcc5fefc3", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -1321,7 +1321,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if Some(*parent_did) != self.tcx.parent(*trait_did)\n                     && self\n                         .tcx\n-                        .item_children(*parent_did)\n+                        .module_children(*parent_did)\n                         .iter()\n                         .filter(|child| child.res.opt_def_id() == Some(*trait_did))\n                         .all(|child| child.ident.name == kw::Underscore)"}, {"sha": "d4e2969819faba1612b98789557687af43325396", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -516,7 +516,7 @@ fn build_module(\n     // If we're re-exporting a re-export it may actually re-export something in\n     // two namespaces, so the target may be listed twice. Make sure we only\n     // visit each node at most once.\n-    for &item in cx.tcx.item_children(did).iter() {\n+    for &item in cx.tcx.module_children(did).iter() {\n         if item.vis.is_public() {\n             let res = item.res.expect_non_local();\n             if let Some(def_id) = res.mod_def_id() {"}, {"sha": "491f7b2fa69014ca1f112b5b464a642f0f3bd298", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -265,7 +265,7 @@ impl ExternalCrate {\n                 })\n                 .collect()\n         } else {\n-            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n+            tcx.module_children(root).iter().map(|item| item.res).filter_map(as_keyword).collect()\n         }\n     }\n \n@@ -333,7 +333,7 @@ impl ExternalCrate {\n                 })\n                 .collect()\n         } else {\n-            tcx.item_children(root).iter().map(|item| item.res).filter_map(as_primitive).collect()\n+            tcx.module_children(root).iter().map(|item| item.res).filter_map(as_primitive).collect()\n         }\n     }\n }"}, {"sha": "5bcec779bc0e7d130be976f1cb17ba9d660b13ed", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        for item in self.tcx.item_children(def_id).iter() {\n+        for item in self.tcx.module_children(def_id).iter() {\n             if let Some(def_id) = item.res.opt_def_id() {\n                 if self.tcx.def_key(def_id).parent.map_or(false, |d| d == def_id.index)\n                     || item.vis.is_public()"}, {"sha": "41f5a913b316e1db5b61ac63cd48e3ef2ba61c38", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             if let Res::Def(DefKind::Mod, id) = path.res;\n             if !id.is_local();\n             then {\n-                for kid in cx.tcx.item_children(id).iter() {\n+                for kid in cx.tcx.module_children(id).iter() {\n                     if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n                         let span = mac_attr.span;\n                         let def_path = cx.tcx.def_path_str(mac_id);"}, {"sha": "7d196af7a53f475e6046fece7d2bb972fe60575e", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -924,7 +924,7 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n         let lang_item_path = cx.get_def_path(*item_def_id);\n         if path_syms.starts_with(&lang_item_path) {\n             if let [item] = &path_syms[lang_item_path.len()..] {\n-                for child in cx.tcx.item_children(*item_def_id) {\n+                for child in cx.tcx.module_children(*item_def_id) {\n                     if child.ident.name == *item {\n                         return true;\n                     }\n@@ -984,7 +984,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n \n         for &module in &[&paths::KW_MODULE, &paths::SYM_MODULE] {\n             if let Some(def_id) = path_to_res(cx, module).opt_def_id() {\n-                for item in cx.tcx.item_children(def_id).iter() {\n+                for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n                         let ty = cx.tcx.type_of(item_def_id);"}, {"sha": "91ebc7ea89cc026172eb13069f9f356c1ec5e235", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -525,7 +525,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n     fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<Res> {\n         match tcx.def_kind(def_id) {\n             DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n-                .item_children(def_id)\n+                .module_children(def_id)\n                 .iter()\n                 .find(|item| item.ident.name.as_str() == name)\n                 .map(|child| child.res.expect_non_local()),"}, {"sha": "306ea50258da00ad0d133616dc85c1a0a4549450", "filename": "src/tools/clippy/tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}, {"sha": "e26a7545ea6f83fc054291bbdce5521d5c27c93d", "filename": "src/tools/clippy/tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3051f6e9c497018b507c407a04a56957f9c83df7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs?ref=3051f6e9c497018b507c407a04a56957f9c83df7", "patch": "@@ -40,7 +40,7 @@ mod a {\n     }\n }\n \n-// issue #7015, ICE due to calling `item_children` with local `DefId`\n+// issue #7015, ICE due to calling `module_children` with local `DefId`\n #[macro_use]\n use a as b;\n "}]}