{"sha": "e6e27924e17aa7def20ecaf88abc18ead6d97f93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTI3OTI0ZTE3YWE3ZGVmMjBlY2FmODhhYmMxOGVhZDZkOTdmOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T07:36:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T07:36:45Z"}, "message": "liballoc: cargo check passes on 2018", "tree": {"sha": "25f4c7081f5fd2539ec79536cd95853109a33eb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f4c7081f5fd2539ec79536cd95853109a33eb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e27924e17aa7def20ecaf88abc18ead6d97f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e27924e17aa7def20ecaf88abc18ead6d97f93", "html_url": "https://github.com/rust-lang/rust/commit/e6e27924e17aa7def20ecaf88abc18ead6d97f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e27924e17aa7def20ecaf88abc18ead6d97f93/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5594b0d5b8924e57f62d0408acb6d7982e93ad65", "url": "https://api.github.com/repos/rust-lang/rust/commits/5594b0d5b8924e57f62d0408acb6d7982e93ad65", "html_url": "https://github.com/rust-lang/rust/commit/5594b0d5b8924e57f62d0408acb6d7982e93ad65"}], "stats": {"total": 121, "additions": 61, "deletions": 60}, "files": [{"sha": "4c6f150ca1b4219e8b4f1d9cf4a34757250faf39", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -6,8 +6,8 @@ use core::cmp::Ordering;\n use core::hash::{Hash, Hasher};\n use core::ops::{Add, AddAssign, Deref};\n \n-use fmt;\n-use string::String;\n+use crate::fmt;\n+use crate::string::String;\n \n use self::Cow::*;\n "}, {"sha": "7b322a5c3969295774f7d8ecdf86f0947bb51ff5", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -73,9 +73,9 @@ use core::ops::{\n use core::ptr::{self, NonNull, Unique};\n use core::task::{LocalWaker, Poll};\n \n-use vec::Vec;\n-use raw_vec::RawVec;\n-use str::from_boxed_utf8_unchecked;\n+use crate::vec::Vec;\n+use crate::raw_vec::RawVec;\n+use crate::str::from_boxed_utf8_unchecked;\n \n /// A pointer type for heap allocation.\n ///"}, {"sha": "079c6290ebd406ac0f1bccbd8c382ffe316ef095", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -151,8 +151,8 @@ use core::mem::{swap, size_of, ManuallyDrop};\n use core::ptr;\n use core::fmt;\n \n-use slice;\n-use vec::{self, Vec};\n+use crate::slice;\n+use crate::vec::{self, Vec};\n \n use super::SpecExtend;\n "}, {"sha": "efb4b8afdb70a71570e1adf9fd623b41bce820f9", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -8,7 +8,7 @@ use core::ops::Index;\n use core::ops::RangeBounds;\n use core::{fmt, intrinsics, mem, ptr};\n \n-use borrow::Borrow;\n+use crate::borrow::Borrow;\n \n use super::node::{self, Handle, NodeRef, marker};\n use super::search;"}, {"sha": "92664bad4e4a5d14bb352ef7676838b0b968a5e3", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -36,8 +36,8 @@ use core::mem::{self, MaybeUninit};\n use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n-use alloc::{Global, Alloc, Layout};\n-use boxed::Box;\n+use crate::alloc::{Global, Alloc, Layout};\n+use crate::boxed::Box;\n \n const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;"}, {"sha": "242dc4b94d8ad7285d0fa8808919c960307fe4b1", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -1,6 +1,6 @@\n use core::cmp::Ordering;\n \n-use borrow::Borrow;\n+use crate::borrow::Borrow;\n \n use super::node::{Handle, NodeRef, marker};\n "}, {"sha": "01a0562bc2153e7ac52957ccb5dd327edcac9df9", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -8,8 +8,8 @@ use core::fmt;\n use core::iter::{Peekable, FromIterator, FusedIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n \n-use borrow::Borrow;\n-use collections::btree_map::{self, BTreeMap, Keys};\n+use crate::borrow::Borrow;\n+use crate::collections::btree_map::{self, BTreeMap, Keys};\n use super::Recover;\n \n // FIXME(conventions): implement bounded iterators"}, {"sha": "c666adb41a738a022fb1a8b626bcd01466c2bc60", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -20,7 +20,7 @@ use core::marker::PhantomData;\n use core::mem;\n use core::ptr::NonNull;\n \n-use boxed::Box;\n+use crate::boxed::Box;\n use super::SpecExtend;\n \n /// A doubly-linked list with owned nodes."}, {"sha": "5f3f849373091d8f2a2864685f305aa3b3d15519", "filename": "src/liballoc/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -41,7 +41,7 @@ pub use self::linked_list::LinkedList;\n #[doc(no_inline)]\n pub use self::vec_deque::VecDeque;\n \n-use alloc::{AllocErr, LayoutErr};\n+use crate::alloc::{AllocErr, LayoutErr};\n \n /// Augments `AllocErr` with a CapacityOverflow variant.\n #[derive(Clone, PartialEq, Eq, Debug)]"}, {"sha": "65d4253d0c67cf93780d7a2e82b39cd36d74b62e", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -20,9 +20,9 @@ use core::slice;\n use core::hash::{Hash, Hasher};\n use core::cmp;\n \n-use collections::CollectionAllocErr;\n-use raw_vec::RawVec;\n-use vec::Vec;\n+use crate::collections::CollectionAllocErr;\n+use crate::raw_vec::RawVec;\n+use crate::vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1"}, {"sha": "8d12b19a06d12f0d45b16ebd2473cee77228dbe5", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -527,7 +527,7 @@ pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n pub use core::fmt::{Alignment};\n \n-use string;\n+use crate::string;\n \n /// The `format` function takes an [`Arguments`] struct and returns the resulting\n /// formatted string."}, {"sha": "6767cf89f73ba2ce205cd784050eda5b9be72e5f", "filename": "src/liballoc/prelude.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fprelude.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -12,8 +12,8 @@\n \n #![unstable(feature = \"alloc\", issue = \"27783\")]\n \n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use borrow::ToOwned;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use boxed::Box;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use slice::SliceConcatExt;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use string::{String, ToString};\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use vec::Vec;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::borrow::ToOwned;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::boxed::Box;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::slice::SliceConcatExt;\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::string::{String, ToString};\n+#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::vec::Vec;"}, {"sha": "9f9dd134826f07eff9f3435ae3a074073872957a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -7,10 +7,10 @@ use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n-use alloc::{Alloc, Layout, Global, handle_alloc_error};\n-use collections::CollectionAllocErr;\n-use collections::CollectionAllocErr::*;\n-use boxed::Box;\n+use crate::alloc::{Alloc, Layout, Global, handle_alloc_error};\n+use crate::collections::CollectionAllocErr;\n+use crate::collections::CollectionAllocErr::*;\n+use crate::boxed::Box;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases\n@@ -639,7 +639,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n         strategy: ReserveStrategy,\n     ) -> Result<(), CollectionAllocErr> {\n         unsafe {\n-            use alloc::AllocErr;\n+            use crate::alloc::AllocErr;\n \n             // NOTE: we don't early branch on ZSTs here because we want this\n             // to actually catch \"asking for more than usize::MAX\" in that case."}, {"sha": "3c28c6d06fe75dfc4b62682271967f3ab2db2452", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -227,7 +227,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[cfg(not(test))]\n-use boxed::Box;\n+use crate::boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n@@ -248,9 +248,9 @@ use core::ptr::{self, NonNull};\n use core::convert::From;\n use core::usize;\n \n-use alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n-use string::String;\n-use vec::Vec;\n+use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n+use crate::string::String;\n+use crate::vec::Vec;\n \n struct RcBox<T: ?Sized> {\n     strong: Cell<usize>,"}, {"sha": "0ed8aa6a2e420e11a8cb227e8228f6f370d18dac", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -93,9 +93,9 @@ use core::mem;\n use core::ptr;\n use core::{u8, u16, u32};\n \n-use borrow::{Borrow, BorrowMut, ToOwned};\n-use boxed::Box;\n-use vec::Vec;\n+use crate::borrow::{Borrow, BorrowMut, ToOwned};\n+use crate::boxed::Box;\n+use crate::vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{Chunks, Windows};\n@@ -137,12 +137,13 @@ pub use self::hack::to_vec;\n // `core::slice::SliceExt` - we need to supply these functions for the\n // `test_permutations` test\n mod hack {\n-    use boxed::Box;\n     use core::mem;\n+    use crate::boxed::Box;\n \n     #[cfg(test)]\n-    use string::ToString;\n-    use vec::Vec;\n+    use crate::string::ToString;\n+\n+    use crate::vec::Vec;\n \n     pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> {\n         unsafe {"}, {"sha": "a44838d560a706e563e318671313871f41e280d1", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -37,11 +37,11 @@ use core::ptr;\n use core::iter::FusedIterator;\n use core::unicode::conversions;\n \n-use borrow::{Borrow, ToOwned};\n-use boxed::Box;\n-use slice::{SliceConcatExt, SliceIndex};\n-use string::String;\n-use vec::Vec;\n+use crate::borrow::{Borrow, ToOwned};\n+use crate::boxed::Box;\n+use crate::slice::{SliceConcatExt, SliceIndex};\n+use crate::string::String;\n+use crate::vec::Vec;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "d8f46374ce21bab735cbe5d46e7f80708a5424dd", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -56,11 +56,11 @@ use core::ptr;\n use core::str::pattern::Pattern;\n use core::str::lossy;\n \n-use collections::CollectionAllocErr;\n-use borrow::{Cow, ToOwned};\n-use boxed::Box;\n-use str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n-use vec::Vec;\n+use crate::collections::CollectionAllocErr;\n+use crate::borrow::{Cow, ToOwned};\n+use crate::boxed::Box;\n+use crate::str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n+use crate::vec::Vec;\n \n /// A UTF-8 encoded, growable string.\n ///"}, {"sha": "b387f07f231e622173b698cdbea67057fc3dedb7", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -23,11 +23,11 @@ use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n \n-use alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n-use boxed::Box;\n-use rc::is_dangling;\n-use string::String;\n-use vec::Vec;\n+use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n+use crate::boxed::Box;\n+use crate::rc::is_dangling;\n+use crate::string::String;\n+use crate::vec::Vec;\n \n /// A soft limit on the amount of references that may be made to an `Arc`.\n ///"}, {"sha": "ba4e0dcda02dfbff2bd44d6a92017054b0c7d0b0", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -11,7 +11,7 @@ mod if_arc {\n     use core::marker::PhantomData;\n     use core::mem;\n     use core::ptr::{self, NonNull};\n-    use sync::Arc;\n+    use crate::sync::Arc;\n \n     /// A way of waking up a specific task.\n     ///"}, {"sha": "b942bce678b97da8ab57c1b96b9b674546b8f598", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e27924e17aa7def20ecaf88abc18ead6d97f93/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=e6e27924e17aa7def20ecaf88abc18ead6d97f93", "patch": "@@ -70,11 +70,11 @@ use core::ptr;\n use core::ptr::NonNull;\n use core::slice;\n \n-use collections::CollectionAllocErr;\n-use borrow::ToOwned;\n-use borrow::Cow;\n-use boxed::Box;\n-use raw_vec::RawVec;\n+use crate::collections::CollectionAllocErr;\n+use crate::borrow::ToOwned;\n+use crate::borrow::Cow;\n+use crate::boxed::Box;\n+use crate::raw_vec::RawVec;\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///"}]}