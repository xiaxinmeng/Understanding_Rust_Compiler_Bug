{"sha": "f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDMzNDllYWZhYTc1YTYwYzA1YjBjODRkY2RiNzcxZDBlYWU4Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T05:27:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T05:27:21Z"}, "message": "Auto merge of #69804 - Centril:rollup-u86dc1g, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #69667 (Remove the `no_debug` feature)\n - #69687 (resolve, inconsistent binding mode: tweak wording)\n - #69708 (On mismatched delimiters, only point at empty blocks that are in the same line)\n - #69765 (reduce test size for Miri)\n - #69773 (fix various typos)\n - #69787 (mir::Local is Copy we can pass it by value in these cases)\n - #69794 (Add `Layout::dangling()` to return a well-aligned `NonNull<u8>`)\n - #69797 (Correct version that relaxed orphan rules)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9e2d6e08dc1aff13d98144034e7db7080e6eb872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2d6e08dc1aff13d98144034e7db7080e6eb872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "html_url": "https://github.com/rust-lang/rust/commit/f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823ff8cf1397a5772b1f6954b60576202bf91836", "url": "https://api.github.com/repos/rust-lang/rust/commits/823ff8cf1397a5772b1f6954b60576202bf91836", "html_url": "https://github.com/rust-lang/rust/commit/823ff8cf1397a5772b1f6954b60576202bf91836"}, {"sha": "8ee7278fca2cb137c81c8a12ca46c5df1838c2f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee7278fca2cb137c81c8a12ca46c5df1838c2f3", "html_url": "https://github.com/rust-lang/rust/commit/8ee7278fca2cb137c81c8a12ca46c5df1838c2f3"}], "stats": {"total": 668, "additions": 286, "deletions": 382}, "files": [{"sha": "ce21b63467f53f566b302a3021479f42e49ca066", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -315,7 +315,7 @@\n # `0` - no debug info\n # `1` - line tables only\n # `2` - full debug info with variable and type information\n-# Can be overriden for specific subsets of Rust code (rustc, std or tools).\n+# Can be overridden for specific subsets of Rust code (rustc, std or tools).\n # Debuginfo for tests run with compiletest is not controlled by this option\n # and needs to be enabled separately with `debuginfo-level-tests`.\n #debuginfo-level = if debug { 2 } else { 0 }"}, {"sha": "65a00db33949ed8037ab26c83b5257d28cf9e10b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -141,7 +141,7 @@ fn copy_third_party_objects(\n         copy_and_stamp(&srcdir, \"crt1.o\");\n     }\n \n-    // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.\n+    // Copies libunwind.a compiled to be linked with x86_64-fortanix-unknown-sgx.\n     //\n     // This target needs to be linked to Fortanix's port of llvm's libunwind.\n     // libunwind requires support for rwlock and printing to stderr,"}, {"sha": "0b2ab6bbbc02194528f7bd769818863df0759485", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -33,7 +33,7 @@ pub struct Flags {\n     pub rustc_error_format: Option<String>,\n     pub dry_run: bool,\n \n-    // This overrides the deny-warnings configuation option,\n+    // This overrides the deny-warnings configuration option,\n     // which passes -Dwarnings to the compiler invocations.\n     //\n     // true => deny, false => warn"}, {"sha": "a29d6f9ae1ec652bb543774e212a610abb1ff404", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -20,7 +20,7 @@ jobs:\n \n # The macOS and Windows builds here are currently disabled due to them not being\n # overly necessary on `try` builds. We also don't actually have anything that\n-# consumes the artifacts currently. Perhaps one day we can reenable, but for now\n+# consumes the artifacts currently. Perhaps one day we can re-enable, but for now\n # it helps free up capacity on Azure.\n # - job: macOS\n #   timeoutInMinutes: 600"}, {"sha": "22d2e297da3a22fd53dc7ceaad8e00b1cab3fd6f", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -453,7 +453,7 @@ override `ignore`.\n \n ### `--runtool`, `--runtool-arg`: program to run tests with; args to pass to it\n \n-Using thses options looks like this:\n+Using these options looks like this:\n \n ```bash\n $ rustdoc src/lib.rs -Z unstable-options --runtool runner --runtool-arg --do-thing --runtool-arg --do-other-thing"}, {"sha": "be350cd61696454f7d3f1d10df7b3c3997680ba7", "filename": "src/doc/unstable-book/src/language-features/marker-trait-attr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmarker-trait-attr.md?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -21,7 +21,7 @@ when they'd need to do the same thing for every type anyway).\n \n impl<T: Copy> CheapToClone for T {}\n \n-// These could potentally overlap with the blanket implementation above,\n+// These could potentially overlap with the blanket implementation above,\n // so are only allowed because CheapToClone is a marker trait.\n impl<T: CheapToClone, U: CheapToClone> CheapToClone for (T, U) {}\n impl<T: CheapToClone> CheapToClone for std::ops::Range<T> {}"}, {"sha": "edeb87a908d7cbc77f9cae76e392968c2a5e7055", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -306,7 +306,7 @@ impl<K, V> Root<K, V> {\n ///   `NodeRef` could be pointing to either type of node.\n ///   Note that in case of a leaf node, this might still be the shared root!\n ///   Only turn this into a `LeafNode` reference if you know it is not the shared root!\n-///   Shared references must be dereferencable *for the entire size of their pointee*,\n+///   Shared references must be dereferenceable *for the entire size of their pointee*,\n ///   so '&LeafNode` or `&InternalNode` pointing to the shared root is undefined behavior.\n ///   Turning this into a `NodeHeader` reference is always safe.\n pub struct NodeRef<BorrowType, K, V, Type> {"}, {"sha": "73ae267ddab7f559554d62e0580d1d2d48175525", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -841,10 +841,10 @@ impl<T> LinkedList<T> {\n     /// d.push_front(2);\n     /// d.push_front(3);\n     ///\n-    /// let mut splitted = d.split_off(2);\n+    /// let mut split = d.split_off(2);\n     ///\n-    /// assert_eq!(splitted.pop_front(), Some(1));\n-    /// assert_eq!(splitted.pop_front(), None);\n+    /// assert_eq!(split.pop_front(), Some(1));\n+    /// assert_eq!(split.pop_front(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split_off(&mut self, at: usize) -> LinkedList<T> {"}, {"sha": "9d56f17700a857f90abb58b7891fa96dff29b735", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -2132,7 +2132,7 @@ impl<T> VecDeque<T> {\n     // Safety: the following two methods require that the rotation amount\n     // be less than half the length of the deque.\n     //\n-    // `wrap_copy` requres that `min(x, cap() - x) + copy_len <= cap()`,\n+    // `wrap_copy` requires that `min(x, cap() - x) + copy_len <= cap()`,\n     // but than `min` is never more than half the capacity, regardless of x,\n     // so it's sound to call here because we're calling with something\n     // less than half the length, which is never above half the capacity."}, {"sha": "8e49e6d8ebad9e35144793f5c84c8272016e28fb", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1733,9 +1733,9 @@ fn panic_safe() {\n     let moduli = &[5, 20, 50];\n \n     #[cfg(miri)]\n-    let lens = 1..13;\n+    let lens = 1..10;\n     #[cfg(miri)]\n-    let moduli = &[10];\n+    let moduli = &[5];\n \n     for len in lens {\n         for &modulus in moduli {"}, {"sha": "61416f2b906d3f690a18250cb4feb7e1e3ea4d4e", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -2894,7 +2894,7 @@ where\n     /// The filter test predicate.\n     pred: F,\n     /// A flag that indicates a panic has occurred in the filter test prodicate.\n-    /// This is used as a hint in the drop implmentation to prevent consumption\n+    /// This is used as a hint in the drop implementation to prevent consumption\n     /// of the remainder of the `DrainFilter`. Any unprocessed items will be\n     /// backshifted in the `vec`, but no further items will be dropped or\n     /// tested by the filter predicate."}, {"sha": "0a7a8ab266aee9986f59cfafa65e91259d2ef6eb", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -140,6 +140,18 @@ impl Layout {\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n \n+    /// Creates a `NonNull` that is dangling, but well-aligned for this Layout.\n+    ///\n+    /// Note that the pointer value may potentially represent a valid pointer,\n+    /// which means this must not be used as a \"not yet initialized\"\n+    /// sentinel value. Types that lazily allocate must track initialization by\n+    /// some other means.\n+    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    pub const fn dangling(&self) -> NonNull<u8> {\n+        // align is non-zero and a power of two\n+        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }\n+    }\n+\n     /// Creates a layout describing the record that can hold a value\n     /// of the same layout as `self`, but that also is aligned to\n     /// alignment `align` (measured in bytes)."}, {"sha": "47ab8715cfa14b0aea2a8c396a7afdc30701aa41", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -229,7 +229,7 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// # Implementing [`Into`] for conversions to external types in old versions of Rust\n ///\n-/// Prior to Rust 1.40, if the destination type was not part of the current crate\n+/// Prior to Rust 1.41, if the destination type was not part of the current crate\n /// then you couldn't implement [`From`] directly.\n /// For example, take this code:\n ///"}, {"sha": "b13e9bcc6b44e813beeb98b8b532bec4c8e9e08f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -255,7 +255,7 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Opaque, &mut Formatter<'_>) -> Result,\n }\n \n-// This gurantees a single stable value for the function pointer associated with\n+// This guarantees a single stable value for the function pointer associated with\n // indices/counts in the formatting infrastructure.\n //\n // Note that a function defined as such would not be correct as functions are"}, {"sha": "9e5c2b10d0d9ece6d2938be31a0cb278a1dfd4ef", "filename": "src/libcore/mem/manually_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmanually_drop.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -93,7 +93,7 @@ impl<T> ManuallyDrop<T> {\n     /// Instead of using [`ManuallyDrop::drop`] to manually drop the value,\n     /// you can use this method to take the value and use it however desired.\n     ///\n-    /// Whenever possible, it is preferrable to use [`into_inner`][`ManuallyDrop::into_inner`]\n+    /// Whenever possible, it is preferable to use [`into_inner`][`ManuallyDrop::into_inner`]\n     /// instead, which prevents duplicating the content of the `ManuallyDrop<T>`.\n     ///\n     /// # Safety"}, {"sha": "90144d11dc9d15814a6accd7ca439ca283690a2a", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -91,7 +91,7 @@ pub use crate::intrinsics::transmute;\n /// Using `ManuallyDrop` here has two advantages:\n ///\n /// * We do not \"touch\" `v` after disassembling it. For some types, operations\n-///   such as passing ownership (to a funcion like `mem::forget`) requires them to actually\n+///   such as passing ownership (to a function like `mem::forget`) requires them to actually\n ///   be fully owned right now; that is a promise we do not want to make here as we are\n ///   in the process of transferring ownership to the new `String` we are building.\n /// * In case of an unexpected panic, `ManuallyDrop` is not dropped, but if the panic"}, {"sha": "774ecd997c201d56630ebef9463a7d7a7a49b3f9", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -312,7 +312,7 @@\n //!\n //! ## Examples\n //!\n-//! For a type like [`Vec<T>`], both possibilites (structural pinning or not) make sense.\n+//! For a type like [`Vec<T>`], both possibilities (structural pinning or not) make sense.\n //! A [`Vec<T>`] with structural pinning could have `get_pin`/`get_pin_mut` methods to get\n //! pinned references to elements. However, it could *not* allow calling\n //! [`pop`][Vec::pop] on a pinned [`Vec<T>`] because that would move the (structurally pinned)\n@@ -539,7 +539,7 @@ impl<P: Deref> Pin<P> {\n     /// ```\n     /// A value, once pinned, must remain pinned forever (unless its type implements `Unpin`).\n     ///\n-    /// Similarily, calling `Pin::new_unchecked` on an `Rc<T>` is unsafe because there could be\n+    /// Similarly, calling `Pin::new_unchecked` on an `Rc<T>` is unsafe because there could be\n     /// aliases to the same data that are not subject to the pinning restrictions:\n     /// ```\n     /// use std::rc::Rc;"}, {"sha": "a540016854df3b7b5d127558dc856e9d75313665", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -53,7 +53,7 @@ impl<T: ?Sized> *const T {\n     /// all of the following is true:\n     /// - it is properly aligned\n     /// - it must point to an initialized instance of T; in particular, the pointer must be\n-    ///   \"dereferencable\" in the sense defined [here].\n+    ///   \"dereferenceable\" in the sense defined [here].\n     ///\n     /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n@@ -183,7 +183,7 @@ impl<T: ?Sized> *const T {\n     /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -480,7 +480,7 @@ impl<T: ?Sized> *const T {\n     /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -535,7 +535,7 @@ impl<T: ?Sized> *const T {\n     /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}, {"sha": "72c46f58fcc7b02560ff8e1702cdfbd15657425e", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -19,7 +19,7 @@\n //! * All pointers (except for the null pointer) are valid for all operations of\n //!   [size zero][zst].\n //! * For a pointer to be valid, it is necessary, but not always sufficient, that the pointer\n-//!   be *dereferencable*: the memory range of the given size starting at the pointer must all be\n+//!   be *dereferenceable*: the memory range of the given size starting at the pointer must all be\n //!   within the bounds of a single allocated object. Note that in Rust,\n //!   every (stack-allocated) variable is considered a separate allocated object.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense"}, {"sha": "01d830ca186024aef22f5d81278469ab83bc3a63", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -49,7 +49,7 @@ impl<T: ?Sized> *mut T {\n     /// memory.\n     ///\n     /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferencable (for the whole\n+    /// non-NULL, then it is properly aligned, dereferenceable (for the whole\n     /// size of `T`) and points to an initialized instance of `T`. This applies\n     /// even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n@@ -176,7 +176,7 @@ impl<T: ?Sized> *mut T {\n     /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -224,7 +224,7 @@ impl<T: ?Sized> *mut T {\n     /// all of the following is true:\n     /// - it is properly aligned\n     /// - it must point to an initialized instance of T; in particular, the pointer must be\n-    ///   \"dereferencable\" in the sense defined [here].\n+    ///   \"dereferenceable\" in the sense defined [here].\n     ///\n     /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n@@ -526,7 +526,7 @@ impl<T: ?Sized> *mut T {\n     /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -581,7 +581,7 @@ impl<T: ?Sized> *mut T {\n     /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n     /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n     /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferrable in performance-sensitive code.\n+    /// better and is thus preferable in performance-sensitive code.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}, {"sha": "c8592e40a69a0168016db92542748a8efded529b", "filename": "src/libcore/tests/alloc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Falloc.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,10 +1,13 @@\n use core::alloc::Layout;\n+use core::ptr::NonNull;\n \n #[test]\n fn const_unchecked_layout() {\n     const SIZE: usize = 0x2000;\n     const ALIGN: usize = 0x1000;\n     const LAYOUT: Layout = unsafe { Layout::from_size_align_unchecked(SIZE, ALIGN) };\n+    const DANGLING: NonNull<u8> = LAYOUT.dangling();\n     assert_eq!(LAYOUT.size(), SIZE);\n     assert_eq!(LAYOUT.align(), ALIGN);\n+    assert_eq!(Some(DANGLING), NonNull::new(ALIGN as *mut u8));\n }"}, {"sha": "71a061af28920f3de14793e55921cd9b84d3ab30", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,3 +1,4 @@\n+#![feature(alloc_layout_extra)]\n #![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]"}, {"sha": "e138503b508d545a5ce5b97e5733134fd6bccb76", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -176,7 +176,7 @@ pub struct Parser<'a> {\n     skips: Vec<usize>,\n     /// Span of the last opening brace seen, used for error reporting\n     last_opening_brace: Option<InnerSpan>,\n-    /// Wether the source string is comes from `println!` as opposed to `format!` or `print!`\n+    /// Whether the source string is comes from `println!` as opposed to `format!` or `print!`\n     append_newline: bool,\n }\n "}, {"sha": "088db92253acfb857d0abcc725bd6eaf69668e13", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -15,7 +15,7 @@ macro_rules! define_handles {\n         }\n \n         impl HandleCounters {\n-            // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+            // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of\n             // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n             extern \"C\" fn get() -> &'static Self {\n                 static COUNTERS: HandleCounters = HandleCounters {\n@@ -334,7 +334,7 @@ impl Bridge<'_> {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct Client<F> {\n-    // FIXME(eddyb) use a reference to the `static COUNTERS`, intead of\n+    // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of\n     // a wrapper `fn` pointer, once `const fn` can reference `static`s.\n     pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n     pub(super) run: extern \"C\" fn(Bridge<'_>, F) -> Buffer<u8>,"}, {"sha": "0f129904b4324bc1779dd77241dd323276b62bbc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -653,7 +653,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Wether `hir_id` corresponds to a `mod` or a crate.\n+    /// Whether `hir_id` corresponds to a `mod` or a crate.\n     pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n         match self.lookup(hir_id) {\n             Some(Entry { node: Node::Item(Item { kind: ItemKind::Mod(_), .. }), .. })"}, {"sha": "61b25cc4864465e3ae2fe9abe8c01b24bd2e0527", "filename": "src/librustc/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -58,9 +58,6 @@ bitflags! {\n         /// \"weird symbol\" for the standard library in that it has slightly\n         /// different linkage, visibility, and reachability rules.\n         const RUSTC_STD_INTERNAL_SYMBOL = 1 << 6;\n-        /// `#[no_debug]`: an indicator that no debugging information should be\n-        /// generated for this function by LLVM.\n-        const NO_DEBUG                  = 1 << 7;\n         /// `#[thread_local]`: indicates a static is actually a thread local\n         /// piece of memory\n         const THREAD_LOCAL              = 1 << 8;"}, {"sha": "546ba586d30f94c3c1408df77f641d3649c4998e", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -610,7 +610,7 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         // a naive undef mask copying algorithm would repeatedly have to read the undef mask from\n         // the source and write it to the destination. Even if we optimized the memory accesses,\n         // we'd be doing all of this `repeat` times.\n-        // Therefor we precompute a compressed version of the undef mask of the source value and\n+        // Therefore we precompute a compressed version of the undef mask of the source value and\n         // then write it back `repeat` times without computing any more information from the source.\n \n         // A precomputed cache for ranges of defined/undefined bits"}, {"sha": "2aca6f684f4fe5e0cd19f58ec3b1a6ac29f584a5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -888,7 +888,7 @@ macro_rules! visit_place_fns {\n     () => (\n         fn visit_projection(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             projection: &[PlaceElem<'tcx>],\n             context: PlaceContext,\n             location: Location,\n@@ -898,7 +898,7 @@ macro_rules! visit_place_fns {\n \n         fn visit_projection_elem(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             proj_base: &[PlaceElem<'tcx>],\n             elem: &PlaceElem<'tcx>,\n             context: PlaceContext,\n@@ -925,15 +925,15 @@ macro_rules! visit_place_fns {\n \n             self.visit_place_base(&place.local, context, location);\n \n-            self.visit_projection(&place.local,\n+            self.visit_projection(place.local,\n                                   &place.projection,\n                                   context,\n                                   location);\n         }\n \n         fn super_projection(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             projection: &[PlaceElem<'tcx>],\n             context: PlaceContext,\n             location: Location,\n@@ -947,7 +947,7 @@ macro_rules! visit_place_fns {\n \n         fn super_projection_elem(\n             &mut self,\n-            _local: &Local,\n+            _local: Local,\n             _proj_base: &[PlaceElem<'tcx>],\n             elem: &PlaceElem<'tcx>,\n             _context: PlaceContext,"}, {"sha": "e257b48f111568ea2bb2a6463e96260501bb7b8a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -2579,7 +2579,7 @@ where\n                 if let Some(kind) = pointee.safe {\n                     attrs.pointee_align = Some(pointee.align);\n \n-                    // `Box` (`UniqueBorrowed`) are not necessarily dereferencable\n+                    // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable\n                     // for the entire duration of the function as they can be deallocated\n                     // any time. Set their valid size to 0.\n                     attrs.pointee_size = match kind {"}, {"sha": "8d784833bd310ef9f311ff3e45f0b3386c813088", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -97,7 +97,7 @@ pub trait Printer<'tcx>: Sized {\n         args: &[GenericArg<'tcx>],\n     ) -> Result<Self::Path, Self::Error>;\n \n-    // Defaults (should not be overriden):\n+    // Defaults (should not be overridden):\n \n     fn default_print_def_path(\n         self,"}, {"sha": "05dcc9e85ac525cd15b3fafe491669229df3c2a1", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -221,7 +221,7 @@ pub trait PrettyPrinter<'tcx>:\n     /// This is typically the case for all non-`'_` regions.\n     fn region_should_not_be_omitted(&self, region: ty::Region<'_>) -> bool;\n \n-    // Defaults (should not be overriden):\n+    // Defaults (should not be overridden):\n \n     /// If possible, this returns a global path resolving to `def_id` that is visible\n     /// from at least one local module, and returns `true`. If the crate defining `def_id` is\n@@ -236,7 +236,7 @@ pub trait PrettyPrinter<'tcx>:\n     /// post-process it into the valid and visible version that\n     /// accounts for re-exports.\n     ///\n-    /// This method should only be callled by itself or\n+    /// This method should only be called by itself or\n     /// `try_print_visible_def_path`.\n     ///\n     /// `callers` is a chain of visible_parent's leading to `def_id`,\n@@ -685,7 +685,7 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n-                    // do not try to evalute unevaluated constants. If we are const evaluating an\n+                    // do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n                     p!(write(\"_\"));"}, {"sha": "9c1db7c5f2b705d8c22d1a57fc7d71133f1d916e", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -425,7 +425,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n //- DECODING -------------------------------------------------------------------\n \n-/// A decoder that can read fro the incr. comp. cache. It is similar to the one\n+/// A decoder that can read from the incr. comp. cache. It is similar to the one\n /// we use for crate metadata decoding in that it can rebase spans and eventually\n /// will also handle things that contain `Ty` instances.\n struct CacheDecoder<'a, 'tcx> {"}, {"sha": "c94909549df2230b020814d06de2a5b290033f3c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1053,7 +1053,7 @@ macro_rules! define_queries_inner {\n \n         impl TyCtxt<$tcx> {\n             /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n-            /// are executed instead of just returing their results.\n+            /// are executed instead of just returning their results.\n             #[inline(always)]\n             pub fn ensure(self) -> TyCtxtEnsure<$tcx> {\n                 TyCtxtEnsure {"}, {"sha": "fb4184a9fb34762dcc658b28639ab21d7f542117", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -72,7 +72,7 @@ pub trait TypeRelation<'tcx>: Sized {\n         b: &T,\n     ) -> RelateResult<'tcx, T>;\n \n-    // Overrideable relations. You shouldn't typically call these\n+    // Overridable relations. You shouldn't typically call these\n     // directly, instead call `relate()`, which in turn calls\n     // these. This is both more uniform but also allows us to add\n     // additional hooks for other types in the future if needed"}, {"sha": "88a96dc6c69661f88c012de10363ab38b1a2ab7e", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1078,7 +1078,7 @@ impl Expr {\n \n             // If binary operator is `Add` and both `lhs` and `rhs` are trait bounds,\n             // then type of result is trait object.\n-            // Othewise we don't assume the result type.\n+            // Otherwise we don't assume the result type.\n             ExprKind::Binary(binop, lhs, rhs) if binop.node == BinOpKind::Add => {\n                 if let (Some(lhs), Some(rhs)) = (lhs.to_bound(), rhs.to_bound()) {\n                     TyKind::TraitObject(vec![lhs, rhs], TraitObjectSyntax::None)\n@@ -2089,7 +2089,7 @@ impl Async {\n         if let Async::Yes { .. } = self { true } else { false }\n     }\n \n-    /// In ths case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n+    /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n     pub fn opt_return_id(self) -> Option<NodeId> {\n         match self {\n             Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),"}, {"sha": "dd9526ccee41aec02be1cbd974f91020d45d2520", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1096,7 +1096,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         match arg {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => {\n-                // We parse const arguments as path types as we cannot distiguish them durring\n+                // We parse const arguments as path types as we cannot distinguish them during\n                 // parsing. We try to resolve that ambiguity by attempting resolution in both the\n                 // type and value namespaces. If we resolved the path in the value namespace, we\n                 // transform it into a generic const argument."}, {"sha": "1baec5eafe687f355b6a9066830b097464ba97ac", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -904,7 +904,7 @@ pub fn expand_preparsed_format_args(\n     };\n \n     /// Finds the indices of all characters that have been processed and differ between the actual\n-    /// written code (code snippet) and the `InternedString` that get's processed in the `Parser`\n+    /// written code (code snippet) and the `InternedString` that gets processed in the `Parser`\n     /// in order to properly synthethise the intra-string `Span`s for error diagnostics.\n     fn find_skips(snippet: &str, is_raw: bool) -> Vec<usize> {\n         let mut eat_ws = false;"}, {"sha": "310cae978bf5eead7f922600e2721121dec3ae5f", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -504,7 +504,7 @@ fn thin_lto(\n             //\n             // This strategy means we can always save the computed imports as\n             // canon: when we reuse the post-ThinLTO version, condition (3.)\n-            // ensures that the curent import set is the same as the previous\n+            // ensures that the current import set is the same as the previous\n             // one. (And of course, when we don't reuse the post-ThinLTO\n             // version, the current import set *is* the correct one, since we\n             // are doing the ThinLTO in this current compilation cycle.)\n@@ -538,7 +538,7 @@ fn thin_lto(\n             }));\n         }\n \n-        // Save the curent ThinLTO import information for the next compilation\n+        // Save the current ThinLTO import information for the next compilation\n         // session, overwriting the previous serialized imports (if any).\n         if let Some(path) = import_map_path {\n             if let Err(err) = curr_import_map.save_to_file(&path) {"}, {"sha": "2741f7d848e79043f676ded67df63ee404578dc9", "filename": "src/librustc_codegen_llvm/back/profiling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -9,8 +9,8 @@ fn llvm_args_to_string_id(profiler: &SelfProfiler, pass_name: &str, ir_name: &st\n     let mut components = vec![StringComponent::Ref(pass_name)];\n     // handle that LazyCallGraph::SCC is a comma separated list within parentheses\n     let parentheses: &[_] = &['(', ')'];\n-    let trimed = ir_name.trim_matches(parentheses);\n-    for part in trimed.split(\", \") {\n+    let trimmed = ir_name.trim_matches(parentheses);\n+    for part in trimmed.split(\", \") {\n         let demangled_ir_name = rustc_demangle::demangle(part).to_string();\n         let ir_name = profiler.get_or_alloc_cached_string(demangled_ir_name);\n         components.push(StringComponent::Value(SEPARATOR_BYTE));"}, {"sha": "9e52598f2e05a4b1a5f914bf5a8904f7424f93d3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -637,7 +637,7 @@ pub fn type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>, usage_site_span: Sp\n                 unsafe {\n                     // The choice of type here is pretty arbitrary -\n                     // anything reading the debuginfo for a recursive\n-                    // type is going to see *somthing* weird - the only\n+                    // type is going to see *something* weird - the only\n                     // question is what exactly it will see.\n                     let (size, align) = cx.size_and_align_of(t);\n                     llvm::LLVMRustDIBuilderCreateBasicType(\n@@ -2269,10 +2269,6 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     let tcx = cx.tcx;\n     let attrs = tcx.codegen_fn_attrs(def_id);\n \n-    if attrs.flags.contains(CodegenFnAttrFlags::NO_DEBUG) {\n-        return;\n-    }\n-\n     let no_mangle = attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE);\n     // We may want to remove the namespace scope if we're in an extern block (see\n     // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952)."}, {"sha": "a68441f14cb9d508cc6a21c7e092c55b93872499", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -12,7 +12,6 @@ use crate::llvm;\n use crate::llvm::debuginfo::{\n     DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType, DIVariable,\n };\n-use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n \n@@ -22,7 +21,7 @@ use crate::common::CodegenCx;\n use crate::value::Value;\n use rustc::mir;\n use rustc::session::config::{self, DebugInfo};\n-use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty};\n+use rustc::ty::{self, Instance, ParamEnv, Ty};\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -241,12 +240,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             return None;\n         }\n \n-        if let InstanceDef::Item(def_id) = instance.def {\n-            if self.tcx().codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::NO_DEBUG) {\n-                return None;\n-            }\n-        }\n-\n         let span = mir.span;\n \n         // This can be the case for functions inlined from another crate"}, {"sha": "3afa4758253d919f4c1f0f3a74f4e7383596d759", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -736,7 +736,7 @@ fn execute_work_item<B: ExtraBackendMethods>(\n     }\n }\n \n-// Actual LTO type we end up chosing based on multiple factors.\n+// Actual LTO type we end up choosing based on multiple factors.\n enum ComputedLtoType {\n     No,\n     Thin,"}, {"sha": "b8a7d7df487b32cea6b9ccedb19e71c749a40730", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -203,7 +203,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             }\n \n             self.visit_place_base(&place_ref.local, context, location);\n-            self.visit_projection(&place_ref.local, place_ref.projection, context, location);\n+            self.visit_projection(place_ref.local, place_ref.projection, context, location);\n         }\n     }\n }"}, {"sha": "d03ff8d4d37d8b7cf4aef1c6900a1fae0f867f40", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -8,7 +8,7 @@\n //! actual codegen, while the builder stores the information about the function during codegen and\n //! is used to produce the instructions of the backend IR.\n //!\n-//! Finaly, a third `Backend` structure has to implement methods related to how codegen information\n+//! Finally, a third `Backend` structure has to implement methods related to how codegen information\n //! is passed to the backend, especially for asynchronous compilation.\n //!\n //! The traits contain associated types that are backend-specific, such as the backend's value or"}, {"sha": "cfde09fad62ccb76200f652e23536440596ef094", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -185,7 +185,7 @@ fn compute_symbol_name(\n     //\n     // * On the wasm32 targets there is a bug (or feature) in LLD [1] where the\n     //   same-named symbol when imported from different wasm modules will get\n-    //   hooked up incorectly. As a result foreign symbols, on the wasm target,\n+    //   hooked up incorrectly. As a result foreign symbols, on the wasm target,\n     //   with a wasm import module, get mangled. Additionally our codegen will\n     //   deduplicate symbols based purely on the symbol name, but for wasm this\n     //   isn't quite right because the same-named symbol on wasm can come from"}, {"sha": "c8f979267170f8227377130b9b5309e73b0b21b2", "filename": "src/librustc_data_structures/graph/vec_graph/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Ftests.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -23,7 +23,7 @@ fn num_nodes() {\n }\n \n #[test]\n-fn succesors() {\n+fn successors() {\n     let graph = create_graph();\n     assert_eq!(graph.successors(0), &[1]);\n     assert_eq!(graph.successors(1), &[2, 3]);"}, {"sha": "d08d46a7414d060c0ba89fa33ae54fc3dd82f9e3", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -13,7 +13,7 @@ struct CacheAligned<T>(T);\n #[cfg(parallel_compiler)]\n // 32 shards is sufficient to reduce contention on an 8-core Ryzen 7 1700,\n // but this should be tested on higher core count CPUs. How the `Sharded` type gets used\n-// may also affect the ideal nunber of shards.\n+// may also affect the ideal number of shards.\n const SHARD_BITS: usize = 5;\n \n #[cfg(not(parallel_compiler))]\n@@ -41,7 +41,7 @@ impl<T> Sharded<T> {\n         let mut values: SmallVec<[_; SHARDS]> =\n             (0..SHARDS).map(|_| CacheAligned(Lock::new(value()))).collect();\n \n-        // Create an unintialized array\n+        // Create an uninitialized array\n         let mut shards: mem::MaybeUninit<[CacheAligned<Lock<T>>; SHARDS]> =\n             mem::MaybeUninit::uninit();\n "}, {"sha": "bc522e9cf4085cb6eac5f359361a63caa5feddf3", "filename": "src/librustc_error_codes/error_codes/E0326.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0326.md?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-An implementation of a trait doesn't match the type contraint.\n+An implementation of a trait doesn't match the type constraint.\n \n Erroneous code example:\n "}, {"sha": "7f68815b1c21b7b2dfcf821d000fef367fa1d4ed", "filename": "src/librustc_error_codes/error_codes/E0591.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0591.md", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0591.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0591.md?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -54,7 +54,7 @@ This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n   and do the cast in the fn body (the preferred option)\n-- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+- cast the fn item of a fn pointer before calling transmute, as shown here:\n \n     ```\n     # extern \"C\" fn foo(_: Box<i32>) {}"}, {"sha": "51b172a21148ca03b95928f26280a364f6a03981", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -991,7 +991,7 @@ fn token_can_be_followed_by_any(tok: &mbe::TokenTree) -> bool {\n     if let mbe::TokenTree::MetaVarDecl(_, _, frag_spec) = *tok {\n         frag_can_be_followed_by_any(frag_spec.name)\n     } else {\n-        // (Non NT's can always be followed by anthing in matchers.)\n+        // (Non NT's can always be followed by anything in matchers.)\n         true\n     }\n }"}, {"sha": "1cfe5bcbc08842f5cc79052a0cd0fe3e53d0c26e", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -289,9 +289,6 @@ declare_features! (\n     /// Permits specifying whether a function should permit unwinding or abort on unwind.\n     (active, unwind_attributes, \"1.4.0\", Some(58760), None),\n \n-    /// Allows `#[no_debug]`.\n-    (active, no_debug, \"1.5.0\", Some(29721), None),\n-\n     /// Allows attributes on expressions and non-item statements.\n     (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n@@ -387,7 +384,7 @@ declare_features! (\n     /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n-    /// Allows infering `'static` outlives requirements (RFC 2093).\n+    /// Allows inferring `'static` outlives requirements (RFC 2093).\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n \n     /// Allows accessing fields of unions inside `const` functions."}, {"sha": "e9a5364c65838c2b502020315a1601125f1d202b", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -175,7 +175,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Stable attributes:\n     // ==========================================================================\n \n-    // Condtional compilation:\n+    // Conditional compilation:\n     ungated!(cfg, Normal, template!(List: \"predicate\")),\n     ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n \n@@ -507,16 +507,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(rustc_attrs),\n         ),\n     ),\n-    (\n-        sym::no_debug, Whitelisted, template!(Word),\n-        Gated(\n-            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n-            sym::no_debug,\n-            \"the `#[no_debug]` attribute was an experimental feature that has been \\\n-            deprecated due to lack of demand\",\n-            cfg_fn!(no_debug)\n-        )\n-    ),\n     gated!(\n         // Used in resolve:\n         prelude_import, Whitelisted, template!(Word),"}, {"sha": "4e348054fbd4b1eea17226fc15275bd120f85cfe", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -111,6 +111,8 @@ declare_features! (\n     /// Allows overlapping impls of marker traits.\n     (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n      Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n+    /// Allows `#[no_debug]`.\n+    (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "40b493de9f4d4f506266b8746f1788d74d64641f", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1819,7 +1819,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"{} may not live long enough\",\n                     labeled_user_string\n                 );\n-                // Explicitely use the name instead of `sub`'s `Display` impl. The `Display` impl\n+                // Explicitly use the name instead of `sub`'s `Display` impl. The `Display` impl\n                 // for the bound is not suitable for suggestions when `-Zverbose` is set because it\n                 // uses `Debug` output, so we handle it specially here so that suggestions are\n                 // always correct."}, {"sha": "285f0c9cf51a9b59e72144bb2e3be848dac0fb26", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             err.span_label(pattern.span, msg);\n         } else if let Some(e) = local_visitor.found_method_call {\n             if let ExprKind::MethodCall(segment, ..) = &e.kind {\n-                // Suggest specifiying type params or point out the return type of the call:\n+                // Suggest specifying type params or point out the return type of the call:\n                 //\n                 // error[E0282]: type annotations needed\n                 //   --> $DIR/type-annotations-needed-expr.rs:2:39"}, {"sha": "938a0e7ab39df846a5b884a72c31fca80c0714a6", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1667,14 +1667,14 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n \n             ty::IntVar(v) => {\n                 // If inlined_probe_value returns a value it's always a\n-                // `ty::Int(_)` or `ty::UInt(_)`, which nevers matches a\n+                // `ty::Int(_)` or `ty::UInt(_)`, which never matches a\n                 // `ty::Infer(_)`.\n                 self.infcx.inner.borrow_mut().int_unification_table.inlined_probe_value(v).is_some()\n             }\n \n             ty::FloatVar(v) => {\n                 // If inlined_probe_value returns a value it's always a\n-                // `ty::Float(_)`, which nevers matches a `ty::Infer(_)`.\n+                // `ty::Float(_)`, which never matches a `ty::Infer(_)`.\n                 //\n                 // Not `inlined_probe_value(v)` because this call site is colder.\n                 self.infcx.inner.borrow_mut().float_unification_table.probe_value(v).is_some()"}, {"sha": "4d264008ee3ed9e65880bafbd94cecef01dbcd38", "filename": "src/librustc_infer/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fopaque_types%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// Here we would report a more complex \"in constraint\", like `'r\n-    /// in ['a, 'b, 'static]` (where `'r` is some regon appearing in\n+    /// in ['a, 'b, 'static]` (where `'r` is some region appearing in\n     /// the hidden type).\n     ///\n     /// # Constrain regions, not the hidden concrete type"}, {"sha": "ce0f2f40894f9091677775b2e0d3e98eaf6b16b5", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -169,7 +169,7 @@ where\n }\n \n // N.B. This type is not public because the protocol around checking the\n-// `err` field is not enforcable otherwise.\n+// `err` field is not enforceable otherwise.\n struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     err: Option<FixupError<'tcx>>,"}, {"sha": "39be8fc1c0fe6491574562e00f657771094bfcff", "filename": "src/librustc_infer/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -455,7 +455,7 @@ impl AutoTraitFinder<'tcx> {\n                                     // predicate has some other kind of region. An region\n                                     // variable isn't something we can actually display to a user,\n                                     // so we choose their new predicate (which doesn't have a region\n-                                    // varaible).\n+                                    // variable).\n                                     //\n                                     // In both cases, we want to remove the old predicate,\n                                     // from `user_computed_preds`, and replace it with the new\n@@ -701,7 +701,7 @@ impl AutoTraitFinder<'tcx> {\n                     //  some subobligations. We then process these subobligations\n                     //  like any other generated sub-obligations.\n                     //\n-                    // 3. We receieve an 'ambiguous' result (Ok(None))\n+                    // 3. We receive an 'ambiguous' result (Ok(None))\n                     // If we were actually trying to compile a crate,\n                     // we would need to re-process this obligation later.\n                     // However, all we care about is finding out what bounds"}, {"sha": "15c5f4d402ac3933de9ed6ae20b69b9cadaeab25", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -505,7 +505,7 @@ fn ty_is_non_local_constructor<'tcx>(ty: Ty<'tcx>, in_crate: InCrate) -> Option<\n             //\n             // We choose to treat all opaque types as non-local, even\n             // those that appear within the same crate. This seems\n-            // somewhat suprising at first, but makes sense when\n+            // somewhat surprising at first, but makes sense when\n             // you consider that opaque types are supposed to hide\n             // the underlying type *within the same crate*. When an\n             // opaque type is used from outside the module"}, {"sha": "10143ae015f2f686fb11294a8a6d967321793197", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1142,7 +1142,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // we're only talking about builtin traits, which are known to be\n                 // inhabited. We used to check for `self.tcx.sess.has_errors()` to\n                 // avoid inundating the user with unnecessary errors, but we now\n-                // check upstream for type errors and dont add the obligations to\n+                // check upstream for type errors and don't add the obligations to\n                 // begin with in those cases.\n                 if self\n                     .tcx"}, {"sha": "6f20f5ac47e57449c3fcde907e425911faa94d2e", "filename": "src/librustc_infer/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -612,7 +612,7 @@ fn receiver_is_dispatchable<'tcx>(\n     };\n \n     // the type `U` in the query\n-    // use a bogus type parameter to mimick a forall(U) query using u32::MAX for now.\n+    // use a bogus type parameter to mimic a forall(U) query using u32::MAX for now.\n     // FIXME(mikeyhew) this is a total hack. Once object_safe_for_dispatch is stabilized, we can\n     // replace this with `dyn Trait`\n     let unsized_self_ty: Ty<'tcx> ="}, {"sha": "c51bf735fa727c0ac6f193ed38329b97d769cf46", "filename": "src/librustc_lexer/src/unescape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Funescape.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -17,7 +17,7 @@ pub enum EscapeError {\n \n     /// Escaped '\\' character without continuation.\n     LoneSlash,\n-    /// Invalid escape characted (e.g. '\\z').\n+    /// Invalid escape character (e.g. '\\z').\n     InvalidEscape,\n     /// Raw '\\r' encountered.\n     BareCarriageReturn,\n@@ -43,7 +43,7 @@ pub enum EscapeError {\n     UnclosedUnicodeEscape,\n     /// '\\u{_12}'\n     LeadingUnderscoreUnicodeEscape,\n-    /// More than 6 charactes in '\\u{..}', e.g. '\\u{10FFFF_FF}'\n+    /// More than 6 characters in '\\u{..}', e.g. '\\u{10FFFF_FF}'\n     OverlongUnicodeEscape,\n     /// Invalid in-bound unicode character code, e.g. '\\u{DFFF}'.\n     LoneSurrogateUnicodeEscape,"}, {"sha": "97b800decc59b30336b7bf6e779c43aaea72a562", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -57,7 +57,7 @@ enum QueryModifier {\n     /// Generate a dep node based on the dependencies of the query\n     Anon,\n \n-    /// Always evaluate the query, ignoring its depdendencies\n+    /// Always evaluate the query, ignoring its dependencies\n     EvalAlways,\n }\n \n@@ -228,7 +228,7 @@ struct QueryModifiers {\n     /// Generate a dep node based on the dependencies of the query\n     anon: bool,\n \n-    // Always evaluate the query, ignoring its depdendencies\n+    // Always evaluate the query, ignoring its dependencies\n     eval_always: bool,\n }\n "}, {"sha": "efa259d0c4e0d2b2ca69f9812769aa87f8d474b9", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -711,7 +711,7 @@ impl<'a> CrateLocator<'a> {\n         // See also #68149 which provides more detail on why emitting the\n         // dependency on the rlib is a bad thing.\n         //\n-        // We currenty do not verify that these other sources are even in sync,\n+        // We currently do not verify that these other sources are even in sync,\n         // and this is arguably a bug (see #10786), but because reading metadata\n         // is quite slow (especially from dylibs) we currently do not read it\n         // from the other crate sources."}, {"sha": "1553b6cf0affd0fbaeb7eb4bb801626fe6dbd54d", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -201,7 +201,7 @@ crate struct CrateRoot<'tcx> {\n \n     per_def: LazyPerDefTables<'tcx>,\n \n-    /// The DefIndex's of any proc macros delcared by this crate.\n+    /// The DefIndex's of any proc macros declared by this crate.\n     proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n     compiler_builtins: bool,"}, {"sha": "6ed4a1d491474d85351aa0c434691445027be72b", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1231,7 +1231,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 GeneratorKind::Async(async_kind) => match async_kind {\n                     AsyncGeneratorKind::Block => \"async block\",\n                     AsyncGeneratorKind::Closure => \"async closure\",\n-                    _ => bug!(\"async block/closure expected, but async funtion found.\"),\n+                    _ => bug!(\"async block/closure expected, but async function found.\"),\n                 },\n                 GeneratorKind::Gen => \"generator\",\n             },"}, {"sha": "5c37faaa82a544782795ceb2b046489e582257d3", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -445,7 +445,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    /// Targetted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n+    /// Targeted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n     fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n         err.span_label(sp, format!(\"cannot {}\", act));\n "}, {"sha": "d33639aa9d9a080009a6261ac2c95bf5af25a583", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -63,7 +63,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 self.mutate_place(location, lhs, Shallow(None), JustWrite);\n             }\n             StatementKind::FakeRead(_, _) => {\n-                // Only relavent for initialized/liveness/safety checks.\n+                // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n                 self.mutate_place(location, place, Shallow(None), JustWrite);"}, {"sha": "4323e2db844766697c58287a83da20b2ca67e7e2", "filename": "src/librustc_mir/borrow_check/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmember_constraints.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -125,7 +125,7 @@ where\n         // wind up mapped to the same key `S`, we would append the\n         // linked list for `Ra` onto the end of the linked list for\n         // `Rb` (or vice versa) -- this basically just requires\n-        // rewriting the final link from one list to point at the othe\n+        // rewriting the final link from one list to point at the other\n         // other (see `append_list`).\n \n         let MemberConstraintSet { first_constraints, mut constraints, choice_regions } = self;"}, {"sha": "f93f2acfa8a6c34ccbc7cb2ccdbcf12964d78c1d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -452,7 +452,7 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     /// for the activation of the borrow.\n     reservation_warnings:\n         FxHashMap<BorrowIndex, (Place<'tcx>, Span, Location, BorrowKind, BorrowData<'tcx>)>,\n-    /// This field keeps track of move errors that are to be reported for given move indicies.\n+    /// This field keeps track of move errors that are to be reported for given move indices.\n     ///\n     /// There are situations where many errors can be reported for a single move out (see #53807)\n     /// and we want only the best of those errors."}, {"sha": "ace92949814a7b695925f3b75092da81db827850", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -579,7 +579,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             | ConstraintCategory::UseAsConst\n             | ConstraintCategory::UseAsStatic = constraint.category\n             {\n-                // \"Returning\" from a promoted is an assigment to a\n+                // \"Returning\" from a promoted is an assignment to a\n                 // temporary from the user's point of view.\n                 constraint.category = ConstraintCategory::Boring;\n             }"}, {"sha": "7a8e61db6d01976973a7738edae2c40c0c6d648b", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -226,7 +226,7 @@ pub fn const_eval_validated_provider<'tcx>(\n         match tcx.const_eval_validated(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n-            // dedupliate calls\n+            // deduplicate calls\n             other => return other,\n         }\n     }\n@@ -267,7 +267,7 @@ pub fn const_eval_raw_provider<'tcx>(\n         match tcx.const_eval_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n-            // dedupliate calls\n+            // deduplicate calls\n             other => return other,\n         }\n     }"}, {"sha": "e683422e611a81611195d8447d62262acc4c943d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -670,7 +670,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         );\n         if cur_unwinding {\n             // Follow the unwind edge.\n-            let unwind = next_block.expect(\"Encounted StackPopCleanup::None when unwinding!\");\n+            let unwind = next_block.expect(\"Encountered StackPopCleanup::None when unwinding!\");\n             self.unwind_to_block(unwind);\n         } else {\n             // Follow the normal return edge."}, {"sha": "6615cc608fb54c4f3beebe4670e6b5b8b8654afb", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -227,7 +227,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// it contains (in relocations) tagged.  The way we construct allocations is\n     /// to always first construct it without extra and then add the extra.\n     /// This keeps uniform code paths for handling both allocations created by CTFE\n-    /// for statics, and allocations ceated by Miri during evaluation.\n+    /// for statics, and allocations created by Miri during evaluation.\n     ///\n     /// `kind` is the kind of the allocation being tagged; it can be `None` when\n     /// it's a static and `STATIC_KIND` is `None`."}, {"sha": "22b1a7b7137d9c48f2d540a8b248eca2c2a7264e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -678,7 +678,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             // Then computing the absolute variant idx should not overflow any more.\n                             let variant_index = variants_start\n                                 .checked_add(variant_index_relative)\n-                                .expect(\"oveflow computing absolute variant idx\");\n+                                .expect(\"overflow computing absolute variant idx\");\n                             let variants_len = rval\n                                 .layout\n                                 .ty"}, {"sha": "ee45179fd8b316bd53ad98280f33079d2ed3d063", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -292,7 +292,7 @@ where\n \n         let all_bytes = 0..self.len();\n         // This 'inspect' is okay since following access respects undef and relocations. This does\n-        // influence interpreter exeuction, but only to detect the error of cycles in evalution\n+        // influence interpreter exeuction, but only to detect the error of cycles in evaluation\n         // dependencies.\n         let bytes = self.inspect_with_undef_and_ptr_outside_interpreter(all_bytes);\n "}, {"sha": "e565badd885b6c3456ad0bb0d35bdc797d81967e", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -20,7 +20,7 @@ fn is_stable(place: PlaceRef<'_, '_>) -> bool {\n             // Which place this evaluates to can change with any memory write,\n             // so cannot assume this to be stable.\n             ProjectionElem::Deref => false,\n-            // Array indices are intersting, but MIR building generates a *fresh*\n+            // Array indices are interesting, but MIR building generates a *fresh*\n             // temporary for every array access, so the index cannot be changed as\n             // a side-effect.\n             ProjectionElem::Index { .. } |"}, {"sha": "133772407c5ddd145a7477e1bc5ab3513ad956e3", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -276,7 +276,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         }\n                     };\n                     self.visit_place_base(&place.local, ctx, location);\n-                    self.visit_projection(&place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n             }\n@@ -289,7 +289,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n                     self.visit_place_base(&place.local, ctx, location);\n-                    self.visit_projection(&place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n             }\n@@ -408,7 +408,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n     }\n     fn visit_projection_elem(\n         &mut self,\n-        place_local: &Local,\n+        place_local: Local,\n         proj_base: &[PlaceElem<'tcx>],\n         elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n@@ -428,11 +428,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n         match elem {\n             ProjectionElem::Deref => {\n-                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n                 if let ty::RawPtr(_) = base_ty.kind {\n                     if proj_base.is_empty() {\n                         if let (local, []) = (place_local, proj_base) {\n-                            let decl = &self.body.local_decls[*local];\n+                            let decl = &self.body.local_decls[local];\n                             if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n                                 let span = decl.source_info.span;\n                                 self.check_static(def_id, span);\n@@ -452,7 +452,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n-                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n                 match base_ty.ty_adt_def() {\n                     Some(def) if def.is_union() => {\n                         self.check_op(ops::UnionAccess);"}, {"sha": "0560f77f5c99f87e1472f1bf01bb107b5d7b1a14", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -664,7 +664,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return;\n         }\n \n-        // FIXME> figure out what tho do when try_read_immediate fails\n+        // FIXME> figure out what to do when try_read_immediate fails\n         let imm = self.use_ecx(|this| this.ecx.try_read_immediate(value));\n \n         if let Some(Ok(imm)) = imm {"}, {"sha": "ecf0a8ea83ca3654dce21574c09c820f3e10617e", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -731,7 +731,7 @@ where\n         self.elaborator.patch().new_block(base_block)\n     }\n \n-    /// Ceates a pair of drop-loops of `place`, which drops its contents, even\n+    /// Creates a pair of drop-loops of `place`, which drops its contents, even\n     /// in the case of 1 panic. If `ptr_based`, creates a pointer loop,\n     /// otherwise create an index loop.\n     fn drop_loop_pair("}, {"sha": "416a5bd7d22845631112763b7aa009b0b5d69c19", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -490,7 +490,7 @@ fn write_scope_tree(\n     }\n \n     let children = match scope_tree.get(&parent) {\n-        Some(childs) => childs,\n+        Some(children) => children,\n         None => return Ok(()),\n     };\n "}, {"sha": "71aefa85c99fd69625fc4bd53aedaa7bdaa3ac35", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -837,7 +837,7 @@ impl<'tcx> Constructor<'tcx> {\n                             // eliminate it straight away.\n                             remaining_ranges = vec![];\n                         } else {\n-                            // Otherwise explicitely compute the remaining ranges.\n+                            // Otherwise explicitly compute the remaining ranges.\n                             remaining_ranges = other_range.subtract_from(remaining_ranges);\n                         }\n "}, {"sha": "f42091e7c296aef8abcc2cbe4c3f660b6bf572a4", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -257,7 +257,7 @@ impl<'a> StripUnconfigured<'a> {\n     /// Parse and expand all `cfg_attr` attributes into a list of attributes\n     /// that are within each `cfg_attr` that has a true configuration predicate.\n     ///\n-    /// Gives compiler warnigns if any `cfg_attr` does not contain any\n+    /// Gives compiler warnings if any `cfg_attr` does not contain any\n     /// attributes and is in the original source code. Gives compiler errors if\n     /// the syntax of any `cfg_attr` is incorrect.\n     pub fn process_cfg_attrs<T: HasAttrs>(&mut self, node: &mut T) {"}, {"sha": "b65b894172844ccbdccb8f1ad221079138365472", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -40,6 +40,7 @@ struct TokenTreesReader<'a> {\n     /// Used only for error recovery when arriving to EOF with mismatched braces.\n     matching_delim_spans: Vec<(token::DelimToken, Span, Span)>,\n     last_unclosed_found_span: Option<Span>,\n+    /// Collect empty block spans that might have been auto-inserted by editors.\n     last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,\n }\n \n@@ -138,7 +139,11 @@ impl<'a> TokenTreesReader<'a> {\n \n                         if tts.is_empty() {\n                             let empty_block_span = open_brace_span.to(close_brace_span);\n-                            self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n+                            if !sm.is_multiline(empty_block_span) {\n+                                // Only track if the block is in the form of `{}`, otherwise it is\n+                                // likely that it was written on purpose.\n+                                self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n+                            }\n                         }\n \n                         if self.open_braces.is_empty() {"}, {"sha": "bdd78e671a8b36281f7542684652e3a2b46ab9c6", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -138,7 +138,7 @@ impl<'a> Parser<'a> {\n \n                         if let Some(prev_attr_sp) = prev_attr_sp {\n                             diagnostic\n-                                .span_label(attr_sp, \"not permitted following an outer attibute\")\n+                                .span_label(attr_sp, \"not permitted following an outer attribute\")\n                                 .span_label(prev_attr_sp, prev_attr_note);\n                         }\n "}, {"sha": "6587e763d50c51890207633112ac321c78e21090", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -895,7 +895,7 @@ impl<'a> Parser<'a> {\n         let msg = format!(\"expected `;`, found `{}`\", super::token_descr(&self.token));\n         let appl = Applicability::MachineApplicable;\n         if self.token.span == DUMMY_SP || self.prev_token.span == DUMMY_SP {\n-            // Likely inside a macro, can't provide meaninful suggestions.\n+            // Likely inside a macro, can't provide meaningful suggestions.\n             return self.expect(&token::Semi).map(drop);\n         } else if !sm.is_multiline(self.prev_token.span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable."}, {"sha": "e7c47b0be8e49d60db9afe379739f1a2f48f89f7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1426,7 +1426,7 @@ impl<'a> Parser<'a> {\n         ))\n     }\n \n-    /// Parses an optional `move` prefix to a closure lke construct.\n+    /// Parses an optional `move` prefix to a closure-like construct.\n     fn parse_capture_clause(&mut self) -> CaptureBy {\n         if self.eat_keyword(kw::Move) { CaptureBy::Value } else { CaptureBy::Ref }\n     }"}, {"sha": "282bd20a9bed9d2e433b7a41046b204ec95265bf", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -285,7 +285,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n \n     // Ordinarily, we can rely on the visit order of HIR intravisit\n     // to correspond to the actual execution order of statements.\n-    // However, there's a weird corner case with compund assignment\n+    // However, there's a weird corner case with compound assignment\n     // operators (e.g. `a += b`). The evaluation order depends on whether\n     // or not the operator is overloaded (e.g. whether or not a trait\n     // like AddAssign is implemented)."}, {"sha": "7ea9ab5335db3a6f943517c798ea39ca1f549c22", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -655,7 +655,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     }\n \n     // FIXME(#44232): the `used_features` table no longer exists, so we\n-    // don't lint about unused features. We should reenable this one day!\n+    // don't lint about unused features. We should re-enable this one day!\n }\n \n fn unnecessary_stable_feature_lint(tcx: TyCtxt<'_>, span: Span, feature: Symbol, since: Symbol) {"}, {"sha": "3b747a56499f5bf59bf4690f3f68046b6353b002", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -249,8 +249,7 @@ impl<'a> Resolver<'a> {\n                     self.session,\n                     span,\n                     E0409,\n-                    \"variable `{}` is bound in inconsistent \\\n-                                ways within the same match arm\",\n+                    \"variable `{}` is bound inconsistently across alternatives separated by `|`\",\n                     variable_name\n                 );\n                 err.span_label(span, \"bound in different ways\");\n@@ -1090,7 +1089,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n \n         // Sort extern crate names in reverse order to get\n-        // 1) some consistent ordering for emitted dignostics, and\n+        // 1) some consistent ordering for emitted diagnostics, and\n         // 2) `std` suggestions before `core` suggestions.\n         let mut extern_crate_names =\n             self.r.extern_prelude.iter().map(|(ident, _)| ident.name).collect::<Vec<_>>();"}, {"sha": "5d4df992b949a0fdc125d12b5340a7ca45e472d5", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1075,7 +1075,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         // single import (see test `issue-55884-2.rs`). In theory single imports should\n                         // always block globs, even if they are not yet resolved, so that this kind of\n                         // self-inconsistent resolution never happens.\n-                        // Reenable the assert when the issue is fixed.\n+                        // Re-enable the assert when the issue is fixed.\n                         // assert!(result[ns].get().is_err());\n                     }\n                 }"}, {"sha": "3481beec42a84af2bc99c3753ca1963e1edb360a", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -553,7 +553,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let prev = replace(&mut self.diagnostic_metadata.currently_processing_generics, true);\n         match arg {\n             GenericArg::Type(ref ty) => {\n-                // We parse const arguments as path types as we cannot distiguish them during\n+                // We parse const arguments as path types as we cannot distinguish them during\n                 // parsing. We try to resolve that ambiguity by attempting resolution the type\n                 // namespace first, and if that fails we try again in the value namespace. If\n                 // resolution in the value namespace succeeds, we have an generic const argument on"}, {"sha": "d2c20451f364a5f2693280384670894f3fa4f923", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     LifetimeName::Implicit => {\n                         // For types like `dyn Foo`, we should\n                         // generate a special form of elided.\n-                        span_bug!(ty.span, \"object-lifetime-default expected, not implict\",);\n+                        span_bug!(ty.span, \"object-lifetime-default expected, not implicit\",);\n                     }\n                     LifetimeName::ImplicitObjectLifetimeDefault => {\n                         // If the user does not write *anything*, we"}, {"sha": "77e7ff1e2a738e5a76ac991c8ad4ddc51fa6134a", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -365,11 +365,11 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                         //\n                         // NB: for all tagged `enum`s (which include all non-C-like\n                         // `enum`s with defined FFI representation), this will\n-                        // match the homogenous computation on the equivalent\n+                        // match the homogeneous computation on the equivalent\n                         // `struct { tag; union { variant1; ... } }` and/or\n                         // `union { struct { tag; variant1; } ... }`\n                         // (the offsets of variant fields should be identical\n-                        // between the two for either to be a homogenous aggregate).\n+                        // between the two for either to be a homogeneous aggregate).\n                         let variant_start = total;\n                         for variant_idx in variants.indices() {\n                             let (variant_result, variant_total) =\n@@ -542,7 +542,7 @@ pub struct FnAbi<'a, Ty> {\n     /// The count of non-variadic arguments.\n     ///\n     /// Should only be different from args.len() when c_variadic is true.\n-    /// This can be used to know wether an argument is variadic or not.\n+    /// This can be used to know whether an argument is variadic or not.\n     pub fixed_count: usize,\n \n     pub conv: Conv,"}, {"sha": "e9bb94ca49050526846fdb3d61c12b96d8dca045", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -401,7 +401,7 @@ impl Align {\n     }\n }\n \n-/// A pair of aligments, ABI-mandated and preferred.\n+/// A pair of alignments, ABI-mandated and preferred.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n #[derive(HashStable_Generic)]\n pub struct AbiAndPrefAlign {"}, {"sha": "e299f92fdeb637706bcfc438c8bd69770aa96397", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -29,7 +29,7 @@ pub fn target() -> TargetResult {\n     base.abi_return_struct_as_int = true;\n \n     // Use -GNU here, because of the reason below:\n-    // Backgound and Problem:\n+    // Background and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic\n     //   _alldiv, _aulldiv, _allrem, _aullrem, _allmul, which will cause undefined symbol.\n     //   A real issue is __aulldiv() is referred by __udivdi3() - udivmod_inner!(), from\n@@ -64,7 +64,7 @@ pub fn target() -> TargetResult {\n     //      i386/umoddi3.S\n     // Possible solution:\n     //   1. Eliminate Intrinsics generation.\n-    //      1.1 Choose differnt target to bypass isTargetKnownWindowsMSVC().\n+    //      1.1 Choose different target to bypass isTargetKnownWindowsMSVC().\n     //      1.2 Remove the \"Setup Windows compiler runtime calls\" in LLVM\n     //   2. Implement Intrinsics.\n     //   We evaluated all options."}, {"sha": "e0a402533e7772ef9cddc11d21d292886283fe7f", "filename": "src/librustc_target/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -23,7 +23,7 @@ pub fn target() -> TargetResult {\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".to_string()),\n \n-            // With `ptx-linker` approach, it can be later overriden via link flags.\n+            // With `ptx-linker` approach, it can be later overridden via link flags.\n             cpu: \"sm_30\".to_string(),\n \n             // FIXME: create tests for the atomics.\n@@ -43,7 +43,7 @@ pub fn target() -> TargetResult {\n             // Let the `ptx-linker` to handle LLVM lowering into MC / assembly.\n             obj_is_bitcode: true,\n \n-            // Convinient and predicable naming scheme.\n+            // Convenient and predicable naming scheme.\n             dll_prefix: \"\".to_string(),\n             dll_suffix: \".ptx\".to_string(),\n             exe_suffix: \".ptx\".to_string(),"}, {"sha": "c3cf0cdc61da6b9905d7063348f3ca1a6160f5cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -661,7 +661,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Given the type/lifetime/const arguments provided to some path (along with\n     /// an implicit `Self`, if this is a trait reference), returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n-    /// Also returns back constriants on associated types.\n+    /// Also returns back constraints on associated types.\n     ///\n     /// Example:\n     ///\n@@ -2924,7 +2924,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let tcx = self.tcx();\n \n-        // We proactively collect all the infered type params to emit a single error per fn def.\n+        // We proactively collect all the inferred type params to emit a single error per fn def.\n         let mut visitor = PlaceholderHirTyCollector::default();\n         for ty in decl.inputs {\n             visitor.visit_ty(ty);"}, {"sha": "b271bc95d9453f75afd8120bab65f3ceb090d8df", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1040,7 +1040,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             return r;\n         }\n \n-        debug!(\"pick: actual search failed, assemble diagnotics\");\n+        debug!(\"pick: actual search failed, assemble diagnostics\");\n \n         let static_candidates = mem::take(&mut self.static_candidates);\n         let private_candidate = self.private_candidate.take();"}, {"sha": "b34c6ddab3902ca371cf00f8814d1416e9f51859", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -457,7 +457,7 @@ pub enum Diverges {\n         /// where all arms diverge), we may be\n         /// able to provide a more informative\n         /// message to the user.\n-        /// If this is `None`, a default messsage\n+        /// If this is `None`, a default message\n         /// will be generated, which is suitable\n         /// for most cases.\n         custom_note: Option<&'static str>,\n@@ -896,7 +896,7 @@ where\n                 ty::Opaque(def_id, substs) => {\n                     debug!(\"fixup_opaque_types: found type {:?}\", ty);\n                     // Here, we replace any inference variables that occur within\n-                    // the substs of an opaque type. By definition, any type occuring\n+                    // the substs of an opaque type. By definition, any type occurring\n                     // in the substs has a corresponding generic parameter, which is what\n                     // we replace it with.\n                     // This replacement is only run on the function signature, so any\n@@ -1937,7 +1937,7 @@ fn check_specialization_validity<'tcx>(\n         }\n     });\n \n-    // If `opt_result` is `None`, we have only encoutered `default impl`s that don't contain the\n+    // If `opt_result` is `None`, we have only encountered `default impl`s that don't contain the\n     // item. This is allowed, the item isn't actually getting specialized here.\n     let result = opt_result.unwrap_or(Ok(()));\n \n@@ -3452,7 +3452,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //  }\n                 //  ```\n                 //\n-                // In the above snippet, the inference varaible created by\n+                // In the above snippet, the inference variable created by\n                 // instantiating `Option<Foo>` will be completely unconstrained.\n                 // We treat this as a non-defining use by making the inference\n                 // variable fall back to the opaque type itself."}, {"sha": "29c124eb3a99859c2d95e637fc0be3c9f1daea35", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -114,7 +114,7 @@ const INITIAL_BM: BindingMode = BindingMode::BindByValue(hir::Mutability::Not);\n enum AdjustMode {\n     /// Peel off all immediate reference types.\n     Peel,\n-    /// Reset binding mode to the inital mode.\n+    /// Reset binding mode to the initial mode.\n     Reset,\n     /// Pass on the input binding mode and expected type.\n     Pass,\n@@ -897,7 +897,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n         let missing_parenthesis = match (&expected.kind, fields, had_err) {\n-            // #67037: only do this if we could sucessfully type-check the expected type against\n+            // #67037: only do this if we could successfully type-check the expected type against\n             // the tuple struct pattern. Otherwise the substs could get out of range on e.g.,\n             // `let P() = U;` where `P != U` with `struct P<T>(T);`.\n             (ty::Adt(_, substs), [field], false) => {"}, {"sha": "0a5744935732426fffe44ef06cecbfa1d96713d6", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -174,7 +174,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n             // impl !Send for (A, B) { }\n             // ```\n             //\n-            // This final impl is legal according to the orpan\n+            // This final impl is legal according to the orphan\n             // rules, but it invalidates the reasoning from\n             // `two_foos` above.\n             debug!("}, {"sha": "08028a580d9419d1836f90cccedf1280de93b774", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1395,7 +1395,7 @@ fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {\n         .any(is_suggestable_infer_ty)\n }\n \n-/// Whether `ty` is a type with `_` placeholders that can be infered. Used in diagnostics only to\n+/// Whether `ty` is a type with `_` placeholders that can be inferred. Used in diagnostics only to\n /// use inference to provide suggestions for the appropriate type if possible.\n fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     use hir::TyKind::*;\n@@ -2341,8 +2341,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n         } else if attr.check_name(sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n-        } else if attr.check_name(sym::no_debug) {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_DEBUG;\n         } else if attr.check_name(sym::used) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if attr.check_name(sym::thread_local) {"}, {"sha": "407b50382fa37ef1c57e8ed682e3487681f45406", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -493,7 +493,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // Writing a projection trait bound of the form\n                     // <T as Trait>::Name : ?Sized\n                     // is illegal, because ?Sized bounds can only\n-                    // be written in the (here, nonexistant) definition\n+                    // be written in the (here, nonexistent) definition\n                     // of the type.\n                     // Therefore, we make sure that we never add a ?Sized\n                     // bound for projections"}, {"sha": "02f1947c99e5fd1e469075d9ef5cc85f93a822ba", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -135,7 +135,7 @@ trait Writer {\n     fn string<T: Display>(&mut self, text: T, klass: Class) -> io::Result<()>;\n }\n \n-// Implement `Writer` for anthing that can be written to, this just implements\n+// Implement `Writer` for anything that can be written to, this just implements\n // the default rustdoc behaviour.\n impl<U: Write> Writer for U {\n     fn string<T: Display>(&mut self, text: T, klass: Class) -> io::Result<()> {"}, {"sha": "c64c4769708622c276206406fa6dac2b81862361", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -3601,7 +3601,7 @@ fn render_impl(\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n     show_default_items: bool,\n-    // This argument is used to reference same type with different pathes to avoid duplication\n+    // This argument is used to reference same type with different paths to avoid duplication\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {"}, {"sha": "edc28033c9b8323401654efae890b6d3548682c4", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -651,7 +651,7 @@ impl Ipv4Addr {\n \n     /// Returns [`true`] if this address is reserved by IANA for future use. [IETF RFC 1112]\n     /// defines the block of reserved addresses as `240.0.0.0/4`. This range normally includes the\n-    /// broadcast address `255.255.255.255`, but this implementation explicitely excludes it, since\n+    /// broadcast address `255.255.255.255`, but this implementation explicitly excludes it, since\n     /// it is obviously not reserved for future use.\n     ///\n     /// [IETF RFC 1112]: https://tools.ietf.org/html/rfc1112"}, {"sha": "d22b44a06666295787ed0a614c5418b35ad51ecb", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -34,7 +34,7 @@ pub trait MetadataExt {\n     /// }\n     /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n-    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now prefered\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now preferred\")]\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat;\n "}, {"sha": "0274268f69f25b34f43084bf1b82bc2b4cd34489", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -40,7 +40,7 @@ struct Consumer<T, Addition> {\n     tail: UnsafeCell<*mut Node<T>>, // where to pop from\n     tail_prev: AtomicPtr<Node<T>>,  // where to pop from\n     cache_bound: usize,             // maximum cache size\n-    cached_nodes: AtomicUsize,      // number of nodes marked as cachable\n+    cached_nodes: AtomicUsize,      // number of nodes marked as cacheable\n     addition: Addition,\n }\n "}, {"sha": "76a9b427b39c6e66de5bb673dfff9d598671323c", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -151,7 +151,7 @@ unsafe impl<T: UserSafeSized> UserSafe for [T] {\n /// It is also possible to obtain a mutable reference `&mut UserRef<T>`. Unlike\n /// regular mutable references, these are not exclusive. Userspace may always\n /// write to the backing memory at any time, so it can't be assumed that there\n-/// the pointed-to memory is uniquely borrowed. The two different refence types\n+/// the pointed-to memory is uniquely borrowed. The two different reference types\n /// are used solely to indicate intent: a mutable reference is for writing to\n /// user memory, an immutable reference for reading from user memory.\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]"}, {"sha": "fbcb006ecdf11e6a4a3b6f3b4f938bf53ac193f9", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -156,7 +156,7 @@ where\n \n // On Unix-like platforms, libc::abort will unregister signal handlers\n // including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc bufferred\n+// fclose streams, with the side effect of flushing them so libc buffered\n // output will be printed.  Additionally the shell will generally print a more\n // understandable error message like \"Abort trap\" rather than \"Illegal\n // instruction\" that intrinsics::abort would cause, as intrinsics::abort is"}, {"sha": "e23191c94311fddd284a38123431b20b78fdc2c4", "filename": "src/libstd/sys/vxworks/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fmod.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -103,7 +103,7 @@ where\n \n // On Unix-like platforms, libc::abort will unregister signal handlers\n // including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc bufferred\n+// fclose streams, with the side effect of flushing them so libc buffered\n // output will be printed.  Additionally the shell will generally print a more\n // understandable error message like \"Abort trap\" rather than \"Illegal\n // instruction\" that intrinsics::abort would cause, as intrinsics::abort is"}, {"sha": "5317063b80d11fec1a7973fe3ebff215d9366e42", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -283,7 +283,7 @@ fn is_nightly() -> bool {\n     bootstrap || !disable_unstable_features\n }\n \n-// Gets the CLI options assotiated with `report-time` feature.\n+// Gets the CLI options associated with `report-time` feature.\n fn get_time_options(\n     matches: &getopts::Matches,\n     allow_unstable: bool,"}, {"sha": "8e7bd8de924993150917dd9ef7e041411d3b4138", "filename": "src/libtest/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Foptions.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -41,7 +41,7 @@ pub enum OutputFormat {\n     Json,\n }\n \n-/// Whether ignored test should be runned or not\n+/// Whether ignored test should be run or not\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum RunIgnored {\n     Yes,"}, {"sha": "465f3f8f99427983ded6d70a6f60fe2b9e9d22b8", "filename": "src/libtest/test_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Flibtest%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftest_result.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -27,7 +27,7 @@ pub enum TestResult {\n unsafe impl Send for TestResult {}\n \n /// Creates a `TestResult` depending on the raw result of test execution\n-/// and assotiated data.\n+/// and associated data.\n pub fn calc_result<'a>(\n     desc: &TestDesc,\n     task_result: Result<(), &'a (dyn Any + 'static + Send)>,"}, {"sha": "db9ac4af629c983dc0f10cf818ca4c9e49a2c478", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=823ff8cf1397a5772b1f6954b60576202bf91836", "patch": "@@ -1,37 +0,0 @@\n-// ignore-lldb\n-\n-// compile-flags:-g\n-\n-// gdb-command:run\n-\n-// gdb-command:info locals\n-// gdb-check:No locals.\n-// gdb-command:continue\n-\n-// gdb-command:info locals\n-// gdb-check:abc = 10\n-// gdb-command:continue\n-\n-#![allow(unused_variables)]\n-#![feature(no_debug)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-#[inline(never)]\n-fn id<T>(x: T) -> T {x}\n-\n-fn function_with_debuginfo() {\n-    let abc = 10_usize;\n-    id(abc); // #break\n-}\n-\n-#[no_debug]\n-fn function_without_debuginfo() {\n-    let abc = -57i32;\n-    id(abc); // #break\n-}\n-\n-fn main() {\n-    function_without_debuginfo();\n-    function_with_debuginfo();\n-}"}, {"sha": "03bb5eea765cc2315d5de099f74548125471cfac", "filename": "src/test/incremental/cyclic-trait-hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcyclic-trait-hierarchy.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-// Adapated from rust-lang/rust#58813\n+// Adapted from rust-lang/rust#58813\n \n // revisions: rpass1 cfail2\n "}, {"sha": "9c17c8745f8caa26461505ab15bc53042beb9553", "filename": "src/test/incremental/thinlto/cgu_invalidated_when_import_added.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_added.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_added.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_added.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -4,7 +4,7 @@\n \n // rust-lang/rust#59535:\n //\n-// This is analgous to cgu_invalidated_when_import_removed.rs, but it covers\n+// This is analogous to cgu_invalidated_when_import_removed.rs, but it covers\n // the other direction:\n //\n // We start with a call-graph like `[A] -> [B -> D] [C]` (where the letters are"}, {"sha": "1214e37f982edf101ad8002bc2daf13df6ca114e", "filename": "src/test/incremental/thinlto/cgu_invalidated_when_import_removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_invalidated_when_import_removed.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -41,7 +41,7 @@ mod foo {\n     // In cfail2, ThinLTO decides that foo() does not get inlined into main, and\n     // instead bar() gets inlined into foo(). But faulty logic in our incr.\n     // ThinLTO implementation thought that `main()` is unchanged and thus reused\n-    // the object file still containing a call to the now non-existant bar().\n+    // the object file still containing a call to the now non-existent bar().\n     pub fn foo(){\n         bar()\n     }"}, {"sha": "99bbeaafda5c47f51b3563da6b74f84033649d56", "filename": "src/test/ui/consts/const-int-arithmetic-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -8,7 +8,7 @@\n const fn add(x: i8, y: i8) -> i8 { x+y }\n const fn sub(x: i8, y: i8) -> i8 { x-y }\n const fn mul(x: i8, y: i8) -> i8 { x*y }\n-// div and rem are always checked, so we cannot test their result in case of oveflow.\n+// div and rem are always checked, so we cannot test their result in case of overflow.\n const fn neg(x: i8) -> i8 { -x }\n \n fn main() {"}, {"sha": "b665b049f32f9750fe8cc8eaf467fedbde1ff350", "filename": "src/test/ui/definition-reachable/nested-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fdefinition-reachable%2Fnested-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fdefinition-reachable%2Fnested-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefinition-reachable%2Fnested-fn.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-// Check that functions visible to macros through paths with >2 segements are\n+// Check that functions visible to macros through paths with >2 segments are\n // considered reachable\n \n // aux-build:field-method-macro.rs"}, {"sha": "c50c46ee5641665e2978ffe6d1e3aacae934db5c", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -46,7 +46,7 @@ This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n   and do the cast in the fn body (the preferred option)\n-- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+- cast the fn item of a fn pointer before calling transmute, as shown here:\n \n     ```\n     let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));"}, {"sha": "b399bd2cc0f8d1cc2ee5fb1b6b137a8a3e1676cc", "filename": "src/test/ui/feature-gates/feature-gate-no-debug-2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.rs?ref=823ff8cf1397a5772b1f6954b60576202bf91836", "patch": "@@ -1,5 +0,0 @@\n-#![deny(deprecated)]\n-#![feature(no_debug)]\n-\n-#[no_debug] //~ ERROR use of deprecated attribute `no_debug`\n-fn main() {}"}, {"sha": "9a6f898f2a5a8ce508ad9f107840e9dcffcc28fc", "filename": "src/test/ui/feature-gates/feature-gate-no-debug-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug-2.stderr?ref=823ff8cf1397a5772b1f6954b60576202bf91836", "patch": "@@ -1,14 +0,0 @@\n-error: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/feature-gate-no-debug-2.rs:4:1\n-   |\n-LL | #[no_debug]\n-   | ^^^^^^^^^^^ help: remove this attribute\n-   |\n-note: the lint level is defined here\n-  --> $DIR/feature-gate-no-debug-2.rs:1:9\n-   |\n-LL | #![deny(deprecated)]\n-   |         ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a472c4c7663f573ffdf16e26ae302ed61cc34b57", "filename": "src/test/ui/feature-gates/feature-gate-no-debug.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.rs?ref=823ff8cf1397a5772b1f6954b60576202bf91836", "patch": "@@ -1,4 +0,0 @@\n-#![allow(deprecated)]\n-\n-#[no_debug] //~ ERROR the `#[no_debug]` attribute was\n-fn main() {}"}, {"sha": "e146d643bcbe309b246bffb4a4323fef6e3d6b0d", "filename": "src/test/ui/feature-gates/feature-gate-no-debug.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/823ff8cf1397a5772b1f6954b60576202bf91836/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no-debug.stderr?ref=823ff8cf1397a5772b1f6954b60576202bf91836", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand\n-  --> $DIR/feature-gate-no-debug.rs:3:1\n-   |\n-LL | #[no_debug]\n-   | ^^^^^^^^^^^\n-   |\n-   = note: see issue #29721 <https://github.com/rust-lang/rust/issues/29721> for more information\n-   = help: add `#![feature(no_debug)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "00f3490991b5235771fb2362207cb00f53f09fa8", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -12,7 +12,7 @@ impl<'a> LifetimeTrait<'a> for &'a i32 {}\n fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n //~^ ERROR cannot infer an appropriate lifetime\n \n-// Tests that a closure type contianing 'b cannot be returned from a type where\n+// Tests that a closure type containing 'b cannot be returned from a type where\n // only 'a was expected.\n fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n     //~^ ERROR lifetime mismatch"}, {"sha": "518b5f211e5da26c9403a135de06806986d6062a", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-tab\n \n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n-#![feature(no_debug)]\n \n #[no_mangle] const DISCOVERY: usize = 1;\n //~^ ERROR const items should never be `#[no_mangle]`\n@@ -39,9 +38,6 @@ struct Equinox {\n     warp_factor: f32,\n }\n \n-#[no_debug] // should suggest removal of deprecated attribute\n-//~^ WARN deprecated\n-//~| HELP remove this attribute\n fn main() {\n     while true {\n     //~^ WARN denote infinite loops"}, {"sha": "0ef5d72609ae25b3bf6d814c149ebcac37fb1e93", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,13 +1,13 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:46:5\n+  --> $DIR/suggestions.rs:42:5\n    |\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:49:31\n+  --> $DIR/suggestions.rs:45:31\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n@@ -18,16 +18,8 @@ note: the lint level is defined here\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |                     ^^^^^^^^^^^^^\n \n-warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:42:1\n-   |\n-LL | #[no_debug] // should suggest removal of deprecated attribute\n-   | ^^^^^^^^^^^ help: remove this attribute\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:49:13\n+  --> $DIR/suggestions.rs:45:13\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |             ----^^^^^^^^^^^\n@@ -41,7 +33,7 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:55:13\n+  --> $DIR/suggestions.rs:51:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -53,7 +45,7 @@ LL | ||             b = 1;\n    |               help: remove this `mut`\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:6:14\n+  --> $DIR/suggestions.rs:5:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +55,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    = note: `#[deny(no_mangle_const_items)]` on by default\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:12:1\n+  --> $DIR/suggestions.rs:11:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n@@ -74,39 +66,39 @@ LL | pub fn defiant<T>(_t: T) {}\n    = note: `#[warn(no_mangle_generic_items)]` on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:61:23\n+  --> $DIR/suggestions.rs:57:23\n    |\n LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use shorthand field pattern: `warp_factor`\n    |\n    = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:22:18\n+  --> $DIR/suggestions.rs:21:18\n    |\n LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n    |                  ---------^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:25:18\n+  --> $DIR/suggestions.rs:24:18\n    |\n LL |     #[no_mangle] pub fn val_jean<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: remove this attribute\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:30:18\n+  --> $DIR/suggestions.rs:29:18\n    |\n LL |     #[no_mangle] pub(crate) const VETAR: bool = true;\n    |                  ----------------^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:33:18\n+  --> $DIR/suggestions.rs:32:18\n    |\n LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "799bf7f3a12a8242d848dd6ac8f380953c16967b", "filename": "src/test/ui/mir/mir_assign_eval_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fmir%2Fmir_assign_eval_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fmir%2Fmir_assign_eval_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_assign_eval_order.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -12,7 +12,7 @@ fn evaluate_reborrow_before_assign() {\n     let y = &mut &2;\n     let z = &3;\n     // There's an implicit reborrow of `x` on the right-hand side of the\n-    // assignement. Note that writing an explicit reborrow would not show this\n+    // assignment. Note that writing an explicit reborrow would not show this\n     // bug, as now there would be two reborrows on the right-hand side and at\n     // least one of them would happen before the left-hand side is evaluated.\n     *{ x = z; &mut *y } = x;"}, {"sha": "ef03b67b1b0b19db03bec5b038bdc717c315cb8b", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-error[E0409]: variable `y` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `y` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/E0409.rs:5:23\n    |\n LL |         (0, ref y) | (y, 0) => {}"}, {"sha": "a111acca66fef1eb58ed02e496a9607c434e8e20", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-// Ths test case is exploring the space of how blocs with tail\n+// This test case is exploring the space of how blocks with tail\n // expressions and statements can be composed, trying to keep each\n // case on one line so that we can compare them via a vertical scan\n // with the human eye."}, {"sha": "fd5cb01ab42c51f3ab50a982f38874d593a3bc1d", "filename": "src/test/ui/or-patterns/inconsistent-modes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -5,22 +5,22 @@\n fn main() {\n     // One level:\n     let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~^ ERROR variable `a` is bound inconsistently\n     let Ok(ref mut a) | Err(a): Result<u8, &mut u8> = Ok(0);\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~^ ERROR variable `a` is bound inconsistently\n     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~^ ERROR variable `a` is bound inconsistently\n     //~| ERROR mismatched types\n     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n-    //~| ERROR variable `b` is bound in inconsistent ways\n+    //~^ ERROR variable `a` is bound inconsistently\n+    //~| ERROR variable `b` is bound inconsistently\n     //~| ERROR mismatched types\n \n     // Two levels:\n     let Ok(Ok(a) | Err(a)) | Err(ref a) = Err(0);\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n+    //~^ ERROR variable `a` is bound inconsistently\n \n     // Three levels:\n-    let Ok([ Ok((Ok(ref a) | Err(a),)) | Err(a) ]) | Err(a) = Err(&1);\n-    //~^ ERROR variable `a` is bound in inconsistent ways\n+    let Ok([Ok((Ok(ref a) | Err(a),)) | Err(a)]) | Err(a) = Err(&1);\n+    //~^ ERROR variable `a` is bound inconsistently\n }"}, {"sha": "c5dcef36e0580514d4971c09537e0e2f37921139", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,52 +1,52 @@\n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:7:25\n    |\n LL |     let Ok(a) | Err(ref a): Result<&u8, u8> = Ok(&0);\n    |            -            ^ bound in different ways\n    |            |\n    |            first binding\n \n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:9:29\n    |\n LL |     let Ok(ref mut a) | Err(a): Result<u8, &mut u8> = Ok(0);\n    |                    -        ^ bound in different ways\n    |                    |\n    |                    first binding\n \n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:11:33\n    |\n LL |     let Ok(ref a) | Err(ref mut a): Result<&u8, &mut u8> = Ok(&0);\n    |                - first binding  ^ bound in different ways\n \n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:14:39\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n    |                 - first binding       ^ bound in different ways\n \n-error[E0409]: variable `b` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `b` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:14:46\n    |\n LL |     let Ok((ref a, b)) | Err((ref mut a, ref b)) = Ok((0, &0));\n    |                    - first binding           ^ bound in different ways\n \n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/inconsistent-modes.rs:20:38\n    |\n LL |     let Ok(Ok(a) | Err(a)) | Err(ref a) = Err(0);\n    |                        -             ^ bound in different ways\n    |                        |\n    |                        first binding\n \n-error[E0409]: variable `a` is bound in inconsistent ways within the same match arm\n-  --> $DIR/inconsistent-modes.rs:24:34\n+error[E0409]: variable `a` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/inconsistent-modes.rs:24:33\n    |\n-LL |     let Ok([ Ok((Ok(ref a) | Err(a),)) | Err(a) ]) | Err(a) = Err(&1);\n-   |                         -        ^ bound in different ways\n-   |                         |\n-   |                         first binding\n+LL |     let Ok([Ok((Ok(ref a) | Err(a),)) | Err(a)]) | Err(a) = Err(&1);\n+   |                        -        ^ bound in different ways\n+   |                        |\n+   |                        first binding\n \n error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:11:25"}, {"sha": "6159acd5080f52db3ececb73979034928d75f41a", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -292,7 +292,7 @@ error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n    |                        |\n    |                        previous outer attribute\n    |\n@@ -302,7 +302,7 @@ error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n    |                        |\n    |                        previous outer attribute\n    |\n@@ -312,7 +312,7 @@ error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:84:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n    |                        |\n    |                        previous outer attribute\n    |\n@@ -322,7 +322,7 @@ error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:86:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n    |                        |\n    |                        previous outer attribute\n    |\n@@ -332,7 +332,7 @@ error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:88:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n-   |                        ------- ^^^^^^^^ not permitted following an outer attibute\n+   |                        ------- ^^^^^^^^ not permitted following an outer attribute\n    |                        |\n    |                        previous outer attribute\n    |"}, {"sha": "c1e9e7a427f89696d50a8f6b2a46166c7a9f908c", "filename": "src/test/ui/parser/inner-attr-after-doc-comment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -7,7 +7,7 @@ LL | |  */\n    | |___- previous doc comment\n LL | \n LL |   #![recursion_limit=\"100\"]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attibute\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n "}, {"sha": "e1bf2cca1c9635b5303b19a03a0b01c98abe5d05", "filename": "src/test/ui/parser/inner-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -5,7 +5,7 @@ LL | #[feature(lang_items)]\n    | ---------------------- previous outer attribute\n LL | \n LL | #![recursion_limit=\"100\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attibute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n "}, {"sha": "f1be5dc5ba7fad55b4e5c2a814e65c02ad984cb8", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,14 +1,8 @@\n error: unexpected closing delimiter: `}`\n   --> $DIR/mismatched-delim-brace-empty-block.rs:5:1\n    |\n-LL |   fn main() {\n-   |  ___________-\n-LL | |\n-LL | | }\n-   | |_- this block is empty, you might have not meant to close it\n-LL |       let _ = ();\n-LL |   }\n-   |   ^ unexpected closing delimiter\n+LL | }\n+   | ^ unexpected closing delimiter\n \n error: aborting due to previous error\n "}, {"sha": "43e9378b7d0ecd656f71eb763e8f162b0d080227", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,39 +1,40 @@\n enum Opts {\n-    A(isize), B(isize), C(isize)\n+    A(isize),\n+    B(isize),\n+    C(isize),\n }\n \n fn matcher1(x: Opts) {\n     match x {\n-      Opts::A(ref i) | Opts::B(i) => {}\n-      //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n-      //~^^ ERROR mismatched types\n-      Opts::C(_) => {}\n+        Opts::A(ref i) | Opts::B(i) => {}\n+        //~^ ERROR variable `i` is bound inconsistently\n+        //~^^ ERROR mismatched types\n+        Opts::C(_) => {}\n     }\n }\n \n fn matcher2(x: Opts) {\n     match x {\n-      Opts::A(ref i) | Opts::B(i) => {}\n-      //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n-      //~^^ ERROR mismatched types\n-      Opts::C(_) => {}\n+        Opts::A(ref i) | Opts::B(i) => {}\n+        //~^ ERROR variable `i` is bound inconsistently\n+        //~^^ ERROR mismatched types\n+        Opts::C(_) => {}\n     }\n }\n \n fn matcher4(x: Opts) {\n     match x {\n-      Opts::A(ref mut i) | Opts::B(ref i) => {}\n-      //~^ ERROR variable `i` is bound in inconsistent ways within the same match arm\n-      //~^^ ERROR mismatched types\n-      Opts::C(_) => {}\n+        Opts::A(ref mut i) | Opts::B(ref i) => {}\n+        //~^ ERROR variable `i` is bound inconsistently\n+        //~^^ ERROR mismatched types\n+        Opts::C(_) => {}\n     }\n }\n \n-\n fn matcher5(x: Opts) {\n     match x {\n-      Opts::A(ref i) | Opts::B(ref i) => {}\n-      Opts::C(_) => {}\n+        Opts::A(ref i) | Opts::B(ref i) => {}\n+        Opts::C(_) => {}\n     }\n }\n "}, {"sha": "c14dfa3601a8c0bf9d8919e74611bb4dd2c3ae61", "filename": "src/test/ui/resolve/resolve-inconsistent-binding-mode.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-binding-mode.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,58 +1,58 @@\n-error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:7:32\n+error[E0409]: variable `i` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:9:34\n    |\n-LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                   -            ^ bound in different ways\n-   |                   |\n-   |                   first binding\n+LL |         Opts::A(ref i) | Opts::B(i) => {}\n+   |                     -            ^ bound in different ways\n+   |                     |\n+   |                     first binding\n \n-error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:16:32\n+error[E0409]: variable `i` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:18:34\n    |\n-LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |                   -            ^ bound in different ways\n-   |                   |\n-   |                   first binding\n+LL |         Opts::A(ref i) | Opts::B(i) => {}\n+   |                     -            ^ bound in different ways\n+   |                     |\n+   |                     first binding\n \n-error[E0409]: variable `i` is bound in inconsistent ways within the same match arm\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:25:40\n+error[E0409]: variable `i` is bound inconsistently across alternatives separated by `|`\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:27:42\n    |\n-LL |       Opts::A(ref mut i) | Opts::B(ref i) => {}\n-   |                       - first binding  ^ bound in different ways\n+LL |         Opts::A(ref mut i) | Opts::B(ref i) => {}\n+   |                         - first binding  ^ bound in different ways\n \n error[E0308]: mismatched types\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:7:32\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:9:34\n    |\n LL |     match x {\n    |           - this expression has type `Opts`\n-LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |               -----            ^ expected `&isize`, found `isize`\n-   |               |\n-   |               first introduced with type `&isize` here\n+LL |         Opts::A(ref i) | Opts::B(i) => {}\n+   |                 -----            ^ expected `&isize`, found `isize`\n+   |                 |\n+   |                 first introduced with type `&isize` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:16:32\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:18:34\n    |\n LL |     match x {\n    |           - this expression has type `Opts`\n-LL |       Opts::A(ref i) | Opts::B(i) => {}\n-   |               -----            ^ expected `&isize`, found `isize`\n-   |               |\n-   |               first introduced with type `&isize` here\n+LL |         Opts::A(ref i) | Opts::B(i) => {}\n+   |                 -----            ^ expected `&isize`, found `isize`\n+   |                 |\n+   |                 first introduced with type `&isize` here\n    |\n    = note: in the same arm, a binding must have the same type in all alternatives\n \n error[E0308]: mismatched types\n-  --> $DIR/resolve-inconsistent-binding-mode.rs:25:36\n+  --> $DIR/resolve-inconsistent-binding-mode.rs:27:38\n    |\n LL |     match x {\n    |           - this expression has type `Opts`\n-LL |       Opts::A(ref mut i) | Opts::B(ref i) => {}\n-   |               ---------            ^^^^^ types differ in mutability\n-   |               |\n-   |               first introduced with type `&mut isize` here\n+LL |         Opts::A(ref mut i) | Opts::B(ref i) => {}\n+   |                 ---------            ^^^^^ types differ in mutability\n+   |                 |\n+   |                 first introduced with type `&mut isize` here\n    |\n    = note: expected type `&mut isize`\n               found type `&isize`"}, {"sha": "b9202f556d12b63f64af42975e994977eb50034b", "filename": "src/test/ui/resolve/resolve-inconsistent-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -19,7 +19,7 @@ fn main() {\n         (A, B) | (ref B, c) | (c, A) => ()\n         //~^ ERROR variable `A` is not bound in all patterns\n         //~| ERROR variable `B` is not bound in all patterns\n-        //~| ERROR variable `B` is bound in inconsistent ways\n+        //~| ERROR variable `B` is bound inconsistently\n         //~| ERROR mismatched types\n         //~| ERROR variable `c` is not bound in all patterns\n         //~| HELP consider making the path in the pattern qualified: `?::A`"}, {"sha": "70e9c2e5bf598e5621378721dfa3a29e90e31d1d", "filename": "src/test/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -47,7 +47,7 @@ LL |         (A, B) | (ref B, c) | (c, A) => ()\n    |         |                variable not in all patterns\n    |         pattern doesn't bind `c`\n \n-error[E0409]: variable `B` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `B` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/resolve-inconsistent-names.rs:19:23\n    |\n LL |         (A, B) | (ref B, c) | (c, A) => ()"}, {"sha": "b4a0d8145c1d690b95b365e7880e64dc990794ab", "filename": "src/test/ui/rfc-2005-default-binding-mode/issue-44912-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -4,7 +4,7 @@ pub fn main() {\n     let x = &Some((3, 3));\n     let _: &i32 = match x {\n         Some((x, 3)) | &Some((ref x, 5)) => x,\n-        //~^ ERROR is bound in inconsistent ways\n+        //~^ ERROR is bound inconsistently\n         _ => &5i32,\n     };\n }"}, {"sha": "e1e1bf7f6d9711e264476ff2d65354e2dbd1c304", "filename": "src/test/ui/rfc-2005-default-binding-mode/issue-44912-or.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fissue-44912-or.stderr?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-error[E0409]: variable `x` is bound in inconsistent ways within the same match arm\n+error[E0409]: variable `x` is bound inconsistently across alternatives separated by `|`\n   --> $DIR/issue-44912-or.rs:6:35\n    |\n LL |         Some((x, 3)) | &Some((ref x, 5)) => x,"}, {"sha": "d0984bbe65fd58a745954e32cec4663988734dcd", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,6 +1,6 @@\n // Regression test for sanitizer function instrumentation passes not\n // being run when compiling with new LLVM pass manager and ThinLTO.\n-// Note: The issue occured only on non-zero opt-level.\n+// Note: The issue occurred only on non-zero opt-level.\n //\n // min-llvm-version 9.0\n // needs-sanitizer-support"}, {"sha": "af6d5010920173c815a265894666c9f27eec5d47", "filename": "src/test/ui/type-alias-impl-trait/issue-65918.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65918.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -6,7 +6,7 @@\n \n use std::marker::PhantomData;\n \n-/* copied Index and TryFrom for convinience (and simplicity) */\n+/* copied Index and TryFrom for convenience (and simplicity) */\n trait MyIndex<T> {\n     type O;\n     fn my_index(self) -> Self::O;"}, {"sha": "7da0b049264c298b610c3a29ed1809dff125bf0f", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // Regression test for issue #67844\n-// Ensures that we properly handle nested TAIT occurences\n+// Ensures that we properly handle nested TAIT occurrences\n // with generic parameters\n \n #![feature(type_alias_impl_trait)]"}, {"sha": "7bf151514c3dd35a997622abd879ad0b00e49a2e", "filename": "src/test/ui/typeck/issue-52082-type-param-shadows-existing-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-52082-type-param-shadows-existing-type.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-// Fix issue 52082: Confusing error if accidentially defining a type paramter with the same name as\n+// Fix issue 52082: Confusing error if accidentally defining a type parameter with the same name as\n // an existing type\n //\n // To this end, make sure that when trying to retrieve a field of a (reference to) type parameter,"}, {"sha": "34bf22034265cc12a69031040d35444f6da0e4b3", "filename": "src/test/ui/wf/wf-array-elem-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1,4 +1,4 @@\n-// Check that array elemen types must be Sized. Issue #25692.\n+// Check that array element types must be Sized. Issue #25692.\n \n \n #![allow(dead_code)]"}, {"sha": "8f685fb8559f5a7d834b5fbddc85f120e2431ed3", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -125,7 +125,7 @@ fn parse_expected(\n     let captures = RE.captures(line)?;\n \n     match (cfg, captures.name(\"cfgs\")) {\n-        // Only error messages that contain our `cfg` betweeen the square brackets apply to us.\n+        // Only error messages that contain our `cfg` between the square brackets apply to us.\n         (Some(cfg), Some(filter)) if !filter.as_str().split(',').any(|s| s == cfg) => return None,\n         (Some(_), Some(_)) => {}\n "}, {"sha": "424bac88c8531f1623858cf268440e451312134c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -1487,7 +1487,7 @@ impl<'test> TestCx<'test> {\n                 // can turn it back on if needed.\n                 if !self.is_rustdoc()\n                     // Note that we use the local pass mode here as we don't want\n-                    // to set unused to allow if we've overriden the pass mode\n+                    // to set unused to allow if we've overridden the pass mode\n                     // via command line flags.\n                     && local_pm != Some(PassMode::Run)\n                 {"}, {"sha": "349829d8725076b2dca6581fdb40e443e00a031f", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f943349eafaa75a60c05b0c84dcdb771d0eae8c9/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=f943349eafaa75a60c05b0c84dcdb771d0eae8c9", "patch": "@@ -41,7 +41,7 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"src/libpanic_unwind\",\n     \"src/libunwind\",\n     // black_box implementation is LLVM-version specific and it uses\n-    // target_os to tell targets with different LLVM-versions appart\n+    // target_os to tell targets with different LLVM-versions apart\n     // (e.g. `wasm32-unknown-emscripten` vs `wasm32-unknown-unknown`):\n     \"src/libcore/hint.rs\",\n     \"src/libstd/sys/\", // Platform-specific code for std lives here."}]}