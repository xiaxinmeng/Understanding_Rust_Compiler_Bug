{"sha": "df7d2be5629b7162426f8a3c6dbf005f228008fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2QyYmU1NjI5YjcxNjI0MjZmOGEzYzZkYmYwMDVmMjI4MDA4ZmU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-09-17T06:23:25Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-19T01:04:35Z"}, "message": "Move Indent and Shape to shape.rs from lib.rs", "tree": {"sha": "cdb7353ef2d0deaeee4919b182bcca6796176e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb7353ef2d0deaeee4919b182bcca6796176e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7d2be5629b7162426f8a3c6dbf005f228008fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7d2be5629b7162426f8a3c6dbf005f228008fe", "html_url": "https://github.com/rust-lang/rust/commit/df7d2be5629b7162426f8a3c6dbf005f228008fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7d2be5629b7162426f8a3c6dbf005f228008fe/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8974f89381cffd73c35b0cb91eb4e49a66f93d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8974f89381cffd73c35b0cb91eb4e49a66f93d5c", "html_url": "https://github.com/rust-lang/rust/commit/8974f89381cffd73c35b0cb91eb4e49a66f93d5c"}], "stats": {"total": 730, "additions": 372, "deletions": 358}, "files": [{"sha": "23c311b95897e2e2144c45bdc4f044ce71234f87", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -76,7 +76,7 @@\n ///     .qux\n /// ```\n \n-use Shape;\n+use shape::Shape;\n use config::IndentStyle;\n use expr::rewrite_call;\n use macros::convert_try_mac;"}, {"sha": "f74684e58625d9f90769297dc69accf15e4ba155", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -14,9 +14,9 @@ use std::{self, iter};\n \n use syntax::codemap::Span;\n \n-use {Indent, Shape};\n use config::Config;\n use rewrite::RewriteContext;\n+use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n use utils::{first_line_width, last_line_width};\n \n@@ -928,7 +928,7 @@ fn remove_comment_header(comment: &str) -> &str {\n mod test {\n     use super::{contains_comment, rewrite_comment, CharClasses, CodeCharKind, CommentCodeSlices,\n                 FindUncommented, FullCodeCharKind};\n-    use {Indent, Shape};\n+    use shape::{Indent, Shape};\n \n     #[test]\n     fn char_classes() {"}, {"sha": "91e63d256bd8bf20fcadbe0144cc43b3076e896c", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -17,7 +17,7 @@ use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, CodeMap, Span};\n use syntax::parse::classify;\n \n-use {Indent, Shape, Spanned};\n+use Spanned;\n use chains::rewrite_chain;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n@@ -30,6 +30,7 @@ use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_format\n use macros::{rewrite_macro, MacroArg, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,"}, {"sha": "aa778341f2a2a194fd12dea79a68ed3eadb7c345", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -13,13 +13,14 @@ use std::cmp::Ordering;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use {Shape, Spanned};\n+use Spanned;\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n use types::{rewrite_path, PathContext};\n use utils::{format_visibility, mk_sp};\n use visitor::{rewrite_extern_crate, FmtVisitor};"}, {"sha": "4fcd0d8b494a7587de05e3b54a1f9e323b1e3733", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -16,7 +16,7 @@ use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::ImplItem;\n use syntax::codemap::{BytePos, Span};\n \n-use {Indent, Shape, Spanned};\n+use Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n@@ -26,6 +26,7 @@ use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::{Indent, Shape};\n use types::join_bounds;\n use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n             format_constness, format_defaultness, format_mutability, format_unsafety,"}, {"sha": "2e95966694f8ff603557156a8424e13137f18e78", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 340, "changes": 341, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -29,7 +29,6 @@ use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n use std::iter::repeat;\n-use std::ops::{Add, Sub};\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n \n@@ -52,6 +51,7 @@ pub use self::summary::Summary;\n \n #[macro_use]\n mod utils;\n+mod shape;\n pub mod config;\n pub mod codemap;\n pub mod filemap;\n@@ -239,260 +239,6 @@ impl Spanned for MacroArg {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct Indent {\n-    // Width of the block indent, in characters. Must be a multiple of\n-    // Config::tab_spaces.\n-    pub block_indent: usize,\n-    // Alignment in characters.\n-    pub alignment: usize,\n-}\n-\n-// INDENT_BUFFER.len() == 60\n-const INDENT_BUFFER: &str = \"                                                            \";\n-const INDENT_BUFFER_LEN: usize = 60;\n-\n-impl Indent {\n-    pub fn new(block_indent: usize, alignment: usize) -> Indent {\n-        Indent {\n-            block_indent: block_indent,\n-            alignment: alignment,\n-        }\n-    }\n-\n-    pub fn from_width(config: &Config, width: usize) -> Indent {\n-        if config.hard_tabs() {\n-            let tab_num = width / config.tab_spaces();\n-            let alignment = width % config.tab_spaces();\n-            Indent::new(config.tab_spaces() * tab_num, alignment)\n-        } else {\n-            Indent::new(width, 0)\n-        }\n-    }\n-\n-    pub fn empty() -> Indent {\n-        Indent::new(0, 0)\n-    }\n-\n-    pub fn block_only(&self) -> Indent {\n-        Indent {\n-            block_indent: self.block_indent,\n-            alignment: 0,\n-        }\n-    }\n-\n-    pub fn block_indent(mut self, config: &Config) -> Indent {\n-        self.block_indent += config.tab_spaces();\n-        self\n-    }\n-\n-    pub fn block_unindent(mut self, config: &Config) -> Indent {\n-        if self.block_indent < config.tab_spaces() {\n-            Indent::new(self.block_indent, 0)\n-        } else {\n-            self.block_indent -= config.tab_spaces();\n-            self\n-        }\n-    }\n-\n-    pub fn width(&self) -> usize {\n-        self.block_indent + self.alignment\n-    }\n-\n-    pub fn to_string(&self, config: &Config) -> Cow<'static, str> {\n-        let (num_tabs, num_spaces) = if config.hard_tabs() {\n-            (self.block_indent / config.tab_spaces(), self.alignment)\n-        } else {\n-            (0, self.width())\n-        };\n-        let num_chars = num_tabs + num_spaces;\n-        if num_tabs == 0 && num_chars <= INDENT_BUFFER_LEN {\n-            Cow::from(&INDENT_BUFFER[..num_chars])\n-        } else {\n-            let mut indent = String::with_capacity(num_chars);\n-            for _ in 0..num_tabs {\n-                indent.push('\\t')\n-            }\n-            for _ in 0..num_spaces {\n-                indent.push(' ')\n-            }\n-            Cow::from(indent)\n-        }\n-    }\n-}\n-\n-impl Add for Indent {\n-    type Output = Indent;\n-\n-    fn add(self, rhs: Indent) -> Indent {\n-        Indent {\n-            block_indent: self.block_indent + rhs.block_indent,\n-            alignment: self.alignment + rhs.alignment,\n-        }\n-    }\n-}\n-\n-impl Sub for Indent {\n-    type Output = Indent;\n-\n-    fn sub(self, rhs: Indent) -> Indent {\n-        Indent::new(\n-            self.block_indent - rhs.block_indent,\n-            self.alignment - rhs.alignment,\n-        )\n-    }\n-}\n-\n-impl Add<usize> for Indent {\n-    type Output = Indent;\n-\n-    fn add(self, rhs: usize) -> Indent {\n-        Indent::new(self.block_indent, self.alignment + rhs)\n-    }\n-}\n-\n-impl Sub<usize> for Indent {\n-    type Output = Indent;\n-\n-    fn sub(self, rhs: usize) -> Indent {\n-        Indent::new(self.block_indent, self.alignment - rhs)\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub struct Shape {\n-    pub width: usize,\n-    // The current indentation of code.\n-    pub indent: Indent,\n-    // Indentation + any already emitted text on the first line of the current\n-    // statement.\n-    pub offset: usize,\n-}\n-\n-impl Shape {\n-    /// `indent` is the indentation of the first line. The next lines\n-    /// should begin with at least `indent` spaces (except backwards\n-    /// indentation). The first line should not begin with indentation.\n-    /// `width` is the maximum number of characters on the last line\n-    /// (excluding `indent`). The width of other lines is not limited by\n-    /// `width`.\n-    /// Note that in reality, we sometimes use width for lines other than the\n-    /// last (i.e., we are conservative).\n-    // .......*-------*\n-    //        |       |\n-    //        |     *-*\n-    //        *-----|\n-    // |<------------>|  max width\n-    // |<---->|          indent\n-    //        |<--->|    width\n-    pub fn legacy(width: usize, indent: Indent) -> Shape {\n-        Shape {\n-            width: width,\n-            indent: indent,\n-            offset: indent.alignment,\n-        }\n-    }\n-\n-    pub fn indented(indent: Indent, config: &Config) -> Shape {\n-        Shape {\n-            width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n-            indent: indent,\n-            offset: indent.alignment,\n-        }\n-    }\n-\n-    pub fn with_max_width(&self, config: &Config) -> Shape {\n-        Shape {\n-            width: config\n-                .max_width()\n-                .checked_sub(self.indent.width())\n-                .unwrap_or(0),\n-            ..*self\n-        }\n-    }\n-\n-    pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n-        Shape {\n-            width: width,\n-            indent: indent,\n-            offset: offset,\n-        }\n-    }\n-\n-    pub fn visual_indent(&self, extra_width: usize) -> Shape {\n-        let alignment = self.offset + extra_width;\n-        Shape {\n-            width: self.width,\n-            indent: Indent::new(self.indent.block_indent, alignment),\n-            offset: alignment,\n-        }\n-    }\n-\n-    pub fn block_indent(&self, extra_width: usize) -> Shape {\n-        if self.indent.alignment == 0 {\n-            Shape {\n-                width: self.width,\n-                indent: Indent::new(self.indent.block_indent + extra_width, 0),\n-                offset: 0,\n-            }\n-        } else {\n-            Shape {\n-                width: self.width,\n-                indent: self.indent + extra_width,\n-                offset: self.indent.alignment + extra_width,\n-            }\n-        }\n-    }\n-\n-    pub fn block_left(&self, width: usize) -> Option<Shape> {\n-        self.block_indent(width).sub_width(width)\n-    }\n-\n-    pub fn add_offset(&self, extra_width: usize) -> Shape {\n-        Shape {\n-            offset: self.offset + extra_width,\n-            ..*self\n-        }\n-    }\n-\n-    pub fn block(&self) -> Shape {\n-        Shape {\n-            indent: self.indent.block_only(),\n-            ..*self\n-        }\n-    }\n-\n-    pub fn sub_width(&self, width: usize) -> Option<Shape> {\n-        Some(Shape {\n-            width: try_opt!(self.width.checked_sub(width)),\n-            ..*self\n-        })\n-    }\n-\n-    pub fn shrink_left(&self, width: usize) -> Option<Shape> {\n-        Some(Shape {\n-            width: try_opt!(self.width.checked_sub(width)),\n-            indent: self.indent + width,\n-            offset: self.offset + width,\n-        })\n-    }\n-\n-    pub fn offset_left(&self, width: usize) -> Option<Shape> {\n-        self.add_offset(width).sub_width(width)\n-    }\n-\n-    pub fn used_width(&self) -> usize {\n-        self.indent.block_indent + self.offset\n-    }\n-\n-    pub fn rhs_overhead(&self, config: &Config) -> usize {\n-        config\n-            .max_width()\n-            .checked_sub(self.used_width() + self.width)\n-            .unwrap_or(0)\n-    }\n-}\n-\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     LineOverflow(usize, usize),\n@@ -1000,88 +746,3 @@ pub fn run(input: Input, config: &Config) -> Summary {\n         }\n     }\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use super::*;\n-\n-    #[test]\n-    fn indent_add_sub() {\n-        let indent = Indent::new(4, 8) + Indent::new(8, 12);\n-        assert_eq!(12, indent.block_indent);\n-        assert_eq!(20, indent.alignment);\n-\n-        let indent = indent - Indent::new(4, 4);\n-        assert_eq!(8, indent.block_indent);\n-        assert_eq!(16, indent.alignment);\n-    }\n-\n-    #[test]\n-    fn indent_add_sub_alignment() {\n-        let indent = Indent::new(4, 8) + 4;\n-        assert_eq!(4, indent.block_indent);\n-        assert_eq!(12, indent.alignment);\n-\n-        let indent = indent - 4;\n-        assert_eq!(4, indent.block_indent);\n-        assert_eq!(8, indent.alignment);\n-    }\n-\n-    #[test]\n-    fn indent_to_string_spaces() {\n-        let config = Config::default();\n-        let indent = Indent::new(4, 8);\n-\n-        // 12 spaces\n-        assert_eq!(\"            \", indent.to_string(&config));\n-    }\n-\n-    #[test]\n-    fn indent_to_string_hard_tabs() {\n-        let mut config = Config::default();\n-        config.set().hard_tabs(true);\n-        let indent = Indent::new(8, 4);\n-\n-        // 2 tabs + 4 spaces\n-        assert_eq!(\"\\t\\t    \", indent.to_string(&config));\n-    }\n-\n-    #[test]\n-    fn shape_visual_indent() {\n-        let config = Config::default();\n-        let indent = Indent::new(4, 8);\n-        let shape = Shape::legacy(config.max_width(), indent);\n-        let shape = shape.visual_indent(20);\n-\n-        assert_eq!(config.max_width(), shape.width);\n-        assert_eq!(4, shape.indent.block_indent);\n-        assert_eq!(28, shape.indent.alignment);\n-        assert_eq!(28, shape.offset);\n-    }\n-\n-    #[test]\n-    fn shape_block_indent_without_alignment() {\n-        let config = Config::default();\n-        let indent = Indent::new(4, 0);\n-        let shape = Shape::legacy(config.max_width(), indent);\n-        let shape = shape.block_indent(20);\n-\n-        assert_eq!(config.max_width(), shape.width);\n-        assert_eq!(24, shape.indent.block_indent);\n-        assert_eq!(0, shape.indent.alignment);\n-        assert_eq!(0, shape.offset);\n-    }\n-\n-    #[test]\n-    fn shape_block_indent_with_alignment() {\n-        let config = Config::default();\n-        let indent = Indent::new(4, 8);\n-        let shape = Shape::legacy(config.max_width(), indent);\n-        let shape = shape.block_indent(20);\n-\n-        assert_eq!(config.max_width(), shape.width);\n-        assert_eq!(4, shape.indent.block_indent);\n-        assert_eq!(28, shape.indent.alignment);\n-        assert_eq!(28, shape.offset);\n-    }\n-}"}, {"sha": "f42e3ffe977c60fe37b3513a11cc6a4e712ea57f", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -13,10 +13,10 @@ use std::iter::Peekable;\n \n use syntax::codemap::{BytePos, CodeMap};\n \n-use {Indent, Shape};\n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n+use shape::{Indent, Shape};\n use utils::{first_line_width, last_line_width, mk_sp};\n \n /// Formatting tactic for lists. This will be cast down to a"}, {"sha": "5b52567087ec311ab68d3ecc9f7bd3f184100b35", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -28,11 +28,11 @@ use syntax::symbol;\n use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n \n-use {Indent, Shape};\n use codemap::SpanUtils;\n use comment::{contains_comment, FindUncommented};\n use expr::{rewrite_array, rewrite_call_inner};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::{Indent, Shape};\n use utils::mk_sp;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];"}, {"sha": "9d20e6c6e55f6e35d7fb3b640fcfed784654e12d", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -10,10 +10,11 @@\n \n use std::borrow::Cow;\n \n-use {Indent, Shape};\n+use syntax::codemap::{BytePos, Pos, Span};\n+\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n-use syntax::codemap::{BytePos, Pos, Span};\n+use shape::{Indent, Shape};\n use utils::mk_sp;\n use visitor::FmtVisitor;\n "}, {"sha": "49c7556894f6540a0f02ca655dab8590180ebd44", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -12,14 +12,15 @@ use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd};\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n \n-use {Shape, Spanned};\n+use Spanned;\n use codemap::SpanUtils;\n use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n            wrap_struct_field};\n use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n             struct_lit_tactic, write_list, DefinitiveListTactic, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n use types::{rewrite_path, PathContext};\n use utils::{format_mutability, mk_sp, wrap_str};\n "}, {"sha": "e2be8ef086cd9cdecee0825afa4e659b780bbba0", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -13,8 +13,8 @@\n use syntax::codemap::{CodeMap, Span};\n use syntax::parse::ParseSess;\n \n-use Shape;\n use config::{Config, IndentStyle};\n+use shape::Shape;\n \n pub trait Rewrite {\n     /// Rewrite self into shape."}, {"sha": "63910c29707341c89084ed64233ec050c83b1322", "filename": "src/shape.rs", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -0,0 +1,344 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::{Add, Sub};\n+\n+use Config;\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Indent {\n+    // Width of the block indent, in characters. Must be a multiple of\n+    // Config::tab_spaces.\n+    pub block_indent: usize,\n+    // Alignment in characters.\n+    pub alignment: usize,\n+}\n+\n+impl Indent {\n+    pub fn new(block_indent: usize, alignment: usize) -> Indent {\n+        Indent {\n+            block_indent: block_indent,\n+            alignment: alignment,\n+        }\n+    }\n+\n+    pub fn from_width(config: &Config, width: usize) -> Indent {\n+        if config.hard_tabs() {\n+            let tab_num = width / config.tab_spaces();\n+            let alignment = width % config.tab_spaces();\n+            Indent::new(config.tab_spaces() * tab_num, alignment)\n+        } else {\n+            Indent::new(width, 0)\n+        }\n+    }\n+\n+    pub fn empty() -> Indent {\n+        Indent::new(0, 0)\n+    }\n+\n+    pub fn block_only(&self) -> Indent {\n+        Indent {\n+            block_indent: self.block_indent,\n+            alignment: 0,\n+        }\n+    }\n+\n+    pub fn block_indent(mut self, config: &Config) -> Indent {\n+        self.block_indent += config.tab_spaces();\n+        self\n+    }\n+\n+    pub fn block_unindent(mut self, config: &Config) -> Indent {\n+        if self.block_indent < config.tab_spaces() {\n+            Indent::new(self.block_indent, 0)\n+        } else {\n+            self.block_indent -= config.tab_spaces();\n+            self\n+        }\n+    }\n+\n+    pub fn width(&self) -> usize {\n+        self.block_indent + self.alignment\n+    }\n+\n+    pub fn to_string(&self, config: &Config) -> String {\n+        let (num_tabs, num_spaces) = if config.hard_tabs() {\n+            (self.block_indent / config.tab_spaces(), self.alignment)\n+        } else {\n+            (0, self.width())\n+        };\n+        let num_chars = num_tabs + num_spaces;\n+        let mut indent = String::with_capacity(num_chars);\n+        for _ in 0..num_tabs {\n+            indent.push('\\t')\n+        }\n+        for _ in 0..num_spaces {\n+            indent.push(' ')\n+        }\n+        indent\n+    }\n+}\n+\n+impl Add for Indent {\n+    type Output = Indent;\n+\n+    fn add(self, rhs: Indent) -> Indent {\n+        Indent {\n+            block_indent: self.block_indent + rhs.block_indent,\n+            alignment: self.alignment + rhs.alignment,\n+        }\n+    }\n+}\n+\n+impl Sub for Indent {\n+    type Output = Indent;\n+\n+    fn sub(self, rhs: Indent) -> Indent {\n+        Indent::new(\n+            self.block_indent - rhs.block_indent,\n+            self.alignment - rhs.alignment,\n+        )\n+    }\n+}\n+\n+impl Add<usize> for Indent {\n+    type Output = Indent;\n+\n+    fn add(self, rhs: usize) -> Indent {\n+        Indent::new(self.block_indent, self.alignment + rhs)\n+    }\n+}\n+\n+impl Sub<usize> for Indent {\n+    type Output = Indent;\n+\n+    fn sub(self, rhs: usize) -> Indent {\n+        Indent::new(self.block_indent, self.alignment - rhs)\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct Shape {\n+    pub width: usize,\n+    // The current indentation of code.\n+    pub indent: Indent,\n+    // Indentation + any already emitted text on the first line of the current\n+    // statement.\n+    pub offset: usize,\n+}\n+\n+impl Shape {\n+    /// `indent` is the indentation of the first line. The next lines\n+    /// should begin with at least `indent` spaces (except backwards\n+    /// indentation). The first line should not begin with indentation.\n+    /// `width` is the maximum number of characters on the last line\n+    /// (excluding `indent`). The width of other lines is not limited by\n+    /// `width`.\n+    /// Note that in reality, we sometimes use width for lines other than the\n+    /// last (i.e., we are conservative).\n+    // .......*-------*\n+    //        |       |\n+    //        |     *-*\n+    //        *-----|\n+    // |<------------>|  max width\n+    // |<---->|          indent\n+    //        |<--->|    width\n+    pub fn legacy(width: usize, indent: Indent) -> Shape {\n+        Shape {\n+            width: width,\n+            indent: indent,\n+            offset: indent.alignment,\n+        }\n+    }\n+\n+    pub fn indented(indent: Indent, config: &Config) -> Shape {\n+        Shape {\n+            width: config.max_width().checked_sub(indent.width()).unwrap_or(0),\n+            indent: indent,\n+            offset: indent.alignment,\n+        }\n+    }\n+\n+    pub fn with_max_width(&self, config: &Config) -> Shape {\n+        Shape {\n+            width: config\n+                .max_width()\n+                .checked_sub(self.indent.width())\n+                .unwrap_or(0),\n+            ..*self\n+        }\n+    }\n+\n+    pub fn offset(width: usize, indent: Indent, offset: usize) -> Shape {\n+        Shape {\n+            width: width,\n+            indent: indent,\n+            offset: offset,\n+        }\n+    }\n+\n+    pub fn visual_indent(&self, extra_width: usize) -> Shape {\n+        let alignment = self.offset + extra_width;\n+        Shape {\n+            width: self.width,\n+            indent: Indent::new(self.indent.block_indent, alignment),\n+            offset: alignment,\n+        }\n+    }\n+\n+    pub fn block_indent(&self, extra_width: usize) -> Shape {\n+        if self.indent.alignment == 0 {\n+            Shape {\n+                width: self.width,\n+                indent: Indent::new(self.indent.block_indent + extra_width, 0),\n+                offset: 0,\n+            }\n+        } else {\n+            Shape {\n+                width: self.width,\n+                indent: self.indent + extra_width,\n+                offset: self.indent.alignment + extra_width,\n+            }\n+        }\n+    }\n+\n+    pub fn block_left(&self, width: usize) -> Option<Shape> {\n+        self.block_indent(width).sub_width(width)\n+    }\n+\n+    pub fn add_offset(&self, extra_width: usize) -> Shape {\n+        Shape {\n+            offset: self.offset + extra_width,\n+            ..*self\n+        }\n+    }\n+\n+    pub fn block(&self) -> Shape {\n+        Shape {\n+            indent: self.indent.block_only(),\n+            ..*self\n+        }\n+    }\n+\n+    pub fn sub_width(&self, width: usize) -> Option<Shape> {\n+        Some(Shape {\n+            width: try_opt!(self.width.checked_sub(width)),\n+            ..*self\n+        })\n+    }\n+\n+    pub fn shrink_left(&self, width: usize) -> Option<Shape> {\n+        Some(Shape {\n+            width: try_opt!(self.width.checked_sub(width)),\n+            indent: self.indent + width,\n+            offset: self.offset + width,\n+        })\n+    }\n+\n+    pub fn offset_left(&self, width: usize) -> Option<Shape> {\n+        self.add_offset(width).sub_width(width)\n+    }\n+\n+    pub fn used_width(&self) -> usize {\n+        self.indent.block_indent + self.offset\n+    }\n+\n+    pub fn rhs_overhead(&self, config: &Config) -> usize {\n+        config\n+            .max_width()\n+            .checked_sub(self.used_width() + self.width)\n+            .unwrap_or(0)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn indent_add_sub() {\n+        let indent = Indent::new(4, 8) + Indent::new(8, 12);\n+        assert_eq!(12, indent.block_indent);\n+        assert_eq!(20, indent.alignment);\n+\n+        let indent = indent - Indent::new(4, 4);\n+        assert_eq!(8, indent.block_indent);\n+        assert_eq!(16, indent.alignment);\n+    }\n+\n+    #[test]\n+    fn indent_add_sub_alignment() {\n+        let indent = Indent::new(4, 8) + 4;\n+        assert_eq!(4, indent.block_indent);\n+        assert_eq!(12, indent.alignment);\n+\n+        let indent = indent - 4;\n+        assert_eq!(4, indent.block_indent);\n+        assert_eq!(8, indent.alignment);\n+    }\n+\n+    #[test]\n+    fn indent_to_string_spaces() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+\n+        // 12 spaces\n+        assert_eq!(\"            \", indent.to_string(&config));\n+    }\n+\n+    #[test]\n+    fn indent_to_string_hard_tabs() {\n+        let mut config = Config::default();\n+        config.set().hard_tabs(true);\n+        let indent = Indent::new(8, 4);\n+\n+        // 2 tabs + 4 spaces\n+        assert_eq!(\"\\t\\t    \", indent.to_string(&config));\n+    }\n+\n+    #[test]\n+    fn shape_visual_indent() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+        let shape = Shape::legacy(config.max_width(), indent);\n+        let shape = shape.visual_indent(20);\n+\n+        assert_eq!(config.max_width(), shape.width);\n+        assert_eq!(4, shape.indent.block_indent);\n+        assert_eq!(28, shape.indent.alignment);\n+        assert_eq!(28, shape.offset);\n+    }\n+\n+    #[test]\n+    fn shape_block_indent_without_alignment() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 0);\n+        let shape = Shape::legacy(config.max_width(), indent);\n+        let shape = shape.block_indent(20);\n+\n+        assert_eq!(config.max_width(), shape.width);\n+        assert_eq!(24, shape.indent.block_indent);\n+        assert_eq!(0, shape.indent.alignment);\n+        assert_eq!(0, shape.offset);\n+    }\n+\n+    #[test]\n+    fn shape_block_indent_with_alignment() {\n+        let config = Config::default();\n+        let indent = Indent::new(4, 8);\n+        let shape = Shape::legacy(config.max_width(), indent);\n+        let shape = shape.block_indent(20);\n+\n+        assert_eq!(config.max_width(), shape.width);\n+        assert_eq!(4, shape.indent.block_indent);\n+        assert_eq!(28, shape.indent.alignment);\n+        assert_eq!(28, shape.offset);\n+    }\n+}"}, {"sha": "8090926522dbd9022b72e467aac11bb93a6bab04", "filename": "src/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -13,8 +13,8 @@\n use regex::Regex;\n use unicode_segmentation::UnicodeSegmentation;\n \n-use Shape;\n use config::Config;\n+use shape::Shape;\n use utils::wrap_str;\n \n const MIN_STRING: usize = 10;\n@@ -128,6 +128,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n #[cfg(test)]\n mod test {\n     use super::{rewrite_string, StringFormat};\n+    use shape::{Indent, Shape};\n \n     #[test]\n     fn issue343() {\n@@ -137,7 +138,7 @@ mod test {\n             closer: \"\\\"\",\n             line_start: \" \",\n             line_end: \"\\\\\",\n-            shape: ::Shape::legacy(2, ::Indent::empty()),\n+            shape: Shape::legacy(2, Indent::empty()),\n             trim_end: false,\n             config: &config,\n         };"}, {"sha": "e6cf052d142b9313e72b39d96ce3ace5ad4bd2a2", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -17,14 +17,15 @@ use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n-use {Shape, Spanned};\n+use Spanned;\n use codemap::SpanUtils;\n use config::{IndentStyle, Style, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};\n use items::{format_generics_item_list, generics_shape_from_config};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n             SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]"}, {"sha": "3c97044f5c4b2fc34d5e73d738b6d86dc67cb1cc", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -15,8 +15,8 @@ use syntax::ast::{self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, Neste\n                   Path, Visibility};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n-use Shape;\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n \n // When we get scoped annotations, we should have rustfmt::skip.\n const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";"}, {"sha": "13de2e22e5d73a1c81dd280ac520586a56c46382", "filename": "src/vertical.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -15,14 +15,15 @@ use std::cmp;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use {Indent, Shape, Spanned};\n+use Spanned;\n use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n             SeparatorPlace};\n use rewrite::{Rewrite, RewriteContext};\n+use shape::{Indent, Shape};\n use utils::{contains_skip, is_attributes_extendable, mk_sp};\n \n pub trait AlignedItem {"}, {"sha": "fa9c8e3b537e75dd3ccde3802dbfbe7af4d88bca", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7d2be5629b7162426f8a3c6dbf005f228008fe/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=df7d2be5629b7162426f8a3c6dbf005f228008fe", "patch": "@@ -16,7 +16,7 @@ use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n-use {Indent, Shape, Spanned};\n+use Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, CommentCodeSlices,\n               FindUncommented};\n@@ -30,6 +30,7 @@ use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, Sepa\n use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n+use shape::{Indent, Shape};\n use utils::{self, contains_skip, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {"}]}