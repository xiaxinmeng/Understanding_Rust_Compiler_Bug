{"sha": "ea1a99900e3bbd1a4078634710a78fe4ad4da861", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMWE5OTkwMGUzYmJkMWE0MDc4NjM0NzEwYTc4ZmU0YWQ0ZGE4NjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-29T09:52:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-11T13:01:15Z"}, "message": "Remove unchecked_cast_to", "tree": {"sha": "2252e80e061b1a5bbacb97f42ddeb1f7673019dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2252e80e061b1a5bbacb97f42ddeb1f7673019dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1a99900e3bbd1a4078634710a78fe4ad4da861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1a99900e3bbd1a4078634710a78fe4ad4da861", "html_url": "https://github.com/rust-lang/rust/commit/ea1a99900e3bbd1a4078634710a78fe4ad4da861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1a99900e3bbd1a4078634710a78fe4ad4da861/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef617014259d26502fa430ad96be4bd50625741", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef617014259d26502fa430ad96be4bd50625741", "html_url": "https://github.com/rust-lang/rust/commit/3ef617014259d26502fa430ad96be4bd50625741"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "1d7605847891e3cb462751cd53f2e41e63444c92", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea1a99900e3bbd1a4078634710a78fe4ad4da861/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1a99900e3bbd1a4078634710a78fe4ad4da861/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ea1a99900e3bbd1a4078634710a78fe4ad4da861", "patch": "@@ -485,7 +485,7 @@ fn trans_stmt<'tcx>(\n                 | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, to_ty) => {\n                     let to_layout = fx.layout_of(fx.monomorphize(to_ty));\n                     let operand = trans_operand(fx, operand);\n-                    lval.write_cvalue(fx, operand.unchecked_cast_to(to_layout));\n+                    lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n                     let operand = trans_operand(fx, operand);\n@@ -509,7 +509,7 @@ fn trans_stmt<'tcx>(\n                     if is_fat_ptr(fx, from_ty) {\n                         if is_fat_ptr(fx, to_ty) {\n                             // fat-ptr -> fat-ptr\n-                            lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n+                            lval.write_cvalue(fx, operand.cast_pointer_to(dest_layout));\n                         } else {\n                             // fat-ptr -> thin-ptr\n                             let (ptr, _extra) = operand.load_scalar_pair(fx);"}, {"sha": "ae89af880e5574fc6cf1caec68738a42749c70be", "filename": "src/value_and_place.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ea1a99900e3bbd1a4078634710a78fe4ad4da861/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1a99900e3bbd1a4078634710a78fe4ad4da861/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=ea1a99900e3bbd1a4078634710a78fe4ad4da861", "patch": "@@ -243,7 +243,10 @@ impl<'tcx> CValue<'tcx> {\n         CValue::by_val(val, layout)\n     }\n \n-    pub(crate) fn unchecked_cast_to(self, layout: TyAndLayout<'tcx>) -> Self {\n+    pub(crate) fn cast_pointer_to(self, layout: TyAndLayout<'tcx>) -> Self {\n+        assert!(matches!(self.layout().ty.kind, ty::Ref(..) | ty::RawPtr(..) | ty::FnPtr(..)));\n+        assert!(matches!(layout.ty.kind, ty::Ref(..) | ty::RawPtr(..) | ty::FnPtr(..)));\n+        assert_eq!(self.layout().abi, layout.abi);\n         CValue(self.0, layout)\n     }\n }\n@@ -560,20 +563,16 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub(crate) fn unchecked_cast_to(self, layout: TyAndLayout<'tcx>) -> Self {\n-        assert!(!self.layout().is_unsized());\n-        CPlace {\n-            inner: self.inner,\n-            layout,\n-        }\n-    }\n-\n     pub(crate) fn downcast_variant(\n         self,\n         fx: &FunctionCx<'_, 'tcx, impl Backend>,\n         variant: VariantIdx,\n     ) -> Self {\n+        assert!(!self.layout().is_unsized());\n         let layout = self.layout().for_variant(fx, variant);\n-        self.unchecked_cast_to(layout)\n+        CPlace {\n+            inner: self.inner,\n+            layout,\n+        }\n     }\n }"}]}