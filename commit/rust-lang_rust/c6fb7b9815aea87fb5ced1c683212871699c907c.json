{"sha": "c6fb7b9815aea87fb5ced1c683212871699c907c", "node_id": "C_kwDOAAsO6NoAKGM2ZmI3Yjk4MTVhZWE4N2ZiNWNlZDFjNjgzMjEyODcxNjk5YzkwN2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T00:07:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T00:07:06Z"}, "message": "Auto merge of #110375 - JohnTitor:rollup-ghvdaxm, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #110033 (Add 1.69.0 release notes)\n - #110272 (fix: skip implied bounds if unconstrained lifetime exists)\n - #110307 (Allow everyone to set the beta-nominated label)\n - #110347 (Add intra-doc links to size_of_* functions)\n - #110350 (Add a UI test for #79605)\n - #110356 (Fix `x test rust-installer` when `cargo` is set to a relative path)\n - #110364 (remove redundant clones)\n - #110366 (fix some clippy::complexity)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "524293a9a11da3bee727d8b5407827b2108d1a19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524293a9a11da3bee727d8b5407827b2108d1a19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6fb7b9815aea87fb5ced1c683212871699c907c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fb7b9815aea87fb5ced1c683212871699c907c", "html_url": "https://github.com/rust-lang/rust/commit/c6fb7b9815aea87fb5ced1c683212871699c907c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6fb7b9815aea87fb5ced1c683212871699c907c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b816f71f9055d6f162bec69c30b7574bb8e91a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b816f71f9055d6f162bec69c30b7574bb8e91a", "html_url": "https://github.com/rust-lang/rust/commit/50b816f71f9055d6f162bec69c30b7574bb8e91a"}, {"sha": "a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "html_url": "https://github.com/rust-lang/rust/commit/a8983749bd1b92359ca6d82f52bf026b0f9b8d71"}], "stats": {"total": 263, "additions": 220, "deletions": 43}, "files": [{"sha": "b89178a6f68fe511197999e834daf7461c06f9d6", "filename": "RELEASES.md", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -1,3 +1,105 @@\n+Version 1.69.0 (2023-04-20)\n+==========================\n+\n+<a id=\"1.69.0-Language\"></a>\n+\n+Language\n+--------\n+\n+- [Deriving built-in traits on packed structs works with `Copy` fields.](https://github.com/rust-lang/rust/pull/104429/)\n+- [Stabilize the `cmpxchg16b` target feature on x86 and x86_64.](https://github.com/rust-lang/rust/pull/106774/)\n+- [Improve analysis of trait bounds for associated types.](https://github.com/rust-lang/rust/pull/103695/)\n+- [Allow associated types to be used as union fields.](https://github.com/rust-lang/rust/pull/106938/)\n+- [Allow `Self: Autotrait` bounds on dyn-safe trait methods.](https://github.com/rust-lang/rust/pull/107082/)\n+- [Treat `str` as containing `[u8]` for auto trait purposes.](https://github.com/rust-lang/rust/pull/107941/)\n+\n+<a id=\"1.69.0-Compiler\"></a>\n+\n+Compiler\n+--------\n+\n+- [Upgrade `*-pc-windows-gnu` on CI to mingw-w64 v10 and GCC 12.2.](https://github.com/rust-lang/rust/pull/100178/)\n+- [Rework min_choice algorithm of member constraints.](https://github.com/rust-lang/rust/pull/105300/)\n+- [Support `true` and `false` as boolean flags in compiler arguments.](https://github.com/rust-lang/rust/pull/107043/)\n+- [Default `repr(C)` enums to `c_int` size.](https://github.com/rust-lang/rust/pull/107592/)\n+\n+<a id=\"1.69.0-Libraries\"></a>\n+\n+Libraries\n+---------\n+\n+- [Implement the unstable `DispatchFromDyn` for cell types, allowing downstream experimentation with custom method receivers.](https://github.com/rust-lang/rust/pull/97373/)\n+- [Document that `fmt::Arguments::as_str()` may return `Some(_)` in more cases after optimization, subject to change.](https://github.com/rust-lang/rust/pull/106823/)\n+- [Implement `AsFd` and `AsRawFd` for `Rc`.](https://github.com/rust-lang/rust/pull/107317/)\n+\n+<a id=\"1.69.0-Stabilized-APIs\"></a>\n+\n+Stabilized APIs\n+---------------\n+\n+- [`CStr::from_bytes_until_nul`](https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul)\n+- [`core::ffi::FromBytesUntilNulError`](https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesUntilNulError.html)\n+\n+These APIs are now stable in const contexts:\n+\n+- [`SocketAddr::new`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.new)\n+- [`SocketAddr::ip`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.ip)\n+- [`SocketAddr::port`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.port)\n+- [`SocketAddr::is_ipv4`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv4)\n+- [`SocketAddr::is_ipv6`](https://doc.rust-lang.org/stable/std/net/enum.SocketAddr.html#method.is_ipv6)\n+- [`SocketAddrV4::new`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.new)\n+- [`SocketAddrV4::ip`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.ip)\n+- [`SocketAddrV4::port`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV4.html#method.port)\n+- [`SocketAddrV6::new`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.new)\n+- [`SocketAddrV6::ip`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.ip)\n+- [`SocketAddrV6::port`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.port)\n+- [`SocketAddrV6::flowinfo`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.flowinfo)\n+- [`SocketAddrV6::scope_id`](https://doc.rust-lang.org/stable/std/net/struct.SocketAddrV6.html#method.scope_id)\n+\n+<a id=\"1.69.0-Cargo\"></a>\n+\n+Cargo\n+-----\n+\n+- [Cargo now suggests `cargo fix` or `cargo clippy --fix` when compilation warnings are auto-fixable.](https://github.com/rust-lang/cargo/pull/11558/)\n+- [Cargo now suggests `cargo add` if you try to install a library crate.](https://github.com/rust-lang/cargo/pull/11410/)\n+- [Cargo now sets the `CARGO_BIN_NAME` environment variable also for binary examples.](https://github.com/rust-lang/cargo/pull/11705/)\n+\n+<a id=\"1.69.0-Rustdoc\"></a>\n+\n+Rustdoc\n+-----\n+\n+- [Vertically compact trait bound formatting.](https://github.com/rust-lang/rust/pull/102842/)\n+- [Only include stable lints in `rustdoc::all` group.](https://github.com/rust-lang/rust/pull/106316/)\n+- [Compute maximum Levenshtein distance based on the query.](https://github.com/rust-lang/rust/pull/107141/)\n+- [Remove inconsistently-present sidebar tooltips.](https://github.com/rust-lang/rust/pull/107490/)\n+- [Search by macro when query ends with `!`.](https://github.com/rust-lang/rust/pull/108143/)\n+\n+<a id=\"1.69.0-Compatibility-Notes\"></a>\n+\n+Compatibility Notes\n+-------------------\n+\n+- [The `rust-analysis` component from `rustup` now only contains a warning placeholder.](https://github.com/rust-lang/rust/pull/101841/) This was primarily intended for RLS, and the corresponding `-Zsave-analysis` flag has been removed from the compiler as well.\n+- [Unaligned references to packed fields are now a hard error.](https://github.com/rust-lang/rust/pull/102513/) This has been a warning since 1.53, and denied by default with a future-compatibility warning since 1.62.\n+- [Update the minimum external LLVM to 14.](https://github.com/rust-lang/rust/pull/107573/)\n+- [Cargo now emits errors on invalid characters in a registry token.](https://github.com/rust-lang/cargo/pull/11600/)\n+- [When `default-features` is set to false of a workspace dependency, and an inherited dependency of a member has `default-features = true`, Cargo will enable default features of that dependency.](https://github.com/rust-lang/cargo/pull/11409/)\n+- [Cargo denies `CARGO_HOME` in the `[env]` configuration table. Cargo itself doesn't pick up this value, but recursive calls to cargo would, which was not intended.](https://github.com/rust-lang/cargo/pull/11644/)\n+- [Debuginfo for build dependencies is now off if not explicitly set. This is expected to improve the overall build time.](https://github.com/rust-lang/cargo/pull/11252/)\n+\n+<a id=\"1.69.0-Internal-Changes\"></a>\n+\n+Internal Changes\n+----------------\n+\n+These changes do not affect any public interfaces of Rust, but they represent\n+significant improvements to the performance or internals of rustc and related\n+tools.\n+\n+- [Move `format_args!()` into AST (and expand it during AST lowering)](https://github.com/rust-lang/rust/pull/106745/)\n+\n Version 1.68.2 (2023-03-28)\n ===========================\n "}, {"sha": "70d0a101b4ed908d14dece8ceddb11b8029535a4", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -528,7 +528,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n     where\n         F: Fn() -> RegionCtxt,\n     {\n-        let next_region = self.infcx.next_nll_region_var(origin.clone());\n+        let next_region = self.infcx.next_nll_region_var(origin);\n         let vid = next_region.as_var();\n \n         if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {"}, {"sha": "8c414521b7653322205b25b966b89e124acd7bef", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -645,9 +645,8 @@ pub(super) fn implied_predicates_with_filter(\n     };\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let implied_bounds = &*tcx\n-        .arena\n-        .alloc_from_iter(superbounds.predicates().into_iter().chain(where_bounds_that_match));\n+    let implied_bounds =\n+        &*tcx.arena.alloc_from_iter(superbounds.predicates().chain(where_bounds_that_match));\n     debug!(?implied_bounds);\n \n     // Now require that immediate supertraits are converted,"}, {"sha": "c3e5f9cb745fcbaba80600d03746e1ed1f972d80", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -164,24 +164,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     for param in\n                         [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                            .into_iter()\n+                            .flatten()\n                     {\n-                        if let Some(param) = param {\n-                            let refined_expr = self.point_at_field_if_possible(\n-                                def_id,\n-                                param,\n-                                variant_def_id,\n-                                fields,\n-                            );\n-\n-                            match refined_expr {\n-                                None => {}\n-                                Some((refined_expr, _)) => {\n-                                    error.obligation.cause.span = refined_expr\n-                                        .span\n-                                        .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n-                                        .unwrap_or(refined_expr.span);\n-                                    return true;\n-                                }\n+                        let refined_expr =\n+                            self.point_at_field_if_possible(def_id, param, variant_def_id, fields);\n+\n+                        match refined_expr {\n+                            None => {}\n+                            Some((refined_expr, _)) => {\n+                                error.obligation.cause.span = refined_expr\n+                                    .span\n+                                    .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n+                                    .unwrap_or(refined_expr.span);\n+                                return true;\n                             }\n                         }\n                     }"}, {"sha": "769e12f77bf2daeca3565096eb313da00b993798", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n         }\n \n         PreInliningPartitioning {\n-            codegen_units: codegen_units.into_values().map(|codegen_unit| codegen_unit).collect(),\n+            codegen_units: codegen_units.into_values().collect(),\n             roots,\n             internalization_candidates,\n         }"}, {"sha": "c14c7f2fa0dcc18c142d886d9e2dc658a90f1954", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -570,15 +570,13 @@ impl<'a> Parser<'a> {\n         let expect = tokens_to_string(&expected);\n         let actual = super::token_descr(&self.token);\n         let (msg_exp, (label_sp, label_exp)) = if expected.len() > 1 {\n+            let fmt = format!(\"expected one of {expect}, found {actual}\");\n             let short_expect = if expected.len() > 6 {\n                 format!(\"{} possible tokens\", expected.len())\n             } else {\n-                expect.clone()\n+                expect\n             };\n-            (\n-                format!(\"expected one of {expect}, found {actual}\"),\n-                (self.prev_token.span.shrink_to_hi(), format!(\"expected one of {short_expect}\")),\n-            )\n+            (fmt, (self.prev_token.span.shrink_to_hi(), format!(\"expected one of {short_expect}\")))\n         } else if expected.is_empty() {\n             (\n                 format!(\"unexpected token: {actual}\"),"}, {"sha": "579a789244bd6136c74b409f547e1925276710d1", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -231,7 +231,7 @@ pub(crate) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             // locked while doing so. Instead we copy out the\n             // `(query_key, dep_node_index)` pairs and release the lock again.\n             let mut query_keys_and_indices = Vec::new();\n-            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((k.clone(), i)));\n+            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((*k, i)));\n \n             // Now actually allocate the strings. If allocating the strings\n             // generates new entries in the query cache, we'll miss them but"}, {"sha": "cef982fcb41efccce73719676f8c52ecf898d665", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -2944,22 +2944,25 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             rustc_transmute::Answer::No(reason) => {\n                 let dst = trait_ref.skip_binder().substs.type_at(0);\n                 let src = trait_ref.skip_binder().substs.type_at(1);\n-                let custom_err_msg = format!(\"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\").to_string();\n+                let custom_err_msg = format!(\n+                    \"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\"\n+                );\n                 let reason_msg = match reason {\n                     rustc_transmute::Reason::SrcIsUnspecified => {\n-                        format!(\"`{src}` does not have a well-specified layout\").to_string()\n+                        format!(\"`{src}` does not have a well-specified layout\")\n                     }\n+\n                     rustc_transmute::Reason::DstIsUnspecified => {\n-                        format!(\"`{dst}` does not have a well-specified layout\").to_string()\n+                        format!(\"`{dst}` does not have a well-specified layout\")\n                     }\n+\n                     rustc_transmute::Reason::DstIsBitIncompatible => {\n                         format!(\"At least one value of `{src}` isn't a bit-valid value of `{dst}`\")\n-                            .to_string()\n                     }\n+\n                     rustc_transmute::Reason::DstIsPrivate => format!(\n                         \"`{dst}` is or contains a type or field that is not visible in that scope\"\n-                    )\n-                    .to_string(),\n+                    ),\n                     // FIXME(bryangarza): Include the number of bytes of src and dst\n                     rustc_transmute::Reason::DstIsTooBig => {\n                         format!(\"The size of `{src}` is smaller than the size of `{dst}`\")"}, {"sha": "e01a57ea4fee8443ce63cac34d81f1e723837c15", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -55,7 +55,18 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n     ) -> Vec<OutlivesBound<'tcx>> {\n         let ty = self.resolve_vars_if_possible(ty);\n         let ty = OpportunisticRegionResolver::new(self).fold_ty(ty);\n-        assert!(!ty.needs_infer());\n+\n+        // We do not expect existential variables in implied bounds.\n+        // We may however encounter unconstrained lifetime variables in invalid\n+        // code. See #110161 for context.\n+        assert!(!ty.has_non_region_infer());\n+        if ty.needs_infer() {\n+            self.tcx.sess.delay_span_bug(\n+                self.tcx.def_span(body_id),\n+                \"skipped implied_outlives_bounds due to unconstrained lifetimes\",\n+            );\n+            return vec![];\n+        }\n \n         let span = self.tcx.def_span(body_id);\n         let result = param_env"}, {"sha": "30ec73cabf8492b1d17986b716aa2f4223d234b6", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -170,7 +170,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// The following table gives the size for primitives.\n ///\n-/// Type | size_of::\\<Type>()\n+/// Type | `size_of::<Type>()`\n /// ---- | ---------------\n /// () | 0\n /// bool | 1\n@@ -190,8 +190,8 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// Furthermore, `usize` and `isize` have the same size.\n ///\n-/// The types `*const T`, `&T`, `Box<T>`, `Option<&T>`, and `Option<Box<T>>` all have\n-/// the same size. If `T` is Sized, all of those types have the same size as `usize`.\n+/// The types [`*const T`], `&T`, [`Box<T>`], [`Option<&T>`], and `Option<Box<T>>` all have\n+/// the same size. If `T` is `Sized`, all of those types have the same size as `usize`.\n ///\n /// The mutability of a pointer does not change its size. As such, `&T` and `&mut T`\n /// have the same size. Likewise for `*const T` and `*mut T`.\n@@ -203,7 +203,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// ## Size of Structs\n ///\n-/// For `structs`, the size is determined by the following algorithm.\n+/// For `struct`s, the size is determined by the following algorithm.\n ///\n /// For each field in the struct ordered by declaration order:\n ///\n@@ -299,6 +299,10 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n /// ```\n ///\n /// [alignment]: align_of\n+/// [`*const T`]: primitive@pointer\n+/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n+/// [`Option<&T>`]: crate::option::Option\n+///\n #[inline(always)]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -311,7 +315,7 @@ pub const fn size_of<T>() -> usize {\n \n /// Returns the size of the pointed-to value in bytes.\n ///\n-/// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n+/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val` can be used to get the dynamically-known size.\n ///\n@@ -328,6 +332,8 @@ pub const fn size_of<T>() -> usize {\n /// let y: &[u8] = &x;\n /// assert_eq!(13, mem::size_of_val(y));\n /// ```\n+///\n+/// [`size_of::<T>()`]: size_of\n #[inline]\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -340,7 +346,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n \n /// Returns the size of the pointed-to value in bytes.\n ///\n-/// This is usually the same as `size_of::<T>()`. However, when `T` *has* no\n+/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n /// then `size_of_val_raw` can be used to get the dynamically-known size.\n ///\n@@ -363,6 +369,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///       [`size_of_val`] on a reference to a type with an extern type tail.\n ///     - otherwise, it is conservatively not allowed to call this function.\n ///\n+/// [`size_of::<T>()`]: size_of\n /// [trait object]: ../../book/ch17-02-trait-objects.html\n /// [extern type]: ../../unstable-book/language-features/extern-types.html\n ///"}, {"sha": "ca6dcaf495743e5aafae78f86e3bbbeb3a1adee3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -1009,7 +1009,9 @@ impl Config {\n         });\n         config.initial_cargo = build\n             .cargo\n-            .map(PathBuf::from)\n+            .map(|cargo| {\n+                t!(PathBuf::from(cargo).canonicalize(), \"`initial_cargo` not found on disk\")\n+            })\n             .unwrap_or_else(|| config.out.join(config.build.triple).join(\"stage0/bin/cargo\"));\n \n         // NOTE: it's important this comes *after* we set `initial_rustc` just above."}, {"sha": "a835bd2de3b1452be89b72e801555b2f47423d64", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -1349,7 +1349,7 @@ impl LinkCollector<'_, '_> {\n                         if has_derive_trait_collision {\n                             candidates.macro_ns = None;\n                         }\n-                        candidates.into_iter().filter_map(|res| res).flatten().collect::<Vec<_>>()\n+                        candidates.into_iter().flatten().flatten().collect::<Vec<_>>()\n                     }\n                 }\n             }"}, {"sha": "6f4c31e57a3745e985e9c4576f1a9813e9071f95", "filename": "tests/ui/generics/issue-79605.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fgenerics%2Fissue-79605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fgenerics%2Fissue-79605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-79605.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -0,0 +1,6 @@\n+struct X<'a, T>(&'a T);\n+\n+impl X<'_, _> {}\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for implementations\n+\n+fn main() {}"}, {"sha": "c5584962dc9e2d311b308915f6d90902ca52df3c", "filename": "tests/ui/generics/issue-79605.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fgenerics%2Fissue-79605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fgenerics%2Fissue-79605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-79605.stderr?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -0,0 +1,14 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for implementations\n+  --> $DIR/issue-79605.rs:3:12\n+   |\n+LL | impl X<'_, _> {}\n+   |            ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | impl<T> X<'_, T> {}\n+   |     +++       ~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "e52c8356b52b3171b9f2f8d7400852e96fc1ec69", "filename": "tests/ui/implied-bounds/issue-110161.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fimplied-bounds%2Fissue-110161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fimplied-bounds%2Fissue-110161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplied-bounds%2Fissue-110161.rs?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -0,0 +1,26 @@\n+// ICE regression relating to unconstrained lifetimes in implied\n+// bounds. See #110161.\n+\n+// compile-flags: --crate-type=lib\n+\n+trait LtTrait {\n+    type Ty;\n+}\n+\n+// erroneous `Ty` impl\n+impl LtTrait for () {\n+//~^ ERROR not all trait items implemented, missing: `Ty` [E0046]\n+}\n+\n+// `'lt` is not constrained by the erroneous `Ty`\n+impl<'lt, T> LtTrait for Box<T>\n+where\n+    T: LtTrait<Ty = &'lt ()>,\n+{\n+    type Ty = &'lt ();\n+}\n+\n+// unconstrained lifetime appears in implied bounds\n+fn test(_: <Box<()> as LtTrait>::Ty) {}\n+\n+fn test2<'x>(_: &'x <Box<()> as LtTrait>::Ty) {}"}, {"sha": "9e0188694ed9c2790c8c546cff944404c14f6270", "filename": "tests/ui/implied-bounds/issue-110161.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fimplied-bounds%2Fissue-110161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/tests%2Fui%2Fimplied-bounds%2Fissue-110161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplied-bounds%2Fissue-110161.stderr?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Ty`\n+  --> $DIR/issue-110161.rs:11:1\n+   |\n+LL |     type Ty;\n+   |     ------- `Ty` from trait\n+...\n+LL | impl LtTrait for () {\n+   | ^^^^^^^^^^^^^^^^^^^ missing `Ty` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "917acce901bda000aa7b305f32eb3a839528ac06", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6fb7b9815aea87fb5ced1c683212871699c907c/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6fb7b9815aea87fb5ced1c683212871699c907c/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=c6fb7b9815aea87fb5ced1c683212871699c907c", "patch": "@@ -11,6 +11,7 @@ allow-unauthenticated = [\n     \"S-*\",\n     \"T-*\",\n     \"WG-*\",\n+    \"beta-nominated\",\n     \"const-hack\",\n     \"llvm-main\",\n     \"needs-fcp\","}]}