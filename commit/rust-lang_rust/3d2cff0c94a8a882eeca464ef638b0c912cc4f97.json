{"sha": "3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMmNmZjBjOTRhOGE4ODJlZWNhNDY0ZWY2MzhiMGM5MTJjYzRmOTc=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T11:39:39Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T11:39:39Z"}, "message": "Added source hashes to FileMap\n\nWe can use these to perform lazy loading of source files belonging to\nexternal crates. That way we will be able to show the source code of\nexternal spans that have been translated.", "tree": {"sha": "de5b016f6dcc5e0f8f5a7573df7a8e100d0f9a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de5b016f6dcc5e0f8f5a7573df7a8e100d0f9a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk72xwACgkQfvyOxSJN\n6OyU6BAAkLwYf9/KqfwUKwWinCoN75U2cFauzaJe31Jf977qq2IMwPupUa7s8YMx\naU5ce6oJqDeAIWprw6Qjq6lFq/gwqfRY4qQWHAHfDykmwMBVXUbaPTEfSQzGbh+P\nD1oP6eWq8Vfkl6oEQ/Xv3DsROHp4wfTUs1FHPmOmiTjh4OVYmFGLUN0csFOMSjDv\nvnmTnwnMdb1KMcE+ZJTng4BIPfuB5km25xC0d1uXP+56QDpYdq6oQcoBilDryfHy\nnGYPSLlxT2cwBMCpv7NFRERKryPSSpXAwWRCSVFQD/eW7IXqhdqeMoZ7iDrJkcOU\nc2UsqH+dl/Do5O65iE20l07UyS0lj7+Si5WUmw5NTh67IuU5MYb3523etCMM81dp\nMmh6KawbZmfHMpEGyyGqE7mDtr7fi9BzU/zFuoNTRPoXO9DHgNwGEz9Bi02FCu8Q\n0CBY1CjOWwKJ9a6Fw6sSz3BZNdTD47cFsyfGrihtGyjLbRiiqEY1B+6WRRo2Uhg1\n/kDOCuNj+QesoySKq53CDu+8bmLx7F5ONl8RL5xYzMcbjaijjXrwFWzlenqqzt0Z\ny3iotpYJzDLEIpzWoJitrigpk4ihyAedy7CsSeLTDl3MoqXvLQU8aehCi29G9jVo\nPb6+oU1tLPqJJRLLUEW8M3wu/cd8ZdllHV9RpnZiumtWylEfMGY=\n=+am+\n-----END PGP SIGNATURE-----", "payload": "tree de5b016f6dcc5e0f8f5a7573df7a8e100d0f9a96\nparent 70fa1fbea7786425471b0d43aae320920fd4e917\nauthor Inokentiy Babushkin <twk@twki.de> 1497094779 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1497094779 +0200\n\nAdded source hashes to FileMap\n\nWe can use these to perform lazy loading of source files belonging to\nexternal crates. That way we will be able to show the source code of\nexternal spans that have been translated.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "html_url": "https://github.com/rust-lang/rust/commit/3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fa1fbea7786425471b0d43aae320920fd4e917", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fa1fbea7786425471b0d43aae320920fd4e917", "html_url": "https://github.com/rust-lang/rust/commit/70fa1fbea7786425471b0d43aae320920fd4e917"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "cba5ca148d0e617b6881966997589590e1a005c5", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for FileMa\n             crate_of_origin,\n             // Do not hash the source as it is not encoded\n             src: _,\n+            src_hash,\n             start_pos,\n             end_pos: _,\n             ref lines,\n@@ -350,6 +351,8 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for FileMa\n             index: CRATE_DEF_INDEX,\n         }.hash_stable(hcx, hasher);\n \n+        src_hash.hash_stable(hcx, hasher);\n+\n         // We only hash the relative position within this filemap\n         let lines = lines.borrow();\n         lines.len().hash_stable(hcx, hasher);"}, {"sha": "cd50fc4d5276f63836070f4e835b24df2e6b8ee3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "patch": "@@ -1148,6 +1148,7 @@ impl<'a, 'tcx> CrateMetadata {\n             // containing the information we need.\n             let syntax_pos::FileMap { name,\n                                       name_was_remapped,\n+                                      src_hash,\n                                       start_pos,\n                                       end_pos,\n                                       lines,\n@@ -1173,6 +1174,7 @@ impl<'a, 'tcx> CrateMetadata {\n             let local_version = local_codemap.new_imported_filemap(name,\n                                                                    name_was_remapped,\n                                                                    self.cnum.as_u32(),\n+                                                                   src_hash,\n                                                                    source_length,\n                                                                    lines,\n                                                                    multibyte_chars);"}, {"sha": "0935ec1b01c97c558ec94c674e00c8f23fc24da3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "patch": "@@ -27,9 +27,12 @@ use std::rc::Rc;\n \n use std::env;\n use std::fs;\n+use std::hash::Hasher;\n use std::io::{self, Read};\n use errors::CodeMapper;\n \n+use rustc_data_structures::stable_hasher::StableHasher;\n+\n /// Return the span itself if it doesn't come from a macro expansion,\n /// otherwise return the call site span up to the `enclosing_sp` by\n /// following the `expn_info` chain.\n@@ -171,11 +174,16 @@ impl CodeMap {\n \n         let (filename, was_remapped) = self.path_mapping.map_prefix(filename);\n \n+        let mut hasher: StableHasher<u128> = StableHasher::new();\n+        hasher.write(src.as_bytes());\n+        let src_hash = hasher.finish();\n+\n         let filemap = Rc::new(FileMap {\n             name: filename,\n             name_was_remapped: was_remapped,\n             crate_of_origin: 0,\n             src: Some(Rc::new(src)),\n+            src_hash: src_hash,\n             start_pos: Pos::from_usize(start_pos),\n             end_pos: Pos::from_usize(end_pos),\n             lines: RefCell::new(Vec::new()),\n@@ -210,6 +218,7 @@ impl CodeMap {\n                                 filename: FileName,\n                                 name_was_remapped: bool,\n                                 crate_of_origin: u32,\n+                                src_hash: u128,\n                                 source_len: usize,\n                                 mut file_local_lines: Vec<BytePos>,\n                                 mut file_local_multibyte_chars: Vec<MultiByteChar>)\n@@ -233,6 +242,7 @@ impl CodeMap {\n             name_was_remapped: name_was_remapped,\n             crate_of_origin: crate_of_origin,\n             src: None,\n+            src_hash: src_hash,\n             start_pos: start_pos,\n             end_pos: end_pos,\n             lines: RefCell::new(file_local_lines),"}, {"sha": "caea14971816241e47be616266498233416b489f", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2cff0c94a8a882eeca464ef638b0c912cc4f97/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "patch": "@@ -24,6 +24,7 @@\n \n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(i128_type)]\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n #![feature(specialization)]\n@@ -36,7 +37,6 @@ use std::cell::{Cell, RefCell};\n use std::ops::{Add, Sub};\n use std::rc::Rc;\n use std::cmp;\n-\n use std::fmt;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -382,6 +382,8 @@ pub struct FileMap {\n     pub crate_of_origin: u32,\n     /// The complete source code\n     pub src: Option<Rc<String>>,\n+    /// The source code's hash\n+    pub src_hash: u128,\n     /// The start position of this source in the CodeMap\n     pub start_pos: BytePos,\n     /// The end position of this source in the CodeMap\n@@ -394,9 +396,10 @@ pub struct FileMap {\n \n impl Encodable for FileMap {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_struct(\"FileMap\", 6, |s| {\n+        s.emit_struct(\"FileMap\", 7, |s| {\n             s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n             s.emit_struct_field(\"name_was_remapped\", 1, |s| self.name_was_remapped.encode(s))?;\n+            s.emit_struct_field(\"src_hash\", 6, |s| self.src_hash.encode(s))?;\n             s.emit_struct_field(\"start_pos\", 2, |s| self.start_pos.encode(s))?;\n             s.emit_struct_field(\"end_pos\", 3, |s| self.end_pos.encode(s))?;\n             s.emit_struct_field(\"lines\", 4, |s| {\n@@ -459,7 +462,10 @@ impl Decodable for FileMap {\n             let name: String = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n             let name_was_remapped: bool =\n                 d.read_struct_field(\"name_was_remapped\", 1, |d| Decodable::decode(d))?;\n-            let start_pos: BytePos = d.read_struct_field(\"start_pos\", 2, |d| Decodable::decode(d))?;\n+            let src_hash: u128 =\n+                d.read_struct_field(\"src_hash\", 6, |d| Decodable::decode(d))?;\n+            let start_pos: BytePos =\n+                d.read_struct_field(\"start_pos\", 2, |d| Decodable::decode(d))?;\n             let end_pos: BytePos = d.read_struct_field(\"end_pos\", 3, |d| Decodable::decode(d))?;\n             let lines: Vec<BytePos> = d.read_struct_field(\"lines\", 4, |d| {\n                 let num_lines: u32 = Decodable::decode(d)?;\n@@ -501,6 +507,7 @@ impl Decodable for FileMap {\n                 start_pos: start_pos,\n                 end_pos: end_pos,\n                 src: None,\n+                src_hash: src_hash,\n                 lines: RefCell::new(lines),\n                 multibyte_chars: RefCell::new(multibyte_chars)\n             })"}]}