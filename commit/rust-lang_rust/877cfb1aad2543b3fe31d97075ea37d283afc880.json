{"sha": "877cfb1aad2543b3fe31d97075ea37d283afc880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2NmYjFhYWQyNTQzYjNmZTMxZDk3MDc1ZWEzN2QyODNhZmM4ODA=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2021-05-31T12:23:44Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2021-06-03T22:21:43Z"}, "message": "Warn against boxed DST in `improper_ctypes_definitions` lint", "tree": {"sha": "8309720eb7393af634577d804bb46c72efb76f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8309720eb7393af634577d804bb46c72efb76f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877cfb1aad2543b3fe31d97075ea37d283afc880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877cfb1aad2543b3fe31d97075ea37d283afc880", "html_url": "https://github.com/rust-lang/rust/commit/877cfb1aad2543b3fe31d97075ea37d283afc880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877cfb1aad2543b3fe31d97075ea37d283afc880/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257782579915963c9dbe7433102275743837b9a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/257782579915963c9dbe7433102275743837b9a8", "html_url": "https://github.com/rust-lang/rust/commit/257782579915963c9dbe7433102275743837b9a8"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "5d2256100ff67c9f9afdd386b78bae78338d8835", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/877cfb1aad2543b3fe31d97075ea37d283afc880/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877cfb1aad2543b3fe31d97075ea37d283afc880/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=877cfb1aad2543b3fe31d97075ea37d283afc880", "patch": "@@ -909,11 +909,18 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n \n         match *ty.kind() {\n-            ty::Adt(def, _) if def.is_box() && matches!(self.mode, CItemKind::Definition) => {\n-                FfiSafe\n-            }\n-\n             ty::Adt(def, substs) => {\n+                if def.is_box() && matches!(self.mode, CItemKind::Definition) {\n+                    if ty.boxed_ty().is_sized(tcx.at(DUMMY_SP), self.cx.param_env) {\n+                        return FfiSafe;\n+                    } else {\n+                        return FfiUnsafe {\n+                            ty,\n+                            reason: format!(\"box cannot be represented as a single pointer\"),\n+                            help: None,\n+                        };\n+                    }\n+                }\n                 if def.is_phantom_data() {\n                     return FfiPhantom(ty);\n                 }"}, {"sha": "c18cb881032a6d6dfa09ac7f50566d3ba7d022ff", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/877cfb1aad2543b3fe31d97075ea37d283afc880/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877cfb1aad2543b3fe31d97075ea37d283afc880/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=877cfb1aad2543b3fe31d97075ea37d283afc880", "patch": "@@ -8,6 +8,8 @@ extern crate libc;\n use std::default::Default;\n use std::marker::PhantomData;\n \n+trait Trait {}\n+\n trait Mirror { type It: ?Sized; }\n \n impl<T: ?Sized> Mirror for T { type It = Self; }\n@@ -74,6 +76,15 @@ pub extern \"C\" fn box_type(p: Box<u32>) { }\n \n pub extern \"C\" fn opt_box_type(p: Option<Box<u32>>) { }\n \n+pub extern \"C\" fn boxed_slice(p: Box<[u8]>) { }\n+//~^ ERROR: uses type `Box<[u8]>`\n+\n+pub extern \"C\" fn boxed_string(p: Box<str>) { }\n+//~^ ERROR: uses type `Box<str>`\n+\n+pub extern \"C\" fn boxed_trait(p: Box<dyn Trait>) { }\n+//~^ ERROR: uses type `Box<dyn Trait>`\n+\n pub extern \"C\" fn char_type(p: char) { }\n //~^ ERROR uses type `char`\n "}, {"sha": "d591d4ad292dd51fc972812052f9411ada5f7e77", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/877cfb1aad2543b3fe31d97075ea37d283afc880/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/877cfb1aad2543b3fe31d97075ea37d283afc880/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=877cfb1aad2543b3fe31d97075ea37d283afc880", "patch": "@@ -1,5 +1,5 @@\n error: `extern` fn uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:67:33\n+  --> $DIR/lint-ctypes-fn.rs:69:33\n    |\n LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n    |                                 ^^^^^^ not FFI-safe\n@@ -13,16 +13,40 @@ LL | #![deny(improper_ctypes_definitions)]\n    = note: slices have no C equivalent\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:70:31\n+  --> $DIR/lint-ctypes-fn.rs:72:31\n    |\n LL | pub extern \"C\" fn str_type(p: &str) { }\n    |                               ^^^^ not FFI-safe\n    |\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n+error: `extern` fn uses type `Box<[u8]>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:79:34\n+   |\n+LL | pub extern \"C\" fn boxed_slice(p: Box<[u8]>) { }\n+   |                                  ^^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n+error: `extern` fn uses type `Box<str>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:82:35\n+   |\n+LL | pub extern \"C\" fn boxed_string(p: Box<str>) { }\n+   |                                   ^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n+error: `extern` fn uses type `Box<dyn Trait>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:85:34\n+   |\n+LL | pub extern \"C\" fn boxed_trait(p: Box<dyn Trait>) { }\n+   |                                  ^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: box cannot be represented as a single pointer\n+\n error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:77:32\n+  --> $DIR/lint-ctypes-fn.rs:88:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n    |                                ^^^^ not FFI-safe\n@@ -31,23 +55,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = note: the `char` type has no C equivalent\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:80:32\n+  --> $DIR/lint-ctypes-fn.rs:91:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:83:32\n+  --> $DIR/lint-ctypes-fn.rs:94:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:86:33\n+  --> $DIR/lint-ctypes-fn.rs:97:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    |                                 ^^^^^^^^^^ not FFI-safe\n@@ -56,7 +80,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:89:34\n+  --> $DIR/lint-ctypes-fn.rs:100:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    |                                  ^^^^^^^ not FFI-safe\n@@ -65,42 +89,42 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:92:32\n+  --> $DIR/lint-ctypes-fn.rs:103:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n    |                                ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n    = note: this struct has no fields\n note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:26:1\n+  --> $DIR/lint-ctypes-fn.rs:28:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:95:40\n+  --> $DIR/lint-ctypes-fn.rs:106:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n-  --> $DIR/lint-ctypes-fn.rs:61:1\n+  --> $DIR/lint-ctypes-fn.rs:63:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:98:51\n+  --> $DIR/lint-ctypes-fn.rs:109:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:103:30\n+  --> $DIR/lint-ctypes-fn.rs:114:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    |                              ^^^^^^ not FFI-safe\n@@ -109,7 +133,7 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:106:31\n+  --> $DIR/lint-ctypes-fn.rs:117:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    |                               ^^^^ not FFI-safe\n@@ -118,15 +142,15 @@ LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:111:39\n+  --> $DIR/lint-ctypes-fn.rs:122:39\n    |\n LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n    |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:114:38\n+  --> $DIR/lint-ctypes-fn.rs:125:38\n    |\n LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    |                                      ^^^^^^^^^^^^^^ not FFI-safe\n@@ -135,15 +159,15 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = note: string slices have no C equivalent\n \n error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:160:43\n+  --> $DIR/lint-ctypes-fn.rs:171:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:173:39\n+  --> $DIR/lint-ctypes-fn.rs:184:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    |                                       ^^^^^^ not FFI-safe\n@@ -152,13 +176,13 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:176:41\n+  --> $DIR/lint-ctypes-fn.rs:187:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n    |                                         ^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 20 previous errors\n "}]}