{"sha": "d2c38aa6eb8d1cb5306f259a946bc0c1261e4382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzM4YWE2ZWI4ZDFjYjUzMDZmMjU5YTk0NmJjMGMxMjYxZTQzODI=", "commit": {"author": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-10T19:30:49Z"}, "committer": {"name": "Ben Gamari", "email": "bgamari.foss@gmail.com", "date": "2014-07-15T23:34:42Z"}, "message": "middle::typeck::collect: Add debug output for lifetimes", "tree": {"sha": "232b1d9e4bedb05adb2d3bd6903d4c54ba6a8ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232b1d9e4bedb05adb2d3bd6903d4c54ba6a8ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382", "html_url": "https://github.com/rust-lang/rust/commit/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382/comments", "author": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bgamari", "id": 1010174, "node_id": "MDQ6VXNlcjEwMTAxNzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1010174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgamari", "html_url": "https://github.com/bgamari", "followers_url": "https://api.github.com/users/bgamari/followers", "following_url": "https://api.github.com/users/bgamari/following{/other_user}", "gists_url": "https://api.github.com/users/bgamari/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgamari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgamari/subscriptions", "organizations_url": "https://api.github.com/users/bgamari/orgs", "repos_url": "https://api.github.com/users/bgamari/repos", "events_url": "https://api.github.com/users/bgamari/events{/privacy}", "received_events_url": "https://api.github.com/users/bgamari/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6867d91d20a77ad9be4288829cedec2a8c2b72ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6867d91d20a77ad9be4288829cedec2a8c2b72ba", "html_url": "https://github.com/rust-lang/rust/commit/6867d91d20a77ad9be4288829cedec2a8c2b72ba"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "7a39dd5b5ab82f1b28bd8afb0e04f77cc5340192", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c38aa6eb8d1cb5306f259a946bc0c1261e4382/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=d2c38aa6eb8d1cb5306f259a946bc0c1261e4382", "patch": "@@ -1018,16 +1018,17 @@ fn ty_generics(ccx: &CrateCtxt,\n     let mut result = base_generics;\n \n     for (i, l) in lifetimes.iter().enumerate() {\n-        result.regions.push(space,\n-                            ty::RegionParameterDef { name: l.name,\n-                                                     space: space,\n-                                                     index: i,\n-                                                     def_id: local_def(l.id) });\n+        let def = ty::RegionParameterDef { name: l.name,\n+                                           space: space,\n+                                           index: i,\n+                                           def_id: local_def(l.id) };\n+        debug!(\"ty_generics: def for region param: {}\", def);\n+        result.regions.push(space, def);\n     }\n \n     for (i, param) in types.iter().enumerate() {\n         let def = get_or_create_type_parameter_def(ccx, space, param, i);\n-        debug!(\"def for param: {}\", def.repr(ccx.tcx));\n+        debug!(\"ty_generics: def for type param: {}\", def.repr(ccx.tcx));\n         result.types.push(space, def);\n     }\n "}]}