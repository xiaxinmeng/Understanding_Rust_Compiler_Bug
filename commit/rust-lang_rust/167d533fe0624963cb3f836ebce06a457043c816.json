{"sha": "167d533fe0624963cb3f836ebce06a457043c816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2N2Q1MzNmZTA2MjQ5NjNjYjNmODM2ZWJjZTA2YTQ1NzA0M2M4MTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-06T15:09:07Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-07T13:31:24Z"}, "message": "extra::treemap: use the dummy-macro trick with items to make the\niterator macro properly hygiene.\n\nRequires less repetition of `mut` or not too.", "tree": {"sha": "6419b127c209d01a591eeb4d0af021ac49dd67e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6419b127c209d01a591eeb4d0af021ac49dd67e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167d533fe0624963cb3f836ebce06a457043c816", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167d533fe0624963cb3f836ebce06a457043c816", "html_url": "https://github.com/rust-lang/rust/commit/167d533fe0624963cb3f836ebce06a457043c816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167d533fe0624963cb3f836ebce06a457043c816/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e446af759e86e77a5f4a8e9bc6d6c22072b25ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e446af759e86e77a5f4a8e9bc6d6c22072b25ae", "html_url": "https://github.com/rust-lang/rust/commit/7e446af759e86e77a5f4a8e9bc6d6c22072b25ae"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "9fe419b06d2edb156638909359d09fec03ea0638", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/167d533fe0624963cb3f836ebce06a457043c816/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167d533fe0624963cb3f836ebce06a457043c816/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=167d533fe0624963cb3f836ebce06a457043c816", "patch": "@@ -327,14 +327,12 @@ pub struct TreeMapMutRevIterator<'a, K, V> {\n // other macros, so this takes the `& <mutability> <operand>` token\n // sequence and forces their evalutation as an expression.\n macro_rules! addr { ($e:expr) => { $e }}\n+// putting an optional mut into type signatures\n+macro_rules! item { ($i:item) => { $i }}\n \n macro_rules! define_iterator {\n     ($name:ident,\n      $rev_name:ident,\n-     // the type of the values of the treemap in the return value of\n-     // the iterator (i.e. &V or &mut V). This is non-hygienic in the\n-     // name of the lifetime.\n-     value_type = $value_type:ty,\n \n      // the function to go from &m Option<~TreeNode> to *m TreeNode\n      deref = $deref:ident,\n@@ -343,10 +341,11 @@ macro_rules! define_iterator {\n      // there's no support for 0-or-1 repeats.\n      addr_mut = $($addr_mut:tt)*\n      ) => {\n-        // private methods on the forward iterator\n-        impl<'a, K, V> $name<'a, K, V> {\n+        // private methods on the forward iterator (item!() for the\n+        // addr_mut in the next_ return value)\n+        item!(impl<'a, K, V> $name<'a, K, V> {\n             #[inline(always)]\n-            fn next_(&mut self, forward: bool) -> Option<(&'a K, $value_type)> {\n+            fn next_(&mut self, forward: bool) -> Option<(&'a K, &'a $($addr_mut)* V)> {\n                 while !self.stack.is_empty() || !self.node.is_null() {\n                     if !self.node.is_null() {\n                         let node = unsafe {addr!(& $($addr_mut)* *self.node)};\n@@ -412,41 +411,40 @@ macro_rules! define_iterator {\n                     self.node = ptr::RawPtr::null();\n                 }\n             }\n-        }\n+        })\n \n         // the forward Iterator impl.\n-        impl<'a, K, V> Iterator<(&'a K, $value_type)> for $name<'a, K, V> {\n+        item!(impl<'a, K, V> Iterator<(&'a K, &'a $($addr_mut)* V)> for $name<'a, K, V> {\n             /// Advance the iterator to the next node (in order) and return a\n             /// tuple with a reference to the key and value. If there are no\n             /// more nodes, return `None`.\n-            fn next(&mut self) -> Option<(&'a K, $value_type)> {\n+            fn next(&mut self) -> Option<(&'a K, &'a $($addr_mut)* V)> {\n                 self.next_(true)\n             }\n \n             #[inline]\n             fn size_hint(&self) -> (uint, Option<uint>) {\n                 (self.remaining_min, Some(self.remaining_max))\n             }\n-        }\n+        })\n \n         // the reverse Iterator impl.\n-        impl<'a, K, V> Iterator<(&'a K, $value_type)> for $rev_name<'a, K, V> {\n-            fn next(&mut self) -> Option<(&'a K, $value_type)> {\n+        item!(impl<'a, K, V> Iterator<(&'a K, &'a $($addr_mut)* V)> for $rev_name<'a, K, V> {\n+            fn next(&mut self) -> Option<(&'a K, &'a $($addr_mut)* V)> {\n                 self.iter.next_(false)\n             }\n \n             #[inline]\n             fn size_hint(&self) -> (uint, Option<uint>) {\n                 self.iter.size_hint()\n             }\n-        }\n+        })\n     }\n } // end of define_iterator\n \n define_iterator! {\n     TreeMapIterator,\n     TreeMapRevIterator,\n-    value_type = &'a V,\n     deref = deref,\n \n     // immutable, so no mut\n@@ -455,7 +453,6 @@ define_iterator! {\n define_iterator! {\n     TreeMapMutIterator,\n     TreeMapMutRevIterator,\n-    value_type = &'a mut V,\n     deref = mut_deref,\n \n     addr_mut = mut"}]}