{"sha": "b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YWE3ZTMxMDVhNzZkMWRjYjBjNGQwZTQ3NTY1NzA1NmEzODg1YzU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-08T17:48:42Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-09-09T13:14:17Z"}, "message": "Manually crafted revert of d4ad050ce5778a09566f6f9ec172565815d54604 .", "tree": {"sha": "88fc9d7714cc48cff76bb82a089aa9e5c997ccbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fc9d7714cc48cff76bb82a089aa9e5c997ccbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "html_url": "https://github.com/rust-lang/rust/commit/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38ec9ca34c501b2a618178a14fe2a3c9979ddc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38ec9ca34c501b2a618178a14fe2a3c9979ddc9", "html_url": "https://github.com/rust-lang/rust/commit/f38ec9ca34c501b2a618178a14fe2a3c9979ddc9"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "07f721d2d840a47182ace568b0a3e2c256e67941", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6aa7e3105a76d1dcb0c4d0e475657056a3885c5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b6aa7e3105a76d1dcb0c4d0e475657056a3885c5", "patch": "@@ -193,19 +193,13 @@ impl<'a> AstValidator<'a> {\n                     }\n                 }\n             }\n-            TyKind::AnonymousStruct(ref fields, ..) | TyKind::AnonymousUnion(ref fields, ..) => {\n-                self.with_banned_assoc_ty_bound(|this| {\n-                    walk_list!(this, visit_struct_field_def, fields)\n-                });\n-            }\n             _ => visit::walk_ty(self, t),\n         }\n     }\n \n     fn visit_struct_field_def(&mut self, field: &'a FieldDef) {\n         if let Some(ident) = field.ident {\n             if ident.name == kw::Underscore {\n-                self.check_anonymous_field(field);\n                 self.visit_vis(&field.vis);\n                 self.visit_ident(ident);\n                 self.visit_ty_common(&field.ty);\n@@ -251,66 +245,6 @@ impl<'a> AstValidator<'a> {\n         err.emit();\n     }\n \n-    fn check_anonymous_field(&self, field: &FieldDef) {\n-        let FieldDef { ty, .. } = field;\n-        match &ty.kind {\n-            TyKind::AnonymousStruct(..) | TyKind::AnonymousUnion(..) => {\n-                // We already checked for `kw::Underscore` before calling this function,\n-                // so skip the check\n-            }\n-            TyKind::Path(..) => {\n-                // If the anonymous field contains a Path as type, we can't determine\n-                // if the path is a valid struct or union, so skip the check\n-            }\n-            _ => {\n-                let msg = \"unnamed fields can only have struct or union types\";\n-                let label = \"not a struct or union\";\n-                self.err_handler()\n-                    .struct_span_err(field.span, msg)\n-                    .span_label(ty.span, label)\n-                    .emit();\n-            }\n-        }\n-    }\n-\n-    fn deny_anonymous_struct(&self, ty: &Ty) {\n-        match &ty.kind {\n-            TyKind::AnonymousStruct(..) => {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        ty.span,\n-                        \"anonymous structs are not allowed outside of unnamed struct or union fields\",\n-                    )\n-                    .span_label(ty.span, \"anonymous struct declared here\")\n-                    .emit();\n-            }\n-            TyKind::AnonymousUnion(..) => {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        ty.span,\n-                        \"anonymous unions are not allowed outside of unnamed struct or union fields\",\n-                    )\n-                    .span_label(ty.span, \"anonymous union declared here\")\n-                    .emit();\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn deny_anonymous_field(&self, field: &FieldDef) {\n-        if let Some(ident) = field.ident {\n-            if ident.name == kw::Underscore {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        field.span,\n-                        \"anonymous fields are not allowed outside of structs or unions\",\n-                    )\n-                    .span_label(ident.span, \"anonymous field declared here\")\n-                    .emit()\n-            }\n-        }\n-    }\n-\n     fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n         for Param { pat, .. } in &decl.inputs {\n             match pat.kind {\n@@ -1067,7 +1001,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_ty(&mut self, ty: &'a Ty) {\n         self.visit_ty_common(ty);\n-        self.deny_anonymous_struct(ty);\n         self.walk_ty(ty)\n     }\n \n@@ -1082,7 +1015,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_field_def(&mut self, s: &'a FieldDef) {\n-        self.deny_anonymous_field(s);\n         visit::walk_field_def(self, s)\n     }\n "}]}