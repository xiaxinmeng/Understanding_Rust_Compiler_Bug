{"sha": "78210a5758e79e2d94aadd06b81bd45599c13daa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjEwYTU3NThlNzllMmQ5NGFhZGQwNmI4MWJkNDU1OTljMTNkYWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-19T11:53:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-19T11:53:30Z"}, "message": "Use `drain` instead of manually rolling it ourselves (#731)\n\nUse `drain` instead of manually rolling it ourselves", "tree": {"sha": "2b9fc42f8e2f430a2876940ccad25e7c2e046d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9fc42f8e2f430a2876940ccad25e7c2e046d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78210a5758e79e2d94aadd06b81bd45599c13daa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4UO6CRBK7hj4Ov3rIwAAdHIIAAjHki8i1PBj8W/xKWp9GncQ\n8qdo6a45jbLc+AjqEsydPIoxs6LjqPIP9h7dnE/oLdJ4xtQQGUaFtFA2Ho3QflUM\nIkHeWzPmip507/ag0Z2UTIeZRtLmm5j8jMyiXJoEgVetCuKMqMoEep4XZcS3stAl\njeJhD3sZO332TaeXTpflspIG3mtroNMkES1c5QILS6fdUzznKCXWSjp1yWIc1BH4\n9RWvUU6DcSXRKhVtCBx07ZfUAeVyW5wqbX953e84R01Rp2QkT99RmDvJf1IjYWe7\nWqPwL2WWZUYSWvcNS1x1iJ9BsZks7TCRM/EAXqy16C8SWMm19F1OZjmVF8YkO1M=\n=GqeP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b9fc42f8e2f430a2876940ccad25e7c2e046d3f\nparent 37b2eea7144d022702f0d2eedcc4c776db15d078\nparent 3fde45233bbca880e8ed0dbcb33a107bd0c07d86\nauthor Ralf Jung <post@ralfj.de> 1558266810 +0200\ncommitter GitHub <noreply@github.com> 1558266810 +0200\n\nUse `drain` instead of manually rolling it ourselves (#731)\n\nUse `drain` instead of manually rolling it ourselves"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78210a5758e79e2d94aadd06b81bd45599c13daa", "html_url": "https://github.com/rust-lang/rust/commit/78210a5758e79e2d94aadd06b81bd45599c13daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78210a5758e79e2d94aadd06b81bd45599c13daa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b2eea7144d022702f0d2eedcc4c776db15d078", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b2eea7144d022702f0d2eedcc4c776db15d078", "html_url": "https://github.com/rust-lang/rust/commit/37b2eea7144d022702f0d2eedcc4c776db15d078"}, {"sha": "3fde45233bbca880e8ed0dbcb33a107bd0c07d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fde45233bbca880e8ed0dbcb33a107bd0c07d86", "html_url": "https://github.com/rust-lang/rust/commit/3fde45233bbca880e8ed0dbcb33a107bd0c07d86"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "e0ac6bf05a74339df451a4bb990e894b127d4bfe", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78210a5758e79e2d94aadd06b81bd45599c13daa/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78210a5758e79e2d94aadd06b81bd45599c13daa/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=78210a5758e79e2d94aadd06b81bd45599c13daa", "patch": "@@ -226,7 +226,7 @@ impl<'tcx> Stack {\n             )\n     }\n \n-    /// Find the first write-incompatible item above the given one -- \n+    /// Find the first write-incompatible item above the given one --\n     /// i.e, find the height to which the stack will be truncated when writing to `granting`.\n     fn find_first_write_incompaible(&self, granting: usize) -> usize {\n         let perm = self.borrows[granting].perm;\n@@ -297,8 +297,7 @@ impl<'tcx> Stack {\n             // Remove everything above the write-compatible items, like a proper stack. This makes sure read-only and unique\n             // pointers become invalid on write accesses (ensures F2a, and ensures U2 for write accesses).\n             let first_incompatible_idx = self.find_first_write_incompaible(granting_idx);\n-            while self.borrows.len() > first_incompatible_idx {\n-                let item = self.borrows.pop().unwrap();\n+            for item in self.borrows.drain(first_incompatible_idx..).rev() {\n                 trace!(\"access: popping item {}\", item);\n                 Stack::check_protector(&item, Some(tag), global)?;\n             }\n@@ -340,8 +339,7 @@ impl<'tcx> Stack {\n             )))?;\n \n         // Step 2: Remove all items.  Also checks for protectors.\n-        while self.borrows.len() > 0 {\n-            let item = self.borrows.pop().unwrap();\n+        for item in self.borrows.drain(..).rev() {\n             Stack::check_protector(&item, None, global)?;\n         }\n "}]}