{"sha": "d464422c0a15b88a7f5791652ce1f881959fcc44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjQ0MjJjMGExNWI4OGE3ZjU3OTE2NTJjZTFmODgxOTU5ZmNjNDQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-26T20:21:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-26T20:21:25Z"}, "message": "rustbuild: make backtraces (RUST_BACKTRACE) optional\n\nbut keep them enabled by default to maintain the status quo.\n\nWhen disabled shaves ~56KB off every x86_64-unknown-linux-gnu\nbinary.\n\nTo disable backtraces you have to use a config.toml (see\nsrc/bootstrap/config.toml.example for details) when building rustc/std:\n\n$ python bootstrap.py --config=config.toml", "tree": {"sha": "65917cfa4a177c3046fff8277cd3561f758acb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65917cfa4a177c3046fff8277cd3561f758acb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d464422c0a15b88a7f5791652ce1f881959fcc44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d464422c0a15b88a7f5791652ce1f881959fcc44", "html_url": "https://github.com/rust-lang/rust/commit/d464422c0a15b88a7f5791652ce1f881959fcc44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d464422c0a15b88a7f5791652ce1f881959fcc44/comments", "author": null, "committer": null, "parents": [{"sha": "9316ae515e2f8f3f497fb4f1559910c1eef2433d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "html_url": "https://github.com/rust-lang/rust/commit/9316ae515e2f8f3f497fb4f1559910c1eef2433d"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "aafbf68d1b7b60b712fac8ba7a6b091b2266c98d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -72,6 +72,7 @@ pub struct Config {\n     // libstd features\n     pub debug_jemalloc: bool,\n     pub use_jemalloc: bool,\n+    pub backtrace: bool, // support for RUST_BACKTRACE\n \n     // misc\n     pub channel: String,\n@@ -134,6 +135,7 @@ struct Rust {\n     debuginfo: Option<bool>,\n     debug_jemalloc: Option<bool>,\n     use_jemalloc: Option<bool>,\n+    backtrace: Option<bool>,\n     default_linker: Option<String>,\n     default_ar: Option<String>,\n     channel: Option<String>,\n@@ -158,6 +160,7 @@ impl Config {\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n         config.use_jemalloc = true;\n+        config.backtrace = true;\n         config.rust_optimize = true;\n         config.rust_optimize_tests = true;\n         config.submodules = true;\n@@ -230,6 +233,7 @@ impl Config {\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.debug_jemalloc, rust.debug_jemalloc);\n             set(&mut config.use_jemalloc, rust.use_jemalloc);\n+            set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel.clone());\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.rustc_default_ar = rust.default_ar.clone();"}, {"sha": "2894adafef622dab873f3595bd264aaac1cfb004", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -99,6 +99,9 @@\n # Whether or not jemalloc is built with its debug option set\n #debug-jemalloc = false\n \n+# Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n+#backtrace = true\n+\n # The default linker that will be used by the generated compiler. Note that this\n # is not the linker used to link said compiler.\n #default-linker = \"cc\""}, {"sha": "25356b86221c1975e4b59ee6d31901611852752c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -652,6 +652,9 @@ impl Build {\n         if self.config.use_jemalloc {\n             features.push_str(\" jemalloc\");\n         }\n+        if self.config.backtrace {\n+            features.push_str(\" backtrace\");\n+        }\n         return features\n     }\n "}, {"sha": "b442d21b72ba94d6a02acd48c91586700dbd127a", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -27,5 +27,6 @@ build_helper = { path = \"../build_helper\" }\n gcc = \"0.3\"\n \n [features]\n+backtrace = []\n jemalloc = [\"alloc_jemalloc\"]\n debug-jemalloc = [\"alloc_jemalloc/debug\"]"}, {"sha": "9018e48d06bd1a2da7b32bbad80b836643f00497", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -25,7 +25,8 @@ fn main() {\n \n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n-    if !target.contains(\"apple\") && !target.contains(\"msvc\") && !target.contains(\"emscripten\"){\n+    if cfg!(feature = \"backtrace\") && !target.contains(\"apple\") && !target.contains(\"msvc\") &&\n+        !target.contains(\"emscripten\") {\n         build_libbacktrace(&host, &target);\n     }\n "}, {"sha": "319fbdaac55dbe83fd1447e2938ab90964845401", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -28,8 +28,10 @@ use intrinsics;\n use mem;\n use raw;\n use sys_common::rwlock::RWLock;\n+#[cfg(feature = \"backtrace\")]\n use sync::atomic::{AtomicBool, Ordering};\n use sys::stdio::Stderr;\n+#[cfg(feature = \"backtrace\")]\n use sys_common::backtrace;\n use sys_common::thread_info;\n use sys_common::util;\n@@ -71,6 +73,7 @@ enum Hook {\n \n static HOOK_LOCK: RWLock = RWLock::new();\n static mut HOOK: Hook = Hook::Default;\n+#[cfg(feature = \"backtrace\")]\n static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n /// Registers a custom panic hook, replacing any that was previously registered.\n@@ -183,10 +186,12 @@ impl<'a> Location<'a> {\n }\n \n fn default_hook(info: &PanicInfo) {\n+    #[cfg(feature = \"backtrace\")]\n     let panics = PANIC_COUNT.with(|c| c.get());\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n+    #[cfg(feature = \"backtrace\")]\n     let log_backtrace = panics >= 2 || backtrace::log_enabled();\n \n     let file = info.location.file;\n@@ -207,10 +212,13 @@ fn default_hook(info: &PanicInfo) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n \n-        if log_backtrace {\n-            let _ = backtrace::write(err);\n-        } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n-            let _ = writeln!(err, \"note: Run with `RUST_BACKTRACE=1` for a backtrace.\");\n+        #[cfg(feature = \"backtrace\")]\n+        {\n+            if log_backtrace {\n+                let _ = backtrace::write(err);\n+            } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n+                let _ = writeln!(err, \"note: Run with `RUST_BACKTRACE=1` for a backtrace.\");\n+            }\n         }\n     };\n "}, {"sha": "67b19682fc9a8603bf5fdee29e47db71facc2104", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -28,6 +28,7 @@ macro_rules! rtassert {\n \n pub mod args;\n pub mod at_exit_imp;\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;\n@@ -42,6 +43,7 @@ pub mod thread_local;\n pub mod util;\n pub mod wtf8;\n \n+#[cfg(feature = \"backtrace\")]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;"}, {"sha": "9aac7be80176ee494ceb949089782bea8952f5f3", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -30,6 +30,7 @@ use libc;\n pub mod weak;\n \n pub mod android;\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod ext;"}, {"sha": "693cbe06ba987bcc4e60d6f1d9071d9bc5f5511c", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d464422c0a15b88a7f5791652ce1f881959fcc44/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=d464422c0a15b88a7f5791652ce1f881959fcc44", "patch": "@@ -46,3 +46,4 @@ std = { path = \"../../libstd\" }\n [features]\n jemalloc = [\"std/jemalloc\"]\n debug-jemalloc = [\"std/debug-jemalloc\"]\n+backtrace = [\"std/backtrace\"]"}]}