{"sha": "11484c6a6a713754214feb82f753e76d05caef74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDg0YzZhNmE3MTM3NTQyMTRmZWI4MmY3NTNlNzZkMDVjYWVmNzQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-14T15:59:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-14T15:59:13Z"}, "message": "Rollup merge of #53257 - faern:ip-method-idiomatic-improvement, r=TimNN\n\nIdiomatic improvements to IP method\n\nSince match ergonomics and slice patterns are stable this might be more idiomatic modern Rust implementations of these methods? Or well, slice patterns with `..` are not stabilized yet, so maybe we want to specify all fields but with `_`?", "tree": {"sha": "015adcc44062bde9df2d7247c6891bcfca77de5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015adcc44062bde9df2d7247c6891bcfca77de5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11484c6a6a713754214feb82f753e76d05caef74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcvxSCRBK7hj4Ov3rIwAAdHIIAAVITNgknoXusjWPcvSB3lcH\n6z3BRURviIhkvb4zYaOZGzxXn/kwx4CAsraZQLwJEi1cqKxrHXkF9c2tz/Ef7h+Z\noSZxnlzYn2eaIRUZKCbDtrw9btjSf7nglMxuPduEPzCPj2nLLpacM99tY+2SDNfs\nHujhrA4g9vYgXqfOHu/YMlM70/9P7xeyAbq8PqicLsiMuevW7EeZBWL9DI1xlDk3\nJirl5/OLamcf2fjZ9EZAXXgilrB+BFhmObdX8ZwgBWfanHZV524xqr8XZ/zR57lh\nzqdPMI5pmP7UOOl8o0Ff6C+hY5cnvxk5mrF1Rx3dCmaTHYIlGklh5lgDvhWNE9A=\n=ikFL\n-----END PGP SIGNATURE-----\n", "payload": "tree 015adcc44062bde9df2d7247c6891bcfca77de5f\nparent e77d9955a0f6f7e1587e69c28d91580a426bea9a\nparent cbe80a9752c86d44c677cc39adbbd58aee507b6c\nauthor kennytm <kennytm@gmail.com> 1534262353 +0800\ncommitter GitHub <noreply@github.com> 1534262353 +0800\n\nRollup merge of #53257 - faern:ip-method-idiomatic-improvement, r=TimNN\n\nIdiomatic improvements to IP method\n\nSince match ergonomics and slice patterns are stable this might be more idiomatic modern Rust implementations of these methods? Or well, slice patterns with `..` are not stabilized yet, so maybe we want to specify all fields but with `_`?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11484c6a6a713754214feb82f753e76d05caef74", "html_url": "https://github.com/rust-lang/rust/commit/11484c6a6a713754214feb82f753e76d05caef74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11484c6a6a713754214feb82f753e76d05caef74/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e77d9955a0f6f7e1587e69c28d91580a426bea9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e77d9955a0f6f7e1587e69c28d91580a426bea9a", "html_url": "https://github.com/rust-lang/rust/commit/e77d9955a0f6f7e1587e69c28d91580a426bea9a"}, {"sha": "cbe80a9752c86d44c677cc39adbbd58aee507b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe80a9752c86d44c677cc39adbbd58aee507b6c", "html_url": "https://github.com/rust-lang/rust/commit/cbe80a9752c86d44c677cc39adbbd58aee507b6c"}], "stats": {"total": 97, "additions": 50, "deletions": 47}, "files": [{"sha": "9a610cd7d6ba3978df157f3209a7d5d98d865ff1", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/11484c6a6a713754214feb82f753e76d05caef74/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11484c6a6a713754214feb82f753e76d05caef74/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=11484c6a6a713754214feb82f753e76d05caef74", "patch": "@@ -160,9 +160,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_unspecified(),\n-            IpAddr::V6(ref a) => a.is_unspecified(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_unspecified(),\n+            IpAddr::V6(ip) => ip.is_unspecified(),\n         }\n     }\n \n@@ -185,9 +185,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_loopback(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_loopback(),\n-            IpAddr::V6(ref a) => a.is_loopback(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_loopback(),\n+            IpAddr::V6(ip) => ip.is_loopback(),\n         }\n     }\n \n@@ -214,9 +214,9 @@ impl IpAddr {\n     /// }\n     /// ```\n     pub fn is_global(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_global(),\n-            IpAddr::V6(ref a) => a.is_global(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_global(),\n+            IpAddr::V6(ip) => ip.is_global(),\n         }\n     }\n \n@@ -239,9 +239,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_multicast(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_multicast(),\n-            IpAddr::V6(ref a) => a.is_multicast(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_multicast(),\n+            IpAddr::V6(ip) => ip.is_multicast(),\n         }\n     }\n \n@@ -268,9 +268,9 @@ impl IpAddr {\n     /// }\n     /// ```\n     pub fn is_documentation(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_documentation(),\n-            IpAddr::V6(ref a) => a.is_documentation(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_documentation(),\n+            IpAddr::V6(ip) => ip.is_documentation(),\n         }\n     }\n \n@@ -293,7 +293,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => true,\n             IpAddr::V6(_) => false,\n         }\n@@ -318,7 +318,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => false,\n             IpAddr::V6(_) => true,\n         }\n@@ -483,11 +483,11 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_private(&self) -> bool {\n-        match (self.octets()[0], self.octets()[1]) {\n-            (10, _) => true,\n-            (172, b) if b >= 16 && b <= 31 => true,\n-            (192, 168) => true,\n-            _ => false\n+        match self.octets() {\n+            [10, ..] => true,\n+            [172, b, ..] if b >= 16 && b <= 31 => true,\n+            [192, 168, ..] => true,\n+            _ => false,\n         }\n     }\n \n@@ -509,7 +509,10 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_link_local(&self) -> bool {\n-        self.octets()[0] == 169 && self.octets()[1] == 254\n+        match self.octets() {\n+            [169, 254, ..] => true,\n+            _ => false,\n+        }\n     }\n \n     /// Returns [`true`] if the address appears to be globally routable.\n@@ -612,11 +615,11 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_documentation(&self) -> bool {\n-        match(self.octets()[0], self.octets()[1], self.octets()[2], self.octets()[3]) {\n-            (192, 0, 2, _) => true,\n-            (198, 51, 100, _) => true,\n-            (203, 0, 113, _) => true,\n-            _ => false\n+        match self.octets() {\n+            [192, 0, 2, _] => true,\n+            [198, 51, 100, _] => true,\n+            [203, 0, 113, _] => true,\n+            _ => false,\n         }\n     }\n \n@@ -666,9 +669,9 @@ impl Ipv4Addr {\n #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            IpAddr::V4(ref a) => a.fmt(fmt),\n-            IpAddr::V6(ref a) => a.fmt(fmt),\n+        match self {\n+            IpAddr::V4(ip) => ip.fmt(fmt),\n+            IpAddr::V6(ip) => ip.fmt(fmt),\n         }\n     }\n }\n@@ -717,8 +720,8 @@ impl PartialEq for Ipv4Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv4Addr> for IpAddr {\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n-        match *self {\n-            IpAddr::V4(ref v4) => v4 == other,\n+        match self {\n+            IpAddr::V4(v4) => v4 == other,\n             IpAddr::V6(_) => false,\n         }\n     }\n@@ -727,8 +730,8 @@ impl PartialEq<Ipv4Addr> for IpAddr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv4Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n-        match *other {\n-            IpAddr::V4(ref v4) => self == v4,\n+        match other {\n+            IpAddr::V4(v4) => self == v4,\n             IpAddr::V6(_) => false,\n         }\n     }\n@@ -755,8 +758,8 @@ impl PartialOrd for Ipv4Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv4Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n-        match *self {\n-            IpAddr::V4(ref v4) => v4.partial_cmp(other),\n+        match self {\n+            IpAddr::V4(v4) => v4.partial_cmp(other),\n             IpAddr::V6(_) => Some(Ordering::Greater),\n         }\n     }\n@@ -765,8 +768,8 @@ impl PartialOrd<Ipv4Addr> for IpAddr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv4Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n-        match *other {\n-            IpAddr::V4(ref v4) => self.partial_cmp(v4),\n+        match other {\n+            IpAddr::V4(v4) => self.partial_cmp(v4),\n             IpAddr::V6(_) => Some(Ordering::Less),\n         }\n     }\n@@ -1335,19 +1338,19 @@ impl PartialEq for Ipv6Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv6Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n-        match *other {\n+        match other {\n             IpAddr::V4(_) => false,\n-            IpAddr::V6(ref v6) => self == v6,\n+            IpAddr::V6(v6) => self == v6,\n         }\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv6Addr> for IpAddr {\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => false,\n-            IpAddr::V6(ref v6) => v6 == other,\n+            IpAddr::V6(v6) => v6 == other,\n         }\n     }\n }\n@@ -1372,19 +1375,19 @@ impl PartialOrd for Ipv6Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv6Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => Some(Ordering::Less),\n-            IpAddr::V6(ref v6) => v6.partial_cmp(other),\n+            IpAddr::V6(v6) => v6.partial_cmp(other),\n         }\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv6Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n-        match *other {\n+        match other {\n             IpAddr::V4(_) => Some(Ordering::Greater),\n-            IpAddr::V6(ref v6) => self.partial_cmp(v6),\n+            IpAddr::V6(v6) => self.partial_cmp(v6),\n         }\n     }\n }"}]}