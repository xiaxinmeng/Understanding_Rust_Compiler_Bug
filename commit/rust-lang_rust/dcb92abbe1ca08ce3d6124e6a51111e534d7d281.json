{"sha": "dcb92abbe1ca08ce3d6124e6a51111e534d7d281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYjkyYWJiZTFjYTA4Y2UzZDYxMjRlNmE1MTExMWU1MzRkN2QyODE=", "commit": {"author": {"name": "Geoff Catlin", "email": "gcatlin@gmail.com", "date": "2016-03-01T13:42:34Z"}, "committer": {"name": "Geoff Catlin", "email": "gcatlin@gmail.com", "date": "2016-03-01T13:42:34Z"}, "message": "grammar: 'fewer' instead of 'less'", "tree": {"sha": "7c9e27a3daef443955147c149b196c603ce9a0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9e27a3daef443955147c149b196c603ce9a0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcb92abbe1ca08ce3d6124e6a51111e534d7d281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb92abbe1ca08ce3d6124e6a51111e534d7d281", "html_url": "https://github.com/rust-lang/rust/commit/dcb92abbe1ca08ce3d6124e6a51111e534d7d281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcb92abbe1ca08ce3d6124e6a51111e534d7d281/comments", "author": {"login": "gcatlin", "id": 211427, "node_id": "MDQ6VXNlcjIxMTQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/211427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcatlin", "html_url": "https://github.com/gcatlin", "followers_url": "https://api.github.com/users/gcatlin/followers", "following_url": "https://api.github.com/users/gcatlin/following{/other_user}", "gists_url": "https://api.github.com/users/gcatlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcatlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcatlin/subscriptions", "organizations_url": "https://api.github.com/users/gcatlin/orgs", "repos_url": "https://api.github.com/users/gcatlin/repos", "events_url": "https://api.github.com/users/gcatlin/events{/privacy}", "received_events_url": "https://api.github.com/users/gcatlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gcatlin", "id": 211427, "node_id": "MDQ6VXNlcjIxMTQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/211427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcatlin", "html_url": "https://github.com/gcatlin", "followers_url": "https://api.github.com/users/gcatlin/followers", "following_url": "https://api.github.com/users/gcatlin/following{/other_user}", "gists_url": "https://api.github.com/users/gcatlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcatlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcatlin/subscriptions", "organizations_url": "https://api.github.com/users/gcatlin/orgs", "repos_url": "https://api.github.com/users/gcatlin/repos", "events_url": "https://api.github.com/users/gcatlin/events{/privacy}", "received_events_url": "https://api.github.com/users/gcatlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a52494f7e259f49a3be176dc6fb151c755d6686", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a52494f7e259f49a3be176dc6fb151c755d6686", "html_url": "https://github.com/rust-lang/rust/commit/0a52494f7e259f49a3be176dc6fb151c755d6686"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "af4e351569f7f55920fd2db72c6841682098fe1c", "filename": "src/doc/book/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dcb92abbe1ca08ce3d6124e6a51111e534d7d281/src%2Fdoc%2Fbook%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/dcb92abbe1ca08ce3d6124e6a51111e534d7d281/src%2Fdoc%2Fbook%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsafe.md?ref=dcb92abbe1ca08ce3d6124e6a51111e534d7d281", "patch": "@@ -4,7 +4,7 @@ Rust\u2019s main draw is its powerful static guarantees about behavior. But safety\n checks are conservative by nature: there are some programs that are actually\n safe, but the compiler is not able to verify this is true. To write these kinds\n of programs, we need to tell the compiler to relax its restrictions a bit. For\n-this, Rust has a keyword, `unsafe`. Code using `unsafe` has less restrictions\n+this, Rust has a keyword, `unsafe`. Code using `unsafe` has fewer restrictions\n than normal code does.\n \n Let\u2019s go over the syntax, and then we\u2019ll talk semantics. `unsafe` is used in"}]}