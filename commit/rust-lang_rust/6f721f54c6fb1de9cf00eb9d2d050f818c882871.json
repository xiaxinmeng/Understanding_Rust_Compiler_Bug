{"sha": "6f721f54c6fb1de9cf00eb9d2d050f818c882871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNzIxZjU0YzZmYjFkZTljZjAwZWI5ZDJkMDUwZjgxOGM4ODI4NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-06T06:33:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-06T06:33:53Z"}, "message": "Auto merge of #50466 - kennytm:rustbuild-stage0-lib-test, r=Mark-Simulacrum\n\nrustbuild: Allow quick testing of libstd and libcore at stage0\n\nThis PR implemented two features:\n\n1. Added a `--no-doc` flag to allow testing a crate *without* doc tests. In this mode, we don't need to build rustdoc, and thus we can skip building the stage2 compiler. (Ideally stage0 test should use the bootstrap rustdoc, but I don't want to mess up the core builder logic here)\n\n2. Moved all libcore tests externally and added a tidy test to ensure we don't accidentally add `#[test]` into libcore.\n\nAfter this PR, one could run `./x.py test --stage 0 --no-doc src/libstd` to test `libstd` without building the compiler, thus enables us to quickly test new library features.", "tree": {"sha": "02bc6af4af448fc5b44fdef10d4f083e74047103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bc6af4af448fc5b44fdef10d4f083e74047103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f721f54c6fb1de9cf00eb9d2d050f818c882871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f721f54c6fb1de9cf00eb9d2d050f818c882871", "html_url": "https://github.com/rust-lang/rust/commit/6f721f54c6fb1de9cf00eb9d2d050f818c882871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f721f54c6fb1de9cf00eb9d2d050f818c882871/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0cb144fbfd361b48a7710d3eb8a576ffda7ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0cb144fbfd361b48a7710d3eb8a576ffda7ef8", "html_url": "https://github.com/rust-lang/rust/commit/ce0cb144fbfd361b48a7710d3eb8a576ffda7ef8"}, {"sha": "05af55bd8052576bc172d635f8eb9207ccedfd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/05af55bd8052576bc172d635f8eb9207ccedfd29", "html_url": "https://github.com/rust-lang/rust/commit/05af55bd8052576bc172d635f8eb9207ccedfd29"}], "stats": {"total": 566, "additions": 345, "deletions": 221}, "files": [{"sha": "98c353eb6ec8c3fa967b317693d261948d0ed0b3", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -64,6 +64,10 @@ The script accepts commands, flags, and arguments to determine what to do:\n   # execute tests in the standard library in stage0\n   ./x.py test --stage 0 src/libstd\n \n+  # execute tests in the core and standard library in stage0,\n+  # without running doc tests (thus avoid depending on building the compiler)\n+  ./x.py test --stage 0 --no-doc src/libcore src/libstd\n+\n   # execute all doc tests\n   ./x.py test src/doc\n   ```"}, {"sha": "9c35cb7f506f970a8370bf427a3bf1fe513e02ab", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -25,7 +25,7 @@ use compile;\n use install;\n use dist;\n use util::{exe, libdir, add_lib_path};\n-use {Build, Mode};\n+use {Build, Mode, DocTests};\n use cache::{INTERNER, Interned, Cache};\n use check;\n use test;\n@@ -591,6 +591,8 @@ impl<'a> Builder<'a> {\n                 format!(\"{} {}\", env::var(\"RUSTFLAGS\").unwrap_or_default(), extra_args));\n         }\n \n+        let want_rustdoc = self.doc_tests != DocTests::No;\n+\n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n         // how the actual compiler itself is called.\n@@ -607,7 +609,7 @@ impl<'a> Builder<'a> {\n              .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n-             .env(\"RUSTDOC_REAL\", if cmd == \"doc\" || cmd == \"test\" {\n+             .env(\"RUSTDOC_REAL\", if cmd == \"doc\" || (cmd == \"test\" && want_rustdoc) {\n                  self.rustdoc(compiler.host)\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n@@ -624,7 +626,7 @@ impl<'a> Builder<'a> {\n         if let Some(ref error_format) = self.config.rustc_error_format {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n-        if cmd != \"build\" && cmd != \"check\" {\n+        if cmd != \"build\" && cmd != \"check\" && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(self.compiler(2, self.config.build)));\n         }\n \n@@ -1407,4 +1409,39 @@ mod __test {\n             },\n         ]);\n     }\n+\n+    #[test]\n+    fn test_with_no_doc_stage0() {\n+        let mut config = configure(&[], &[]);\n+        config.stage = Some(0);\n+        config.cmd = Subcommand::Test {\n+            paths: vec![\"src/libstd\".into()],\n+            test_args: vec![],\n+            rustc_args: vec![],\n+            fail_fast: true,\n+            doc_tests: DocTests::No,\n+        };\n+\n+        let build = Build::new(config);\n+        let mut builder = Builder::new(&build);\n+\n+        let host = INTERNER.intern_str(\"A\");\n+\n+        builder.run_step_descriptions(\n+            &[StepDescription::from::<test::Crate>()],\n+            &[\"src/libstd\".into()],\n+        );\n+\n+        // Ensure we don't build any compiler artifacts.\n+        assert!(builder.cache.all::<compile::Rustc>().is_empty());\n+        assert_eq!(first(builder.cache.all::<test::Crate>()), &[\n+            test::Crate {\n+                compiler: Compiler { host, stage: 0 },\n+                target: host,\n+                mode: Mode::Libstd,\n+                test_kind: test::TestKind::Test,\n+                krate: INTERNER.intern_str(\"std\"),\n+            },\n+        ]);\n+    }\n }"}, {"sha": "5315a3028ffa9c05fa8d3839ff52b223ddad9a4d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -19,7 +19,7 @@ use std::process;\n \n use getopts::Options;\n \n-use Build;\n+use {Build, DocTests};\n use config::Config;\n use metadata;\n use builder::Builder;\n@@ -62,7 +62,7 @@ pub enum Subcommand {\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n-        doc_tests: bool,\n+        doc_tests: DocTests,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -171,7 +171,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                     \"extra options to pass the compiler when running tests\",\n                     \"ARGS\",\n                 );\n-                opts.optflag(\"\", \"doc\", \"run doc tests\");\n+                opts.optflag(\"\", \"no-doc\", \"do not run doc tests\");\n+                opts.optflag(\"\", \"doc\", \"only run doc tests\");\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n@@ -324,7 +325,13 @@ Arguments:\n                     test_args: matches.opt_strs(\"test-args\"),\n                     rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n-                    doc_tests: matches.opt_present(\"doc\"),\n+                    doc_tests: if matches.opt_present(\"doc\") {\n+                        DocTests::Only\n+                    } else if matches.opt_present(\"no-doc\") {\n+                        DocTests::No\n+                    } else {\n+                        DocTests::Yes\n+                    }\n                 }\n             }\n             \"bench\" => {\n@@ -411,10 +418,10 @@ impl Subcommand {\n         }\n     }\n \n-    pub fn doc_tests(&self) -> bool {\n+    pub fn doc_tests(&self) -> DocTests {\n         match *self {\n             Subcommand::Test { doc_tests, .. } => doc_tests,\n-            _ => false,\n+            _ => DocTests::Yes,\n         }\n     }\n }"}, {"sha": "e53fef06786130e03c26611efb51998211c60b76", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -210,6 +210,16 @@ pub struct Compiler {\n     host: Interned<String>,\n }\n \n+#[derive(PartialEq, Eq, Copy, Clone, Debug)]\n+pub enum DocTests {\n+    // Default, run normal tests and doc tests.\n+    Yes,\n+    // Do not run any doc tests.\n+    No,\n+    // Only run doc tests.\n+    Only,\n+}\n+\n /// Global configuration for the build system.\n ///\n /// This structure transitively contains all configuration for the build system.\n@@ -233,7 +243,7 @@ pub struct Build {\n     rustfmt_info: channel::GitInfo,\n     local_rebuild: bool,\n     fail_fast: bool,\n-    doc_tests: bool,\n+    doc_tests: DocTests,\n     verbosity: usize,\n \n     // Targets for which to build.\n@@ -294,7 +304,7 @@ impl Crate {\n ///\n /// These entries currently correspond to the various output directories of the\n /// build system, with each mod generating output in a different directory.\n-#[derive(Debug, Hash, Clone, Copy, PartialEq, Eq)]\n+#[derive(Debug, Hash, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub enum Mode {\n     /// Build the standard library, placing output in the \"stageN-std\" directory.\n     Libstd,"}, {"sha": "cbb952bab61b2c2ee6221f161a49a1d76037dd5b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -32,13 +32,13 @@ use dist;\n use native;\n use tool::{self, Tool};\n use util::{self, dylib_path, dylib_path_var};\n-use Mode;\n+use {Mode, DocTests};\n use toolstate::ToolState;\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n /// The two modes of the test runner; tests or benchmarks.\n-#[derive(Debug, PartialEq, Eq, Hash, Copy, Clone)]\n+#[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, PartialOrd, Ord)]\n pub enum TestKind {\n     /// Run `cargo test`\n     Test,\n@@ -1407,13 +1407,13 @@ impl Step for CrateNotDefault {\n }\n \n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Crate {\n-    compiler: Compiler,\n-    target: Interned<String>,\n-    mode: Mode,\n-    test_kind: TestKind,\n-    krate: Interned<String>,\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+    pub mode: Mode,\n+    pub test_kind: TestKind,\n+    pub krate: Interned<String>,\n }\n \n impl Step for Crate {\n@@ -1519,8 +1519,14 @@ impl Step for Crate {\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n-        if builder.doc_tests {\n-            cargo.arg(\"--doc\");\n+        match builder.doc_tests {\n+            DocTests::Only => {\n+                cargo.arg(\"--doc\");\n+            }\n+            DocTests::No => {\n+                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n+            }\n+            DocTests::Yes => {}\n         }\n \n         cargo.arg(\"-p\").arg(krate);"}, {"sha": "54f35d17974fb2412db5e25bdcb802d350ef96e6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -50,6 +50,15 @@\n \n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n+//\n+// Here we explicitly #[cfg]-out this whole crate when testing. If we don't do\n+// this, both the generated test artifact and the linked libtest (which\n+// transitively includes libcore) will both define the same set of lang items,\n+// and this will cause the E0152 \"duplicate lang item found\" error. See\n+// discussion in #50466 for details.\n+//\n+// This cfg won't affect doc tests.\n+#![cfg(not(test))]\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "7b62e7b0620fd4ddd51348f523139004d2a4a0ed", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -135,85 +135,3 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // find the byte before the point the body loop stopped\n     text[..offset].iter().rposition(|elt| *elt == x)\n }\n-\n-// test fallback implementations on all platforms\n-#[test]\n-fn matches_one() {\n-    assert_eq!(Some(0), memchr(b'a', b\"a\"));\n-}\n-\n-#[test]\n-fn matches_begin() {\n-    assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n-}\n-\n-#[test]\n-fn matches_end() {\n-    assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n-}\n-\n-#[test]\n-fn matches_nul() {\n-    assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n-}\n-\n-#[test]\n-fn matches_past_nul() {\n-    assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n-}\n-\n-#[test]\n-fn no_match_empty() {\n-    assert_eq!(None, memchr(b'a', b\"\"));\n-}\n-\n-#[test]\n-fn no_match() {\n-    assert_eq!(None, memchr(b'a', b\"xyz\"));\n-}\n-\n-#[test]\n-fn matches_one_reversed() {\n-    assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n-}\n-\n-#[test]\n-fn matches_begin_reversed() {\n-    assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n-}\n-\n-#[test]\n-fn matches_end_reversed() {\n-    assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n-}\n-\n-#[test]\n-fn matches_nul_reversed() {\n-    assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n-}\n-\n-#[test]\n-fn matches_past_nul_reversed() {\n-    assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n-}\n-\n-#[test]\n-fn no_match_empty_reversed() {\n-    assert_eq!(None, memrchr(b'a', b\"\"));\n-}\n-\n-#[test]\n-fn no_match_reversed() {\n-    assert_eq!(None, memrchr(b'a', b\"xyz\"));\n-}\n-\n-#[test]\n-fn each_alignment_reversed() {\n-    let mut data = [1u8; 64];\n-    let needle = 2;\n-    let pos = 40;\n-    data[pos] = needle;\n-    for start in 0..16 {\n-        assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n-    }\n-}"}, {"sha": "5e98e40e0d5e6b42f2e431152dd9bd59f89a3e84", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -46,6 +46,7 @@\n #![feature(reverse_bits)]\n #![feature(inclusive_range_methods)]\n #![feature(iterator_find_map)]\n+#![feature(slice_internals)]\n \n extern crate core;\n extern crate test;\n@@ -74,4 +75,5 @@ mod result;\n mod slice;\n mod str;\n mod str_lossy;\n+mod time;\n mod tuple;"}, {"sha": "257f6ea20d4eab7aa12a87ab53874d44bbefc86c", "filename": "src/libcore/tests/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -98,6 +98,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(stage0))]\n     fn test_reverse_bits() {\n         assert_eq!(A.reverse_bits().reverse_bits(), A);\n         assert_eq!(B.reverse_bits().reverse_bits(), B);"}, {"sha": "c81e5e97cbb7acc5c43927e8d2fae22c14fa2969", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -550,3 +550,89 @@ fn sort_unstable() {\n     v.sort_unstable();\n     assert!(v == [0xDEADBEEF]);\n }\n+\n+pub mod memchr {\n+    use core::slice::memchr::{memchr, memrchr};\n+\n+    // test fallback implementations on all platforms\n+    #[test]\n+    fn matches_one() {\n+        assert_eq!(Some(0), memchr(b'a', b\"a\"));\n+    }\n+\n+    #[test]\n+    fn matches_begin() {\n+        assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_end() {\n+        assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n+    }\n+\n+    #[test]\n+    fn matches_nul() {\n+        assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n+    }\n+\n+    #[test]\n+    fn matches_past_nul() {\n+        assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n+    }\n+\n+    #[test]\n+    fn no_match_empty() {\n+        assert_eq!(None, memchr(b'a', b\"\"));\n+    }\n+\n+    #[test]\n+    fn no_match() {\n+        assert_eq!(None, memchr(b'a', b\"xyz\"));\n+    }\n+\n+    #[test]\n+    fn matches_one_reversed() {\n+        assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n+    }\n+\n+    #[test]\n+    fn matches_begin_reversed() {\n+        assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_end_reversed() {\n+        assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n+    }\n+\n+    #[test]\n+    fn matches_nul_reversed() {\n+        assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n+    }\n+\n+    #[test]\n+    fn matches_past_nul_reversed() {\n+        assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n+    }\n+\n+    #[test]\n+    fn no_match_empty_reversed() {\n+        assert_eq!(None, memrchr(b'a', b\"\"));\n+    }\n+\n+    #[test]\n+    fn no_match_reversed() {\n+        assert_eq!(None, memrchr(b'a', b\"xyz\"));\n+    }\n+\n+    #[test]\n+    fn each_alignment_reversed() {\n+        let mut data = [1u8; 64];\n+        let needle = 2;\n+        let pos = 40;\n+        data[pos] = needle;\n+        for start in 0..16 {\n+            assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+        }\n+    }\n+}"}, {"sha": "042c523f25f25badec26e7737654afeb65de94ee", "filename": "src/libcore/tests/time.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -0,0 +1,124 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::time::Duration;\n+\n+#[test]\n+fn creation() {\n+    assert!(Duration::from_secs(1) != Duration::from_secs(0));\n+    assert_eq!(Duration::from_secs(1) + Duration::from_secs(2),\n+               Duration::from_secs(3));\n+    assert_eq!(Duration::from_millis(10) + Duration::from_secs(4),\n+               Duration::new(4, 10 * 1_000_000));\n+    assert_eq!(Duration::from_millis(4000), Duration::new(4, 0));\n+}\n+\n+#[test]\n+fn secs() {\n+    assert_eq!(Duration::new(0, 0).as_secs(), 0);\n+    assert_eq!(Duration::from_secs(1).as_secs(), 1);\n+    assert_eq!(Duration::from_millis(999).as_secs(), 0);\n+    assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n+}\n+\n+#[test]\n+fn nanos() {\n+    assert_eq!(Duration::new(0, 0).subsec_nanos(), 0);\n+    assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n+    assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n+    assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n+    assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n+    assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n+}\n+\n+#[test]\n+fn add() {\n+    assert_eq!(Duration::new(0, 0) + Duration::new(0, 1),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(0, 500_000_000) + Duration::new(0, 500_000_001),\n+               Duration::new(1, 1));\n+}\n+\n+#[test]\n+fn checked_add() {\n+    assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n+               Some(Duration::new(0, 1)));\n+    assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n+               Some(Duration::new(1, 1)));\n+    assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::core::u64::MAX, 0)), None);\n+}\n+\n+#[test]\n+fn sub() {\n+    assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(0, 500_000_001) - Duration::new(0, 500_000_000),\n+               Duration::new(0, 1));\n+    assert_eq!(Duration::new(1, 0) - Duration::new(0, 1),\n+               Duration::new(0, 999_999_999));\n+}\n+\n+#[test]\n+fn checked_sub() {\n+    let zero = Duration::new(0, 0);\n+    let one_nano = Duration::new(0, 1);\n+    let one_sec = Duration::new(1, 0);\n+    assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n+    assert_eq!(one_sec.checked_sub(one_nano),\n+               Some(Duration::new(0, 999_999_999)));\n+    assert_eq!(zero.checked_sub(one_nano), None);\n+    assert_eq!(zero.checked_sub(one_sec), None);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn sub_bad1() {\n+    let _ = Duration::new(0, 0) - Duration::new(0, 1);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn sub_bad2() {\n+    let _ = Duration::new(0, 0) - Duration::new(1, 0);\n+}\n+\n+#[test]\n+fn mul() {\n+    assert_eq!(Duration::new(0, 1) * 2, Duration::new(0, 2));\n+    assert_eq!(Duration::new(1, 1) * 3, Duration::new(3, 3));\n+    assert_eq!(Duration::new(0, 500_000_001) * 4, Duration::new(2, 4));\n+    assert_eq!(Duration::new(0, 500_000_001) * 4000,\n+               Duration::new(2000, 4000));\n+}\n+\n+#[test]\n+fn checked_mul() {\n+    assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n+    assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n+    assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n+    assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n+               Some(Duration::new(2000, 4000)));\n+    assert_eq!(Duration::new(::core::u64::MAX - 1, 0).checked_mul(2), None);\n+}\n+\n+#[test]\n+fn div() {\n+    assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n+    assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n+    assert_eq!(Duration::new(99, 999_999_000) / 100,\n+               Duration::new(0, 999_999_990));\n+}\n+\n+#[test]\n+fn checked_div() {\n+    assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n+    assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n+    assert_eq!(Duration::new(2, 0).checked_div(0), None);\n+}"}, {"sha": "8e8b1691c657a3bc0edaa12e336332e82f55a3db", "filename": "src/libcore/time.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -481,119 +481,3 @@ impl<'a> Sum<&'a Duration> for Duration {\n         iter.fold(Duration::new(0, 0), |a, b| a + *b)\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::Duration;\n-\n-    #[test]\n-    fn creation() {\n-        assert!(Duration::from_secs(1) != Duration::from_secs(0));\n-        assert_eq!(Duration::from_secs(1) + Duration::from_secs(2),\n-                   Duration::from_secs(3));\n-        assert_eq!(Duration::from_millis(10) + Duration::from_secs(4),\n-                   Duration::new(4, 10 * 1_000_000));\n-        assert_eq!(Duration::from_millis(4000), Duration::new(4, 0));\n-    }\n-\n-    #[test]\n-    fn secs() {\n-        assert_eq!(Duration::new(0, 0).as_secs(), 0);\n-        assert_eq!(Duration::from_secs(1).as_secs(), 1);\n-        assert_eq!(Duration::from_millis(999).as_secs(), 0);\n-        assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n-    }\n-\n-    #[test]\n-    fn nanos() {\n-        assert_eq!(Duration::new(0, 0).subsec_nanos(), 0);\n-        assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n-        assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n-        assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n-        assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n-        assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n-    }\n-\n-    #[test]\n-    fn add() {\n-        assert_eq!(Duration::new(0, 0) + Duration::new(0, 1),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(0, 500_000_000) + Duration::new(0, 500_000_001),\n-                   Duration::new(1, 1));\n-    }\n-\n-    #[test]\n-    fn checked_add() {\n-        assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)),\n-                   Some(Duration::new(0, 1)));\n-        assert_eq!(Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n-                   Some(Duration::new(1, 1)));\n-        assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::u64::MAX, 0)), None);\n-    }\n-\n-    #[test]\n-    fn sub() {\n-        assert_eq!(Duration::new(0, 1) - Duration::new(0, 0),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(0, 500_000_001) - Duration::new(0, 500_000_000),\n-                   Duration::new(0, 1));\n-        assert_eq!(Duration::new(1, 0) - Duration::new(0, 1),\n-                   Duration::new(0, 999_999_999));\n-    }\n-\n-    #[test]\n-    fn checked_sub() {\n-        let zero = Duration::new(0, 0);\n-        let one_nano = Duration::new(0, 1);\n-        let one_sec = Duration::new(1, 0);\n-        assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n-        assert_eq!(one_sec.checked_sub(one_nano),\n-                   Some(Duration::new(0, 999_999_999)));\n-        assert_eq!(zero.checked_sub(one_nano), None);\n-        assert_eq!(zero.checked_sub(one_sec), None);\n-    }\n-\n-    #[test] #[should_panic]\n-    fn sub_bad1() {\n-        Duration::new(0, 0) - Duration::new(0, 1);\n-    }\n-\n-    #[test] #[should_panic]\n-    fn sub_bad2() {\n-        Duration::new(0, 0) - Duration::new(1, 0);\n-    }\n-\n-    #[test]\n-    fn mul() {\n-        assert_eq!(Duration::new(0, 1) * 2, Duration::new(0, 2));\n-        assert_eq!(Duration::new(1, 1) * 3, Duration::new(3, 3));\n-        assert_eq!(Duration::new(0, 500_000_001) * 4, Duration::new(2, 4));\n-        assert_eq!(Duration::new(0, 500_000_001) * 4000,\n-                   Duration::new(2000, 4000));\n-    }\n-\n-    #[test]\n-    fn checked_mul() {\n-        assert_eq!(Duration::new(0, 1).checked_mul(2), Some(Duration::new(0, 2)));\n-        assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n-        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n-        assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000),\n-                   Some(Duration::new(2000, 4000)));\n-        assert_eq!(Duration::new(::u64::MAX - 1, 0).checked_mul(2), None);\n-    }\n-\n-    #[test]\n-    fn div() {\n-        assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));\n-        assert_eq!(Duration::new(1, 1) / 3, Duration::new(0, 333_333_333));\n-        assert_eq!(Duration::new(99, 999_999_000) / 100,\n-                   Duration::new(0, 999_999_990));\n-    }\n-\n-    #[test]\n-    fn checked_div() {\n-        assert_eq!(Duration::new(2, 0).checked_div(2), Some(Duration::new(1, 0)));\n-        assert_eq!(Duration::new(1, 0).checked_div(2), Some(Duration::new(0, 500_000_000)));\n-        assert_eq!(Duration::new(2, 0).checked_div(0), None);\n-    }\n-}"}, {"sha": "d41739ab02c6ad90c19d55dbe7fe0d644a1dbb56", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -330,10 +330,10 @@\n // with a rustc without jemalloc.\n // FIXME(#44236) shouldn't need MSVC logic\n #![cfg_attr(all(not(target_env = \"msvc\"),\n-                any(stage0, feature = \"force_alloc_system\")),\n+                any(all(stage0, not(test)), feature = \"force_alloc_system\")),\n             feature(global_allocator))]\n #[cfg(all(not(target_env = \"msvc\"),\n-          any(stage0, feature = \"force_alloc_system\")))]\n+          any(all(stage0, not(test)), feature = \"force_alloc_system\")))]\n #[global_allocator]\n static ALLOC: alloc_system::System = alloc_system::System;\n "}, {"sha": "022ef57503aaabadaec4d5e7b76525c5ca32599f", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -51,6 +51,7 @@ pub mod pal;\n pub mod deps;\n pub mod ui_tests;\n pub mod unstable_book;\n+pub mod libcoretest;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = ["}, {"sha": "ef8b55186b104e8c0ad67012bbc2cad53d455e91", "filename": "src/tools/tidy/src/libcoretest.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Tidy check to ensure `#[test]` is not used directly inside `libcore`.\n+//!\n+//! `#![no_core]` libraries cannot be tested directly due to duplicating lang\n+//! item. All tests must be written externally in `libcore/tests`.\n+\n+use std::path::Path;\n+use std::fs::read_to_string;\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    let libcore_path = path.join(\"libcore\");\n+    super::walk(\n+        &libcore_path,\n+        &mut |subpath| t!(subpath.strip_prefix(&libcore_path)).starts_with(\"tests\"),\n+        &mut |subpath| {\n+            if t!(read_to_string(subpath)).contains(\"#[test]\") {\n+                tidy_error!(\n+                    bad,\n+                    \"{} contains #[test]; libcore tests must be placed inside `src/libcore/tests/`\",\n+                    subpath.display()\n+                );\n+            }\n+        },\n+    );\n+}"}, {"sha": "7b86650823a437a1366c2a1a4f0bfc198569790c", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f721f54c6fb1de9cf00eb9d2d050f818c882871/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=6f721f54c6fb1de9cf00eb9d2d050f818c882871", "patch": "@@ -41,6 +41,7 @@ fn main() {\n     features::check(&path, &mut bad, quiet);\n     pal::check(&path, &mut bad);\n     unstable_book::check(&path, &mut bad);\n+    libcoretest::check(&path, &mut bad);\n     if !args.iter().any(|s| *s == \"--no-vendor\") {\n         deps::check(&path, &mut bad);\n     }"}]}