{"sha": "52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTk4MjViYThmOWE1ZjMyYzM1NjhhYjBjYTI1ZGJlYjc4NDJjMzA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-29T13:08:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-26T22:36:12Z"}, "message": "Visit for hir::Expr.", "tree": {"sha": "2c53cacded7127f54be38bc626fbbfd2da8445cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c53cacded7127f54be38bc626fbbfd2da8445cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "html_url": "https://github.com/rust-lang/rust/commit/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1cfe5b5b3c33b71002e71b7d2e6d6505d551f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1cfe5b5b3c33b71002e71b7d2e6d6505d551f2", "html_url": "https://github.com/rust-lang/rust/commit/2b1cfe5b5b3c33b71002e71b7d2e6d6505d551f2"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "659bfc4e63c6b9dcbd23c95cb6ab9fe2a226e961", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -465,7 +465,7 @@ where\n pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param<'v>) {\n     visitor.visit_id(param.hir_id);\n     visitor.visit_pat(&param.pat);\n-    walk_list!(visitor, visit_attribute, &param.attrs);\n+    walk_list!(visitor, visit_attribute, param.attrs);\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n@@ -687,23 +687,23 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V, type_binding\n pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n     visitor.visit_id(pattern.hir_id);\n     match pattern.kind {\n-        PatKind::TupleStruct(ref qpath, ref children, _) => {\n+        PatKind::TupleStruct(ref qpath, children, _) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             walk_list!(visitor, visit_pat, children);\n         }\n         PatKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n         }\n-        PatKind::Struct(ref qpath, ref fields, _) => {\n+        PatKind::Struct(ref qpath, fields, _) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             for field in fields {\n                 visitor.visit_id(field.hir_id);\n                 visitor.visit_ident(field.ident);\n                 visitor.visit_pat(&field.pat)\n             }\n         }\n-        PatKind::Or(ref pats) => walk_list!(visitor, visit_pat, pats),\n-        PatKind::Tuple(ref tuple_elements, _) => {\n+        PatKind::Or(pats) => walk_list!(visitor, visit_pat, pats),\n+        PatKind::Tuple(tuple_elements, _) => {\n             walk_list!(visitor, visit_pat, tuple_elements);\n         }\n         PatKind::Box(ref subpattern) | PatKind::Ref(ref subpattern, _) => {\n@@ -719,7 +719,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n             visitor.visit_expr(upper_bound)\n         }\n         PatKind::Wild => (),\n-        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n+        PatKind::Slice(prepatterns, ref slice_pattern, postpatterns) => {\n             walk_list!(visitor, visit_pat, prepatterns);\n             walk_list!(visitor, visit_pat, slice_pattern);\n             walk_list!(visitor, visit_pat, postpatterns);\n@@ -957,7 +957,7 @@ pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {\n     visitor.visit_id(block.hir_id);\n-    walk_list!(visitor, visit_stmt, &block.stmts);\n+    walk_list!(visitor, visit_stmt, block.stmts);\n     walk_list!(visitor, visit_expr, &block.expr);\n }\n \n@@ -982,14 +982,14 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n     walk_list!(visitor, visit_attribute, expression.attrs.iter());\n     match expression.kind {\n         ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),\n-        ExprKind::Array(ref subexpressions) => {\n+        ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)\n         }\n-        ExprKind::Struct(ref qpath, ref fields, ref optional_base) => {\n+        ExprKind::Struct(ref qpath, fields, ref optional_base) => {\n             visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n             for field in fields {\n                 visitor.visit_id(field.hir_id);\n@@ -998,14 +998,14 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             }\n             walk_list!(visitor, visit_expr, optional_base);\n         }\n-        ExprKind::Tup(ref subexpressions) => {\n+        ExprKind::Tup(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n-        ExprKind::Call(ref callee_expression, ref arguments) => {\n+        ExprKind::Call(ref callee_expression, arguments) => {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, _, ref arguments) => {\n+        ExprKind::MethodCall(ref segment, _, arguments) => {\n             visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n@@ -1027,7 +1027,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Match(ref subexpression, ref arms, _) => {\n+        ExprKind::Match(ref subexpression, arms, _) => {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n@@ -1077,8 +1077,8 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n         ExprKind::InlineAsm(ref asm) => {\n-            walk_list!(visitor, visit_expr, &asm.outputs_exprs);\n-            walk_list!(visitor, visit_expr, &asm.inputs_exprs);\n+            walk_list!(visitor, visit_expr, asm.outputs_exprs);\n+            walk_list!(visitor, visit_expr, asm.inputs_exprs);\n         }\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);\n@@ -1096,7 +1096,7 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n         }\n     }\n     visitor.visit_expr(&arm.body);\n-    walk_list!(visitor, visit_attribute, &arm.attrs);\n+    walk_list!(visitor, visit_attribute, arm.attrs);\n }\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {"}, {"sha": "cc5cb58173fd69c54026a73d2012b1f7426a5c9b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -180,19 +180,19 @@ pub struct Map<'hir> {\n     hir_to_node_id: FxHashMap<HirId, NodeId>,\n }\n \n-struct ParentHirIterator<'map> {\n+struct ParentHirIterator<'map, 'hir> {\n     current_id: HirId,\n-    map: &'map Map<'map>,\n+    map: &'map Map<'hir>,\n }\n \n-impl<'map> ParentHirIterator<'map> {\n-    fn new(current_id: HirId, map: &'map Map<'map>) -> ParentHirIterator<'map> {\n+impl<'map, 'hir> ParentHirIterator<'map, 'hir> {\n+    fn new(current_id: HirId, map: &'map Map<'hir>) -> ParentHirIterator<'map, 'hir> {\n         ParentHirIterator { current_id, map }\n     }\n }\n \n-impl<'map> Iterator for ParentHirIterator<'map> {\n-    type Item = (HirId, Node<'map>);\n+impl<'map, 'hir> Iterator for ParentHirIterator<'map, 'hir> {\n+    type Item = (HirId, Node<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if self.current_id == CRATE_HIR_ID {\n@@ -782,7 +782,7 @@ impl<'hir> Map<'hir> {\n     ///\n     /// Used by error reporting when there's a type error in a match arm caused by the `match`\n     /// expression needing to be unit.\n-    pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&Expr<'hir>> {\n+    pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&'hir Expr<'hir>> {\n         for (_, node) in ParentHirIterator::new(hir_id, &self) {\n             match node {\n                 Node::Item(_) | Node::ForeignItem(_) | Node::TraitItem(_) | Node::ImplItem(_) => {"}, {"sha": "8a450cf167a369e42ea4d133adc48b2be2945378", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -1714,7 +1714,7 @@ pub enum ExprKind<'hir> {\n     Path(QPath),\n \n     /// A referencing operation (i.e., `&a` or `&mut a`).\n-    AddrOf(BorrowKind, &'hir Expr<'hir>),\n+    AddrOf(BorrowKind, Mutability, &'hir Expr<'hir>),\n     /// A `break`, with an optional label to break.\n     Break(Destination, Option<&'hir Expr<'hir>>),\n     /// A `continue`, with an optional label."}, {"sha": "0831f5403db5499f4025a71bccdba6f7a731ad07", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -126,7 +126,7 @@ impl hir::Pat<'_> {\n     }\n \n     /// Checks if the pattern satisfies the given predicate on some sub-pattern.\n-    fn satisfies(&self, pred: impl Fn(&Self) -> bool) -> bool {\n+    fn satisfies(&self, pred: impl Fn(&hir::Pat<'_>) -> bool) -> bool {\n         let mut satisfies = false;\n         self.walk_short(|p| {\n             if pred(p) {"}, {"sha": "11a596a8317773f03b71b78e7101a779f3d85226", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -10,7 +10,6 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use crate::hir;\n-use crate::hir::ptr::P;\n use crate::hir::{GenericArg, GenericParam, GenericParamKind};\n use crate::hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n \n@@ -972,7 +971,7 @@ impl<'a> State<'a> {\n \n         self.print_inner_attributes(attrs);\n \n-        for st in &blk.stmts {\n+        for st in blk.stmts {\n             self.print_stmt(st);\n         }\n         if let Some(ref expr) = blk.expr {\n@@ -1047,7 +1046,7 @@ impl<'a> State<'a> {\n         &mut self,\n         qpath: &hir::QPath,\n         fields: &[hir::Field<'_>],\n-        wth: &Option<P<hir::Expr<'_>>>,\n+        wth: &Option<&'hir hir::Expr<'_>>,\n     ) {\n         self.print_qpath(qpath, true);\n         self.s.word(\"{\");\n@@ -1187,8 +1186,8 @@ impl<'a> State<'a> {\n             hir::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(&element, count);\n             }\n-            hir::ExprKind::Struct(ref qpath, ref fields, ref wth) => {\n-                self.print_expr_struct(qpath, &fields[..], wth);\n+            hir::ExprKind::Struct(ref qpath, fields, ref wth) => {\n+                self.print_expr_struct(qpath, fields, wth);\n             }\n             hir::ExprKind::Tup(ref exprs) => {\n                 self.print_expr_tup(exprs);\n@@ -1251,7 +1250,7 @@ impl<'a> State<'a> {\n                 self.s.space();\n                 self.print_block(&blk);\n             }\n-            hir::ExprKind::Match(ref expr, ref arms, _) => {\n+            hir::ExprKind::Match(ref expr, arms, _) => {\n                 self.cbox(INDENT_UNIT);\n                 self.ibox(INDENT_UNIT);\n                 self.word_nbsp(\"match\");"}, {"sha": "6b977393806ee8d0993b8cacb467eb6257ee6d59", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// needed, suggest annotating the call, otherwise point out the resulting type of the call.\n     fn annotate_method_call(\n         &self,\n-        segment: &hir::ptr::P<hir::PathSegment>,\n+        segment: &hir::PathSegment,\n         e: &Expr<'_>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {"}, {"sha": "5126d3f7fdefe68e85f649465ced9c0992b6f70b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -1271,12 +1271,12 @@ fn resolve_local<'tcx>(\n                 record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n                 record_rvalue_scope(visitor, &subexpr, blk_id);\n             }\n-            hir::ExprKind::Struct(_, ref fields, _) => {\n+            hir::ExprKind::Struct(_, fields, _) => {\n                 for field in fields {\n                     record_rvalue_scope_if_borrow_expr(visitor, &field.expr, blk_id);\n                 }\n             }\n-            hir::ExprKind::Array(ref subexprs) | hir::ExprKind::Tup(ref subexprs) => {\n+            hir::ExprKind::Array(subexprs) | hir::ExprKind::Tup(subexprs) => {\n                 for subexpr in subexprs {\n                     record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n                 }"}, {"sha": "4215348f24cf58608824ff32c9ff47bad61d0871", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=52e9825ba8f9a5f32c3568ab0ca25dbeb7842c30", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.consume_exprs(exprs);\n             }\n \n-            hir::ExprKind::Match(ref discr, ref arms, _) => {\n+            hir::ExprKind::Match(ref discr, arms, _) => {\n                 let discr_place = return_if_err!(self.mc.cat_expr(&discr));\n                 self.borrow_expr(&discr, ty::ImmBorrow);\n \n@@ -251,7 +251,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             }\n \n             hir::ExprKind::InlineAsm(ref ia) => {\n-                for (o, output) in ia.inner.outputs.iter().zip(&ia.outputs_exprs) {\n+                for (o, output) in ia.inner.outputs.iter().zip(ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);\n                     } else {\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     fn walk_block(&mut self, blk: &hir::Block<'_>) {\n         debug!(\"walk_block(blk.hir_id={})\", blk.hir_id);\n \n-        for stmt in &blk.stmts {\n+        for stmt in blk.stmts {\n             self.walk_stmt(stmt);\n         }\n \n@@ -397,7 +397,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn walk_struct_expr(&mut self, fields: &[hir::Field<'_>], opt_with: &Option<P<hir::Expr<'_>>>) {\n+    fn walk_struct_expr(\n+        &mut self,\n+        fields: &[hir::Field<'_>],\n+        opt_with: &Option<&'hir hir::Expr<'_>>,\n+    ) {\n         // Consume the expressions supplying values for each field.\n         for field in fields {\n             self.consume_expr(&field.expr);"}]}