{"sha": "7c0409e0c7249fe793b5d05829fcd984d06ec770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDQwOWUwYzcyNDlmZTc5M2I1ZDA1ODI5ZmNkOTg0ZDA2ZWM3NzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-08T10:34:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-08T10:34:39Z"}, "message": "Cleanup", "tree": {"sha": "f0fa62be634a4c52bc77a7bf998c8d4695cc91a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fa62be634a4c52bc77a7bf998c8d4695cc91a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0409e0c7249fe793b5d05829fcd984d06ec770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0409e0c7249fe793b5d05829fcd984d06ec770", "html_url": "https://github.com/rust-lang/rust/commit/7c0409e0c7249fe793b5d05829fcd984d06ec770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0409e0c7249fe793b5d05829fcd984d06ec770/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6713be0b130670324c61d9deb38b7b6aee6a8bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6713be0b130670324c61d9deb38b7b6aee6a8bac", "html_url": "https://github.com/rust-lang/rust/commit/6713be0b130670324c61d9deb38b7b6aee6a8bac"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "afa76619d8e088206cc59b2d65ac52e5292e8853", "filename": "crates/ra_toolchain/src/lib.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7c0409e0c7249fe793b5d05829fcd984d06ec770/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0409e0c7249fe793b5d05829fcd984d06ec770/crates%2Fra_toolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_toolchain%2Fsrc%2Flib.rs?ref=7c0409e0c7249fe793b5d05829fcd984d06ec770", "patch": "@@ -14,7 +14,8 @@ use anyhow::{bail, Result};\n /// E.g., `get_path_for_executable(\"cargo\")` may return just `cargo` if that\n /// gives a valid Cargo executable; or it may return a full path to a valid\n /// Cargo.\n-pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<PathBuf> {\n+pub fn get_path_for_executable(executable_name: &'static str) -> Result<PathBuf> {\n+    assert!(executable_name == \"rustc\" || executable_name == \"cargo\");\n     // The current implementation checks three places for an executable to use:\n     // 1) Appropriate environment variable (erroring if this is set but not a usable executable)\n     //      example: for cargo, this checks $CARGO environment variable; for rustc, $RUSTC; etc\n@@ -23,46 +24,46 @@ pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<PathB\n     // 3) `~/.cargo/bin/<executable_name>`\n     //      example: for cargo, this tries ~/.cargo/bin/cargo\n     //      It seems that this is a reasonable place to try for cargo, rustc, and rustup\n-    let executable_name = executable_name.as_ref();\n     let env_var = executable_name.to_ascii_uppercase();\n     if let Ok(path) = env::var(&env_var) {\n-        if is_valid_executable(&path) {\n+        return if is_valid_executable(&path) {\n             Ok(path.into())\n         } else {\n             bail!(\n                 \"`{}` environment variable points to something that's not a valid executable\",\n                 env_var\n             )\n+        };\n+    }\n+\n+    if is_valid_executable(executable_name) {\n+        return Ok(executable_name.into());\n+    }\n+\n+    if let Some(mut path) = home::home_dir() {\n+        path.push(\".cargo\");\n+        path.push(\"bin\");\n+        path.push(executable_name);\n+        if is_valid_executable(&path) {\n+            return Ok(path);\n         }\n-    } else {\n-        if is_valid_executable(executable_name) {\n-            return Ok(executable_name.into());\n-        }\n-        if let Some(mut path) = ::home::home_dir() {\n-            path.push(\".cargo\");\n-            path.push(\"bin\");\n-            path.push(executable_name);\n-            if is_valid_executable(&path) {\n-                return Ok(path);\n-            }\n-        }\n-        // This error message may also be caused by $PATH or $CARGO/$RUSTC/etc not being set correctly\n-        // for VSCode, even if they are set correctly in a terminal.\n-        // On macOS in particular, launching VSCode from terminal with `code <dirname>` causes VSCode\n-        // to inherit environment variables including $PATH, $CARGO, $RUSTC, etc from that terminal;\n-        // but launching VSCode from Dock does not inherit environment variables from a terminal.\n-        // For more discussion, see #3118.\n-        bail!(\n-            \"Failed to find `{}` executable. Make sure `{}` is in `$PATH`, or set `${}` to point to a valid executable.\",\n-            executable_name, executable_name, env_var\n-        )\n     }\n+    // This error message may also be caused by $PATH or $CARGO/$RUSTC/etc not being set correctly\n+    // for VSCode, even if they are set correctly in a terminal.\n+    // On macOS in particular, launching VSCode from terminal with `code <dirname>` causes VSCode\n+    // to inherit environment variables including $PATH, $CARGO, $RUSTC, etc from that terminal;\n+    // but launching VSCode from Dock does not inherit environment variables from a terminal.\n+    // For more discussion, see #3118.\n+    bail!(\n+        \"Failed to find `{}` executable. Make sure `{}` is in `$PATH`, or set `${}` to point to a valid executable.\",\n+        executable_name, executable_name, env_var\n+    )\n }\n \n /// Does the given `Path` point to a usable executable?\n ///\n /// (assumes the executable takes a `--version` switch and writes to stdout,\n /// which is true for `cargo`, `rustc`, and `rustup`)\n-fn is_valid_executable(p: impl AsRef<Path>) -> bool {\n-    Command::new(p.as_ref()).arg(\"--version\").output().is_ok()\n+fn is_valid_executable(p: &'static str) -> bool {\n+    Command::new(p).arg(\"--version\").output().is_ok()\n }"}]}