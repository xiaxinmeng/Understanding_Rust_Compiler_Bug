{"sha": "c48f4828131d7d326b8a4a91ae9931736deda26f", "node_id": "C_kwDOAAsO6NoAKGM0OGY0ODI4MTMxZDdkMzI2YjhhNGE5MWFlOTkzMTczNmRlZGEyNmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-29T05:32:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-08T03:47:46Z"}, "message": "Migrate StaticAccess diagnostic", "tree": {"sha": "e58d8528f7e85cb858ac30ae161e60001c3cf7cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e58d8528f7e85cb858ac30ae161e60001c3cf7cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48f4828131d7d326b8a4a91ae9931736deda26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48f4828131d7d326b8a4a91ae9931736deda26f", "html_url": "https://github.com/rust-lang/rust/commit/c48f4828131d7d326b8a4a91ae9931736deda26f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48f4828131d7d326b8a4a91ae9931736deda26f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9fd36aa4ed90051424560268108370bbb3749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9fd36aa4ed90051424560268108370bbb3749b", "html_url": "https://github.com/rust-lang/rust/commit/ff9fd36aa4ed90051424560268108370bbb3749b"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "3a498f84ec58e6d414a8078c015643a2641fd5e9", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=c48f4828131d7d326b8a4a91ae9931736deda26f", "patch": "@@ -1,3 +1,4 @@\n+use rustc_hir::ConstContext;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n@@ -26,3 +27,15 @@ pub(crate) struct NonConstOpErr {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::static_access, code = \"E0013\")]\n+#[help]\n+pub(crate) struct StaticAccessErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+    #[note(const_eval::teach_note)]\n+    #[help(const_eval::teach_help)]\n+    pub teach: Option<()>,\n+}"}, {"sha": "d104fdd59c5ee18e6142aa2b55b8fa0d807ef085", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=c48f4828131d7d326b8a4a91ae9931736deda26f", "patch": "@@ -1,7 +1,9 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -20,7 +22,7 @@ use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n-use crate::errors::NonConstOpErr;\n+use crate::errors::{NonConstOpErr, StaticAccessErr};\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -731,24 +733,11 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = struct_span_err!(\n-            ccx.tcx.sess,\n+        ccx.tcx.sess.create_err(StaticAccessErr {\n             span,\n-            E0013,\n-            \"{}s cannot refer to statics\",\n-            ccx.const_kind()\n-        );\n-        err.help(\n-            \"consider extracting the value of the `static` to a `const`, and referring to that\",\n-        );\n-        if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n-            err.note(\n-                \"`static` and `const` variables can refer to other `const` variables. \\\n-                    A `const` variable, however, cannot refer to a `static` variable.\",\n-            );\n-            err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n-        }\n-        err\n+            kind: ccx.const_kind(),\n+            teach: ccx.tcx.sess.teach(&error_code!(E0013)).then_some(()),\n+        })\n     }\n }\n "}, {"sha": "66058aa1769eddc6ab34d7e1853774c2b8e232be", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c48f4828131d7d326b8a4a91ae9931736deda26f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=c48f4828131d7d326b8a4a91ae9931736deda26f", "patch": "@@ -4,4 +4,14 @@ const-eval-unstable-in-stable =\n     .bypass-sugg = otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n \n const-eval-thread-local-access =\n-    thread-local statics cannot be accessed at compile-time\n\\ No newline at end of file\n+    thread-local statics cannot be accessed at compile-time\n+\n+const-eval-static-access =\n+    { $kind -> \n+        [constant function] constant functions\n+        [static] statics\n+        *[constant] constants\n+    } cannot refer to statics\n+    .help = consider extracting the value of the `static` to a `const`, and referring to that\n+    .teach-note = `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.\n+    .teach-help = To fix this, the value can be extracted to a `const` and then used."}]}