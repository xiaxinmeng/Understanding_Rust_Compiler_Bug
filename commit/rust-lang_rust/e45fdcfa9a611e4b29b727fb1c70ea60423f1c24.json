{"sha": "e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NWZkY2ZhOWE2MTFlNGIyOWI3MjdmYjFjNzBlYTYwNDIzZjFjMjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T14:06:04Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T19:45:19Z"}, "message": "remove unused unit values (clippy::unused_unit)", "tree": {"sha": "6b5e27ed077afd473b35c5c94f86ea072efe9084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b5e27ed077afd473b35c5c94f86ea072efe9084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "html_url": "https://github.com/rust-lang/rust/commit/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e9775a9a529302d963937b558dd6691854e1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e9775a9a529302d963937b558dd6691854e1cd", "html_url": "https://github.com/rust-lang/rust/commit/47e9775a9a529302d963937b558dd6691854e1cd"}], "stats": {"total": 46, "additions": 11, "deletions": 35}, "files": [{"sha": "3d59fc782113b26751a49614f461afe4aaa1a72b", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -692,7 +692,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// side-effects -- e.g., in order to report errors for erroneous programs.\n     ///\n     /// Note: The optimization is only available during incr. comp.\n-    pub(super) fn ensure_query<Q: QueryDescription<'tcx> + 'tcx>(self, key: Q::Key) -> () {\n+    pub(super) fn ensure_query<Q: QueryDescription<'tcx> + 'tcx>(self, key: Q::Key) {\n         if Q::EVAL_ALWAYS {\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n             return;"}, {"sha": "87d0424ece9443df86a7ae72be757cd41e631c80", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -335,9 +335,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(_memory_extra: &MemoryExtra, _id: AllocId) -> Self::PointerTag {\n-        ()\n-    }\n+    fn tag_static_base_pointer(_memory_extra: &MemoryExtra, _id: AllocId) -> Self::PointerTag {}\n \n     fn box_alloc(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,"}, {"sha": "ba29b187b226efc4f5d653ce864c41d255728a68", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -232,9 +232,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(_memory_extra: &(), _id: AllocId) -> Self::PointerTag {\n-        ()\n-    }\n+    fn tag_static_base_pointer(_memory_extra: &(), _id: AllocId) -> Self::PointerTag {}\n \n     fn box_alloc(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,"}, {"sha": "82183e6c96e9f5c6c48799e476386a36a8c97c4f", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -73,10 +73,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // they are never assigned.\n             ExprKind::Break { .. } | ExprKind::Continue { .. } | ExprKind::Return { .. } => (),\n             ExprKind::Block { body: hir::Block { expr: None, targeted_by_break: false, .. } }\n-                if expr_ty.is_never() =>\n-            {\n-                ()\n-            }\n+                if expr_ty.is_never() => {}\n             _ => {\n                 this.cfg\n                     .push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });"}, {"sha": "c7cff17b1544c8614e83da29150dec827137880e", "filename": "src/librustc_target/spec/apple_sdk_base.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -49,34 +49,20 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n             // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n             \"appletvos\"\n                 if sdkroot.contains(\"TVSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n-            }\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n             \"appletvsimulator\"\n-                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n-            }\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {}\n             \"iphoneos\"\n                 if sdkroot.contains(\"iPhoneSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n-            }\n+                    || sdkroot.contains(\"MacOSX.platform\") => {}\n             \"iphonesimulator\"\n-                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n+                if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"MacOSX.platform\") => {\n             }\n             \"macosx10.15\"\n                 if sdkroot.contains(\"iPhoneOS.platform\")\n-                    || sdkroot.contains(\"iPhoneSimulator.platform\") =>\n-            {\n-                ()\n-            }\n+                    || sdkroot.contains(\"iPhoneSimulator.platform\") => {}\n             // Ignore `SDKROOT` if it's not a valid path.\n-            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => (),\n+            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => {}\n             _ => return Ok(sdkroot),\n         }\n     }"}, {"sha": "d0a87e240da8936179ac47ed2e86a0ba3fcfa2ab", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45fdcfa9a611e4b29b727fb1c70ea60423f1c24/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e45fdcfa9a611e4b29b727fb1c70ea60423f1c24", "patch": "@@ -178,10 +178,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n             use ty::TyKind::*;\n             match (&source.kind, &target.kind) {\n                 (&Ref(r_a, _, mutbl_a), Ref(r_b, _, mutbl_b))\n-                    if infcx.at(&cause, param_env).eq(r_a, r_b).is_ok() && mutbl_a == *mutbl_b =>\n-                {\n-                    ()\n-                }\n+                    if infcx.at(&cause, param_env).eq(r_a, r_b).is_ok() && mutbl_a == *mutbl_b => {}\n                 (&RawPtr(tm_a), &RawPtr(tm_b)) if tm_a.mutbl == tm_b.mutbl => (),\n                 (&Adt(def_a, substs_a), &Adt(def_b, substs_b))\n                     if def_a.is_struct() && def_b.is_struct() =>"}]}