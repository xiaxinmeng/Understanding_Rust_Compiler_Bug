{"sha": "c9f1162a6ffc81adcb114a616899edad0f7d0750", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjExNjJhNmZmYzgxYWRjYjExNGE2MTY4OTllZGFkMGY3ZDA3NTA=", "commit": {"author": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-05-04T09:17:39Z"}, "committer": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-05-04T10:04:53Z"}, "message": "Rephrase the any::type_name docs a bit.\n\nThis attempts to be a little clearer (including in terminology) about the lack\nof guarantees that any::type_name provides.", "tree": {"sha": "ca49ebfd9c21620accb5bc44f009abd14da55f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca49ebfd9c21620accb5bc44f009abd14da55f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f1162a6ffc81adcb114a616899edad0f7d0750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f1162a6ffc81adcb114a616899edad0f7d0750", "html_url": "https://github.com/rust-lang/rust/commit/c9f1162a6ffc81adcb114a616899edad0f7d0750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f1162a6ffc81adcb114a616899edad0f7d0750/comments", "author": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4df04799c406c8149a041c3163321758aac924", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4df04799c406c8149a041c3163321758aac924", "html_url": "https://github.com/rust-lang/rust/commit/ff4df04799c406c8149a041c3163321758aac924"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "67698e5409f6a957899f8c999d057e2e0aec0f44", "filename": "src/libcore/any.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9f1162a6ffc81adcb114a616899edad0f7d0750/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f1162a6ffc81adcb114a616899edad0f7d0750/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=c9f1162a6ffc81adcb114a616899edad0f7d0750", "patch": "@@ -446,14 +446,14 @@ impl TypeId {\n /// # Note\n ///\n /// This is intended for diagnostic use. The exact contents and format of the\n-/// string are not specified, other than being a best-effort description of the\n-/// type. For example, `type_name::<Option<String>>()` could return the\n-/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n-/// `\"foobar\"`. In addition, the output may change between versions of the\n-/// compiler.\n+/// string retrned are not specified, other than being a best-effort description\n+/// of the type. For example, amongst the strings\n+/// that `type_name::<Option<String>>()` might map to are `\"Option<String>\"` and\n+/// `\"std::option::Option<std::string::String>\"`.\n ///\n-/// The type name should not be considered a unique identifier of a type;\n-/// multiple types may share the same type name.\n+/// The returned string must not be considered to be a unique identifier of a\n+/// type as multiple types may map to the same type name. In addition, the\n+/// output may change between versions of the compiler.\n ///\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed."}]}