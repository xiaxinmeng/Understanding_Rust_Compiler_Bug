{"sha": "9f227945f141deb0ae1540b0439cd8330d4df454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjI3OTQ1ZjE0MWRlYjBhZTE1NDBiMDQzOWNkODMzMGQ0ZGY0NTQ=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T15:24:52Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-30T15:24:52Z"}, "message": "Simplify memory failure checking", "tree": {"sha": "775a24627a9d886a6256d90f174c0fdb09773c34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/775a24627a9d886a6256d90f174c0fdb09773c34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f227945f141deb0ae1540b0439cd8330d4df454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f227945f141deb0ae1540b0439cd8330d4df454", "html_url": "https://github.com/rust-lang/rust/commit/9f227945f141deb0ae1540b0439cd8330d4df454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f227945f141deb0ae1540b0439cd8330d4df454/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba542eebc0f6f08a7275e0e0ed57f110bc3461f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba542eebc0f6f08a7275e0e0ed57f110bc3461f2", "html_url": "https://github.com/rust-lang/rust/commit/ba542eebc0f6f08a7275e0e0ed57f110bc3461f2"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "ab9239585c4aa0c2dd2324b97e28a64864e129ea", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f227945f141deb0ae1540b0439cd8330d4df454/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f227945f141deb0ae1540b0439cd8330d4df454/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=9f227945f141deb0ae1540b0439cd8330d4df454", "patch": "@@ -535,10 +535,4 @@ impl InterpError<'_> {\n             _ => false,\n         }\n     }\n-\n-    /// Did the error originate from volatile conditons such as the memory available to the\n-    /// interpreter?\n-    pub fn is_volatile(&self) -> bool {\n-        matches!(self, InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted))\n-    }\n }"}, {"sha": "e7ab8c1e35cf02b9682418d06231d90ecb916a44", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9f227945f141deb0ae1540b0439cd8330d4df454/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f227945f141deb0ae1540b0439cd8330d4df454/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=9f227945f141deb0ae1540b0439cd8330d4df454", "patch": "@@ -31,9 +31,9 @@ use rustc_trait_selection::traits;\n use crate::const_eval::ConstEvalErr;\n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, ConstValue, CtfeValidationMode, Frame, ImmTy,\n-    Immediate, InterpCx, InterpResult, LocalState, LocalValue, MemPlace, Memory, MemoryKind, OpTy,\n-    Operand as InterpOperand, PlaceTy, Pointer, Scalar, ScalarMaybeUninit, StackPopCleanup,\n-    StackPopUnwind,\n+    Immediate, InterpCx, InterpError, InterpResult, LocalState, LocalValue, MemPlace, Memory,\n+    MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer, ResourceExhaustionInfo, Scalar,\n+    ScalarMaybeUninit, StackPopCleanup, StackPopUnwind,\n };\n use crate::transform::MirPass;\n \n@@ -478,19 +478,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);\n-                if error.kind().is_volatile() {\n-                    // Volatile errors can't be ignored since otherwise the amount of available\n-                    // memory influences the result of optimization and the build. The error\n-                    // doesn't need to be fatal since no code will actually be generated anyways.\n-                    self.ecx\n-                        .tcx\n-                        .tcx\n-                        .sess\n-                        .struct_err(\"memory exhausted during optimization\")\n-                        .help(\"try increasing the amount of memory available to the compiler\")\n-                        .emit();\n-                    return None;\n-                }\n                 let err = ConstEvalErr::new(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal {\n@@ -507,7 +494,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         },\n                         ConstantKind::Val(_, ty) => ty.needs_subst(),\n                     };\n-                    if lint_only {\n+                    // Memory errors can't be ignored since otherwise the amount of available\n+                    // memory influences the result of optimization and the build. The error\n+                    // doesn't need to be fatal since no code will actually be generated anyways.\n+                    // FIXME(#86255): use err.error.is_hard_err(), but beware of backwards\n+                    // compatibility and interactions with promoteds\n+                    if lint_only\n+                        && !matches!(\n+                            err.error,\n+                            InterpError::ResourceExhaustion(\n+                                ResourceExhaustionInfo::MemoryExhausted,\n+                            ),\n+                        )\n+                    {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n                         // generic functions using associated constants of the generic parameters.\n                         err.report_as_lint(tcx, \"erroneous constant used\", lint_root, Some(c.span));"}]}