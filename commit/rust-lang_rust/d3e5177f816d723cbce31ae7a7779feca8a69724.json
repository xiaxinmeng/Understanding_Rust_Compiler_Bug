{"sha": "d3e5177f816d723cbce31ae7a7779feca8a69724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTUxNzdmODE2ZDcyM2NiY2UzMWFlN2E3Nzc5ZmVjYThhNjk3MjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-03T00:19:00Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-03T02:15:03Z"}, "message": "Use .next() instead of .nth(0) on iterators.", "tree": {"sha": "6b36c419c3eb8150104eb51c4dd0758864f23046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b36c419c3eb8150104eb51c4dd0758864f23046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e5177f816d723cbce31ae7a7779feca8a69724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e5177f816d723cbce31ae7a7779feca8a69724", "html_url": "https://github.com/rust-lang/rust/commit/d3e5177f816d723cbce31ae7a7779feca8a69724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e5177f816d723cbce31ae7a7779feca8a69724/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b3d816152774e45d01d44cd5b44565dc7aba58", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b3d816152774e45d01d44cd5b44565dc7aba58", "html_url": "https://github.com/rust-lang/rust/commit/97b3d816152774e45d01d44cd5b44565dc7aba58"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "bb2d57c856d4b5091051130bcf3e7e895eefea3e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -1446,7 +1446,7 @@ impl<'tcx> Debug for TerminatorKind<'tcx> {\n         match successor_count {\n             0 => Ok(()),\n \n-            1 => write!(fmt, \" -> {:?}\", self.successors().nth(0).unwrap()),\n+            1 => write!(fmt, \" -> {:?}\", self.successors().next().unwrap()),\n \n             _ => {\n                 write!(fmt, \" -> [\")?;"}, {"sha": "87dcc617fa2896af459e90e6a032c87d88a654d8", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -357,7 +357,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n         self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n-            if let Some(item) = self.associated_items(impl_did).in_definition_order().nth(0) {\n+            if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n                     dtor_did = Some(item.def_id);\n                 }"}, {"sha": "597d3f0237a71dc20a2acd61eed75a40e167cf41", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         };\n \n         let first_succ = {\n-            if let Some(&first_succ) = terminator.successors().nth(0) {\n+            if let Some(&first_succ) = terminator.successors().next() {\n                 if terminator.successors().all(|s| *s == first_succ) {\n                     let count = terminator.successors().count();\n                     self.pred_count[first_succ] -= (count - 1) as u32;"}, {"sha": "a928ab6a00979501610aa1a3e6a87f662478e0ef", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -549,7 +549,7 @@ where\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n-        let drop_fn = tcx.associated_items(drop_trait).in_definition_order().nth(0).unwrap();\n+        let drop_fn = tcx.associated_items(drop_trait).in_definition_order().next().unwrap();\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n "}, {"sha": "64960a0da9cdeb98488f32d73a52605f976805f6", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -1000,7 +1000,7 @@ impl<'tcx> Constructor<'tcx> {\n                         PatKind::Leaf { subpatterns }\n                     }\n                 }\n-                ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.nth(0).unwrap() },\n+                ty::Ref(..) => PatKind::Deref { subpattern: subpatterns.next().unwrap() },\n                 ty::Slice(_) | ty::Array(..) => bug!(\"bad slice pattern {:?} {:?}\", self, ty),\n                 _ => PatKind::Wild,\n             },"}, {"sha": "14366eb4e8748a61c190fb014f9f6069e7fcf8c2", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -955,7 +955,7 @@ impl<'a> Parser<'a> {\n         };\n         let kind = if es.len() == 1 && !trailing_comma {\n             // `(e)` is parenthesized `e`.\n-            ExprKind::Paren(es.into_iter().nth(0).unwrap())\n+            ExprKind::Paren(es.into_iter().next().unwrap())\n         } else {\n             // `(e,)` is a tuple with only one field, `e`.\n             ExprKind::Tup(es)"}, {"sha": "4c041fd669d67178f22b62548d5b08933ae9dbad", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -479,7 +479,7 @@ impl<'a> Parser<'a> {\n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n         Ok(if fields.len() == 1 && !(trailing_comma || fields[0].is_rest()) {\n-            PatKind::Paren(fields.into_iter().nth(0).unwrap())\n+            PatKind::Paren(fields.into_iter().next().unwrap())\n         } else {\n             PatKind::Tuple(fields)\n         })"}, {"sha": "c4469331b66694fdd91a06ed5d5a8b738c416c58", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -198,7 +198,7 @@ impl<'a> Parser<'a> {\n         })?;\n \n         if ts.len() == 1 && !trailing {\n-            let ty = ts.into_iter().nth(0).unwrap().into_inner();\n+            let ty = ts.into_iter().next().unwrap().into_inner();\n             let maybe_bounds = allow_plus == AllowPlus::Yes && self.token.is_like_plus();\n             match ty.kind {\n                 // `(TY_BOUND_NOPAREN) + BOUND + ...`."}, {"sha": "798600fc68275797895ed59fba2cb352fc09e20d", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -620,7 +620,7 @@ impl SourceMap {\n     /// if no character could be found or if an error occurred while retrieving the code snippet.\n     pub fn span_extend_to_prev_char(&self, sp: Span, c: char) -> Span {\n         if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-            let prev_source = prev_source.rsplit(c).nth(0).unwrap_or(\"\").trim_start();\n+            let prev_source = prev_source.rsplit(c).next().unwrap_or(\"\").trim_start();\n             if !prev_source.is_empty() && !prev_source.contains('\\n') {\n                 return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n             }\n@@ -640,7 +640,7 @@ impl SourceMap {\n         for ws in &[\" \", \"\\t\", \"\\n\"] {\n             let pat = pat.to_owned() + ws;\n             if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-                let prev_source = prev_source.rsplit(&pat).nth(0).unwrap_or(\"\").trim_start();\n+                let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n                 if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n@@ -655,7 +655,7 @@ impl SourceMap {\n     pub fn span_until_char(&self, sp: Span, c: char) -> Span {\n         match self.span_to_snippet(sp) {\n             Ok(snippet) => {\n-                let snippet = snippet.split(c).nth(0).unwrap_or(\"\").trim_end();\n+                let snippet = snippet.split(c).next().unwrap_or(\"\").trim_end();\n                 if !snippet.is_empty() && !snippet.contains('\\n') {\n                     sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))\n                 } else {"}, {"sha": "8689db1b1eb56dddecedc8996d439f706abe5a33", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -675,7 +675,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // The `Future` trait has only one associted item, `Output`,\n         // so check that this is what we see.\n         let output_assoc_item =\n-            self.tcx.associated_items(future_trait).in_definition_order().nth(0).unwrap().def_id;\n+            self.tcx.associated_items(future_trait).in_definition_order().next().unwrap().def_id;\n         if output_assoc_item != predicate.projection_ty.item_def_id {\n             span_bug!(\n                 cause_span,"}, {"sha": "f00476fb991f2f4cde33f62e60bde98748f88f30", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -5244,7 +5244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .tcx\n                     .associated_items(future_trait)\n                     .in_definition_order()\n-                    .nth(0)\n+                    .next()\n                     .unwrap()\n                     .def_id;\n                 let predicate ="}, {"sha": "839d914baa9548ee856e7913ad76bcc9894daa05", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e5177f816d723cbce31ae7a7779feca8a69724/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=d3e5177f816d723cbce31ae7a7779feca8a69724", "patch": "@@ -147,7 +147,7 @@ fn main() {\n         eprintln!(\"Must provide path to write unicode tables to\");\n         eprintln!(\n             \"e.g. {} src/libcore/unicode/unicode_data.rs\",\n-            std::env::args().nth(0).unwrap_or_default()\n+            std::env::args().next().unwrap_or_default()\n         );\n         std::process::exit(1);\n     });"}]}