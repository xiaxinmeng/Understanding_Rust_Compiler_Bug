{"sha": "17fca8b4604bc4cf89ac06292f6475614984edc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZmNhOGI0NjA0YmM0Y2Y4OWFjMDYyOTJmNjQ3NTYxNDk4NGVkYzk=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-06-08T05:46:46Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-06-29T12:23:33Z"}, "message": "Check explicitly that tuple initializer is Sized.", "tree": {"sha": "f350f0ef85dd2e2bd10bcc627023fb81bd375e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f350f0ef85dd2e2bd10bcc627023fb81bd375e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17fca8b4604bc4cf89ac06292f6475614984edc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZVPFGAAoJEHynqF4EmoLohwAP/A+A9UlXEUZxWKpoorwntJx6\nL8UIeIb+s0iTOueRrkGInk0tcaKA9LykkEAR3FtuYNA+iLysqJPBnM6229YjHBbs\nZv4FUmN2fp6iMYjoZfARYvj+fV2OU/Jfot0d83TOPzIjAx3bcR/JH03p1xlxa09a\n/zQkHIZMkSpKBFnyH49yvzZNK3xkqv2iWciYRZXaIJjq7ZqI8CsRx1vdhTSA6cTs\nOMez1BYFPruhzGY5t+8bcVVIuLijiJTGJEhU8Ghu487aRj3+EJ+dupkTrQbqsX29\nDmZmXNhRE2d3d6WGtBJ4uBWSd/NU4GLPH23P+/Lj5p9Gkoi5sb9GdN6nmRazF/ZL\nWiIUvnAPvGaODsp1xSCOkP8BtrRlDEh69tSg896H2Ue2ZTRnzH/d4vAP8uBUoXmE\nftKoZrPpQZEel1+FlTUQmkvRotgF/zzOAOtv//xacEr3oiQnKbq3ryw+Bv1OtCtf\nN2nplDF9UldZ+l77IR9ZWESXTueLBhMnJuKQNrEQVQrKh+cSSsLC1eIMoF9WaFaJ\noCXcStJHMZ6aACLLZPEcqsMzW49rl6rukjG6vGMQ/Ct8O/aNh/2I0WfsAhseFnHn\nRT/mGQKmv3SJ6uqsLUHLLU9HJy4Iv3E6r+xgY8GPW4FgEnk094qxaLa/Yh+RiWi0\nKrQ4Jm1FwKIX6t7XPlFC\n=J2Av\n-----END PGP SIGNATURE-----", "payload": "tree f350f0ef85dd2e2bd10bcc627023fb81bd375e9f\nparent 7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1496900806 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1498739013 +0900\n\nCheck explicitly that tuple initializer is Sized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17fca8b4604bc4cf89ac06292f6475614984edc9", "html_url": "https://github.com/rust-lang/rust/commit/17fca8b4604bc4cf89ac06292f6475614984edc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17fca8b4604bc4cf89ac06292f6475614984edc9/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "html_url": "https://github.com/rust-lang/rust/commit/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "35de536223a1690fdd56791af80cd415633532ba", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=17fca8b4604bc4cf89ac06292f6475614984edc9", "patch": "@@ -1097,6 +1097,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }\n+            ObligationCauseCode::TupleInitializerSized => {\n+                err.note(\"tuples must have a statically known size to be initialized\");\n+            }\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }"}, {"sha": "16c41c816b4ebc8852d864fe119e135d54dca035", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=17fca8b4604bc4cf89ac06292f6475614984edc9", "patch": "@@ -121,6 +121,8 @@ pub enum ObligationCauseCode<'tcx> {\n     // Various cases where expressions must be sized/copy/etc:\n     /// L = X implies that L is Sized\n     AssignmentLhsSized,\n+    /// (x1, .., xn) must be Sized\n+    TupleInitializerSized,\n     /// S { ... } must be Sized\n     StructInitializerSized,\n     /// Type of each variable must be Sized"}, {"sha": "c4479e6903267a5f5d3036bdc9d62a25aa46f85c", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=17fca8b4604bc4cf89ac06292f6475614984edc9", "patch": "@@ -189,6 +189,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 tcx.lift(&ty).map(super::ObjectCastObligation)\n             }\n             super::AssignmentLhsSized => Some(super::AssignmentLhsSized),\n+            super::TupleInitializerSized => Some(super::TupleInitializerSized),\n             super::StructInitializerSized => Some(super::StructInitializerSized),\n             super::VariableType(id) => Some(super::VariableType(id)),\n             super::ReturnType(id) => Some(super::ReturnType(id)),\n@@ -476,6 +477,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::TupleElem |\n             super::ItemObligation(_) |\n             super::AssignmentLhsSized |\n+            super::TupleInitializerSized |\n             super::StructInitializerSized |\n             super::VariableType(_) |\n             super::ReturnType(_) |\n@@ -523,6 +525,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::TupleElem |\n             super::ItemObligation(_) |\n             super::AssignmentLhsSized |\n+            super::TupleInitializerSized |\n             super::StructInitializerSized |\n             super::VariableType(_) |\n             super::ReturnType(_) |"}, {"sha": "631158df47487710caacb18b328d491cd81c90c2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=17fca8b4604bc4cf89ac06292f6475614984edc9", "patch": "@@ -3854,6 +3854,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if tuple.references_error() {\n                 tcx.types.err\n             } else {\n+                self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);\n                 tuple\n             }\n           }"}, {"sha": "e96e0ea3aec3623ec0d57b2a3e4aae3927c2adaf", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17fca8b4604bc4cf89ac06292f6475614984edc9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=17fca8b4604bc4cf89ac06292f6475614984edc9", "patch": "@@ -54,6 +54,7 @@ fn f9<X: ?Sized>(x1: Box<S<X>>) {\n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n     //~^ ERROR `X: std::marker::Sized` is not satisfied\n+    //~| ERROR `X: std::marker::Sized` is not satisfied\n }\n \n pub fn main() {"}]}