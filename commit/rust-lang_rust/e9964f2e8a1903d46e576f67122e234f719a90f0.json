{"sha": "e9964f2e8a1903d46e576f67122e234f719a90f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTY0ZjJlOGExOTAzZDQ2ZTU3NmY2NzEyMmUyMzRmNzE5YTkwZjA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-21T00:03:57Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-24T18:06:43Z"}, "message": "stable_sort_primitive: print the type that is being sorted in the lint message", "tree": {"sha": "ffde6c701c34a752bc091a3c03461aa1670ca05c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffde6c701c34a752bc091a3c03461aa1670ca05c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9964f2e8a1903d46e576f67122e234f719a90f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9964f2e8a1903d46e576f67122e234f719a90f0", "html_url": "https://github.com/rust-lang/rust/commit/e9964f2e8a1903d46e576f67122e234f719a90f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9964f2e8a1903d46e576f67122e234f719a90f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ae4d303ce9103a104c57088913741ab17f4d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ae4d303ce9103a104c57088913741ab17f4d36", "html_url": "https://github.com/rust-lang/rust/commit/27ae4d303ce9103a104c57088913741ab17f4d36"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "99e4b293ac6809b40e74b2a33b62db8fa41e72ca", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9964f2e8a1903d46e576f67122e234f719a90f0/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9964f2e8a1903d46e576f67122e234f719a90f0/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=e9964f2e8a1903d46e576f67122e234f719a90f0", "patch": "@@ -86,17 +86,18 @@ struct LintDetection {\n     slice_name: String,\n     method: SortingKind,\n     method_args: String,\n+    slice_type: String,\n }\n \n fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintDetection> {\n     if_chain! {\n         if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n         if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n-        if is_slice_of_primitives(cx, slice);\n+        if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n             let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n-            Some(LintDetection { slice_name: Sugg::hir(cx, slice, \"..\").to_string(), method, method_args: args_str })\n+            Some(LintDetection { slice_name: Sugg::hir(cx, slice, \"..\").to_string(), method, method_args: args_str, slice_type })\n         } else {\n             None\n         }\n@@ -111,9 +112,10 @@ impl LateLintPass<'_> for StableSortPrimitive {\n                 STABLE_SORT_PRIMITIVE,\n                 expr.span,\n                 format!(\n-                    \"used {} instead of {}\",\n+                    \"used {} instead of {} to sort primitive type `{}`\",\n                     detection.method.stable_name(),\n-                    detection.method.unstable_name()\n+                    detection.method.unstable_name(),\n+                    detection.slice_type,\n                 )\n                 .as_str(),\n                 \"try\","}, {"sha": "25301d6dede00023b187839759adf200067d273e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9964f2e8a1903d46e576f67122e234f719a90f0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9964f2e8a1903d46e576f67122e234f719a90f0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e9964f2e8a1903d46e576f67122e234f719a90f0", "patch": "@@ -1409,11 +1409,13 @@ pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n     }\n }\n \n-/// Returns true iff the given expression is a slice of primitives (as defined in the\n-/// `is_recursively_primitive_type` function).\n-pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+/// Returns Option<String> where String is a textual representation of the type encapsulated in the\n+/// slice iff the given expression is a slice of primitives (as defined in the\n+/// `is_recursively_primitive_type` function) and None otherwise.\n+pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     let expr_type = cx.typeck_results().expr_ty_adjusted(expr);\n-    match expr_type.kind {\n+    let expr_kind = &expr_type.kind;\n+    let is_primitive = match expr_kind {\n         ty::Slice(ref element_type)\n         | ty::Ref(\n             _,\n@@ -1424,7 +1426,24 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n             _,\n         ) => is_recursively_primitive_type(element_type),\n         _ => false,\n+    };\n+\n+    if is_primitive {\n+        // if we have wrappers like Array, Slice or Tuple, print these\n+        // and get the type enclosed in the slice ref\n+        match expr_type.peel_refs().walk().nth(1).unwrap().expect_ty().kind {\n+            ty::Slice(..) => return Some(\"slice\".into()),\n+            ty::Array(..) => return Some(\"array\".into()),\n+            ty::Tuple(..) => return Some(\"tuple\".into()),\n+            _ => {\n+                // is_recursively_primitive_type() should have taken care\n+                // of the rest and we can rely on the type that is found\n+                let refs_peeled = expr_type.peel_refs();\n+                return Some(refs_peeled.walk().last().unwrap().to_string());\n+            },\n+        }\n     }\n+    None\n }\n \n #[macro_export]"}, {"sha": "780389f32bc1c6c721e7549880146870c53dd685", "filename": "tests/ui/stable_sort_primitive.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9964f2e8a1903d46e576f67122e234f719a90f0/tests%2Fui%2Fstable_sort_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9964f2e8a1903d46e576f67122e234f719a90f0/tests%2Fui%2Fstable_sort_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstable_sort_primitive.stderr?ref=e9964f2e8a1903d46e576f67122e234f719a90f0", "patch": "@@ -1,42 +1,42 @@\n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `i32`\n   --> $DIR/stable_sort_primitive.rs:7:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n    |\n    = note: `-D clippy::stable-sort-primitive` implied by `-D warnings`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `bool`\n   --> $DIR/stable_sort_primitive.rs:9:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `char`\n   --> $DIR/stable_sort_primitive.rs:11:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `str`\n   --> $DIR/stable_sort_primitive.rs:13:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `tuple`\n   --> $DIR/stable_sort_primitive.rs:15:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `array`\n   --> $DIR/stable_sort_primitive.rs:17:5\n    |\n LL |     vec.sort();\n    |     ^^^^^^^^^^ help: try: `vec.sort_unstable()`\n \n-error: used sort instead of sort_unstable\n+error: used sort instead of sort_unstable to sort primitive type `i32`\n   --> $DIR/stable_sort_primitive.rs:19:5\n    |\n LL |     arr.sort();"}]}