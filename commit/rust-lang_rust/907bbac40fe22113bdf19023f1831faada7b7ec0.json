{"sha": "907bbac40fe22113bdf19023f1831faada7b7ec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2JiYWM0MGZlMjIxMTNiZGYxOTAyM2YxODMxZmFhZGE3YjdlYzA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-11T00:20:32Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:39Z"}, "message": "Reorganise x86 intrinsic definitions.\n\n- factor out redundant mm prefix\n- group methods by instruction set", "tree": {"sha": "a22136a3a3f57e4b5448f85d4d3e97c599bc955a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22136a3a3f57e4b5448f85d4d3e97c599bc955a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907bbac40fe22113bdf19023f1831faada7b7ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907bbac40fe22113bdf19023f1831faada7b7ec0", "html_url": "https://github.com/rust-lang/rust/commit/907bbac40fe22113bdf19023f1831faada7b7ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907bbac40fe22113bdf19023f1831faada7b7ec0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61f5397dbb1c0b7e007eb3a09161c590deda336", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61f5397dbb1c0b7e007eb3a09161c590deda336", "html_url": "https://github.com/rust-lang/rust/commit/e61f5397dbb1c0b7e007eb3a09161c590deda336"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "bc4428d2cb50dfd05f79e844b942c63f984f863d", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/907bbac40fe22113bdf19023f1831faada7b7ec0/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907bbac40fe22113bdf19023f1831faada7b7ec0/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=907bbac40fe22113bdf19023f1831faada7b7ec0", "patch": "@@ -18,48 +18,46 @@ macro_rules! p {\n }\n \n pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n-    Some(match name {\n-        \"mm_movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n-        \"mm_movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n-        \"mm_movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n-\n-        \"mm_rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n-        \"mm_rcp_ps\" => p!(\"sse.rcp.ps\", (f32x4) -> f32x4),\n-\n-        \"mm_sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n-        \"mm_sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n-\n-        \"mm_max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n-        \"mm_max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n-\n-        \"mm_min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n-        \"mm_min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n-\n-        \"mm_shuffle_epi8\" => p!(\"ssse3.pshuf.b.128\", (i8x16, i8x16) -> i8x16),\n-\n-        \"mm_adds_epi16\" => p!(\"sse2.padds.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_adds_epi8\" => p!(\"sse2.padds.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_adds_epu16\" => p!(\"sse2.paddus.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_adds_epu8\" => p!(\"sse2.paddus.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_avg_epu16\" => p!(\"sse2.pavg.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_avg_epu8\" => p!(\"sse2.pavg.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_madd_epi16\" => p!(\"sse2.pmadd.wd\", (i16x8, i16x8) -> i32x4),\n-        \"mm_max_epi16\" => p!(\"sse2.pmaxs.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_max_epu8\" => p!(\"sse2.pmaxu.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_min_epi16\" => p!(\"sse2.pmins.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_min_epu8\" => p!(\"sse2.pminu.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_mul_epu32\" => p!(\"sse2.pmulu.dq\", (i32x4, i32x4) -> i64x2),\n-        \"mm_mulhi_epi16\" => p!(\"sse2.pmulh.w\", (i8x16, i8x16) -> i8x16),\n-        \"mm_mulhi_epu16\" => p!(\"sse2.pmulhu.w\", (i8x16, i8x16) -> i8x16),\n-        \"mm_packs_epi16\" => p!(\"sse2.packsswb.128\", (i16x8, i16x8) -> i8x16),\n-        \"mm_packs_epi32\" => p!(\"sse2.packssdw.128\", (i32x4, i32x4) -> i16x8),\n-        \"mm_packus_epi16\" => p!(\"sse2.packuswb.128\", (i16x8, i16x8) -> i8x16),\n-        \"mm_sad_epu8\" => p!(\"sse2.psad.bw\", (i8x16, i8x16) -> i64x2),\n-        \"mm_subs_epi16\" => p!(\"sse2.psubs.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_subs_epi8\" => p!(\"sse2.psubs.b\", (i8x16, i8x16) -> i8x16),\n-        \"mm_subs_epu16\" => p!(\"sse2.psubus.w\", (i16x8, i16x8) -> i16x8),\n-        \"mm_subs_epu8\" => p!(\"sse2.psubus.b\", (i8x16, i8x16) -> i8x16),\n-\n+    if !name.starts_with(\"mm_\") { return None }\n+\n+    Some(match &name[\"mm_\".len()..] {\n+        \"sqrt_ps\" => plain!(\"llvm.sqrt.v4f32\", (f32x4) -> f32x4),\n+        \"sqrt_pd\" => plain!(\"llvm.sqrt.v2f64\", (f64x2) -> f64x2),\n+\n+        \"movemask_ps\" => p!(\"sse.movmsk.ps\", (f32x4) -> i32),\n+        \"max_ps\" => p!(\"sse.max.ps\", (f32x4, f32x4) -> f32x4),\n+        \"min_ps\" => p!(\"sse.min.ps\", (f32x4, f32x4) -> f32x4),\n+        \"rsqrt_ps\" => p!(\"sse.rsqrt.ps\", (f32x4) -> f32x4),\n+        \"rcp_ps\" => p!(\"sse.rcp.ps\", (f32x4) -> f32x4),\n+\n+        \"adds_epi16\" => p!(\"sse2.padds.w\", (i16x8, i16x8) -> i16x8),\n+        \"adds_epi8\" => p!(\"sse2.padds.b\", (i8x16, i8x16) -> i8x16),\n+        \"adds_epu16\" => p!(\"sse2.paddus.w\", (i16x8, i16x8) -> i16x8),\n+        \"adds_epu8\" => p!(\"sse2.paddus.b\", (i8x16, i8x16) -> i8x16),\n+        \"avg_epu16\" => p!(\"sse2.pavg.w\", (i16x8, i16x8) -> i16x8),\n+        \"avg_epu8\" => p!(\"sse2.pavg.b\", (i8x16, i8x16) -> i8x16),\n+        \"madd_epi16\" => p!(\"sse2.pmadd.wd\", (i16x8, i16x8) -> i32x4),\n+        \"max_epi16\" => p!(\"sse2.pmaxs.w\", (i16x8, i16x8) -> i16x8),\n+        \"max_epu8\" => p!(\"sse2.pmaxu.b\", (i8x16, i8x16) -> i8x16),\n+        \"max_pd\" => p!(\"sse2.max.pd\", (f64x2, f64x2) -> f64x2),\n+        \"min_epi16\" => p!(\"sse2.pmins.w\", (i16x8, i16x8) -> i16x8),\n+        \"min_epu8\" => p!(\"sse2.pminu.b\", (i8x16, i8x16) -> i8x16),\n+        \"min_pd\" => p!(\"sse2.min.pd\", (f64x2, f64x2) -> f64x2),\n+        \"movemask_pd\" => p!(\"sse2.movmsk.pd\", (f64x2) -> i32),\n+        \"movemask_epi8\" => p!(\"sse2.pmovmskb.128\", (i8x16) -> i32),\n+        \"mul_epu32\" => p!(\"sse2.pmulu.dq\", (i32x4, i32x4) -> i64x2),\n+        \"mulhi_epi16\" => p!(\"sse2.pmulh.w\", (i8x16, i8x16) -> i8x16),\n+        \"mulhi_epu16\" => p!(\"sse2.pmulhu.w\", (i8x16, i8x16) -> i8x16),\n+        \"packs_epi16\" => p!(\"sse2.packsswb.128\", (i16x8, i16x8) -> i8x16),\n+        \"packs_epi32\" => p!(\"sse2.packssdw.128\", (i32x4, i32x4) -> i16x8),\n+        \"packus_epi16\" => p!(\"sse2.packuswb.128\", (i16x8, i16x8) -> i8x16),\n+        \"sad_epu8\" => p!(\"sse2.psad.bw\", (i8x16, i8x16) -> i64x2),\n+        \"subs_epi16\" => p!(\"sse2.psubs.w\", (i16x8, i16x8) -> i16x8),\n+        \"subs_epi8\" => p!(\"sse2.psubs.b\", (i8x16, i8x16) -> i8x16),\n+        \"subs_epu16\" => p!(\"sse2.psubus.w\", (i16x8, i16x8) -> i16x8),\n+        \"subs_epu8\" => p!(\"sse2.psubus.b\", (i8x16, i8x16) -> i8x16),\n+\n+        \"shuffle_epi8\" => p!(\"ssse3.pshuf.b.128\", (i8x16, i8x16) -> i8x16),\n         _ => return None\n     })\n }"}]}