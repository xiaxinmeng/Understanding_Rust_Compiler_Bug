{"sha": "0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOWIyYjQwMmU5M2JmYjFjNDMxODE3N2VlNjZiOGJlMGY5MTQzZDQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-10T20:02:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-10T20:02:16Z"}, "message": "Merge pull request #2267 from topecongiro/issue-2264\n\nRemove block() and block_only() wherever possible", "tree": {"sha": "c184c1221c5adb6b91dc1fdbf842aa61a768c176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c184c1221c5adb6b91dc1fdbf842aa61a768c176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaLZLICRBK7hj4Ov3rIwAAdHIIAJaRqor4CUFfVVfmqLxvhVw+\nJU+9p/qoh9SytYqs1jnInQwuxXLoSkeYr1+sO4yJd9Z3t8yI880HiR3K6ij+M0y7\nXuBeFdapdv9imTGcCcWTz9MA53i5qtqXh7xJevUPR/0DYXr7XW0DMv7tWaHKvwv4\ncHXhSUraBuWk3l1on3Y8BiCuLRvIQgy13f21eP9uCwqQALrVlHLeY2A4vqOliimp\nmexKayukeUCqAfn/hnRXJ2dlsvYPtnkBEj2zWUHlVb1zCgaqW4HDQctEA/3B3uk/\nFMdxVmYfmTN1IT3WjAciTC3EerXYfuKJcKqlfoVCuT5ruPrshQnfPq5CWz7wGYQ=\n=c6jP\n-----END PGP SIGNATURE-----\n", "payload": "tree c184c1221c5adb6b91dc1fdbf842aa61a768c176\nparent 08022ec1a34311e916d4dd28f4257dab9006bdde\nparent b29a3afb962244316f3a8cd03195760e710b123e\nauthor Nick Cameron <nrc@ncameron.org> 1512936136 +1300\ncommitter GitHub <noreply@github.com> 1512936136 +1300\n\nMerge pull request #2267 from topecongiro/issue-2264\n\nRemove block() and block_only() wherever possible"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "html_url": "https://github.com/rust-lang/rust/commit/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08022ec1a34311e916d4dd28f4257dab9006bdde", "url": "https://api.github.com/repos/rust-lang/rust/commits/08022ec1a34311e916d4dd28f4257dab9006bdde", "html_url": "https://github.com/rust-lang/rust/commit/08022ec1a34311e916d4dd28f4257dab9006bdde"}, {"sha": "b29a3afb962244316f3a8cd03195760e710b123e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a3afb962244316f3a8cd03195760e710b123e", "html_url": "https://github.com/rust-lang/rust/commit/b29a3afb962244316f3a8cd03195760e710b123e"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "f63ddd44c1daa887d0e03af2763ce60bb5e6ffd9", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "patch": "@@ -129,7 +129,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         let offset = trimmed_last_line_width(&parent_rewrite) + prefix_try_num;\n         match context.config.indent_style() {\n             IndentStyle::Visual => parent_shape.offset_left(overhead)?,\n-            IndentStyle::Block => parent_shape.block().offset_left(offset)?,\n+            IndentStyle::Block => parent_shape.offset_left(offset)?,\n         }\n     } else {\n         other_child_shape"}, {"sha": "cfc75664f30174bded8d3c83ca67502a1043ab7f", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "patch": "@@ -187,9 +187,7 @@ fn rewrite_closure_block(\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let block_shape = shape.block();\n-    let block_str = block.rewrite(context, block_shape)?;\n-    Some(format!(\"{} {}\", prefix, block_str))\n+    Some(format!(\"{} {}\", prefix, block.rewrite(context, shape)?))\n }\n \n // Return type is (prefix, extra_offset)"}, {"sha": "c337b68f4bfb8ef3b8ea399ae1049db14ca194b9", "filename": "src/expr.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "patch": "@@ -937,21 +937,16 @@ impl<'a> ControlFlow<'a> {\n         let offset = self.keyword.len() + label_string.len() + 1;\n \n         let pat_expr_string = match self.cond {\n-            Some(cond) => {\n-                let cond_shape = match context.config.indent_style() {\n-                    IndentStyle::Visual => constr_shape.shrink_left(offset)?,\n-                    IndentStyle::Block => constr_shape.offset_left(offset)?,\n-                };\n-                rewrite_pat_expr(\n-                    context,\n-                    self.pat,\n-                    cond,\n-                    self.matcher,\n-                    self.connector,\n-                    self.keyword,\n-                    cond_shape,\n-                )?\n-            }\n+            Some(cond) => rewrite_pat_expr(\n+                context,\n+                self.pat,\n+                cond,\n+                self.matcher,\n+                self.connector,\n+                self.keyword,\n+                constr_shape,\n+                offset,\n+            )?,\n             None => String::new(),\n         };\n \n@@ -967,8 +962,8 @@ impl<'a> ControlFlow<'a> {\n             .max_width()\n             .checked_sub(constr_shape.used_width() + offset + brace_overhead)\n             .unwrap_or(0);\n-        let force_newline_brace = context.config.indent_style() == IndentStyle::Block\n-            && (pat_expr_string.contains('\\n') || pat_expr_string.len() > one_line_budget)\n+        let force_newline_brace = (pat_expr_string.contains('\\n')\n+            || pat_expr_string.len() > one_line_budget)\n             && !last_line_extendable(&pat_expr_string);\n \n         // Try to format if-else on single line.\n@@ -1061,8 +1056,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         debug!(\"ControlFlow::rewrite {:?} {:?}\", self, shape);\n \n-        let alt_block_sep =\n-            String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+        let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n         let (cond_str, used_width) = self.rewrite_cond(context, shape, &alt_block_sep)?;\n         // If `used_width` is 0, it indicates that whole control flow is written in a single line.\n         if used_width == 0 {\n@@ -1268,7 +1262,7 @@ fn rewrite_match(\n         IndentStyle::Block => cond_shape.offset_left(6)?,\n     };\n     let cond_str = cond.rewrite(context, cond_shape)?;\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n     let block_sep = match context.config.control_brace_style() {\n         ControlBraceStyle::AlwaysNextLine => &alt_block_sep,\n         _ if last_line_extendable(&cond_str) => \" \",\n@@ -1547,7 +1541,7 @@ fn rewrite_match_body(\n     };\n \n     let comma = arm_comma(context.config, body, is_last);\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.to_string(context.config);\n     let alt_block_sep = alt_block_sep.as_str();\n \n     let combine_orig_body = |body_str: &str| {\n@@ -1705,23 +1699,25 @@ fn rewrite_pat_expr(\n     connector: &str,\n     keyword: &str,\n     shape: Shape,\n+    offset: usize,\n ) -> Option<String> {\n     debug!(\"rewrite_pat_expr {:?} {:?} {:?}\", shape, pat, expr);\n+    let cond_shape = shape.offset_left(offset)?;\n     if let Some(pat) = pat {\n         let matcher = if matcher.is_empty() {\n             matcher.to_owned()\n         } else {\n             format!(\"{} \", matcher)\n         };\n-        let pat_shape = shape\n+        let pat_shape = cond_shape\n             .offset_left(matcher.len())?\n             .sub_width(connector.len())?;\n         let pat_string = pat.rewrite(context, pat_shape)?;\n         let result = format!(\"{}{}{}\", matcher, pat_string, connector);\n-        return rewrite_assign_rhs(context, result, expr, shape);\n+        return rewrite_assign_rhs(context, result, expr, cond_shape);\n     }\n \n-    let expr_rw = expr.rewrite(context, shape);\n+    let expr_rw = expr.rewrite(context, cond_shape);\n     // The expression may (partially) fit on the current line.\n     // We do not allow splitting between `if` and condition.\n     if keyword == \"if\" || expr_rw.is_some() {\n@@ -2786,10 +2782,9 @@ pub fn choose_rhs<R: Rewrite>(\n         _ => {\n             // Expression did not fit on the same line as the identifier.\n             // Try splitting the line and see if that works better.\n-            let new_shape = Shape::indented(\n-                shape.block().indent.block_indent(context.config),\n-                context.config,\n-            ).sub_width(shape.rhs_overhead(context.config))?;\n+            let new_shape =\n+                Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                    .sub_width(shape.rhs_overhead(context.config))?;\n             let new_rhs = expr.rewrite(context, new_shape);\n             let new_indent_str = &new_shape.indent.to_string(context.config);\n "}, {"sha": "466f684088785095d4bbd8c5088e79d43b86a592", "filename": "tests/source/chains-visual.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/tests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/tests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-visual.rs?ref=0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "patch": "@@ -143,3 +143,17 @@ fn issue1434() {\n         })?;\n     }\n }\n+\n+fn issue2264() {\n+    {\n+        something.function()\n+            .map(|| {\n+                if let a_very_very_very_very_very_very_very_very_long_variable =\n+                    compute_this_variable()\n+                {\n+                    println!(\"Hello\");\n+                }\n+            })\n+            .collect();\n+    }\n+}"}, {"sha": "b842d73c99f744c2d845f69daf0210d1a2d3d06e", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9b2b402e93bfb1c4318177ee66b8be0f9143d4/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=0c9b2b402e93bfb1c4318177ee66b8be0f9143d4", "patch": "@@ -143,3 +143,17 @@ fn issue1434() {\n             })?;\n     }\n }\n+\n+fn issue2264() {\n+    {\n+        something.function()\n+                 .map(|| {\n+                          if let a_very_very_very_very_very_very_very_very_long_variable =\n+                              compute_this_variable()\n+                          {\n+                              println!(\"Hello\");\n+                          }\n+                      })\n+                 .collect();\n+    }\n+}"}]}