{"sha": "76d18cfb8945f824c8777e04981e930d2037954e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDE4Y2ZiODk0NWY4MjRjODc3N2UwNDk4MWU5MzBkMjAzNzk1NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T11:20:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T11:20:32Z"}, "message": "Auto merge of #88527 - m-ou-se:rollup-az6xtc5, r=m-ou-se\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #88394 (Document `std::env::current_exe` possible rename behaviour)\n - #88406 (Tait nest infer test)\n - #88408 (Add inference cycle TAIT test)\n - #88409 (Add auto trait leakage TAIT test)\n - #88413 (Add weird return types TAIT test)\n - #88450 (fix(rustc_parse): correct span in `maybe_whole_expr!`)\n - #88462 (rustdoc: Stop using resolver for macro loading)\n - #88465 (Adding examples to docs of `std::time` module)\n - #88486 (Remove unused arena macro args)\n - #88492 (Use MaybeUninit::write in functor.rs)\n - #88496 (Fix prelude collision lint suggestion for generics with lifetimes)\n - #88497 (Fix prelude collision suggestions for glob imported traits. )\n - #88503 (Warn when [T; N].into_iter() is ambiguous in the new edition. )\n - #88509 (Don't suggest extra <> in dyn suggestion.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9f4dba058543f58edd2637684793081670592a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4dba058543f58edd2637684793081670592a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d18cfb8945f824c8777e04981e930d2037954e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d18cfb8945f824c8777e04981e930d2037954e", "html_url": "https://github.com/rust-lang/rust/commit/76d18cfb8945f824c8777e04981e930d2037954e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d18cfb8945f824c8777e04981e930d2037954e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe37929e4cba2c5c21e6805805769630c736bc3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe37929e4cba2c5c21e6805805769630c736bc3d", "html_url": "https://github.com/rust-lang/rust/commit/fe37929e4cba2c5c21e6805805769630c736bc3d"}, {"sha": "feafda8cd3f98e5ebb0a2637918180722dec4799", "url": "https://api.github.com/repos/rust-lang/rust/commits/feafda8cd3f98e5ebb0a2637918180722dec4799", "html_url": "https://github.com/rust-lang/rust/commit/feafda8cd3f98e5ebb0a2637918180722dec4799"}], "stats": {"total": 787, "additions": 698, "deletions": 89}, "files": [{"sha": "1dfe710eceec5ee0986830c95b0f2373a27c48ec", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -4405,6 +4405,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_lint\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\","}, {"sha": "6d5f47aceeb91e9020674ce2078a9e9e18426eed", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -635,7 +635,7 @@ pub macro which_arena_for_type {\n }\n \n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro declare_arena([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n     #[derive(Default)]\n     pub struct Arena<$tcx> {\n         pub dropless: $crate::DroplessArena,"}, {"sha": "0133acfee1008b9deac792b8f048769bf6583134", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -84,7 +84,7 @@ mod path;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena, [], 'tcx);\n+rustc_hir::arena_types!(rustc_arena::declare_arena, 'tcx);\n \n struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes."}, {"sha": "5b83ae31247661e7ecf7969b124d909499f568ed", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -26,7 +26,7 @@ impl<T> IdFunctor for Box<T> {\n             // inverse of `Box::assume_init()` and should be safe.\n             let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`.\n-            ptr::write(raw.as_mut_ptr(), f(value));\n+            raw.write(f(value));\n             // SAFETY: We just initialized `raw`.\n             raw.assume_init()\n         }"}, {"sha": "3e8b98e9f5493dd146664a8f2820670e56530aaa", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -9,8 +9,8 @@\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $args:tt, $tcx:lifetime) => (\n-        $macro!($args, [\n+    ($macro:path, $tcx:lifetime) => (\n+        $macro!([\n             // HIR types\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,"}, {"sha": "ef4bda666ba062c7bb033084109649cda82bab23", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -62,6 +62,8 @@ mod traits;\n mod types;\n mod unused;\n \n+pub use array_into_iter::ARRAY_INTO_ITER;\n+\n use rustc_ast as ast;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;"}, {"sha": "59db2c6636ff9e8495c612ab69c737a7b962b446", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -9,8 +9,8 @@\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $args:tt, $tcx:lifetime) => (\n-        $macro!($args, [\n+    ($macro:path, $tcx:lifetime) => (\n+        $macro!([\n             [] layouts: rustc_target::abi::Layout,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n@@ -109,4 +109,4 @@ macro_rules! arena_types {\n     )\n }\n \n-arena_types!(rustc_arena::declare_arena, [], 'tcx);\n+arena_types!(rustc_arena::declare_arena, 'tcx);"}, {"sha": "4edb6a327b0352f60fd61f148e8e491ee8507600", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -437,15 +437,15 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         $(\n             impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n         )*\n     }\n }\n \n-rustc_hir::arena_types!(impl_arena_allocatable_decoders, [], 'tcx);\n-arena_types!(impl_arena_allocatable_decoders, [], 'tcx);\n+rustc_hir::arena_types!(impl_arena_allocatable_decoders, 'tcx);\n+arena_types!(impl_arena_allocatable_decoders, 'tcx);\n \n #[macro_export]\n macro_rules! implement_ty_decoder {"}, {"sha": "a1d3e9adba013e91d0ecd36745bd928bac6d32cf", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -41,7 +41,7 @@ macro_rules! maybe_whole_expr {\n                     let path = path.clone();\n                     $p.bump();\n                     return Ok($p.mk_expr(\n-                        $p.token.span,\n+                        $p.prev_token.span,\n                         ExprKind::Path(None, path),\n                         AttrVec::new(),\n                     ));\n@@ -50,7 +50,7 @@ macro_rules! maybe_whole_expr {\n                     let block = block.clone();\n                     $p.bump();\n                     return Ok($p.mk_expr(\n-                        $p.token.span,\n+                        $p.prev_token.span,\n                         ExprKind::Block(block, None),\n                         AttrVec::new(),\n                     ));"}, {"sha": "dd76a5e4b99b235b0ba395fa38e95776b3029f3e", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -26,3 +26,4 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n+rustc_lint = { path = \"../rustc_lint\" }"}, {"sha": "17e0c42440c219d35a0df6014ffbdfe07ad4de12", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -914,7 +914,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n         if result.is_ok() {\n-            self.maybe_lint_bare_trait(qpath, hir_id);\n+            self.maybe_lint_bare_trait(qpath, hir_id, span);\n             self.register_wf_obligation(ty.into(), qself.span, traits::WellFormed(None));\n         }\n \n@@ -927,18 +927,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId) {\n+    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId, span: Span) {\n         if let QPath::TypeRelative(self_ty, _) = qpath {\n             if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n                 self_ty.kind\n             {\n                 let msg = \"trait objects without an explicit `dyn` are deprecated\";\n                 let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span) {\n                     Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n-                        (format!(\"<dyn ({})>\", s), Applicability::MachineApplicable)\n+                        (format!(\"dyn ({})\", s), Applicability::MachineApplicable)\n                     }\n-                    Ok(s) => (format!(\"<dyn {}>\", s), Applicability::MachineApplicable),\n-                    Err(_) => (\"<dyn <type>>\".to_string(), Applicability::HasPlaceholders),\n+                    Ok(s) => (format!(\"dyn {}\", s), Applicability::MachineApplicable),\n+                    Err(_) => (\"dyn <type>\".to_string(), Applicability::HasPlaceholders),\n+                };\n+                // Wrap in `<..>` if it isn't already.\n+                let sugg = match self.tcx.sess.source_map().span_to_snippet(span) {\n+                    Ok(s) if s.starts_with('<') => sugg,\n+                    _ => format!(\"<{}>\", sugg),\n                 };\n                 let replace = String::from(\"use `dyn`\");\n                 if self.sess().edition() >= Edition::Edition2021 {"}, {"sha": "1347f56258ea16ab8122c146e832c6b5f3173602", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -5,9 +5,9 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{Adt, Ref, Ty};\n+use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n-use rustc_span::symbol::kw::Underscore;\n+use rustc_span::symbol::kw::{Empty, Underscore};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -38,10 +38,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // These are the method names that were added to prelude in Rust 2021\n-        if !matches!(segment.ident.name, sym::try_into) {\n-            return;\n-        }\n+        let prelude_or_array_lint = match segment.ident.name {\n+            // `try_into` was added to the prelude in Rust 2021.\n+            sym::try_into => RUST_2021_PRELUDE_COLLISIONS,\n+            // `into_iter` wasn't added to the prelude,\n+            // but `[T; N].into_iter()` doesn't resolve to IntoIterator::into_iter\n+            // before Rust 2021, which results in the same problem.\n+            // It is only a problem for arrays.\n+            sym::into_iter if let Array(..) = self_ty.kind() => {\n+                // In this case, it wasn't really a prelude addition that was the problem.\n+                // Instead, the problem is that the array-into_iter hack will no longer apply in Rust 2021.\n+                rustc_lint::ARRAY_INTO_ITER\n+            }\n+            _ => return,\n+        };\n \n         // No need to lint if method came from std/core, as that will now be in the prelude\n         if matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n@@ -69,7 +79,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Inherent impls only require not relying on autoref and autoderef in order to\n             // ensure that the trait implementation won't be used\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 self_expr.hir_id,\n                 self_expr.span,\n                 |lint| {\n@@ -130,7 +140,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // trait implementations require full disambiguation to not clash with the new prelude\n             // additions (i.e. convert from dot-call to fully-qualified call)\n             self.tcx.struct_span_lint_hir(\n-                RUST_2021_PRELUDE_COLLISIONS,\n+                prelude_or_array_lint,\n                 call_expr.hir_id,\n                 call_expr.span,\n                 |lint| {\n@@ -239,47 +249,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let trait_path = self.trait_path_or_bare_name(span, expr_id, pick.item.container.id());\n             let trait_generics = self.tcx.generics_of(pick.item.container.id());\n \n-            let parameter_count = trait_generics.count() - (trait_generics.has_self as usize);\n-            let trait_name = if parameter_count == 0 {\n-                trait_path\n-            } else {\n-                format!(\n-                    \"{}<{}>\",\n-                    trait_path,\n-                    std::iter::repeat(\"_\").take(parameter_count).collect::<Vec<_>>().join(\", \")\n-                )\n-            };\n+            let trait_name =\n+                if trait_generics.params.len() <= trait_generics.has_self as usize {\n+                    trait_path\n+                } else {\n+                    let counts = trait_generics.own_counts();\n+                    format!(\n+                        \"{}<{}>\",\n+                        trait_path,\n+                        std::iter::repeat(\"'_\")\n+                            .take(counts.lifetimes)\n+                            .chain(std::iter::repeat(\"_\").take(\n+                                counts.types + counts.consts - trait_generics.has_self as usize\n+                            ))\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    )\n+                };\n \n             let mut lint = lint.build(&format!(\n                 \"trait-associated function `{}` will become ambiguous in Rust 2021\",\n                 method_name.name\n             ));\n \n-            let self_ty_name = self\n+            let mut self_ty_name = self\n                 .sess()\n                 .source_map()\n                 .span_to_snippet(self_ty_span)\n                 .unwrap_or_else(|_| self_ty.to_string());\n \n-            let self_ty_generics_count = match self_ty.kind() {\n-                // Get the number of generics the self type has (if an Adt) unless we can determine that\n-                // the user has written the self type with generics already which we (naively) do by looking\n-                // for a \"<\" in `self_ty_name`.\n-                Adt(def, _) if !self_ty_name.contains('<') => self.tcx.generics_of(def.did).count(),\n-                _ => 0,\n-            };\n-            let self_ty_generics = if self_ty_generics_count > 0 {\n-                format!(\"<{}>\", vec![\"_\"; self_ty_generics_count].join(\", \"))\n-            } else {\n-                String::new()\n-            };\n+            // Get the number of generics the self type has (if an Adt) unless we can determine that\n+            // the user has written the self type with generics already which we (naively) do by looking\n+            // for a \"<\" in `self_ty_name`.\n+            if !self_ty_name.contains('<') {\n+                if let Adt(def, _) = self_ty.kind() {\n+                    let generics = self.tcx.generics_of(def.did);\n+                    if !generics.params.is_empty() {\n+                        let counts = generics.own_counts();\n+                        self_ty_name += &format!(\n+                            \"<{}>\",\n+                            std::iter::repeat(\"'_\")\n+                                .take(counts.lifetimes)\n+                                .chain(std::iter::repeat(\"_\").take(counts.types + counts.consts))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n+                        );\n+                    }\n+                }\n+            }\n             lint.span_suggestion(\n                 span,\n                 \"disambiguate the associated function\",\n-                format!(\n-                    \"<{}{} as {}>::{}\",\n-                    self_ty_name, self_ty_generics, trait_name, method_name.name,\n-                ),\n+                format!(\"<{} as {}>::{}\", self_ty_name, trait_name, method_name.name,),\n                 Applicability::MachineApplicable,\n             );\n \n@@ -322,7 +343,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter_map(|item| if item.ident.name != Underscore { Some(item.ident) } else { None })\n             .next();\n         if let Some(any_id) = any_id {\n-            return Some(format!(\"{}\", any_id));\n+            if any_id.name == Empty {\n+                // Glob import, so just use its name.\n+                return None;\n+            } else {\n+                return Some(format!(\"{}\", any_id));\n+            }\n         }\n \n         // All that is left is `_`! We need to use the full path. It doesn't matter which one we pick,"}, {"sha": "35b740cd74372b9a03a1343bf9445c01d7cb9a5a", "filename": "library/core/src/time.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -2,14 +2,21 @@\n \n //! Temporal quantification.\n //!\n-//! Example:\n+//! # Examples:\n+//!\n+//! There are multiple ways to create a new [`Duration`]:\n //!\n //! ```\n-//! use std::time::Duration;\n+//! # use std::time::Duration;\n+//! let five_seconds = Duration::from_secs(5);\n+//! assert_eq!(five_seconds, Duration::from_millis(5_000));\n+//! assert_eq!(five_seconds, Duration::from_micros(5_000_000));\n+//! assert_eq!(five_seconds, Duration::from_nanos(5_000_000_000));\n //!\n-//! let five_seconds = Duration::new(5, 0);\n-//! // both declarations are equivalent\n-//! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n+//! let ten_seconds = Duration::from_secs(10);\n+//! let seven_nanos = Duration::from_nanos(7);\n+//! let total = ten_seconds + seven_nanos;\n+//! assert_eq!(total, Duration::new(10, 7));\n //! ```\n \n use crate::fmt;"}, {"sha": "e343073d2150879d87cab768a35cece48d98510f", "filename": "library/std/src/env.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -616,6 +616,9 @@ pub fn temp_dir() -> PathBuf {\n /// return the path of the symbolic link and other platforms will return the\n /// path of the symbolic link\u2019s target.\n ///\n+/// If the executable is renamed while it is running, platforms may return the\n+/// path at the time it was loaded instead of the new path.\n+///\n /// # Errors\n ///\n /// Acquiring the path of the current executable is a platform-specific operation"}, {"sha": "e9207ee36171b18d44613c17583cf0a77f0232e0", "filename": "library/std/src/time.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -1,13 +1,32 @@\n //! Temporal quantification.\n //!\n-//! Example:\n+//! # Examples:\n //!\n+//! There are multiple ways to create a new [`Duration`]:\n+//!\n+//! ```\n+//! # use std::time::Duration;\n+//! let five_seconds = Duration::from_secs(5);\n+//! assert_eq!(five_seconds, Duration::from_millis(5_000));\n+//! assert_eq!(five_seconds, Duration::from_micros(5_000_000));\n+//! assert_eq!(five_seconds, Duration::from_nanos(5_000_000_000));\n+//!\n+//! let ten_seconds = Duration::from_secs(10);\n+//! let seven_nanos = Duration::from_nanos(7);\n+//! let total = ten_seconds + seven_nanos;\n+//! assert_eq!(total, Duration::new(10, 7));\n //! ```\n-//! use std::time::Duration;\n //!\n-//! let five_seconds = Duration::new(5, 0);\n-//! // both declarations are equivalent\n-//! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n+//! Using [`Instant`] to calculate how long a function took to run:\n+//!\n+//! ```ignore (incomplete)\n+//! let now = Instant::now();\n+//!\n+//! // Calling a slow function, it may take a while\n+//! slow_function();\n+//!\n+//! let elapsed_time = now.elapsed();\n+//! println!(\"Running slow_function() took {} seconds.\", elapsed_time.as_secs());\n //! ```\n \n #![stable(feature = \"time\", since = \"1.3.0\")]\n@@ -26,7 +45,7 @@ use crate::sys_common::FromInner;\n pub use core::time::Duration;\n \n /// A measurement of a monotonically nondecreasing clock.\n-/// Opaque and useful only with `Duration`.\n+/// Opaque and useful only with [`Duration`].\n ///\n /// Instants are always guaranteed to be no less than any previously measured\n /// instant when created, and are often useful for tasks such as measuring"}, {"sha": "0c81a5584301355e4d70e84c4b8139751c0d5b6b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n-use rustc_metadata::creader::LoadedMacro;\n+use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -179,7 +179,7 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: ItemType)\n     let fqn = if let ItemType::Macro = kind {\n         // Check to see if it is a macro 2.0 or built-in macro\n         if matches!(\n-            cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())),\n+            CStore::from_tcx(cx.tcx).load_macro_untracked(did, cx.sess()),\n             LoadedMacro::MacroDef(def, _)\n                 if matches!(&def.kind, ast::ItemKind::MacroDef(ast_def)\n                     if !ast_def.macro_rules)\n@@ -558,7 +558,7 @@ fn build_macro(\n     import_def_id: Option<DefId>,\n ) -> clean::ItemKind {\n     let imported_from = cx.tcx.crate_name(def_id.krate);\n-    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(def_id, cx.sess())) {\n+    match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n                 clean::MacroItem(clean::Macro {"}, {"sha": "25caa6a8030ff5a5d587e2f784226ad2139a9444", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.fixed?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,23 @@\n+// See https://github.com/rust-lang/rust/issues/88508\n+// run-rustfix\n+// edition:2018\n+#![deny(bare_trait_objects)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+\n+#[derive(Debug)]\n+pub struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        <dyn fmt::Debug>::fmt(self, f)\n+        //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+        //~| WARNING this is accepted in the current edition\n+        //~| ERROR trait objects without an explicit `dyn` are deprecated\n+        //~| WARNING this is accepted in the current edition\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cf72da2b61ec21907cc72dcc955c1aeeb0c18055", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,23 @@\n+// See https://github.com/rust-lang/rust/issues/88508\n+// run-rustfix\n+// edition:2018\n+#![deny(bare_trait_objects)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+\n+#[derive(Debug)]\n+pub struct Foo;\n+\n+impl fmt::Display for Foo {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        <fmt::Debug>::fmt(self, f)\n+        //~^ ERROR trait objects without an explicit `dyn` are deprecated\n+        //~| WARNING this is accepted in the current edition\n+        //~| ERROR trait objects without an explicit `dyn` are deprecated\n+        //~| WARNING this is accepted in the current edition\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef0f5b7f59db9d3a4bbfcb967f6b461a3a5ec9a0", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,25 @@\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-angle-brackets.rs:15:10\n+   |\n+LL |         <fmt::Debug>::fmt(self, f)\n+   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dyn-angle-brackets.rs:4:9\n+   |\n+LL | #![deny(bare_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+\n+error: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/dyn-angle-brackets.rs:15:10\n+   |\n+LL |         <fmt::Debug>::fmt(self, f)\n+   |          ^^^^^^^^^^ help: use `dyn`: `dyn fmt::Debug`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b88780876db064c7397d7abd10c05c354041eb61", "filename": "src/test/ui/parser/issue-87812-path.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! foo {\n+    ( $f:path ) => {{\n+        let _: usize = $f; //~ERROR\n+    }};\n+}\n+\n+struct Baz;\n+\n+fn main() {\n+    foo!(Baz);\n+}"}, {"sha": "0c8e6fdd3076a44b5b51de58d6feafe5a89c6c50", "filename": "src/test/ui/parser/issue-87812-path.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87812-path.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-87812-path.rs:3:24\n+   |\n+LL |         let _: usize = $f;\n+   |                -----   ^^ expected `usize`, found struct `Baz`\n+   |                |\n+   |                expected due to this\n+...\n+LL |     foo!(Baz);\n+   |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0ba87b995443f4e73bc3b2433458492f0626fdbb", "filename": "src/test/ui/parser/issue-87812.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87812.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,13 @@\n+#![deny(break_with_label_and_loop)]\n+\n+macro_rules! foo {\n+    ( $f:block ) => {\n+        '_l: loop {\n+            break '_l $f; //~ERROR\n+        }\n+    };\n+}\n+\n+fn main() {\n+    let x = foo!({ 3 });\n+}"}, {"sha": "d61ee23a50b5b3aad0c30dd952e907818d781ea1", "filename": "src/test/ui/parser/issue-87812.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Fparser%2Fissue-87812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-87812.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,22 @@\n+error: this labeled break expression is easy to confuse with an unlabeled break with a labeled value expression\n+  --> $DIR/issue-87812.rs:6:13\n+   |\n+LL |             break '_l $f;\n+   |             ^^^^^^^^^^^^\n+...\n+LL |     let x = foo!({ 3 });\n+   |             ----------- in this macro invocation\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-87812.rs:1:9\n+   |\n+LL | #![deny(break_with_label_and_loop)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: wrap this expression in parentheses\n+   |\n+LL |             break '_l ($f);\n+   |                       +  +\n+\n+error: aborting due to previous error\n+"}, {"sha": "76f661baed7509ac41b280d3d683e63093ce890b", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.fixed?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,27 @@\n+// See https://github.com/rust-lang/rust/issues/88475\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(array_into_iter)]\n+#![allow(unused)]\n+\n+struct FooIter;\n+\n+trait MyIntoIter {\n+    fn into_iter(self) -> FooIter;\n+}\n+\n+impl<T, const N: usize> MyIntoIter for [T; N] {\n+    fn into_iter(self) -> FooIter {\n+        FooIter\n+    }\n+}\n+\n+struct Point;\n+\n+pub fn main() {\n+    let points: [Point; 1] = [Point];\n+    let y = MyIntoIter::into_iter(points);\n+    //~^ WARNING trait method `into_iter` will become ambiguous in Rust 2021\n+    //~| WARNING this changes meaning in Rust 2021\n+}"}, {"sha": "83fbf8f6c218dbd26ee01eec431cc7e52a410cdf", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,27 @@\n+// See https://github.com/rust-lang/rust/issues/88475\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(array_into_iter)]\n+#![allow(unused)]\n+\n+struct FooIter;\n+\n+trait MyIntoIter {\n+    fn into_iter(self) -> FooIter;\n+}\n+\n+impl<T, const N: usize> MyIntoIter for [T; N] {\n+    fn into_iter(self) -> FooIter {\n+        FooIter\n+    }\n+}\n+\n+struct Point;\n+\n+pub fn main() {\n+    let points: [Point; 1] = [Point];\n+    let y = points.into_iter();\n+    //~^ WARNING trait method `into_iter` will become ambiguous in Rust 2021\n+    //~| WARNING this changes meaning in Rust 2021\n+}"}, {"sha": "fac8d21c7b48a2e0f11eade73539b34aa929b3c6", "filename": "src/test/ui/rust-2021/array-into-iter-ambiguous.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Farray-into-iter-ambiguous.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,16 @@\n+warning: trait method `into_iter` will become ambiguous in Rust 2021\n+  --> $DIR/array-into-iter-ambiguous.rs:24:13\n+   |\n+LL |     let y = points.into_iter();\n+   |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `MyIntoIter::into_iter(points)`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/array-into-iter-ambiguous.rs:5:9\n+   |\n+LL | #![warn(array_into_iter)]\n+   |         ^^^^^^^^^^^^^^^\n+   = warning: this changes meaning in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a1b6f5b16baf856d457a0a47b4db2d7e809b26e7", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        <U as PyTryFrom<'_, _>>::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "142ba552002fc97b51384001e8b6c5a9e52a8f9d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        U::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "14ad9b017b694400522f9822fbb7640aefe3971b", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,16 @@\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic-trait.rs:24:9\n+   |\n+LL |         U::try_from(self)\n+   |         ^^^^^^^^^^^ help: disambiguate the associated function: `<U as PyTryFrom<'_, _>>::try_from`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-generic-trait.rs:5:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "1bb9ba3777404415cfb8bfc325815ba4fbf6a78f", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -6,32 +6,32 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n }\n \n fn main() {\n-    <Generic<_, _> as MyFromIter>::from_iter(1);\n+    <Generic<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<i32, i32> as MyFromIter>::from_iter(1);\n+    <Generic::<'static, i32> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<_, _> as MyFromIter>::from_iter(1);\n+    <Generic::<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "d7f8affc61ade9e331c6a210b9cdf997dc8ec133", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -6,19 +6,19 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n@@ -28,10 +28,10 @@ fn main() {\n     Generic::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<i32, i32>::from_iter(1);\n+    Generic::<'static, i32>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<_, _>::from_iter(1);\n+    Generic::<'_, _>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "e1d3f3c0a4629d972a64b025c1163b68b6e1c47d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -2,7 +2,7 @@ warning: trait-associated function `from_iter` will become ambiguous in Rust 202\n   --> $DIR/future-prelude-collision-generic.rs:28:5\n    |\n LL |     Generic::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<_, _> as MyFromIter>::from_iter`\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<'_, _> as MyFromIter>::from_iter`\n    |\n note: the lint level is defined here\n   --> $DIR/future-prelude-collision-generic.rs:5:9\n@@ -15,17 +15,17 @@ LL | #![warn(rust_2021_prelude_collisions)]\n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:31:5\n    |\n-LL |     Generic::<i32, i32>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n+LL |     Generic::<'static, i32>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'static, i32> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:34:5\n    |\n-LL |     Generic::<_, _>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n+LL |     Generic::<'_, _>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'_, _> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>"}, {"sha": "15ccff7496e096a4d2ee1d1c1f945d3bdc53313e", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -56,4 +56,15 @@ mod c {\n     }\n }\n \n+mod d {\n+    use super::m::*;\n+\n+    fn main() {\n+        // See https://github.com/rust-lang/rust/issues/88471\n+        let _: u32 = TryIntoU32::try_into(3u8).unwrap();\n+        //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+        //~^^ WARNING this is accepted in the current edition\n+    }\n+}\n+\n fn main() {}"}, {"sha": "cdffcaf754541a33b99188e2ce12e6d6f24bd26e", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -56,4 +56,15 @@ mod c {\n     }\n }\n \n+mod d {\n+    use super::m::*;\n+\n+    fn main() {\n+        // See https://github.com/rust-lang/rust/issues/88471\n+        let _: u32 = 3u8.try_into().unwrap();\n+        //~^ WARNING trait method `try_into` will become ambiguous in Rust 2021\n+        //~^^ WARNING this is accepted in the current edition\n+    }\n+}\n+\n fn main() {}"}, {"sha": "56abb8abd4d15b9aa92d21b8a1c6b8fecc543503", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -30,5 +30,14 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n-warning: 3 warnings emitted\n+warning: trait method `try_into` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-imported.rs:64:22\n+   |\n+LL |         let _: u32 = 3u8.try_into().unwrap();\n+   |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`\n+   |\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: 4 warnings emitted\n "}, {"sha": "a1584581e6c45cc0cad384deccd8226ea878c169", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+mod m {\n+    type Foo = impl std::fmt::Debug;\n+\n+    pub fn foo() -> Foo {\n+        22_u32\n+    }\n+}\n+\n+fn is_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    is_send(m::foo());\n+}"}, {"sha": "745379efa6df90e41b136773128944fb2e6d9add", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,19 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+mod m {\n+    use std::rc::Rc;\n+\n+    type Foo = impl std::fmt::Debug;\n+\n+    pub fn foo() -> Foo {\n+        Rc::new(22_u32)\n+    }\n+}\n+\n+fn is_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    is_send(m::foo());\n+    //~^ ERROR: `Rc<u32>` cannot be sent between threads safely [E0277]\n+}"}, {"sha": "d60be4b1ccf9ca04289899c22b46222d5484dde4", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: `Rc<u32>` cannot be sent between threads safely\n+  --> $DIR/auto-trait-leakage2.rs:17:5\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                -------------------- within this `impl Debug`\n+...\n+LL |     is_send(m::foo());\n+   |     ^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n+   |\n+   = help: within `impl Debug`, the trait `Send` is not implemented for `Rc<u32>`\n+   = note: required because it appears within the type `impl Debug`\n+note: required by a bound in `is_send`\n+  --> $DIR/auto-trait-leakage2.rs:14:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5fb7a9473d3dfbc57cef2537e10e59729a553908", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,21 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// FIXME This should compile, but it currently doesn't\n+\n+mod m {\n+    type Foo = impl std::fmt::Debug;\n+    //~^ ERROR: cycle detected when computing type of `m::Foo::{opaque#0}` [E0391]\n+\n+    pub fn foo() -> Foo {\n+        22_u32\n+    }\n+\n+    pub fn bar() {\n+        is_send(foo());\n+    }\n+\n+    fn is_send<T: Send>(_: T) {}\n+}\n+\n+fn main() {}"}, {"sha": "ac7bbd272c7718b7a6d015455ca8474116369376", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage3.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage3.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,22 @@\n+error[E0391]: cycle detected when computing type of `m::Foo::{opaque#0}`\n+  --> $DIR/auto-trait-leakage3.rs:7:16\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires type-checking `m::bar`...\n+  --> $DIR/auto-trait-leakage3.rs:14:5\n+   |\n+LL |     pub fn bar() {\n+   |     ^^^^^^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n+   = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n+note: cycle used when checking item types in module `m`\n+  --> $DIR/auto-trait-leakage3.rs:6:1\n+   |\n+LL | mod m {\n+   | ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "c781e200bf8eeb5532ff513ad89e261ceef424d8", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,26 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+mod m {\n+    type Foo = impl std::fmt::Debug;\n+    //~^ ERROR: cycle detected when computing type of `m::Foo::{opaque#0}` [E0391]\n+\n+    // Cycle: error today, but it'd be nice if it eventually worked\n+\n+    pub fn foo() -> Foo {\n+        is_send(bar())\n+    }\n+\n+    pub fn bar() {\n+        is_send(foo()); // Today: error\n+    }\n+\n+    fn baz() {\n+        let f: Foo = 22_u32;\n+        //~^ ERROR: mismatched types [E0308]\n+    }\n+\n+    fn is_send<T: Send>(_: T) {}\n+}\n+\n+fn main() {}"}, {"sha": "ac0ca8e048cb076557724f76d77cb4cc17d4f506", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,37 @@\n+error[E0391]: cycle detected when computing type of `m::Foo::{opaque#0}`\n+  --> $DIR/inference-cycle.rs:5:16\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires type-checking `m::bar`...\n+  --> $DIR/inference-cycle.rs:14:5\n+   |\n+LL |     pub fn bar() {\n+   |     ^^^^^^^^^^^^\n+   = note: ...which requires evaluating trait selection obligation `impl std::fmt::Debug: std::marker::Send`...\n+   = note: ...which again requires computing type of `m::Foo::{opaque#0}`, completing the cycle\n+note: cycle used when checking item types in module `m`\n+  --> $DIR/inference-cycle.rs:4:1\n+   |\n+LL | mod m {\n+   | ^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/inference-cycle.rs:19:22\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                -------------------- the expected opaque type\n+...\n+LL |         let f: Foo = 22_u32;\n+   |                ---   ^^^^^^ expected opaque type, found `u32`\n+   |                |\n+   |                expected due to this\n+   |\n+   = note: expected opaque type `impl Debug`\n+                     found type `u32`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0391.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "efb88dabf34cd3a251504fc90c9a74107d99917f", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+use std::fmt::Debug;\n+\n+type FooX = impl Debug;\n+\n+trait Foo<A> { }\n+\n+impl Foo<()> for () { }\n+\n+fn foo() -> impl Foo<FooX> {\n+    ()\n+}\n+\n+fn main() { }"}, {"sha": "9b26a6529785236543e4c4b3c5c9d230a76d337b", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,19 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+use std::fmt::Debug;\n+\n+type FooX = impl Debug;\n+//~^ ERROR: could not find defining uses\n+\n+trait Foo<A> {}\n+\n+impl Foo<()> for () {}\n+impl Foo<u32> for () {}\n+\n+fn foo() -> impl Foo<FooX> {\n+    //~^ ERROR: the trait bound `(): Foo<impl Debug>` is not satisfied [E0277]\n+    ()\n+}\n+\n+fn main() {}"}, {"sha": "7e24ee644b1ceb7f5ff33aa1aa19b4b6bde5b835", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n+  --> $DIR/nested-tait-inference2.rs:14:13\n+   |\n+LL | fn foo() -> impl Foo<FooX> {\n+   |             ^^^^^^^^^^^^^^ the trait `Foo<impl Debug>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<()>>\n+             <() as Foo<u32>>\n+\n+error: could not find defining uses\n+  --> $DIR/nested-tait-inference2.rs:6:13\n+   |\n+LL | type FooX = impl Debug;\n+   |             ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "faad5ee956a1d30f5d4191342a4ab4a0e4e1cc13", "filename": "src/test/ui/type-alias-impl-trait/weird-return-types.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fweird-return-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d18cfb8945f824c8777e04981e930d2037954e/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fweird-return-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fweird-return-types.rs?ref=76d18cfb8945f824c8777e04981e930d2037954e", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+use std::future::Future;\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug;\n+\n+fn f() -> impl Future<Output = Foo> {\n+    async move { 22_u32 }\n+}\n+\n+fn main() {}"}]}