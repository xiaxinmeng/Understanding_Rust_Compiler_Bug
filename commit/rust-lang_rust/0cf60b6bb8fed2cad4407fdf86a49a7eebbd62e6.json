{"sha": "0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZjYwYjZiYjhmZWQyY2FkNDQwN2ZkZjg2YTQ5YTdlZWJiZDYyZTY=", "commit": {"author": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-09-09T04:05:32Z"}, "committer": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-10-01T01:40:07Z"}, "message": "Bound Any with 'static\n\nThis bound is already implicit through the AnyPrivate trait,\nbut since it is not explicit, you still have to write Box<Any + 'static>,\neven though Any can only be 'static.\n\nIntroducing the 'static bound here makes this bound explicit, making\nBox<Any> legal.", "tree": {"sha": "ea8d20b6fd0209a001afbb19e87daec888b5c955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8d20b6fd0209a001afbb19e87daec888b5c955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6", "html_url": "https://github.com/rust-lang/rust/commit/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6/comments", "author": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d1a22f76a774b2df3c904ceb54c86e58a859c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d1a22f76a774b2df3c904ceb54c86e58a859c3", "html_url": "https://github.com/rust-lang/rust/commit/88d1a22f76a774b2df3c904ceb54c86e58a859c3"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "fd5007ff415f0869186b58c57a742ac0d9114433", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=0cf60b6bb8fed2cad4407fdf86a49a7eebbd62e6", "patch": "@@ -91,7 +91,7 @@ pub enum Void { }\n /// Every type with no non-`'static` references implements `Any`, so `Any` can\n /// be used as a trait object to emulate the effects dynamic typing.\n #[stable]\n-pub trait Any: AnyPrivate {}\n+pub trait Any: AnyPrivate + 'static {}\n \n /// An inner trait to ensure that only this module can call `get_type_id()`.\n pub trait AnyPrivate {\n@@ -132,7 +132,7 @@ pub trait AnyRefExt<'a> {\n }\n \n #[stable]\n-impl<'a> AnyRefExt<'a> for &'a Any+'a {\n+impl<'a> AnyRefExt<'a> for &'a Any {\n     #[inline]\n     #[stable]\n     fn is<T: 'static>(self) -> bool {\n@@ -181,7 +181,7 @@ pub trait AnyMutRefExt<'a> {\n }\n \n #[stable]\n-impl<'a> AnyMutRefExt<'a> for &'a mut Any+'a {\n+impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     #[inline]\n     #[unstable = \"naming conventions around acquiring references may change\"]\n     fn downcast_mut<T: 'static>(self) -> Option<&'a mut T> {"}]}