{"sha": "b771d901f735aa6d4078aed92b03e30eba35bf5a", "node_id": "C_kwDOAAsO6NoAKGI3NzFkOTAxZjczNWFhNmQ0MDc4YWVkOTJiMDNlMzBlYmEzNWJmNWE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:43:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:52:24Z"}, "message": "Revamp the order `setup` executes\n\n- Create `config.toml` last. It's the most likely to error, and used to stop later steps from executing\n- Don't print an error message + exit if the git hook already exists; that's expected", "tree": {"sha": "4d127ca023f556c241ca64e7a4baff6c3f49260c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d127ca023f556c241ca64e7a4baff6c3f49260c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b771d901f735aa6d4078aed92b03e30eba35bf5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b771d901f735aa6d4078aed92b03e30eba35bf5a", "html_url": "https://github.com/rust-lang/rust/commit/b771d901f735aa6d4078aed92b03e30eba35bf5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b771d901f735aa6d4078aed92b03e30eba35bf5a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86251dabac6252ebd3c2a90bd4695563d202b919", "url": "https://api.github.com/repos/rust-lang/rust/commits/86251dabac6252ebd3c2a90bd4695563d202b919", "html_url": "https://github.com/rust-lang/rust/commit/86251dabac6252ebd3c2a90bd4695563d202b919"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "c7f98a7d0d149ae28c21ad6dadb109034e9bbff6", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b771d901f735aa6d4078aed92b03e30eba35bf5a/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b771d901f735aa6d4078aed92b03e30eba35bf5a/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=b771d901f735aa6d4078aed92b03e30eba35bf5a", "patch": "@@ -80,15 +80,10 @@ impl fmt::Display for Profile {\n }\n \n pub fn setup(config: &Config, profile: Option<Profile>) {\n-    let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n     let profile = profile.unwrap_or_else(|| t!(interactive_path()));\n-    setup_config_toml(path, profile, config);\n-\n     let stage_path =\n         [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n \n-    println!();\n-\n     if !rustup_installed() && profile != Profile::User {\n         eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n     } else if stage_dir_exists(&stage_path[..]) {\n@@ -109,8 +104,6 @@ pub fn setup(config: &Config, profile: Option<Profile>) {\n         Profile::User => &[\"dist\", \"build\"],\n     };\n \n-    println!();\n-\n     t!(install_git_hook_maybe(&config));\n \n     println!();\n@@ -125,10 +118,14 @@ pub fn setup(config: &Config, profile: Option<Profile>) {\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );\n     }\n+\n+    let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n+    setup_config_toml(path, profile, config);\n }\n \n fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n     if path.exists() {\n+        eprintln!();\n         eprintln!(\n             \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n             path.display()\n@@ -304,7 +301,18 @@ pub fn interactive_path() -> io::Result<Profile> {\n \n // install a git hook to automatically run tidy --bless, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n+    let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n+        assert!(output.status.success(), \"failed to run `git`\");\n+        PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n+    }));\n+    let dst = git.join(\"hooks\").join(\"pre-push\");\n+    if dst.exists() {\n+        // The git hook has already been set up, or the user already has a custom hook.\n+        return Ok(());\n+    }\n+\n     let mut input = String::new();\n+    println!();\n     println!(\n         \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n If you'd like, x.py can install a git hook for you that will automatically run `tidy --bless` before\n@@ -330,12 +338,6 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n \n     if should_install {\n         let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n-        let git =\n-            t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n-                assert!(output.status.success(), \"failed to run `git`\");\n-                PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n-            }));\n-        let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n             Err(e) => eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\","}]}