{"sha": "fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjllOTc1ZTMwMzJkNWFhNmY3M2VjZGY5ZTM1Mjg4ZDA5ZTRkYzE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-08-03T22:58:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-03T22:58:32Z"}, "message": "Merge pull request #1110 from HighCommander4/issue1109a\n\nAdd two new whitespace options (#1109)", "tree": {"sha": "0b335c223f98b5bbdb6fc92931544fce785b5aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b335c223f98b5bbdb6fc92931544fce785b5aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "html_url": "https://github.com/rust-lang/rust/commit/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea53d617d2cc7809f3529dc6b780ca29438d71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea53d617d2cc7809f3529dc6b780ca29438d71e", "html_url": "https://github.com/rust-lang/rust/commit/9ea53d617d2cc7809f3529dc6b780ca29438d71e"}, {"sha": "4b999a99c046b8ff366f93fb5bb8adf91103971e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b999a99c046b8ff366f93fb5bb8adf91103971e", "html_url": "https://github.com/rust-lang/rust/commit/4b999a99c046b8ff366f93fb5bb8adf91103971e"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "71adc24c09fec0370ac260f80747e8f92c008861", "filename": "src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -408,6 +408,9 @@ create_config! {\n     match_wildcard_trailing_comma: bool, true, \"Put a trailing comma after a wildcard arm\";\n     closure_block_indent_threshold: isize, 5, \"How many lines a closure must have before it is \\\n                                                block indented. -1 means never use block indent.\";\n+    space_before_type_annotation: bool, false,\n+        \"Leave a space before the colon in a type annotation\";\n+    space_before_bound: bool, false, \"Leave a space before the colon in a trait or lifetime bound\";\n     use_try_shorthand: bool, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Replace,\n         \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";"}, {"sha": "65aa7ebe62aaa7398a5eb66dae722486097ab9b9", "filename": "src/items.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -45,13 +45,17 @@ impl Rewrite for ast::Local {\n             let mut infix = String::new();\n \n             if let Some(ref ty) = self.ty {\n-                // 2 = \": \".len()\n+                let separator = if context.config.space_before_type_annotation {\n+                    \" : \"\n+                } else {\n+                    \": \"\n+                };\n+                let indent = offset + last_line_width(&result) + separator.len();\n                 // 1 = ;\n-                let indent = offset + last_line_width(&result) + 2;\n                 let budget = try_opt!(width.checked_sub(indent.width() + 1));\n                 let rewrite = try_opt!(ty.rewrite(context, budget, indent));\n \n-                infix.push_str(\": \");\n+                infix.push_str(separator);\n                 infix.push_str(&rewrite);\n             }\n \n@@ -998,6 +1002,14 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n     Some(result)\n }\n \n+fn type_annotation_spacing(config: &Config) -> &str {\n+    if config.space_before_type_annotation {\n+        \" \"\n+    } else {\n+        \"\"\n+    }\n+}\n+\n impl Rewrite for ast::StructField {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if contains_skip(&self.attrs) {\n@@ -1014,8 +1026,9 @@ impl Rewrite for ast::StructField {\n             attr_str.push_str(&offset.to_string(context.config));\n         }\n \n+        let type_annotation_spacing = type_annotation_spacing(context.config);\n         let result = match name {\n-            Some(name) => format!(\"{}{}{}: \", attr_str, vis, name),\n+            Some(name) => format!(\"{}{}{}{}: \", attr_str, vis, name, type_annotation_spacing),\n             None => format!(\"{}{}\", attr_str, vis),\n         };\n \n@@ -1034,11 +1047,13 @@ pub fn rewrite_static(prefix: &str,\n                       expr_opt: Option<&ptr::P<ast::Expr>>,\n                       context: &RewriteContext)\n                       -> Option<String> {\n-    let prefix = format!(\"{}{} {}{}: \",\n+    let type_annotation_spacing = type_annotation_spacing(context.config);\n+    let prefix = format!(\"{}{} {}{}{}: \",\n                          format_visibility(vis),\n                          prefix,\n                          format_mutability(mutability),\n-                         ident);\n+                         ident,\n+                         type_annotation_spacing);\n     // 2 = \" =\".len()\n     let ty_str = try_opt!(ty.rewrite(context,\n                                      context.config.max_width - context.block_indent.width() -\n@@ -1117,6 +1132,9 @@ impl Rewrite for ast::Arg {\n             let mut result = try_opt!(self.pat.rewrite(context, width, offset));\n \n             if self.ty.node != ast::TyKind::Infer {\n+                if context.config.space_before_type_annotation {\n+                    result.push_str(\" \");\n+                }\n                 result.push_str(\": \");\n                 let max_width = try_opt!(width.checked_sub(result.len()));\n                 let ty_str = try_opt!(self.ty.rewrite(context, max_width, offset + result.len()));"}, {"sha": "598ac3b6ac83ce0661df2a37a3ada63418e8c841", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -406,7 +406,12 @@ fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n         let appendix: Vec<_> = try_opt!(bounds.into_iter()\n             .map(|b| b.rewrite(context, width, offset))\n             .collect());\n-        let result = format!(\"{}: {}\", result, appendix.join(\" + \"));\n+        let bound_spacing = if context.config.space_before_bound {\n+            \" \"\n+        } else {\n+            \"\"\n+        };\n+        let result = format!(\"{}{}: {}\", result, bound_spacing, appendix.join(\" + \"));\n         wrap_str(result, context.config.max_width, width, offset)\n     }\n }\n@@ -449,6 +454,9 @@ impl Rewrite for ast::TyParam {\n         let mut result = String::with_capacity(128);\n         result.push_str(&self.ident.to_string());\n         if !self.bounds.is_empty() {\n+            if context.config.space_before_bound {\n+                result.push_str(\" \");\n+            }\n             result.push_str(\": \");\n \n             let bounds: String = try_opt!(self.bounds"}, {"sha": "cb4cf8aafd6405c672fc9079f59359003e9e20b1", "filename": "tests/source/space-before-bound.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Fsource%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Fsource%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-before-bound.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-space_before_bound: true\n+\n+trait Trait {}\n+fn f<'a, 'b: 'a, T: Trait>() {}"}, {"sha": "c1b0248d8aadb92f15c4c141bf8259857f085d50", "filename": "tests/source/space-before-type-annotation.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Fsource%2Fspace-before-type-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Fsource%2Fspace-before-type-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-before-type-annotation.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-space_before_type_annotation: true\n+\n+static staticVar: i32 = 42;\n+const constVar: i32 = 42;\n+fn foo(paramVar: i32) {\n+    let localVar: i32 = 42;\n+}\n+struct S {\n+    fieldVar: i32,\n+}"}, {"sha": "7e1ef87031513be7157a3dc7e59efd56d02d8ce0", "filename": "tests/target/space-before-bound.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Ftarget%2Fspace-before-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Ftarget%2Fspace-before-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-bound.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-space_before_bound: true\n+\n+trait Trait {}\n+fn f<'a, 'b : 'a, T : Trait>() {}"}, {"sha": "8bd16499b14d2cdf09b117c8bd14506cf274622f", "filename": "tests/target/space-before-type-annotation.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Ftarget%2Fspace-before-type-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1/tests%2Ftarget%2Fspace-before-type-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-before-type-annotation.rs?ref=fe69e975e3032d5aa6f73ecdf9e35288d09e4dc1", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-space_before_type_annotation: true\n+\n+static staticVar : i32 = 42;\n+const constVar : i32 = 42;\n+fn foo(paramVar : i32) {\n+    let localVar : i32 = 42;\n+}\n+struct S {\n+    fieldVar : i32,\n+}"}]}