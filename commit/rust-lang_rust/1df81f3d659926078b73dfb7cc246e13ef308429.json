{"sha": "1df81f3d659926078b73dfb7cc246e13ef308429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjgxZjNkNjU5OTI2MDc4YjczZGZiN2NjMjQ2ZTEzZWYzMDg0Mjk=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-07T15:10:21Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Take into account parent indent when filling trait members", "tree": {"sha": "c2e82402ea6c0b9eb3386c050d8b8b150bf70a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2e82402ea6c0b9eb3386c050d8b8b150bf70a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df81f3d659926078b73dfb7cc246e13ef308429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df81f3d659926078b73dfb7cc246e13ef308429", "html_url": "https://github.com/rust-lang/rust/commit/1df81f3d659926078b73dfb7cc246e13ef308429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df81f3d659926078b73dfb7cc246e13ef308429/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3742873d9e675bda917a7d0c766a06f294cf604", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3742873d9e675bda917a7d0c766a06f294cf604", "html_url": "https://github.com/rust-lang/rust/commit/b3742873d9e675bda917a7d0c766a06f294cf604"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "8e8520c59b68b5c1165587fdb57b73b8229392e2", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1df81f3d659926078b73dfb7cc246e13ef308429/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df81f3d659926078b73dfb7cc246e13ef308429/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=1df81f3d659926078b73dfb7cc246e13ef308429", "patch": "@@ -74,22 +74,25 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n     }\n \n     ctx.add_action(AssistId(\"add_impl_missing_members\"), \"add missing impl members\", |edit| {\n-        let indent = {\n+        let (parent_indent, indent) = {\n             // FIXME: Find a way to get the indent already used in the file.\n             // Now, we copy the indent of first item or indent with 4 spaces relative to impl block\n             const DEFAULT_INDENT: &str = \"    \";\n             let first_item = impl_item_list.impl_items().next();\n-            let first_item_indent = first_item.and_then(|i| leading_indent(i.syntax()));\n-            let impl_block_indent = || leading_indent(impl_node.syntax()).unwrap_or_default();\n-\n-            first_item_indent\n-                .map(ToOwned::to_owned)\n-                .unwrap_or_else(|| impl_block_indent().to_owned() + DEFAULT_INDENT)\n+            let first_item_indent =\n+                first_item.and_then(|i| leading_indent(i.syntax())).map(ToOwned::to_owned);\n+            let impl_block_indent = leading_indent(impl_node.syntax()).unwrap_or_default();\n+\n+            (\n+                impl_block_indent.to_owned(),\n+                first_item_indent.unwrap_or_else(|| impl_block_indent.to_owned() + DEFAULT_INDENT),\n+            )\n         };\n \n         let func_bodies = missing_fns.into_iter().map(build_func_body).join(\"\\n\");\n         let func_bodies = String::from(\"\\n\") + &func_bodies;\n-        let func_bodies = reindent(&func_bodies, &indent) + \"\\n\";\n+        let trailing_whitespace = format!(\"\\n{}\", parent_indent);\n+        let func_bodies = reindent(&func_bodies, &indent) + &trailing_whitespace;\n \n         let changed_range = {\n             let last_whitespace = impl_item_list.syntax().children();\n@@ -104,7 +107,9 @@ pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) ->\n         let replaced_text_range = TextUnit::of_str(&func_bodies);\n \n         edit.replace(changed_range, func_bodies);\n-        edit.set_cursor(changed_range.start() + replaced_text_range - TextUnit::of_str(\"\\n\"));\n+        edit.set_cursor(\n+            changed_range.start() + replaced_text_range - TextUnit::of_str(&trailing_whitespace),\n+        );\n     });\n \n     ctx.build()\n@@ -241,6 +246,33 @@ trait Foo {\n struct S;\n impl Foo for S {\n     fn valid(some: u32) -> bool { false }<|>\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_indented_impl_block() {\n+        check_assist(\n+            add_missing_impl_members,\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+}\n+struct S;\n+\n+mod my_mod {\n+    impl crate::Foo for S { <|> }\n+}\",\n+            \"\n+trait Foo {\n+    fn valid(some: u32) -> bool { false }\n+}\n+struct S;\n+\n+mod my_mod {\n+    impl crate::Foo for S {\n+        fn valid(some: u32) -> bool { false }<|>\n+    }\n }\",\n         )\n     }"}]}