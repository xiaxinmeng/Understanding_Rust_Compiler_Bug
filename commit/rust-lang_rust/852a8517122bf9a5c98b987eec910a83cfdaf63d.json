{"sha": "852a8517122bf9a5c98b987eec910a83cfdaf63d", "node_id": "C_kwDOAAsO6NoAKDg1MmE4NTE3MTIyYmY5YTVjOThiOTg3ZWVjOTEwYTgzY2ZkYWY2M2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-11T08:11:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-15T17:17:09Z"}, "message": "check associated types too", "tree": {"sha": "e07f6ee6175754ebd2d94b8b1168db7a4155b1fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07f6ee6175754ebd2d94b8b1168db7a4155b1fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/852a8517122bf9a5c98b987eec910a83cfdaf63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/852a8517122bf9a5c98b987eec910a83cfdaf63d", "html_url": "https://github.com/rust-lang/rust/commit/852a8517122bf9a5c98b987eec910a83cfdaf63d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/852a8517122bf9a5c98b987eec910a83cfdaf63d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453d2dbbd40b57c9d86c5178b94e9031cca40cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/453d2dbbd40b57c9d86c5178b94e9031cca40cbe", "html_url": "https://github.com/rust-lang/rust/commit/453d2dbbd40b57c9d86c5178b94e9031cca40cbe"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "6788f5a371b0ff51a17adaaaea44bfa8809778ef", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/852a8517122bf9a5c98b987eec910a83cfdaf63d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852a8517122bf9a5c98b987eec910a83cfdaf63d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=852a8517122bf9a5c98b987eec910a83cfdaf63d", "patch": "@@ -281,11 +281,6 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n \n         let mut new_required_bounds: Option<FxHashSet<ty::Predicate<'_>>> = None;\n         for item in associated_items {\n-            if !matches!(&item.kind, hir::AssocItemKind::Fn { .. }) {\n-                // FIXME: next commit will add items...\n-                continue;\n-            }\n-\n             let item_def_id = item.id.def_id;\n             // Skip our own GAT, since it would blow away the required bounds\n             if item_def_id == gat_def_id {\n@@ -295,28 +290,33 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n             let item_hir_id = item.id.hir_id();\n             let param_env = tcx.param_env(item_def_id);\n \n-            // Get the signature using placeholders. In our example, this would\n-            // convert the late-bound 'a into a free region.\n-            let sig = tcx.liberate_late_bound_regions(\n-                item_def_id.to_def_id(),\n-                tcx.fn_sig(item_def_id.to_def_id()),\n-            );\n-\n-            // The types we can assume to be well-formed. In our example, this\n-            // would be &'a mut Self, from the first argument.\n-            let mut wf_tys = FxHashSet::default();\n-            wf_tys.extend(sig.inputs());\n-\n-            // The clauses we that we would require from this function\n-            let item_required_bounds = gather_gat_bounds(\n-                tcx,\n-                param_env,\n-                item_hir_id,\n-                sig.output(),\n-                &wf_tys,\n-                gat_def_id,\n-                gat_generics,\n-            );\n+            let item_required_bounds = match item.kind {\n+                hir::AssocItemKind::Fn { .. } => {\n+                    let sig: ty::FnSig<'_> = tcx.liberate_late_bound_regions(\n+                        item_def_id.to_def_id(),\n+                        tcx.fn_sig(item_def_id),\n+                    );\n+                    gather_gat_bounds(\n+                        tcx,\n+                        param_env,\n+                        item_hir_id,\n+                        sig.output(),\n+                        &sig.inputs().iter().copied().collect(),\n+                        gat_def_id,\n+                        gat_generics,\n+                    )\n+                }\n+                hir::AssocItemKind::Type => gather_gat_bounds(\n+                    tcx,\n+                    param_env,\n+                    item_hir_id,\n+                    tcx.explicit_item_bounds(item_def_id).iter().copied().collect::<Vec<_>>(),\n+                    &FxHashSet::default(),\n+                    gat_def_id,\n+                    gat_generics,\n+                ),\n+                hir::AssocItemKind::Const => None,\n+            };\n \n             if let Some(item_required_bounds) = item_required_bounds {\n                 // Take the intersection of the new_required_bounds and the item_required_bounds"}]}