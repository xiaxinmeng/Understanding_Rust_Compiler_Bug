{"sha": "ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZGU1MTBjOTU4ODdhMmE5NGUyYWQxOTRhN2MxNjZkZDBjOWJjNjM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-07T14:54:25Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-07T14:54:25Z"}, "message": "rustc_target: inline abi::FloatTy into abi::Primitive.", "tree": {"sha": "f0aa2c2a6d9a7eab9a777c947d84ba25f1852081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0aa2c2a6d9a7eab9a777c947d84ba25f1852081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "html_url": "https://github.com/rust-lang/rust/commit/ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f8aadd746ebc929a752e5ffb133936ee75c52f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f8aadd746ebc929a752e5ffb133936ee75c52f", "html_url": "https://github.com/rust-lang/rust/commit/50f8aadd746ebc929a752e5ffb133936ee75c52f"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "ff0ddb9ec0e6fb33595037130599c079d9b75d9d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -162,7 +162,6 @@ impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n-impl_stable_hash_for!(enum ::rustc_target::abi::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });"}, {"sha": "4bf500555f14b50d6980821299c03435da70fb4d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -132,8 +132,8 @@ impl PrimitiveExt for Primitive {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n-            Float(FloatTy::F32) => tcx.types.f32,\n-            Float(FloatTy::F64) => tcx.types.f64,\n+            F32 => tcx.types.f32,\n+            F64 => tcx.types.f64,\n             Pointer => tcx.mk_mut_ptr(tcx.mk_unit()),\n         }\n     }\n@@ -144,7 +144,7 @@ impl PrimitiveExt for Primitive {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Pointer => tcx.types.usize,\n-            Float(..) => bug!(\"floats do not have an int type\"),\n+            F32 | F64 => bug!(\"floats do not have an int type\"),\n         }\n     }\n }\n@@ -538,10 +538,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Uint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::Float(fty) => scalar(Float(match fty {\n-                ast::FloatTy::F32 => FloatTy::F32,\n-                ast::FloatTy::F64 => FloatTy::F64,\n-            })),\n+            ty::Float(fty) => scalar(match fty {\n+                ast::FloatTy::F32 => F32,\n+                ast::FloatTy::F64 => F64,\n+            }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();\n@@ -2457,7 +2457,8 @@ impl_stable_hash_for!(enum crate::ty::layout::Integer {\n \n impl_stable_hash_for!(enum crate::ty::layout::Primitive {\n     Int(integer, signed),\n-    Float(fty),\n+    F32,\n+    F64,\n     Pointer\n });\n "}, {"sha": "f1bf45111315213892301bddb3665cd0ccfcb2d5", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -1904,8 +1904,8 @@ fn prepare_enum_metadata(\n \n             let discr_type = match discr.value {\n                 layout::Int(t, _) => t,\n-                layout::Float(layout::FloatTy::F32) => Integer::I32,\n-                layout::Float(layout::FloatTy::F64) => Integer::I64,\n+                layout::F32 => Integer::I32,\n+                layout::F64 => Integer::I64,\n                 layout::Pointer => cx.data_layout().ptr_sized_integer(),\n             }.to_ty(cx.tcx, false);\n "}, {"sha": "6935e09054d0b3ba9ade5cc30ccbf8160e649e3c", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n-use rustc_target::abi::{FloatTy, HasDataLayout};\n+use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n@@ -163,12 +163,12 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                     emit_va_arg(self, args[0], ret_ty)\n                                 }\n                             }\n-                            Primitive::Float(FloatTy::F64) |\n+                            Primitive::F64 |\n                             Primitive::Pointer => {\n                                 emit_va_arg(self, args[0], ret_ty)\n                             }\n                             // `va_arg` should never be used with the return type f32.\n-                            Primitive::Float(FloatTy::F32) => {\n+                            Primitive::F32 => {\n                                 bug!(\"the va_arg intrinsic does not work with `f32`\")\n                             }\n                         }"}, {"sha": "c21e62e7562e3ae50c4fa18d22823a273b59575c", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -3,7 +3,7 @@ use crate::common::*;\n use crate::type_::Type;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, FnAbiExt, PointeeInfo, Size, TyLayout};\n-use rustc_target::abi::{FloatTy, TyLayoutMethods};\n+use rustc_target::abi::TyLayoutMethods;\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc_codegen_ssa::traits::*;\n \n@@ -300,8 +300,8 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                                scalar: &layout::Scalar, offset: Size) -> &'a Type {\n         match scalar.value {\n             layout::Int(i, _) => cx.type_from_integer( i),\n-            layout::Float(FloatTy::F32) => cx.type_f32(),\n-            layout::Float(FloatTy::F64) => cx.type_f64(),\n+            layout::F32 => cx.type_f32(),\n+            layout::F64 => cx.type_f64(),\n             layout::Pointer => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {"}, {"sha": "18b121f9c5bef64d6fa3f35dabebcb43415ae63d", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -23,8 +23,8 @@ fn float_reg<'a, Ty, C>(cx: &C, ret: &ArgAbi<'a, Ty>, i: usize) -> Option<Reg>\n {\n     match ret.layout.field(cx, i).abi {\n         abi::Abi::Scalar(ref scalar) => match scalar.value {\n-            abi::Float(abi::FloatTy::F32) => Some(Reg::f32()),\n-            abi::Float(abi::FloatTy::F64) => Some(Reg::f64()),\n+            abi::F32 => Some(Reg::f32()),\n+            abi::F64 => Some(Reg::f64()),\n             _ => None\n         },\n         _ => None\n@@ -107,7 +107,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n \n                 // We only care about aligned doubles\n                 if let abi::Abi::Scalar(ref scalar) = field.abi {\n-                    if let abi::Float(abi::FloatTy::F64) = scalar.value {\n+                    if let abi::F64 = scalar.value {\n                         if offset.is_aligned(dl.f64_align.abi) {\n                             // Insert enough integers to cover [last_offset, offset)\n                             assert!(last_offset.is_aligned(dl.f64_align.abi));"}, {"sha": "6029b00aa31bd82cc3c43a6ef264d6ecfd7cc9a7", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -287,7 +287,7 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n                 let kind = match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => RegKind::Integer,\n-                    abi::Float(_) => RegKind::Float,\n+                    abi::F32 | abi::F64 => RegKind::Float,\n                 };\n                 HomogeneousAggregate::Homogeneous(Reg {\n                     kind,"}, {"sha": "452ca024e61b47a9fb3d10986c8f87d1093fa6b9", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -45,7 +45,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &ArgAbi<'a, Ty>)\n                 match scalar.value {\n                     abi::Int(..) |\n                     abi::Pointer => Class::Int,\n-                    abi::Float(_) => Class::Sse\n+                    abi::F32 | abi::F64 => Class::Sse\n                 }\n             }\n "}, {"sha": "a19bb6807f1a1f910d3bba0aa748697cf3bb4cfe", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde510c95887a2a94e2ad194a7c166dd0c9bc63/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=ccde510c95887a2a94e2ad194a7c166dd0c9bc63", "patch": "@@ -532,13 +532,6 @@ impl Integer {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n-         PartialOrd, Ord, Debug)]\n-pub enum FloatTy {\n-    F32,\n-    F64,\n-}\n-\n /// Fundamental unit of memory access and layout.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Primitive {\n@@ -550,7 +543,8 @@ pub enum Primitive {\n     /// a negative integer passed by zero-extension will appear positive in\n     /// the callee, and most operations on it will produce the wrong values.\n     Int(Integer, bool),\n-    Float(FloatTy),\n+    F32,\n+    F64,\n     Pointer\n }\n \n@@ -560,8 +554,8 @@ impl Primitive {\n \n         match self {\n             Int(i, _) => i.size(),\n-            Float(FloatTy::F32) => Size::from_bits(32),\n-            Float(FloatTy::F64) => Size::from_bits(64),\n+            F32 => Size::from_bits(32),\n+            F64 => Size::from_bits(64),\n             Pointer => dl.pointer_size\n         }\n     }\n@@ -571,15 +565,15 @@ impl Primitive {\n \n         match self {\n             Int(i, _) => i.align(dl),\n-            Float(FloatTy::F32) => dl.f32_align,\n-            Float(FloatTy::F64) => dl.f64_align,\n+            F32 => dl.f32_align,\n+            F64 => dl.f64_align,\n             Pointer => dl.pointer_align\n         }\n     }\n \n     pub fn is_float(self) -> bool {\n         match self {\n-            Float(_) => true,\n+            F32 | F64 => true,\n             _ => false\n         }\n     }"}]}