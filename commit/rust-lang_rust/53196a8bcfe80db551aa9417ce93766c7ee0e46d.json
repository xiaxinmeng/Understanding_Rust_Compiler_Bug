{"sha": "53196a8bcfe80db551aa9417ce93766c7ee0e46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTk2YThiY2ZlODBkYjU1MWFhOTQxN2NlOTM3NjZjN2VlMGU0NmQ=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2020-11-04T21:55:41Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2020-11-22T15:05:13Z"}, "message": "Optimize write_vectored for BufWriter\n\nIf the underlying writer does not support efficient vectored output,\ndo it differently: always try to coalesce the slices in the buffer\nuntil one comes that does not fit entirely. Flush the buffer before\nthe first slice if needed.", "tree": {"sha": "f0a660951b46a7999dff1b0a837840419b0ee05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a660951b46a7999dff1b0a837840419b0ee05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53196a8bcfe80db551aa9417ce93766c7ee0e46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53196a8bcfe80db551aa9417ce93766c7ee0e46d", "html_url": "https://github.com/rust-lang/rust/commit/53196a8bcfe80db551aa9417ce93766c7ee0e46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53196a8bcfe80db551aa9417ce93766c7ee0e46d/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5ff84130da0d74c6ece368dbe821d8f83fa526", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5ff84130da0d74c6ece368dbe821d8f83fa526", "html_url": "https://github.com/rust-lang/rust/commit/5d5ff84130da0d74c6ece368dbe821d8f83fa526"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "d8d62c4b314445d71a7cba39fdc9c8c5aa68fda5", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/53196a8bcfe80db551aa9417ce93766c7ee0e46d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53196a8bcfe80db551aa9417ce93766c7ee0e46d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=53196a8bcfe80db551aa9417ce93766c7ee0e46d", "patch": "@@ -328,19 +328,57 @@ impl<W: Write> Write for BufWriter<W> {\n     }\n \n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n-        if self.buf.len() + total_len > self.buf.capacity() {\n-            self.flush_buf()?;\n-        }\n-        // FIXME: Why no len > capacity? Why not buffer len == capacity? #72919\n-        if total_len >= self.buf.capacity() {\n-            self.panicked = true;\n-            let r = self.get_mut().write_vectored(bufs);\n-            self.panicked = false;\n-            r\n+        if self.get_ref().is_write_vectored() {\n+            let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n+            if self.buf.len() + total_len > self.buf.capacity() {\n+                self.flush_buf()?;\n+            }\n+            if total_len >= self.buf.capacity() {\n+                self.panicked = true;\n+                let r = self.get_mut().write_vectored(bufs);\n+                self.panicked = false;\n+                r\n+            } else {\n+                bufs.iter().for_each(|b| self.buf.extend_from_slice(b));\n+                Ok(total_len)\n+            }\n         } else {\n-            bufs.iter().for_each(|b| self.buf.extend_from_slice(b));\n-            Ok(total_len)\n+            let mut total_written = 0;\n+            let mut iter = bufs.iter();\n+            if let Some(buf) = iter.by_ref().find(|&buf| !buf.is_empty()) {\n+                // This is the first non-empty slice to write, so if it does\n+                // not fit in the buffer, we still get to flush and proceed.\n+                if self.buf.len() + buf.len() > self.buf.capacity() {\n+                    self.flush_buf()?;\n+                }\n+                if buf.len() >= self.buf.capacity() {\n+                    // The slice is at least as large as the buffering capacity,\n+                    // so it's better to write it directly, bypassing the buffer.\n+                    self.panicked = true;\n+                    let r = self.get_mut().write(buf);\n+                    self.panicked = false;\n+                    return r;\n+                } else {\n+                    self.buf.extend_from_slice(buf);\n+                    total_written += buf.len();\n+                }\n+                debug_assert!(total_written != 0);\n+            }\n+            for buf in iter {\n+                if buf.len() >= self.buf.capacity() {\n+                    // This slice should be written directly, but we have\n+                    // already buffered some of the input. Bail out,\n+                    // expecting it to be handled as the first slice in the\n+                    // next call to write_vectored.\n+                    break;\n+                } else {\n+                    total_written += self.write_to_buf(buf);\n+                    if self.buf.capacity() == self.buf.len() {\n+                        break;\n+                    }\n+                }\n+            }\n+            Ok(total_written)\n         }\n     }\n "}]}