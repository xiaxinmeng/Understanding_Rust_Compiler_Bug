{"sha": "238bb38a948ddf3d782f8138b39868cb08356c91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOGJiMzhhOTQ4ZGRmM2Q3ODJmODEzOGIzOTg2OGNiMDgzNTZjOTE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-22T18:53:59Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-22T18:53:59Z"}, "message": "First version", "tree": {"sha": "3a177c4d8283dd783b9eb795d8ab4ad047a51e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a177c4d8283dd783b9eb795d8ab4ad047a51e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238bb38a948ddf3d782f8138b39868cb08356c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238bb38a948ddf3d782f8138b39868cb08356c91", "html_url": "https://github.com/rust-lang/rust/commit/238bb38a948ddf3d782f8138b39868cb08356c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238bb38a948ddf3d782f8138b39868cb08356c91/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "75ed562ae5401172b9f2062e9845f5b73f52d372", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/238bb38a948ddf3d782f8138b39868cb08356c91/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bb38a948ddf3d782f8138b39868cb08356c91/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=238bb38a948ddf3d782f8138b39868cb08356c91", "patch": "@@ -10,10 +10,24 @@\n \n //! Shareable mutable containers.\n //!\n+//! Rust memory safety is based on this rule: Given an object `T`, is only possible to\n+//! have one of the following:\n+//!\n+//! - Having several inmutable references (`&T`) to the object (also know as Aliasing).\n+//! - Having one mutable reference (`&mut T`) to the object (also know as Mutability).\n+//!\n+//! This is enforced by the Rust compiler. However, there are situations where this rule is not\n+//! flexible enough. Sometimes is required to have multiple references to an object and yet \n+//! mutate it.\n+//!\n+//! Shareable mutable containers exist to permit mutability in presence of aliasing in a \n+//! controlled manner. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! way. For multiple threads is possible to use `Mutex`, `RwLock` or `AtomicXXX`.\n+//!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n //! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast\n-//! with typical Rust types that exhibit 'inherited mutability'.\n+//! with typical Rust types that exhibit 'inherited mutability'. \n //!\n //! Cell types come in two flavors: `Cell<T>` and `RefCell<T>`. `Cell<T>` implements interior\n //! mutability by moving values in and out of the `Cell<T>`. To use references instead of values,"}]}