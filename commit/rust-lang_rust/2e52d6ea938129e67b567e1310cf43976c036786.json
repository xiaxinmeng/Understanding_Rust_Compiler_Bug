{"sha": "2e52d6ea938129e67b567e1310cf43976c036786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNTJkNmVhOTM4MTI5ZTY3YjU2N2UxMzEwY2Y0Mzk3NmMwMzY3ODY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-10T17:25:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-10T17:25:16Z"}, "message": "Merge #9557\n\n9557: fix: Respect coercions in `inline_call` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "06544b395a55f9802d7929525554ee7d01b1b118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06544b395a55f9802d7929525554ee7d01b1b118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e52d6ea938129e67b567e1310cf43976c036786", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6df8CRBK7hj4Ov3rIwAAJGwIAHilO/6Iq+ice4gAGhE1xMpg\ncgarZXBKPKUnpPJreS1O0vUv1aaaXHrJVAboMQn4KFx6SKA/2rHe+biZLrxUYrvW\nhB45YkjZNwLnVXvszidws73YU3gHXGzvWPabwBCXsixMC68ZUiRL6ZDCLOs/Cnvz\nI7vQuPvdrALZt93kCaPUavBgSN64roaX/880FIgHYaQCsZ99lypo22YihyG+t4SI\nzLuwBt9uwV0YnS2euWOt+tKPhZZejrbHS8uRn6uqy9Jq1AU/w+4P6YZ1h+jBnMub\nNzTFpDgLpdPPyLBPFeaMbcNUV5Lyr1PhMerlysJ4mjEiAjx4tm6nEJXPfIsFRwM=\n=ZXq9\n-----END PGP SIGNATURE-----\n", "payload": "tree 06544b395a55f9802d7929525554ee7d01b1b118\nparent f83f069f947d35f1c22f2dc4f91fa731b1f3cdc1\nparent 9e1eb77f6b65bca03b324687fcbb9abcdff4b2d6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625937916 +0000\ncommitter GitHub <noreply@github.com> 1625937916 +0000\n\nMerge #9557\n\n9557: fix: Respect coercions in `inline_call` r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e52d6ea938129e67b567e1310cf43976c036786", "html_url": "https://github.com/rust-lang/rust/commit/2e52d6ea938129e67b567e1310cf43976c036786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e52d6ea938129e67b567e1310cf43976c036786/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83f069f947d35f1c22f2dc4f91fa731b1f3cdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f83f069f947d35f1c22f2dc4f91fa731b1f3cdc1", "html_url": "https://github.com/rust-lang/rust/commit/f83f069f947d35f1c22f2dc4f91fa731b1f3cdc1"}, {"sha": "9e1eb77f6b65bca03b324687fcbb9abcdff4b2d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1eb77f6b65bca03b324687fcbb9abcdff4b2d6", "html_url": "https://github.com/rust-lang/rust/commit/9e1eb77f6b65bca03b324687fcbb9abcdff4b2d6"}], "stats": {"total": 112, "additions": 92, "deletions": 20}, "files": [{"sha": "cac4bce3f9063189e9cdf09c25214a973797eeaa", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -216,14 +216,18 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.type_of_expr(expr)\n     }\n \n-    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+    pub fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n         self.imp.type_of_expr_with_coercion(expr)\n     }\n \n     pub fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.imp.type_of_pat(pat)\n     }\n \n+    pub fn type_of_pat_with_coercion(&self, expr: &ast::Pat) -> Option<(Type, Option<Type>)> {\n+        self.imp.type_of_pat_with_coercion(expr)\n+    }\n+\n     pub fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n         self.imp.type_of_self(param)\n     }\n@@ -564,14 +568,18 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(expr.syntax()).type_of_expr(self.db, expr)\n     }\n \n-    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<Type> {\n+    fn type_of_expr_with_coercion(&self, expr: &ast::Expr) -> Option<(Type, Option<Type>)> {\n         self.analyze(expr.syntax()).type_of_expr_with_coercion(self.db, expr)\n     }\n \n     fn type_of_pat(&self, pat: &ast::Pat) -> Option<Type> {\n         self.analyze(pat.syntax()).type_of_pat(self.db, pat)\n     }\n \n+    fn type_of_pat_with_coercion(&self, pat: &ast::Pat) -> Option<(Type, Option<Type>)> {\n+        self.analyze(pat.syntax()).type_of_pat_with_coercion(self.db, pat)\n+    }\n+\n     fn type_of_self(&self, param: &ast::SelfParam) -> Option<Type> {\n         self.analyze(param.syntax()).type_of_self(self.db, param)\n     }"}, {"sha": "2ba8284fcbfc58c3fa1192b01b7f7e21299e26ed", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -21,7 +21,7 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Interner, Substitution, TyExt, TyLoweringContext,\n+    InferenceResult, Interner, Substitution, Ty, TyExt, TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -126,15 +126,15 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         expr: &ast::Expr,\n-    ) -> Option<Type> {\n+    ) -> Option<(Type, Option<Type>)> {\n         let expr_id = self.expr_id(db, expr)?;\n         let infer = self.infer.as_ref()?;\n-        let ty = infer\n+        let coerced = infer\n             .expr_adjustments\n             .get(&expr_id)\n-            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target))\n-            .unwrap_or_else(|| &infer[expr_id]);\n-        Type::new_with_resolver(db, &self.resolver, ty.clone())\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n+        let mk_ty = |ty: &Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n+        mk_ty(&infer[expr_id]).map(|ty| (ty, coerced.and_then(mk_ty)))\n     }\n \n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n@@ -143,6 +143,21 @@ impl SourceAnalyzer {\n         Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n+    pub(crate) fn type_of_pat_with_coercion(\n+        &self,\n+        db: &dyn HirDatabase,\n+        pat: &ast::Pat,\n+    ) -> Option<(Type, Option<Type>)> {\n+        let pat_id = self.pat_id(pat)?;\n+        let infer = self.infer.as_ref()?;\n+        let coerced = infer\n+            .pat_adjustments\n+            .get(&pat_id)\n+            .and_then(|adjusts| adjusts.last().map(|adjust| &adjust.target));\n+        let mk_ty = |ty: &Ty| Type::new_with_resolver(db, &self.resolver, ty.clone());\n+        mk_ty(&infer[pat_id]).map(|ty| (ty, coerced.and_then(mk_ty)))\n+    }\n+\n     pub(crate) fn type_of_self(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "e545454159bfc0164f95c406935056f30ac6ad8a", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -55,7 +55,8 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n \n     // Infer type\n-    let ty = ctx.sema.type_of_expr_with_coercion(&expr)?;\n+    let (ty, coerced) = ctx.sema.type_of_expr_with_coercion(&expr)?;\n+    let ty = coerced.unwrap_or(ty);\n     if ty.contains_unknown() || ty.is_closure() {\n         cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;"}, {"sha": "b4745b842429de2913ad7aecefa51186c7670f3a", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -146,7 +146,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                     };\n \n-                    let let_stmt = make::let_stmt(bound_ident, Some(match_expr));\n+                    let let_stmt = make::let_stmt(bound_ident, None, Some(match_expr));\n                     let let_stmt = let_stmt.indent(if_indent_level);\n                     replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n                 }"}, {"sha": "0dcc12d8cb999b735548918ac9fed3d0cf67a33a", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -85,11 +85,12 @@ pub(crate) fn inline_(\n                 make::name(\"this\"),\n             )\n             .into(),\n+            None,\n             assoc_fn_params.next()?,\n         ));\n     }\n     for param in param_list.params() {\n-        params.push((param.pat()?, assoc_fn_params.next()?));\n+        params.push((param.pat()?, param.ty(), assoc_fn_params.next()?));\n     }\n \n     if arg_list.len() != params.len() {\n@@ -123,7 +124,7 @@ pub(crate) fn inline_(\n             // has a pattern that does not allow inlining\n             let param_use_nodes: Vec<Vec<_>> = params\n                 .iter()\n-                .map(|(pat, param)| {\n+                .map(|(pat, _, param)| {\n                     if !matches!(pat, ast::Pat::IdentPat(pat) if pat.is_simple_ident()) {\n                         return Vec::new();\n                     }\n@@ -145,7 +146,7 @@ pub(crate) fn inline_(\n             // Rewrite `self` to `this`\n             if param_list.self_param().is_some() {\n                 let this = || make::name_ref(\"this\").syntax().clone_for_update();\n-                usages_for_locals(params[0].1.as_local(ctx.sema.db))\n+                usages_for_locals(params[0].2.as_local(ctx.sema.db))\n                     .flat_map(|FileReference { name, range, .. }| match name {\n                         ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n                         _ => None,\n@@ -156,7 +157,8 @@ pub(crate) fn inline_(\n             }\n \n             // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n-            for ((pat, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev() {\n+            for ((pat, param_ty, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev()\n+            {\n                 let expr_is_name_ref = matches!(&expr,\n                     ast::Expr::PathExpr(expr)\n                         if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n@@ -184,8 +186,17 @@ pub(crate) fn inline_(\n                         });\n                     }\n                     // cant inline, emit a let statement\n-                    // FIXME: emit type ascriptions when a coercion happens?\n-                    _ => body.push_front(make::let_stmt(pat, Some(expr)).clone_for_update().into()),\n+                    _ => {\n+                        let ty = ctx\n+                            .sema\n+                            .type_of_expr_with_coercion(&expr)\n+                            .map_or(false, |(_, coerced)| coerced.is_some())\n+                            .then(|| param_ty)\n+                            .flatten();\n+                        body.push_front(\n+                            make::let_stmt(pat, ty, Some(expr)).clone_for_update().into(),\n+                        )\n+                    }\n                 }\n             }\n \n@@ -606,6 +617,34 @@ fn foo(x: u32) -> u32{\n fn main() {\n     222;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_emits_type_for_coercion() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: *const u32) -> u32 {\n+    x as u32\n+}\n+\n+fn main() {\n+    foo$0(&222);\n+}\n+\"#,\n+            r#\"\n+fn foo(x: *const u32) -> u32 {\n+    x as u32\n+}\n+\n+fn main() {\n+    {\n+        let x: *const u32 = &222;\n+        x as u32\n+    };\n+}\n \"#,\n         );\n     }"}, {"sha": "f84e17553896cc7dd71d2c4763973848f8f4392e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e52d6ea938129e67b567e1310cf43976c036786/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=2e52d6ea938129e67b567e1310cf43976c036786", "patch": "@@ -492,10 +492,19 @@ pub fn where_clause(preds: impl IntoIterator<Item = ast::WherePred>) -> ast::Whe\n     }\n }\n \n-pub fn let_stmt(pattern: ast::Pat, initializer: Option<ast::Expr>) -> ast::LetStmt {\n-    let text = match initializer {\n-        Some(it) => format!(\"let {} = {};\", pattern, it),\n-        None => format!(\"let {};\", pattern),\n+pub fn let_stmt(\n+    pattern: ast::Pat,\n+    ty: Option<ast::Type>,\n+    initializer: Option<ast::Expr>,\n+) -> ast::LetStmt {\n+    let mut text = String::new();\n+    format_to!(text, \"let {}\", pattern);\n+    if let Some(ty) = ty {\n+        format_to!(text, \": {}\", ty);\n+    }\n+    match initializer {\n+        Some(it) => format_to!(text, \" = {};\", it),\n+        None => format_to!(text, \";\"),\n     };\n     ast_from_text(&format!(\"fn f() {{ {} }}\", text))\n }"}]}