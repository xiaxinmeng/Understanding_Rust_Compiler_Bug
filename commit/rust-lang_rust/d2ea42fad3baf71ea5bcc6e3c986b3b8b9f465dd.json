{"sha": "d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "node_id": "C_kwDOAAsO6NoAKGQyZWE0MmZhZDNiYWY3MWVhNWJjYzZlM2M5ODZiM2I4YjlmNDY1ZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-10T19:03:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-10T19:03:17Z"}, "message": "Auto merge of #2879 - saethlin:measureme, r=RalfJung\n\nInclude the current Crate name in the measureme output name\n\nSee https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/measureme.20flamegraph.20panics/near/356367013\ncc `@andjo403`\n\nCurrently, attempting to use `MIRIFLAGS=-Zmiri-measureme=miri cargo miri test` on a crate with multiple test targets (which is very common) will produce a corrupted measureme output file, because the various interpreter processes will stomp each other's output.\n\nThis change does not entirely prevent this, but the various test targets seem to always have different crate names, so if nothing else this will make the broken measureme files much harder to encounter by accident, while also making it clear what they are all for.", "tree": {"sha": "39a2d4008fbcb701b720ac96eb8771cdc213fce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a2d4008fbcb701b720ac96eb8771cdc213fce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "html_url": "https://github.com/rust-lang/rust/commit/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a41eacf170ed234e059608515115e94fbe721fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a41eacf170ed234e059608515115e94fbe721fe", "html_url": "https://github.com/rust-lang/rust/commit/7a41eacf170ed234e059608515115e94fbe721fe"}, {"sha": "f9a42139682aff545e41b9ed3566fafbafdd09f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a42139682aff545e41b9ed3566fafbafdd09f1", "html_url": "https://github.com/rust-lang/rust/commit/f9a42139682aff545e41b9ed3566fafbafdd09f1"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "79b0daf9e82b8ce04ca7401b5332b6c803fb17c8", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "patch": "@@ -389,7 +389,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365).\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n-   The profile is written out to a file with the prefix `<name>`, and can be processed\n+   The profile is written out to a file inside a directory called `<name>`, and can be processed\n    using the tools in the repository https://github.com/rust-lang/measureme.\n * `-Zmiri-mute-stdout-stderr` silently ignores all writes to stdout and stderr,\n   but reports to the program that it did actually write. This is useful when you"}, {"sha": "32717a0d28b5a52e83843453d8e1eb545b440e97", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=d2ea42fad3baf71ea5bcc6e3c986b3b8b9f465dd", "patch": "@@ -4,6 +4,8 @@\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::fmt;\n+use std::path::Path;\n+use std::process;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n@@ -498,7 +500,21 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let layouts =\n             PrimitiveLayouts::new(layout_cx).expect(\"Couldn't get layouts of primitive types\");\n         let profiler = config.measureme_out.as_ref().map(|out| {\n-            measureme::Profiler::new(out).expect(\"Couldn't create `measureme` profiler\")\n+            let crate_name = layout_cx\n+                .tcx\n+                .sess\n+                .opts\n+                .crate_name\n+                .clone()\n+                .unwrap_or_else(|| \"unknown-crate\".to_string());\n+            let pid = process::id();\n+            // We adopt the same naming scheme for the profiler output that rustc uses. In rustc,\n+            // the PID is padded so that the nondeterministic value of the PID does not spread\n+            // nondeterminisim to the allocator. In Miri we are not aiming for such performance\n+            // control, we just pad for consistency with rustc.\n+            let filename = format!(\"{crate_name}-{pid:07}\");\n+            let path = Path::new(out).join(filename);\n+            measureme::Profiler::new(path).expect(\"Couldn't create `measureme` profiler\")\n         });\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instantiate_global_state(config));"}]}