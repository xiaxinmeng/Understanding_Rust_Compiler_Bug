{"sha": "67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "node_id": "C_kwDOAAsO6NoAKDY3Y2JkOGY3YzE1NTQ0Y2FiYmFlYWVlZWQ5MjUzYzk4NzRlZDU4NDI", "commit": {"author": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2022-12-23T09:43:48Z"}, "committer": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2022-12-23T10:45:25Z"}, "message": "fix(completion): remove bound insert of type in trait", "tree": {"sha": "5f7845b58c122ed818249d653fd25c06388d5250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f7845b58c122ed818249d653fd25c06388d5250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "html_url": "https://github.com/rust-lang/rust/commit/67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67cbd8f7c15544cabbaeaeeed9253c9874ed5842/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06525517b0b69cd97f2c39a4012d96f44bf0776", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06525517b0b69cd97f2c39a4012d96f44bf0776", "html_url": "https://github.com/rust-lang/rust/commit/a06525517b0b69cd97f2c39a4012d96f44bf0776"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "4a1bacfa9d9e131660bcccdbf66500a45fd50412", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67cbd8f7c15544cabbaeaeeed9253c9874ed5842/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cbd8f7c15544cabbaeaeeed9253c9874ed5842/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "patch": "@@ -37,7 +37,7 @@ use ide_db::{\n     traits::get_missing_assoc_items, SymbolKind,\n };\n use syntax::{\n-    ast::{self, edit_in_place::AttrsOwnerEdit},\n+    ast::{self, edit_in_place::AttrsOwnerEdit, HasTypeBounds},\n     AstNode, SyntaxElement, SyntaxKind, TextRange, T,\n };\n use text_edit::TextEdit;\n@@ -265,10 +265,21 @@ fn add_type_alias_impl(\n             };\n \n             let start = transformed_ty.syntax().text_range().start();\n-            let Some(end) = transformed_ty\n-                .eq_token()\n-                .map(|tok| tok.text_range().start())\n-                .or(transformed_ty.semicolon_token().map(|tok| tok.text_range().start())) else { return };\n+\n+            let end = if let Some(end) =\n+                transformed_ty.colon_token().map(|tok| tok.text_range().start())\n+            {\n+                end\n+            } else if let Some(end) = transformed_ty.eq_token().map(|tok| tok.text_range().start())\n+            {\n+                end\n+            } else if let Some(end) =\n+                transformed_ty.semicolon_token().map(|tok| tok.text_range().start())\n+            {\n+                end\n+            } else {\n+                return;\n+            };\n \n             let len = end - start;\n             let mut decl = transformed_ty.syntax().text().slice(..len).to_string();"}, {"sha": "2b10294cc5b962b268c9df0b1da3fc312768e4b7", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/67cbd8f7c15544cabbaeaeeed9253c9874ed5842/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67cbd8f7c15544cabbaeaeeed9253c9874ed5842/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=67cbd8f7c15544cabbaeaeeed9253c9874ed5842", "patch": "@@ -1,7 +1,7 @@\n //! Completion tests for item list position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n@@ -277,3 +277,91 @@ fn after_unit_struct() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn type_in_impl_trait() {\n+    check_edit(\n+        \"type O\",\n+        r\"\n+struct A;\n+trait B {\n+type O: ?Sized;\n+}\n+impl B for A {\n+$0\n+}\n+\",\n+        r#\"\n+struct A;\n+trait B {\n+type O: ?Sized;\n+}\n+impl B for A {\n+type O = $0;\n+}\n+\"#,\n+    );\n+    check_edit(\n+        \"type O\",\n+        r\"\n+struct A;\n+trait B {\n+type O;\n+}\n+impl B for A {\n+$0\n+}\n+\",\n+        r#\"\n+struct A;\n+trait B {\n+type O;\n+}\n+impl B for A {\n+type O = $0;\n+}\n+\"#,\n+    );\n+    check_edit(\n+        \"type O\",\n+        r\"\n+struct A;\n+trait B {\n+type O: ?Sized = u32;\n+}\n+impl B for A {\n+$0\n+}\n+\",\n+        r#\"\n+struct A;\n+trait B {\n+type O: ?Sized = u32;\n+}\n+impl B for A {\n+type O = $0;\n+}\n+\"#,\n+    );\n+    check_edit(\n+        \"type O\",\n+        r\"\n+struct A;\n+trait B {\n+type O = u32;\n+}\n+impl B for A {\n+$0\n+}\n+\",\n+        r\"\n+struct A;\n+trait B {\n+type O = u32;\n+}\n+impl B for A {\n+type O = $0;\n+}\n+\",\n+    )\n+}"}]}