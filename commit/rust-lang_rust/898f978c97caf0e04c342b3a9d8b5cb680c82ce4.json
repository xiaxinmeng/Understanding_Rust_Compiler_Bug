{"sha": "898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OGY5NzhjOTdjYWYwZTA0YzM0MmIzYTlkOGI1Y2I2ODBjODJjZTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-25T09:45:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-03T20:42:07Z"}, "message": "add back variance testing mechanism\n\nmake it work for traits etc uniformly", "tree": {"sha": "8760da503cff2cfd7a73ba8ac72d238db5cc5cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8760da503cff2cfd7a73ba8ac72d238db5cc5cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "html_url": "https://github.com/rust-lang/rust/commit/898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4355169f8adf31f9722da28a988fa77589f44722", "url": "https://api.github.com/repos/rust-lang/rust/commits/4355169f8adf31f9722da28a988fa77589f44722", "html_url": "https://github.com/rust-lang/rust/commit/4355169f8adf31f9722da28a988fa77589f44722"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "8cee1c8ba29dc8749319596372ef6b7ab61c6126", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -318,6 +318,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n           coherence::check_coherence(tcx));\n     })?;\n \n+    tcx.sess.track_errors(|| {\n+        time(time_passes, \"variance testing\", ||\n+             variance::test::test_variance(tcx));\n+    })?;\n+\n     time(time_passes, \"wf checking\", || check::check_wf_new(tcx))?;\n \n     time(time_passes, \"item-types checking\", || check::check_item_types(tcx))?;"}, {"sha": "1afe2725ac87d6fabbebe93b5c58a73b5d17b344", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -29,6 +29,9 @@ mod constraints;\n /// Code to solve constraints and write out the results.\n mod solve;\n \n+/// Code to write unit tests of variance.\n+pub mod test;\n+\n /// Code for transforming variances.\n mod xform;\n \n@@ -89,3 +92,4 @@ fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n         }\n     }\n }\n+"}, {"sha": "af8ad491ec00e7075ba0a5c3e2a56922bdb30ef5", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -128,16 +128,6 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n \n             let item_def_id = tcx.hir.local_def_id(item_id);\n \n-            // For unit testing: check for a special \"rustc_variance\"\n-            // attribute and report an error with various results if found.\n-            if tcx.has_attr(item_def_id, \"rustc_variance\") {\n-                span_err!(tcx.sess,\n-                          tcx.hir.span(item_id),\n-                          E0208,\n-                          \"{:?}\",\n-                          item_variances);\n-            }\n-\n             map.insert(item_def_id, Rc::new(item_variances));\n         }\n "}, {"sha": "53f2bd37fbc61e559e0dea1891ba3ba8c71890b4", "filename": "src/librustc_typeck/variance/test.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir;\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+\n+pub fn test_variance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+    tcx.hir.krate().visit_all_item_likes(&mut VarianceTest { tcx });\n+}\n+\n+struct VarianceTest<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>\n+}\n+\n+impl<'a, 'tcx> ItemLikeVisitor<'tcx> for VarianceTest<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+        let item_def_id = self.tcx.hir.local_def_id(item.id);\n+\n+        // For unit testing: check for a special \"rustc_variance\"\n+        // attribute and report an error with various results if found.\n+        if self.tcx.has_attr(item_def_id, \"rustc_variance\") {\n+            let item_variances = self.tcx.variances_of(item_def_id);\n+            span_err!(self.tcx.sess,\n+                      item.span,\n+                      E0208,\n+                      \"{:?}\",\n+                      item_variances);\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+}"}, {"sha": "cd047cc580f8720b2c0df3c0873a5f7c74c7fcf1", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -60,7 +60,6 @@ struct Test6<'a, 'b:'a> { //~ ERROR [-, o]\n \n #[rustc_variance]\n struct Test7<'a> { //~ ERROR [*]\n-    //~^ ERROR parameter `'a` is never used\n     x: isize\n }\n "}, {"sha": "60d4d73fe88b8845e08405d77869515eedf44c73", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -16,27 +16,23 @@\n \n #[rustc_variance]\n enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR [+, -, o, *]\n-    //~^ ERROR parameter `'d` is never used\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),\n }\n \n #[rustc_variance]\n struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR [*, o, -, +]\n-    //~^ ERROR parameter `'w` is never used\n     f: Base<'z, 'y, 'x, 'w>\n }\n \n #[rustc_variance] // Combine - and + to yield o\n struct Derived2<'a, 'b:'a, 'c> { //~ ERROR [o, o, *]\n-    //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'a, 'b, 'c>\n }\n \n #[rustc_variance] // Combine + and o to yield o (just pay attention to 'a here)\n struct Derived3<'a:'b, 'b, 'c> { //~ ERROR [o, -, *]\n-    //~^ ERROR parameter `'c` is never used\n     f: Base<'a, 'b, 'a, 'c>\n }\n "}, {"sha": "58fb785c48ca7b24a70c92e2cd5c9e897b6c9230", "filename": "src/test/compile-fail/variance-trait-bounds.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898f978c97caf0e04c342b3a9d8b5cb680c82ce4/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs?ref=898f978c97caf0e04c342b3a9d8b5cb680c82ce4", "patch": "@@ -30,8 +30,7 @@ struct TestStruct<U,T:Setter<U>> { //~ ERROR [+, +]\n }\n \n #[rustc_variance]\n-enum TestEnum<U,T:Setter<U>> {//~ ERROR [*, +]\n-    //~^ ERROR parameter `U` is never used\n+enum TestEnum<U,T:Setter<U>> { //~ ERROR [*, +]\n     Foo(T)\n }\n \n@@ -51,13 +50,11 @@ trait TestTrait3<U> { //~ ERROR [o, o]\n \n #[rustc_variance]\n struct TestContraStruct<U,T:Setter<U>> { //~ ERROR [*, +]\n-    //~^ ERROR parameter `U` is never used\n     t: T\n }\n \n #[rustc_variance]\n struct TestBox<U,T:Getter<U>+Setter<U>> { //~ ERROR [*, +]\n-    //~^ ERROR parameter `U` is never used\n     t: T\n }\n "}]}