{"sha": "94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZThmZjRmMGI5NGM3ODhlYzllOWEyOGQzYWE2Zjg3MDYyZTI5NjY=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-08-24T15:50:21Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-08-25T18:53:37Z"}, "message": "Refactor feature gate checking code\n\nTries to clarify the filtering of active features and make the code more\nexpressive.", "tree": {"sha": "9ed95ede5b4474f8478d47de4d5b2df9099a7672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed95ede5b4474f8478d47de4d5b2df9099a7672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "html_url": "https://github.com/rust-lang/rust/commit/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "html_url": "https://github.com/rust-lang/rust/commit/c9d9616e825fecd4301beaf7bcd9115d5d7d393f"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "f3a9d135125aee6abe08c123b0753080edb57452", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=94e8ff4f0b94c788ec9e9a28d3aa6f87062e2966", "patch": "@@ -732,13 +732,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n         }\n     }\n \n-    for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-        if let Some(f_edition) = f_edition {\n-            if f_edition <= crate_edition {\n-                set(&mut features, DUMMY_SP);\n-                edition_enabled_features.insert(name, crate_edition);\n-            }\n-        }\n+    for feature in active_features_up_to(crate_edition) {\n+        feature.set(&mut features, DUMMY_SP);\n+        edition_enabled_features.insert(feature.name, crate_edition);\n     }\n \n     // Process the edition umbrella feature-gates first, to ensure\n@@ -760,20 +756,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n             let name = mi.name_or_empty();\n \n-            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n-                if *edition <= crate_edition {\n+            let edition = ALL_EDITIONS.iter().find(|e| name == e.feature_name()).copied();\n+            if let Some(edition) = edition {\n+                if edition <= crate_edition {\n                     continue;\n                 }\n \n-                for &(name, .., f_edition, set) in ACTIVE_FEATURES {\n-                    if let Some(f_edition) = f_edition {\n-                        if f_edition <= *edition {\n-                            // FIXME(Manishearth) there is currently no way to set\n-                            // lib features by edition\n-                            set(&mut features, DUMMY_SP);\n-                            edition_enabled_features.insert(name, *edition);\n-                        }\n-                    }\n+                for feature in active_features_up_to(edition) {\n+                    // FIXME(Manishearth) there is currently no way to set\n+                    // lib features by edition\n+                    feature.set(&mut features, DUMMY_SP);\n+                    edition_enabled_features.insert(feature.name, edition);\n                 }\n             }\n         }\n@@ -867,6 +860,17 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n     features\n }\n \n+fn active_features_up_to(edition: Edition) -> impl Iterator<Item=&'static Feature> {\n+    ACTIVE_FEATURES.iter()\n+    .filter(move |feature| {\n+        if let Some(feature_edition) = feature.edition {\n+            feature_edition <= edition\n+        } else {\n+            false\n+        }\n+    })\n+}\n+\n pub fn check_crate(krate: &ast::Crate,\n                    sess: &ParseSess,\n                    features: &Features,"}]}