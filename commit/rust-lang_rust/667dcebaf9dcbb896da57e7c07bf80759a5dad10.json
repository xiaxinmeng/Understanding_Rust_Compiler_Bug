{"sha": "667dcebaf9dcbb896da57e7c07bf80759a5dad10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2N2RjZWJhZjlkY2JiODk2ZGE1N2U3YzA3YmY4MDc1OWE1ZGFkMTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-11T21:11:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-12T01:17:57Z"}, "message": "Rollup merge of #32183 - bluss:doc-index, r=alexcrichton\n\nClarify doc for slice slicing (Index impls)\n\nClarify doc for slice slicing (Index impls)\n\nThis is a follow up for PR #32099 and #32057", "tree": {"sha": "6a7b65d471966a322c22d8251438e9806f9863b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7b65d471966a322c22d8251438e9806f9863b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/667dcebaf9dcbb896da57e7c07bf80759a5dad10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/667dcebaf9dcbb896da57e7c07bf80759a5dad10", "html_url": "https://github.com/rust-lang/rust/commit/667dcebaf9dcbb896da57e7c07bf80759a5dad10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/667dcebaf9dcbb896da57e7c07bf80759a5dad10/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249ca830963026ec580c6701c7e211742efcf10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/249ca830963026ec580c6701c7e211742efcf10d", "html_url": "https://github.com/rust-lang/rust/commit/249ca830963026ec580c6701c7e211742efcf10d"}, {"sha": "bfffe6d9d25d52f75705b5ebcc741b6844c2aa81", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfffe6d9d25d52f75705b5ebcc741b6844c2aa81", "html_url": "https://github.com/rust-lang/rust/commit/bfffe6d9d25d52f75705b5ebcc741b6844c2aa81"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "233e556b27ee8c608b85284dfb069bb9f2415880", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/667dcebaf9dcbb896da57e7c07bf80759a5dad10/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/667dcebaf9dcbb896da57e7c07bf80759a5dad10/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=667dcebaf9dcbb896da57e7c07bf80759a5dad10", "patch": "@@ -535,6 +535,16 @@ fn slice_index_order_fail(index: usize, end: usize) -> ! {\n \n // FIXME implement indexing with inclusive ranges\n \n+/// Implements slicing with syntax `&self[begin .. end]`.\n+///\n+/// Returns a slice of self for the index range [`begin`..`end`).\n+///\n+/// This operation is `O(1)`.\n+///\n+/// # Panics\n+///\n+/// Requires that `begin <= end` and `end <= self.len()`,\n+/// otherwise slicing will panic.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::Range<usize>> for [T] {\n     type Output = [T];\n@@ -554,6 +564,13 @@ impl<T> ops::Index<ops::Range<usize>> for [T] {\n         }\n     }\n }\n+\n+/// Implements slicing with syntax `&self[.. end]`.\n+///\n+/// Returns a slice of self from the beginning until but not including\n+/// the index `end`.\n+///\n+/// Equivalent to `&self[0 .. end]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::RangeTo<usize>> for [T] {\n     type Output = [T];\n@@ -563,6 +580,12 @@ impl<T> ops::Index<ops::RangeTo<usize>> for [T] {\n         self.index(0 .. index.end)\n     }\n }\n+\n+/// Implements slicing with syntax `&self[begin ..]`.\n+///\n+/// Returns a slice of self from and including the index `begin` until the end.\n+///\n+/// Equivalent to `&self[begin .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::RangeFrom<usize>> for [T] {\n     type Output = [T];\n@@ -572,6 +595,12 @@ impl<T> ops::Index<ops::RangeFrom<usize>> for [T] {\n         self.index(index.start .. self.len())\n     }\n }\n+\n+/// Implements slicing with syntax `&self[..]`.\n+///\n+/// Returns a slice of the whole slice. This operation can not panic.\n+///\n+/// Equivalent to `&self[0 .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<RangeFull> for [T] {\n     type Output = [T];\n@@ -608,6 +637,16 @@ impl<T> ops::Index<ops::RangeToInclusive<usize>> for [T] {\n     }\n }\n \n+/// Implements mutable slicing with syntax `&mut self[begin .. end]`.\n+///\n+/// Returns a slice of self for the index range [`begin`..`end`).\n+///\n+/// This operation is `O(1)`.\n+///\n+/// # Panics\n+///\n+/// Requires that `begin <= end` and `end <= self.len()`,\n+/// otherwise slicing will panic.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n     #[inline]\n@@ -625,13 +664,26 @@ impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n         }\n     }\n }\n+\n+/// Implements mutable slicing with syntax `&mut self[.. end]`.\n+///\n+/// Returns a slice of self from the beginning until but not including\n+/// the index `end`.\n+///\n+/// Equivalent to `&mut self[0 .. end]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeTo<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n         self.index_mut(0 .. index.end)\n     }\n }\n+\n+/// Implements mutable slicing with syntax `&mut self[begin ..]`.\n+///\n+/// Returns a slice of self from and including the index `begin` until the end.\n+///\n+/// Equivalent to `&mut self[begin .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<ops::RangeFrom<usize>> for [T] {\n     #[inline]\n@@ -640,6 +692,12 @@ impl<T> ops::IndexMut<ops::RangeFrom<usize>> for [T] {\n         self.index_mut(index.start .. len)\n     }\n }\n+\n+/// Implements mutable slicing with syntax `&mut self[..]`.\n+///\n+/// Returns a slice of the whole slice. This operation can not panic.\n+///\n+/// Equivalent to `&mut self[0 .. self.len()]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::IndexMut<RangeFull> for [T] {\n     #[inline]"}]}