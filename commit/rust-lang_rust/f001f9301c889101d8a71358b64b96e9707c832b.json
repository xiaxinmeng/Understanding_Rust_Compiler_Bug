{"sha": "f001f9301c889101d8a71358b64b96e9707c832b", "node_id": "C_kwDOAAsO6NoAKGYwMDFmOTMwMWM4ODkxMDFkOGE3MTM1OGI2NGI5NmU5NzA3YzgzMmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T03:40:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T03:40:37Z"}, "message": "Auto merge of #97000 - matthiaskrgr:rollup-qh3lhu8, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #96932 (Clarify what values `BorrowedHandle`, `OwnedHandle` etc. can hold.)\n - #96948 (Add test of matches macro for trailing commas)\n - #96988 (Fix platform support links.)\n - #96989 (Be more precise than DefPathData::Misc.)\n - #96993 (rustdoc: fix GUI crash when searching for magic JS property values)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "022187f1e8d38a124952954b3570c51f6e20041a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022187f1e8d38a124952954b3570c51f6e20041a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f001f9301c889101d8a71358b64b96e9707c832b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f001f9301c889101d8a71358b64b96e9707c832b", "html_url": "https://github.com/rust-lang/rust/commit/f001f9301c889101d8a71358b64b96e9707c832b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f001f9301c889101d8a71358b64b96e9707c832b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925e774edc34969c337bf65bd92bb8a338fc528d", "url": "https://api.github.com/repos/rust-lang/rust/commits/925e774edc34969c337bf65bd92bb8a338fc528d", "html_url": "https://github.com/rust-lang/rust/commit/925e774edc34969c337bf65bd92bb8a338fc528d"}, {"sha": "5a111dff3b613209d2ffd8acbf20f2c910655dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a111dff3b613209d2ffd8acbf20f2c910655dc9", "html_url": "https://github.com/rust-lang/rust/commit/5a111dff3b613209d2ffd8acbf20f2c910655dc9"}], "stats": {"total": 227, "additions": 171, "deletions": 56}, "files": [{"sha": "5c32dd372dde1c0278b93eeab74ccddf3e118fa3", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -261,14 +261,16 @@ pub enum DefPathData {\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker).\n     CrateRoot,\n-    // Catch-all for random `DefId` things like `DUMMY_NODE_ID`.\n-    Misc,\n \n     // Different kinds of items and item-like things:\n     /// An impl.\n     Impl,\n     /// An `extern` block.\n     ForeignMod,\n+    /// A `use` item.\n+    Use,\n+    /// A global asm item.\n+    GlobalAsm,\n     /// Something in the type namespace.\n     TypeNs(Symbol),\n     /// Something in the value namespace.\n@@ -443,9 +445,8 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            Impl | ForeignMod | CrateRoot | Misc | ClosureExpr | Ctor | AnonConst | ImplTrait => {\n-                None\n-            }\n+            Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n+            | ImplTrait => None,\n         }\n     }\n \n@@ -459,7 +460,8 @@ impl DefPathData {\n             CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n             Impl => DefPathDataName::Anon { namespace: kw::Impl },\n             ForeignMod => DefPathDataName::Anon { namespace: kw::Extern },\n-            Misc => DefPathDataName::Anon { namespace: sym::misc },\n+            Use => DefPathDataName::Anon { namespace: kw::Use },\n+            GlobalAsm => DefPathDataName::Anon { namespace: sym::global_asm },\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },"}, {"sha": "c4e0ebdc63876c6c17abdb30817577bae1c98ffb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -1994,6 +1994,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n+    /// Look up the name of a definition across crates. This does not look at HIR.\n     fn opt_item_name(self, def_id: DefId) -> Option<Symbol> {\n         if let Some(cnum) = def_id.as_crate_root() {\n             Some(self.crate_name(cnum))\n@@ -2014,16 +2015,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Look up the name of a definition across crates. This does not look at HIR.\n     ///\n-    /// When possible, this function should be used for cross-crate lookups over\n-    /// [`opt_item_name`] to avoid invalidating the incremental cache. If you\n-    /// need to handle items without a name, or HIR items that will not be\n-    /// serialized cross-crate, or if you need the span of the item, use\n+    /// This method will ICE if the corresponding item does not have a name.  In these cases, use\n     /// [`opt_item_name`] instead.\n     ///\n     /// [`opt_item_name`]: Self::opt_item_name\n     pub fn item_name(self, id: DefId) -> Symbol {\n-        // Look at cross-crate items first to avoid invalidating the incremental cache\n-        // unless we have to.\n         self.opt_item_name(id).unwrap_or_else(|| {\n             bug!(\"item_name: no name for {:?}\", self.def_path(id));\n         })"}, {"sha": "f0861103098d25f802cdd68e3e00c100d614421e", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n                 visit::walk_item(self, i);\n                 return self.visit_macro_invoc(i.id);\n             }\n-            ItemKind::GlobalAsm(..) => DefPathData::Misc,\n+            ItemKind::GlobalAsm(..) => DefPathData::GlobalAsm,\n             ItemKind::Use(..) => {\n                 return visit::walk_item(self, i);\n             }\n@@ -160,11 +160,11 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n-        self.create_def(id, DefPathData::Misc, use_tree.span);\n+        self.create_def(id, DefPathData::Use, use_tree.span);\n         match use_tree.kind {\n             UseTreeKind::Simple(_, id1, id2) => {\n-                self.create_def(id1, DefPathData::Misc, use_tree.prefix.span);\n-                self.create_def(id2, DefPathData::Misc, use_tree.prefix.span);\n+                self.create_def(id1, DefPathData::Use, use_tree.prefix.span);\n+                self.create_def(id2, DefPathData::Use, use_tree.prefix.span);\n             }\n             UseTreeKind::Glob => (),\n             UseTreeKind::Nested(..) => {}"}, {"sha": "e1e14011e52b4f9a0f9c9756ca7451c5fc09f5b5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -788,7 +788,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n             // These should never show up as `path_append` arguments.\n             DefPathData::CrateRoot\n-            | DefPathData::Misc\n+            | DefPathData::Use\n+            | DefPathData::GlobalAsm\n             | DefPathData::Impl\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {"}, {"sha": "f27970eaaf1228d3c4ce6eb8fc6544d6044468c2", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -22,8 +22,10 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// so it can be used in FFI in places where a handle is passed as an argument,\n /// it is not captured or consumed.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `BorrowedHandle` always\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -33,6 +35,7 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n /// handle, which is then borrowed under the same lifetime.\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[derive(Copy, Clone)]\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n@@ -45,8 +48,10 @@ pub struct BorrowedHandle<'handle> {\n ///\n /// This closes the handle on drop.\n ///\n-/// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-/// sometimes a valid handle value. See [here] for the full story.\n+/// Note that it *may* have the value `-1`, which in `OwnedHandle` always\n+/// represents a valid handle value, such as [the current process handle], and\n+/// not `INVALID_HANDLE_VALUE`, despite the two having the same value. See\n+/// [here] for the full story.\n ///\n /// And, it *may* have the value `NULL` (0), which can occur when consoles are\n /// detached from processes, or when `windows_subsystem` is used.\n@@ -59,6 +64,7 @@ pub struct BorrowedHandle<'handle> {\n /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n ///\n /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n pub struct OwnedHandle {\n@@ -75,11 +81,13 @@ pub struct OwnedHandle {\n /// `NULL`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `NULL` first.\n ///\n-/// This type considers any value other than `NULL` to be valid, including `INVALID_HANDLE_VALUE`.\n-/// This is because APIs that use `NULL` as their sentry value don't treat `INVALID_HANDLE_VALUE`\n-/// as special.\n+/// This type may hold any handle value that [`OwnedHandle`] may hold. As with `OwnedHandle`, when\n+/// it holds `-1`, that value is interpreted as a valid handle value, such as\n+/// [the current process handle], and not `INVALID_HANDLE_VALUE`.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// If this holds a non-null handle, it will close the handle on drop.\n+///\n+/// [the current process handle]: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess#remarks\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]\n@@ -95,11 +103,10 @@ pub struct HandleOrNull(OwnedHandle);\n /// `INVALID_HANDLE_VALUE`. This ensures that such FFI calls cannot start using the handle without\n /// checking for `INVALID_HANDLE_VALUE` first.\n ///\n-/// This type considers any value other than `INVALID_HANDLE_VALUE` to be valid, including `NULL`.\n-/// This is because APIs that use `INVALID_HANDLE_VALUE` as their sentry value may return `NULL`\n-/// under `windows_subsystem = \"windows\"` or other situations where I/O devices are detached.\n+/// This type may hold any handle value that [`OwnedHandle`] may hold, except that when it holds\n+/// `-1`, that value is interpreted to mean `INVALID_HANDLE_VALUE`.\n ///\n-/// If this holds a valid handle, it will close the handle on drop.\n+/// If holds a handle other than `INVALID_HANDLE_VALUE`, it will close the handle on drop.\n #[repr(transparent)]\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n #[derive(Debug)]"}, {"sha": "49e4f304f5dba6363992bc248d7eb2ca274ca096", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -32,8 +32,15 @@ pub trait AsRawHandle {\n     /// raw handle to the caller, and the handle is only guaranteed\n     /// to be valid while the original object has not yet been destroyed.\n     ///\n+    /// This function may return null, such as when called on [`Stdin`],\n+    /// [`Stdout`], or [`Stderr`] when the console is detached.\n+    ///\n     /// However, borrowing is not strictly required. See [`AsHandle::as_handle`]\n     /// for an API which strictly borrows a handle.\n+    ///\n+    /// [`Stdin`]: io::Stdin\n+    /// [`Stdout`]: io::Stdout\n+    /// [`Stderr`]: io::Stderr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_handle(&self) -> RawHandle;\n }"}, {"sha": "df95325c83d5daba276a9afdbe5349bfbc96b29a", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -15,12 +15,12 @@\n - [Platform Support](platform-support.md)\n     - [Template for target-specific documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n-    - [aarch64-unknown-none-hermitkernel](platform-support/aarch64-unknown-none-hermitkernel.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n+    - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)"}, {"sha": "b596adf32c6fd5e9022623351b8e247846a61445", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -119,7 +119,7 @@ window.initSearch = rawSearchIndex => {\n      */\n     let searchIndex;\n     let currentResults;\n-    const ALIASES = {};\n+    const ALIASES = Object.create(null);\n     const params = searchState.getQueryStringParams();\n \n     // Populate search bar with query string search term when provided,\n@@ -1953,7 +1953,7 @@ window.initSearch = rawSearchIndex => {\n             }\n \n             if (aliases) {\n-                ALIASES[crate] = {};\n+                ALIASES[crate] = Object.create(null);\n                 for (const alias_name in aliases) {\n                     if (!hasOwnPropertyRustdoc(aliases, alias_name)) {\n                         continue;"}, {"sha": "450157e64284f74cac6041918f60cdc3e56e8ccb", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -4,22 +4,55 @@\n   fn g() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:11:8: 11:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:12:5: 12:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-          _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:12:5: 12:6\n-                                           // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {main}>(main) -> bb1; // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n++         _2 = main;                       // scope 0 at $DIR/cycle.rs:12:5: 12:12\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:12:5: 12:6\n+-                                          // + literal: Const { ty: fn(fn() {main}) {f::<fn() {main}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:12:5: 12:12\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:12:12: 12:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:11:8: 13:2\n           return;                          // scope 0 at $DIR/cycle.rs:13:2: 13:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "5e2f70799e41e40d86584e3d6c8ba7b8ff6120d7", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -4,22 +4,72 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:16:11: 16:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:17:5: 17:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n++     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n++         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n++         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++             scope 3 (inlined g) {        // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++                 let mut _6: fn() {main}; // in scope 3 at $DIR/cycle.rs:12:5: 12:12\n++                 scope 4 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n++                     debug g => _6;       // in scope 4 at $DIR/cycle.rs:5:6: 5:7\n++                     let _7: ();          // in scope 4 at $DIR/cycle.rs:6:5: 6:8\n++                     let mut _8: &fn() {main}; // in scope 4 at $DIR/cycle.rs:6:5: 6:6\n++                     scope 5 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++                     }\n++                 }\n++             }\n++         }\n++     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-          _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n-                                           // mir::Constant\n-                                           // + span: $DIR/cycle.rs:17:5: 17:6\n-                                           // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-         _1 = f::<fn() {g}>(g) -> bb1;    // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         StorageLive(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n++         _2 = g;                          // scope 0 at $DIR/cycle.rs:17:5: 17:9\n                                            // mir::Constant\n+-                                          // + span: $DIR/cycle.rs:17:5: 17:6\n+-                                          // + literal: Const { ty: fn(fn() {g}) {f::<fn() {g}>}, val: Value(Scalar(<ZST>)) }\n+-                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(Scalar(<ZST>)) }\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageLive(_7);                 // scope 4 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_8);                 // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _8 = &_6;                        // scope 4 at $DIR/cycle.rs:6:5: 6:6\n++         _7 = move (*_8)() -> [return: bb4, unwind: bb2]; // scope 5 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:17:5: 17:9\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:17:9: 17:10\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:16:11: 18:2\n           return;                          // scope 0 at $DIR/cycle.rs:18:2: 18:2\n++     }\n++ \n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     }\n++ \n++     bb3 (cleanup): {\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     }\n++ \n++     bb4: {\n++         StorageDead(_8);                 // scope 4 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_7);                 // scope 4 at $DIR/cycle.rs:6:8: 6:9\n++         StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:12:5: 12:12\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "267f53a8dfe7b4f7b57b6fb1ff6872595b20303a", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -4,20 +4,13 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-cycle-generic.rs:8:11: 8:11\n       let _1: ();                          // in scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+     scope 1 (inlined <C as Call>::call) { // at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline-cycle-generic.rs:38:9: 38:31\n-+         }\n-+     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n--         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline-cycle-generic.rs:31:9: 31:28\n+          _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline-cycle-generic.rs:9:5: 9:24\n                                            // mir::Constant\n--                                          // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n-+                                          // + span: $DIR/inline-cycle-generic.rs:31:9: 31:26\n-+                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + span: $DIR/inline-cycle-generic.rs:9:5: 9:22\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {"}, {"sha": "2f1d841c3be19e0bb454733f5e42c58d62e37e1a", "filename": "src/test/rustdoc-js/prototype.js", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Frustdoc-js%2Fprototype.js", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Frustdoc-js%2Fprototype.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fprototype.js?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -0,0 +1,16 @@\n+// exact-check\n+\n+const QUERY = ['constructor', '__proto__'];\n+\n+const EXPECTED = [\n+    {\n+        'others': [],\n+        'returned': [],\n+        'in_args': [],\n+    },\n+    {\n+        'others': [],\n+        'returned': [],\n+        'in_args': [],\n+    },\n+];"}, {"sha": "5f6d73cc19626fb5e3e06fc2a9eaa9c288bd7f68", "filename": "src/test/rustdoc-js/prototype.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Frustdoc-js%2Fprototype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Frustdoc-js%2Fprototype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fprototype.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -0,0 +1,4 @@\n+// The alias needed to be there to reproduce the bug\n+// that used to be here.\n+#[doc(alias=\"other_alias\")]\n+pub fn something_else() {}"}, {"sha": "25b8c3cc62e1619b54d3939d854572d5400c28c4", "filename": "src/test/ui/macros/macro-comma-support-rpass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-support-rpass.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -192,6 +192,12 @@ fn line() {\n     let _ = line!();\n }\n \n+#[test]\n+fn matches() {\n+    let _ = matches!(1, x if x > 0);\n+    let _ = matches!(1, x if x > 0,);\n+}\n+\n #[test]\n fn module_path() {\n     let _ = module_path!();"}, {"sha": "3ad4ed24cf7fc7e09dff18e4a6183dd4160750ff", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17h87acd86b3a6f1754E)\n+error: symbol-name(_ZN5basic4main17hcbad207c0eeb0b3bE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::h87acd86b3a6f1754)\n+error: demangling(basic::main::hcbad207c0eeb0b3b)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "21bf21ee71c6ff9a3697e87fb38983f7f1a7e9bd", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h8d22952c45e20d65E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h2f2efcf580c9b1eeE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h8d22952c45e20d65)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h2f2efcf580c9b1ee)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "2c9b41eea2abeb28209337b450fc04090669179d", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.rs?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -7,7 +7,7 @@ trait Trait: SuperTrait<A = <Self as SuperTrait>::B> {}\n \n fn transmute<A, B>(x: A) -> B {\n     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-    //~^ ERROR type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+    //~^ ERROR type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n }\n \n fn foo<A, B, T: ?Sized>(x: T::A) -> B"}, {"sha": "eab42ca568a04b3c24f6c69cb575557d90a1d698", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f001f9301c889101d8a71358b64b96e9707c832b/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=f001f9301c889101d8a71358b64b96e9707c832b", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<dyn Trait<A = A, B = B> as SuperTrait>::A == B`\n+error[E0271]: type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n   --> $DIR/enforce-supertrait-projection.rs:9:5\n    |\n LL | fn transmute<A, B>(x: A) -> B {"}]}