{"sha": "341883d051ebbfaa6daa456b198d557fa0272b71", "node_id": "C_kwDOAAsO6NoAKDM0MTg4M2QwNTFlYmJmYWE2ZGFhNDU2YjE5OGQ1NTdmYTAyNzJiNzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-10T06:28:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-10T06:28:40Z"}, "message": "Auto merge of #95502 - jyn514:doc-rustc, r=Mark-Simulacrum\n\nFix `x doc compiler/rustc`\n\nThis also has a few cleanups to `doc.rs`. The last two commits I don't care about, but the first commit I'd like to keep - it will be very useful for https://github.com/rust-lang/rust/issues/44293.\n\nFixes https://github.com/rust-lang/rust/issues/95447.", "tree": {"sha": "5c11f0a2ffcd042a928142decaf2800e4a7bdc58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c11f0a2ffcd042a928142decaf2800e4a7bdc58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341883d051ebbfaa6daa456b198d557fa0272b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341883d051ebbfaa6daa456b198d557fa0272b71", "html_url": "https://github.com/rust-lang/rust/commit/341883d051ebbfaa6daa456b198d557fa0272b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341883d051ebbfaa6daa456b198d557fa0272b71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7b4824731483df9ac911cb5b60fe85f04162ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b4824731483df9ac911cb5b60fe85f04162ad0", "html_url": "https://github.com/rust-lang/rust/commit/f7b4824731483df9ac911cb5b60fe85f04162ad0"}, {"sha": "72315919e66b10c1996497f780142df7b1ec0692", "url": "https://api.github.com/repos/rust-lang/rust/commits/72315919e66b10c1996497f780142df7b1ec0692", "html_url": "https://github.com/rust-lang/rust/commit/72315919e66b10c1996497f780142df7b1ec0692"}], "stats": {"total": 98, "additions": 30, "deletions": 68}, "files": [{"sha": "077a86af50b2e0bf36aeb35f87ae89d72450132e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=341883d051ebbfaa6daa456b198d557fa0272b71", "patch": "@@ -7,7 +7,6 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n-use std::collections::HashSet;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -554,13 +553,9 @@ impl Step for Rustc {\n         let paths = builder\n             .paths\n             .iter()\n-            .map(components_simplified)\n-            .filter_map(|path| {\n-                if path.get(0) == Some(&\"compiler\") {\n-                    path.get(1).map(|p| p.to_owned())\n-                } else {\n-                    None\n-                }\n+            .filter(|path| {\n+                let components = components_simplified(path);\n+                components.len() >= 2 && components[0] == \"compiler\"\n             })\n             .collect::<Vec<_>>();\n \n@@ -608,38 +603,22 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--extern-html-root-url\");\n         cargo.rustdocflag(\"ena=https://docs.rs/ena/latest/\");\n \n-        let mut compiler_crates = HashSet::new();\n-\n-        if paths.is_empty() {\n-            // Find dependencies for top level crates.\n-            for root_crate in &[\"rustc_driver\", \"rustc_codegen_llvm\", \"rustc_codegen_ssa\"] {\n-                compiler_crates.extend(\n-                    builder\n-                        .in_tree_crates(root_crate, Some(target))\n-                        .into_iter()\n-                        .map(|krate| krate.name),\n-                );\n-            }\n+        let root_crates = if paths.is_empty() {\n+            vec![\n+                INTERNER.intern_str(\"rustc_driver\"),\n+                INTERNER.intern_str(\"rustc_codegen_llvm\"),\n+                INTERNER.intern_str(\"rustc_codegen_ssa\"),\n+            ]\n         } else {\n-            for root_crate in paths {\n-                if !builder.src.join(\"compiler\").join(&root_crate).exists() {\n-                    builder.info(&format!(\n-                        \"\\tskipping - compiler/{} (unknown compiler crate)\",\n-                        root_crate\n-                    ));\n-                } else {\n-                    compiler_crates.extend(\n-                        builder\n-                            .in_tree_crates(root_crate, Some(target))\n-                            .into_iter()\n-                            .map(|krate| krate.name),\n-                    );\n-                }\n-            }\n-        }\n+            paths.into_iter().map(|p| builder.crate_paths[p]).collect()\n+        };\n+        // Find dependencies for top level crates.\n+        let compiler_crates = root_crates.iter().flat_map(|krate| {\n+            builder.in_tree_crates(krate, Some(target)).into_iter().map(|krate| krate.name)\n+        });\n \n         let mut to_open = None;\n-        for krate in &compiler_crates {\n+        for krate in compiler_crates {\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself."}, {"sha": "b93fc791820f409c481da49bb2e13425c3340dd0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=341883d051ebbfaa6daa456b198d557fa0272b71", "patch": "@@ -302,7 +302,9 @@ pub struct Build {\n     ar: HashMap<TargetSelection, PathBuf>,\n     ranlib: HashMap<TargetSelection, PathBuf>,\n     // Miscellaneous\n+    // allow bidirectional lookups: both name -> path and path -> name\n     crates: HashMap<Interned<String>, Crate>,\n+    crate_paths: HashMap<PathBuf, Interned<String>>,\n     is_sudo: bool,\n     ci_env: CiEnv,\n     delayed_failures: RefCell<Vec<String>>,\n@@ -492,6 +494,7 @@ impl Build {\n             ar: HashMap::new(),\n             ranlib: HashMap::new(),\n             crates: HashMap::new(),\n+            crate_paths: HashMap::new(),\n             is_sudo,\n             ci_env: CiEnv::current(),\n             delayed_failures: RefCell::new(Vec::new()),"}, {"sha": "e193e70a0c417452b3649571c2cb990be23727db", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=341883d051ebbfaa6daa456b198d557fa0272b71", "patch": "@@ -49,7 +49,11 @@ pub fn build(build: &mut Build) {\n                 .filter(|dep| dep.source.is_none())\n                 .map(|dep| INTERNER.intern_string(dep.name))\n                 .collect();\n-            build.crates.insert(name, Crate { name, deps, path });\n+            let krate = Crate { name, deps, path };\n+            let relative_path = krate.local_path(build);\n+            build.crates.insert(name, krate);\n+            let existing_path = build.crate_paths.insert(relative_path, name);\n+            assert!(existing_path.is_none(), \"multiple crates with the same path\");\n         }\n     }\n }"}, {"sha": "9d7ea09fc82591db891de63c43c3a807c41a8950", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341883d051ebbfaa6daa456b198d557fa0272b71/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=341883d051ebbfaa6daa456b198d557fa0272b71", "patch": "@@ -21,7 +21,6 @@ use crate::native;\n use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var, output, t};\n-use crate::Crate as CargoCrate;\n use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n@@ -1901,19 +1900,10 @@ impl Step for CrateLibrustc {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.build_triple());\n+        let krate = builder.crate_paths[&run.path];\n+        let test_kind = builder.kind.into();\n \n-        for krate in builder.in_tree_crates(\"rustc-main\", Some(run.target)) {\n-            if krate.path.ends_with(&run.path) {\n-                let test_kind = builder.kind.into();\n-\n-                builder.ensure(CrateLibrustc {\n-                    compiler,\n-                    target: run.target,\n-                    test_kind,\n-                    krate: krate.name,\n-                });\n-            }\n-        }\n+        builder.ensure(CrateLibrustc { compiler, target: run.target, test_kind, krate });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -1947,24 +1937,10 @@ impl Step for Crate {\n     fn make_run(run: RunConfig<'_>) {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.build_triple());\n+        let test_kind = builder.kind.into();\n+        let krate = builder.crate_paths[&run.path];\n \n-        let make = |mode: Mode, krate: &CargoCrate| {\n-            let test_kind = builder.kind.into();\n-\n-            builder.ensure(Crate {\n-                compiler,\n-                target: run.target,\n-                mode,\n-                test_kind,\n-                krate: krate.name,\n-            });\n-        };\n-\n-        for krate in builder.in_tree_crates(\"test\", Some(run.target)) {\n-            if krate.path.ends_with(&run.path) {\n-                make(Mode::Std, krate);\n-            }\n-        }\n+        builder.ensure(Crate { compiler, target: run.target, mode: Mode::Std, test_kind, krate });\n     }\n \n     /// Runs all unit tests plus documentation tests for a given crate defined"}]}