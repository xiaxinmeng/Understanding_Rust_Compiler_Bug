{"sha": "acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjEyOWM1NDEyYmRjNDM3NWJiM2EzMWExOTJlYTZlN2YyNmViY2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-25T01:45:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-25T04:46:27Z"}, "message": "Add temp cleanups for copy/move mode args when other args fail. Fixes #1374", "tree": {"sha": "209fb4df357855f34b0381257219e83a02c7c867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209fb4df357855f34b0381257219e83a02c7c867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "html_url": "https://github.com/rust-lang/rust/commit/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ca50c9ca4fd2084cfbc85030ff5ea21e589635", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ca50c9ca4fd2084cfbc85030ff5ea21e589635", "html_url": "https://github.com/rust-lang/rust/commit/f3ca50c9ca4fd2084cfbc85030ff5ea21e589635"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "7037f3cc5607f40286f6abcc3412048c532a5e55", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "patch": "@@ -2563,8 +2563,10 @@ fn trans_cast(cx: block, e: @ast::expr, id: ast::node_id,\n     ret store_in_dest(e_res.bcx, newval, dest);\n }\n \n-fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef,\n-                  e: @ast::expr) -> result {\n+// temp_cleanups: cleanups that should run only if failure occurs before the\n+// call takes place:\n+fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n+                  &temp_cleanups: [ValueRef]) -> result {\n     let ccx = cx.ccx();\n     let e_ty = expr_ty(cx, e);\n     let is_bot = ty::type_is_bot(e_ty);\n@@ -2612,6 +2614,11 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef,\n         if lv.kind != temporary && !move_out {\n             bcx = take_ty(bcx, val, e_ty);\n         }\n+\n+        // In the event that failure occurs before the call actually\n+        // happens, have to cleanup this copy:\n+        add_clean_temp_mem(bcx, val, e_ty);\n+        temp_cleanups += [val];\n     } else if ty::type_is_immediate(e_ty) && lv.kind != owned {\n         let r = do_spill(bcx, val, e_ty);\n         val = r.val;\n@@ -2638,6 +2645,7 @@ fn trans_args(cx: block, llenv: ValueRef,\n        args: [ValueRef],\n        retslot: ValueRef} {\n \n+    let temp_cleanups = [];\n     let args = ty::ty_fn_args(fn_ty);\n     let llargs: [ValueRef] = [];\n     let lltydescs: [ValueRef] = [];\n@@ -2718,11 +2726,19 @@ fn trans_args(cx: block, llenv: ValueRef,\n     let arg_tys = type_of_explicit_args(ccx, args);\n     let i = 0u;\n     for e: @ast::expr in es {\n-        let r = trans_arg_expr(bcx, args[i], arg_tys[i], e);\n+        let r = trans_arg_expr(bcx, args[i], arg_tys[i], e, temp_cleanups);\n         bcx = r.bcx;\n         llargs += [r.val];\n         i += 1u;\n     }\n+\n+    // now that all arguments have been successfully built, we can revoke any\n+    // temporary cleanups, as they are only needed if argument construction\n+    // should fail (for example, cleanup of copy mode args).\n+    vec::iter(temp_cleanups) {|c|\n+        revoke_clean(bcx, c)\n+    }\n+\n     ret {bcx: bcx,\n          args: llargs,\n          retslot: llretslot};"}, {"sha": "2b522dcd6113e16ebdcf593637d70f05f4cb3c57", "filename": "src/comp/middle/trans/impl.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb129c5412bdc4375bb3a31a192ea6e7f26ebcc/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs?ref=acb129c5412bdc4375bb3a31a192ea6e7f26ebcc", "patch": "@@ -63,8 +63,16 @@ fn trans_impl(ccx: crate_ctxt, path: path, name: ast::ident,\n fn trans_self_arg(bcx: block, base: @ast::expr) -> result {\n     let basety = expr_ty(bcx, base);\n     let m_by_ref = ast::expl(ast::by_ref);\n-    trans_arg_expr(bcx, {mode: m_by_ref, ty: basety},\n-                   T_ptr(type_of_or_i8(bcx.ccx(), basety)), base)\n+    let temp_cleanups = [];\n+    let result = trans_arg_expr(bcx, {mode: m_by_ref, ty: basety},\n+                                T_ptr(type_of_or_i8(bcx.ccx(), basety)), base,\n+                                temp_cleanups);\n+\n+    // by-ref self argument should not require cleanup in the case of\n+    // other arguments failing:\n+    assert temp_cleanups == [];\n+\n+    ret result;\n }\n \n fn trans_method_callee(bcx: block, callee_id: ast::node_id,"}]}