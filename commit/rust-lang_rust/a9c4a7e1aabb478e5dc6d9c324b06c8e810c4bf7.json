{"sha": "a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7", "node_id": "C_kwDOAAsO6NoAKGE5YzRhN2UxYWFiYjQ3OGU1ZGM2ZDljMzI0YjA2YzhlODEwYzRiZjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-07T15:25:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T15:25:42Z"}, "message": "Rollup merge of #95948 - Nilstrieb:improve-cstr-safety-docs, r=RalfJung\n\nImprove the safety docs for `CStr`\n\nNamely, the two functions `from_ptr` and `from_bytes_with_nul_unchecked`.\nBefore, these functions didn't state the requirements clearly enough,\nand I was not immediately able to find them like for other functions.\n\nThis doesn't change the content of the docs, but simply rewords them for\nclarity.\n\nnote: I'm not entirely sure about the '`ptr` must be valid for reads of `u8`.', there might be room for improvement for this (and maybe for the other docs as well \ud83d\ude04)", "tree": {"sha": "7dc11091675f1b68474e74d7c0a119fdc19b40c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc11091675f1b68474e74d7c0a119fdc19b40c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJin232CRBK7hj4Ov3rIwAAE64IAEUJppqK1vn0PtJxC4dE6Q66\nYlvmnDP3Vcbc4ny0PcqAsYU6MoY/nmOZKiluu6sbJ4jSu/wdWXlBJKYVmOeTku69\n3foUqgsCl5kZDatqbxK4khIK9A1iAfnls3a0ixQHoEXj6Ue5seggMDnTaQiM4BQl\n+NCXsvJ7KHlqfMjOnf8ViGwGFKb3SJUXVDx3mzmwo5WeJz7Dgirk+ji04IIxW2gN\n/u5FPLMOg01RVGlP1FU9GQtUmpt/wi/FRCqvyTaBzu6KPvtdVVf3Hhkf9n7nVbvW\ng/5Qiq3SEE1VoXRPU3khhZfQ2l45xs5GYf8U9AJdUowbDIfB3LpQ16m0FfkS0jA=\n=tPJx\n-----END PGP SIGNATURE-----\n", "payload": "tree 7dc11091675f1b68474e74d7c0a119fdc19b40c7\nparent 7fe2c4b00dfbc33643e1af4b293eb057306a8339\nparent 0dda42bc143309e3036341298414269351627528\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654615542 +0200\ncommitter GitHub <noreply@github.com> 1654615542 +0200\n\nRollup merge of #95948 - Nilstrieb:improve-cstr-safety-docs, r=RalfJung\n\nImprove the safety docs for `CStr`\n\nNamely, the two functions `from_ptr` and `from_bytes_with_nul_unchecked`.\nBefore, these functions didn't state the requirements clearly enough,\nand I was not immediately able to find them like for other functions.\n\nThis doesn't change the content of the docs, but simply rewords them for\nclarity.\n\nnote: I'm not entirely sure about the '`ptr` must be valid for reads of `u8`.', there might be room for improvement for this (and maybe for the other docs as well \ud83d\ude04)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7", "html_url": "https://github.com/rust-lang/rust/commit/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe2c4b00dfbc33643e1af4b293eb057306a8339", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe2c4b00dfbc33643e1af4b293eb057306a8339", "html_url": "https://github.com/rust-lang/rust/commit/7fe2c4b00dfbc33643e1af4b293eb057306a8339"}, {"sha": "0dda42bc143309e3036341298414269351627528", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dda42bc143309e3036341298414269351627528", "html_url": "https://github.com/rust-lang/rust/commit/0dda42bc143309e3036341298414269351627528"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "10bf95abd39594ae3a1d1652f35e90a105ae547a", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=a9c4a7e1aabb478e5dc6d9c324b06c8e810c4bf7", "patch": "@@ -196,20 +196,32 @@ impl CStr {\n     /// allows inspection and interoperation of non-owned C strings. The total\n     /// size of the raw C string must be smaller than `isize::MAX` **bytes**\n     /// in memory due to calling the `slice::from_raw_parts` function.\n-    /// This method is unsafe for a number of reasons:\n     ///\n-    /// * There is no guarantee to the validity of `ptr`.\n-    /// * The returned lifetime is not guaranteed to be the actual lifetime of\n-    ///   `ptr`.\n-    /// * There is no guarantee that the memory pointed to by `ptr` contains a\n-    ///   valid nul terminator byte at the end of the string.\n-    /// * It is not guaranteed that the memory pointed by `ptr` won't change\n-    ///   before the `CStr` has been destroyed.\n+    /// # Safety\n+    ///\n+    /// * The memory pointed to by `ptr` must contain a valid nul terminator at the\n+    ///   end of the string.\n+    ///\n+    /// * `ptr` must be [valid] for reads of bytes up to and including the null terminator.\n+    ///   This means in particular:\n+    ///\n+    ///     * The entire memory range of this `CStr` must be contained within a single allocated object!\n+    ///     * `ptr` must be non-null even for a zero-length cstr.\n+    ///\n+    /// * The memory referenced by the returned `CStr` must not be mutated for\n+    ///   the duration of lifetime `'a`.\n     ///\n     /// > **Note**: This operation is intended to be a 0-cost cast but it is\n     /// > currently implemented with an up-front calculation of the length of\n     /// > the string. This is not guaranteed to always be the case.\n     ///\n+    /// # Caveat\n+    ///\n+    /// The lifetime for the returned slice is inferred from its usage. To prevent accidental misuse,\n+    /// it's suggested to tie the lifetime to whichever source lifetime is safe in the context,\n+    /// such as by providing a helper function taking the lifetime of a host value for the slice,\n+    /// or by explicit annotation.\n+    ///\n     /// # Examples\n     ///\n     /// ```ignore (extern-declaration)\n@@ -227,6 +239,8 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    ///\n+    /// [valid]: core::ptr#safety\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -349,8 +363,11 @@ impl CStr {\n     /// Unsafely creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr` wrapper without\n-    /// performing any sanity checks. The provided slice **must** be nul-terminated\n-    /// and not contain any interior nul bytes.\n+    /// performing any sanity checks.\n+    ///\n+    /// # Safety\n+    /// The provided slice **must** be nul-terminated and not contain any interior\n+    /// nul bytes.\n     ///\n     /// # Examples\n     ///"}]}