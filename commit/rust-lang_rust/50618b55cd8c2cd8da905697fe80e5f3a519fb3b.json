{"sha": "50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjE4YjU1Y2Q4YzJjZDhkYTkwNTY5N2ZlODBlNWYzYTUxOWZiM2I=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-13T21:06:37Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-13T21:06:37Z"}, "message": "Error on negative times", "tree": {"sha": "e2e0a84122c6c5599c8d36e82c2110c11a5656b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e0a84122c6c5599c8d36e82c2110c11a5656b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "html_url": "https://github.com/rust-lang/rust/commit/50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50618b55cd8c2cd8da905697fe80e5f3a519fb3b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508df227e5f4820f1d600b72e626a620b2c714af", "url": "https://api.github.com/repos/rust-lang/rust/commits/508df227e5f4820f1d600b72e626a620b2c714af", "html_url": "https://github.com/rust-lang/rust/commit/508df227e5f4820f1d600b72e626a620b2c714af"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "1b799b1330aa1210ccd58781939b6ce1b5e144f8", "filename": "src/shims/time.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/50618b55cd8c2cd8da905697fe80e5f3a519fb3b/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50618b55cd8c2cd8da905697fe80e5f3a519fb3b/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=50618b55cd8c2cd8da905697fe80e5f3a519fb3b", "patch": "@@ -7,15 +7,10 @@ use crate::*;\n \n // Returns the time elapsed between now and the unix epoch as a `Duration` and the sign of the time\n // interval\n-fn get_time() -> (Duration, i128) {\n-    let mut sign = 1;\n-    let duration = SystemTime::now()\n+fn get_time<'tcx>() -> InterpResult<'tcx, Duration> {\n+    SystemTime::now()\n         .duration_since(SystemTime::UNIX_EPOCH)\n-        .unwrap_or_else(|e| {\n-            sign = -1;\n-            e.duration()\n-        });\n-    (duration, sign)\n+        .map_err(|_| err_unsup_format!(\"Time went backwards\").into())\n }\n \n fn int_to_immty_checked<'tcx>(\n@@ -59,13 +54,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tp = this.force_ptr(this.read_scalar(tp_op)?.not_undef()?)?;\n \n-        let (duration, sign) = get_time();\n-        let tv_sec = sign * (duration.as_secs() as i128);\n-        let mut tv_nsec = duration.subsec_nanos() as i128;\n-        // If the number of seconds is zero, we need to put the sign into the second's fraction.\n-        if tv_sec == 0 && sign < 0 {\n-            tv_nsec *= sign;\n-        }\n+        let duration = get_time()?;\n+        let tv_sec = duration.as_secs() as i128;\n+        let tv_nsec = duration.subsec_nanos() as i128;\n \n         let imms = [\n             int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n@@ -97,13 +88,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let tv = this.force_ptr(this.read_scalar(tv_op)?.not_undef()?)?;\n \n-        let (duration, sign) = get_time();\n-        let tv_sec = sign * (duration.as_secs() as i128);\n-        let mut tv_usec = duration.subsec_micros() as i128;\n-        // If the number of seconds is zero, we need to put the sign into the second's fraction.\n-        if tv_sec == 0 && sign < 0 {\n-            tv_usec *= sign;\n-        }\n+        let duration = get_time()?;\n+        let tv_sec = duration.as_secs() as i128;\n+        let tv_usec = duration.subsec_micros() as i128;\n \n         let imms = [\n             int_to_immty_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,"}]}