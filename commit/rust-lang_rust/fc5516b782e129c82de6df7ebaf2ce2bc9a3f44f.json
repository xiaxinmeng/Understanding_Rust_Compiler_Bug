{"sha": "fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "node_id": "C_kwDOAAsO6NoAKGZjNTUxNmI3ODJlMTI5YzgyZGU2ZGY3ZWJhZjJjZTJiYzlhM2Y0NGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T18:55:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T18:55:45Z"}, "message": "Rollup merge of #108588 - ehuss:lint-docs-produces, r=eholk\n\nFix the ffi_unwind_calls lint documentation\n\nThis fixes the [`ffi_unwind_calls`](https://doc.rust-lang.org/nightly/rustc/lints/listing/allowed-by-default.html#ffi-unwind-calls) documentation to show its output correctly. Currently it is showing the text `{{produces}}` which is not how it should look.\n\nThis fixes it by not ignoring the example. I'm not sure why it was ignored, as the way the lint currently works it doesn't seem to require external linkage. This also fixes several mistakes in the example:\n\n* There is no `ffi_unwind_calls` feature.\n* Denies the lint (which is otherwise allow be default).\n* Removes the `mod impl` which is not valid Rust syntax, and doesn't appear to be needed anyways.\n\nThe output now looks like:\n\n```\nwarning: call to foreign function with FFI-unwind ABI\n  --> lint_example.rs:10:14\n   |\n10 |     unsafe { foo(); }\n   |              ^^^^^ call to foreign function with FFI-unwind ABI\n   |\nnote: the lint level is defined here\n  --> lint_example.rs:2:9\n   |\n2  | #![warn(ffi_unwind_calls)]\n   |         ^^^^^^^^^^^^^^^^\n\nwarning: call to function pointer with FFI-unwind ABI\n  --> lint_example.rs:12:14\n   |\n12 |     unsafe { ptr(); }\n   |              ^^^^^ call to function pointer with FFI-unwind ABI\n\n```\n\nThis also includes some updates to the lint-docs tool to help with this issue:\n\n* Adds a check if a lint documentation has `{{produces}}` with an ignored example, and generates an error.\n* All instances of a lint are now displayed. Previously it only showed the first time the lint fires. Some examples may trigger a lint multiple times, and they are all now displayed.", "tree": {"sha": "b60cb103f598948d9d362b850aaf7230f02e4e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b60cb103f598948d9d362b850aaf7230f02e4e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHKCxCRBK7hj4Ov3rIwAALWUIADMFu11K1EVmkP9QhWuVo4Bf\nLEnT9zKjOmipmY0YMm7+6FlErSLqubaWlanPzm87FDJaW60kDNEB5l0FLeq5KLRZ\n0GV0sqe5l+jijXtyejg7IJrchLtXhImgdFXEpgjZrSq+OcKcXMUlpaM5QI7q0kc2\nfn8um5YbhsLvNykjSqqR5FYIDi/zn0E6F0CqqU3yqWfJIYTfRNCxGvtXGpL74GCg\nZHwu4BXj2OGZPibiBiT2oxIHgLWxOP/rGiIMgZJGStwC8S/TpULw83vedl533lNS\nvAI4+NJWvLfgdfF4jbDtWWM9/e8sGEV8Y9mu6Tf39UCGa5TzsQ1Jm2mZAYjROlM=\n=7Qr7\n-----END PGP SIGNATURE-----\n", "payload": "tree b60cb103f598948d9d362b850aaf7230f02e4e50\nparent 5a017d3a572e66bdfbf9efb0c252c252c435900d\nparent ab2508a71f5743717a62744ee26cee11ba4d2f91\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679597745 +0100\ncommitter GitHub <noreply@github.com> 1679597745 +0100\n\nRollup merge of #108588 - ehuss:lint-docs-produces, r=eholk\n\nFix the ffi_unwind_calls lint documentation\n\nThis fixes the [`ffi_unwind_calls`](https://doc.rust-lang.org/nightly/rustc/lints/listing/allowed-by-default.html#ffi-unwind-calls) documentation to show its output correctly. Currently it is showing the text `{{produces}}` which is not how it should look.\n\nThis fixes it by not ignoring the example. I'm not sure why it was ignored, as the way the lint currently works it doesn't seem to require external linkage. This also fixes several mistakes in the example:\n\n* There is no `ffi_unwind_calls` feature.\n* Denies the lint (which is otherwise allow be default).\n* Removes the `mod impl` which is not valid Rust syntax, and doesn't appear to be needed anyways.\n\nThe output now looks like:\n\n```\nwarning: call to foreign function with FFI-unwind ABI\n  --> lint_example.rs:10:14\n   |\n10 |     unsafe { foo(); }\n   |              ^^^^^ call to foreign function with FFI-unwind ABI\n   |\nnote: the lint level is defined here\n  --> lint_example.rs:2:9\n   |\n2  | #![warn(ffi_unwind_calls)]\n   |         ^^^^^^^^^^^^^^^^\n\nwarning: call to function pointer with FFI-unwind ABI\n  --> lint_example.rs:12:14\n   |\n12 |     unsafe { ptr(); }\n   |              ^^^^^ call to function pointer with FFI-unwind ABI\n\n```\n\nThis also includes some updates to the lint-docs tool to help with this issue:\n\n* Adds a check if a lint documentation has `{{produces}}` with an ignored example, and generates an error.\n* All instances of a lint are now displayed. Previously it only showed the first time the lint fires. Some examples may trigger a lint multiple times, and they are all now displayed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "html_url": "https://github.com/rust-lang/rust/commit/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a017d3a572e66bdfbf9efb0c252c252c435900d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a017d3a572e66bdfbf9efb0c252c252c435900d", "html_url": "https://github.com/rust-lang/rust/commit/5a017d3a572e66bdfbf9efb0c252c252c435900d"}, {"sha": "ab2508a71f5743717a62744ee26cee11ba4d2f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2508a71f5743717a62744ee26cee11ba4d2f91", "html_url": "https://github.com/rust-lang/rust/commit/ab2508a71f5743717a62744ee26cee11ba4d2f91"}], "stats": {"total": 104, "additions": 64, "deletions": 40}, "files": [{"sha": "9d6ab0b75df177bc86ddf6c2802eb5626e87f6da", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "patch": "@@ -4008,14 +4008,9 @@ declare_lint! {\n     ///\n     /// ### Example\n     ///\n-    /// ```rust,ignore (need FFI)\n-    /// #![feature(ffi_unwind_calls)]\n+    /// ```rust\n     /// #![feature(c_unwind)]\n-    ///\n-    /// # mod impl {\n-    /// #     #[no_mangle]\n-    /// #     pub fn \"C-unwind\" fn foo() {}\n-    /// # }\n+    /// #![warn(ffi_unwind_calls)]\n     ///\n     /// extern \"C-unwind\" {\n     ///     fn foo();"}, {"sha": "034c6aa0708ec2522a2a389ff32a77d4f76298c6", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 62, "deletions": 33, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=fc5516b782e129c82de6df7ebaf2ce2bc9a3f44f", "patch": "@@ -45,6 +45,36 @@ impl Lint {\n     fn check_style(&self) -> Result<(), Box<dyn Error>> {\n         for &expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n             if expected == \"{{produces}}\" && self.is_ignored() {\n+                if self.doc_contains(\"{{produces}}\") {\n+                    return Err(format!(\n+                        \"the lint example has `ignore`, but also contains the {{{{produces}}}} marker\\n\\\n+                        \\n\\\n+                        The documentation generator cannot generate the example output when the \\\n+                        example is ignored.\\n\\\n+                        Manually include the sample output below the example. For example:\\n\\\n+                        \\n\\\n+                        /// ```rust,ignore (needs command line option)\\n\\\n+                        /// #[cfg(widnows)]\\n\\\n+                        /// fn foo() {{}}\\n\\\n+                        /// ```\\n\\\n+                        ///\\n\\\n+                        /// This will produce:\\n\\\n+                        /// \\n\\\n+                        /// ```text\\n\\\n+                        /// warning: unknown condition name used\\n\\\n+                        ///  --> lint_example.rs:1:7\\n\\\n+                        ///   |\\n\\\n+                        /// 1 | #[cfg(widnows)]\\n\\\n+                        ///   |       ^^^^^^^\\n\\\n+                        ///   |\\n\\\n+                        ///   = note: `#[warn(unexpected_cfgs)]` on by default\\n\\\n+                        /// ```\\n\\\n+                        \\n\\\n+                        Replacing the output with the text of the example you \\\n+                        compiled manually yourself.\\n\\\n+                        \"\n+                    ).into());\n+                }\n                 continue;\n             }\n             if !self.doc_contains(expected) {\n@@ -317,10 +347,10 @@ impl<'a> LintExtractor<'a> {\n                             ..,\n                             &format!(\n                                 \"This will produce:\\n\\\n-                            \\n\\\n-                            ```text\\n\\\n-                            {}\\\n-                            ```\",\n+                                \\n\\\n+                                ```text\\n\\\n+                                {}\\\n+                                ```\",\n                                 output\n                             ),\n                         );\n@@ -392,37 +422,36 @@ impl<'a> LintExtractor<'a> {\n             .filter(|line| line.starts_with('{'))\n             .map(serde_json::from_str)\n             .collect::<Result<Vec<serde_json::Value>, _>>()?;\n-        match msgs\n+        // First try to find the messages with the `code` field set to our lint.\n+        let matches: Vec<_> = msgs\n             .iter()\n-            .find(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n-        {\n-            Some(msg) => {\n-                let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                Ok(rendered.to_string())\n-            }\n-            None => {\n-                match msgs.iter().find(\n-                    |msg| matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)),\n-                ) {\n-                    Some(msg) => {\n-                        let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                        Ok(rendered.to_string())\n-                    }\n-                    None => {\n-                        let rendered: Vec<&str> =\n-                            msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n-                        let non_json: Vec<&str> =\n-                            stderr.lines().filter(|line| !line.starts_with('{')).collect();\n-                        Err(format!(\n-                            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-                            name,\n-                            non_json.join(\"\\n\"),\n-                            rendered.join(\"\\n\")\n-                        )\n-                        .into())\n-                    }\n-                }\n+            .filter(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n+            .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+            .collect();\n+        if matches.is_empty() {\n+            // Some lints override their code to something else (E0566).\n+            // Try to find something that looks like it could be our lint.\n+            let matches: Vec<_> = msgs.iter().filter(|msg|\n+                matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)))\n+                .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+                .collect();\n+            if matches.is_empty() {\n+                let rendered: Vec<&str> =\n+                    msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+                let non_json: Vec<&str> =\n+                    stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+                Err(format!(\n+                    \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+                    name,\n+                    non_json.join(\"\\n\"),\n+                    rendered.join(\"\\n\")\n+                )\n+                .into())\n+            } else {\n+                Ok(matches.join(\"\\n\"))\n             }\n+        } else {\n+            Ok(matches.join(\"\\n\"))\n         }\n     }\n "}]}