{"sha": "60fdfec32759d5e006eae9fe09a87b1a28b19983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmRmZWMzMjc1OWQ1ZTAwNmVhZTlmZTA5YTg3YjFhMjhiMTk5ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-12T19:30:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "eager invalidation", "tree": {"sha": "1d92756db29c8bf4fcca33fdb2bb1b9041c53398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d92756db29c8bf4fcca33fdb2bb1b9041c53398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fdfec32759d5e006eae9fe09a87b1a28b19983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fdfec32759d5e006eae9fe09a87b1a28b19983", "html_url": "https://github.com/rust-lang/rust/commit/60fdfec32759d5e006eae9fe09a87b1a28b19983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fdfec32759d5e006eae9fe09a87b1a28b19983/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecc7ad5b20e693cb8d962187bd83b9ac234de97", "url": "https://api.github.com/repos/rust-lang/rust/commits/cecc7ad5b20e693cb8d962187bd83b9ac234de97", "html_url": "https://github.com/rust-lang/rust/commit/cecc7ad5b20e693cb8d962187bd83b9ac234de97"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "5de3c77747727032e5c23a03b6e09062a6edad7b", "filename": "crates/salsa/src/lib.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/60fdfec32759d5e006eae9fe09a87b1a28b19983/crates%2Fsalsa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fdfec32759d5e006eae9fe09a87b1a28b19983/crates%2Fsalsa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Fsrc%2Flib.rs?ref=60fdfec32759d5e006eae9fe09a87b1a28b19983", "patch": "@@ -3,7 +3,7 @@ extern crate parking_lot;\n \n use std::{\n     sync::Arc,\n-    collections::HashMap,\n+    collections::{HashSet, HashMap},\n     cell::RefCell,\n };\n use parking_lot::Mutex;\n@@ -138,7 +138,16 @@ where\n             return (record.output.clone(), record.output_fingerprint)\n         }\n         if self.query_config.ground_fn.contains_key(&query_id.0) {\n-            return self.force(query_id, params);\n+            let (invalidated, record) = {\n+                let guard = self.db.graph.lock();\n+                let (gen, ref record) = guard[&query_id];\n+                (gen == INVALIDATED, record.clone())\n+            };\n+            if invalidated {\n+                return self.force(query_id, params);\n+            } else {\n+                return (record.output.clone(), record.output_fingerprint);\n+            }\n         }\n         for (dep_query_id, prev_fingerprint) in record.deps.iter().cloned() {\n             let dep_params: D = {\n@@ -198,6 +207,28 @@ where\n     }\n }\n \n+pub struct Invalidations {\n+    types: HashSet<QueryTypeId>,\n+    ids: Vec<QueryId>,\n+}\n+\n+impl Invalidations {\n+    pub fn new() -> Invalidations {\n+        Invalidations {\n+            types: HashSet::new(),\n+            ids: Vec::new(),\n+        }\n+    }\n+    pub fn invalidate(\n+        &mut self,\n+        query_type: QueryTypeId,\n+        params: impl Iterator<Item=InputFingerprint>,\n+    ) {\n+        self.types.insert(query_type);\n+        self.ids.extend(params.map(|it| QueryId(query_type, it)))\n+    }\n+}\n+\n impl<T, D> Db<T, D>\n where\n     D: Clone\n@@ -209,9 +240,25 @@ where\n         }\n     }\n \n-    pub fn with_ground_data(&self, ground_data: T) -> Db<T, D> {\n+    pub fn with_ground_data(\n+        &self,\n+        ground_data: T,\n+        invalidations: Invalidations,\n+    ) -> Db<T, D> {\n+        for id in self.query_config.ground_fn.keys() {\n+            assert!(\n+                invalidations.types.contains(id),\n+                \"all ground queries must be invalidated\"\n+            );\n+        }\n+\n         let gen = Gen(self.db.gen.0 + 1);\n-        let graph = self.db.graph.lock().clone();\n+        let mut graph = self.db.graph.lock().clone();\n+        for id in invalidations.ids {\n+            if let Some((gen, _)) = graph.get_mut(&id) {\n+                *gen = INVALIDATED;\n+            }\n+        }\n         let graph = Mutex::new(graph);\n         Db {\n             db: Arc::new(DbState { ground_data, gen, graph }),\n@@ -232,6 +279,7 @@ where\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n struct Gen(u64);\n+const INVALIDATED: Gen = Gen(!0);\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct InputFingerprint(pub u64);\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]"}, {"sha": "3cec330e64b346a5a6ee8de93b34682e55b9fe02", "filename": "crates/salsa/tests/integration.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60fdfec32759d5e006eae9fe09a87b1a28b19983/crates%2Fsalsa%2Ftests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fdfec32759d5e006eae9fe09a87b1a28b19983/crates%2Fsalsa%2Ftests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Ftests%2Fintegration.rs?ref=60fdfec32759d5e006eae9fe09a87b1a28b19983", "patch": "@@ -1,5 +1,6 @@\n extern crate salsa;\n use std::{\n+    iter::once,\n     sync::Arc,\n     collections::hash_map::{HashMap, DefaultHasher},\n     any::Any,\n@@ -113,30 +114,45 @@ fn test_number_of_lines() {\n     assert_eq!(trace.len(), 0);\n \n     state.insert(1, \"hello\\nworld\".to_string());\n-    let db = db.with_ground_data(state.clone());\n+    let mut inv = salsa::Invalidations::new();\n+    inv.invalidate(GET_TEXT, once(i_print(&1u32)));\n+    inv.invalidate(GET_FILES, once(i_print(&())));\n+    let db = db.with_ground_data(state.clone(), inv);\n     let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n     assert_eq!(*newlines, 2);\n     assert_eq!(trace.len(), 4);\n \n     state.insert(2, \"spam\\neggs\".to_string());\n-    let db = db.with_ground_data(state.clone());\n+    let mut inv = salsa::Invalidations::new();\n+    inv.invalidate(GET_TEXT, once(i_print(&2u32)));\n+    inv.invalidate(GET_FILES, once(i_print(&())));\n+    let db = db.with_ground_data(state.clone(), inv);\n     let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n     assert_eq!(*newlines, 4);\n-    assert_eq!(trace.len(), 5);\n+    assert_eq!(trace.len(), 4);\n \n+    let mut invs = vec![];\n     for i in 0..10 {\n-        state.insert(i + 10, \"spam\".to_string());\n+        let id = i + 10;\n+        invs.push(i_print(&id));\n+        state.insert(id, \"spam\".to_string());\n     }\n-    let db = db.with_ground_data(state.clone());\n+    let mut inv = salsa::Invalidations::new();\n+    inv.invalidate(GET_TEXT, invs.into_iter());\n+    inv.invalidate(GET_FILES, once(i_print(&())));\n+    let db = db.with_ground_data(state.clone(), inv);\n     let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n     assert_eq!(*newlines, 14);\n-    assert_eq!(trace.len(), 24);\n+    assert_eq!(trace.len(), 22);\n \n     state.insert(15, String::new());\n-    let db = db.with_ground_data(state.clone());\n+    let mut inv = salsa::Invalidations::new();\n+    inv.invalidate(GET_TEXT, once(i_print(&15u32)));\n+    inv.invalidate(GET_FILES, once(i_print(&())));\n+    let db = db.with_ground_data(state.clone(), inv);\n     let (newlines, trace) = get::<(), usize>(&db, TOTAL_NEWLINES, ());\n     assert_eq!(*newlines, 13);\n-    assert_eq!(trace.len(), 15);\n+    assert_eq!(trace.len(), 4);\n }\n \n fn o_print<T: Hash>(x: &T) -> salsa::OutputFingerprint {"}]}