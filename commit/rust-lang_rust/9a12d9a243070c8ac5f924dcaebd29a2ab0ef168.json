{"sha": "9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTJkOWEyNDMwNzBjOGFjNWY5MjRkY2FlYmQyOWEyYWIwZWYxNjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-11T14:35:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-22T13:07:34Z"}, "message": "fix dead links to wrapping_offset_from", "tree": {"sha": "03e214d50331d20252b3e1c603274fc74cba2807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e214d50331d20252b3e1c603274fc74cba2807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "html_url": "https://github.com/rust-lang/rust/commit/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f92f0d31bcdb25ab54e2deffa7f194c13d1c7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f92f0d31bcdb25ab54e2deffa7f194c13d1c7ee", "html_url": "https://github.com/rust-lang/rust/commit/4f92f0d31bcdb25ab54e2deffa7f194c13d1c7ee"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "cc5e193852c0fc5fa773069a9c83317fb02f88d3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "patch": "@@ -240,8 +240,8 @@ impl<T: ?Sized> *const T {\n     /// different allocated object. Note that in Rust,\n     /// every (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n-    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n+    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`offset`], this method basically delays the requirement of staying\n@@ -292,7 +292,6 @@ impl<T: ?Sized> *const T {\n     /// This function is the inverse of [`offset`].\n     ///\n     /// [`offset`]: #method.offset\n-    /// [`wrapping_offset_from`]: #method.wrapping_offset_from\n     ///\n     /// # Safety\n     ///\n@@ -326,10 +325,6 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using [`wrapping_offset_from`] instead if these constraints are\n-    /// difficult to satisfy. The only advantage of this method is that it\n-    /// enables more aggressive compiler optimizations.\n-    ///\n     /// # Panics\n     ///\n     /// This function panics if `T` is a Zero-Sized Type (\"ZST\")."}, {"sha": "c85a3a50543b8e2b5809bdc95c07074ec4bc8623", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a12d9a243070c8ac5f924dcaebd29a2ab0ef168/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9a12d9a243070c8ac5f924dcaebd29a2ab0ef168", "patch": "@@ -246,8 +246,8 @@ impl<T: ?Sized> *mut T {\n     /// different allocated object. Note that in Rust,\n     /// every (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n-    /// *not* the same as `y`, and dereferencing it is undefined behavior\n+    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n+    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n     /// Compared to [`offset`], this method basically delays the requirement of staying\n@@ -463,7 +463,6 @@ impl<T: ?Sized> *mut T {\n     /// This function is the inverse of [`offset`].\n     ///\n     /// [`offset`]: #method.offset-1\n-    /// [`wrapping_offset_from`]: #method.wrapping_offset_from-1\n     ///\n     /// # Safety\n     ///\n@@ -497,10 +496,6 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using [`wrapping_offset_from`] instead if these constraints are\n-    /// difficult to satisfy. The only advantage of this method is that it\n-    /// enables more aggressive compiler optimizations.\n-    ///\n     /// # Panics\n     ///\n     /// This function panics if `T` is a Zero-Sized Type (\"ZST\")."}]}