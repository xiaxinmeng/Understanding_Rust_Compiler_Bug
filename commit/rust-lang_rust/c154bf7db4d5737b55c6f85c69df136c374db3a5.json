{"sha": "c154bf7db4d5737b55c6f85c69df136c374db3a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTRiZjdkYjRkNTczN2I1NWM2Zjg1YzY5ZGYxMzZjMzc0ZGIzYTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T17:11:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T17:21:13Z"}, "message": "miri: test with slightly larger BTrees", "tree": {"sha": "4ff90ff8e1ce81e011507f5cb7fff52976c11be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff90ff8e1ce81e011507f5cb7fff52976c11be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c154bf7db4d5737b55c6f85c69df136c374db3a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c154bf7db4d5737b55c6f85c69df136c374db3a5", "html_url": "https://github.com/rust-lang/rust/commit/c154bf7db4d5737b55c6f85c69df136c374db3a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c154bf7db4d5737b55c6f85c69df136c374db3a5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767dadf8e0fb435ced260e8633add31d8fa7ccff", "url": "https://api.github.com/repos/rust-lang/rust/commits/767dadf8e0fb435ced260e8633add31d8fa7ccff", "html_url": "https://github.com/rust-lang/rust/commit/767dadf8e0fb435ced260e8633add31d8fa7ccff"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "f14750089c9560fdf2d6446f30ac355e67d12ef5", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c154bf7db4d5737b55c6f85c69df136c374db3a5/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c154bf7db4d5737b55c6f85c69df136c374db3a5/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=c154bf7db4d5737b55c6f85c69df136c374db3a5", "patch": "@@ -7,10 +7,12 @@ use std::iter::FromIterator;\n use super::DeterministicRng;\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n fn test_basic_large() {\n     let mut map = BTreeMap::new();\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 200;\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -73,7 +75,7 @@ fn test_iter() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n     #[cfg(miri)]\n-    let size = 100;\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -98,7 +100,7 @@ fn test_iter_rev() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n     #[cfg(miri)]\n-    let size = 100;\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -137,7 +139,7 @@ fn test_iter_mixed() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n     #[cfg(miri)]\n-    let size = 100;\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -267,7 +269,7 @@ fn test_range_1000() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 1000;\n     #[cfg(miri)]\n-    let size = 100;\n+    let size = 200;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n@@ -307,7 +309,7 @@ fn test_range() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n     #[cfg(miri)]\n-    let size = 20;\n+    let size = 30;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -329,7 +331,7 @@ fn test_range_mut() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n     #[cfg(miri)]\n-    let size = 20;\n+    let size = 30;\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -506,7 +508,7 @@ fn test_clone() {\n     #[cfg(not(miri))] // Miri is too slow\n     let size = 100;\n     #[cfg(miri)]\n-    let size = 20;\n+    let size = 30;\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {"}]}