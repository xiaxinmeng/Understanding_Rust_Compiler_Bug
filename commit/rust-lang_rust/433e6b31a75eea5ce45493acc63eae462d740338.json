{"sha": "433e6b31a75eea5ce45493acc63eae462d740338", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzM2U2YjMxYTc1ZWVhNWNlNDU0OTNhY2M2M2VhZTQ2MmQ3NDAzMzg=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-26T15:06:20Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-26T15:06:20Z"}, "message": "Add `LocalTaskObj`", "tree": {"sha": "74971086254a1d533d177ec8848050bed679230a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74971086254a1d533d177ec8848050bed679230a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/433e6b31a75eea5ce45493acc63eae462d740338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/433e6b31a75eea5ce45493acc63eae462d740338", "html_url": "https://github.com/rust-lang/rust/commit/433e6b31a75eea5ce45493acc63eae462d740338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/433e6b31a75eea5ce45493acc63eae462d740338/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f9aa1332fc9f0194bac1761ef04e54564e26fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9aa1332fc9f0194bac1761ef04e54564e26fc8", "html_url": "https://github.com/rust-lang/rust/commit/1f9aa1332fc9f0194bac1761ef04e54564e26fc8"}], "stats": {"total": 126, "additions": 118, "deletions": 8}, "files": [{"sha": "6a05ef680889aeb4d12ba634a4234e164f6a2523", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/433e6b31a75eea5ce45493acc63eae462d740338/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e6b31a75eea5ce45493acc63eae462d740338/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=433e6b31a75eea5ce45493acc63eae462d740338", "patch": "@@ -66,7 +66,7 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, UnsafeTask, TaskObj};\n+use core::task::{Context, Poll, UnsafeTask, TaskObj, LocalTaskObj};\n use core::convert::From;\n \n use raw_vec::RawVec;\n@@ -933,7 +933,7 @@ impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<F: Future<Output = ()> + Send + 'static> UnsafeTask for PinBox<F> {\n+unsafe impl<F: Future<Output = ()> + 'static> UnsafeTask for PinBox<F> {\n     fn into_raw(self) -> *mut () {\n         PinBox::into_raw(self) as *mut ()\n     }\n@@ -962,3 +962,17 @@ impl<F: Future<Output = ()> + Send + 'static> From<Box<F>> for TaskObj {\n         TaskObj::new(PinBox::from(boxed))\n     }\n }\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<F: Future<Output = ()> + 'static> From<PinBox<F>> for LocalTaskObj {\n+    fn from(boxed: PinBox<F>) -> Self {\n+        LocalTaskObj::new(boxed)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<F: Future<Output = ()> + 'static> From<Box<F>> for LocalTaskObj {\n+    fn from(boxed: Box<F>) -> Self {\n+        LocalTaskObj::new(PinBox::from(boxed))\n+    }\n+}"}, {"sha": "36370b6b37c3d6ba83f07cc037bca44519e0c9ff", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=433e6b31a75eea5ce45493acc63eae462d740338", "patch": "@@ -24,10 +24,10 @@ mod poll;\n pub use self::poll::Poll;\n \n mod spawn_error;\n-pub use self::spawn_error::{SpawnErrorKind, SpawnObjError};\n+pub use self::spawn_error::{SpawnErrorKind, SpawnObjError, SpawnLocalObjError};\n \n mod task;\n-pub use self::task::{TaskObj, UnsafeTask};\n+pub use self::task::{TaskObj, LocalTaskObj, UnsafeTask};\n \n mod wake;\n pub use self::wake::{Waker, LocalWaker, UnsafeWake};"}, {"sha": "57bb9ebeb30d974814c042062be9d9f43a7defdf", "filename": "src/libcore/task/spawn_error.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Fspawn_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Fspawn_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn_error.rs?ref=433e6b31a75eea5ce45493acc63eae462d740338", "patch": "@@ -13,7 +13,8 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::TaskObj;\n+use mem;\n+use super::{TaskObj, LocalTaskObj};\n \n /// Provides the reason that an executor was unable to spawn.\n pub struct SpawnErrorKind {\n@@ -49,3 +50,33 @@ pub struct SpawnObjError {\n     /// The task for which spawning was attempted\n     pub task: TaskObj,\n }\n+\n+/// The result of a failed spawn\n+#[derive(Debug)]\n+pub struct SpawnLocalObjError {\n+    /// The kind of error\n+    pub kind: SpawnErrorKind,\n+\n+    /// The task for which spawning was attempted\n+    pub task: LocalTaskObj,\n+}\n+\n+impl SpawnLocalObjError {\n+    /// Converts the `SpawnLocalObjError` into a `SpawnObjError`\n+    /// To make this operation safe one has to ensure that the `UnsafeTask`\n+    /// instance from which the `LocalTaskObj` stored inside was created\n+    /// actually implements `Send`.\n+    pub unsafe fn as_spawn_obj_error(self) -> SpawnObjError {\n+        // Safety: Both structs have the same memory layout\n+        mem::transmute::<SpawnLocalObjError, SpawnObjError>(self)\n+    }\n+}\n+\n+impl From<SpawnObjError> for SpawnLocalObjError {\n+    fn from(error: SpawnObjError) -> SpawnLocalObjError {\n+        unsafe {\n+            // Safety: Both structs have the same memory layout\n+            mem::transmute::<SpawnObjError, SpawnLocalObjError>(error)\n+        }\n+    }\n+}"}, {"sha": "9896d7f5ff2217e8bd8b5661dad6fd4685ed03d1", "filename": "src/libcore/task/task.rs", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/433e6b31a75eea5ce45493acc63eae462d740338/src%2Flibcore%2Ftask%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Ftask.rs?ref=433e6b31a75eea5ce45493acc63eae462d740338", "patch": "@@ -14,7 +14,7 @@\n \n use fmt;\n use future::Future;\n-use mem::PinMut;\n+use mem::{self, PinMut};\n use super::{Context, Poll};\n \n /// A custom trait object for polling tasks, roughly akin to\n@@ -30,7 +30,7 @@ unsafe impl Send for TaskObj {}\n impl TaskObj {\n     /// Create a `TaskObj` from a custom trait object representation.\n     #[inline]\n-    pub fn new<T: UnsafeTask>(t: T) -> TaskObj {\n+    pub fn new<T: UnsafeTask + Send>(t: T) -> TaskObj {\n         TaskObj {\n             ptr: t.into_raw(),\n             poll_fn: T::poll,\n@@ -65,6 +65,71 @@ impl Drop for TaskObj {\n     }\n }\n \n+/// A custom trait object for polling tasks, roughly akin to\n+/// `Box<Future<Output = ()>>`.\n+/// Contrary to `TaskObj`, `LocalTaskObj` does not have a `Send` bound.\n+pub struct LocalTaskObj {\n+    ptr: *mut (),\n+    poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<()>,\n+    drop_fn: unsafe fn(*mut ()),\n+}\n+\n+impl LocalTaskObj {\n+    /// Create a `LocalTaskObj` from a custom trait object representation.\n+    #[inline]\n+    pub fn new<T: UnsafeTask>(t: T) -> LocalTaskObj {\n+        LocalTaskObj {\n+            ptr: t.into_raw(),\n+            poll_fn: T::poll,\n+            drop_fn: T::drop,\n+        }\n+    }\n+\n+    /// Converts the `LocalTaskObj` into a `TaskObj`\n+    /// To make this operation safe one has to ensure that the `UnsafeTask`\n+    /// instance from which this `LocalTaskObj` was created actually implements\n+    /// `Send`.\n+    pub unsafe fn as_task_obj(self) -> TaskObj {\n+        // Safety: Both structs have the same memory layout\n+        mem::transmute::<LocalTaskObj, TaskObj>(self)\n+    }\n+}\n+\n+impl fmt::Debug for LocalTaskObj {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"LocalTaskObj\")\n+            .finish()\n+    }\n+}\n+\n+impl From<TaskObj> for LocalTaskObj {\n+    fn from(task: TaskObj) -> LocalTaskObj {\n+        unsafe {\n+            // Safety: Both structs have the same memory layout\n+            mem::transmute::<TaskObj, LocalTaskObj>(task)\n+        }\n+    }\n+}\n+\n+impl Future for LocalTaskObj {\n+    type Output = ();\n+\n+    #[inline]\n+    fn poll(self: PinMut<Self>, cx: &mut Context) -> Poll<()> {\n+        unsafe {\n+            (self.poll_fn)(self.ptr, cx)\n+        }\n+    }\n+}\n+\n+impl Drop for LocalTaskObj {\n+    fn drop(&mut self) {\n+        unsafe {\n+            (self.drop_fn)(self.ptr)\n+        }\n+    }\n+}\n+\n /// A custom implementation of a task trait object for `TaskObj`, providing\n /// a hand-rolled vtable.\n ///\n@@ -74,7 +139,7 @@ impl Drop for TaskObj {\n /// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n /// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n /// called.\n-pub unsafe trait UnsafeTask: Send + 'static {\n+pub unsafe trait UnsafeTask: 'static {\n     /// Convert a owned instance into a (conceptually owned) void pointer.\n     fn into_raw(self) -> *mut ();\n "}]}