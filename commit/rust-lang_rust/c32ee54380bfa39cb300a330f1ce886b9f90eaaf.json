{"sha": "c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "node_id": "C_kwDOAAsO6NoAKGMzMmVlNTQzODBiZmEzOWNiMzAwYTMzMGYxY2U4ODZiOWY5MGVhYWY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-31T21:49:32Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T05:48:29Z"}, "message": "rustdoc: Remove redundant `Impl.span` field\n\nIt can be computed on-demand in `Item::span()`.", "tree": {"sha": "9bf877dbeca496a7433132c4be8bedf4224bb798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf877dbeca496a7433132c4be8bedf4224bb798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "html_url": "https://github.com/rust-lang/rust/commit/c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b4ea8fb67ff5f754366157cbd98d9813253d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b4ea8fb67ff5f754366157cbd98d9813253d93", "html_url": "https://github.com/rust-lang/rust/commit/88b4ea8fb67ff5f754366157cbd98d9813253d93"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "66f9cb45d70e002cc08146867d084a1822fbbfa2", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -115,7 +115,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             visibility: Inherited,\n             def_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n             kind: box ImplItem(Impl {\n-                span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n                 trait_: Some(trait_ref.clean(self.cx)),"}, {"sha": "a880ce883be783605e138b53ecc2919b5a142335", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -106,7 +106,6 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n                     kind: box ImplItem(Impl {\n-                        span: Span::new(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),"}, {"sha": "ae7d970f40e7da28b9afcc71b2b089528670536a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -490,7 +490,6 @@ crate fn build_impl(\n         did,\n         None,\n         clean::ImplItem(clean::Impl {\n-            span: clean::types::rustc_span(did, cx.tcx),\n             unsafety: hir::Unsafety::Normal,\n             generics,\n             trait_,"}, {"sha": "1239d6a0be400b84d61d47511d24bd3d75da4ab5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -1889,7 +1889,6 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n     });\n     let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {\n         let kind = ImplItem(Impl {\n-            span: types::rustc_span(tcx.hir().local_def_id(hir_id).to_def_id(), tcx),\n             unsafety: impl_.unsafety,\n             generics: impl_.generics.clean(cx),\n             trait_,"}, {"sha": "ae9280c46ff10bbefedbfb480ba71dd899645e3f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -391,12 +391,19 @@ impl Item {\n             ItemKind::StrippedItem(k) => k,\n             _ => &*self.kind,\n         };\n-        if let ItemKind::ModuleItem(Module { span, .. }) | ItemKind::ImplItem(Impl { span, .. }) =\n-            kind\n-        {\n-            *span\n-        } else {\n-            self.def_id.as_def_id().map(|did| rustc_span(did, tcx)).unwrap_or_else(Span::dummy)\n+        match kind {\n+            ItemKind::ModuleItem(Module { span, .. }) => *span,\n+            ItemKind::ImplItem(Impl { synthetic: true, .. }) => Span::dummy(),\n+            ItemKind::ImplItem(Impl { blanket_impl: Some(_), .. }) => {\n+                if let ItemId::Blanket { impl_id, .. } = self.def_id {\n+                    rustc_span(impl_id, tcx)\n+                } else {\n+                    panic!(\"blanket impl item has non-blanket ID\")\n+                }\n+            }\n+            _ => {\n+                self.def_id.as_def_id().map(|did| rustc_span(did, tcx)).unwrap_or_else(Span::dummy)\n+            }\n         }\n     }\n \n@@ -2165,7 +2172,6 @@ impl Constant {\n \n #[derive(Clone, Debug)]\n crate struct Impl {\n-    crate span: Span,\n     crate unsafety: hir::Unsafety,\n     crate generics: Generics,\n     crate trait_: Option<Path>,"}, {"sha": "409d08b3298ac26f32e37c33b9f5e9b06fbe06a8", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32ee54380bfa39cb300a330f1ce886b9f90eaaf/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "patch": "@@ -509,7 +509,6 @@ impl FromWithTcx<clean::Impl> for Impl {\n             negative_polarity,\n             synthetic,\n             blanket_impl,\n-            span: _span,\n         } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| {"}]}