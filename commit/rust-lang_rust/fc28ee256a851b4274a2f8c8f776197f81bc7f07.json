{"sha": "fc28ee256a851b4274a2f8c8f776197f81bc7f07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjhlZTI1NmE4NTFiNDI3NGEyZjhjOGY3NzYxOTdmODFiYzdmMDc=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-04T19:19:22Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-06-23T00:29:37Z"}, "message": "upgrade thread_local! invocation syntax\n\nAllows declaring multiple statics in one macro invocation, and supports attaching attributes to the generated items.", "tree": {"sha": "69a6d9912105a69ca5e646885631e07c050235db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a6d9912105a69ca5e646885631e07c050235db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc28ee256a851b4274a2f8c8f776197f81bc7f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc28ee256a851b4274a2f8c8f776197f81bc7f07", "html_url": "https://github.com/rust-lang/rust/commit/fc28ee256a851b4274a2f8c8f776197f81bc7f07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc28ee256a851b4274a2f8c8f776197f81bc7f07/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe96928d7de991e527a7ed7b88bb30aa965c8a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96928d7de991e527a7ed7b88bb30aa965c8a08", "html_url": "https://github.com/rust-lang/rust/commit/fe96928d7de991e527a7ed7b88bb30aa965c8a08"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "152b9771086b80c7a32017eab810b14a0a152a96", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fc28ee256a851b4274a2f8c8f776197f81bc7f07/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc28ee256a851b4274a2f8c8f776197f81bc7f07/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=fc28ee256a851b4274a2f8c8f776197f81bc7f07", "patch": "@@ -100,18 +100,52 @@ pub struct LocalKey<T: 'static> {\n \n /// Declare a new thread local storage key of type `std::thread::LocalKey`.\n ///\n+/// # Syntax\n+///\n+/// The macro wraps any number of static declarations and makes them thread local.\n+/// Each static may be public or private, and attributes are allowed. Example:\n+///\n+/// ```\n+/// use std::cell::RefCell;\n+/// thread_local! {\n+///     pub static FOO: RefCell<u32> = RefCell::new(1);\n+///\n+///     #[allow(unused)]\n+///     static BAR: RefCell<f32> = RefCell::new(1.0);\n+/// }\n+/// # fn main() {}\n+/// ```\n+///\n /// See [LocalKey documentation](thread/struct.LocalKey.html) for more\n /// information.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n macro_rules! thread_local {\n-    (static $name:ident: $t:ty = $init:expr) => (\n-        static $name: $crate::thread::LocalKey<$t> =\n+    // rule 0: empty (base case for the recursion)\n+    () => {};\n+\n+    // rule 1: process multiple declarations where the first one is private\n+    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n+        thread_local!($(#[$attr])* static $name: $t = $init); // go to rule 2\n+        thread_local!($($rest)*);\n+    );\n+\n+    // rule 2: handle a single private declaration\n+    ($(#[$attr:meta])* static $name:ident: $t:ty = $init:expr) => (\n+        $(#[$attr])* static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init);\n     );\n-    (pub static $name:ident: $t:ty = $init:expr) => (\n-        pub static $name: $crate::thread::LocalKey<$t> =\n+\n+    // rule 3: handle multiple declarations where the first one is public\n+    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n+        thread_local!($(#[$attr])* pub static $name: $t = $init); // go to rule 4\n+        thread_local!($($rest)*);\n+    );\n+\n+    // rule 4: handle a single public declaration\n+    ($(#[$attr:meta])* pub static $name:ident: $t:ty = $init:expr) => (\n+        $(#[$attr])* pub static $name: $crate::thread::LocalKey<$t> =\n             __thread_local_inner!($t, $init);\n     );\n }"}, {"sha": "a5967249b54543dcd3807544617bf13605470201", "filename": "src/test/run-pass/thread-local-syntax.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc28ee256a851b4274a2f8c8f776197f81bc7f07/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc28ee256a851b4274a2f8c8f776197f81bc7f07/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthread-local-syntax.rs?ref=fc28ee256a851b4274a2f8c8f776197f81bc7f07", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(missing_docs)]\n+//! this tests the syntax of `thread_local!`\n+\n+thread_local! {\n+    // no docs\n+    #[allow(unused)]\n+    static FOO: i32 = 42;\n+    /// docs\n+    pub static BAR: String = String::from(\"bar\");\n+}\n+thread_local!(static BAZ: u32 = 0);\n+\n+fn main() {}"}]}