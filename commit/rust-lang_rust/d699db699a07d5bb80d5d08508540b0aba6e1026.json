{"sha": "d699db699a07d5bb80d5d08508540b0aba6e1026", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OTlkYjY5OWEwN2Q1YmI4MGQ1ZDA4NTA4NTQwYjBhYmE2ZTEwMjY=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T12:29:50Z"}, "committer": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2012-01-19T12:31:43Z"}, "message": "rustc: Refactor lint check and avoid a segv fault\n\nThe segv fault issue is #1566", "tree": {"sha": "ca0f6e9a2dd14c469d8e875f8c4b1d5782a35cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0f6e9a2dd14c469d8e875f8c4b1d5782a35cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d699db699a07d5bb80d5d08508540b0aba6e1026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d699db699a07d5bb80d5d08508540b0aba6e1026", "html_url": "https://github.com/rust-lang/rust/commit/d699db699a07d5bb80d5d08508540b0aba6e1026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d699db699a07d5bb80d5d08508540b0aba6e1026/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c", "html_url": "https://github.com/rust-lang/rust/commit/7ffb2cb7e8d3f1845455a51f83fde3fd4759790c"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "ea961f917e52a471de1d605d75d62a03518fe6a5", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d699db699a07d5bb80d5d08508540b0aba6e1026/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d699db699a07d5bb80d5d08508540b0aba6e1026/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=d699db699a07d5bb80d5d08508540b0aba6e1026", "patch": "@@ -203,9 +203,14 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n-    if vec::len(sess.opts.lint_opts) > 0u {\n-        let timer = bind time(time_passes, _, _);\n-        lint::check_crate(ty_cx, crate, sess.opts.lint_opts, timer)\n+\n+    vec::iter(sess.opts.lint_opts) {|lopt|\n+        alt lopt {\n+          ctypes {\n+            time(time_passes, \"ctypes usage checking\",\n+                 bind lint::check_ctypes(ty_cx, crate))\n+          }\n+        }\n     }\n \n     if upto == cu_no_trans { ret {crate: crate, tcx: some(ty_cx), src: src}; }\n@@ -384,7 +389,7 @@ fn build_session_options(match: getopts::match,\n \n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n-    let lint_opts : [lint::option] = [];\n+    let lint_opts = [];\n     if !opt_present(match, \"no-lint-ctypes\") {\n         lint_opts += [lint::ctypes];\n     }"}, {"sha": "adbd959b0de12485f50a953b54ccaa66293d9884", "filename": "src/comp/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d699db699a07d5bb80d5d08508540b0aba6e1026/src%2Fcomp%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d699db699a07d5bb80d5d08508540b0aba6e1026/src%2Fcomp%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flint.rs?ref=d699db699a07d5bb80d5d08508540b0aba6e1026", "patch": "@@ -8,31 +8,19 @@ enum option {\n     ctypes;\n }\n \n-fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n-               checks: [option], timer: block(str, fn@())) {\n-    let ccx = @{tcx: tcx};\n-    vec::iter(checks) {|c|\n-        alt c {\n-          ctypes {\n-            timer(\"ctypes usage checking\", bind check_ctypes(ccx, crate))\n-          }\n-        }\n-    }\n-}\n-\n-fn check_ctypes(ccx: @crate_ctxt, crate: @ast::crate) {\n-    fn check_native_fn(ccx: @crate_ctxt, decl: ast::fn_decl) {\n+fn check_ctypes(tcx: ty::ctxt, crate: @ast::crate) {\n+    fn check_native_fn(tcx: ty::ctxt, decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n         for ty in (tys + [decl.output]) {\n             alt ty.node {\n               ast::ty_int(ast::ty_i) {\n-                ccx.tcx.sess.span_warn(\n+                tcx.sess.span_warn(\n                     ty.span,\n                     \"found rust type `int` in native module, while \\\n                      ctypes::c_int or ctypes::long should be used\");\n               }\n               ast::ty_uint(ast::ty_u) {\n-                ccx.tcx.sess.span_warn(\n+                tcx.sess.span_warn(\n                     ty.span,\n                     \"found rust type `uint` in native module, while \\\n                      ctypes::c_uint or ctypes::ulong should be used\");\n@@ -42,13 +30,13 @@ fn check_ctypes(ccx: @crate_ctxt, crate: @ast::crate) {\n         }\n     }\n \n-    fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n+    fn check_item(tcx: ty::ctxt, it: @ast::item) {\n         alt it.node {\n           ast::item_native_mod(nmod) {\n             for ni in nmod.items {\n                 alt ni.node {\n                   ast::native_item_fn(decl, tps) {\n-                    check_native_fn(ccx, decl);\n+                    check_native_fn(tcx, decl);\n                   }\n                   _ { }\n                 }\n@@ -59,7 +47,7 @@ fn check_ctypes(ccx: @crate_ctxt, crate: @ast::crate) {\n     }\n \n     let visit = visit::mk_simple_visitor(@{\n-        visit_item: bind check_item(ccx, _)\n+        visit_item: bind check_item(tcx, _)\n         with *visit::default_simple_visitor()\n     });\n     visit::visit_crate(*crate, (), visit);"}]}