{"sha": "0142e961ad03e99663cf811c27012daef51c9270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDJlOTYxYWQwM2U5OTY2M2NmODExYzI3MDEyZGFlZjUxYzkyNzA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-01-31T15:16:33Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-01-31T15:22:47Z"}, "message": "Prioritize single_line_fn and empty_item_single_line over brace_style\n\nWhen either one of these two options are set to `true`, each should take\nprecedence over the brace_style option.\n\nThis commit does not introduce any formatting change to the default\nconfiguration, so no version gate is required.", "tree": {"sha": "ffe9e28e0a2ebde099d6cc140cf57ceef1699618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe9e28e0a2ebde099d6cc140cf57ceef1699618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0142e961ad03e99663cf811c27012daef51c9270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0142e961ad03e99663cf811c27012daef51c9270", "html_url": "https://github.com/rust-lang/rust/commit/0142e961ad03e99663cf811c27012daef51c9270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0142e961ad03e99663cf811c27012daef51c9270/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0f59bee3df5d584fb3d2b1ba1b654e2ab4ae73", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0f59bee3df5d584fb3d2b1ba1b654e2ab4ae73", "html_url": "https://github.com/rust-lang/rust/commit/7c0f59bee3df5d584fb3d2b1ba1b654e2ab4ae73"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "d681564bd57751db01e2b179fd0f3041709e2551", "filename": "src/items.rs", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0142e961ad03e99663cf811c27012daef51c9270/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142e961ad03e99663cf811c27012daef51c9270/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0142e961ad03e99663cf811c27012daef51c9270", "patch": "@@ -333,19 +333,21 @@ impl<'a> FmtVisitor<'a> {\n             newline_brace = false;\n         }\n \n-        // Prepare for the function body by possibly adding a newline and\n-        // indent.\n-        // FIXME we'll miss anything between the end of the signature and the\n-        // start of the body, but we need more spans from the compiler to solve\n-        // this.\n-        if newline_brace {\n-            result.push_str(&indent.to_string_with_newline(self.config));\n+        if let rw @ Some(..) = self.single_line_fn(&result, block, inner_attrs) {\n+            rw\n         } else {\n-            result.push(' ');\n+            // Prepare for the function body by possibly adding a newline and\n+            // indent.\n+            // FIXME we'll miss anything between the end of the signature and the\n+            // start of the body, but we need more spans from the compiler to solve\n+            // this.\n+            if newline_brace {\n+                result.push_str(&indent.to_string_with_newline(self.config));\n+            } else {\n+                result.push(' ');\n+            }\n+            Some(result)\n         }\n-\n-        self.single_line_fn(&result, block, inner_attrs)\n-            .or_else(|| Some(result))\n     }\n \n     pub fn rewrite_required_fn(\n@@ -390,42 +392,37 @@ impl<'a> FmtVisitor<'a> {\n \n         if self.config.empty_item_single_line()\n             && is_empty_block(block, None, source_map)\n-            && self.block_indent.width() + fn_str.len() + 2 <= self.config.max_width()\n+            && self.block_indent.width() + fn_str.len() + 3 <= self.config.max_width()\n+            && !last_line_contains_single_line_comment(fn_str)\n         {\n-            return Some(format!(\"{}{{}}\", fn_str));\n-        }\n-\n-        if self.config.fn_single_line() && is_simple_block_stmt(block, None, source_map) {\n-            let rewrite = {\n-                if let Some(stmt) = block.stmts.first() {\n-                    match stmt_expr(stmt) {\n-                        Some(e) => {\n-                            let suffix = if semicolon_for_expr(&self.get_context(), e) {\n-                                \";\"\n-                            } else {\n-                                \"\"\n-                            };\n-\n-                            format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n-                                .map(|s| s + suffix)\n-                                .or_else(|| Some(self.snippet(e.span).to_owned()))\n-                        }\n-                        None => stmt.rewrite(&self.get_context(), self.shape()),\n-                    }\n+            return Some(format!(\"{} {{}}\", fn_str));\n+        }\n+\n+        if !self.config.fn_single_line() || !is_simple_block_stmt(block, None, source_map) {\n+            return None;\n+        }\n+\n+        let stmt = block.stmts.first()?;\n+        let res = match stmt_expr(stmt) {\n+            Some(e) => {\n+                let suffix = if semicolon_for_expr(&self.get_context(), e) {\n+                    \";\"\n                 } else {\n-                    None\n-                }\n-            };\n+                    \"\"\n+                };\n \n-            if let Some(res) = rewrite {\n-                let width = self.block_indent.width() + fn_str.len() + res.len() + 4;\n-                if !res.contains('\\n') && width <= self.config.max_width() {\n-                    return Some(format!(\"{}{{ {} }}\", fn_str, res));\n-                }\n+                format_expr(e, ExprType::Statement, &self.get_context(), self.shape())\n+                    .map(|s| s + suffix)?\n             }\n-        }\n+            None => stmt.rewrite(&self.get_context(), self.shape())?,\n+        };\n \n-        None\n+        let width = self.block_indent.width() + fn_str.len() + res.len() + 5;\n+        if !res.contains('\\n') && width <= self.config.max_width() {\n+            Some(format!(\"{} {{ {} }}\", fn_str, res))\n+        } else {\n+            None\n+        }\n     }\n \n     pub fn visit_static(&mut self, static_parts: &StaticParts) {"}, {"sha": "2219b0b38e40f27e0855eb21fba10cb029abcfa8", "filename": "tests/source/issue-2835.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0142e961ad03e99663cf811c27012daef51c9270/tests%2Fsource%2Fissue-2835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142e961ad03e99663cf811c27012daef51c9270/tests%2Fsource%2Fissue-2835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2835.rs?ref=0142e961ad03e99663cf811c27012daef51c9270", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-brace_style: AlwaysNextLine\n+// rustfmt-fn_single_line: true\n+\n+fn lorem() -> i32\n+{\n+    42\n+}"}, {"sha": "c13018630be02d95281c9f7aa2c1cb10a1cd3df9", "filename": "tests/target/configs/brace_style/item_always_next_line.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fbrace_style%2Fitem_always_next_line.rs?ref=0142e961ad03e99663cf811c27012daef51c9270", "patch": "@@ -21,7 +21,5 @@ where\n mod tests\n {\n     #[test]\n-    fn it_works()\n-    {\n-    }\n+    fn it_works() {}\n }"}, {"sha": "f98150c429183ae2407296bc51f74af1ebc50f2f", "filename": "tests/target/fn-custom-7.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Ffn-custom-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Ffn-custom-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-7.rs?ref=0142e961ad03e99663cf811c27012daef51c9270", "patch": "@@ -30,11 +30,7 @@ fn foo(\n \n trait Test\n {\n-    fn foo(a: u8)\n-    {\n-    }\n+    fn foo(a: u8) {}\n \n-    fn bar(a: u8) -> String\n-    {\n-    }\n+    fn bar(a: u8) -> String {}\n }"}, {"sha": "21e8ce411454671259e42daf170f34dd1e810308", "filename": "tests/target/issue-2835.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Fissue-2835.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0142e961ad03e99663cf811c27012daef51c9270/tests%2Ftarget%2Fissue-2835.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2835.rs?ref=0142e961ad03e99663cf811c27012daef51c9270", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-brace_style: AlwaysNextLine\n+// rustfmt-fn_single_line: true\n+\n+fn lorem() -> i32 { 42 }"}]}