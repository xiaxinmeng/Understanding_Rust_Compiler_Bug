{"sha": "4c233d1c73edae4fb2609100528d3c952723453f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjMzZDFjNzNlZGFlNGZiMjYwOTEwMDUyOGQzYzk1MjcyMzQ1M2Y=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-14T04:28:11Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2014-02-15T05:58:44Z"}, "message": "Update LimitReader to take the Reader to wrap by value", "tree": {"sha": "22f1574bb53ffe9aa2b40f03017a48dc2892fe70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22f1574bb53ffe9aa2b40f03017a48dc2892fe70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c233d1c73edae4fb2609100528d3c952723453f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c233d1c73edae4fb2609100528d3c952723453f", "html_url": "https://github.com/rust-lang/rust/commit/4c233d1c73edae4fb2609100528d3c952723453f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c233d1c73edae4fb2609100528d3c952723453f/comments", "author": null, "committer": null, "parents": [{"sha": "d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f", "html_url": "https://github.com/rust-lang/rust/commit/d4dd4c68f82baf4d307012da1b4d6b91d26fb12f"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "2e12fc0b9f290539a555a3a628380da87108544c", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c233d1c73edae4fb2609100528d3c952723453f/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c233d1c73edae4fb2609100528d3c952723453f/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=4c233d1c73edae4fb2609100528d3c952723453f", "patch": "@@ -14,19 +14,20 @@ use io;\n use vec::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n-pub struct LimitReader<'a, R> {\n+pub struct LimitReader<R> {\n     priv limit: uint,\n-    priv inner: &'a mut R\n+    priv inner: R\n }\n \n-impl<'a, R: Reader> LimitReader<'a, R> {\n+impl<R: Reader> LimitReader<R> {\n     /// Creates a new `LimitReader`\n-    pub fn new<'a>(r: &'a mut R, limit: uint) -> LimitReader<'a, R> {\n+    pub fn new(r: R, limit: uint) -> LimitReader<R> {\n         LimitReader { limit: limit, inner: r }\n     }\n+    pub fn unwrap(self) -> R { self.inner }\n }\n \n-impl<'a, R: Reader> Reader for LimitReader<'a, R> {\n+impl<R: Reader> Reader for LimitReader<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n         if self.limit == 0 {\n             return Err(io::standard_error(io::EndOfFile));\n@@ -192,7 +193,7 @@ mod test {\n     fn test_bounded_reader_unlimited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n-            let mut r = LimitReader::new(&mut r, 4);\n+            let mut r = LimitReader::new(r.by_ref(), 4);\n             assert_eq!(~[0, 1, 2], r.read_to_end().unwrap());\n         }\n     }\n@@ -201,7 +202,7 @@ mod test {\n     fn test_bound_reader_limited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n-            let mut r = LimitReader::new(&mut r, 2);\n+            let mut r = LimitReader::new(r.by_ref(), 2);\n             assert_eq!(~[0, 1], r.read_to_end().unwrap());\n         }\n         assert_eq!(~[2], r.read_to_end().unwrap());"}]}