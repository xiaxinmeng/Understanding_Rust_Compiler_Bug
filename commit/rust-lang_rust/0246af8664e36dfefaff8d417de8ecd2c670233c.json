{"sha": "0246af8664e36dfefaff8d417de8ecd2c670233c", "node_id": "C_kwDOAAsO6NoAKDAyNDZhZjg2NjRlMzZkZmVmYWZmOGQ0MTdkZThlY2QyYzY3MDIzM2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-28T01:52:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-28T01:52:00Z"}, "message": "Rollup merge of #110881 - bvanjoi:fix-110879, r=jyn514\n\nrefactor(docs): remove macro resolution fallback\n\nclose https://github.com/rust-lang/rust/issues/110879\n\nr?`@jyn514`", "tree": {"sha": "2bf34e3389b75649922f954d406f8cc08111a143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf34e3389b75649922f954d406f8cc08111a143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0246af8664e36dfefaff8d417de8ecd2c670233c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSybACRBK7hj4Ov3rIwAAbvMIALHhnmDg/V/rgvPFsLaxlc2Z\nuQM6tX5B6+150xvhsLE6sTL3lPHIIl7EjwaJhPu0hriEyYQKSio110qoy1yaHxhQ\nWjfEIN7W7s4DGjxuAM5uqzroNXbSjRLmG8c37+KSfw72dQICk5zzdyGKYTLtm2IG\nwiS4DVc4DwdORn8Aq0v7htBddGDj5VIEUmnuze740cQATch1CmMxdlvpRd6753Tw\n7rpTTSjWwsI7QZ4vjH6FbQkD18SbDBXDV0EoiRUwQoLYSxLXnyQqDFNoPc6xUtDV\n4+XDjzRcPqdUZZXmNU7zoZ2+wMhC3WMZBkbCk1+SUIQrsBMvrrQu7AcsPLI0T5g=\n=IvGn\n-----END PGP SIGNATURE-----\n", "payload": "tree 2bf34e3389b75649922f954d406f8cc08111a143\nparent eea5f8a9c43c0996a01b53c2f1720f8712ba81df\nparent 9156b03287dd4a306d379c6295913d1fb3e01484\nauthor Yuki Okushi <jtitor@2k36.org> 1682646720 +0900\ncommitter GitHub <noreply@github.com> 1682646720 +0900\n\nRollup merge of #110881 - bvanjoi:fix-110879, r=jyn514\n\nrefactor(docs): remove macro resolution fallback\n\nclose https://github.com/rust-lang/rust/issues/110879\n\nr?`@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0246af8664e36dfefaff8d417de8ecd2c670233c", "html_url": "https://github.com/rust-lang/rust/commit/0246af8664e36dfefaff8d417de8ecd2c670233c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0246af8664e36dfefaff8d417de8ecd2c670233c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea5f8a9c43c0996a01b53c2f1720f8712ba81df", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea5f8a9c43c0996a01b53c2f1720f8712ba81df", "html_url": "https://github.com/rust-lang/rust/commit/eea5f8a9c43c0996a01b53c2f1720f8712ba81df"}, {"sha": "9156b03287dd4a306d379c6295913d1fb3e01484", "url": "https://api.github.com/repos/rust-lang/rust/commits/9156b03287dd4a306d379c6295913d1fb3e01484", "html_url": "https://github.com/rust-lang/rust/commit/9156b03287dd4a306d379c6295913d1fb3e01484"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "7e173a171a83adb2d41900c6b86892d4ea024b9a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0246af8664e36dfefaff8d417de8ecd2c670233c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0246af8664e36dfefaff8d417de8ecd2c670233c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=0246af8664e36dfefaff8d417de8ecd2c670233c", "patch": "@@ -1295,7 +1295,8 @@ impl LinkCollector<'_, '_> {\n                                 }\n                             }\n                         }\n-                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err])\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![err]);\n+                        return vec![];\n                     }\n                 }\n             }\n@@ -1331,13 +1332,14 @@ impl LinkCollector<'_, '_> {\n                     .fold(0, |acc, res| if let Ok(res) = res { acc + res.len() } else { acc });\n \n                 if len == 0 {\n-                    return resolution_failure(\n+                    resolution_failure(\n                         self,\n                         diag,\n                         path_str,\n                         disambiguator,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n+                    return vec![];\n                 } else if len == 1 {\n                     candidates.into_iter().filter_map(|res| res.ok()).flatten().collect::<Vec<_>>()\n                 } else {\n@@ -1642,9 +1644,8 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n-) -> Vec<(Res, Option<DefId>)> {\n+) {\n     let tcx = collector.cx.tcx;\n-    let mut recovered_res = None;\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n@@ -1736,19 +1737,25 @@ fn resolution_failure(\n \n                         if !path_str.contains(\"::\") {\n                             if disambiguator.map_or(true, |d| d.ns() == MacroNS)\n-                                && let Some(&res) = collector.cx.tcx.resolutions(()).all_macro_rules\n-                                                             .get(&Symbol::intern(path_str))\n+                                && collector\n+                                    .cx\n+                                    .tcx\n+                                    .resolutions(())\n+                                    .all_macro_rules\n+                                    .get(&Symbol::intern(path_str))\n+                                    .is_some()\n                             {\n                                 diag.note(format!(\n                                     \"`macro_rules` named `{path_str}` exists in this crate, \\\n                                      but it is not in scope at this link's location\"\n                                 ));\n-                                recovered_res = res.try_into().ok().map(|res| (res, None));\n                             } else {\n                                 // If the link has `::` in it, assume it was meant to be an\n                                 // intra-doc link. Otherwise, the `[]` might be unrelated.\n-                                diag.help(\"to escape `[` and `]` characters, \\\n-                                           add '\\\\' before them like `\\\\[` or `\\\\]`\");\n+                                diag.help(\n+                                    \"to escape `[` and `]` characters, \\\n+                                           add '\\\\' before them like `\\\\[` or `\\\\]`\",\n+                                );\n                             }\n                         }\n \n@@ -1854,11 +1861,6 @@ fn resolution_failure(\n             }\n         },\n     );\n-\n-    match recovered_res {\n-        Some(r) => vec![r],\n-        None => Vec::new(),\n-    }\n }\n \n fn report_multiple_anchors(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>) {"}, {"sha": "41505e72405d3f010c158416b1a2cd0a779ea662", "filename": "tests/rustdoc/issue-106142.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0246af8664e36dfefaff8d417de8ecd2c670233c/tests%2Frustdoc%2Fissue-106142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0246af8664e36dfefaff8d417de8ecd2c670233c/tests%2Frustdoc%2Fissue-106142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-106142.rs?ref=0246af8664e36dfefaff8d417de8ecd2c670233c", "patch": "@@ -0,0 +1,14 @@\n+// @has 'issue_106142/a/index.html'\n+// @count 'issue_106142/a/index.html' '//ul[@class=\"item-table\"]//li//a' 1\n+\n+#![allow(rustdoc::broken_intra_doc_links)]\n+\n+pub mod a {\n+    /// [`m`]\n+    pub fn f() {}\n+\n+    #[macro_export]\n+    macro_rules! m {\n+        () => {};\n+    }\n+}"}]}