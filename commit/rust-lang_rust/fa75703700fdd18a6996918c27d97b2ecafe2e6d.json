{"sha": "fa75703700fdd18a6996918c27d97b2ecafe2e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzU3MDM3MDBmZGQxOGE2OTk2OTE4YzI3ZDk3YjJlY2FmZTJlNmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-20T21:57:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-20T21:57:52Z"}, "message": "Twiddle glue inlining heuristics. ~10% win on build time.", "tree": {"sha": "d784e297d15ba1c2a046f676f043c693baa6c240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d784e297d15ba1c2a046f676f043c693baa6c240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa75703700fdd18a6996918c27d97b2ecafe2e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa75703700fdd18a6996918c27d97b2ecafe2e6d", "html_url": "https://github.com/rust-lang/rust/commit/fa75703700fdd18a6996918c27d97b2ecafe2e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa75703700fdd18a6996918c27d97b2ecafe2e6d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b8501eb88d5d5e4b3c839e9e1a78b4f3fbedfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b8501eb88d5d5e4b3c839e9e1a78b4f3fbedfc", "html_url": "https://github.com/rust-lang/rust/commit/67b8501eb88d5d5e4b3c839e9e1a78b4f3fbedfc"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "e1b0332a607389d55728dad604c3b4034b3689b8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fa75703700fdd18a6996918c27d97b2ecafe2e6d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa75703700fdd18a6996918c27d97b2ecafe2e6d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fa75703700fdd18a6996918c27d97b2ecafe2e6d", "patch": "@@ -1777,6 +1777,25 @@ fn get_static_tydesc(&@block_ctxt cx,\n     }\n }\n \n+fn set_no_inline(ValueRef f) {\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::LLVMNoInlineAttribute as\n+                              lib::llvm::llvm::Attribute);\n+}\n+\n+fn set_always_inline(ValueRef f) {\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::LLVMAlwaysInlineAttribute as\n+                              lib::llvm::llvm::Attribute);\n+}\n+\n+fn set_glue_inlining(&@local_ctxt cx, ValueRef f, &ty::t t) {\n+    if (ty::type_is_structural(cx.ccx.tcx, t)) {\n+        set_no_inline(f);\n+    } else {\n+        set_always_inline(f);\n+    }\n+}\n+\n+\n // Generates the declaration for (but doesn't emit) a type descriptor.\n fn declare_tydesc(&@local_ctxt cx, &ast::span sp, &ty::t t,\n                   vec[uint] ty_params) -> @tydesc_info {\n@@ -1838,6 +1857,7 @@ fn declare_generic_glue(&@local_ctxt cx,\n         fn_nm = mangle_name_by_seq(cx.ccx, cx.path,  \"glue_\" + name);\n     }\n     auto llfn = decl_fastcall_fn(cx.ccx.llmod, fn_nm, llfnty);\n+    set_glue_inlining(cx, llfn, t);\n     ret llfn;\n }\n \n@@ -2916,10 +2936,6 @@ fn lazily_emit_tydesc_glue(&@block_ctxt cx, int field,\n                             declare_generic_glue(lcx, ti.ty,\n                                                  T_glue_fn(lcx.ccx.tn),\n                                                  \"free\");\n-                        // Don't inline free glue; it's cold.\n-                        llvm::LLVMAddFunctionAttr(glue_fn,\n-                            lib::llvm::LLVMNoInlineAttribute as\n-                            lib::llvm::llvm::Attribute);\n \n                         ti.free_glue = some[ValueRef](glue_fn);\n                         auto dg = make_free_glue;\n@@ -2976,10 +2992,10 @@ fn call_tydesc_glue_full(&@block_ctxt cx, ValueRef v,\n }\n \n fn call_tydesc_glue(&@block_ctxt cx, ValueRef v,\n-                    &ty::t t, bool escapes, int field) -> result {\n+                    &ty::t t, int field) -> result {\n \n     let option::t[@tydesc_info] ti = none[@tydesc_info];\n-    auto td = get_tydesc(cx, t, escapes, ti);\n+    auto td = get_tydesc(cx, t, false, ti);\n \n     call_tydesc_glue_full(td.bcx,\n                           spill_if_immediate(td.bcx, v, t),\n@@ -3054,7 +3070,7 @@ fn call_cmp_glue(&@block_ctxt cx,\n \n fn take_ty(&@block_ctxt cx, ValueRef v, ty::t t) -> result {\n     if (ty::type_has_pointers(cx.fcx.lcx.ccx.tcx, t)) {\n-        ret call_tydesc_glue(cx, v, t, false, abi::tydesc_field_take_glue);\n+        ret call_tydesc_glue(cx, v, t, abi::tydesc_field_take_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -3076,7 +3092,7 @@ fn drop_ty(&@block_ctxt cx,\n            ty::t t) -> result {\n \n     if (ty::type_has_pointers(cx.fcx.lcx.ccx.tcx, t)) {\n-        ret call_tydesc_glue(cx, v, t, false, abi::tydesc_field_drop_glue);\n+        ret call_tydesc_glue(cx, v, t, abi::tydesc_field_drop_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -3086,7 +3102,7 @@ fn free_ty(&@block_ctxt cx,\n            ty::t t) -> result {\n \n     if (ty::type_has_pointers(cx.fcx.lcx.ccx.tcx, t)) {\n-        ret call_tydesc_glue(cx, v, t, false, abi::tydesc_field_free_glue);\n+        ret call_tydesc_glue(cx, v, t, abi::tydesc_field_free_glue);\n     }\n     ret res(cx, C_nil());\n }"}]}