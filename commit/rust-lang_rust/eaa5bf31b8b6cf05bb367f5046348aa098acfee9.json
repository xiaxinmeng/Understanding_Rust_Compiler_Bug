{"sha": "eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTViZjMxYjhiNmNmMDViYjM2N2Y1MDQ2MzQ4YWEwOThhY2ZlZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T18:40:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T18:40:55Z"}, "message": "Auto merge of #28299 - apasel422:tests, r=alexcrichton\n\nCloses #17001\r\nCloses #21449\r\nCloses #22992\r\nCloses #23208\r\nCloses #23442", "tree": {"sha": "6ffcfffe1191d3dabb3f2e60dbb5a64846d4e3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ffcfffe1191d3dabb3f2e60dbb5a64846d4e3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "html_url": "https://github.com/rust-lang/rust/commit/eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9dc1d7a1d2ee601673bf17003852255c577144", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9dc1d7a1d2ee601673bf17003852255c577144", "html_url": "https://github.com/rust-lang/rust/commit/5d9dc1d7a1d2ee601673bf17003852255c577144"}, {"sha": "04fff50d512b7f2f5a9133fbebd814b80d483044", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fff50d512b7f2f5a9133fbebd814b80d483044", "html_url": "https://github.com/rust-lang/rust/commit/04fff50d512b7f2f5a9133fbebd814b80d483044"}], "stats": {"total": 208, "additions": 208, "deletions": 0}, "files": [{"sha": "0fee6dc7617005341a60780c17278f4e1e8f903e", "filename": "src/test/compile-fail/issue-17001.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Fcompile-fail%2Fissue-17001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Fcompile-fail%2Fissue-17001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17001.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {}\n+\n+fn main() {\n+    let p = foo { x: () }; //~ ERROR `foo` does not name a structure\n+}"}, {"sha": "93c4f4bfcef8f78684d589600e47d84bbe290998", "filename": "src/test/compile-fail/issue-21449.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Fcompile-fail%2Fissue-21449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Fcompile-fail%2Fissue-21449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21449.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod MyMod {}\n+\n+fn main() {\n+    let myVar = MyMod { T: 0 }; //~ ERROR `MyMod` does not name a structure\n+}"}, {"sha": "070d4d11759f9f294e81c64e5537a83f053cab87", "filename": "src/test/run-pass/issue-22992-2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-22992-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-22992-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22992-2.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A(B);\n+struct B;\n+\n+use std::ops::Deref;\n+\n+impl Deref for A {\n+    type Target = B;\n+    fn deref(&self) -> &B { &self.0 }\n+}\n+\n+impl B {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    A(B).foo();\n+}"}, {"sha": "ca8f804482aa1cf1177a810f30f3f609f201e5dc", "filename": "src/test/run-pass/issue-22992.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-22992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-22992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22992.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+struct X { val: i32 }\n+impl std::ops::Deref for X {\n+    type Target = i32;\n+    fn deref(&self) -> &i32 { &self.val }\n+}\n+\n+\n+trait            M                   { fn m(self); }\n+impl             M for i32           { fn m(self) { println!(\"i32::m()\"); } }\n+impl             M for X             { fn m(self) { println!(\"X::m()\"); } }\n+impl<'a>         M for &'a X         { fn m(self) { println!(\"&X::m()\"); } }\n+impl<'a, 'b>     M for &'a &'b X     { fn m(self) { println!(\"&&X::m()\"); } }\n+impl<'a, 'b, 'c> M for &'a &'b &'c X { fn m(self) { println!(\"&&&X::m()\"); } }\n+\n+trait            RefM                   { fn refm(&self); }\n+impl             RefM for i32           { fn refm(&self) { println!(\"i32::refm()\"); } }\n+impl             RefM for X             { fn refm(&self) { println!(\"X::refm()\"); } }\n+impl<'a>         RefM for &'a X         { fn refm(&self) { println!(\"&X::refm()\"); } }\n+impl<'a, 'b>     RefM for &'a &'b X     { fn refm(&self) { println!(\"&&X::refm()\"); } }\n+impl<'a, 'b, 'c> RefM for &'a &'b &'c X { fn refm(&self) { println!(\"&&&X::refm()\"); } }\n+\n+struct Y { val: i32 }\n+impl std::ops::Deref for Y {\n+    type Target = i32;\n+    fn deref(&self) -> &i32 { &self.val }\n+}\n+\n+struct Z { val: Y }\n+impl std::ops::Deref for Z {\n+    type Target = Y;\n+    fn deref(&self) -> &Y { &self.val }\n+}\n+\n+struct A;\n+impl std::marker::Copy for A {}\n+impl Clone for A { fn clone(&self) -> Self { *self } }\n+impl             M for             A { fn m(self) { println!(\"A::m()\"); } }\n+impl<'a, 'b, 'c> M for &'a &'b &'c A { fn m(self) { println!(\"&&&A::m()\"); } }\n+impl             RefM for             A { fn refm(&self) { println!(\"A::refm()\"); } }\n+impl<'a, 'b, 'c> RefM for &'a &'b &'c A { fn refm(&self) { println!(\"&&&A::refm()\"); } }\n+\n+fn main() {\n+    // I'll use @ to denote left side of the dot operator\n+    (*X{val:42}).m();        // i32::refm() , self == @\n+    X{val:42}.m();           // X::m()      , self == @\n+    (&X{val:42}).m();        // &X::m()     , self == @\n+    (&&X{val:42}).m();       // &&X::m()    , self == @\n+    (&&&X{val:42}).m();      // &&&X:m()    , self == @\n+    (&&&&X{val:42}).m();     // &&&X::m()   , self == *@\n+    (&&&&&X{val:42}).m();    // &&&X::m()   , self == **@\n+\n+    (*X{val:42}).refm();     // i32::refm() , self == @\n+    X{val:42}.refm();        // X::refm()   , self == @\n+    (&X{val:42}).refm();     // X::refm()   , self == *@\n+    (&&X{val:42}).refm();    // &X::refm()  , self == *@\n+    (&&&X{val:42}).refm();   // &&X::refm() , self == *@\n+    (&&&&X{val:42}).refm();  // &&&X::refm(), self == *@\n+    (&&&&&X{val:42}).refm(); // &&&X::refm(), self == **@\n+\n+    Y{val:42}.refm();        // i32::refm() , self == *@\n+    Z{val:Y{val:42}}.refm(); // i32::refm() , self == **@\n+\n+    A.m();                   // A::m()      , self == @\n+    // without the Copy trait, (&A).m() would be a compilation error:\n+    // cannot move out of borrowed content\n+    (&A).m();                // A::m()      , self == *@\n+    (&&A).m();               // &&&A::m()   , self == &@\n+    (&&&A).m();              // &&&A::m()   , self == @\n+    A.refm();                // A::refm()   , self == @\n+    (&A).refm();             // A::refm()   , self == *@\n+    (&&A).refm();            // A::refm()   , self == **@\n+    (&&&A).refm();           // &&&A::refm(), self == @\n+}"}, {"sha": "ee3c16be731662dd6f1ffe33bd050dc9c0eafba1", "filename": "src/test/run-pass/issue-23208.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-23208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-23208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23208.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait TheTrait : TheSuperTrait<<Self as TheTrait>::Item> {\n+    type Item;\n+}\n+\n+trait TheSuperTrait<T> {\n+    fn get(&self) -> T;\n+}\n+\n+impl TheTrait for i32 {\n+    type Item = u32;\n+}\n+\n+impl TheSuperTrait<u32> for i32 {\n+    fn get(&self) -> u32 {\n+        *self as u32\n+    }\n+}\n+\n+fn foo<T:TheTrait<Item=u32>>(t: &T) -> u32 {\n+    t.get()\n+}\n+\n+fn main() {\n+    foo::<i32>(&22);\n+}"}, {"sha": "88b5a92620b75669b68f6e79b4a73860693f17e2", "filename": "src/test/run-pass/issue-23442.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-23442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa5bf31b8b6cf05bb367f5046348aa098acfee9/src%2Ftest%2Frun-pass%2Fissue-23442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23442.rs?ref=eaa5bf31b8b6cf05bb367f5046348aa098acfee9", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::PhantomData;\n+\n+pub struct UnionedKeys<'a,K>\n+    where K: UnifyKey + 'a\n+{\n+    table: &'a mut UnificationTable<K>,\n+    root_key: K,\n+    stack: Vec<K>,\n+}\n+\n+pub trait UnifyKey {\n+    type Value;\n+}\n+\n+pub struct UnificationTable<K:UnifyKey> {\n+    values: Delegate<K>,\n+}\n+\n+pub struct Delegate<K>(PhantomData<K>);\n+\n+fn main() {}"}]}