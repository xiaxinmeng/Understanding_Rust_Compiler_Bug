{"sha": "c41ddf177380e96e873d625cb7ce87468eed85e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWRkZjE3NzM4MGU5NmU4NzNkNjI1Y2I3Y2U4NzQ2OGVlZDg1ZTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T09:54:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T11:17:39Z"}, "message": "Keep current behavior while accepting error count", "tree": {"sha": "040e8f07836b20c85ee800cbc09d99c199b2ec00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040e8f07836b20c85ee800cbc09d99c199b2ec00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41ddf177380e96e873d625cb7ce87468eed85e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41ddf177380e96e873d625cb7ce87468eed85e4", "html_url": "https://github.com/rust-lang/rust/commit/c41ddf177380e96e873d625cb7ce87468eed85e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41ddf177380e96e873d625cb7ce87468eed85e4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754037de130c79e4be6b48e27203dcae58e91f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/754037de130c79e4be6b48e27203dcae58e91f70", "html_url": "https://github.com/rust-lang/rust/commit/754037de130c79e4be6b48e27203dcae58e91f70"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "77fbe467ce01030e910c382217d309222419d7e0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c41ddf177380e96e873d625cb7ce87468eed85e4", "patch": "@@ -816,6 +816,8 @@ macro_rules! options {\n             Some(\"crate=integer\");\n         pub const parse_unpretty: Option<&str> =\n             Some(\"`string` or `string=string`\");\n+        pub const parse_treat_err_as_bug: Option<&str> =\n+            Some(\"either no value or a number bigger than 0\");\n         pub const parse_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n                   `fat`, or omitted\");\n@@ -1022,6 +1024,13 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_treat_err_as_bug(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => { *slot = s.parse().ok().filter(|&x| x != 0); slot.unwrap_or(0) != 0 }\n+                None => { *slot = Some(1); true }\n+            }\n+        }\n+\n         fn parse_lto(slot: &mut LtoCli, v: Option<&str>) -> bool {\n             if v.is_some() {\n                 let mut bool_arg = None;\n@@ -1234,7 +1243,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"parse only; do not compile, assemble, or link\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n         \"run all passes except codegen; no output\"),\n-    treat_err_as_bug: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat all errors that occur as bugs\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n@@ -3212,7 +3221,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.treat_err_as_bug = Some(0);\n+        opts.debugging_opts.treat_err_as_bug = Some(1);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "3992d2908c78935b0bb6a288cc59e874cb6cb73d", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=c41ddf177380e96e873d625cb7ce87468eed85e4", "patch": "@@ -517,7 +517,19 @@ impl Handler {\n \n     fn panic_if_treat_err_as_bug(&self) {\n         if self.treat_err_as_bug() {\n-            panic!(\"encountered error with `-Z treat_err_as_bug\");\n+            let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n+                (0, _) => return,\n+                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n+                (1, _) => return,\n+                (count, as_bug) => {\n+                    format!(\n+                        \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n+                        count,\n+                        as_bug,\n+                    )\n+                }\n+            };\n+            panic!(s);\n         }\n     }\n \n@@ -645,14 +657,12 @@ impl Handler {\n             1 => \"aborting due to previous error\".to_string(),\n             _ => format!(\"aborting due to {} previous errors\", self.err_count())\n         };\n+        let err_as_bug = self.flags.treat_err_as_bug.unwrap_or(0);\n+        if self.err_count() >= err_as_bug {\n+            return;\n+        }\n \n-        let _ = if self.treat_err_as_bug() {\n-            self.fatal(&s)\n-        } else {\n-            // only emit one backtrace when using `-Z treat-err-as-bug=X`\n-            DiagnosticBuilder::new(self, Fatal, &s).emit();\n-            FatalError\n-        };\n+        let _ = self.fatal(&s);\n \n         let can_show_explain = self.emitter.borrow().should_show_explain();\n         let are_there_diagnostics = !self.emitted_diagnostic_codes.borrow().is_empty();"}, {"sha": "856365847ae17a0a11ab5ab736793c26cfe4b1d6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41ddf177380e96e873d625cb7ce87468eed85e4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c41ddf177380e96e873d625cb7ce87468eed85e4", "patch": "@@ -67,7 +67,7 @@ pub fn run(mut options: Options) -> isize {\n         let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let handler =\n             errors::Handler::with_tty_emitter(ColorConfig::Auto,\n-                                            true, false,\n+                                            true, None,\n                                             Some(source_map.clone()));\n \n         let mut sess = session::build_session_("}]}