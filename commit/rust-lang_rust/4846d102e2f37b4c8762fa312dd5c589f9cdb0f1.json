{"sha": "4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "node_id": "C_kwDOAAsO6NoAKDQ4NDZkMTAyZTJmMzdiNGM4NzYyZmEzMTJkZDVjNTg5ZjljZGIwZjE", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-11-04T20:57:39Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-11-04T20:57:39Z"}, "message": "Fix ICE when rustdoc is scraping examples inside of a proc macro", "tree": {"sha": "3e7b52c511b46fd51543f852541ae2f665d55024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7b52c511b46fd51543f852541ae2f665d55024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "html_url": "https://github.com/rust-lang/rust/commit/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ad6d128271f23f390c4a934e7fec9c9778d8c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad6d128271f23f390c4a934e7fec9c9778d8c7a", "html_url": "https://github.com/rust-lang/rust/commit/3ad6d128271f23f390c4a934e7fec9c9778d8c7a"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "1b5a750455248610ae2295adf7a0d33d7e23e343", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "patch": "@@ -10,7 +10,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n     self as hir,\n     intravisit::{self, Visitor},\n-    HirId,\n };\n use rustc_interface::interface;\n use rustc_macros::{Decodable, Encodable};\n@@ -83,15 +82,10 @@ crate struct CallLocation {\n \n impl CallLocation {\n     fn new(\n-        tcx: TyCtxt<'_>,\n         expr_span: rustc_span::Span,\n-        expr_id: HirId,\n+        enclosing_item_span: rustc_span::Span,\n         source_file: &SourceFile,\n     ) -> Self {\n-        let enclosing_item_span =\n-            tcx.hir().span_with_body(tcx.hir().get_parent_item(expr_id)).source_callsite();\n-        assert!(enclosing_item_span.contains(expr_span));\n-\n         CallLocation {\n             call_expr: SyntaxRange::new(expr_span, source_file),\n             enclosing_item: SyntaxRange::new(enclosing_item_span, source_file),\n@@ -168,13 +162,29 @@ where\n         // If this span comes from a macro expansion, then the source code may not actually show\n         // a use of the given item, so it would be a poor example. Hence, we skip all uses in macros.\n         if span.from_expansion() {\n+            trace!(\"Rejecting expr from macro: {:?}\", span);\n             return;\n         }\n \n+        // If the enclosing item has a span coming from a proc macro, then we also don't want to include\n+        // the example.\n+        let enclosing_item_span = tcx.hir().span_with_body(tcx.hir().get_parent_item(ex.hir_id));\n+        if enclosing_item_span.from_expansion() {\n+            trace!(\"Rejecting expr ({:?}) from macro item: {:?}\", span, enclosing_item_span);\n+            return;\n+        }\n+\n+        assert!(\n+            enclosing_item_span.contains(span),\n+            \"Attempted to scrape call at [{:?}] whose enclosing item [{:?}] doesn't contain the span of the call.\",\n+            span,\n+            enclosing_item_span\n+        );\n+\n         // Save call site if the function resolves to a concrete definition\n         if let ty::FnDef(def_id, _) = ty.kind() {\n-            // Ignore functions not from the crate being documented\n             if self.target_crates.iter().all(|krate| *krate != def_id.krate) {\n+                trace!(\"Rejecting expr from crate not being documented: {:?}\", span);\n                 return;\n             }\n \n@@ -198,7 +208,8 @@ where\n                 let fn_key = tcx.def_path_hash(*def_id);\n                 let fn_entries = self.calls.entry(fn_key).or_default();\n \n-                let location = CallLocation::new(tcx, span, ex.hir_id, &file);\n+                trace!(\"Including expr: {:?}\", span);\n+                let location = CallLocation::new(span, enclosing_item_span, &file);\n                 fn_entries.entry(abs_path).or_insert_with(mk_call_data).locations.push(location);\n             }\n         }"}, {"sha": "2ed6f0edd6ae706a31c6cdba63e0f20e13054394", "filename": "src/test/run-make/rustdoc-scrape-examples-macros/Makefile", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2FMakefile?ref=4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "patch": "@@ -0,0 +1,17 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc\"\n+\n+all:\n+\t$(RUSTC) src/proc.rs --crate-name foobar_macro --edition=2021 --crate-type proc-macro --emit=dep-info,link\n+\n+\t$(RUSTC) src/lib.rs --crate-name foobar --edition=2021 --crate-type lib --emit=dep-info,link\n+\n+\t$(RUSTDOC) examples/ex.rs --crate-name ex --crate-type bin --output $(OUTPUT_DIR) \\\n+\t\t--extern foobar=$(TMPDIR)/libfoobar.rlib --extern foobar_macro=$(TMPDIR)/libfoobar_macro.so \\\n+\t\t-Z unstable-options --scrape-examples-output-path $(TMPDIR)/ex.calls --scrape-examples-target-crate foobar\n+\n+\t$(RUSTDOC) src/lib.rs --crate-name foobar --crate-type lib --output $(OUTPUT_DIR) \\\n+\t\t-Z unstable-options --with-examples $(TMPDIR)/ex.calls\n+\n+\t$(HTMLDOCCK) $(OUTPUT_DIR) src/lib.rs"}, {"sha": "4d8c8b30e311021cf9373e11e33f121fdea3c9e1", "filename": "src/test/run-make/rustdoc-scrape-examples-macros/examples/ex.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fexamples%2Fex.rs?ref=4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "patch": "@@ -0,0 +1,27 @@\n+extern crate foobar;\n+extern crate foobar_macro;\n+\n+use foobar::*;\n+use foobar_macro::*;\n+\n+a_proc_macro!(); // no\n+\n+#[an_attr_macro]\n+fn a() {\n+  f(); // no\n+}\n+\n+#[an_attr_macro(with_span)]\n+fn b() {\n+  f(); // yes\n+}\n+\n+fn c() {\n+  a_rules_macro!(f()); // yes\n+}\n+\n+fn d() {\n+  a_rules_macro!(()); // no\n+}\n+\n+fn main(){}"}, {"sha": "bac3970a4d37f9d9f8a34b4005f430cfdc8ecfa4", "filename": "src/test/run-make/rustdoc-scrape-examples-macros/src/lib.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Flib.rs?ref=4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "patch": "@@ -0,0 +1,12 @@\n+// Scraped example should only include line numbers for items b and c in ex.rs\n+// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '14'\n+// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '15'\n+// @has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '21'\n+// @!has foobar/fn.f.html '//*[@class=\"line-numbers\"]' '22'\n+\n+pub fn f() {}\n+\n+#[macro_export]\n+macro_rules! a_rules_macro {\n+  ($e:expr) => { ($e, foobar::f()); }\n+}"}, {"sha": "46e518fdf6af8fa127792aed4f35f6487c75e9c9", "filename": "src/test/run-make/rustdoc-scrape-examples-macros/src/proc.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4846d102e2f37b4c8762fa312dd5c589f9cdb0f1/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-macros%2Fsrc%2Fproc.rs?ref=4846d102e2f37b4c8762fa312dd5c589f9cdb0f1", "patch": "@@ -0,0 +1,39 @@\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn a_proc_macro(_item: TokenStream) -> TokenStream {\n+    \"fn ex() { foobar::f(); }\".parse().unwrap()\n+}\n+\n+// inserts foobar::f() to the end of the function\n+#[proc_macro_attribute]\n+pub fn an_attr_macro(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    let new_call: TokenStream = \"foobar::f();\".parse().unwrap();\n+\n+    let mut tokens = item.into_iter();\n+\n+    let fn_tok = tokens.next().unwrap();\n+    let ident_tok = tokens.next().unwrap();\n+    let args_tok = tokens.next().unwrap();\n+    let body = match tokens.next().unwrap() {\n+        TokenTree::Group(g) => {\n+            let new_g = Group::new(g.delimiter(), new_call);\n+            let mut outer_g = Group::new(\n+                g.delimiter(),\n+                [TokenTree::Group(g.clone()), TokenTree::Group(new_g)].into_iter().collect(),\n+            );\n+\n+            if attr.to_string() == \"with_span\" {\n+                outer_g.set_span(g.span());\n+            }\n+\n+            TokenTree::Group(outer_g)\n+        }\n+        _ => unreachable!(),\n+    };\n+\n+    let tokens = vec![fn_tok, ident_tok, args_tok, body].into_iter().collect::<TokenStream>();\n+\n+    tokens\n+}"}]}