{"sha": "982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmM0YjMwODExMTg4MDZmNmNlM2NhNzdkY2FmMjhmY2MxNTU1ZDc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-23T09:26:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-23T09:26:30Z"}, "message": "Rollup merge of #78116 - spastorino:inline-const-in-range-pat, r=petrochenkov\n\nMake inline const work in range patterns\n\nFixes #78108 which is a follow up of https://github.com/rust-lang/rust/pull/77124\n\nr? @petrochenkov", "tree": {"sha": "28f59e3689cc4cdf9df5b3ba1cb489edb7837f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f59e3689cc4cdf9df5b3ba1cb489edb7837f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkqHGCRBK7hj4Ov3rIwAAdHIIAI3VvHUcFjrbS2q8kD+49QUK\n6h27jFn+hvGHp1jVxhKqMMuaQpaD/FSusqTE2TPQWWBbiZA17Y0Eg1dKYdbU/JZP\nodVE+hY4QItHNk7p6kIHHfJbUSAz6zJpHIwf2DBExVMvCd7jnoSTF8RKBFdvZtC2\nL7rqiCMF8ZNvJZDlliZwbYk2Fj3nb59fApu+D7V3w8o7dfGVgkdDTy/Im2CkaZv1\nnhVcn2x8qwlCnk7++I6v1MfCxWLeOI6lbABx3ZNNXntt4/kTX/AmsslBLhOEL9oU\n87CwBud2S2jkCHGXwUi2UHZHv642El8J1rQw2LJzFhzDcYrcvkdzO8mTIbm1CeY=\n=iTA5\n-----END PGP SIGNATURE-----\n", "payload": "tree 28f59e3689cc4cdf9df5b3ba1cb489edb7837f7c\nparent 709de7817d238774761b20534045f8a16ef4bd86\nparent 5656a4151e07651df154911672055260f51614fd\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603445190 +0900\ncommitter GitHub <noreply@github.com> 1603445190 +0900\n\nRollup merge of #78116 - spastorino:inline-const-in-range-pat, r=petrochenkov\n\nMake inline const work in range patterns\n\nFixes #78108 which is a follow up of https://github.com/rust-lang/rust/pull/77124\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "html_url": "https://github.com/rust-lang/rust/commit/982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709de7817d238774761b20534045f8a16ef4bd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/709de7817d238774761b20534045f8a16ef4bd86", "html_url": "https://github.com/rust-lang/rust/commit/709de7817d238774761b20534045f8a16ef4bd86"}, {"sha": "5656a4151e07651df154911672055260f51614fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5656a4151e07651df154911672055260f51614fd", "html_url": "https://github.com/rust-lang/rust/commit/5656a4151e07651df154911672055260f51614fd"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "78c95428c7211f5991500995dad3498c65ca7770", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -1062,8 +1062,8 @@ impl<'a> Parser<'a> {\n             })\n         } else if self.eat_keyword(kw::Unsafe) {\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n-        } else if self.check_inline_const() {\n-            self.parse_const_expr(lo.to(self.token.span))\n+        } else if self.check_inline_const(0) {\n+            self.parse_const_block(lo.to(self.token.span))\n         } else if self.is_do_catch_block() {\n             self.recover_do_catch(attrs)\n         } else if self.is_try_block() {"}, {"sha": "8ff97453c14149700455c677c7c815c03fb4c141", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -522,9 +522,9 @@ impl<'a> Parser<'a> {\n         self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)\n     }\n \n-    fn check_inline_const(&mut self) -> bool {\n-        self.check_keyword(kw::Const)\n-            && self.look_ahead(1, |t| match t.kind {\n+    fn check_inline_const(&self, dist: usize) -> bool {\n+        self.is_keyword_ahead(dist, &[kw::Const])\n+            && self.look_ahead(dist + 1, |t| match t.kind {\n                 token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),\n                 token::OpenDelim(DelimToken::Brace) => true,\n                 _ => false,\n@@ -864,7 +864,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses inline const expressions.\n-    fn parse_const_expr(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n+    fn parse_const_block(&mut self, span: Span) -> PResult<'a, P<Expr>> {\n         self.sess.gated_spans.gate(sym::inline_const, span);\n         self.eat_keyword(kw::Const);\n         let blk = self.parse_block()?;"}, {"sha": "27fe75a23b6a844c34b9af2634419c72cbe8edcd", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -313,9 +313,15 @@ impl<'a> Parser<'a> {\n             let pat = self.parse_pat_with_range_pat(false, None)?;\n             self.sess.gated_spans.gate(sym::box_patterns, lo.to(self.prev_token.span));\n             PatKind::Box(pat)\n-        } else if self.check_inline_const() {\n+        } else if self.check_inline_const(0) {\n             // Parse `const pat`\n-            PatKind::Lit(self.parse_const_expr(lo.to(self.token.span))?)\n+            let const_expr = self.parse_const_block(lo.to(self.token.span))?;\n+\n+            if let Some(re) = self.parse_range_end() {\n+                self.parse_pat_range_begin_with(const_expr, re)?\n+            } else {\n+                PatKind::Lit(const_expr)\n+            }\n         } else if self.can_be_ident_pat() {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,\n@@ -717,16 +723,19 @@ impl<'a> Parser<'a> {\n \n     /// Is the token `dist` away from the current suitable as the start of a range patterns end?\n     fn is_pat_range_end_start(&self, dist: usize) -> bool {\n-        self.look_ahead(dist, |t| {\n-            t.is_path_start() // e.g. `MY_CONST`;\n+        self.check_inline_const(dist)\n+            || self.look_ahead(dist, |t| {\n+                t.is_path_start() // e.g. `MY_CONST`;\n                 || t.kind == token::Dot // e.g. `.5` for recovery;\n                 || t.can_begin_literal_maybe_minus() // e.g. `42`.\n                 || t.is_whole_expr()\n-        })\n+            })\n     }\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.check_path() {\n+        if self.check_inline_const(0) {\n+            self.parse_const_block(self.token.span)\n+        } else if self.check_path() {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path"}, {"sha": "eefe43a1a2297fa04b38b93ec7bfc4b671cd143b", "filename": "src/test/ui/inline-const/const-match-pat-range.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -0,0 +1,38 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const, half_open_range_patterns, exclusive_range_pattern)]\n+fn main() {\n+    const N: u32 = 10;\n+    let x: u32 = 3;\n+\n+    match x {\n+        1 ..= const { N + 1 } => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        const { N - 1 } ..= 10 => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        const { N - 1 } ..= const { N + 1 } => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        .. const { N + 1 } => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        const { N - 1 } .. => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        ..= const { N + 1 } => {},\n+        _ => {}\n+    }\n+}"}, {"sha": "5ec143fae234479231dd52c8ff13f4d08a68b958", "filename": "src/test/ui/parser/issue-66357-unexpected-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.rs?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -13,4 +13,4 @@\n \n fn f() { |[](* }\n //~^ ERROR expected one of `,` or `:`, found `(`\n-//~| ERROR expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `const`, `mut`, `ref`, `|`, identifier, or path, found `*`\n+//~| ERROR expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `mut`, `ref`, `|`, identifier, or path, found `*`"}, {"sha": "c3810999d239509f6100bfbbe04b387e5a94b8ef", "filename": "src/test/ui/parser/issue-66357-unexpected-unreachable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/982c4b3081118806f6ce3ca77dcaf28fcc1555d7/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-66357-unexpected-unreachable.stderr?ref=982c4b3081118806f6ce3ca77dcaf28fcc1555d7", "patch": "@@ -4,7 +4,7 @@ error: expected one of `,` or `:`, found `(`\n LL | fn f() { |[](* }\n    |             ^ expected one of `,` or `:`\n \n-error: expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `const`, `mut`, `ref`, `|`, identifier, or path, found `*`\n+error: expected one of `&`, `(`, `)`, `-`, `...`, `..=`, `..`, `[`, `_`, `box`, `mut`, `ref`, `|`, identifier, or path, found `*`\n   --> $DIR/issue-66357-unexpected-unreachable.rs:14:14\n    |\n LL | fn f() { |[](* }"}]}