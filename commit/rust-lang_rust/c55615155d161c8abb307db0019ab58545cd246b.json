{"sha": "c55615155d161c8abb307db0019ab58545cd246b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTYxNTE1NWQxNjFjOGFiYjMwN2RiMDAxOWFiNTg1NDVjZDI0NmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-15T22:05:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:29:47Z"}, "message": "review comments", "tree": {"sha": "f3e2767a08b49eab341f99dce2b2e272cfe8c698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e2767a08b49eab341f99dce2b2e272cfe8c698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55615155d161c8abb307db0019ab58545cd246b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55615155d161c8abb307db0019ab58545cd246b", "html_url": "https://github.com/rust-lang/rust/commit/c55615155d161c8abb307db0019ab58545cd246b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55615155d161c8abb307db0019ab58545cd246b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0000cacac904a9b04c64ca349f54169b98f60a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0000cacac904a9b04c64ca349f54169b98f60a", "html_url": "https://github.com/rust-lang/rust/commit/9c0000cacac904a9b04c64ca349f54169b98f60a"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "d0243dad700b664a4eb1c2383a5e1a056a2af1bd", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -1339,16 +1339,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             err.span_label(\n                                 *sp,\n                                 format!(\n-                                    \"{}this is {}the {} {}{}\",\n+                                    \"{}the {} {}{}{}\",\n+                                    if count > 1 { \"one of \" } else { \"\" },\n+                                    target,\n+                                    key,\n+                                    pluralize!(count),\n                                     if sp.is_desugaring(DesugaringKind::Async) {\n-                                        \"in the desugared `async fn`, \"\n+                                        \" in the `Output` of this `async fn`\"\n                                     } else {\n                                         \"\"\n                                     },\n-                                    if count > 1 { \"one of\" } else { \"\" },\n-                                    target,\n-                                    key,\n-                                    pluralize!(count),\n                                 ),\n                             );\n                         }\n@@ -1364,18 +1364,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ty::Opaque(..) => \"opaque type\",\n                     _ => \"\",\n                 };\n-                match t.kind {\n-                    ty::Closure(def_id, _) | ty::Opaque(def_id, _) => {\n-                        let span = self.tcx.def_span(def_id);\n-                        debug!(\"note_type_err visit_ty {:?}\", span.macro_backtrace());\n-                        if !self.ignore_span.overlaps(span)\n-                            && !self.expected.values().any(|exp| exp.iter().any(|sp| *sp == span))\n-                        {\n-                            let entry = self.types.entry(kind).or_default();\n-                            entry.insert(span);\n-                        }\n+                if let ty::Closure(def_id, _) | ty::Opaque(def_id, _) = t.kind {\n+                    let span = self.tcx.def_span(def_id);\n+                    // Avoid cluttering the output when the \"found\" and error span overlap:\n+                    //\n+                    // error[E0308]: mismatched types\n+                    //   --> $DIR/issue-20862.rs:2:5\n+                    //    |\n+                    // LL |     |y| x + y\n+                    //    |     ^^^^^^^^^\n+                    //    |     |\n+                    //    |     the found closure\n+                    //    |     expected `()`, found closure\n+                    //    |\n+                    //    = note: expected unit type `()`\n+                    //                 found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+                    if !self.ignore_span.overlaps(span) {\n+                        self.types.entry(kind).or_default().insert(span);\n                     }\n-                    _ => {}\n                 }\n                 t.super_visit_with(self)\n             }"}, {"sha": "5c9b1d2c4d71c6188dd4549a8d2a9bd2de1fedf5", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- in the desugared `async fn`, this is the found opaque type\n+   |                        --- the found opaque type in the `Output` of this `async fn`\n ...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type"}, {"sha": "5926c8351ff3decb907a145d25eabc93db32d6f3", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- in the desugared `async fn`, this is the found opaque type\n+   |                        --- the found opaque type in the `Output` of this `async fn`\n ...\n LL |         take_u32(x)\n    |                  ^"}, {"sha": "c0dc32b83fb0b0a146a55ae39c449c6e69894034", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:13:14\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- in the desugared `async fn`, this is the found opaque type\n+   |                        --- the found opaque type in the `Output` of this `async fn`\n ...\n LL |     take_u32(x)\n    |              ^\n@@ -16,6 +16,9 @@ LL |     take_u32(x)\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:23:5\n    |\n+LL | async fn dummy() {}\n+   |                  - the found opaque type in the `Output` of this `async fn`\n+...\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |"}, {"sha": "3c4ae450764dae72ccb5da2579b3c3e32c8705d4", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/closure-reform-bad.rs:11:15\n    |\n LL |     let f = |s: &str| println!(\"{}{}\", s, string);\n-   |             ------------------------------------- this is the found closure\n+   |             ------------------------------------- the found closure\n LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |"}, {"sha": "32b45ee10ad6f1c823a13d272419a20dcde6f077", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -1,6 +1,11 @@\n error[E0308]: mismatched types\n   --> $DIR/extern-types-distinct-types.rs:9:5\n    |\n+LL |     type A;\n+   |     ------- the found foreign type\n+LL |     type B;\n+   |     ------- the expected foreign type\n+...\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |"}, {"sha": "b882514f61609361c9478ffc6a0d39de9f09e669", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n LL | fn hide<T: Foo>(x: T) -> impl Foo {\n-   |                          -------- this is the found opaque type\n+   |                          -------- the found opaque type\n ...\n LL |     let _: u32 = hide(0_u32);\n    |            ---   ^^^^^^^^^^^ expected `u32`, found opaque type\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n LL | fn hide<T: Foo>(x: T) -> impl Foo {\n-   |                          -------- this is the found opaque type\n+   |                          -------- the found opaque type\n ...\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n@@ -32,7 +32,10 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10\n    |\n LL | fn hide<T: Foo>(x: T) -> impl Foo {\n-   |                          -------- this is the expected opaque type\n+   |                          --------\n+   |                          |\n+   |                          the expected opaque type\n+   |                          the found opaque type\n ...\n LL |     x = (x.1,\n    |          ^^^ expected `u32`, found `i32`\n@@ -44,7 +47,10 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n LL | fn hide<T: Foo>(x: T) -> impl Foo {\n-   |                          -------- this is the expected opaque type\n+   |                          --------\n+   |                          |\n+   |                          the expected opaque type\n+   |                          the found opaque type\n ...\n LL |          x.0);\n    |          ^^^ expected `i32`, found `u32`"}, {"sha": "036c05fc848cf37fc0dbd8c8f91cc634489fc954", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24036.rs:3:9\n    |\n LL |     let mut x = |c| c + 1;\n-   |                 --------- this is the expected closure\n+   |                 --------- the expected closure\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |"}, {"sha": "232e54b5d37b24e2b2bb90e73dfd46ca6e14c4bf", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -236,7 +236,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n-   |                   ----- this is the found closure\n+   |                   ----- the found closure\n LL |     let _: usize = closure;\n    |            -----   ^^^^^^^\n    |            |       |"}, {"sha": "167d61bdf7c704f176d8097b567b78dff3d61272", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/opaque-type-error.rs:20:9\n    |\n LL |   fn thing_two() -> impl Future<Output = Result<(), ()>> {\n-   |                     ------------------------------------ this is the found opaque type\n+   |                     ------------------------------------ the found opaque type\n ...\n LL | /     if true {\n LL | |         thing_one()"}, {"sha": "9549074d4bf78d73650b511c95330ed9624b43cb", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -13,7 +13,7 @@ LL |     let z: i32 = x;\n    |            expected due to this\n ...\n LL | type WrongGeneric<T> = impl 'static;\n-   | ------------------------------------ this is the found opaque type\n+   | ------------------------------------ the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "5a7f9d74eba5b31ef38fb701c781deec6088c83b", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -13,7 +13,7 @@ LL |     let z: i32 = x;\n    |            expected due to this\n ...\n LL | type WrongGeneric<T> = impl 'static;\n-   | ------------------------------------ this is the found opaque type\n+   | ------------------------------------ the found opaque type\n    |\n    = note:     expected type `i32`\n            found opaque type `WrongGeneric::<&{integer}>`"}, {"sha": "70c99c944d654d8f142f6c6992274b9f31b7cc45", "filename": "src/test/ui/type-alias-impl-trait/never_reveal_concrete_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnever_reveal_concrete_type.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/never_reveal_concrete_type.rs:13:27\n    |\n LL | type NoReveal = impl std::fmt::Debug;\n-   | ------------------------------------- this is the found opaque type\n+   | ------------------------------------- the found opaque type\n ...\n LL |     let _: &'static str = x;\n    |            ------------   ^ expected `&str`, found opaque type"}, {"sha": "375c0bc7fe2ed078985862c3d54fc04778d6887d", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55615155d161c8abb307db0019ab58545cd246b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=c55615155d161c8abb307db0019ab58545cd246b", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:15:19\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |     -------------------------------------- this is the found opaque type\n+   |     -------------------------------------- the found opaque type\n ...\n LL |     let _: &str = bomp();\n    |            ----   ^^^^^^ expected `&str`, found opaque type\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:19:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |     -------------------------------------- this is the expected opaque type\n+   |     -------------------------------------- the expected opaque type\n ...\n LL | fn bomp() -> boo::Boo {\n    |              -------- expected `Boo` because of return type"}]}