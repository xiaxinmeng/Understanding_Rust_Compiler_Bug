{"sha": "e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMTE2YzhmYmE2ZTczYmMyYmJmN2NiNmJiNDE5MTFkNGRhZWQwNDM=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-22T11:29:46Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Move RacyCell to `std::comm`\n\nRacyCell is not exactly what we'd like as a final implementation for\nthis. Therefore, we're moving it under `std::comm` and also making it\nprivate.", "tree": {"sha": "5484f1e0a4b7dfad3f2a363e5db1a39c9b50ccc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5484f1e0a4b7dfad3f2a363e5db1a39c9b50ccc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "html_url": "https://github.com/rust-lang/rust/commit/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f436f9ca2963e33cc41802370bb9c551c833970e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f436f9ca2963e33cc41802370bb9c551c833970e", "html_url": "https://github.com/rust-lang/rust/commit/f436f9ca2963e33cc41802370bb9c551c833970e"}], "stats": {"total": 108, "additions": 61, "deletions": 47}, "files": [{"sha": "9452d0a64bf63e914333fa299728bc9656f5b739", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -14,33 +14,43 @@\n \n pub use self::Ordering::*;\n \n+use kinds::Sync;\n+\n use intrinsics;\n-use cell::{UnsafeCell, RacyCell};\n+use cell::UnsafeCell;\n \n /// A boolean type which can be safely shared between threads.\n #[stable]\n pub struct AtomicBool {\n-    v: RacyCell<uint>,\n+    v: UnsafeCell<uint>,\n }\n \n+unsafe impl Sync for AtomicBool {}\n+\n /// A signed integer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicInt {\n-    v: RacyCell<int>,\n+    v: UnsafeCell<int>,\n }\n \n+unsafe impl Sync for AtomicInt {}\n+\n /// An unsigned integer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicUint {\n-    v: RacyCell<uint>,\n+    v: UnsafeCell<uint>,\n }\n \n+unsafe impl Sync for AtomicUint {}\n+\n /// A raw pointer type which can be safely shared between threads.\n #[stable]\n pub struct AtomicPtr<T> {\n-    p: RacyCell<uint>,\n+    p: UnsafeCell<uint>,\n }\n \n+unsafe impl<T> Sync for AtomicPtr<T> {}\n+\n /// Atomic memory orderings\n ///\n /// Memory orderings limit the ways that both the compiler and CPU may reorder\n@@ -80,15 +90,15 @@ pub enum Ordering {\n /// An `AtomicBool` initialized to `false`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_BOOL: AtomicBool =\n-        AtomicBool { v: RacyCell(UnsafeCell { value: 0 }) };\n+        AtomicBool { v: UnsafeCell { value: 0 } };\n /// An `AtomicInt` initialized to `0`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_INT: AtomicInt =\n-        AtomicInt { v: RacyCell(UnsafeCell { value: 0 }) };\n+        AtomicInt { v: UnsafeCell { value: 0 } };\n /// An `AtomicUint` initialized to `0`.\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n pub const INIT_ATOMIC_UINT: AtomicUint =\n-        AtomicUint { v: RacyCell(UnsafeCell { value: 0 }) };\n+        AtomicUint { v: UnsafeCell { value: 0, } };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n const UINT_TRUE: uint = -1;\n@@ -108,7 +118,7 @@ impl AtomicBool {\n     #[stable]\n     pub fn new(v: bool) -> AtomicBool {\n         let val = if v { UINT_TRUE } else { 0 };\n-        AtomicBool { v: RacyCell::new(val) }\n+        AtomicBool { v: UnsafeCell::new(val) }\n     }\n \n     /// Loads a value from the bool.\n@@ -348,7 +358,7 @@ impl AtomicInt {\n     #[inline]\n     #[stable]\n     pub fn new(v: int) -> AtomicInt {\n-        AtomicInt {v: RacyCell::new(v)}\n+        AtomicInt {v: UnsafeCell::new(v)}\n     }\n \n     /// Loads a value from the int.\n@@ -534,7 +544,7 @@ impl AtomicUint {\n     #[inline]\n     #[stable]\n     pub fn new(v: uint) -> AtomicUint {\n-        AtomicUint { v: RacyCell::new(v) }\n+        AtomicUint { v: UnsafeCell::new(v) }\n     }\n \n     /// Loads a value from the uint.\n@@ -721,7 +731,7 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[stable]\n     pub fn new(p: *mut T) -> AtomicPtr<T> {\n-        AtomicPtr { p: RacyCell::new(p as uint) }\n+        AtomicPtr { p: UnsafeCell::new(p as uint) }\n     }\n \n     /// Loads a value from the pointer."}, {"sha": "b45424a5eed3f7d4209e62880fd653eed298cbe5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -158,7 +158,7 @@\n use clone::Clone;\n use cmp::PartialEq;\n use default::Default;\n-use kinds::{marker, Copy, Send, Sync};\n+use kinds::{marker, Copy};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{None, Some};\n@@ -555,28 +555,3 @@ impl<T> UnsafeCell<T> {\n     #[deprecated = \"renamed to into_inner()\"]\n     pub unsafe fn unwrap(self) -> T { self.into_inner() }\n }\n-\n-/// A version of `UnsafeCell` intended for use in concurrent data\n-/// structures (for example, you might put it in an `Arc`).\n-pub struct RacyCell<T>(pub UnsafeCell<T>);\n-\n-impl<T> RacyCell<T> {\n-    /// DOX\n-    pub fn new(value: T) -> RacyCell<T> {\n-        RacyCell(UnsafeCell { value: value })\n-    }\n-\n-    /// DOX\n-    pub unsafe fn get(&self) -> *mut T {\n-        self.0.get()\n-    }\n-\n-    /// DOX\n-    pub unsafe fn into_inner(self) -> T {\n-        self.0.into_inner()\n-    }\n-}\n-\n-unsafe impl<T:Send> Send for RacyCell<T> { }\n-\n-unsafe impl<T> Sync for RacyCell<T> { } // Oh dear"}, {"sha": "c317be85ebc395979016ff8d72ee63a25efec3f8", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -319,9 +319,10 @@ pub use self::TrySendError::*;\n use self::Flavor::*;\n \n use alloc::arc::Arc;\n+use core::kinds;\n use core::kinds::marker;\n use core::mem;\n-use core::cell::{UnsafeCell, RacyCell};\n+use core::cell::UnsafeCell;\n \n pub use self::select::{Select, Handle};\n use self::select::StartResult;\n@@ -1024,6 +1025,32 @@ impl<T: Send> Drop for Receiver<T> {\n     }\n }\n \n+/// A version of `UnsafeCell` intended for use in concurrent data\n+/// structures (for example, you might put it in an `Arc`).\n+pub struct RacyCell<T>(pub UnsafeCell<T>);\n+\n+impl<T> RacyCell<T> {\n+    /// DOX\n+    pub fn new(value: T) -> RacyCell<T> {\n+        RacyCell(UnsafeCell { value: value })\n+    }\n+\n+    /// DOX\n+    pub unsafe fn get(&self) -> *mut T {\n+        self.0.get()\n+    }\n+\n+    /// DOX\n+    pub unsafe fn into_inner(self) -> T {\n+        self.0.into_inner()\n+    }\n+}\n+\n+unsafe impl<T:Send> Send for RacyCell<T> { }\n+\n+unsafe impl<T> kinds::Sync for RacyCell<T> { } // Oh dear\n+\n+\n #[cfg(test)]\n mod test {\n     use prelude::*;"}, {"sha": "77c358c62597b5018c6e4ef54b9140ff3e931f49", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -10,8 +10,9 @@\n \n use prelude::*;\n \n-use cell::{UnsafeCell, RacyCell};\n-use kinds::{marker, Sync};\n+use comm::RacyCell;\n+use cell::UnsafeCell;\n+use kinds::marker;\n use sync::{poison, AsMutexGuard};\n use sys_common::mutex as sys;\n "}, {"sha": "3b0114b3e90e8f2d50a8d2cee59549afbda67ae9", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use comm::RacyCell;\n+use cell::UnsafeCell;\n use kinds::Sync;\n-use cell::{UnsafeCell, RacyCell};\n use sys::sync as ffi;\n use sys_common::mutex;\n "}, {"sha": "45d5c5e0aab25df04aa2673a2c93fe54db137784", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -127,7 +127,7 @@\n use any::Any;\n use borrow::IntoCow;\n use boxed::Box;\n-use cell::RacyCell;\n+use comm::RacyCell;\n use clone::Clone;\n use kinds::{Send, Sync};\n use ops::{Drop, FnOnce};"}, {"sha": "3ea051b16f247972ee83a0c625fddb06a9e0d633", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -196,11 +196,10 @@ impl<T> Key<T> {\n \n #[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n mod imp {\n-    use std::cell::UnsafeCell;\n+    use std::comm::RacyCell;\n \n-    // SNAP c9f6d69 switch to `Cell`\n     #[doc(hidden)]\n-    pub struct KeyInner<T> { pub inner: UnsafeCell<*mut T> }\n+    pub struct KeyInner<T> { pub inner: RacyCell<*mut T> }\n \n     unsafe impl<T> ::kinds::Sync for KeyInner<T> { }\n "}, {"sha": "82bfdb0612a64322daf0515ac85ec8d58055609e", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2116c8fba6e73bc2bbf7cb6bb41911d4daed043/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=e2116c8fba6e73bc2bbf7cb6bb41911d4daed043", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use std::kinds::marker;\n-use std::cell::{UnsafeCell, RacyCell};\n+use std::comm::RacyCell;\n+use std::cell::UnsafeCell;\n \n struct MyUnsafe<T> {\n     value: RacyCell<T>"}]}