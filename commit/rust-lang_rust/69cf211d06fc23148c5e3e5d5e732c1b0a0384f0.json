{"sha": "69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Y2YyMTFkMDZmYzIzMTQ4YzVlM2U1ZDVlNzMyYzFiMGEwMzg0ZjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-21T19:44:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T07:27:46Z"}, "message": "get back the more precise error message", "tree": {"sha": "ee152807540cb426e33633f7b5c95c4d843c906c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee152807540cb426e33633f7b5c95c4d843c906c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "html_url": "https://github.com/rust-lang/rust/commit/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f70af91e51709cbffe195aa698e287be56eeaa47", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70af91e51709cbffe195aa698e287be56eeaa47", "html_url": "https://github.com/rust-lang/rust/commit/f70af91e51709cbffe195aa698e287be56eeaa47"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "ff91ddec946cbcadc36e29e78b667be814b5e54b", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "patch": "@@ -8,6 +8,7 @@ use std::hash::Hash;\n use rustc_data_structures::fx::FxHashMap;\n \n use rustc::mir::AssertMessage;\n+use rustc_ast::ast::Mutability;\n use rustc_span::symbol::Symbol;\n use rustc_span::{def_id::DefId, Span};\n \n@@ -347,11 +348,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     fn before_access_global(\n         memory_extra: &MemoryExtra,\n-        _allocation: &Allocation,\n+        alloc_id: AllocId,\n+        allocation: &Allocation,\n         def_id: Option<DefId>,\n         is_write: bool,\n     ) -> InterpResult<'tcx> {\n-        if is_write {\n+        if is_write && allocation.mutability == Mutability::Not {\n+            Err(err_ub!(WriteToReadOnly(alloc_id)).into())\n+        } else if is_write {\n             Err(ConstEvalErrKind::ModifiedGlobal.into())\n         } else if memory_extra.can_access_statics || def_id.is_none() {\n             Ok(())"}, {"sha": "b820b11e9460d0ed7f37f2c67a9ef91586685b4e", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "patch": "@@ -212,6 +212,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     #[inline]\n     fn before_access_global(\n         _memory_extra: &Self::MemoryExtra,\n+        _alloc_id: AllocId,\n         _allocation: &Allocation,\n         _def_id: Option<DefId>,\n         _is_write: bool,"}, {"sha": "87db44a96e7b3ce943459723469919c09e7f8aa2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "patch": "@@ -456,7 +456,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 (allocation, Some(def_id))\n             }\n         };\n-        M::before_access_global(memory_extra, alloc, def_id, is_write)?;\n+        M::before_access_global(memory_extra, id, alloc, def_id, is_write)?;\n         let alloc = Cow::Borrowed(alloc);\n         // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n         let (alloc, tag) = M::init_allocation_extra("}, {"sha": "17b8f3de7513880d83d021573f548a93df8abb79", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "patch": "@@ -272,6 +272,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     fn before_access_global(\n         _memory_extra: &(),\n+        _alloc_id: AllocId,\n         allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n         _def_id: Option<DefId>,\n         is_write: bool,"}, {"sha": "8456e8ec6870dcd4c0d2204b8e8ac737bfb662d7", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69cf211d06fc23148c5e3e5d5e732c1b0a0384f0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=69cf211d06fc23148c5e3e5d5e732c1b0a0384f0", "patch": "@@ -11,7 +11,7 @@ LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc1 which is read-only\n LL | |     }\n LL | | };\n    | |__-"}]}