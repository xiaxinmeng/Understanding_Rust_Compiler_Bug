{"sha": "6a6098d4c31f6b54c8768e32f24182645ac077d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNjA5OGQ0YzMxZjZiNTRjODc2OGUzMmYyNDE4MjY0NWFjMDc3ZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-22T15:30:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-22T22:14:44Z"}, "message": "Remove RelativePathBuf from fixture\n\nThe paths in fixture are not really relative (the default one is\n`/main.rs`), so it doesn't make sense to use `RelativePathBuf` here.", "tree": {"sha": "66879957613620b5c2788f9d98ac36fd24a603d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66879957613620b5c2788f9d98ac36fd24a603d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6098d4c31f6b54c8768e32f24182645ac077d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6098d4c31f6b54c8768e32f24182645ac077d6", "html_url": "https://github.com/rust-lang/rust/commit/6a6098d4c31f6b54c8768e32f24182645ac077d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6098d4c31f6b54c8768e32f24182645ac077d6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0331e5575034a145956f76316ee0fcdf72077e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0331e5575034a145956f76316ee0fcdf72077e", "html_url": "https://github.com/rust-lang/rust/commit/5a0331e5575034a145956f76316ee0fcdf72077e"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "b0e56e1b5a6bd07bdc96d5b6ed1d27d035eb3fe6", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -128,7 +128,7 @@ impl From<foo::bar::baz::Boo> for A {\n \n     fn check_not_applicable(ra_fixture: &str) {\n         let fixture =\n-            format!(\"//- main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         check_assist_not_applicable(add_from_impl_for_enum, &fixture)\n     }\n "}, {"sha": "43b4584b45977c28db118b53f7004f6274764eed", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -301,7 +301,7 @@ fn another_fn() {\n \n     fn check_not_applicable(ra_fixture: &str) {\n         let fixture =\n-            format!(\"//- main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         check_assist_not_applicable(extract_struct_from_enum_variant, &fixture)\n     }\n "}, {"sha": "3c12c1daa43d7852f2a34a1828ab125fbc99fac0", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -765,7 +765,7 @@ fn foo(opt: Option<i32>) {\n     }\n }\"#;\n         let before =\n-            &format!(\"//- main.rs crate:main deps:core\\n{}{}\", before, FamousDefs::FIXTURE);\n+            &format!(\"//- /main.rs crate:main deps:core\\n{}{}\", before, FamousDefs::FIXTURE);\n \n         check_assist(\n             fill_match_arms,"}, {"sha": "af8fe11ec624a611a8cdd1b106817a883e91c301", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -164,7 +164,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n \n     let mut source_root = SourceRoot::new_local();\n     let mut source_root_id = WORKSPACE;\n-    let mut source_root_prefix: RelativePathBuf = \"/\".into();\n+    let mut source_root_prefix = \"/\".to_string();\n     let mut file_id = FileId(0);\n \n     let mut file_position = None;\n@@ -212,9 +212,9 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         };\n \n         db.set_file_text(file_id, Arc::new(text));\n-        db.set_file_relative_path(file_id, meta.path.clone());\n+        db.set_file_relative_path(file_id, meta.path.clone().into());\n         db.set_file_source_root(file_id, source_root_id);\n-        source_root.insert_file(meta.path, file_id);\n+        source_root.insert_file(meta.path.into(), file_id);\n \n         file_id.0 += 1;\n     }\n@@ -245,12 +245,12 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n }\n \n enum ParsedMeta {\n-    Root { path: RelativePathBuf },\n+    Root { path: String },\n     File(FileMeta),\n }\n \n struct FileMeta {\n-    path: RelativePathBuf,\n+    path: String,\n     krate: Option<String>,\n     deps: Vec<String>,\n     cfg: CfgOptions,"}, {"sha": "a98efb1ccd18edc3ce5c989df9fee8ae3ea6f633", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -933,7 +933,7 @@ fn method_resolution_overloaded_method() {\n     test_utils::mark::check!(impl_self_type_match_without_receiver);\n     let t = type_at(\n         r#\"\n-//- main.rs\n+//- /main.rs\n struct Wrapper<T>(T);\n struct Foo<T>(T);\n struct Bar<T>(T);"}, {"sha": "76910d09bdaba7cc1916c66a72bf40d84d8cdafc", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -4,7 +4,7 @@ use std::str::FromStr;\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n-use ra_db::{CrateName, Env, RelativePathBuf};\n+use ra_db::{CrateName, Env};\n use test_utils::{extract_offset, extract_range, parse_fixture, FixtureEntry, CURSOR_MARKER};\n \n use crate::{\n@@ -28,7 +28,7 @@ impl MockFileData {\n     fn path(&self) -> &str {\n         match self {\n             MockFileData::Plain { path, .. } => path.as_str(),\n-            MockFileData::Fixture(f) => f.meta.path().as_str(),\n+            MockFileData::Fixture(f) => f.meta.path(),\n         }\n     }\n \n@@ -167,7 +167,6 @@ impl MockAnalysis {\n         for (i, data) in self.files.into_iter().enumerate() {\n             let path = data.path();\n             assert!(path.starts_with('/'));\n-            let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let cfg_options = data.cfg_options();\n             let file_id = FileId(i as u32 + 1);\n             let edition = data.edition();\n@@ -183,7 +182,8 @@ impl MockAnalysis {\n                     Default::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let crate_name = path.parent().unwrap().file_name().unwrap();\n+                let base = &path[..path.len() - \"/lib.rs\".len()];\n+                let crate_name = &base[base.rfind('/').unwrap() + '/'.len_utf8()..];\n                 let other_crate = crate_graph.add_crate_root(\n                     file_id,\n                     edition,\n@@ -199,7 +199,7 @@ impl MockAnalysis {\n                         .unwrap();\n                 }\n             }\n-            change.add_file(source_root, file_id, path, Arc::new(data.content().to_owned()));\n+            change.add_file(source_root, file_id, path.into(), Arc::new(data.content().to_owned()));\n         }\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "48ce831af7a039c8a879edc254b5c60e283b81d5", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -29,12 +29,12 @@ fn completes_items_from_standard_library() {\n     let project_start = Instant::now();\n     let server = Project::with_fixture(\n         r#\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- /src/lib.rs\n use std::collections::Spam;\n \"#,\n     )\n@@ -63,24 +63,24 @@ fn test_runnables_project() {\n     }\n \n     let code = r#\"\n-//- foo/Cargo.toml\n+//- /foo/Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- foo/src/lib.rs\n+//- /foo/src/lib.rs\n pub fn foo() {}\n \n-//- foo/tests/spam.rs\n+//- /foo/tests/spam.rs\n #[test]\n fn test_eggs() {}\n \n-//- bar/Cargo.toml\n+//- /bar/Cargo.toml\n [package]\n name = \"bar\"\n version = \"0.0.0\"\n \n-//- bar/src/main.rs\n+//- /bar/src/main.rs\n fn main() {}\n \"#;\n \n@@ -140,12 +140,12 @@ fn test_format_document() {\n \n     let server = project(\n         r#\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- /src/lib.rs\n mod bar;\n \n fn main() {\n@@ -200,13 +200,13 @@ fn test_format_document_2018() {\n \n     let server = project(\n         r#\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n edition = \"2018\"\n \n-//- src/lib.rs\n+//- /src/lib.rs\n mod bar;\n \n async fn test() {\n@@ -266,12 +266,12 @@ fn test_missing_module_code_action() {\n \n     let server = project(\n         r#\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- /src/lib.rs\n mod bar;\n \n fn main() {}\n@@ -335,10 +335,10 @@ fn test_missing_module_code_action_in_json_project() {\n \n     let code = format!(\n         r#\"\n-//- rust-project.json\n+//- /rust-project.json\n {PROJECT}\n \n-//- src/lib.rs\n+//- /src/lib.rs\n mod bar;\n \n fn main() {{}}\n@@ -391,15 +391,15 @@ fn diagnostics_dont_block_typing() {\n     }\n \n     let librs: String = (0..10).map(|i| format!(\"mod m{};\", i)).collect();\n-    let libs: String = (0..10).map(|i| format!(\"//- src/m{}.rs\\nfn foo() {{}}\\n\\n\", i)).collect();\n+    let libs: String = (0..10).map(|i| format!(\"//- /src/m{}.rs\\nfn foo() {{}}\\n\\n\", i)).collect();\n     let server = Project::with_fixture(&format!(\n         r#\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- src/lib.rs\n+//- /src/lib.rs\n {}\n \n {}\n@@ -449,12 +449,12 @@ fn preserves_dos_line_endings() {\n \n     let server = Project::with_fixture(\n         &\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \\\"foo\\\"\n version = \\\"0.0.0\\\"\n \n-//- src/main.rs\n+//- /src/main.rs\n /// Some Docs\\r\\nfn main() {}\n \",\n     )\n@@ -484,12 +484,12 @@ fn out_dirs_check() {\n \n     let server = Project::with_fixture(\n         r###\"\n-//- Cargo.toml\n+//- /Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n \n-//- build.rs\n+//- /build.rs\n use std::{env, fs, path::Path};\n \n fn main() {\n@@ -504,7 +504,7 @@ fn main() {\n     println!(\"cargo:rustc-cfg=featlike=\\\"set\\\"\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n }\n-//- src/main.rs\n+//- /src/main.rs\n #[rustc_builtin_macro] macro_rules! include {}\n #[rustc_builtin_macro] macro_rules! concat {}\n #[rustc_builtin_macro] macro_rules! env {}\n@@ -599,15 +599,15 @@ fn resolve_proc_macro() {\n     }\n     let server = Project::with_fixture(\n         r###\"\n-//- foo/Cargo.toml\n+//- /foo/Cargo.toml\n [package]\n name = \"foo\"\n version = \"0.0.0\"\n edition = \"2018\"\n [dependencies]\n bar = {path = \"../bar\"}\n \n-//- foo/src/main.rs\n+//- /foo/src/main.rs\n use bar::Bar;\n trait Bar {\n   fn bar();\n@@ -618,7 +618,7 @@ fn main() {\n   Foo::bar();\n }\n \n-//- bar/Cargo.toml\n+//- /bar/Cargo.toml\n [package]\n name = \"bar\"\n version = \"0.0.0\"\n@@ -627,7 +627,7 @@ edition = \"2018\"\n [lib]\n proc-macro = true\n \n-//- bar/src/lib.rs\n+//- /bar/src/lib.rs\n extern crate proc_macro;\n use proc_macro::{Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n macro_rules! t {"}, {"sha": "f58790ded73abe717c957ce265dc3a236d3d3a30", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -69,7 +69,7 @@ impl<'a> Project<'a> {\n         let mut paths = vec![];\n \n         for entry in parse_fixture(self.fixture) {\n-            let path = tmp_dir.path().join(entry.meta.path().as_str());\n+            let path = tmp_dir.path().join(&entry.meta.path()['/'.len_utf8()..]);\n             fs::create_dir_all(path.parent().unwrap()).unwrap();\n             fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n             paths.push((path, entry.text));"}, {"sha": "b1333cf1570b65732d2e5d46e747aa57e01bf88c", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6098d4c31f6b54c8768e32f24182645ac077d6/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=6a6098d4c31f6b54c8768e32f24182645ac077d6", "patch": "@@ -168,13 +168,13 @@ pub struct FixtureEntry {\n \n #[derive(Debug, Eq, PartialEq)]\n pub enum FixtureMeta {\n-    Root { path: RelativePathBuf },\n+    Root { path: String },\n     File(FileMeta),\n }\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct FileMeta {\n-    pub path: RelativePathBuf,\n+    pub path: String,\n     pub crate_name: Option<String>,\n     pub deps: Vec<String>,\n     pub cfg: CfgOptions,\n@@ -183,7 +183,7 @@ pub struct FileMeta {\n }\n \n impl FixtureMeta {\n-    pub fn path(&self) -> &RelativePath {\n+    pub fn path(&self) -> &str {\n         match self {\n             FixtureMeta::Root { path } => &path,\n             FixtureMeta::File(f) => &f.path,\n@@ -292,12 +292,12 @@ fn parse_meta(meta: &str) -> FixtureMeta {\n     let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n     if components[0] == \"root\" {\n-        let path: RelativePathBuf = components[1].into();\n+        let path = components[1].to_string();\n         assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n         return FixtureMeta::Root { path };\n     }\n \n-    let path: RelativePathBuf = components[0].into();\n+    let path = components[0].to_string();\n     assert!(path.starts_with(\"/\"));\n \n     let mut krate = None;"}]}