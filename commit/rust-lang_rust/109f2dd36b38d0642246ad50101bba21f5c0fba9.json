{"sha": "109f2dd36b38d0642246ad50101bba21f5c0fba9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOWYyZGQzNmIzOGQwNjQyMjQ2YWQ1MDEwMWJiYTIxZjVjMGZiYTk=", "commit": {"author": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-10T17:47:33Z"}, "committer": {"name": "Christopher Vittal", "email": "christopher.vittal@gmail.com", "date": "2017-11-15T20:46:01Z"}, "message": "Add new error comparision to hide desugaring\n\nFirst some background:\nTo the compiler, the following two signatures in the trait vs the impl\nare the same.\n\n```rust\ntrait Foo {\n    fn foo(&self, &impl Debug);\n}\nimpl Foo for () {\n    fn foo<U: Debug>(&self, x: &U) { ... }\n}\n```\n\nWe do not want to allow this, and so we add a new error and check.\n\nThe check just tests that all paramters 'syntheticness' match up. As\nduring collection, the impl Trait parameters are transformed into\nanonymous synthetic generics.\n\nFurthermore, causes a check for unused type parameters to be skipped in\ncheck_bounds_are_used if there is already a TyError. Thus, an unused\ninput will not trigger `type parameter unused` errors.\n\nUpdate the one test that checked for this error in the case of\na TyError.", "tree": {"sha": "a5d5704dab57dea70cf32c8cd01a7ce65e444f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5d5704dab57dea70cf32c8cd01a7ce65e444f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109f2dd36b38d0642246ad50101bba21f5c0fba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109f2dd36b38d0642246ad50101bba21f5c0fba9", "html_url": "https://github.com/rust-lang/rust/commit/109f2dd36b38d0642246ad50101bba21f5c0fba9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109f2dd36b38d0642246ad50101bba21f5c0fba9/comments", "author": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrisvittal", "id": 15916123, "node_id": "MDQ6VXNlcjE1OTE2MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/15916123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvittal", "html_url": "https://github.com/chrisvittal", "followers_url": "https://api.github.com/users/chrisvittal/followers", "following_url": "https://api.github.com/users/chrisvittal/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvittal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvittal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvittal/subscriptions", "organizations_url": "https://api.github.com/users/chrisvittal/orgs", "repos_url": "https://api.github.com/users/chrisvittal/repos", "events_url": "https://api.github.com/users/chrisvittal/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvittal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f225fe43f14a8a3887aca558f20c7d7e990b591e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f225fe43f14a8a3887aca558f20c7d7e990b591e", "html_url": "https://github.com/rust-lang/rust/commit/f225fe43f14a8a3887aca558f20c7d7e990b591e"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "04fa99540a1776644470e99987d3620b9d14b528", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=109f2dd36b38d0642246ad50101bba21f5c0fba9", "patch": "@@ -67,6 +67,14 @@ pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return;\n     }\n \n+    if let Err(ErrorReported) = compare_synthetic_generics(tcx,\n+                                                           impl_m,\n+                                                           impl_m_span,\n+                                                           trait_m,\n+                                                           trait_item_span) {\n+        return;\n+    }\n+\n     if let Err(ErrorReported) = compare_predicate_entailment(tcx,\n                                                              impl_m,\n                                                              impl_m_span,\n@@ -708,6 +716,45 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Ok(())\n }\n \n+fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                        impl_m: &ty::AssociatedItem,\n+                                        _impl_m_span: Span, // FIXME necessary?\n+                                        trait_m: &ty::AssociatedItem,\n+                                        _trait_item_span: Option<Span>) // FIXME necessary?\n+                                        -> Result<(), ErrorReported> {\n+    // FIXME(chrisvittal) Clean up this function, list of FIXME items:\n+    //     1. Better messages for the span lables\n+    //     2. Explanation as to what is going on\n+    //     3. Correct the function signature for what we actually use\n+    // If we get here, we already have the same number of generics, so the zip will\n+    // be okay.\n+    let mut error_found = false;\n+    let impl_m_generics = tcx.generics_of(impl_m.def_id);\n+    let trait_m_generics = tcx.generics_of(trait_m.def_id);\n+    for (impl_ty, trait_ty) in impl_m_generics.types.iter().zip(trait_m_generics.types.iter()) {\n+        if impl_ty.synthetic != trait_ty.synthetic {\n+            let impl_node_id = tcx.hir.as_local_node_id(impl_ty.def_id).unwrap();\n+            let impl_span = tcx.hir.span(impl_node_id);\n+            let trait_node_id = tcx.hir.as_local_node_id(trait_ty.def_id).unwrap();\n+            let trait_span = tcx.hir.span(trait_node_id);\n+            let mut err = struct_span_err!(tcx.sess,\n+                                           impl_span,\n+                                           E0642,\n+                                           \"method `{}` has incompatible signature for trait\",\n+                                           trait_m.name);\n+            err.span_label(trait_span, \"annotation in trait\");\n+            err.span_label(impl_span, \"annotation in impl\");\n+            err.emit();\n+            error_found = true;\n+        }\n+    }\n+    if error_found {\n+        Err(ErrorReported)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     impl_c: &ty::AssociatedItem,\n                                     impl_c_span: Span,"}, {"sha": "4cc1e83d6e3c9296983e215e1b805bda25711992", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=109f2dd36b38d0642246ad50101bba21f5c0fba9", "patch": "@@ -5035,6 +5035,10 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         if let ty::TyParam(ParamTy {idx, ..}) = leaf_ty.sty {\n             debug!(\"Found use of ty param num {}\", idx);\n             tps_used[idx as usize - generics.lifetimes.len()] = true;\n+        } else if let ty::TyError = leaf_ty.sty {\n+            // If there already another error, do not emit an error for not using a type Parameter\n+            assert!(tcx.sess.err_count() > 0);\n+            return;\n         }\n     }\n "}, {"sha": "039af900e245bb42b90fa8829150c5ecafb01ebe", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=109f2dd36b38d0642246ad50101bba21f5c0fba9", "patch": "@@ -4625,6 +4625,22 @@ It is recommended that you look for a `new` function or equivalent in the\n crate's documentation.\n \"##,\n \n+E0642: r##\"\n+This error indicates that there is a mismatch between generic parameters and\n+impl Trait parameters in a trait Declaration versus it's impl.\n+\n+```compile_fail,E0642\n+#![feature(conservative_impl_trait)]\n+trait Foo\n+    fn foo(&self, &impl Iterator)\n+}\n+impl Foo for () {\n+    fn foo<U: Iterator>(&self, _: &U) { } // error method `foo` has incompatible\n+                                          // signature for trait\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "08640b292eabc4e40b96bf388f55838fc2cdbc13", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109f2dd36b38d0642246ad50101bba21f5c0fba9/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=109f2dd36b38d0642246ad50101bba21f5c0fba9", "patch": "@@ -33,17 +33,5 @@ help: possible candidates are found in other modules, you can import them into s\n 11 | use std::collections::hash_map::HashMap;\n    |\n \n-error[E0091]: type parameter `K` is unused\n-  --> $DIR/use_suggestion_placement.rs:35:15\n-   |\n-35 |     type Dict<K, V> = HashMap<K, V>;\n-   |               ^ unused type parameter\n-\n-error[E0091]: type parameter `V` is unused\n-  --> $DIR/use_suggestion_placement.rs:35:18\n-   |\n-35 |     type Dict<K, V> = HashMap<K, V>;\n-   |                  ^ unused type parameter\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}]}