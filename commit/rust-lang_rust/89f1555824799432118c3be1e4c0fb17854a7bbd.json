{"sha": "89f1555824799432118c3be1e4c0fb17854a7bbd", "node_id": "C_kwDOAAsO6NoAKDg5ZjE1NTU4MjQ3OTk0MzIxMThjM2JlMWU0YzBmYjE3ODU0YTdiYmQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-11T18:58:44Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-11T18:58:44Z"}, "message": "Add `AstConv::astconv` method to remove `<dyn AstConv>::` calls", "tree": {"sha": "a4bb6f27c86e622d5cc2284bb1ea864d8ca240d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4bb6f27c86e622d5cc2284bb1ea864d8ca240d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89f1555824799432118c3be1e4c0fb17854a7bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89f1555824799432118c3be1e4c0fb17854a7bbd", "html_url": "https://github.com/rust-lang/rust/commit/89f1555824799432118c3be1e4c0fb17854a7bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89f1555824799432118c3be1e4c0fb17854a7bbd/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 127, "additions": 50, "deletions": 77}, "files": [{"sha": "3a284aecb667d7691144a40ad8a48b088230cf56", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -120,6 +120,13 @@ pub trait AstConv<'tcx> {\n     fn set_tainted_by_errors(&self, e: ErrorGuaranteed);\n \n     fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, span: Span);\n+\n+    fn astconv(&self) -> &dyn AstConv<'tcx>\n+    where\n+        Self: Sized,\n+    {\n+        self\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "cd745ee8cab69929e714c78fa546108a30b8ca1e", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -351,7 +351,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n     }\n \n     pub fn to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n-        <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_ty)\n+        self.astconv().ast_ty_to_ty(ast_ty)\n     }\n \n     pub fn hir_id(&self) -> hir::HirId {\n@@ -413,8 +413,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Ty<'tcx> {\n         if let Some(trait_ref) = poly_trait_ref.no_bound_vars() {\n-            let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n-                self,\n+            let item_substs = self.astconv().create_substs_for_associated_item(\n                 span,\n                 item_def_id,\n                 item_segment,\n@@ -1112,8 +1111,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                 tcx.hir().get_parent(hir_id)\n                 && i.of_trait.is_some()\n             {\n-                <dyn AstConv<'_>>::ty_of_fn(\n-                    &icx,\n+                icx.astconv().ty_of_fn(\n                     hir_id,\n                     sig.header.unsafety,\n                     sig.header.abi,\n@@ -1130,15 +1128,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             kind: TraitItemKind::Fn(FnSig { header, decl, span: _ }, _),\n             generics,\n             ..\n-        }) => <dyn AstConv<'_>>::ty_of_fn(\n-            &icx,\n-            hir_id,\n-            header.unsafety,\n-            header.abi,\n-            decl,\n-            Some(generics),\n-            None,\n-        ),\n+        }) => {\n+            icx.astconv().ty_of_fn(hir_id, header.unsafety, header.abi, decl, Some(generics), None)\n+        }\n \n         ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n@@ -1244,8 +1236,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n \n             ty::Binder::dummy(fn_sig)\n         }\n-        None => <dyn AstConv<'_>>::ty_of_fn(\n-            icx,\n+        None => icx.astconv().ty_of_fn(\n             hir_id,\n             sig.header.unsafety,\n             sig.header.abi,\n@@ -1354,8 +1345,7 @@ fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     match item.kind {\n         hir::ItemKind::Impl(ref impl_) => impl_.of_trait.as_ref().map(|ast_trait_ref| {\n             let selfty = tcx.type_of(def_id);\n-            <dyn AstConv<'_>>::instantiate_mono_trait_ref(\n-                &icx,\n+            icx.astconv().instantiate_mono_trait_ref(\n                 ast_trait_ref,\n                 selfty,\n                 check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n@@ -1485,15 +1475,8 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         hir::Unsafety::Unsafe\n     };\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let fty = <dyn AstConv<'_>>::ty_of_fn(\n-        &ItemCtxt::new(tcx, def_id),\n-        hir_id,\n-        unsafety,\n-        abi,\n-        decl,\n-        None,\n-        None,\n-    );\n+    let fty =\n+        ItemCtxt::new(tcx, def_id).astconv().ty_of_fn(hir_id, unsafety, abi, decl, None, None);\n \n     // Feature gate SIMD types in FFI, since I am not sure that the\n     // ABIs are handled at all correctly. -huonw"}, {"sha": "62eef710ba48f0542079996933b500f5b5643304", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -26,9 +26,9 @@ fn associated_type_bounds<'tcx>(\n     );\n \n     let icx = ItemCtxt::new(tcx, assoc_item_def_id);\n-    let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n+    let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n     // Associated types are implicitly sized unless a `?Sized` bound is found\n-    <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, item_ty, ast_bounds, None, span);\n+    icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n \n     let trait_def_id = tcx.parent(assoc_item_def_id);\n     let trait_predicates = tcx.trait_explicit_predicates_and_bounds(trait_def_id.expect_local());\n@@ -70,9 +70,9 @@ fn opaque_type_bounds<'tcx>(\n         };\n \n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n-        let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n+        let mut bounds = icx.astconv().compute_bounds(item_ty, ast_bounds);\n         // Opaque types are implicitly sized unless a `?Sized` bound is found\n-        <dyn AstConv<'_>>::add_implicitly_sized(&icx, &mut bounds, item_ty, ast_bounds, None, span);\n+        icx.astconv().add_implicitly_sized(&mut bounds, item_ty, ast_bounds, None, span);\n         debug!(?bounds);\n \n         tcx.arena.alloc_from_iter(bounds.predicates())"}, {"sha": "234253556845bf264283ec24fedcfbd8c7549a86", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -162,8 +162,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n \n                 let mut bounds = Bounds::default();\n                 // Params are implicitly sized unless a `?Sized` bound is found\n-                <dyn AstConv<'_>>::add_implicitly_sized(\n-                    &icx,\n+                icx.astconv().add_implicitly_sized(\n                     &mut bounds,\n                     param_ty,\n                     &[],\n@@ -211,22 +210,16 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 }\n \n                 let mut bounds = Bounds::default();\n-                <dyn AstConv<'_>>::add_bounds(\n-                    &icx,\n-                    ty,\n-                    bound_pred.bounds.iter(),\n-                    &mut bounds,\n-                    bound_vars,\n-                );\n+                icx.astconv().add_bounds(ty, bound_pred.bounds.iter(), &mut bounds, bound_vars);\n                 predicates.extend(bounds.predicates());\n             }\n \n             hir::WherePredicate::RegionPredicate(region_pred) => {\n-                let r1 = <dyn AstConv<'_>>::ast_region_to_region(&icx, &region_pred.lifetime, None);\n+                let r1 = icx.astconv().ast_region_to_region(&region_pred.lifetime, None);\n                 predicates.extend(region_pred.bounds.iter().map(|bound| {\n                     let (r2, span) = match bound {\n                         hir::GenericBound::Outlives(lt) => {\n-                            (<dyn AstConv<'_>>::ast_region_to_region(&icx, lt, None), lt.ident.span)\n+                            (icx.astconv().ast_region_to_region(lt, None), lt.ident.span)\n                         }\n                         _ => bug!(),\n                     };\n@@ -279,7 +272,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         debug!(?lifetimes);\n         for (arg, duplicate) in std::iter::zip(lifetimes, ast_generics.params) {\n             let hir::GenericArg::Lifetime(arg) = arg else { bug!() };\n-            let orig_region = <dyn AstConv<'_>>::ast_region_to_region(&icx, &arg, None);\n+            let orig_region = icx.astconv().ast_region_to_region(&arg, None);\n             if !matches!(orig_region.kind(), ty::ReEarlyBound(..)) {\n                 // Only early-bound regions can point to the original generic parameter.\n                 continue;\n@@ -527,14 +520,9 @@ pub(super) fn super_predicates_that_define_assoc_type(\n         // Convert the bounds that follow the colon, e.g., `Bar + Zed` in `trait Foo: Bar + Zed`.\n         let self_param_ty = tcx.types.self_param;\n         let superbounds1 = if let Some(assoc_name) = assoc_name {\n-            <dyn AstConv<'_>>::compute_bounds_that_match_assoc_type(\n-                &icx,\n-                self_param_ty,\n-                bounds,\n-                assoc_name,\n-            )\n+            icx.astconv().compute_bounds_that_match_assoc_type(self_param_ty, bounds, assoc_name)\n         } else {\n-            <dyn AstConv<'_>>::compute_bounds(&icx, self_param_ty, bounds)\n+            icx.astconv().compute_bounds(self_param_ty, bounds)\n         };\n \n         let superbounds1 = superbounds1.predicates();"}, {"sha": "4e76615ac9e4ca99822bce649aaf3d8b246dc5c7", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -544,7 +544,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n     // scope.  This is derived from the enclosing item-like thing.\n     let env_def_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n-    <dyn AstConv<'_>>::ast_ty_to_ty(&item_cx, hir_ty)\n+    item_cx.astconv().ast_ty_to_ty(hir_ty)\n }\n \n pub fn hir_trait_to_predicates<'tcx>(\n@@ -558,8 +558,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n     let env_def_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n     let mut bounds = Bounds::default();\n-    let _ = <dyn AstConv<'_>>::instantiate_poly_trait_ref(\n-        &item_cx,\n+    let _ = &item_cx.astconv().instantiate_poly_trait_ref(\n         hir_trait,\n         DUMMY_SP,\n         ty::BoundConstness::NotConst,"}, {"sha": "7e1c0faa453a26f08b87472f77d09cc51b237a2e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -1807,7 +1807,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             // Get the return type.\n             && let hir::TyKind::OpaqueDef(..) = ty.kind\n         {\n-            let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n+            let ty = fcx.astconv().ast_ty_to_ty( ty);\n             // Get the `impl Trait`'s `DefId`.\n             if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = ty.kind()\n                 // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n@@ -1866,7 +1866,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n         if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id)\n             && let hir::FnRetTy::Return(ty) = fn_decl.output\n-            && let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty)\n+            && let ty = fcx.astconv().ast_ty_to_ty( ty)\n             && let ty::Dynamic(..) = ty.kind()\n         {\n             return true;"}, {"sha": "006e49f8bf47f5c5d1ebc0226f7dcc7a8268ab0e", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -374,7 +374,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn to_ty(&self, ast_t: &hir::Ty<'_>) -> RawTy<'tcx> {\n-        let t = <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_t);\n+        let t = self.astconv().ast_ty_to_ty(ast_t);\n         self.register_wf_obligation(t.into(), ast_t.span, traits::WellFormed(None));\n         self.handle_raw_ty(ast_t.span, t)\n     }\n@@ -777,7 +777,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // to be object-safe.\n                 // We manually call `register_wf_obligation` in the success path\n                 // below.\n-                let ty = <dyn AstConv<'_>>::ast_ty_to_ty_in_path(self, qself);\n+                let ty = self.astconv().ast_ty_to_ty_in_path(qself);\n                 (self.handle_raw_ty(span, ty), qself, segment)\n             }\n             QPath::LangItem(..) => {\n@@ -975,8 +975,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let path_segs = match res {\n             Res::Local(_) | Res::SelfCtor(_) => vec![],\n-            Res::Def(kind, def_id) => <dyn AstConv<'_>>::def_ids_for_value_path_segments(\n-                self,\n+            Res::Def(kind, def_id) => self.astconv().def_ids_for_value_path_segments(\n                 segments,\n                 self_ty.map(|ty| ty.raw),\n                 kind,\n@@ -1027,8 +1026,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // errors if type parameters are provided in an inappropriate place.\n \n         let generic_segs: FxHashSet<_> = path_segs.iter().map(|PathSeg(_, index)| index).collect();\n-        let generics_has_err = <dyn AstConv<'_>>::prohibit_generics(\n-            self,\n+        let generics_has_err = self.astconv().prohibit_generics(\n             segments.iter().enumerate().filter_map(|(index, seg)| {\n                 if !generic_segs.contains(&index) || is_alias_variant_ctor {\n                     Some(seg)\n@@ -1177,7 +1175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ) -> ty::GenericArg<'tcx> {\n                 match (&param.kind, arg) {\n                     (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n-                        <dyn AstConv<'_>>::ast_region_to_region(self.fcx, lt, Some(param)).into()\n+                        self.fcx.astconv().ast_region_to_region(lt, Some(param)).into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.fcx.to_ty(ty).raw.into()"}, {"sha": "b9e13fd20092421554e9d9d3ce9899334f100d74", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -1664,15 +1664,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match *qpath {\n             QPath::Resolved(ref maybe_qself, ref path) => {\n                 let self_ty = maybe_qself.as_ref().map(|qself| self.to_ty(qself).raw);\n-                let ty = <dyn AstConv<'_>>::res_to_ty(self, self_ty, path, true);\n+                let ty = self.astconv().res_to_ty(self_ty, path, true);\n                 (path.res, self.handle_raw_ty(path_span, ty))\n             }\n             QPath::TypeRelative(ref qself, ref segment) => {\n                 let ty = self.to_ty(qself);\n \n-                let result = <dyn AstConv<'_>>::associated_path_to_ty(\n-                    self, hir_id, path_span, ty.raw, qself, segment, true,\n-                );\n+                let result = self\n+                    .astconv()\n+                    .associated_path_to_ty(hir_id, path_span, ty.raw, qself, segment, true);\n                 let ty = result.map(|(ty, _, _)| ty).unwrap_or_else(|_| self.tcx().ty_error());\n                 let ty = self.handle_raw_ty(path_span, ty);\n                 let result = result.map(|(_, kind, def_id)| (kind, def_id));"}, {"sha": "f403140789170d02b7b23b98507dbd8dbefb1104", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -286,8 +286,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n             poly_trait_ref,\n         );\n \n-        let item_substs = <dyn AstConv<'tcx>>::create_substs_for_associated_item(\n-            self,\n+        let item_substs = self.astconv().create_substs_for_associated_item(\n             span,\n             item_def_id,\n             item_segment,"}, {"sha": "93c48aa6022c9721ace0704da2e01a9856ea29fb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -783,7 +783,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n                 let span = ty.span;\n-                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n+                let ty = self.astconv().ast_ty_to_ty(ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);\n                 let bound_vars = self.tcx.late_bound_vars(fn_id);\n@@ -854,7 +854,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 }) => {\n                     // FIXME: Maybe these calls to `ast_ty_to_ty` can be removed (and the ones below)\n-                    let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, bounded_ty);\n+                    let ty = self.astconv().ast_ty_to_ty(bounded_ty);\n                     Some((ty, bounds))\n                 }\n                 _ => None,\n@@ -892,7 +892,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let all_bounds_str = all_matching_bounds_strs.join(\" + \");\n \n         let ty_param_used_in_fn_params = fn_parameters.iter().any(|param| {\n-                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, param);\n+                let ty = self.astconv().ast_ty_to_ty( param);\n                 matches!(ty.kind(), ty::Param(fn_param_ty_param) if expected_ty_as_param == fn_param_ty_param)\n             });\n \n@@ -946,7 +946,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n-            let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n+            let ty = self.astconv().ast_ty_to_ty(ty);\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n@@ -1339,7 +1339,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::Path { segments: [segment], .. },\n             ))\n             | hir::ExprKind::Path(QPath::TypeRelative(ty, segment)) => {\n-                let self_ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n+                let self_ty = self.astconv().ast_ty_to_ty(ty);\n                 if let Ok(pick) = self.probe_for_name(\n                     Mode::Path,\n                     Ident::new(capitalized_name, segment.ident.span),"}, {"sha": "7ddf9eaa4d8995463fa730d5ad653c536b174d2b", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -205,7 +205,7 @@ fn typeck_with_fallback<'tcx>(\n \n         if let Some(hir::FnSig { header, decl, .. }) = fn_sig {\n             let fn_sig = if rustc_hir_analysis::collect::get_infer_ret_ty(&decl.output).is_some() {\n-                <dyn AstConv<'_>>::ty_of_fn(&fcx, id, header.unsafety, header.abi, decl, None, None)\n+                fcx.astconv().ty_of_fn(id, header.unsafety, header.abi, decl, None, None)\n             } else {\n                 tcx.fn_sig(def_id)\n             };\n@@ -220,7 +220,7 @@ fn typeck_with_fallback<'tcx>(\n         } else {\n             let expected_type = body_ty\n                 .and_then(|ty| match ty.kind {\n-                    hir::TyKind::Infer => Some(<dyn AstConv<'_>>::ast_ty_to_ty(&fcx, ty)),\n+                    hir::TyKind::Infer => Some(fcx.astconv().ast_ty_to_ty(ty)),\n                     _ => None,\n                 })\n                 .unwrap_or_else(|| match tcx.hir().get(id) {"}, {"sha": "ff9f5bca6b5e75bb3daa0497055666ba23c39f35", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1555824799432118c3be1e4c0fb17854a7bbd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=89f1555824799432118c3be1e4c0fb17854a7bbd", "patch": "@@ -369,8 +369,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             ) -> subst::GenericArg<'tcx> {\n                 match (&param.kind, arg) {\n                     (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {\n-                        <dyn AstConv<'_>>::ast_region_to_region(self.cfcx.fcx, lt, Some(param))\n-                            .into()\n+                        self.cfcx.fcx.astconv().ast_region_to_region(lt, Some(param)).into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                         self.cfcx.to_ty(ty).raw.into()"}]}