{"sha": "0f24bc0d446ee5c74b94c371b9e30843df1250bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjRiYzBkNDQ2ZWU1Yzc0Yjk0YzM3MWI5ZTMwODQzZGYxMjUwYmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-01-04T02:07:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-04T02:07:05Z"}, "message": "Merge pull request #2330 from topecongiro/issue-2329\n\nIssue 2329", "tree": {"sha": "ade8af2105724e4741fac057a23d2d0519129a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade8af2105724e4741fac057a23d2d0519129a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f24bc0d446ee5c74b94c371b9e30843df1250bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaTYxJCRBK7hj4Ov3rIwAAdHIIAIxNn9XfOjbiS8LmqxbQSrta\nvmRD6MYtfL2WLbRc63y+pxB4Ux9mflZy4A2V5DjY84ySm7y0suuYqAhZD7wGw4fY\nk57cFVG+itgbP5+y+0LAj018TB1JL+JaP5yUd9wkIPUi1WEfGgUP9ERq/txmMn4B\nulA87cEp9XbbcONlSbJDWT/EpEW1DGCUcgN6rpvDyaftMowCK1lMQqbsz2rRMUku\ntqg4/odfHctDu7vC70Lxo0oTAs35fQkKsdGFA6byZV7ZiClT/bHVEgsiv0HN5F7q\nbO57FxduzkDitxf/a6OjwPglfjvgSDQhMA7qcT4c4MUrFg9P4CPyfeMsBQJbV14=\n=F6HN\n-----END PGP SIGNATURE-----\n", "payload": "tree ade8af2105724e4741fac057a23d2d0519129a96\nparent d3c2523c3288284c9e5b4df4774295032f4356b6\nparent 12ddaf93e26d3bfccfd9424ed7c0840334554a79\nauthor Nick Cameron <nrc@ncameron.org> 1515031625 +1300\ncommitter GitHub <noreply@github.com> 1515031625 +1300\n\nMerge pull request #2330 from topecongiro/issue-2329\n\nIssue 2329"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f24bc0d446ee5c74b94c371b9e30843df1250bb", "html_url": "https://github.com/rust-lang/rust/commit/0f24bc0d446ee5c74b94c371b9e30843df1250bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f24bc0d446ee5c74b94c371b9e30843df1250bb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c2523c3288284c9e5b4df4774295032f4356b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c2523c3288284c9e5b4df4774295032f4356b6", "html_url": "https://github.com/rust-lang/rust/commit/d3c2523c3288284c9e5b4df4774295032f4356b6"}, {"sha": "12ddaf93e26d3bfccfd9424ed7c0840334554a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ddaf93e26d3bfccfd9424ed7c0840334554a79", "html_url": "https://github.com/rust-lang/rust/commit/12ddaf93e26d3bfccfd9424ed7c0840334554a79"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "2de3a025e4debd16eeb36ecea7a8aec99e28d38f", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f24bc0d446ee5c74b94c371b9e30843df1250bb/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24bc0d446ee5c74b94c371b9e30843df1250bb/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0f24bc0d446ee5c74b94c371b9e30843df1250bb", "patch": "@@ -34,7 +34,7 @@ use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_co\n             format_defaultness, format_mutability, format_unsafety, format_visibility,\n             is_attributes_extendable, last_line_contains_single_line_comment,\n             last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n-            stmt_expr, trim_newlines, trimmed_last_line_width};\n+            stmt_expr, trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -674,7 +674,7 @@ pub fn format_impl(\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n+            result.push_str(visitor.buffer.to_string().trim());\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         }\n@@ -1073,7 +1073,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n             result.push('\\n');\n             result.push_str(&inner_indent_str);\n-            result.push_str(trim_newlines(visitor.buffer.to_string().trim()));\n+            result.push_str(visitor.buffer.to_string().trim());\n             result.push('\\n');\n             result.push_str(&outer_indent_str);\n         } else if result.contains('\\n') {"}, {"sha": "73103e88a64f3ea794ea640b269788ae3fada09b", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f24bc0d446ee5c74b94c371b9e30843df1250bb/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24bc0d446ee5c74b94c371b9e30843df1250bb/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=0f24bc0d446ee5c74b94c371b9e30843df1250bb", "patch": "@@ -254,17 +254,6 @@ pub fn count_newlines(input: &str) -> usize {\n     input.chars().filter(|&c| c == '\\n').count()\n }\n \n-#[inline]\n-pub fn trim_newlines(input: &str) -> &str {\n-    match input.find(|c| c != '\\n' && c != '\\r') {\n-        Some(start) => {\n-            let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n-            &input[start..end]\n-        }\n-        None => \"\",\n-    }\n-}\n-\n // Macro for deriving implementations of Serialize/Deserialize for enums\n #[macro_export]\n macro_rules! impl_enum_serialize_and_deserialize {"}, {"sha": "e36e9546b2451906e357ea08faa2f01d6852924d", "filename": "tests/target/issue-2329.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f24bc0d446ee5c74b94c371b9e30843df1250bb/tests%2Ftarget%2Fissue-2329.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f24bc0d446ee5c74b94c371b9e30843df1250bb/tests%2Ftarget%2Fissue-2329.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2329.rs?ref=0f24bc0d446ee5c74b94c371b9e30843df1250bb", "patch": "@@ -0,0 +1,30 @@\n+// Comments with characters which must be represented by multibyte.\n+\n+// \u30d5\u30fc\n+use foo;\n+// \u30d0\u30fc\n+use bar;\n+\n+impl MyStruct {\n+    // \u30b3\u30e1\u30f3\u30c8\n+    fn f1() {} // \u3053\u3093\u306b\u3061\u306f\n+    fn f2() {} // \u3042\u308a\u304c\u3068\u3046\n+               // \u30b3\u30e1\u30f3\u30c8\n+}\n+\n+trait MyTrait {\n+    // \u30b3\u30e1\u30f3\u30c8\n+    fn f1() {} // \u3053\u3093\u306b\u3061\u306f\n+    fn f2() {} // \u3042\u308a\u304c\u3068\u3046\n+               // \u30b3\u30e1\u30f3\u30c8\n+}\n+\n+fn main() {\n+    // \u30b3\u30e1\u30f3\u30c8\n+    let x = 1; // \uff38\n+    println!(\n+        \"x = {}\", // x\u306e\u5024\n+        x,        // \uff38\n+    );\n+    // \u30b3\u30e1\u30f3\u30c8\n+}"}]}