{"sha": "bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "node_id": "C_kwDOAAsO6NoAKGJiZDllNDE2MDZjYmE4ZWZiMDJlMzU2Zjc4YjdmMWM4Y2ZjMDRhOTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T20:41:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-28T12:18:44Z"}, "message": "Don't add --all-targets to runnables for no-std crates", "tree": {"sha": "f9d9d0745b037b6016944a6194db97a8c1937366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9d9d0745b037b6016944a6194db97a8c1937366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "html_url": "https://github.com/rust-lang/rust/commit/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "html_url": "https://github.com/rust-lang/rust/commit/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "ccb9bed5c501778b97afeefc8c2234fab6b47726", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -127,6 +127,8 @@ pub struct DefMap {\n     unstable_features: FxHashSet<SmolStr>,\n     /// #[rustc_coherence_is_core]\n     rustc_coherence_is_core: bool,\n+    no_core: bool,\n+    no_std: bool,\n \n     edition: Edition,\n     recursion_limit: Option<u32>,\n@@ -294,6 +296,8 @@ impl DefMap {\n             unstable_features: FxHashSet::default(),\n             diagnostics: Vec::new(),\n             rustc_coherence_is_core: false,\n+            no_core: false,\n+            no_std: false,\n         }\n     }\n \n@@ -331,6 +335,10 @@ impl DefMap {\n         self.rustc_coherence_is_core\n     }\n \n+    pub fn is_no_std(&self) -> bool {\n+        self.no_std || self.no_core\n+    }\n+\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }\n@@ -528,6 +536,8 @@ impl DefMap {\n             prelude: _,\n             root: _,\n             rustc_coherence_is_core: _,\n+            no_core: _,\n+            no_std: _,\n         } = self;\n \n         extern_prelude.shrink_to_fit();"}, {"sha": "64caf26299ca024a15cb4e88fef008f1b2afe4e8", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -291,8 +291,6 @@ impl DefCollector<'_> {\n \n         let attrs = item_tree.top_level_attrs(self.db, self.def_map.krate);\n \n-        self.inject_prelude(&attrs);\n-\n         // Process other crate-level attributes.\n         for attr in &*attrs {\n             if let Some(cfg) = attr.cfg() {\n@@ -321,6 +319,16 @@ impl DefCollector<'_> {\n                 continue;\n             }\n \n+            if *attr_name == hir_expand::name![no_core] {\n+                self.def_map.no_core = true;\n+                continue;\n+            }\n+\n+            if *attr_name == hir_expand::name![no_std] {\n+                self.def_map.no_std = true;\n+                continue;\n+            }\n+\n             if attr_name.as_text().as_deref() == Some(\"rustc_coherence_is_core\") {\n                 self.def_map.rustc_coherence_is_core = true;\n                 continue;\n@@ -359,6 +367,8 @@ impl DefCollector<'_> {\n             }\n         }\n \n+        self.inject_prelude();\n+\n         ModCollector {\n             def_collector: self,\n             macro_depth: 0,\n@@ -517,15 +527,15 @@ impl DefCollector<'_> {\n         }\n     }\n \n-    fn inject_prelude(&mut self, crate_attrs: &Attrs) {\n+    fn inject_prelude(&mut self) {\n         // See compiler/rustc_builtin_macros/src/standard_library_imports.rs\n \n-        if crate_attrs.by_key(\"no_core\").exists() {\n+        if self.def_map.no_core {\n             // libcore does not get a prelude.\n             return;\n         }\n \n-        let krate = if crate_attrs.by_key(\"no_std\").exists() {\n+        let krate = if self.def_map.no_std {\n             name![core]\n         } else {\n             let std = name![std];"}, {"sha": "f8dbb842775c33a8773bdc1be47a1a8ac1d26601", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -366,6 +366,8 @@ pub mod known {\n         crate_type,\n         derive,\n         global_allocator,\n+        no_core,\n+        no_std,\n         test,\n         test_case,\n         recursion_limit,"}, {"sha": "c02dbc60a339b8e01df39cc9a5fa2c37342a1e67", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -531,6 +531,11 @@ impl Analysis {\n         self.with_db(|db| db.crate_graph()[crate_id].edition)\n     }\n \n+    /// Returns true if this crate has `no_std` or `no_core` specified.\n+    pub fn is_crate_no_std(&self, crate_id: CrateId) -> Cancellable<bool> {\n+        self.with_db(|db| hir::db::DefDatabase::crate_def_map(db, crate_id).is_no_std())\n+    }\n+\n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancellable<FileId> {\n         self.with_db(|db| db.crate_graph()[crate_id].root_file_id)"}, {"sha": "c7b84c41b33e9e6153669481e608c4e8aa88885f", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -3,7 +3,7 @@\n use std::mem;\n \n use cfg::{CfgAtom, CfgExpr};\n-use ide::{Cancellable, FileId, RunnableKind, TestId};\n+use ide::{Cancellable, CrateId, FileId, RunnableKind, TestId};\n use project_model::{self, CargoFeatures, ManifestPath, TargetKind};\n use rustc_hash::FxHashSet;\n use vfs::AbsPathBuf;\n@@ -21,6 +21,7 @@ pub(crate) struct CargoTargetSpec {\n     pub(crate) package: String,\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,\n+    pub(crate) crate_id: CrateId,\n     pub(crate) required_features: Vec<String>,\n     pub(crate) features: FxHashSet<String>,\n }\n@@ -142,6 +143,7 @@ impl CargoTargetSpec {\n             target_kind: target_data.kind,\n             required_features: target_data.required_features.clone(),\n             features: package_data.features.keys().cloned().collect(),\n+            crate_id,\n         };\n \n         Ok(Some(res))"}, {"sha": "3f365c05942f094720657857754ff7992ad6afca", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd9e41606cba8efb02e356f78b7f1c8cfc04a94/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=bbd9e41606cba8efb02e356f78b7f1c8cfc04a94", "patch": "@@ -768,20 +768,25 @@ pub(crate) fn handle_runnables(\n     let config = snap.config.runnables();\n     match cargo_spec {\n         Some(spec) => {\n+            let all_targets = !snap.analysis.is_crate_no_std(spec.crate_id)?;\n             for cmd in [\"check\", \"test\"] {\n+                let mut cargo_args =\n+                    vec![cmd.to_owned(), \"--package\".to_owned(), spec.package.clone()];\n+                if all_targets {\n+                    cargo_args.push(\"--all-targets\".to_owned());\n+                }\n                 res.push(lsp_ext::Runnable {\n-                    label: format!(\"cargo {cmd} -p {} --all-targets\", spec.package),\n+                    label: format!(\n+                        \"cargo {cmd} -p {}{all_targets}\",\n+                        spec.package,\n+                        all_targets = if all_targets { \" --all-targets\" } else { \"\" }\n+                    ),\n                     location: None,\n                     kind: lsp_ext::RunnableKind::Cargo,\n                     args: lsp_ext::CargoRunnable {\n                         workspace_root: Some(spec.workspace_root.clone().into()),\n                         override_cargo: config.override_cargo.clone(),\n-                        cargo_args: vec![\n-                            cmd.to_string(),\n-                            \"--package\".to_string(),\n-                            spec.package.clone(),\n-                            \"--all-targets\".to_string(),\n-                        ],\n+                        cargo_args,\n                         cargo_extra_args: config.cargo_extra_args.clone(),\n                         executable_args: Vec::new(),\n                         expect_test: None,"}]}