{"sha": "9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWM1NzdkYmQ0NWZmM2IxMWY5ZDdhYWI2OTkwY2MxZWU5MTk0ZmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-08T18:08:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-12T17:20:53Z"}, "message": "rustc_trans: avoid a separate entry BB if START_BLOCK has no backedges.", "tree": {"sha": "cb74473c36b321bf40f13dc1cfd3464ea7790455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb74473c36b321bf40f13dc1cfd3464ea7790455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "html_url": "https://github.com/rust-lang/rust/commit/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "html_url": "https://github.com/rust-lang/rust/commit/cb3c4d022a048d9c4d1306eaacd9b72303f1871a"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "2d1c95114ebd6f46cd8ec92559446793b0f21476", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "patch": "@@ -784,7 +784,8 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n     };\n \n     debug!(\"compile_unit_metadata: {:?}\", compile_unit_name);\n-    let producer = format!(\"rustc version {}\",\n+    // FIXME(#41252) Remove \"clang LLVM\" if we can get GDB and LLVM to play nice.\n+    let producer = format!(\"clang LLVM (rustc version {})\",\n                            (option_env!(\"CFG_VERSION\")).expect(\"CFG_VERSION\"));\n \n     let compile_unit_name = compile_unit_name.as_ptr();"}, {"sha": "3d8c5085462a8c55150feca10016cb3db3dccfe2", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "patch": "@@ -195,15 +195,17 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     debug!(\"fn_ty: {:?}\", fn_ty);\n     let debug_context =\n         debuginfo::create_function_debug_context(ccx, instance, sig, llfn, mir);\n-    let bcx = Builder::new_block(ccx, llfn, \"entry-block\");\n+    let bcx = Builder::new_block(ccx, llfn, \"start\");\n \n     let cleanup_kinds = analyze::cleanup_kinds(&mir);\n \n-    // Allocate a `Block` for every basic block\n+    // Allocate a `Block` for every basic block, except\n+    // the start block, if nothing loops back to it.\n+    let reentrant_start_block = !mir.predecessors_for(mir::START_BLOCK).is_empty();\n     let block_bcxs: IndexVec<mir::BasicBlock, BasicBlockRef> =\n         mir.basic_blocks().indices().map(|bb| {\n-            if bb == mir::START_BLOCK {\n-                bcx.build_sibling_block(\"start\").llbb()\n+            if bb == mir::START_BLOCK && !reentrant_start_block {\n+                bcx.llbb()\n             } else {\n                 bcx.build_sibling_block(&format!(\"{:?}\", bb)).llbb()\n             }\n@@ -289,9 +291,10 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n             .collect()\n     };\n \n-    // Branch to the START block\n-    let start_bcx = mircx.blocks[mir::START_BLOCK];\n-    bcx.br(start_bcx);\n+    // Branch to the START block, if it's not the entry block.\n+    if reentrant_start_block {\n+        bcx.br(mircx.blocks[mir::START_BLOCK]);\n+    }\n \n     // Up until here, IR instructions for this function have explicitly not been annotated with\n     // source code location, so we don't step into call setup code. From here on, source location"}, {"sha": "9883ca6b35d0497b297afff0da37e0f73582dd10", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=9b5c577dbd45ff3b11f9d7aab6990cc1ee9194fb", "patch": "@@ -20,25 +20,28 @@\n #[no_mangle]\n #[naked]\n fn naked_empty() {\n-    // CHECK: ret void\n+    // CHECK-NEXT: {{.+}}:\n+    // CHECK-NEXT: ret void\n }\n \n // CHECK: Function Attrs: naked uwtable\n #[no_mangle]\n #[naked]\n // CHECK-NEXT: define internal void @naked_with_args(i{{[0-9]+}})\n fn naked_with_args(a: isize) {\n-    // CHECK: %a = alloca i{{[0-9]+}}\n-    // CHECK: ret void\n+    // CHECK-NEXT: {{.+}}:\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n+    // CHECK: ret void\n }\n \n // CHECK: Function Attrs: naked uwtable\n // CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_return()\n #[no_mangle]\n #[naked]\n fn naked_with_return() -> isize {\n-    // CHECK: ret i{{[0-9]+}} 0\n+    // CHECK-NEXT: {{.+}}:\n+    // CHECK-NEXT: ret i{{[0-9]+}} 0\n     0\n }\n \n@@ -47,9 +50,10 @@ fn naked_with_return() -> isize {\n #[no_mangle]\n #[naked]\n fn naked_with_args_and_return(a: isize) -> isize {\n-    // CHECK: %a = alloca i{{[0-9]+}}\n-    // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n+    // CHECK-NEXT: {{.+}}:\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n+    // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n     a\n }\n \n@@ -58,14 +62,37 @@ fn naked_with_args_and_return(a: isize) -> isize {\n #[no_mangle]\n #[naked]\n fn naked_recursive() {\n-    // CHECK: call void @naked_empty()\n+    // CHECK-NEXT: {{.+}}:\n+    // CHECK-NEXT: call void @naked_empty()\n+\n+    // FIXME(#39685) Avoid one block per call.\n+    // CHECK-NEXT: br label %bb1\n+    // CHECK: bb1:\n+\n     naked_empty();\n-    // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n+\n+    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n+\n+    // FIXME(#39685) Avoid one block per call.\n+    // CHECK-NEXT: br label %bb2\n+    // CHECK: bb2:\n+\n+    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n+\n+    // FIXME(#39685) Avoid one block per call.\n+    // CHECK-NEXT: br label %bb3\n+    // CHECK: bb3:\n+\n+    // CHECK-NEXT: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n+\n+    // FIXME(#39685) Avoid one block per call.\n+    // CHECK-NEXT: br label %bb4\n+    // CHECK: bb4:\n+\n     naked_with_args(\n-        // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n         naked_with_args_and_return(\n-            // CHECK: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n             naked_with_return()\n         )\n     );\n+    // CHECK-NEXT: ret void\n }"}]}