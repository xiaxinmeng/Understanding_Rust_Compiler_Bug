{"sha": "56071f68795f91ee8b617b6a20fc22675b53eafc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MDcxZjY4Nzk1ZjkxZWU4YjYxN2I2YTIwZmMyMjY3NWI1M2VhZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T00:19:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-17T00:19:43Z"}, "message": "Auto merge of #43055 - est31:stabilize_float_bits_conv, r=sfackler\n\nStabilize float_bits_conv for Rust 1.21\n\nStabilizes the `float_bits_conv` lib feature for the 1.20 release of Rust. I've initially implemented the feature in #39271 and later made PR #43025 to output quiet NaNs even on platforms with different encodings, which seems to have been the only unresolved issue of the API.\n\nDue to PR #43025 being only applied to master this stabilisation can't happen for Rust 1.19 through the usual \"stabilisation on beta\" system that is being done for library APIs.\n\nr? @BurntSushi\n\ncloses #40470.", "tree": {"sha": "b20209b85f5c095a78a3fa3fc0919af0487fcdb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20209b85f5c095a78a3fa3fc0919af0487fcdb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56071f68795f91ee8b617b6a20fc22675b53eafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56071f68795f91ee8b617b6a20fc22675b53eafc", "html_url": "https://github.com/rust-lang/rust/commit/56071f68795f91ee8b617b6a20fc22675b53eafc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56071f68795f91ee8b617b6a20fc22675b53eafc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc", "html_url": "https://github.com/rust-lang/rust/commit/8f1339af2e5d1b33ec9ee3c8a3c531bcd61770fc"}, {"sha": "010dea13eebfe0a7e2dce580d75f0f84325ed327", "url": "https://api.github.com/repos/rust-lang/rust/commits/010dea13eebfe0a7e2dce580d75f0f84325ed327", "html_url": "https://github.com/rust-lang/rust/commit/010dea13eebfe0a7e2dce580d75f0f84325ed327"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "9bacfee05538584a8953712e0ed46be5dae50b7c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=56071f68795f91ee8b617b6a20fc22675b53eafc", "patch": "@@ -1090,12 +1090,11 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_bits_conv)]\n     /// assert_ne!((1f32).to_bits(), 1f32 as u32); // to_bits() is not casting!\n     /// assert_eq!((12.5f32).to_bits(), 0x41480000);\n     ///\n     /// ```\n-    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u32 {\n         unsafe { ::mem::transmute(self) }\n@@ -1118,7 +1117,6 @@ impl f32 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_bits_conv)]\n     /// use std::f32;\n     /// let v = f32::from_bits(0x41480000);\n     /// let difference = (v - 12.5).abs();\n@@ -1127,7 +1125,7 @@ impl f32 {\n     /// let snan = 0x7F800001;\n     /// assert_ne!(f32::from_bits(snan).to_bits(), snan);\n     /// ```\n-    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n     #[inline]\n     pub fn from_bits(mut v: u32) -> Self {\n         const EXP_MASK: u32   = 0x7F800000;"}, {"sha": "5236048ade43f6d597337074fbd36f73b1bbb9b1", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=56071f68795f91ee8b617b6a20fc22675b53eafc", "patch": "@@ -1005,12 +1005,11 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_bits_conv)]\n     /// assert!((1f64).to_bits() != 1f64 as u64); // to_bits() is not casting!\n     /// assert_eq!((12.5f64).to_bits(), 0x4029000000000000);\n     ///\n     /// ```\n-    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n     #[inline]\n     pub fn to_bits(self) -> u64 {\n         unsafe { ::mem::transmute(self) }\n@@ -1033,7 +1032,6 @@ impl f64 {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(float_bits_conv)]\n     /// use std::f64;\n     /// let v = f64::from_bits(0x4029000000000000);\n     /// let difference = (v - 12.5).abs();\n@@ -1042,7 +1040,7 @@ impl f64 {\n     /// let snan = 0x7FF0000000000001;\n     /// assert_ne!(f64::from_bits(snan).to_bits(), snan);\n     /// ```\n-    #[unstable(feature = \"float_bits_conv\", reason = \"recently added\", issue = \"40470\")]\n+    #[stable(feature = \"float_bits_conv\", since = \"1.21.0\")]\n     #[inline]\n     pub fn from_bits(mut v: u64) -> Self {\n         const EXP_MASK: u64   = 0x7FF0000000000000;"}, {"sha": "a012f2f42c19c348e606bf8c52a9cdc59ef22f2e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56071f68795f91ee8b617b6a20fc22675b53eafc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=56071f68795f91ee8b617b6a20fc22675b53eafc", "patch": "@@ -317,7 +317,6 @@\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![cfg_attr(test, feature(update_panic_count))]\n-#![cfg_attr(test, feature(float_bits_conv))]\n \n #![cfg_attr(not(stage0), default_lib_allocator)]\n #![cfg_attr(stage0, feature(associated_consts))]"}]}