{"sha": "cf0b6b93373509f6aa9f5828f700669653c60425", "node_id": "C_kwDOAAsO6NoAKGNmMGI2YjkzMzczNTA5ZjZhYTlmNTgyOGY3MDA2Njk2NTNjNjA0MjU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-09T21:01:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:06:15Z"}, "message": "Account for dereference expressions", "tree": {"sha": "72eccf5c84e2d689acb11afe05f4449dce1c1065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72eccf5c84e2d689acb11afe05f4449dce1c1065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0b6b93373509f6aa9f5828f700669653c60425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b6b93373509f6aa9f5828f700669653c60425", "html_url": "https://github.com/rust-lang/rust/commit/cf0b6b93373509f6aa9f5828f700669653c60425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b6b93373509f6aa9f5828f700669653c60425/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bd1d0826b8f792eccb97a6560d002832bff562", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bd1d0826b8f792eccb97a6560d002832bff562", "html_url": "https://github.com/rust-lang/rust/commit/b8bd1d0826b8f792eccb97a6560d002832bff562"}], "stats": {"total": 348, "additions": 208, "deletions": 140}, "files": [{"sha": "6db3c858ae7149b9a138dbd77c7813c3eeea298e", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -410,13 +410,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn add_move_hints(&self, error: GroupedMoveError<'tcx>, err: &mut Diagnostic, span: Span) {\n         match error {\n             GroupedMoveError::MovesFromPlace { mut binds_to, move_from, .. } => {\n-                err.span_suggestion_verbose(\n-                    span.shrink_to_lo(),\n-                    \"consider borrowing here\",\n-                    \"&\".to_string(),\n-                    Applicability::Unspecified,\n-                );\n-\n+                self.add_borrow_suggestions(err, span);\n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n                     let place_desc = match self.describe_place(move_from.as_ref()) {\n@@ -459,6 +453,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn add_borrow_suggestions(&self, err: &mut Diagnostic, span: Span) {\n+        match self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+            Ok(snippet) if snippet.starts_with('*') => {\n+                err.span_suggestion_verbose(\n+                    span.with_hi(span.lo() + BytePos(1)),\n+                    \"consider removing the dereference here\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            _ => {\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_lo(),\n+                    \"consider borrowing here\",\n+                    \"&\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+\n     fn add_move_error_suggestions(&self, err: &mut Diagnostic, binds_to: &[Local]) {\n         let mut suggestions: Vec<(Span, String, String)> = Vec::new();\n         for local in binds_to {"}, {"sha": "abee72ba8cf97cb1ed9d5ca73462a894368d393b", "filename": "src/test/ui/borrowck/access-mode-in-closures.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -7,10 +7,11 @@ LL |         match *s { S(v) => v }\n    |                      data moved here\n    |                      move occurs because `v` has type `Vec<isize>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -         match *s { S(v) => v }\n+LL +         match s { S(v) => v }\n    |\n-LL |         match &*s { S(v) => v }\n-   |               +\n \n error: aborting due to previous error\n "}, {"sha": "625e7c3cad590c668d6bfb80ebbbd4a9eb8b4c95", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.fixed?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+fn main() {\n+\n+    let x: Option<Box<_>> = Some(Box::new(1));\n+\n+    match x {\n+      Some(ref y) => {\n+        let _b = y; //~ ERROR cannot move out\n+      }\n+      _ => {}\n+    }\n+}"}, {"sha": "f79a846e70e7bcc9448267766c5050853ab43e20", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.rs?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n \n     let x: Option<Box<_>> = Some(Box::new(1));"}, {"sha": "850bb9ae3930c87c80ed595f8e22ae5789262c9f", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -1,13 +1,14 @@\n error[E0507]: cannot move out of `*y` which is behind a shared reference\n-  --> $DIR/borrowck-issue-2657-2.rs:7:18\n+  --> $DIR/borrowck-issue-2657-2.rs:8:18\n    |\n LL |         let _b = *y;\n    |                  ^^ move occurs because `*y` has type `Box<i32>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -         let _b = *y;\n+LL +         let _b = y;\n    |\n-LL |         let _b = &*y;\n-   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "cf6c382a692b263c089d6b6c42dcfb8e4518bc5f", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -10,7 +10,7 @@ enum Foo {\n \n fn blah() {\n     let f = &Foo::Foo1(Box::new(1), Box::new(2));\n-    match &*f { //~ ERROR cannot move out of\n+    match f { //~ ERROR cannot move out of\n         Foo::Foo1(num1,\n                   num2) => (),\n         Foo::Foo2(num) => (),"}, {"sha": "722c2c1443a7fd6d4a74d04f1920b44f1052c79c", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -11,10 +11,11 @@ LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *f {\n+LL +     match f {\n    |\n-LL |     match &*f {\n-   |           +\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:30:11"}, {"sha": "43fc102bd6256c90ea6a650670e487b1e0c49b60", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,10 +4,11 @@ error[E0507]: cannot move out of `*x` which is behind a raw pointer\n LL |     let y = *x;\n    |             ^^ move occurs because `*x` has type `Box<isize>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let y = *x;\n+LL +     let y = x;\n    |\n-LL |     let y = &*x;\n-   |             +\n \n error: aborting due to previous error\n "}, {"sha": "599fa1e88dfecdd4dfd882aa6a31f94091c48ed6", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,10 +4,11 @@ error[E0507]: cannot move out of an `Rc`\n LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let _x = *Rc::new(\"hi\".to_string());\n+LL +     let _x = Rc::new(\"hi\".to_string());\n    |\n-LL |     let _x = &*Rc::new(\"hi\".to_string());\n-   |              +\n \n error: aborting due to previous error\n "}, {"sha": "215bf0100636949a6eda04a58eec81bdaab2dd8f", "filename": "src/test/ui/borrowck/issue-20801.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-20801.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,43 +4,47 @@ error[E0507]: cannot move out of a mutable reference\n LL |     let a = unsafe { *mut_ref() };\n    |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let a = unsafe { *mut_ref() };\n+LL +     let a = unsafe { mut_ref() };\n    |\n-LL |     let a = unsafe { &*mut_ref() };\n-   |                      +\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/issue-20801.rs:29:22\n    |\n LL |     let b = unsafe { *imm_ref() };\n    |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let b = unsafe { *imm_ref() };\n+LL +     let b = unsafe { imm_ref() };\n    |\n-LL |     let b = unsafe { &*imm_ref() };\n-   |                      +\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:32:22\n    |\n LL |     let c = unsafe { *mut_ptr() };\n    |                      ^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let c = unsafe { *mut_ptr() };\n+LL +     let c = unsafe { mut_ptr() };\n    |\n-LL |     let c = unsafe { &*mut_ptr() };\n-   |                      +\n \n error[E0507]: cannot move out of a raw pointer\n   --> $DIR/issue-20801.rs:35:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n    |                      ^^^^^^^^^^^^ move occurs because value has type `T`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let d = unsafe { *const_ptr() };\n+LL +     let d = unsafe { const_ptr() };\n    |\n-LL |     let d = unsafe { &*const_ptr() };\n-   |                      +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "99c63e4db50d3edbeff290d2a2a503b9b3f80cae", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,10 +4,11 @@ error[E0507]: cannot move out of `*array` which is behind a shared reference\n LL |             *array\n    |             ^^^^^^ move occurs because `*array` has type `Vec<Value>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -             *array\n+LL +             array\n    |\n-LL |             &*array\n-   |             +\n \n error: aborting due to previous error\n "}, {"sha": "26d4996d6cb1d7dc18b578eab8071f9fca446abf", "filename": "src/test/ui/moves/move-out-of-array-ref.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -7,10 +7,11 @@ LL |     let [_, e, _, _] = *a;\n    |             data moved here\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, e, _, _] = *a;\n+LL +     let [_, e, _, _] = a;\n    |\n-LL |     let [_, e, _, _] = &*a;\n-   |                        +\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:13:27\n@@ -21,10 +22,11 @@ LL |     let [_, s @ .. , _] = *a;\n    |             data moved here\n    |             move occurs because `s` has type `[D; 2]`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, s @ .. , _] = *a;\n+LL +     let [_, s @ .. , _] = a;\n    |\n-LL |     let [_, s @ .. , _] = &*a;\n-   |                           +\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:18:24\n@@ -35,10 +37,11 @@ LL |     let [_, e, _, _] = *a;\n    |             data moved here\n    |             move occurs because `e` has type `D`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, e, _, _] = *a;\n+LL +     let [_, e, _, _] = a;\n    |\n-LL |     let [_, e, _, _] = &*a;\n-   |                        +\n \n error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:23:27\n@@ -49,10 +52,11 @@ LL |     let [_, s @ .. , _] = *a;\n    |             data moved here\n    |             move occurs because `s` has type `[D; 2]`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let [_, s @ .. , _] = *a;\n+LL +     let [_, s @ .. , _] = a;\n    |\n-LL |     let [_, s @ .. , _] = &*a;\n-   |                           +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0dc5c08ea5f08d76ffe34d4b550e0075a836e91b", "filename": "src/test/ui/nll/cannot-move-block-spans.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,32 +4,35 @@ error[E0507]: cannot move out of `*r` which is behind a shared reference\n LL |     let x = { *r };\n    |               ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = { *r };\n+LL +     let x = { r };\n    |\n-LL |     let x = { &*r };\n-   |               +\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:6:22\n    |\n LL |     let y = unsafe { *r };\n    |                      ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let y = unsafe { *r };\n+LL +     let y = unsafe { r };\n    |\n-LL |     let y = unsafe { &*r };\n-   |                      +\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:7:26\n    |\n LL |     let z = loop { break *r; };\n    |                          ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let z = loop { break *r; };\n+LL +     let z = loop { break r; };\n    |\n-LL |     let z = loop { break &*r; };\n-   |                          +\n \n error[E0508]: cannot move out of type `[String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:11:15\n@@ -79,32 +82,35 @@ error[E0507]: cannot move out of `*r` which is behind a shared reference\n LL |     let x = { let mut u = 0; u += 1; *r };\n    |                                      ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = { let mut u = 0; u += 1; *r };\n+LL +     let x = { let mut u = 0; u += 1; r };\n    |\n-LL |     let x = { let mut u = 0; u += 1; &*r };\n-   |                                      +\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:18:45\n    |\n LL |     let y = unsafe { let mut u = 0; u += 1; *r };\n    |                                             ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let y = unsafe { let mut u = 0; u += 1; *r };\n+LL +     let y = unsafe { let mut u = 0; u += 1; r };\n    |\n-LL |     let y = unsafe { let mut u = 0; u += 1; &*r };\n-   |                                             +\n \n error[E0507]: cannot move out of `*r` which is behind a shared reference\n   --> $DIR/cannot-move-block-spans.rs:19:49\n    |\n LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n    |                                                 ^^ move occurs because `*r` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let z = loop { let mut u = 0; u += 1; break *r; u += 2; };\n+LL +     let z = loop { let mut u = 0; u += 1; break r; u += 2; };\n    |\n-LL |     let z = loop { let mut u = 0; u += 1; break &*r; u += 2; };\n-   |                                                 +\n \n error: aborting due to 9 previous errors\n "}, {"sha": "58b8aa31d4c2d26c5c140de80b8c1d6ca28fb192", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,10 +4,11 @@ error[E0507]: cannot move out of `*a` which is behind a shared reference\n LL |     let b = *a;\n    |             ^^ move occurs because `*a` has type `A`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let b = *a;\n+LL +     let b = a;\n    |\n-LL |     let b = &*a;\n-   |             +\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:12:13\n@@ -29,21 +30,23 @@ error[E0507]: cannot move out of `**r` which is behind a shared reference\n LL |     let s = **r;\n    |             ^^^ move occurs because `**r` has type `A`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let s = **r;\n+LL +     let s = *r;\n    |\n-LL |     let s = &**r;\n-   |             +\n \n error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:27:13\n    |\n LL |     let s = *r;\n    |             ^^ move occurs because value has type `A`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let s = *r;\n+LL +     let s = r;\n    |\n-LL |     let s = &*r;\n-   |             +\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array\n   --> $DIR/move-errors.rs:32:13\n@@ -68,10 +71,11 @@ LL |     let A(s) = *a;\n    |           data moved here\n    |           move occurs because `s` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let A(s) = *a;\n+LL +     let A(s) = a;\n    |\n-LL |     let A(s) = &*a;\n-   |                +\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:44:19\n@@ -194,10 +198,11 @@ LL |         Ok(s) | Err(s) => (),\n    |            data moved here\n    |            move occurs because `s` has type `String`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *x {\n+LL +     match x {\n    |\n-LL |     match &*x {\n-   |           +\n \n error: aborting due to 14 previous errors\n "}, {"sha": "8c5d0b9609627f04d183d7223c52d5bb7006d4b0", "filename": "src/test/ui/std-uncopyable-atomics.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -4,43 +4,47 @@ error[E0507]: cannot move out of a shared reference\n LL |     let x = *&x;\n    |             ^^^ move occurs because value has type `std::sync::atomic::AtomicBool`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n    |\n-LL |     let x = &*&x;\n-   |             +\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:11:13\n    |\n LL |     let x = *&x;\n    |             ^^^ move occurs because value has type `std::sync::atomic::AtomicIsize`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n    |\n-LL |     let x = &*&x;\n-   |             +\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:13:13\n    |\n LL |     let x = *&x;\n    |             ^^^ move occurs because value has type `std::sync::atomic::AtomicUsize`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n    |\n-LL |     let x = &*&x;\n-   |             +\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/std-uncopyable-atomics.rs:15:13\n    |\n LL |     let x = *&x;\n    |             ^^^ move occurs because value has type `std::sync::atomic::AtomicPtr<usize>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let x = *&x;\n+LL +     let x = &x;\n    |\n-LL |     let x = &*&x;\n-   |             +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1e40e60a1ce12c4785d17e5b7c61ee5dc3fa5b52", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -37,52 +37,52 @@ pub fn main() {\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     if let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     while let Either::One(_t) = *r { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n+        //~| HELP consider removing the dereference here\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *r {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n \n     let X(_t) = *sm;\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     if let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     while let Either::One(_t) = *rm { }\n     //~^ ERROR cannot move\n-    //~| HELP consider borrowing here\n+    //~| HELP consider removing the dereference here\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n+        //~| HELP consider removing the dereference here\n         Either::One(_t)\n         | Either::Two(_t) => (),\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref _t) => (),\n         // FIXME: should suggest removing `ref` too\n     }\n     match *rm {\n         //~^ ERROR cannot move\n-        //~| HELP consider borrowing here\n+        //~| HELP consider removing the dereference here\n         Either::One(_t) => (),\n         Either::Two(ref mut _t) => (),\n         // FIXME: should suggest removing `ref` too"}, {"sha": "5263265242318f13d4a9cfe85abda0446f15424b", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf0b6b93373509f6aa9f5828f700669653c60425/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=cf0b6b93373509f6aa9f5828f700669653c60425", "patch": "@@ -7,10 +7,11 @@ LL |     let X(_t) = *s;\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let X(_t) = *s;\n+LL +     let X(_t) = s;\n    |\n-LL |     let X(_t) = &*s;\n-   |                 +\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:41:30\n@@ -21,10 +22,11 @@ LL |     if let Either::One(_t) = *r { }\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     if let Either::One(_t) = *r { }\n+LL +     if let Either::One(_t) = r { }\n    |\n-LL |     if let Either::One(_t) = &*r { }\n-   |                              +\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:44:33\n@@ -35,10 +37,11 @@ LL |     while let Either::One(_t) = *r { }\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     while let Either::One(_t) = *r { }\n+LL +     while let Either::One(_t) = r { }\n    |\n-LL |     while let Either::One(_t) = &*r { }\n-   |                                 +\n \n error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference\n   --> $DIR/simple.rs:47:11\n@@ -52,10 +55,11 @@ LL |         Either::One(_t)\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *r {\n+LL +     match r {\n    |\n-LL |     match &*r {\n-   |           +\n \n error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:53:11\n@@ -69,10 +73,11 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *r {\n+LL +     match r {\n    |\n-LL |     match &*r {\n-   |           +\n \n error[E0507]: cannot move out of `sm` which is behind a mutable reference\n   --> $DIR/simple.rs:61:17\n@@ -83,10 +88,11 @@ LL |     let X(_t) = *sm;\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     let X(_t) = *sm;\n+LL +     let X(_t) = sm;\n    |\n-LL |     let X(_t) = &*sm;\n-   |                 +\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:64:30\n@@ -97,10 +103,11 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     if let Either::One(_t) = *rm { }\n+LL +     if let Either::One(_t) = rm { }\n    |\n-LL |     if let Either::One(_t) = &*rm { }\n-   |                              +\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:67:33\n@@ -111,10 +118,11 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     while let Either::One(_t) = *rm { }\n+LL +     while let Either::One(_t) = rm { }\n    |\n-LL |     while let Either::One(_t) = &*rm { }\n-   |                                 +\n \n error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference\n   --> $DIR/simple.rs:70:11\n@@ -128,10 +136,11 @@ LL |         Either::One(_t)\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n    |\n-LL |     match &*rm {\n-   |           +\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:76:11\n@@ -145,10 +154,11 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n    |\n-LL |     match &*rm {\n-   |           +\n \n error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:83:11\n@@ -162,10 +172,11 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing here\n+help: consider removing the dereference here\n+   |\n+LL -     match *rm {\n+LL +     match rm {\n    |\n-LL |     match &*rm {\n-   |           +\n \n error[E0507]: cannot move out of index of `Vec<X>`\n   --> $DIR/simple.rs:91:17"}]}