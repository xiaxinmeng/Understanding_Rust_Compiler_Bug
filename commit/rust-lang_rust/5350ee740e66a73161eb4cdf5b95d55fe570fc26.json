{"sha": "5350ee740e66a73161eb4cdf5b95d55fe570fc26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNTBlZTc0MGU2NmE3MzE2MWViNGNkZjViOTVkNTVmZTU3MGZjMjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-07T00:48:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-08T07:51:37Z"}, "message": "rustc: De-indent portions of middle::resolve\n\nIt's a little prettier to look at now", "tree": {"sha": "42b25faa627d8b3bf47e4324e140c48ecd4ee227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b25faa627d8b3bf47e4324e140c48ecd4ee227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5350ee740e66a73161eb4cdf5b95d55fe570fc26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5350ee740e66a73161eb4cdf5b95d55fe570fc26", "html_url": "https://github.com/rust-lang/rust/commit/5350ee740e66a73161eb4cdf5b95d55fe570fc26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5350ee740e66a73161eb4cdf5b95d55fe570fc26/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4804acaca044782e65646e76f3f765d97c74615", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4804acaca044782e65646e76f3f765d97c74615", "html_url": "https://github.com/rust-lang/rust/commit/e4804acaca044782e65646e76f3f765d97c74615"}], "stats": {"total": 82, "additions": 26, "deletions": 56}, "files": [{"sha": "e4d816b91bd2536f9f65adae70d11b8be4277381", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 56, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5350ee740e66a73161eb4cdf5b95d55fe570fc26/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5350ee740e66a73161eb4cdf5b95d55fe570fc26/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5350ee740e66a73161eb4cdf5b95d55fe570fc26", "patch": "@@ -5408,8 +5408,7 @@ impl Resolver {\n         }\n     }\n \n-    fn search_for_traits_containing_method(&mut self, name: Ident)\n-                                               -> ~[DefId] {\n+    fn search_for_traits_containing_method(&mut self, name: Ident) -> ~[DefId] {\n         debug!(\"(searching for traits containing method) looking for '{}'\",\n                self.session.str_of(name));\n \n@@ -5438,70 +5437,41 @@ impl Resolver {\n                 self.populate_module_if_necessary(search_module);\n \n                 let children = search_module.children.borrow();\n-                for (_, &child_name_bindings) in children.get().iter() {\n-                    match child_name_bindings.def_for_namespace(TypeNS) {\n-                        Some(def) => {\n-                            match def {\n-                                DefTrait(trait_def_id) => {\n-                                    if candidate_traits.contains(&trait_def_id) {\n-                                        self.add_trait_info(\n-                                            &mut found_traits,\n-                                            trait_def_id, name);\n-                                    }\n-                                }\n-                                _ => {\n-                                    // Continue.\n-                                }\n-                            }\n-                        }\n-                        None => {\n-                            // Continue.\n-                        }\n+                for (_, &child_names) in children.get().iter() {\n+                    let def = match child_names.def_for_namespace(TypeNS) {\n+                        Some(def) => def,\n+                        None => continue\n+                    };\n+                    let trait_def_id = match def {\n+                        DefTrait(trait_def_id) => trait_def_id,\n+                        _ => continue,\n+                    };\n+                    if candidate_traits.contains(&trait_def_id) {\n+                        self.add_trait_info(&mut found_traits, trait_def_id,\n+                                            name);\n                     }\n                 }\n \n                 // Look for imports.\n                 let import_resolutions = search_module.import_resolutions\n                                                       .borrow();\n-                for (_, &import_resolution) in import_resolutions.get()\n-                                                                 .iter() {\n-                    match import_resolution.target_for_namespace(TypeNS) {\n-                        None => {\n-                            // Continue.\n-                        }\n-                        Some(target) => {\n-                            match target.bindings.def_for_namespace(TypeNS) {\n-                                Some(def) => {\n-                                    match def {\n-                                        DefTrait(trait_def_id) => {\n-                                            if candidate_traits.contains(&trait_def_id) {\n-                                                self.add_trait_info(\n-                                                    &mut found_traits,\n-                                                    trait_def_id, name);\n-                                                self.used_imports.insert(\n-                                                    import_resolution.type_id\n-                                                                     .get());\n-                                            }\n-                                        }\n-                                        _ => {\n-                                            // Continue.\n-                                        }\n-                                    }\n-                                }\n-                                None => {\n-                                    // Continue.\n-                                }\n-                            }\n-                        }\n+                for (_, &import) in import_resolutions.get().iter() {\n+                    let target = match import.target_for_namespace(TypeNS) {\n+                        None => continue,\n+                        Some(target) => target,\n+                    };\n+                    let did = match target.bindings.def_for_namespace(TypeNS) {\n+                        Some(DefTrait(trait_def_id)) => trait_def_id,\n+                        Some(..) | None => continue,\n+                    };\n+                    if candidate_traits.contains(&did) {\n+                        self.add_trait_info(&mut found_traits, did, name);\n+                        self.used_imports.insert(import.type_id.get());\n                     }\n                 }\n \n-                // Move to the next parent.\n                 match search_module.parent_link {\n-                    NoParentLink | ModuleParentLink(..) => {\n-                        // Done.\n-                        break;\n-                    }\n+                    NoParentLink | ModuleParentLink(..) => break,\n                     BlockParentLink(parent_module, _) => {\n                         search_module = parent_module;\n                     }"}]}