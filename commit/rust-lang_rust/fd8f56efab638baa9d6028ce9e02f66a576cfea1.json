{"sha": "fd8f56efab638baa9d6028ce9e02f66a576cfea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOGY1NmVmYWI2MzhiYWE5ZDYwMjhjZTllMDJmNjZhNTc2Y2ZlYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-03T12:24:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-05T10:00:54Z"}, "message": "Link lifetimes of autoslice'd vectors (Issue #3184)\n\nFixes #5739.", "tree": {"sha": "dab486dda69b0832f23d2af1a7665618faf7cb52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab486dda69b0832f23d2af1a7665618faf7cb52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8f56efab638baa9d6028ce9e02f66a576cfea1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8f56efab638baa9d6028ce9e02f66a576cfea1", "html_url": "https://github.com/rust-lang/rust/commit/fd8f56efab638baa9d6028ce9e02f66a576cfea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8f56efab638baa9d6028ce9e02f66a576cfea1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13801f60b26009991cd6880b6b40fae9265a8280", "url": "https://api.github.com/repos/rust-lang/rust/commits/13801f60b26009991cd6880b6b40fae9265a8280", "html_url": "https://github.com/rust-lang/rust/commit/13801f60b26009991cd6880b6b40fae9265a8280"}], "stats": {"total": 107, "additions": 97, "deletions": 10}, "files": [{"sha": "c29029de351e334dae4af4bf265961a83439e4d8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fd8f56efab638baa9d6028ce9e02f66a576cfea1", "patch": "@@ -197,13 +197,13 @@ pub enum AutoRefKind {\n     /// Convert from T to &T\n     AutoPtr,\n \n-    /// Convert from @[]/~[] to &[] (or str)\n+    /// Convert from @[]/~[]/&[] to &[] (or str)\n     AutoBorrowVec,\n \n-    /// Convert from @[]/~[] to &&[] (or str)\n+    /// Convert from @[]/~[]/&[] to &&[] (or str)\n     AutoBorrowVecRef,\n \n-    /// Convert from @fn()/~fn() to &fn()\n+    /// Convert from @fn()/~fn()/&fn() to &fn()\n     AutoBorrowFn\n }\n "}, {"sha": "833dbff89a0fc9aa8d3c8a9ca9f7aea9daab1e5c", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=fd8f56efab638baa9d6028ce9e02f66a576cfea1", "patch": "@@ -494,8 +494,8 @@ pub mod guarantor {\n      * inferencer would not know of this dependency and thus it might\n      * infer the lifetime of L2 to be greater than L1 (issue #3148).\n      *\n-     * There are a number of troublesome scenarios in the test\n-     * `region-dependent-addr-of.rs`, but here is one example:\n+     * There are a number of troublesome scenarios in the tests\n+     * `region-dependent-*.rs`, but here is one example:\n      *\n      *     struct Foo { i: int }\n      *     struct Bar { foo: Foo  }\n@@ -583,8 +583,35 @@ pub mod guarantor {\n         let mut expr_ct = categorize_unadjusted(rcx, expr);\n         expr_ct = apply_autoderefs(\n             rcx, expr, autoderefs, expr_ct);\n-        for expr_ct.cat.guarantor.each |g| {\n-            infallibly_mk_subr(rcx, true, expr.span, autoref.region, *g);\n+\n+        match autoref.kind {\n+            ty::AutoPtr => {\n+                // In this case, we are implicitly adding an `&`.\n+                maybe_make_subregion(rcx, expr, autoref.region,\n+                                     expr_ct.cat.guarantor);\n+            }\n+\n+            ty::AutoBorrowVec |\n+            ty::AutoBorrowVecRef |\n+            ty::AutoBorrowFn => {\n+                // In each of these cases, what is being borrowed is\n+                // not the (autoderef'd) expr itself but rather the\n+                // contents of the autoderef'd expression (i.e., what\n+                // the pointer points at).\n+                maybe_make_subregion(rcx, expr, autoref.region,\n+                                     guarantor_of_deref(&expr_ct.cat));\n+            }\n+        }\n+\n+        fn maybe_make_subregion(\n+            rcx: @mut Rcx,\n+            expr: @ast::expr,\n+            sub_region: ty::Region,\n+            sup_region: Option<ty::Region>)\n+        {\n+            for sup_region.each |r| {\n+                infallibly_mk_subr(rcx, true, expr.span, sub_region, *r);\n+            }\n         }\n     }\n \n@@ -813,19 +840,31 @@ pub mod guarantor {\n \n     fn pointer_categorize(ty: ty::t) -> PointerCategorization {\n         match ty::get(ty).sty {\n-            ty::ty_rptr(r, _) | ty::ty_evec(_, ty::vstore_slice(r)) |\n+            ty::ty_rptr(r, _) |\n+            ty::ty_evec(_, ty::vstore_slice(r)) |\n             ty::ty_estr(ty::vstore_slice(r)) => {\n                 BorrowedPointer(r)\n             }\n-            ty::ty_uniq(*) | ty::ty_estr(ty::vstore_uniq) |\n+            ty::ty_uniq(*) |\n+            ty::ty_estr(ty::vstore_uniq) |\n             ty::ty_evec(_, ty::vstore_uniq) => {\n                 OwnedPointer\n             }\n-            ty::ty_box(*) | ty::ty_ptr(*) |\n+            ty::ty_box(*) |\n+            ty::ty_ptr(*) |\n             ty::ty_evec(_, ty::vstore_box) |\n             ty::ty_estr(ty::vstore_box) => {\n                 OtherPointer\n             }\n+            ty::ty_closure(ref closure_ty) => {\n+                match closure_ty.sigil {\n+                    ast::BorrowedSigil => BorrowedPointer(closure_ty.region),\n+                    ast::OwnedSigil => OwnedPointer,\n+\n+                    // NOTE This is...not quite right.  Deduce a test etc.\n+                    ast::ManagedSigil => OtherPointer,\n+                }\n+            }\n             _ => {\n                 NotPointer\n             }"}, {"sha": "dd33f7f1e309b7b04d82400eeba4311f4171a519", "filename": "src/test/run-pass/region-dependent-addr-of.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-addr-of.rs?ref=fd8f56efab638baa9d6028ce9e02f66a576cfea1", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test lifetimes are linked properly when we create dependent region pointers.\n+// Issue #3148.\n+\n struct A {\n     value: B\n }"}, {"sha": "82d4115d66d9f9d08f9e10488acfed2f13b45506", "filename": "src/test/run-pass/region-dependent-autofn.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs?ref=fd8f56efab638baa9d6028ce9e02f66a576cfea1", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test lifetimes are linked properly when we autoslice a vector.\n+// Issue #3148.\n+\n+fn subslice<'r>(v: &'r fn()) -> &'r fn() { v }\n+\n+fn both<'r>(v: &'r fn()) -> &'r fn() {\n+    subslice(subslice(v))\n+}\n+\n+fn main() {\n+    both(main);\n+}"}, {"sha": "10c2988fc9f26ba091c6ee3cf95758ee22b04b25", "filename": "src/test/run-pass/region-dependent-autoslice.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8f56efab638baa9d6028ce9e02f66a576cfea1/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs?ref=fd8f56efab638baa9d6028ce9e02f66a576cfea1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test lifetimes are linked properly when we autoslice a vector.\n+// Issue #3148.\n+\n+fn subslice1<'r>(v: &'r [uint]) -> &'r [uint] { v }\n+\n+fn both<'r>(v: &'r [uint]) -> &'r [uint] {\n+    subslice1(subslice1(v))\n+}\n+\n+fn main() {\n+    let v = ~[1,2,3];\n+    both(v);\n+}"}]}