{"sha": "c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzFjYTA3MWYyNDJjM2U4NDc3NWJiYTJhMDVhNmM5MjRmNDRiMWU=", "commit": {"author": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-06-14T12:16:13Z"}, "committer": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-06-14T12:16:13Z"}, "message": "Add functions `Duration::try_from_secs_{f32, f64}`\n\nThis also adds the error type used, `FromSecsError` and its `impl`s.", "tree": {"sha": "ff6fd482d6e6e3c92c5a976b39dfb4e4164f050b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6fd482d6e6e3c92c5a976b39dfb4e4164f050b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "html_url": "https://github.com/rust-lang/rust/commit/c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/comments", "author": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c2d1f408bc1b107cbc23df5f83d23208fc1c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c2d1f408bc1b107cbc23df5f83d23208fc1c2e", "html_url": "https://github.com/rust-lang/rust/commit/26c2d1f408bc1b107cbc23df5f83d23208fc1c2e"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "22e8e143986229dbe15981a4aeb0a38a8c55119b", "filename": "library/core/src/time.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "patch": "@@ -697,6 +697,44 @@ impl Duration {\n         }\n     }\n \n+    /// The checked version of [`from_secs_f64`].\n+    ///\n+    /// [`from_secs_f64`]: Duration::from_secs_f64\n+    ///\n+    /// This constructor will return an `Err` if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_checked_float)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::try_from_secs_f64(2.7);\n+    /// assert_eq!(dur, Ok(Duration::new(2, 700_000_000)));\n+    ///\n+    /// let negative = Duration::try_from_secs_f64(-5.0);\n+    /// assert!(negative.is_err());\n+    /// ```\n+    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[inline]\n+    pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, FromSecsError> {\n+        const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f64;\n+        let nanos = secs * (NANOS_PER_SEC as f64);\n+        if !nanos.is_finite() {\n+            Err(FromSecsError { kind: FromSecsErrorKind::NonFinite })\n+        } else if nanos >= MAX_NANOS_F64 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n+        } else if nanos < 0.0 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+        } else {\n+            let nanos = nanos as u128;\n+            Ok(Duration {\n+                secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+                nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            })\n+        }\n+    }\n+\n     /// Creates a new `Duration` from the specified number of seconds represented\n     /// as `f32`.\n     ///\n@@ -732,6 +770,44 @@ impl Duration {\n         }\n     }\n \n+    /// The checked version of [`from_secs_f32`].\n+    ///\n+    /// [`from_secs_f32`]: Duration::from_secs_f32\n+    ///\n+    /// This constructor will return an `Err` if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_checked_float)]\n+    ///\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::try_from_secs_f32(2.7);\n+    /// assert_eq!(dur, Ok(Duration::new(2, 700_000_000)));\n+    ///\n+    /// let negative = Duration::try_from_secs_f32(-5.0);\n+    /// assert!(negative.is_err());\n+    /// ```\n+    #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+    #[inline]\n+    pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, FromSecsError> {\n+        const MAX_NANOS_F32: f32 = ((u64::MAX as u128 + 1) * (NANOS_PER_SEC as u128)) as f32;\n+        let nanos = secs * (NANOS_PER_SEC as f32);\n+        if !nanos.is_finite() {\n+            Err(FromSecsError { kind: FromSecsErrorKind::NonFinite })\n+        } else if nanos >= MAX_NANOS_F32 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Overflow })\n+        } else if nanos < 0.0 {\n+            Err(FromSecsError { kind: FromSecsErrorKind::Underflow })\n+        } else {\n+            let nanos = nanos as u128;\n+            Ok(Duration {\n+                secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+                nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+            })\n+        }\n+    }\n+\n     /// Multiplies `Duration` by `f64`.\n     ///\n     /// # Panics\n@@ -1081,3 +1157,55 @@ impl fmt::Debug for Duration {\n         }\n     }\n }\n+\n+/// An error which can be returned when converting a floating-point value of seconds\n+/// into a [`Duration`].\n+///\n+/// This error is used as the error type for [`Duration::try_from_secs_f32`] and\n+/// [`Duration::try_from_secs_f64`].\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(duration_checked_float)]\n+///\n+/// use std::time::Duration;\n+///\n+/// if let Err(e) = Duration::try_from_secs_f32(-1.0) {\n+///     println!(\"Failed conversion to Duration: {}\", e);\n+/// }\n+/// ```\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+pub struct FromSecsError {\n+    kind: FromSecsErrorKind,\n+}\n+\n+impl FromSecsError {\n+    const fn description(&self) -> &'static str {\n+        match self.kind {\n+            FromSecsErrorKind::NonFinite => {\n+                \"got non-finite value when converting float to duration\"\n+            }\n+            FromSecsErrorKind::Overflow => \"overflow when converting float to duration\",\n+            FromSecsErrorKind::Underflow => \"underflow when converting float to duration\",\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+impl fmt::Display for FromSecsError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self.description(), f)\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum FromSecsErrorKind {\n+    // Value is not a finite value (either infinity or NaN).\n+    NonFinite,\n+    // Value is too large to store in a `Duration`.\n+    Overflow,\n+    // Value is less than `0.0`.\n+    Underflow,\n+}"}, {"sha": "c16660ef92c235d06dd840656db8fc631ca929c2", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "patch": "@@ -529,6 +529,9 @@ impl Error for char::ParseCharError {\n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n impl Error for alloc::collections::TryReserveError {}\n \n+#[unstable(feature = \"duration_checked_float\", issue = \"83400\")]\n+impl Error for core::time::FromSecsError {}\n+\n // Copied from `any.rs`.\n impl dyn Error + 'static {\n     /// Returns `true` if the boxed type is the same as `T`"}, {"sha": "a42d88ef714270c1bda586a77dc7d0cf7630d40e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c1ca071f242c3e84775bba2a05a6c924f44b1e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c2c1ca071f242c3e84775bba2a05a6c924f44b1e", "patch": "@@ -256,6 +256,7 @@\n #![feature(doc_masked)]\n #![feature(doc_spotlight)]\n #![feature(dropck_eyepatch)]\n+#![feature(duration_checked_float)]\n #![feature(duration_constants)]\n #![feature(duration_zero)]\n #![feature(exact_size_is_empty)]"}]}