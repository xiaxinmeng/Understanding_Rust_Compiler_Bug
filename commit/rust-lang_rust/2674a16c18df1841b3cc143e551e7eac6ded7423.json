{"sha": "2674a16c18df1841b3cc143e551e7eac6ded7423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzRhMTZjMThkZjE4NDFiM2NjMTQzZTU1MWU3ZWFjNmRlZDc0MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-30T23:01:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-30T23:01:43Z"}, "message": "auto merge of #13211 : csherratt/rust/arc_fix, r=alexcrichton\n\nThis is a fix for #13210. fetch_sub returns the old value of the atomic variable, not the new one.", "tree": {"sha": "01753c611069e1ad6882f7a04525fffeaa564cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01753c611069e1ad6882f7a04525fffeaa564cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2674a16c18df1841b3cc143e551e7eac6ded7423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2674a16c18df1841b3cc143e551e7eac6ded7423", "html_url": "https://github.com/rust-lang/rust/commit/2674a16c18df1841b3cc143e551e7eac6ded7423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2674a16c18df1841b3cc143e551e7eac6ded7423/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90085a127908b65183c95c1322d4c00f37d00260", "url": "https://api.github.com/repos/rust-lang/rust/commits/90085a127908b65183c95c1322d4c00f37d00260", "html_url": "https://github.com/rust-lang/rust/commit/90085a127908b65183c95c1322d4c00f37d00260"}, {"sha": "9fc45c1f8e0ff448a83ba7df82c66598ab56f650", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc45c1f8e0ff448a83ba7df82c66598ab56f650", "html_url": "https://github.com/rust-lang/rust/commit/9fc45c1f8e0ff448a83ba7df82c66598ab56f650"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "431d87323cd7b07bbd74fe9c9942e7515a2c5894", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2674a16c18df1841b3cc143e551e7eac6ded7423/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2674a16c18df1841b3cc143e551e7eac6ded7423/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=2674a16c18df1841b3cc143e551e7eac6ded7423", "patch": "@@ -165,7 +165,7 @@ impl<T: Share + Send> Drop for Arc<T> {\n         // Because `fetch_sub` is already atomic, we do not need to synchronize\n         // with other threads unless we are going to delete the object. This\n         // same logic applies to the below `fetch_sub` to the `weak` count.\n-        if self.inner().strong.fetch_sub(1, atomics::Release) != 0 { return }\n+        if self.inner().strong.fetch_sub(1, atomics::Release) != 1 { return }\n \n         // This fence is needed to prevent reordering of use of the data and\n         // deletion of the data. Because it is marked `Release`, the\n@@ -190,7 +190,7 @@ impl<T: Share + Send> Drop for Arc<T> {\n         // allocation itself (there may still be weak pointers lying around).\n         unsafe { drop(ptr::read(&self.inner().data)); }\n \n-        if self.inner().weak.fetch_sub(1, atomics::Release) == 0 {\n+        if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n             unsafe { global_heap::exchange_free(self.x as *u8) }\n         }\n@@ -240,7 +240,7 @@ impl<T: Share + Send> Drop for Weak<T> {\n         // If we find out that we were the last weak pointer, then its time to\n         // deallocate the data entirely. See the discussion in Arc::drop() about\n         // the memory orderings\n-        if self.inner().weak.fetch_sub(1, atomics::Release) == 0 {\n+        if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n             unsafe { global_heap::exchange_free(self.x as *u8) }\n         }\n@@ -251,9 +251,24 @@ impl<T: Share + Send> Drop for Weak<T> {\n #[allow(experimental)]\n mod tests {\n     use super::{Arc, Weak};\n+    use std::sync::atomics;\n+    use std::task;\n     use Mutex;\n \n-    use std::task;\n+    struct Canary(*mut atomics::AtomicUint);\n+\n+    impl Drop for Canary\n+    {\n+        fn drop(&mut self) {\n+            unsafe {\n+                match *self {\n+                    Canary(c) => {\n+                        (*c).fetch_add(1, atomics::SeqCst);\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n     #[test]\n     fn manually_share_arc() {\n@@ -349,4 +364,23 @@ mod tests {\n \n         // hopefully we don't double-free (or leak)...\n     }\n+\n+    #[test]\n+    fn drop_arc() {\n+        let mut canary = atomics::AtomicUint::new(0);\n+        let x = Arc::new(Canary(&mut canary as *mut atomics::AtomicUint));\n+        drop(x);\n+        assert!(canary.load(atomics::Acquire) == 1);\n+    }\n+\n+    #[test]\n+    fn drop_arc_weak() {\n+        let mut canary = atomics::AtomicUint::new(0);\n+        let arc = Arc::new(Canary(&mut canary as *mut atomics::AtomicUint));\n+        let arc_weak = arc.downgrade();\n+        assert!(canary.load(atomics::Acquire) == 0);\n+        drop(arc);\n+        assert!(canary.load(atomics::Acquire) == 1);\n+        drop(arc_weak);\n+    }\n }"}]}