{"sha": "27744460e2d0b960a55a28637ba46835484e4335", "node_id": "C_kwDOAAsO6NoAKDI3NzQ0NDYwZTJkMGI5NjBhNTVhMjg2MzdiYTQ2ODM1NDg0ZTQzMzU", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-23T06:07:36Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-12-28T01:59:22Z"}, "message": "ADD - create and emit Bug support for Diagnostics\n\nUPDATE - migrate constant span_bug to translatable diagnostic.", "tree": {"sha": "ed12681ff7abedc39bcd136261aed2d1720dda4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed12681ff7abedc39bcd136261aed2d1720dda4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27744460e2d0b960a55a28637ba46835484e4335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27744460e2d0b960a55a28637ba46835484e4335", "html_url": "https://github.com/rust-lang/rust/commit/27744460e2d0b960a55a28637ba46835484e4335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27744460e2d0b960a55a28637ba46835484e4335/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "html_url": "https://github.com/rust-lang/rust/commit/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "852925a1787c883cd7a542b5d8fa91a4de3f14cb", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=27744460e2d0b960a55a28637ba46835484e4335", "patch": "@@ -585,6 +585,13 @@ pub struct ErroneousConstant {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_polymorphic_constant_too_generic)]\n+pub struct PolymorphicConstantTooGeneric {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_shuffle_indices_evaluation)]\n pub struct ShuffleIndicesEvaluation {"}, {"sha": "14fe84a146da0792144787ee67a46f049a46dfa9", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=27744460e2d0b960a55a28637ba46835484e4335", "patch": "@@ -48,7 +48,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     self.cx.tcx().sess.emit_err(errors::ErroneousConstant { span: constant.span });\n                 }\n                 ErrorHandled::TooGeneric => {\n-                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n+                    self.cx\n+                        .tcx()\n+                        .sess\n+                        .diagnostic()\n+                        .emit_bug(errors::PolymorphicConstantTooGeneric { span: constant.span });\n                 }\n             }\n             err"}, {"sha": "d10c399bb6afc0b0941363d07fe8dfe06b5f4e0b", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=27744460e2d0b960a55a28637ba46835484e4335", "patch": "@@ -225,3 +225,5 @@ codegen_ssa_invalid_monomorphization_floating_point_vector = invalid monomorphiz\n codegen_ssa_invalid_monomorphization_floating_point_type = invalid monomorphization of `{$name}` intrinsic: `{$in_ty}` is not a floating-point type\n \n codegen_ssa_invalid_monomorphization_unrecognized_intrinsic = invalid monomorphization of `{$name}` intrinsic: unrecognized intrinsic `{$name}`\n+\n+codegen_ssa_polymorphic_constant_too_generic = codegen encountered polymorphic constant: TooGeneric"}, {"sha": "cbfee582d871f2c5925b0e8449e60dad19749212", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=27744460e2d0b960a55a28637ba46835484e4335", "patch": "@@ -1,7 +1,7 @@\n use crate::diagnostic::IntoDiagnosticArg;\n use crate::{\n     Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, ErrorGuaranteed,\n-    SubdiagnosticMessage,\n+    ExplicitBug, SubdiagnosticMessage,\n };\n use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n@@ -12,6 +12,7 @@ use std::borrow::Cow;\n use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n+use std::panic;\n use std::thread::panicking;\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n@@ -308,6 +309,58 @@ impl EmissionGuarantee for Noted {\n     }\n }\n \n+/// Marker type which enables implementation of `create_bug` and `emit_bug` functions for\n+/// bug struct diagnostics.\n+#[derive(Copy, Clone)]\n+pub struct Bug;\n+\n+impl<'a> DiagnosticBuilder<'a, Bug> {\n+    /// Convenience function for internal use, clients should use one of the\n+    /// `struct_*` methods on [`Handler`].\n+    #[track_caller]\n+    pub(crate) fn new_bug(handler: &'a Handler, message: impl Into<DiagnosticMessage>) -> Self {\n+        let diagnostic = Diagnostic::new_with_code(Level::Bug, None, message);\n+        Self::new_diagnostic_bug(handler, diagnostic)\n+    }\n+\n+    /// Creates a new `DiagnosticBuilder` with an already constructed\n+    /// diagnostic.\n+    pub(crate) fn new_diagnostic_bug(handler: &'a Handler, diagnostic: Diagnostic) -> Self {\n+        debug!(\"Created new diagnostic bug\");\n+        Self {\n+            inner: DiagnosticBuilderInner {\n+                state: DiagnosticBuilderState::Emittable(handler),\n+                diagnostic: Box::new(diagnostic),\n+            },\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+impl EmissionGuarantee for Bug {\n+    fn diagnostic_builder_emit_producing_guarantee(db: &mut DiagnosticBuilder<'_, Self>) -> Self {\n+        match db.inner.state {\n+            // First `.emit()` call, the `&Handler` is still available.\n+            DiagnosticBuilderState::Emittable(handler) => {\n+                db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n+\n+                handler.emit_diagnostic(&mut db.inner.diagnostic);\n+            }\n+            // `.emit()` was previously called, disallowed from repeating it.\n+            DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n+        }\n+        // Then panic. No need to return the marker type.\n+        panic::panic_any(ExplicitBug);\n+    }\n+\n+    fn make_diagnostic_builder(\n+        handler: &Handler,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, Self> {\n+        DiagnosticBuilder::new_bug(handler, msg)\n+    }\n+}\n+\n impl<'a> DiagnosticBuilder<'a, !> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`]."}, {"sha": "cf9741366a18b791364df3a9f3cb38f5b04faad4", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27744460e2d0b960a55a28637ba46835484e4335/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=27744460e2d0b960a55a28637ba46835484e4335", "patch": "@@ -1127,6 +1127,20 @@ impl Handler {\n         self.create_fatal(fatal).emit()\n     }\n \n+    pub fn create_bug<'a>(\n+        &'a self,\n+        bug: impl IntoDiagnostic<'a, diagnostic_builder::Bug>,\n+    ) -> DiagnosticBuilder<'a, diagnostic_builder::Bug> {\n+        bug.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_bug<'a>(\n+        &'a self,\n+        bug: impl IntoDiagnostic<'a, diagnostic_builder::Bug>,\n+    ) -> diagnostic_builder::Bug {\n+        self.create_bug(bug).emit()\n+    }\n+\n     fn emit_diag_at_span(\n         &self,\n         mut diag: Diagnostic,"}]}