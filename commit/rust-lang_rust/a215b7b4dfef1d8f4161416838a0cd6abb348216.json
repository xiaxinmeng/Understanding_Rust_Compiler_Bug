{"sha": "a215b7b4dfef1d8f4161416838a0cd6abb348216", "node_id": "C_kwDOAAsO6NoAKGEyMTViN2I0ZGZlZjFkOGY0MTYxNDE2ODM4YTBjZDZhYmIzNDgyMTY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-25T15:21:42Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-25T15:39:23Z"}, "message": "remove `TypeError::ObjectUnsafeCoercion`", "tree": {"sha": "f99596ae73607dcb17335e1d453e9d0668156911", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99596ae73607dcb17335e1d453e9d0668156911"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a215b7b4dfef1d8f4161416838a0cd6abb348216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a215b7b4dfef1d8f4161416838a0cd6abb348216", "html_url": "https://github.com/rust-lang/rust/commit/a215b7b4dfef1d8f4161416838a0cd6abb348216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a215b7b4dfef1d8f4161416838a0cd6abb348216/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a053361a2871e286cf5cbc83cc2ed3926e1b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a053361a2871e286cf5cbc83cc2ed3926e1b4b", "html_url": "https://github.com/rust-lang/rust/commit/40a053361a2871e286cf5cbc83cc2ed3926e1b4b"}], "stats": {"total": 83, "additions": 27, "deletions": 56}, "files": [{"sha": "6f8743ed32ab6c65ece03eec9cc05ffe794124a0", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=a215b7b4dfef1d8f4161416838a0cd6abb348216", "patch": "@@ -46,7 +46,6 @@ use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n \n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n@@ -727,9 +726,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     debug!(\" -> CoercionCast\");\n                     fcx.typeck_results.borrow_mut().set_coercion_cast(self.expr.hir_id.local_id);\n                 }\n-                Err(ty::error::TypeError::ObjectUnsafeCoercion(did)) => {\n-                    self.report_object_unsafe_cast(&fcx, did);\n-                }\n                 Err(_) => {\n                     match self.do_check(fcx) {\n                         Ok(k) => {\n@@ -741,14 +737,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             };\n         }\n     }\n-\n-    fn report_object_unsafe_cast(&self, fcx: &FnCtxt<'a, 'tcx>, did: DefId) {\n-        let violations = fcx.tcx.object_safety_violations(did);\n-        let mut err = report_object_safety_error(fcx.tcx, self.cast_span, did, violations);\n-        err.note(&format!(\"required by cast to type '{}'\", fcx.ty_to_string(self.cast_ty)));\n-        err.emit();\n-    }\n-\n     /// Checks a cast, and report an error if one exists. In some cases, this\n     /// can return Ok and create type errors in the fcx rather than returning\n     /// directly. coercion-cast is handled in check instead of here."}, {"sha": "121dd4a1be1ca8c89d52e5768ba3953883a2e777", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=a215b7b4dfef1d8f4161416838a0cd6abb348216", "patch": "@@ -199,10 +199,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 debug!(\"coerce: unsize successful\");\n                 return unsize;\n             }\n-            Err(TypeError::ObjectUnsafeCoercion(did)) => {\n-                debug!(\"coerce: unsize not object safe\");\n-                return Err(TypeError::ObjectUnsafeCoercion(did));\n-            }\n             Err(error) => {\n                 debug!(?error, \"coerce: unsize failed\");\n             }"}, {"sha": "5c0a460e5d637f05f7510fbbf890143e8644325a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 36, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a215b7b4dfef1d8f4161416838a0cd6abb348216", "patch": "@@ -1677,40 +1677,34 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         };\n \n-        match terr {\n-            // Ignore msg for object safe coercion\n-            // since E0038 message will be printed\n-            TypeError::ObjectUnsafeCoercion(_) => {}\n-            _ => {\n-                let mut label_or_note = |span: Span, msg: &str| {\n-                    if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n-                        diag.span_label(span, msg);\n-                    } else {\n-                        diag.span_note(span, msg);\n-                    }\n-                };\n-                if let Some((sp, msg)) = secondary_span {\n-                    if swap_secondary_and_primary {\n-                        let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n-                            expected,\n-                            ..\n-                        })) = values\n-                        {\n-                            format!(\"expected this to be `{}`\", expected)\n-                        } else {\n-                            terr.to_string()\n-                        };\n-                        label_or_note(sp, &terr);\n-                        label_or_note(span, &msg);\n-                    } else {\n-                        label_or_note(span, &terr.to_string());\n-                        label_or_note(sp, &msg);\n-                    }\n-                } else {\n-                    label_or_note(span, &terr.to_string());\n-                }\n+        let mut label_or_note = |span: Span, msg: &str| {\n+            if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n+                diag.span_label(span, msg);\n+            } else {\n+                diag.span_note(span, msg);\n             }\n         };\n+        if let Some((sp, msg)) = secondary_span {\n+            if swap_secondary_and_primary {\n+                let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n+                    expected,\n+                    ..\n+                })) = values\n+                {\n+                    format!(\"expected this to be `{}`\", expected)\n+                } else {\n+                    terr.to_string()\n+                };\n+                label_or_note(sp, &terr);\n+                label_or_note(span, &msg);\n+            } else {\n+                label_or_note(span, &terr.to_string());\n+                label_or_note(sp, &msg);\n+            }\n+        } else {\n+            label_or_note(span, &terr.to_string());\n+        }\n+\n         if let Some((expected, found)) = expected_found {\n             let (expected_label, found_label, exp_found) = match exp_found {\n                 Mismatch::Variable(ef) => (\n@@ -1880,9 +1874,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         );\n                     }\n                 }\n-                TypeError::ObjectUnsafeCoercion(_) => {\n-                    diag.note_unsuccessful_coercion(found, expected);\n-                }\n                 _ => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n@@ -3127,7 +3118,6 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n                 TypeError::IntrinsicCast => {\n                     Error0308(\"cannot coerce intrinsics to function pointers\")\n                 }\n-                TypeError::ObjectUnsafeCoercion(did) => Error0038(did),\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "d83e17574a09423c249b54034a35339c6f9f1b04", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a215b7b4dfef1d8f4161416838a0cd6abb348216/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=a215b7b4dfef1d8f4161416838a0cd6abb348216", "patch": "@@ -70,7 +70,6 @@ pub enum TypeError<'tcx> {\n     CyclicConst(ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>>),\n-    ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<ty::Const<'tcx>>),\n \n     IntrinsicCast,\n@@ -222,7 +221,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 f,\n                 \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n             ),\n-            ObjectUnsafeCoercion(_) => write!(f, \"coercion to object-unsafe trait object\"),\n         }\n     }\n }\n@@ -249,8 +247,7 @@ impl<'tcx> TypeError<'tcx> {\n             | ProjectionMismatched(_)\n             | ExistentialMismatch(_)\n             | ConstMismatch(_)\n-            | IntrinsicCast\n-            | ObjectUnsafeCoercion(_) => true,\n+            | IntrinsicCast => true,\n         }\n     }\n }"}]}