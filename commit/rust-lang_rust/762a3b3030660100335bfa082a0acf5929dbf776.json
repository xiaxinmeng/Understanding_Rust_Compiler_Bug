{"sha": "762a3b3030660100335bfa082a0acf5929dbf776", "node_id": "C_kwDOAAsO6NoAKDc2MmEzYjMwMzA2NjAxMDAzMzViZmEwODJhMGFjZjU5MjlkYmY3NzY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T22:14:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T22:14:18Z"}, "message": "Fix tool module classification not working correctly", "tree": {"sha": "1f354044f03fbd7e78e18f4c00ecd0ee126968d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f354044f03fbd7e78e18f4c00ecd0ee126968d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762a3b3030660100335bfa082a0acf5929dbf776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762a3b3030660100335bfa082a0acf5929dbf776", "html_url": "https://github.com/rust-lang/rust/commit/762a3b3030660100335bfa082a0acf5929dbf776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762a3b3030660100335bfa082a0acf5929dbf776/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d894cdecbdc016213b887fc5b8d263ec821aeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d894cdecbdc016213b887fc5b8d263ec821aeb", "html_url": "https://github.com/rust-lang/rust/commit/19d894cdecbdc016213b887fc5b8d263ec821aeb"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "233c814809ab21174982c7db1d12ef141c242c48", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=762a3b3030660100335bfa082a0acf5929dbf776", "patch": "@@ -290,9 +290,7 @@ impl SourceAnalyzer {\n                 return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n             prefer_value_ns = true;\n-        }\n-\n-        if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n+        } else if let Some(path_pat) = parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n@@ -302,9 +300,7 @@ impl SourceAnalyzer {\n             {\n                 return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n-        }\n-\n-        if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n+        } else if let Some(rec_lit) = parent().and_then(ast::RecordExpr::cast) {\n             let expr_id = self.expr_id(db, &rec_lit.into())?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n@@ -331,32 +327,34 @@ impl SourceAnalyzer {\n         // Case where path is a qualifier of a use tree, e.g. foo::bar::{Baz, Qux} where we are\n         // trying to resolve foo::bar.\n         if let Some(use_tree) = parent().and_then(ast::UseTree::cast) {\n-            if let Some(qualifier) = use_tree.path() {\n-                if path == &qualifier && use_tree.coloncolon_token().is_some() {\n-                    return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n-                }\n+            if use_tree.coloncolon_token().is_some() {\n+                return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n             }\n         }\n \n         let is_path_of_attr = path\n-            .top_path()\n             .syntax()\n             .ancestors()\n-            .nth(2) // Path -> Meta -> Attr\n-            .map_or(false, |it| ast::Attr::can_cast(it.kind()));\n+            .map(|it| it.kind())\n+            .take_while(|&kind| ast::Path::can_cast(kind) || ast::Meta::can_cast(kind))\n+            .last()\n+            .map_or(false, ast::Meta::can_cast);\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n         // trying to resolve foo::bar.\n-        if let Some(outer_path) = path.parent_path() {\n-            if let Some(qualifier) = outer_path.qualifier() {\n-                if path == &qualifier {\n-                    return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n+        if path.parent_path().is_some() {\n+            return match resolve_hir_path_qualifier(db, &self.resolver, &hir_path) {\n+                None if is_path_of_attr => {\n+                    path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n+                        ToolModule::by_name(&name_ref.text()).map(PathResolution::ToolModule)\n+                    })\n                 }\n-            }\n+                res => res,\n+            };\n         } else if is_path_of_attr {\n             // Case where we are resolving the final path segment of a path in an attribute\n             // in this case we have to check for inert/builtin attributes and tools and prioritize\n-            // resolution of attributes over other namesapces\n+            // resolution of attributes over other namespaces\n             let name_ref = path.as_single_name_ref();\n             let builtin =\n                 name_ref.as_ref().map(ast::NameRef::text).as_deref().and_then(BuiltinAttr::by_name);\n@@ -365,27 +363,17 @@ impl SourceAnalyzer {\n             }\n             return match resolve_hir_path_as_macro(db, &self.resolver, &hir_path) {\n                 res @ Some(m) if m.is_attr() => res.map(PathResolution::Macro),\n-                _ => name_ref.and_then(|name_ref| {\n+                // this labels any path that starts with a tool module as the tool itself, this is technically wrong\n+                // but there is no benefit in differentiating these two cases for the time being\n+                _ => path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n                     ToolModule::by_name(&name_ref.text()).map(PathResolution::ToolModule)\n                 }),\n             };\n         }\n-\n-        let res = if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n+        if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n             resolve_hir_path_qualifier(db, &self.resolver, &hir_path)\n         } else {\n             resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n-        };\n-        match res {\n-            Some(_) => res,\n-            // this labels any path that starts with a tool module as the tool itself, this is technically wrong\n-            // but there is no benefit in differentiating these two cases for the time being\n-            None if is_path_of_attr => path\n-                .first_segment()\n-                .and_then(|seg| seg.name_ref())\n-                .and_then(|name_ref| ToolModule::by_name(&name_ref.text()))\n-                .map(PathResolution::ToolModule),\n-            None => None,\n         }\n     }\n "}, {"sha": "3ec6b6a77d34fd4daceb0c9b005c14b42c7f2241", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=762a3b3030660100335bfa082a0acf5929dbf776", "patch": "@@ -44,6 +44,7 @@\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">allow</span><span class=\"parenthesis attribute\">(</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n+<span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"tool_module attribute library\">rustfmt</span><span class=\"operator attribute\">::</span><span class=\"tool_module attribute library\">skip</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"module attribute crate_root library\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"attribute attribute library\">identity</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute_bracket attribute\">]</span>"}, {"sha": "4e62edc7c169b3a91984f273f0b4957c44e0b10d", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762a3b3030660100335bfa082a0acf5929dbf776/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=762a3b3030660100335bfa082a0acf5929dbf776", "patch": "@@ -17,6 +17,7 @@ use inner::{self as inner_mod};\n mod inner {}\n \n #[allow()]\n+#[rustfmt::skip]\n #[proc_macros::identity]\n pub mod ops {\n     #[lang = \"fn_once\"]"}]}