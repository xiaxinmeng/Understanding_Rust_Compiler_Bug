{"sha": "7feab000b283139b5b7ba131a2495515bc80c627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZWFiMDAwYjI4MzEzOWI1YjdiYTEzMWEyNDk1NTE1YmM4MGM2Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T22:13:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T22:13:02Z"}, "message": "Auto merge of #80005 - ssomers:btree_cleanup_3, r=Mark-Simulacrum\n\nBTreeMap: declare clear_parent_link directly on the root it needs\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "75d94a5f89763cbca88239ed9bf000c00412c0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d94a5f89763cbca88239ed9bf000c00412c0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7feab000b283139b5b7ba131a2495515bc80c627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7feab000b283139b5b7ba131a2495515bc80c627", "html_url": "https://github.com/rust-lang/rust/commit/7feab000b283139b5b7ba131a2495515bc80c627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7feab000b283139b5b7ba131a2495515bc80c627/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "803c60218ffac3384b0063c1b87ae7944163bba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/803c60218ffac3384b0063c1b87ae7944163bba7", "html_url": "https://github.com/rust-lang/rust/commit/803c60218ffac3384b0063c1b87ae7944163bba7"}, {"sha": "bdc6adfb3bf3723268ac05540cc88bcca1b31227", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc6adfb3bf3723268ac05540cc88bcca1b31227", "html_url": "https://github.com/rust-lang/rust/commit/bdc6adfb3bf3723268ac05540cc88bcca1b31227"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "0fec2b70a855edea39f1eae853c8be66ccba0ddd", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7feab000b283139b5b7ba131a2495515bc80c627/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7feab000b283139b5b7ba131a2495515bc80c627/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=7feab000b283139b5b7ba131a2495515bc80c627", "patch": "@@ -150,7 +150,7 @@ impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n     /// Mutably borrows the owned node. Unlike `reborrow_mut`, this is safe,\n     /// because the return value cannot be used to destroy the node itself,\n     /// and there cannot be other references to the tree (except during the\n-    /// process of `into_iter` or `drop`, but that is a horrific already).\n+    /// process of `into_iter` or `drop`, but that is horrific already).\n     pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n     }\n@@ -192,7 +192,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n \n         let internal_node = NodeRef { height: self.height, node: top, _marker: PhantomData };\n         *self = internal_node.first_edge().descend();\n-        self.borrow_mut().clear_parent_link();\n+        self.clear_parent_link();\n \n         unsafe {\n             Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());\n@@ -611,18 +611,19 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Set or clear the node's link to its parent edge,\n+    /// Sets the node's link to its parent edge,\n     /// without invalidating other references to the node.\n     fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {\n         let leaf = Self::as_leaf_ptr(self);\n         unsafe { (*leaf).parent = Some(parent) };\n         unsafe { (*leaf).parent_idx.write(parent_idx as u16) };\n     }\n+}\n \n-    /// Clear the node's link to its parent edge.\n-    /// This only makes sense when there are no other references to the node.\n+impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n+    /// Clears the root's link to its parent edge.\n     fn clear_parent_link(&mut self) {\n-        let leaf = Self::as_leaf_mut(self);\n+        let leaf = NodeRef::as_leaf_mut(&mut self.borrow_mut());\n         leaf.parent = None;\n     }\n }\n@@ -720,9 +721,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(internal) => {\n                     let node = ptr::read(internal.reborrow().edge_at(idx + 1));\n                     let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // In practice, clearing the parent is a waste of time, because we will\n+                    // Currently, clearing the parent link is superfluous, because we will\n                     // insert the node elsewhere and set its parent link again.\n-                    edge.borrow_mut().clear_parent_link();\n+                    edge.clear_parent_link();\n                     Some(edge)\n                 }\n             };\n@@ -748,9 +749,9 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n                 ForceResult::Internal(mut internal) => {\n                     let node = slice_remove(internal.reborrow_mut().into_edge_area_slice(), 0);\n                     let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // In practice, clearing the parent is a waste of time, because we will\n+                    // Currently, clearing the parent link is superfluous, because we will\n                     // insert the node elsewhere and set its parent link again.\n-                    edge.borrow_mut().clear_parent_link();\n+                    edge.clear_parent_link();\n \n                     internal.correct_childrens_parent_links(0..old_len);\n "}]}