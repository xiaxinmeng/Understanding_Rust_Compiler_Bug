{"sha": "1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNGZiZmNhNDE4MWM2Nzc5Yjc1YTRhMWRjNmM4ZmQ1MzhkNmVkY2M=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-15T21:10:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T10:42:45Z"}, "message": "resolve: Support resolving macro paths without macro kind restrictions", "tree": {"sha": "c9d6cda8313c88b941b4225e1abfbc5c1fdacfca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d6cda8313c88b941b4225e1abfbc5c1fdacfca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "html_url": "https://github.com/rust-lang/rust/commit/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7726ce08680c8c0789286f799be13c5b0ad9a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7726ce08680c8c0789286f799be13c5b0ad9a01", "html_url": "https://github.com/rust-lang/rust/commit/a7726ce08680c8c0789286f799be13c5b0ad9a01"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "90a4107f773e181fe55b0ee7fd471cceff3c67dc", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "patch": "@@ -574,7 +574,7 @@ impl<'a> Resolver<'a> {\n                         for derive in &parent_scope.derives {\n                             let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n                             if let Ok((Some(ext), _)) = this.resolve_macro_path(\n-                                derive, MacroKind::Derive, &parent_scope, false, false\n+                                derive, Some(MacroKind::Derive), &parent_scope, false, false\n                             ) {\n                                 suggestions.extend(ext.helper_attrs.iter().map(|name| {\n                                     TypoSuggestion::from_res(*name, res)"}, {"sha": "ba8cfdcf53548afad8d96864e003bdeea3c7ef7b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "patch": "@@ -3684,11 +3684,9 @@ impl<'a> Resolver<'a> {\n             let path = Path { segments: path.iter().map(path_seg).collect(), span };\n             let parent_scope =\n                 ParentScope { module: self.current_module, ..self.dummy_parent_scope() };\n-            for macro_kind in &[MacroKind::Bang, MacroKind::Attr, MacroKind::Derive] {\n-                if let Ok((_, res)) = self.resolve_macro_path(&path, *macro_kind,\n-                                                              &parent_scope, false, false) {\n-                    return Some(PartialRes::new(res));\n-                }\n+            if let Ok((_, res)) =\n+                    self.resolve_macro_path(&path, None, &parent_scope, false, false) {\n+                return Some(PartialRes::new(res));\n             }\n         }\n "}, {"sha": "34e85e1cf1011ce7d90cff88e344ad994c8cdb4c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "patch": "@@ -220,7 +220,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         };\n \n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        let (ext, res) = self.smart_resolve_macro_path(path, kind, &parent_scope, true, force)?;\n+        let (ext, res) = self.smart_resolve_macro_path(path, kind, &parent_scope, force)?;\n \n         let span = invoc.span();\n         invoc.expansion_data.mark.set_expn_info(ext.expn_info(span, fast_print_path(path)));\n@@ -269,10 +269,10 @@ impl<'a> Resolver<'a> {\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n-        trace: bool,\n         force: bool,\n     ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {\n-        let (ext, res) = match self.resolve_macro_path(path, kind, parent_scope, trace, force) {\n+        let (ext, res) = match self.resolve_macro_path(path, Some(kind), parent_scope,\n+                                                       true, force) {\n             Ok((Some(ext), res)) => (ext, res),\n             // Use dummy syntax extensions for unresolved macros for better recovery.\n             Ok((None, res)) => (self.dummy_ext(kind), res),\n@@ -334,7 +334,7 @@ impl<'a> Resolver<'a> {\n     pub fn resolve_macro_path(\n         &mut self,\n         path: &ast::Path,\n-        kind: MacroKind,\n+        kind: Option<MacroKind>,\n         parent_scope: &ParentScope<'a>,\n         trace: bool,\n         force: bool,\n@@ -343,7 +343,7 @@ impl<'a> Resolver<'a> {\n         let mut path = Segment::from_path(path);\n \n         // Possibly apply the macro helper hack\n-        if kind == MacroKind::Bang && path.len() == 1 &&\n+        if kind == Some(MacroKind::Bang) && path.len() == 1 &&\n            path[0].ident.span.ctxt().outer_expn_info()\n                .map_or(false, |info| info.local_inner_macros) {\n             let root = Ident::new(kw::DollarCrate, path[0].ident.span);\n@@ -364,21 +364,25 @@ impl<'a> Resolver<'a> {\n             };\n \n             if trace {\n+                let kind = kind.expect(\"macro kind must be specified if tracing is enabled\");\n                 parent_scope.module.multi_segment_macro_resolutions.borrow_mut()\n                     .push((path, path_span, kind, parent_scope.clone(), res.ok()));\n             }\n \n             self.prohibit_imported_non_macro_attrs(None, res.ok(), path_span);\n             res\n         } else {\n+            // Macro without a specific kind restriction is equvalent to a macro import.\n+            let scope_set = kind.map_or(ScopeSet::Import(MacroNS), ScopeSet::Macro);\n             let binding = self.early_resolve_ident_in_lexical_scope(\n-                path[0].ident, ScopeSet::Macro(kind), parent_scope, false, force, path_span\n+                path[0].ident, scope_set, parent_scope, false, force, path_span\n             );\n             if let Err(Determinacy::Undetermined) = binding {\n                 return Err(Determinacy::Undetermined);\n             }\n \n             if trace {\n+                let kind = kind.expect(\"macro kind must be specified if tracing is enabled\");\n                 parent_scope.module.single_segment_macro_resolutions.borrow_mut()\n                     .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n             }\n@@ -452,7 +456,7 @@ impl<'a> Resolver<'a> {\n                     let mut result = Err(Determinacy::Determined);\n                     for derive in &parent_scope.derives {\n                         let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n-                        match this.resolve_macro_path(derive, MacroKind::Derive,\n+                        match this.resolve_macro_path(derive, Some(MacroKind::Derive),\n                                                       &parent_scope, true, force) {\n                             Ok((Some(ext), _)) => if ext.helper_attrs.contains(&ident.name) {\n                                 let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),"}, {"sha": "04de3374d0587af4f7d4d4c77833d22e68908049", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1b4fbfca4181c6779b75a4a1dc6c8fd538d6edcc", "patch": "@@ -6,6 +6,7 @@ use rustc::lint as lint;\n use rustc::ty;\n use syntax;\n use syntax::ast::{self, Ident};\n+use syntax::ext::base::SyntaxExtensionKind;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::symbol::Symbol;\n use syntax_pos::DUMMY_SP;\n@@ -425,12 +426,10 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n /// Resolves a string as a macro.\n fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n-    use syntax::ext::base::{MacroKind, SyntaxExtensionKind};\n-    let segment = ast::PathSegment::from_ident(Ident::from_str(path_str));\n-    let path = ast::Path { segments: vec![segment], span: DUMMY_SP };\n+    let path = ast::Path::from_ident(Ident::from_str(path_str));\n     cx.enter_resolver(|resolver| {\n         if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n-            &path, MacroKind::Bang, &resolver.dummy_parent_scope(), false, false\n+            &path, None, &resolver.dummy_parent_scope(), false, false\n         ) {\n             if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));"}]}