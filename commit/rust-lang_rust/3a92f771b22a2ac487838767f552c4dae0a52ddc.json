{"sha": "3a92f771b22a2ac487838767f552c4dae0a52ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTJmNzcxYjIyYTJhYzQ4NzgzODc2N2Y1NTJjNGRhZTBhNTJkZGM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-20T19:56:47Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-23T10:13:35Z"}, "message": "Add --generate-redirect-map option to replace HTML redirection file with a unique JSON map", "tree": {"sha": "f3219cf1d137df2da44e046316be6c90c3889f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3219cf1d137df2da44e046316be6c90c3889f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a92f771b22a2ac487838767f552c4dae0a52ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a92f771b22a2ac487838767f552c4dae0a52ddc", "html_url": "https://github.com/rust-lang/rust/commit/3a92f771b22a2ac487838767f552c4dae0a52ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a92f771b22a2ac487838767f552c4dae0a52ddc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15598a83db88ec7a32ea18a44dd6309f32edc07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15598a83db88ec7a32ea18a44dd6309f32edc07e", "html_url": "https://github.com/rust-lang/rust/commit/15598a83db88ec7a32ea18a44dd6309f32edc07e"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "c9c303383675ac24bffb2eb209281d6161cdee12", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3a92f771b22a2ac487838767f552c4dae0a52ddc", "patch": "@@ -265,6 +265,8 @@ crate struct RenderOptions {\n     crate document_private: bool,\n     /// Document items that have `doc(hidden)`.\n     crate document_hidden: bool,\n+    /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n+    crate generate_redirect_map: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n@@ -586,6 +588,7 @@ impl Options {\n         let document_private = matches.opt_present(\"document-private-items\");\n         let document_hidden = matches.opt_present(\"document-hidden-items\");\n         let run_check = matches.opt_present(\"check\");\n+        let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -643,6 +646,7 @@ impl Options {\n                 generate_search_filter,\n                 document_private,\n                 document_hidden,\n+                generate_redirect_map,\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),"}, {"sha": "cd115eef314726b9ae52f7ac2ea481cb094869fd", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3a92f771b22a2ac487838767f552c4dae0a52ddc", "patch": "@@ -111,6 +111,10 @@ crate struct Context<'tcx> {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     crate render_redirect_pages: bool,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    crate redirections: Option<Rc<RefCell<FxHashMap<String, String>>>>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n@@ -405,6 +409,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             static_root_path,\n             generate_search_filter,\n             unstable_features,\n+            generate_redirect_map,\n             ..\n         } = options;\n \n@@ -510,6 +515,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             all: Rc::new(RefCell::new(AllTypes::new())),\n             errors: Rc::new(receiver),\n             cache: Rc::new(cache),\n+            redirections: if generate_redirect_map {\n+                Some(Rc::new(RefCell::new(FxHashMap::default())))\n+            } else {\n+                None\n+            },\n         };\n \n         CURRENT_DEPTH.with(|s| s.set(0));\n@@ -588,6 +598,15 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n+        if let Some(redirections) = self.redirections.take() {\n+            if !redirections.borrow().is_empty() {\n+                let redirect_map_path =\n+                    self.dst.join(&*krate.name.as_str()).join(\"redirect-map.json\");\n+                let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n+                self.shared.ensure_dir(&self.dst.join(&*krate.name.as_str()))?;\n+                self.shared.fs.write(&redirect_map_path, paths.as_bytes())?;\n+            }\n+        }\n \n         // Flush pending errors.\n         Arc::get_mut(&mut self.shared).unwrap().fs.close();\n@@ -664,9 +683,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if !buf.is_empty() {\n             let name = item.name.as_ref().unwrap();\n             let item_type = item.type_();\n-            let file_name = &item_path(item_type, &name.as_str());\n+            let file_name = item_path(item_type, &name.as_str());\n             self.shared.ensure_dir(&self.dst)?;\n-            let joint_dst = self.dst.join(file_name);\n+            let joint_dst = self.dst.join(&file_name);\n             self.shared.fs.write(&joint_dst, buf.as_bytes())?;\n \n             if !self.render_redirect_pages {\n@@ -676,9 +695,17 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             // to the new one (without).\n             if item_type == ItemType::Macro {\n                 let redir_name = format!(\"{}.{}!.html\", item_type, name);\n-                let redir_dst = self.dst.join(redir_name);\n-                let v = layout::redirect(file_name);\n-                self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                if let Some(ref redirections) = self.redirections {\n+                    let crate_name = &self.shared.layout.krate;\n+                    redirections.borrow_mut().insert(\n+                        format!(\"{}/{}\", crate_name, redir_name),\n+                        format!(\"{}/{}\", crate_name, file_name),\n+                    );\n+                } else {\n+                    let v = layout::redirect(&file_name);\n+                    let redir_dst = self.dst.join(redir_name);\n+                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                }\n             }\n         }\n         Ok(())\n@@ -1588,17 +1615,27 @@ impl Context<'_> {\n                 &self.shared.style_files,\n             )\n         } else {\n-            let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = self.cache.paths.get(&it.def_id) {\n+                let mut path = String::new();\n                 for name in &names[..names.len() - 1] {\n-                    url.push_str(name);\n-                    url.push('/');\n+                    path.push_str(name);\n+                    path.push('/');\n+                }\n+                path.push_str(&item_path(ty, names.last().unwrap()));\n+                match self.redirections {\n+                    Some(ref redirections) => {\n+                        let mut current_path = String::new();\n+                        for name in &self.current {\n+                            current_path.push_str(name);\n+                            current_path.push('/');\n+                        }\n+                        current_path.push_str(&item_path(ty, names.last().unwrap()));\n+                        redirections.borrow_mut().insert(current_path, path);\n+                    }\n+                    None => return layout::redirect(&format!(\"{}{}\", self.root_path(), path)),\n                 }\n-                url.push_str(&item_path(ty, names.last().unwrap()));\n-                layout::redirect(&url)\n-            } else {\n-                String::new()\n             }\n+            String::new()\n         }\n     }\n "}, {"sha": "afacf2dc29ecfd68a3ce7b39972fba7f366b133d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a92f771b22a2ac487838767f552c4dae0a52ddc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3a92f771b22a2ac487838767f552c4dae0a52ddc", "patch": "@@ -423,6 +423,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n         unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n+        unstable(\"generate-redirect-map\", |o| {\n+            o.optflag(\n+                \"\",\n+                \"generate-redirect-map\",\n+                \"Generate JSON file at the top level instead of generating HTML redirection files\",\n+            )\n+        }),\n     ]\n }\n "}]}