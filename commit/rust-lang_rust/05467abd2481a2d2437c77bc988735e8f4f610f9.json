{"sha": "05467abd2481a2d2437c77bc988735e8f4f610f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NDY3YWJkMjQ4MWEyZDI0MzdjNzdiYzk4ODczNWU4ZjRmNjEwZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T12:14:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T12:14:30Z"}, "message": "Auto merge of #3626 - phansch:rustfix_works, r=oli-obk\n\nAdd run-rustfix where it already works\n\nThis PR adds `// run-rustfix` headers to tests for `MachineApplicable` lints where\napplying the suggestions works without any errors.", "tree": {"sha": "843dab3f73ec280c8facd2e2dd3684d390329460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843dab3f73ec280c8facd2e2dd3684d390329460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05467abd2481a2d2437c77bc988735e8f4f610f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05467abd2481a2d2437c77bc988735e8f4f610f9", "html_url": "https://github.com/rust-lang/rust/commit/05467abd2481a2d2437c77bc988735e8f4f610f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05467abd2481a2d2437c77bc988735e8f4f610f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d264e406be13f7dbd01508ce506ded925d996be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d264e406be13f7dbd01508ce506ded925d996be9", "html_url": "https://github.com/rust-lang/rust/commit/d264e406be13f7dbd01508ce506ded925d996be9"}, {"sha": "319f18e54dc84cc413df18d110a38ea340a91c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/319f18e54dc84cc413df18d110a38ea340a91c86", "html_url": "https://github.com/rust-lang/rust/commit/319f18e54dc84cc413df18d110a38ea340a91c86"}], "stats": {"total": 543, "additions": 467, "deletions": 76}, "files": [{"sha": "5f4e54eb565b6765d84f4721d5ae4f3b7c0805df", "filename": "tests/ui/cast_lossless_float.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+fn main() {\n+    // Test clippy::cast_lossless with casts to floating-point types\n+    f32::from(1i8);\n+    f64::from(1i8);\n+    f32::from(1u8);\n+    f64::from(1u8);\n+    f32::from(1i16);\n+    f64::from(1i16);\n+    f32::from(1u16);\n+    f64::from(1u16);\n+    f64::from(1i32);\n+    f64::from(1u32);\n+}"}, {"sha": "b818010feb20ecf24825ad7c9058a6569ee301d8", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #[warn(clippy::cast_lossless)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {"}, {"sha": "aa48bd4d1c7d87bf0e4ef649ee608db9c23a29d7", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,61 +1,61 @@\n error: casting i8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:14:5\n+  --> $DIR/cast_lossless_float.rs:16:5\n    |\n LL |     1i8 as f32;\n    |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:15:5\n+  --> $DIR/cast_lossless_float.rs:17:5\n    |\n LL |     1i8 as f64;\n    |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n \n error: casting u8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:16:5\n+  --> $DIR/cast_lossless_float.rs:18:5\n    |\n LL |     1u8 as f32;\n    |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n \n error: casting u8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:17:5\n+  --> $DIR/cast_lossless_float.rs:19:5\n    |\n LL |     1u8 as f64;\n    |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n \n error: casting i16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:18:5\n+  --> $DIR/cast_lossless_float.rs:20:5\n    |\n LL |     1i16 as f32;\n    |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n \n error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:19:5\n+  --> $DIR/cast_lossless_float.rs:21:5\n    |\n LL |     1i16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n \n error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:20:5\n+  --> $DIR/cast_lossless_float.rs:22:5\n    |\n LL |     1u16 as f32;\n    |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n \n error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:21:5\n+  --> $DIR/cast_lossless_float.rs:23:5\n    |\n LL |     1u16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n \n error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:22:5\n+  --> $DIR/cast_lossless_float.rs:24:5\n    |\n LL |     1i32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n \n error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:23:5\n+  --> $DIR/cast_lossless_float.rs:25:5\n    |\n LL |     1u32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`"}, {"sha": "83f3e02420999bb70e7f73866e26003378f42f36", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+fn main() {\n+    // Test clippy::cast_lossless with casts to integer types\n+    i16::from(1i8);\n+    i32::from(1i8);\n+    i64::from(1i8);\n+    i16::from(1u8);\n+    i32::from(1u8);\n+    i64::from(1u8);\n+    u16::from(1u8);\n+    u32::from(1u8);\n+    u64::from(1u8);\n+    i32::from(1i16);\n+    i64::from(1i16);\n+    i32::from(1u16);\n+    i64::from(1u16);\n+    u32::from(1u16);\n+    u64::from(1u16);\n+    i64::from(1i32);\n+    i64::from(1u32);\n+    u64::from(1u32);\n+}"}, {"sha": "75c639570015f735e0e56962397efe65a9bb81d6", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #[warn(clippy::cast_lossless)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {"}, {"sha": "f49dc0d9eff95d56ffd058d792b90291a15b0373", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,109 +1,109 @@\n error: casting i8 to i16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:14:5\n+  --> $DIR/cast_lossless_integer.rs:16:5\n    |\n LL |     1i8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:15:5\n+  --> $DIR/cast_lossless_integer.rs:17:5\n    |\n LL |     1i8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n \n error: casting i8 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:16:5\n+  --> $DIR/cast_lossless_integer.rs:18:5\n    |\n LL |     1i8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n \n error: casting u8 to i16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:17:5\n+  --> $DIR/cast_lossless_integer.rs:19:5\n    |\n LL |     1u8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n \n error: casting u8 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:18:5\n+  --> $DIR/cast_lossless_integer.rs:20:5\n    |\n LL |     1u8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n \n error: casting u8 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:19:5\n+  --> $DIR/cast_lossless_integer.rs:21:5\n    |\n LL |     1u8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n \n error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:20:5\n+  --> $DIR/cast_lossless_integer.rs:22:5\n    |\n LL |     1u8 as u16;\n    |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n \n error: casting u8 to u32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:21:5\n+  --> $DIR/cast_lossless_integer.rs:23:5\n    |\n LL |     1u8 as u32;\n    |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n \n error: casting u8 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:22:5\n+  --> $DIR/cast_lossless_integer.rs:24:5\n    |\n LL |     1u8 as u64;\n    |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n \n error: casting i16 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:23:5\n+  --> $DIR/cast_lossless_integer.rs:25:5\n    |\n LL |     1i16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n \n error: casting i16 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:24:5\n+  --> $DIR/cast_lossless_integer.rs:26:5\n    |\n LL |     1i16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n \n error: casting u16 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:25:5\n+  --> $DIR/cast_lossless_integer.rs:27:5\n    |\n LL |     1u16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n \n error: casting u16 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:26:5\n+  --> $DIR/cast_lossless_integer.rs:28:5\n    |\n LL |     1u16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n \n error: casting u16 to u32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:27:5\n+  --> $DIR/cast_lossless_integer.rs:29:5\n    |\n LL |     1u16 as u32;\n    |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n \n error: casting u16 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:28:5\n+  --> $DIR/cast_lossless_integer.rs:30:5\n    |\n LL |     1u16 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n \n error: casting i32 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:29:5\n+  --> $DIR/cast_lossless_integer.rs:31:5\n    |\n LL |     1i32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n \n error: casting u32 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:30:5\n+  --> $DIR/cast_lossless_integer.rs:32:5\n    |\n LL |     1u32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n \n error: casting u32 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:31:5\n+  --> $DIR/cast_lossless_integer.rs:33:5\n    |\n LL |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`"}, {"sha": "fd98edb75557d760dcf2f1cea131cb35753d248d", "filename": "tests/ui/double_comparison.fixed", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    if x <= y {\n+        // do something\n+    }\n+    if x <= y {\n+        // do something\n+    }\n+    if x >= y {\n+        // do something\n+    }\n+    if x >= y {\n+        // do something\n+    }\n+    if x != y {\n+        // do something\n+    }\n+    if x != y {\n+        // do something\n+    }\n+    if x == y {\n+        // do something\n+    }\n+    if x == y {\n+        // do something\n+    }\n+}"}, {"sha": "5d201a13ff22dbbfe57020bf149c94a5224688b9", "filename": "tests/ui/double_comparison.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n fn main() {\n     let x = 1;\n     let y = 2;"}, {"sha": "31bab8f01120479763168150b5e5e3d10a64835a", "filename": "tests/ui/double_comparison.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,49 +1,49 @@\n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:13:8\n+  --> $DIR/double_comparison.rs:15:8\n    |\n LL |     if x == y || x < y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n    |\n    = note: `-D clippy::double-comparisons` implied by `-D warnings`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:16:8\n+  --> $DIR/double_comparison.rs:18:8\n    |\n LL |     if x < y || x == y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:19:8\n+  --> $DIR/double_comparison.rs:21:8\n    |\n LL |     if x == y || x > y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:22:8\n+  --> $DIR/double_comparison.rs:24:8\n    |\n LL |     if x > y || x == y {\n    |        ^^^^^^^^^^^^^^^ help: try: `x >= y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:25:8\n+  --> $DIR/double_comparison.rs:27:8\n    |\n LL |     if x < y || x > y {\n    |        ^^^^^^^^^^^^^^ help: try: `x != y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:28:8\n+  --> $DIR/double_comparison.rs:30:8\n    |\n LL |     if x > y || x < y {\n    |        ^^^^^^^^^^^^^^ help: try: `x != y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:31:8\n+  --> $DIR/double_comparison.rs:33:8\n    |\n LL |     if x <= y && x >= y {\n    |        ^^^^^^^^^^^^^^^^ help: try: `x == y`\n \n error: This binary expression can be simplified\n-  --> $DIR/double_comparison.rs:34:8\n+  --> $DIR/double_comparison.rs:36:8\n    |\n LL |     if x >= y && x <= y {\n    |        ^^^^^^^^^^^^^^^^ help: try: `x == y`"}, {"sha": "4ca151453fe7bda6ea76d4c4cc10c1b162e6829e", "filename": "tests/ui/println_empty_string.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+fn main() {\n+    println!();\n+    println!();\n+\n+    match \"a\" {\n+        _ => println!(),\n+    }\n+}"}, {"sha": "21f944916dbcbb5c70fbbefc38277ded6e6f8d07", "filename": "tests/ui/println_empty_string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n fn main() {\n     println!();\n     println!(\"\");"}, {"sha": "2370a3f1e282ab321972c05e2959cc105628c79b", "filename": "tests/ui/println_empty_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fprintln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,13 +1,13 @@\n error: using `println!(\"\")`\n-  --> $DIR/println_empty_string.rs:12:5\n+  --> $DIR/println_empty_string.rs:14:5\n    |\n LL |     println!(\"\");\n    |     ^^^^^^^^^^^^ help: replace it with: `println!()`\n    |\n    = note: `-D clippy::println-empty-string` implied by `-D warnings`\n \n error: using `println!(\"\")`\n-  --> $DIR/println_empty_string.rs:15:14\n+  --> $DIR/println_empty_string.rs:17:14\n    |\n LL |         _ => println!(\"\"),\n    |              ^^^^^^^^^^^^ help: replace it with: `println!()`"}, {"sha": "c9f58896ae13aa3d296e9fdf3ef7432afa7bd6c2", "filename": "tests/ui/ptr_offset_with_cast.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let vec = vec![b'a', b'b', b'c'];\n+    let ptr = vec.as_ptr();\n+\n+    let offset_u8 = 1_u8;\n+    let offset_usize = 1_usize;\n+    let offset_isize = 1_isize;\n+\n+    unsafe {\n+        ptr.add(offset_usize);\n+        ptr.offset(offset_isize as isize);\n+        ptr.offset(offset_u8 as isize);\n+\n+        ptr.wrapping_add(offset_usize);\n+        ptr.wrapping_offset(offset_isize as isize);\n+        ptr.wrapping_offset(offset_u8 as isize);\n+    }\n+}"}, {"sha": "23eb4c6ce8ac66f1b716cd5e489ec618fc511185", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n fn main() {\n     let vec = vec![b'a', b'b', b'c'];\n     let ptr = vec.as_ptr();"}, {"sha": "98e3ff92a6e9b0a13633b555a355ce49bcdb251c", "filename": "tests/ui/ptr_offset_with_cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fptr_offset_with_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,13 +1,13 @@\n error: use of `offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:19:9\n+  --> $DIR/ptr_offset_with_cast.rs:21:9\n    |\n LL |         ptr.offset(offset_usize as isize);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.add(offset_usize)`\n    |\n    = note: `-D clippy::ptr-offset-with-cast` implied by `-D warnings`\n \n error: use of `wrapping_offset` with a `usize` casted to an `isize`\n-  --> $DIR/ptr_offset_with_cast.rs:23:9\n+  --> $DIR/ptr_offset_with_cast.rs:25:9\n    |\n LL |         ptr.wrapping_offset(offset_usize as isize);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr.wrapping_add(offset_usize)`"}, {"sha": "c3c399f0ce3401c555cb2eca56c1ae3d1a1dc539", "filename": "tests/ui/single_char_pattern.fixed", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let x = \"foo\";\n+    x.split('x');\n+    x.split(\"xx\");\n+    x.split('x');\n+\n+    let y = \"x\";\n+    x.split(y);\n+    // Not yet testing for multi-byte characters\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n+    // should have done this but produced an ICE\n+    //\n+    // We may not want to suggest changing these anyway\n+    // See: https://github.com/rust-lang/rust-clippy/issues/650#issuecomment-184328984\n+    x.split(\"\u00df\");\n+    x.split(\"\u211d\");\n+    x.split(\"\ud83d\udca3\");\n+    // Can't use this lint for unicode code points which don't fit in a char\n+    x.split(\"\u2764\ufe0f\");\n+    x.contains('x');\n+    x.starts_with('x');\n+    x.ends_with('x');\n+    x.find('x');\n+    x.rfind('x');\n+    x.rsplit('x');\n+    x.split_terminator('x');\n+    x.rsplit_terminator('x');\n+    x.splitn(0, 'x');\n+    x.rsplitn(0, 'x');\n+    x.matches('x');\n+    x.rmatches('x');\n+    x.match_indices('x');\n+    x.rmatch_indices('x');\n+    x.trim_start_matches('x');\n+    x.trim_end_matches('x');\n+    // Make sure we escape characters correctly.\n+    x.split('\\n');\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n+\n+    x.replace(\";\", \",\").split(','); // issue #2978\n+    x.starts_with('\\x03'); // issue #2996\n+\n+    // Issue #3204\n+    const S: &str = \"#\";\n+    x.find(S);\n+}"}, {"sha": "cf2fe66236a5617a1ac2bb5fdb82888a09c10dbc", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n use std::collections::HashSet;\n \n fn main() {"}, {"sha": "7bc92a965369b193a254c9448725668c7e331fa9", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,121 +1,121 @@\n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:14:13\n+  --> $DIR/single_char_pattern.rs:16:13\n    |\n LL |     x.split(\"x\");\n    |             ^^^ help: try using a char instead: `'x'`\n    |\n    = note: `-D clippy::single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:31:16\n+  --> $DIR/single_char_pattern.rs:33:16\n    |\n LL |     x.contains(\"x\");\n    |                ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:32:19\n+  --> $DIR/single_char_pattern.rs:34:19\n    |\n LL |     x.starts_with(\"x\");\n    |                   ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:33:17\n+  --> $DIR/single_char_pattern.rs:35:17\n    |\n LL |     x.ends_with(\"x\");\n    |                 ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:34:12\n+  --> $DIR/single_char_pattern.rs:36:12\n    |\n LL |     x.find(\"x\");\n    |            ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:35:13\n+  --> $DIR/single_char_pattern.rs:37:13\n    |\n LL |     x.rfind(\"x\");\n    |             ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:36:14\n+  --> $DIR/single_char_pattern.rs:38:14\n    |\n LL |     x.rsplit(\"x\");\n    |              ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:37:24\n+  --> $DIR/single_char_pattern.rs:39:24\n    |\n LL |     x.split_terminator(\"x\");\n    |                        ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:38:25\n+  --> $DIR/single_char_pattern.rs:40:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n    |                         ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:39:17\n+  --> $DIR/single_char_pattern.rs:41:17\n    |\n LL |     x.splitn(0, \"x\");\n    |                 ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:40:18\n+  --> $DIR/single_char_pattern.rs:42:18\n    |\n LL |     x.rsplitn(0, \"x\");\n    |                  ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:41:15\n+  --> $DIR/single_char_pattern.rs:43:15\n    |\n LL |     x.matches(\"x\");\n    |               ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:42:16\n+  --> $DIR/single_char_pattern.rs:44:16\n    |\n LL |     x.rmatches(\"x\");\n    |                ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:43:21\n+  --> $DIR/single_char_pattern.rs:45:21\n    |\n LL |     x.match_indices(\"x\");\n    |                     ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:44:22\n+  --> $DIR/single_char_pattern.rs:46:22\n    |\n LL |     x.rmatch_indices(\"x\");\n    |                      ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:45:26\n+  --> $DIR/single_char_pattern.rs:47:26\n    |\n LL |     x.trim_start_matches(\"x\");\n    |                          ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:46:24\n+  --> $DIR/single_char_pattern.rs:48:24\n    |\n LL |     x.trim_end_matches(\"x\");\n    |                        ^^^ help: try using a char instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:48:13\n+  --> $DIR/single_char_pattern.rs:50:13\n    |\n LL |     x.split(\"/n\");\n    |             ^^^^ help: try using a char instead: `'/n'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:53:31\n+  --> $DIR/single_char_pattern.rs:55:31\n    |\n LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n    |                               ^^^ help: try using a char instead: `','`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:54:19\n+  --> $DIR/single_char_pattern.rs:56:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a char instead: `'/x03'`"}, {"sha": "7463baff2afa196fb55f9e80a88ac29fc8ff3bd6", "filename": "tests/ui/string_extend.fixed", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n+fn main() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.push_str(abc);\n+\n+    s.push_str(\"abc\");\n+    s.push_str(\"abc\");\n+\n+    s.push_str(&def);\n+    s.push_str(&def);\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}"}, {"sha": "3a2ad2695dec8891dc4c3f00dafcb75eb2bf5082", "filename": "tests/ui/string_extend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #[derive(Copy, Clone)]\n struct HasChars;\n "}, {"sha": "5638dd87ed197bea6d183067b94988cf070fce70", "filename": "tests/ui/string_extend.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,19 +1,19 @@\n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:25:5\n+  --> $DIR/string_extend.rs:27:5\n    |\n LL |     s.extend(abc.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n    |\n    = note: `-D clippy::string-extend-chars` implied by `-D warnings`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:28:5\n+  --> $DIR/string_extend.rs:30:5\n    |\n LL |     s.extend(\"abc\".chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n \n error: calling `.extend(_.chars())`\n-  --> $DIR/string_extend.rs:31:5\n+  --> $DIR/string_extend.rs:33:5\n    |\n LL |     s.extend(def.chars());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`"}, {"sha": "4c466035a0478d91f522c8d2595cfaaa10bf4803", "filename": "tests/ui/unreadable_literal.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#[warn(clippy::unreadable_literal)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let good = (\n+        0b1011_i64,\n+        0o1_234_u32,\n+        0x1_234_567,\n+        65536,\n+        1_2345_6789,\n+        1234_f32,\n+        1_234.12_f32,\n+        1_234.123_f32,\n+        1.123_4_f32,\n+    );\n+    let bad = (0b11_0110_i64, 0x0123_4567_8901_usize, 123_456_f32, 1.234_567_f32);\n+    let good_sci = 1.1234e1;\n+    let bad_sci = 1.123_456e1;\n+}"}, {"sha": "8ade2f6a8630029ecfdab81d023e1ef5153e820f", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #[warn(clippy::unreadable_literal)]\n #[allow(unused_variables)]\n fn main() {"}, {"sha": "685804858536579084181e15d3eb4ae7f97f6329", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,31 +1,31 @@\n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:24:16\n+  --> $DIR/unreadable_literal.rs:26:16\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:24:30\n+  --> $DIR/unreadable_literal.rs:26:30\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                              ^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:24:51\n+  --> $DIR/unreadable_literal.rs:26:51\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                                                   ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:24:63\n+  --> $DIR/unreadable_literal.rs:26:63\n    |\n LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n    |                                                               ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:26:19\n+  --> $DIR/unreadable_literal.rs:28:19\n    |\n LL |     let bad_sci = 1.123456e1;\n    |                   ^^^^^^^^^^ help: consider: `1.123_456e1`"}, {"sha": "2eaba1c408a130d0d1846ade9b977b231fed9d67", "filename": "tests/ui/vec.fixed", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![warn(clippy::useless_vec)]\n+\n+#[derive(Debug)]\n+struct NonCopy;\n+\n+fn on_slice(_: &[u8]) {}\n+#[allow(clippy::ptr_arg)]\n+fn on_vec(_: &Vec<u8>) {}\n+\n+struct Line {\n+    length: usize,\n+}\n+\n+impl Line {\n+    fn length(&self) -> usize {\n+        self.length\n+    }\n+}\n+\n+fn main() {\n+    on_slice(&[]);\n+    on_slice(&[]);\n+\n+    on_slice(&[1, 2]);\n+    on_slice(&[1, 2]);\n+\n+    on_slice(&[1, 2]);\n+    on_slice(&[1, 2]);\n+    #[rustfmt::skip]\n+    on_slice(&[1, 2]);\n+    on_slice(&[1, 2]);\n+\n+    on_slice(&[1; 2]);\n+    on_slice(&[1; 2]);\n+\n+    on_vec(&vec![]);\n+    on_vec(&vec![1, 2]);\n+    on_vec(&vec![1; 2]);\n+\n+    // Now with non-constant expressions\n+    let line = Line { length: 2 };\n+\n+    on_slice(&vec![2; line.length]);\n+    on_slice(&vec![2; line.length()]);\n+\n+    for a in &[1, 2, 3] {\n+        println!(\"{:?}\", a);\n+    }\n+\n+    for a in vec![NonCopy, NonCopy] {\n+        println!(\"{:?}\", a);\n+    }\n+}"}, {"sha": "1648215ed35cec29cbb8e56a7ee96e831c295500", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #![warn(clippy::useless_vec)]\n \n #[derive(Debug)]"}, {"sha": "96dd187ccc5a2ddeb4e757d055079a31ecc190a7", "filename": "tests/ui/vec.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,37 +1,37 @@\n error: useless use of `vec!`\n-  --> $DIR/vec.rs:30:14\n+  --> $DIR/vec.rs:32:14\n    |\n LL |     on_slice(&vec![]);\n    |              ^^^^^^^ help: you can use a slice directly: `&[]`\n    |\n    = note: `-D clippy::useless-vec` implied by `-D warnings`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:33:14\n+  --> $DIR/vec.rs:35:14\n    |\n LL |     on_slice(&vec![1, 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:36:14\n+  --> $DIR/vec.rs:38:14\n    |\n LL |     on_slice(&vec![1, 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:39:14\n+  --> $DIR/vec.rs:41:14\n    |\n LL |     on_slice(&vec!(1, 2));\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:42:14\n+  --> $DIR/vec.rs:44:14\n    |\n LL |     on_slice(&vec![1; 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1; 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:55:14\n+  --> $DIR/vec.rs:57:14\n    |\n LL |     for a in vec![1, 2, 3] {\n    |              ^^^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2, 3]`"}, {"sha": "68b8185083d3acdf264c8750173117147e1f0fa1", "filename": "tests/ui/writeln_empty_string.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.fixed?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(unused_must_use)]\n+#![warn(clippy::writeln_empty_string)]\n+use std::io::Write;\n+\n+fn main() {\n+    let mut v = Vec::new();\n+\n+    // These should fail\n+    writeln!(&mut v);\n+\n+    let mut suggestion = Vec::new();\n+    writeln!(&mut suggestion);\n+\n+    // These should be fine\n+    writeln!(&mut v);\n+    writeln!(&mut v, \" \");\n+    write!(&mut v, \"\");\n+}"}, {"sha": "ba43552af233ce8370c38a0f7bf9a4a39f2e45b4", "filename": "tests/ui/writeln_empty_string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.rs?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n #![allow(unused_must_use)]\n #![warn(clippy::writeln_empty_string)]\n use std::io::Write;"}, {"sha": "119710c0cdb1b22e214fa91a59aa6e1f18b83340", "filename": "tests/ui/writeln_empty_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05467abd2481a2d2437c77bc988735e8f4f610f9/tests%2Fui%2Fwriteln_empty_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.stderr?ref=05467abd2481a2d2437c77bc988735e8f4f610f9", "patch": "@@ -1,13 +1,13 @@\n error: using `writeln!(&mut v, \"\")`\n-  --> $DIR/writeln_empty_string.rs:18:5\n+  --> $DIR/writeln_empty_string.rs:20:5\n    |\n LL |     writeln!(&mut v, \"\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(&mut v)`\n    |\n    = note: `-D clippy::writeln-empty-string` implied by `-D warnings`\n \n error: using `writeln!(&mut suggestion, \"\")`\n-  --> $DIR/writeln_empty_string.rs:21:5\n+  --> $DIR/writeln_empty_string.rs:23:5\n    |\n LL |     writeln!(&mut suggestion, \"\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `writeln!(&mut suggestion)`"}]}