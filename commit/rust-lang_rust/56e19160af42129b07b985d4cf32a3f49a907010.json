{"sha": "56e19160af42129b07b985d4cf32a3f49a907010", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTE5MTYwYWY0MjEyOWIwN2I5ODVkNGNmMzJhM2Y0OWE5MDcwMTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T01:41:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T01:41:21Z"}, "message": "Rollup merge of #58296 - estebank:hidden-suggestion, r=oli-obk\n\nHidden suggestion support\n\nAdd way to hide suggestion snippet window from cli output to avoid cluttered spans that don't enhance understanding.\n\nr? @pietroalbini CC @zackmdavis", "tree": {"sha": "26e19d1b5374cd4dc690d8320ec96e320f31be44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e19d1b5374cd4dc690d8320ec96e320f31be44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e19160af42129b07b985d4cf32a3f49a907010", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZMdCCRBK7hj4Ov3rIwAAdHIIAFyz96FvIvuOsaT5l09J9cxW\npwMqDJHrb/CJKRpkf36I9j0pYuyZYxgs85Qooq9cvdv2q7OM5fDx1j50BO1OvFM5\nDlfjB4094FkbTtNAu7u8rYsw9g4NpAY4Km4r8rfZeDbJyafwwwJVxd1iX/emSNBC\nv0rVX/E4h33qPcoE+sC/GS2YEfBIMyRLa8uz2+JqTYuEZbbH8CUpKHZl1C2wO2L1\nR9yJrBYHOjpUg/ikaLQ3IMy0rDDIx3y8RgYMUkkFjkmyaUtbcHQZT0CU1JpoMnmb\nYvAwuDhtF8eB7HkM0gFYAj18AuX5mnXOeycN3TUSnB2+Hqq37GsKFYHaeHl42wk=\n=eKG+\n-----END PGP SIGNATURE-----\n", "payload": "tree 26e19d1b5374cd4dc690d8320ec96e320f31be44\nparent 4ad3cf25330a239cf66c150dadb9efe7b4126973\nparent 87dd2e1df95f96dbf08a0f3ae77a2dcbd6d384e9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550108481 +0100\ncommitter GitHub <noreply@github.com> 1550108481 +0100\n\nRollup merge of #58296 - estebank:hidden-suggestion, r=oli-obk\n\nHidden suggestion support\n\nAdd way to hide suggestion snippet window from cli output to avoid cluttered spans that don't enhance understanding.\n\nr? @pietroalbini CC @zackmdavis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e19160af42129b07b985d4cf32a3f49a907010", "html_url": "https://github.com/rust-lang/rust/commit/56e19160af42129b07b985d4cf32a3f49a907010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e19160af42129b07b985d4cf32a3f49a907010/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad3cf25330a239cf66c150dadb9efe7b4126973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad3cf25330a239cf66c150dadb9efe7b4126973", "html_url": "https://github.com/rust-lang/rust/commit/4ad3cf25330a239cf66c150dadb9efe7b4126973"}, {"sha": "87dd2e1df95f96dbf08a0f3ae77a2dcbd6d384e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/87dd2e1df95f96dbf08a0f3ae77a2dcbd6d384e9", "html_url": "https://github.com/rust-lang/rust/commit/87dd2e1df95f96dbf08a0f3ae77a2dcbd6d384e9"}], "stats": {"total": 314, "additions": 245, "deletions": 69}, "files": [{"sha": "655707ff9bd0da0f962192f28c0bd5d0eb690818", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -557,7 +557,7 @@ impl BuiltinLintDiagnostics {\n             }\n             BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n                 if !replaces.is_empty() {\n-                    db.multipart_suggestion(\n+                    db.tool_only_multipart_suggestion(\n                         &message,\n                         replaces,\n                         Applicability::MachineApplicable,"}, {"sha": "851b19e8177b53917f37cf4a9bcab637fb5f2abe", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -1,4 +1,5 @@\n use crate::CodeSuggestion;\n+use crate::SuggestionStyle;\n use crate::SubstitutionPart;\n use crate::Substitution;\n use crate::Applicability;\n@@ -243,7 +244,33 @@ impl Diagnostic {\n                     .collect(),\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n+            applicability,\n+        });\n+        self\n+    }\n+\n+    /// Prints out a message with for a multipart suggestion without showing the suggested code.\n+    ///\n+    /// This is intended to be used for suggestions that are obvious in what the changes need to\n+    /// be from the message, showing the span label inline would be visually unpleasant\n+    /// (marginally overlapping spans or multiline spans) and showing the snippet window wouldn't\n+    /// improve understandability.\n+    pub fn tool_only_multipart_suggestion(\n+        &mut self,\n+        msg: &str,\n+        suggestion: Vec<(Span, String)>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: suggestion\n+                    .into_iter()\n+                    .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                    .collect(),\n+            }],\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::CompletelyHidden,\n             applicability,\n         });\n         self\n@@ -277,7 +304,7 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n         self\n@@ -295,7 +322,7 @@ impl Diagnostic {\n                 }],\n             }).collect(),\n             msg: msg.to_owned(),\n-            show_code_when_inline: true,\n+            style: SuggestionStyle::ShowCode,\n             applicability,\n         });\n         self\n@@ -316,7 +343,51 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            show_code_when_inline: false,\n+            style: SuggestionStyle::HideCodeInline,\n+            applicability,\n+        });\n+        self\n+    }\n+\n+    /// Prints out a message with for a suggestion without showing the suggested code.\n+    ///\n+    /// This is intended to be used for suggestions that are obvious in what the changes need to\n+    /// be from the message, showing the span label inline would be visually unpleasant\n+    /// (marginally overlapping spans or multiline spans) and showing the snippet window wouldn't\n+    /// improve understandability.\n+    pub fn span_suggestion_hidden(\n+        &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::HideCodeInline,\n+            applicability,\n+        });\n+        self\n+    }\n+\n+    /// Adds a suggestion to the json output, but otherwise remains silent/undisplayed in the cli.\n+    ///\n+    /// This is intended to be used for suggestions that are *very* obvious in what the changes\n+    /// need to be from the message, but we still want other tools to be able to apply them.\n+    pub fn tool_only_span_suggestion(\n+        &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::CompletelyHidden,\n             applicability: applicability,\n         });\n         self"}, {"sha": "8a30790174d45bec2886204aaff5dc2a2c211e48", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -205,6 +205,24 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    pub fn tool_only_multipart_suggestion(\n+        &mut self,\n+        msg: &str,\n+        suggestion: Vec<(Span, String)>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.tool_only_multipart_suggestion(\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n+\n+\n     pub fn span_suggestion(\n         &mut self,\n         sp: Span,\n@@ -261,6 +279,45 @@ impl<'a> DiagnosticBuilder<'a> {\n         );\n         self\n     }\n+\n+    pub fn span_suggestion_hidden(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.span_suggestion_hidden(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n+\n+    pub fn tool_only_span_suggestion(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.allow_suggestions {\n+            return self\n+        }\n+        self.diagnostic.tool_only_span_suggestion(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+        );\n+        self\n+    }\n+\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n "}, {"sha": "e9f269b6e2410b311fbee1c6ad15fd632baf17fe", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,10 @@ use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n-use crate::{Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, DiagnosticId};\n+use crate::{\n+    Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic,\n+    SuggestionStyle, SourceMapperDyn, DiagnosticId,\n+};\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use crate::styled_buffer::StyledBuffer;\n \n@@ -43,9 +46,14 @@ impl Emitter for EmitterWriter {\n                // don't display long messages as labels\n                sugg.msg.split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n-               !sugg.substitutions[0].parts[0].snippet.contains('\\n') {\n+               !sugg.substitutions[0].parts[0].snippet.contains('\\n') &&\n+               // when this style is set we want the suggestion to be a message, not inline\n+               sugg.style != SuggestionStyle::HideCodeAlways &&\n+               // trivial suggestion for tooling's sake, never shown\n+               sugg.style != SuggestionStyle::CompletelyHidden\n+            {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n-                let msg = if substitution.len() == 0 || !sugg.show_code_when_inline {\n+                let msg = if substitution.len() == 0 || sugg.style.hide_inline() {\n                     // This substitution is only removal or we explicitly don't want to show the\n                     // code inline, don't show it\n                     format!(\"help: {}\", sugg.msg)\n@@ -942,14 +950,15 @@ impl EmitterWriter {\n         }\n     }\n \n-    fn emit_message_default(&mut self,\n-                            msp: &MultiSpan,\n-                            msg: &[(String, Style)],\n-                            code: &Option<DiagnosticId>,\n-                            level: &Level,\n-                            max_line_num_len: usize,\n-                            is_secondary: bool)\n-                            -> io::Result<()> {\n+    fn emit_message_default(\n+        &mut self,\n+        msp: &MultiSpan,\n+        msg: &[(String, Style)],\n+        code: &Option<DiagnosticId>,\n+        level: &Level,\n+        max_line_num_len: usize,\n+        is_secondary: bool,\n+    ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n         let header_style = if is_secondary {\n             Style::HeaderMsg\n@@ -1184,11 +1193,12 @@ impl EmitterWriter {\n \n     }\n \n-    fn emit_suggestion_default(&mut self,\n-                               suggestion: &CodeSuggestion,\n-                               level: &Level,\n-                               max_line_num_len: usize)\n-                               -> io::Result<()> {\n+    fn emit_suggestion_default(\n+        &mut self,\n+        suggestion: &CodeSuggestion,\n+        level: &Level,\n+        max_line_num_len: usize,\n+    ) -> io::Result<()> {\n         if let Some(ref sm) = self.sm {\n             let mut buffer = StyledBuffer::new();\n \n@@ -1198,11 +1208,13 @@ impl EmitterWriter {\n                 buffer.append(0, &level_str, Style::Level(level.clone()));\n                 buffer.append(0, \": \", Style::HeaderMsg);\n             }\n-            self.msg_to_buffer(&mut buffer,\n-                               &[(suggestion.msg.to_owned(), Style::NoStyle)],\n-                               max_line_num_len,\n-                               \"suggestion\",\n-                               Some(Style::HeaderMsg));\n+            self.msg_to_buffer(\n+                &mut buffer,\n+                &[(suggestion.msg.to_owned(), Style::NoStyle)],\n+                max_line_num_len,\n+                \"suggestion\",\n+                Some(Style::HeaderMsg),\n+            );\n \n             // Render the replacements for each suggestion\n             let suggestions = suggestion.splice_lines(&**sm);\n@@ -1340,22 +1352,42 @@ impl EmitterWriter {\n                 if !self.short_message {\n                     for child in children {\n                         let span = child.render_span.as_ref().unwrap_or(&child.span);\n-                        match self.emit_message_default(&span,\n-                                                        &child.styled_message(),\n-                                                        &None,\n-                                                        &child.level,\n-                                                        max_line_num_len,\n-                                                        true) {\n+                        match self.emit_message_default(\n+                            &span,\n+                            &child.styled_message(),\n+                            &None,\n+                            &child.level,\n+                            max_line_num_len,\n+                            true,\n+                        ) {\n                             Err(e) => panic!(\"failed to emit error: {}\", e),\n                             _ => ()\n                         }\n                     }\n                     for sugg in suggestions {\n-                        match self.emit_suggestion_default(sugg,\n-                                                           &Level::Help,\n-                                                           max_line_num_len) {\n-                            Err(e) => panic!(\"failed to emit error: {}\", e),\n-                            _ => ()\n+                        if sugg.style == SuggestionStyle::CompletelyHidden {\n+                            // do not display this suggestion, it is meant only for tools\n+                        } else if sugg.style == SuggestionStyle::HideCodeAlways {\n+                            match self.emit_message_default(\n+                                &MultiSpan::new(),\n+                                &[(sugg.msg.to_owned(), Style::HeaderMsg)],\n+                                &None,\n+                                &Level::Help,\n+                                max_line_num_len,\n+                                true,\n+                            ) {\n+                                Err(e) => panic!(\"failed to emit error: {}\", e),\n+                                _ => ()\n+                            }\n+                        } else {\n+                            match self.emit_suggestion_default(\n+                                sugg,\n+                                &Level::Help,\n+                                max_line_num_len,\n+                            ) {\n+                                Err(e) => panic!(\"failed to emit error: {}\", e),\n+                                _ => ()\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "87b47515268359b1331af2c676fd278fb14b02a3", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -69,6 +69,29 @@ pub enum Applicability {\n     Unspecified,\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, RustcEncodable, RustcDecodable)]\n+pub enum SuggestionStyle {\n+    /// Hide the suggested code when displaying this suggestion inline.\n+    HideCodeInline,\n+    /// Always hide the suggested code but display the message.\n+    HideCodeAlways,\n+    /// Do not display this suggestion in the cli output, it is only meant for tools.\n+    CompletelyHidden,\n+    /// Always show the suggested code.\n+    /// This will *not* show the code if the suggestion is inline *and* the suggested code is\n+    /// empty.\n+    ShowCode,\n+}\n+\n+impl SuggestionStyle {\n+    fn hide_inline(&self) -> bool {\n+        match *self {\n+            SuggestionStyle::ShowCode => false,\n+            _ => true,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -94,7 +117,8 @@ pub struct CodeSuggestion {\n     /// ```\n     pub substitutions: Vec<Substitution>,\n     pub msg: String,\n-    pub show_code_when_inline: bool,\n+    /// Visual representation of this suggestion.\n+    pub style: SuggestionStyle,\n     /// Whether or not the suggestion is approximate\n     ///\n     /// Sometimes we may show suggestions with placeholders,"}, {"sha": "d7ec41489d15615b186138b92abd3f6f46a83905", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `std::option`\n   --> $DIR/bad-lint-cap2.rs:6:5\n    |\n LL | use std::option; //~ ERROR\n-   | ----^^^^^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/bad-lint-cap2.rs:4:9"}, {"sha": "5bf0b089afa20340b908341a8e8b4d00debec7e6", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `std::option`\n   --> $DIR/bad-lint-cap3.rs:7:5\n    |\n LL | use std::option; //~ WARN\n-   | ----^^^^^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/bad-lint-cap3.rs:4:9"}, {"sha": "b56e930158cc1be5ec073716719021c9421c7da8", "filename": "src/test/ui/imports/unused.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `super::f`\n   --> $DIR/unused.rs:7:24\n    |\n LL |         pub(super) use super::f; //~ ERROR unused\n-   |         ---------------^^^^^^^^- help: remove the whole `use` item\n+   |                        ^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/unused.rs:1:9"}, {"sha": "0a901076f467aabf0b1e6627f364890e9d70db8e", "filename": "src/test/ui/issues/issue-30730.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `std::thread`\n   --> $DIR/issue-30730.rs:3:5\n    |\n LL | use std::thread;\n-   | ----^^^^^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/issue-30730.rs:2:9"}, {"sha": "170b98a12a848d275c311855be4273a1a93d0251", "filename": "src/test/ui/lint/lint-directives-on-use-items-issue-10534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-directives-on-use-items-issue-10534.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `a::x`\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:12:9\n    |\n LL |     use a::x; //~ ERROR: unused import\n-   |     ----^^^^- help: remove the whole `use` item\n+   |         ^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:1:9\n@@ -14,7 +14,7 @@ error: unused import: `a::y`\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:21:9\n    |\n LL |     use a::y; //~ ERROR: unused import\n-   |     ----^^^^- help: remove the whole `use` item\n+   |         ^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-directives-on-use-items-issue-10534.rs:20:12"}, {"sha": "18f2fae0067eb94cdd9c313f1ab6641ec1e62433", "filename": "src/test/ui/lint/lint-unused-imports.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `std::fmt::{}`\n   --> $DIR/lint-unused-imports.rs:8:5\n    |\n LL | use std::fmt::{};\n-   | ----^^^^^^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-unused-imports.rs:1:9\n@@ -14,39 +14,37 @@ error: unused imports: `None`, `Some`\n   --> $DIR/lint-unused-imports.rs:12:27\n    |\n LL | use std::option::Option::{Some, None};\n-   | --------------------------^^^^--^^^^-- help: remove the whole `use` item\n+   |                           ^^^^  ^^^^\n \n error: unused import: `test::A`\n   --> $DIR/lint-unused-imports.rs:15:5\n    |\n LL | use test::A;       //~ ERROR unused import: `test::A`\n-   | ----^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^\n \n error: unused import: `bar`\n   --> $DIR/lint-unused-imports.rs:24:18\n    |\n LL | use test2::{foo, bar}; //~ ERROR unused import: `bar`\n-   |                --^^^\n-   |                |\n-   |                help: remove the unused import\n+   |                  ^^^\n \n error: unused import: `foo::Square`\n   --> $DIR/lint-unused-imports.rs:52:13\n    |\n LL |         use foo::Square; //~ ERROR unused import: `foo::Square`\n-   |         ----^^^^^^^^^^^- help: remove the whole `use` item\n+   |             ^^^^^^^^^^^\n \n error: unused import: `self::g`\n   --> $DIR/lint-unused-imports.rs:68:9\n    |\n LL |     use self::g; //~ ERROR unused import: `self::g`\n-   |     ----^^^^^^^- help: remove the whole `use` item\n+   |         ^^^^^^^\n \n error: unused import: `test2::foo`\n   --> $DIR/lint-unused-imports.rs:77:9\n    |\n LL |     use test2::foo; //~ ERROR unused import: `test2::foo`\n-   |     ----^^^^^^^^^^- help: remove the whole `use` item\n+   |         ^^^^^^^^^^\n \n error: unused import: `test::B2`\n   --> $DIR/lint-unused-imports.rs:20:5"}, {"sha": "8287ca5692bd98f3485f4d451bcc1166fd0954c0", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:11:16\n    |\n LL |     () => {use std::string::ToString;} //~ WARN: unused import\n-   |            ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | mod a { foo!(); }\n    |         ------- in this macro invocation\n@@ -17,13 +17,13 @@ warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:16:18\n    |\n LL | mod c { baz!(use std::string::ToString;); } //~ WARN: unused import\n-   |              ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n+   |                  ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:17:19\n    |\n LL | mod d { baz2!(use std::string::ToString;); } //~ WARN: unused import\n-   |               ----^^^^^^^^^^^^^^^^^^^^^- help: remove the whole `use` item\n+   |                   ^^^^^^^^^^^^^^^^^^^^^\n \n warning: missing documentation for crate\n   --> $DIR/lints-in-foreign-macros.rs:4:1"}, {"sha": "308035919260377fcf1e64ae1aded3dfbb9f4ec6", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ warning: unused import: `m::Tr1 as _`\n   --> $DIR/basic.rs:26:9\n    |\n LL |     use m::Tr1 as _; //~ WARN unused import\n-   |     ----^^^^^^^^^^^- help: remove the whole `use` item\n+   |         ^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/basic.rs:4:9\n@@ -14,5 +14,5 @@ warning: unused import: `S as _`\n   --> $DIR/basic.rs:27:9\n    |\n LL |     use S as _; //~ WARN unused import\n-   |     ----^^^^^^- help: remove the whole `use` item\n+   |         ^^^^^^\n "}, {"sha": "4163c2876074befdc95f7a8fda5184b84e03d9a2", "filename": "src/test/ui/rfc-2166-underscore-imports/unused-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Funused-2018.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused import: `core::any`\n   --> $DIR/unused-2018.rs:6:9\n    |\n LL |     use core::any; //~ ERROR unused import: `core::any`\n-   |     ----^^^^^^^^^- help: remove the whole `use` item\n+   |         ^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/unused-2018.rs:3:9\n@@ -14,7 +14,7 @@ error: unused import: `core`\n   --> $DIR/unused-2018.rs:10:9\n    |\n LL |     use core; //~ ERROR unused import: `core`\n-   |     ----^^^^- help: remove the whole `use` item\n+   |         ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a730d081b7c035e0e2330fc5fce8029f09033665", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -10,8 +10,4 @@ note: lint level defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: #[warn(unused_imports)] implied by #[warn(unused)]\n-help: remove the unused imports\n-   |\n-LL | use std::cmp::{min};\n-   |               -- --\n "}, {"sha": "c8df6cbc57dcab71de0cb3fdeb8a58dbeb07afbb", "filename": "src/test/ui/use/use-nested-groups-unused-imports.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56e19160af42129b07b985d4cf32a3f49a907010/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-nested-groups-unused-imports.stderr?ref=56e19160af42129b07b985d4cf32a3f49a907010", "patch": "@@ -2,7 +2,7 @@ error: unused imports: `*`, `Foo`, `baz::{}`, `foobar::*`\n   --> $DIR/use-nested-groups-unused-imports.rs:16:11\n    |\n LL | use foo::{Foo, bar::{baz::{}, foobar::*}, *};\n-   | ----------^^^--------^^^^^^^--^^^^^^^^^---^-- help: remove the whole `use` item\n+   |           ^^^        ^^^^^^^  ^^^^^^^^^   ^\n    |\n note: lint level defined here\n   --> $DIR/use-nested-groups-unused-imports.rs:3:9\n@@ -14,15 +14,13 @@ error: unused import: `*`\n   --> $DIR/use-nested-groups-unused-imports.rs:18:24\n    |\n LL | use foo::bar::baz::{*, *};\n-   |                      --^\n-   |                      |\n-   |                      help: remove the unused import\n+   |                        ^\n \n error: unused import: `foo::{}`\n   --> $DIR/use-nested-groups-unused-imports.rs:20:5\n    |\n LL | use foo::{};\n-   | ----^^^^^^^- help: remove the whole `use` item\n+   |     ^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}