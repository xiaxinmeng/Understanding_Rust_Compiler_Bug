{"sha": "96c4542dc3c7001d5a28b05d067701f2173e9eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YzQ1NDJkYzNjNzAwMWQ1YTI4YjA1ZDA2NzcwMWYyMTczZTllYjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-12T10:09:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-12T10:09:58Z"}, "message": "Avoid muliplications by 1\n\n```\nBenchmark #1: ./raytracer_cg_clif_pre\n  Time (mean \u00b1 \u03c3):      9.553 s \u00b1  0.129 s    [User: 9.543 s, System: 0.008 s]\n  Range (min \u2026 max):    9.438 s \u2026  9.837 s    10 runs\n\nBenchmark #2: ./raytracer_cg_clif_post\n  Time (mean \u00b1 \u03c3):      9.463 s \u00b1  0.055 s    [User: 9.452 s, System: 0.008 s]\n  Range (min \u2026 max):    9.387 s \u2026  9.518 s    10 runs\n\nSummary\n  './raytracer_cg_clif_post' ran\n    1.01 \u00b1 0.01 times faster than './raytracer_cg_clif_pre'\n```", "tree": {"sha": "ef90fdbf74b155894555ec9760cf4cda1ffb2f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef90fdbf74b155894555ec9760cf4cda1ffb2f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c4542dc3c7001d5a28b05d067701f2173e9eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c4542dc3c7001d5a28b05d067701f2173e9eb4", "html_url": "https://github.com/rust-lang/rust/commit/96c4542dc3c7001d5a28b05d067701f2173e9eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c4542dc3c7001d5a28b05d067701f2173e9eb4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4700926e54e71002f25c5fbf95dc6d099589837f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4700926e54e71002f25c5fbf95dc6d099589837f", "html_url": "https://github.com/rust-lang/rust/commit/4700926e54e71002f25c5fbf95dc6d099589837f"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "f613d8b8450369d7937e990637e38a3a52271e7b", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96c4542dc3c7001d5a28b05d067701f2173e9eb4/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c4542dc3c7001d5a28b05d067701f2173e9eb4/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=96c4542dc3c7001d5a28b05d067701f2173e9eb4", "patch": "@@ -497,12 +497,12 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n         copy | copy_nonoverlapping, <elem_ty> (v src, v dst, v count) {\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-            let elem_size = fx\n-                .bcx\n-                .ins()\n-                .iconst(fx.pointer_type, elem_size as i64);\n             assert_eq!(args.len(), 3);\n-            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+            let byte_amount = if elem_size != 1 {\n+                fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+                count\n+            };\n \n             if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n@@ -515,12 +515,12 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         // NOTE: the volatile variants have src and dst swapped\n         volatile_copy_memory | volatile_copy_nonoverlapping_memory, <elem_ty> (v dst, v src, v count) {\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-            let elem_size = fx\n-                .bcx\n-                .ins()\n-                .iconst(fx.pointer_type, elem_size as i64);\n             assert_eq!(args.len(), 3);\n-            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+            let byte_amount = if elem_size != 1 {\n+                fx.bcx.ins().imul_imm(count, elem_size as i64)\n+            } else {\n+                count\n+            };\n \n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic.contains(\"nonoverlapping\") {\n@@ -676,7 +676,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         offset | arith_offset, (c base, v offset) {\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n-            let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n+            let ptr_diff = if pointee_size != 1 {\n+                fx.bcx.ins().imul_imm(offset, pointee_size as i64)\n+            } else {\n+                offset\n+            };\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n@@ -688,7 +692,11 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         write_bytes | volatile_set_memory, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n-            let count = fx.bcx.ins().imul_imm(count, pointee_size as i64);\n+            let count = if pointee_size != 1 {\n+                fx.bcx.ins().imul_imm(count, pointee_size as i64)\n+            } else {\n+                count\n+            };\n             let dst_ptr = dst.load_scalar(fx);\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset"}]}