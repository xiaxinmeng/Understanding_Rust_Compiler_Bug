{"sha": "7649d1c2a8d53dc5928450d6d7befd602bc966cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDlkMWMyYThkNTNkYzU5Mjg0NTBkNmQ3YmVmZDYwMmJjOTY2Y2Q=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-02T16:17:38Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-02T16:24:46Z"}, "message": "shadow: complete coverage of \"contains_self\" checker", "tree": {"sha": "9009ad67d4787bfd35e30456b146e23b4503b71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9009ad67d4787bfd35e30456b146e23b4503b71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7649d1c2a8d53dc5928450d6d7befd602bc966cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7649d1c2a8d53dc5928450d6d7befd602bc966cd", "html_url": "https://github.com/rust-lang/rust/commit/7649d1c2a8d53dc5928450d6d7befd602bc966cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7649d1c2a8d53dc5928450d6d7befd602bc966cd/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8edc87e3bdcdad4e4bf51e6bcfb7d68f592a3005", "url": "https://api.github.com/repos/rust-lang/rust/commits/8edc87e3bdcdad4e4bf51e6bcfb7d68f592a3005", "html_url": "https://github.com/rust-lang/rust/commit/8edc87e3bdcdad4e4bf51e6bcfb7d68f592a3005"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "7f555d4be85a9732fcb0fd0142b8c25a699b7960", "filename": "src/shadow.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7649d1c2a8d53dc5928450d6d7befd602bc966cd/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7649d1c2a8d53dc5928450d6d7befd602bc966cd/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=7649d1c2a8d53dc5928450d6d7befd602bc966cd", "patch": "@@ -255,29 +255,55 @@ fn path_eq_name(name: Name, path: &Path) -> bool {\n \n fn contains_self(name: Name, expr: &Expr) -> bool {\n     match expr.node {\n+        // the \"self\" name itself (maybe)\n+        ExprPath(_, ref path) => path_eq_name(name, path),\n+        // no subexprs\n+        ExprLit(_) => false,\n+        // one subexpr\n         ExprUnary(_, ref e) | ExprParen(ref e) | ExprField(ref e, _) |\n-        ExprTupField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(_, ref e)\n-            => contains_self(name, e),\n-        ExprBinary(_, ref l, ref r) =>\n+        ExprTupField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(_, ref e) |\n+        ExprCast(ref e, _) =>\n+            contains_self(name, e),\n+        // two subexprs\n+        ExprBinary(_, ref l, ref r) | ExprIndex(ref l, ref r) |\n+        ExprAssign(ref l, ref r) | ExprAssignOp(_, ref l, ref r) |\n+        ExprRepeat(ref l, ref r) =>\n             contains_self(name, l) || contains_self(name, r),\n-        ExprBlock(ref block) | ExprLoop(ref block, _) =>\n+        // one optional subexpr\n+        ExprRet(ref oe) =>\n+            oe.as_ref().map_or(false, |ref e| contains_self(name, e)),\n+        // two optional subexprs\n+        ExprRange(ref ol, ref or) =>\n+            ol.as_ref().map_or(false, |ref e| contains_self(name, e)) ||\n+            or.as_ref().map_or(false, |ref e| contains_self(name, e)),\n+        // one subblock\n+        ExprBlock(ref block) | ExprLoop(ref block, _) |\n+        ExprClosure(_, _, ref block) =>\n             contains_block_self(name, block),\n-        ExprCall(ref fun, ref args) => contains_self(name, fun) ||\n-            args.iter().any(|ref a| contains_self(name, a)),\n-        ExprMethodCall(_, _, ref args) =>\n+        // one vec\n+        ExprMethodCall(_, _, ref v) | ExprVec(ref v) | ExprTup(ref v) =>\n+            v.iter().any(|ref a| contains_self(name, a)),\n+        // one expr, one vec\n+        ExprCall(ref fun, ref args) =>\n+            contains_self(name, fun) ||\n             args.iter().any(|ref a| contains_self(name, a)),\n-        ExprVec(ref v) | ExprTup(ref v) =>\n-            v.iter().any(|ref e| contains_self(name, e)),\n+        // special ones\n         ExprIf(ref cond, ref then, ref otherwise) =>\n             contains_self(name, cond) || contains_block_self(name, then) ||\n             otherwise.as_ref().map_or(false, |ref e| contains_self(name, e)),\n         ExprWhile(ref e, ref block, _)  =>\n             contains_self(name, e) || contains_block_self(name, block),\n         ExprMatch(ref e, ref arms, _) =>\n-            arms.iter().any(|ref arm| arm.pats.iter().any(|ref pat|\n-                contains_pat_self(name, pat))) || contains_self(name, e),\n-        ExprPath(_, ref path) => path_eq_name(name, path),\n-        _ => false\n+            contains_self(name, e) ||\n+            arms.iter().any(\n+                |ref arm|\n+                arm.pats.iter().any(|ref pat| contains_pat_self(name, pat)) ||\n+                arm.guard.as_ref().map_or(false, |ref g| contains_self(name, g)) ||\n+                contains_self(name, &arm.body)),\n+        ExprStruct(_, ref fields, ref other) =>\n+            fields.iter().any(|ref f| contains_self(name, &f.expr)) ||\n+            other.as_ref().map_or(false, |ref e| contains_self(name, e)),\n+        _ => false,\n     }\n }\n "}]}