{"sha": "9f387926fc163b2e38df4477b2c56b1c81db3b3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzg3OTI2ZmMxNjNiMmUzOGRmNDQ3N2IyYzU2YjFjODFkYjNiM2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T20:21:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T20:21:34Z"}, "message": "librustc: Fold rt items into lang items. Shaves another 10% or so off hello world compile time.", "tree": {"sha": "2d28bb0e2ace32c133c1d3571ab664b0eaa64101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d28bb0e2ace32c133c1d3571ab664b0eaa64101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f387926fc163b2e38df4477b2c56b1c81db3b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f387926fc163b2e38df4477b2c56b1c81db3b3e", "html_url": "https://github.com/rust-lang/rust/commit/9f387926fc163b2e38df4477b2c56b1c81db3b3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f387926fc163b2e38df4477b2c56b1c81db3b3e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2d1d989687eb350072ddb4da7ae102d86ab551a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d1d989687eb350072ddb4da7ae102d86ab551a", "html_url": "https://github.com/rust-lang/rust/commit/d2d1d989687eb350072ddb4da7ae102d86ab551a"}], "stats": {"total": 252, "additions": 105, "deletions": 147}, "files": [{"sha": "ebe8746cfcad8d1062e970eb3b39b8f8b91d778d", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -38,15 +38,14 @@ extern mod rustrt {\n     fn rust_upcall_free(ptr: *c_char);\n }\n \n-// FIXME (#2861): This needs both the attribute, and the name prefixed with\n-// 'rt_', otherwise the compiler won't find it. To fix this, see\n-// gather_rust_rtcalls.\n #[rt(fail_)]\n+#[lang=\"fail_\"]\n pub fn rt_fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n     sys::begin_unwind_(expr, file, line);\n }\n \n #[rt(fail_bounds_check)]\n+#[lang=\"fail_bounds_check\"]\n pub fn rt_fail_bounds_check(file: *c_char, line: size_t,\n                         index: size_t, len: size_t) {\n     let msg = fmt!(\"index out of bounds: the len is %d but the index is %d\",\n@@ -57,6 +56,7 @@ pub fn rt_fail_bounds_check(file: *c_char, line: size_t,\n }\n \n #[rt(exchange_malloc)]\n+#[lang=\"exchange_malloc\"]\n pub fn rt_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     return rustrt::rust_upcall_exchange_malloc(td, size);\n }\n@@ -65,11 +65,13 @@ pub fn rt_exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[rt(exchange_free)]\n+#[lang=\"exchange_free\"]\n pub fn rt_exchange_free(ptr: *c_char) {\n     rustrt::rust_upcall_exchange_free(ptr);\n }\n \n #[rt(malloc)]\n+#[lang=\"malloc\"]\n pub fn rt_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     return rustrt::rust_upcall_malloc(td, size);\n }\n@@ -78,6 +80,7 @@ pub fn rt_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[rt(free)]\n+#[lang=\"free\"]\n pub fn rt_free(ptr: *c_char) {\n     rustrt::rust_upcall_free(ptr);\n }"}, {"sha": "ec01b79c37e6fb275659c408708f99028888c0bd", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 65, "deletions": 29, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -34,43 +34,49 @@ use std::map::HashMap;\n use str_eq = str::eq;\n \n pub enum LangItem {\n-    ConstTraitLangItem,     // 0\n-    CopyTraitLangItem,      // 1\n-    OwnedTraitLangItem,     // 2\n-    DurableTraitLangItem,   // 3\n-\n-    DropTraitLangItem,      // 4\n-\n-    AddTraitLangItem,       // 5\n-    SubTraitLangItem,       // 6\n-    MulTraitLangItem,       // 7\n-    DivTraitLangItem,       // 8\n-    ModuloTraitLangItem,    // 9\n-    NegTraitLangItem,       // 10\n-    BitXorTraitLangItem,    // 11\n-    BitAndTraitLangItem,    // 12\n-    BitOrTraitLangItem,     // 13\n-    ShlTraitLangItem,       // 14\n-    ShrTraitLangItem,       // 15\n-    IndexTraitLangItem,     // 16\n-\n-    EqTraitLangItem,        // 17\n-    OrdTraitLangItem,       // 18\n-\n-    StrEqFnLangItem,        // 19\n-    UniqStrEqFnLangItem,    // 20\n-    AnnihilateFnLangItem,   // 21\n-    LogTypeFnLangItem,      // 22\n+    ConstTraitLangItem,         // 0\n+    CopyTraitLangItem,          // 1\n+    OwnedTraitLangItem,         // 2\n+    DurableTraitLangItem,       // 3\n+\n+    DropTraitLangItem,          // 4\n+\n+    AddTraitLangItem,           // 5\n+    SubTraitLangItem,           // 6\n+    MulTraitLangItem,           // 7\n+    DivTraitLangItem,           // 8\n+    ModuloTraitLangItem,        // 9\n+    NegTraitLangItem,           // 10\n+    BitXorTraitLangItem,        // 11\n+    BitAndTraitLangItem,        // 12\n+    BitOrTraitLangItem,         // 13\n+    ShlTraitLangItem,           // 14\n+    ShrTraitLangItem,           // 15\n+    IndexTraitLangItem,         // 16\n+\n+    EqTraitLangItem,            // 17\n+    OrdTraitLangItem,           // 18\n+\n+    StrEqFnLangItem,            // 19\n+    UniqStrEqFnLangItem,        // 20\n+    AnnihilateFnLangItem,       // 21\n+    LogTypeFnLangItem,          // 22\n+    FailFnLangItem,             // 23\n+    FailBoundsCheckFnLangItem,  // 24\n+    ExchangeMallocFnLangItem,   // 25\n+    ExchangeFreeFnLangItem,     // 26\n+    MallocFnLangItem,           // 27\n+    FreeFnLangItem,             // 28\n }\n \n struct LanguageItems {\n-    items: [ Option<def_id> * 23 ]\n+    items: [ Option<def_id> * 29 ]\n }\n \n impl LanguageItems {\n     static pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..23 ]\n+            items: [ None, ..29 ]\n         }\n     }\n \n@@ -110,6 +116,12 @@ impl LanguageItems {\n             20 => \"uniq_str_eq\",\n             21 => \"annihilate\",\n             22 => \"log_type\",\n+            23 => \"fail_\",\n+            24 => \"fail_bounds_check\",\n+            25 => \"exchange_malloc\",\n+            26 => \"exchange_free\",\n+            27 => \"malloc\",\n+            28 => \"free\",\n \n             _ => \"???\"\n         }\n@@ -190,6 +202,24 @@ impl LanguageItems {\n     pub fn log_type_fn(&const self) -> def_id {\n         self.items[LogTypeFnLangItem as uint].get()\n     }\n+    pub fn fail_fn(&const self) -> def_id {\n+        self.items[FailFnLangItem as uint].get()\n+    }\n+    pub fn fail_bounds_check_fn(&const self) -> def_id {\n+        self.items[FailBoundsCheckFnLangItem as uint].get()\n+    }\n+    pub fn exchange_malloc_fn(&const self) -> def_id {\n+        self.items[ExchangeMallocFnLangItem as uint].get()\n+    }\n+    pub fn exchange_free_fn(&const self) -> def_id {\n+        self.items[ExchangeFreeFnLangItem as uint].get()\n+    }\n+    pub fn malloc_fn(&const self) -> def_id {\n+        self.items[MallocFnLangItem as uint].get()\n+    }\n+    pub fn free_fn(&const self) -> def_id {\n+        self.items[FreeFnLangItem as uint].get()\n+    }\n }\n \n fn LanguageItemCollector(crate: @crate,\n@@ -225,6 +255,12 @@ fn LanguageItemCollector(crate: @crate,\n     item_refs.insert(~\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n     item_refs.insert(~\"annihilate\", AnnihilateFnLangItem as uint);\n     item_refs.insert(~\"log_type\", LogTypeFnLangItem as uint);\n+    item_refs.insert(~\"fail_\", FailFnLangItem as uint);\n+    item_refs.insert(~\"fail_bounds_check\", FailBoundsCheckFnLangItem as uint);\n+    item_refs.insert(~\"exchange_malloc\", ExchangeMallocFnLangItem as uint);\n+    item_refs.insert(~\"exchange_free\", ExchangeFreeFnLangItem as uint);\n+    item_refs.insert(~\"malloc\", MallocFnLangItem as uint);\n+    item_refs.insert(~\"free\", FreeFnLangItem as uint);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "d87b383247b3f7f316a1594cd3b7d63a75a3317e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 97, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -262,14 +262,20 @@ fn opaque_box_body(bcx: block,\n \n // malloc_raw_dyn: allocates a box to contain a given type, but with a\n // potentially dynamic size.\n-fn malloc_raw_dyn(bcx: block, t: ty::t, heap: heap,\n+fn malloc_raw_dyn(bcx: block,\n+                  t: ty::t,\n+                  heap: heap,\n                   size: ValueRef) -> Result {\n     let _icx = bcx.insn_ctxt(\"malloc_raw\");\n     let ccx = bcx.ccx();\n \n-    let (mk_fn, rtcall) = match heap {\n-      heap_shared => (ty::mk_imm_box, ~\"malloc\"),\n-      heap_exchange => (ty::mk_imm_uniq, ~\"exchange_malloc\")\n+    let (mk_fn, langcall) = match heap {\n+        heap_shared => {\n+            (ty::mk_imm_box, bcx.tcx().lang_items.malloc_fn())\n+        }\n+        heap_exchange => {\n+            (ty::mk_imm_uniq, bcx.tcx().lang_items.exchange_malloc_fn())\n+        }\n     };\n \n     // Grab the TypeRef type of box_ptr_ty.\n@@ -283,8 +289,11 @@ fn malloc_raw_dyn(bcx: block, t: ty::t, heap: heap,\n     // Allocate space:\n     let tydesc = PointerCast(bcx, static_ti.tydesc, T_ptr(T_i8()));\n     let rval = alloca_zeroed(bcx, T_ptr(T_i8()));\n-    let bcx = callee::trans_rtcall(bcx, rtcall, ~[tydesc, size],\n-                                   expr::SaveIn(rval));\n+    let bcx = callee::trans_rtcall_or_lang_call(\n+        bcx,\n+        langcall,\n+        ~[tydesc, size],\n+        expr::SaveIn(rval));\n     return rslt(bcx, PointerCast(bcx, Load(bcx, rval), llty));\n }\n \n@@ -2539,92 +2548,6 @@ fn trap(bcx: block) {\n     }\n }\n \n-fn push_rtcall(ccx: @crate_ctxt, name: ~str, did: ast::def_id) {\n-    match ccx.rtcalls.find(name) {\n-        Some(existing_did) if did != existing_did => {\n-            ccx.sess.fatal(fmt!(\"multiple definitions for runtime call %s\",\n-                                name));\n-        }\n-        Some(_) | None => {\n-            ccx.rtcalls.insert(name, did);\n-        }\n-    }\n-}\n-\n-fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n-    visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n-        visit_item: |item| match item.node {\n-            ast::item_fn(*) => {\n-                let attr_metas = attr::attr_metas(\n-                    attr::find_attrs_by_name(item.attrs, ~\"rt\"));\n-                for vec::each(attr_metas) |attr_meta| {\n-                    match attr::get_meta_item_list(*attr_meta) {\n-                        Some(list) => {\n-                            let head = vec::head(list);\n-                            let name = attr::get_meta_item_name(head);\n-                            push_rtcall(ccx, name, {crate: ast::local_crate,\n-                                                    node: item.id});\n-                        }\n-                        None => ()\n-                    }\n-                }\n-            }\n-            _ => ()\n-        },\n-        ..*visit::default_simple_visitor()\n-    }));\n-}\n-\n-fn gather_external_rtcalls(ccx: @crate_ctxt) {\n-    do cstore::iter_crate_data(ccx.sess.cstore) |_cnum, cmeta| {\n-        let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n-            cstore::get_crate_data(ccx.sess.cstore, cnum)\n-        };\n-        do decoder::each_path(ccx.sess.intr(), cmeta, get_crate_data) |path| {\n-            let pathname = path.path_string;\n-            match path.def_like {\n-              decoder::dl_def(d) => {\n-                match d {\n-                  ast::def_fn(did, _) => {\n-                    // FIXME (#2861): This should really iterate attributes\n-                    // like gather_local_rtcalls, but we'll need to\n-                    // export attributes in metadata/encoder before we can do\n-                    // that.\n-                    let sentinel = ~\"rt::rt_\";\n-                    let slen = str::len(sentinel);\n-                    if str::starts_with(pathname, sentinel) {\n-                        let name = str::substr(pathname,\n-                                               slen, str::len(pathname)-slen);\n-                        push_rtcall(ccx, name, did);\n-                    }\n-                  }\n-                  _ => ()\n-                }\n-              }\n-              _ => ()\n-            }\n-            true\n-        }\n-    }\n-}\n-\n-fn gather_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n-    gather_local_rtcalls(ccx, crate);\n-    gather_external_rtcalls(ccx);\n-\n-    // FIXME (#2861): Check for other rtcalls too, once they are\n-    // supported. Also probably want to check type signature so we don't crash\n-    // in some obscure place in LLVM if the user provides the wrong signature\n-    // for an rtcall.\n-    let expected_rtcalls =\n-        ~[~\"exchange_free\", ~\"exchange_malloc\", ~\"fail_\", ~\"free\", ~\"malloc\"];\n-    for vec::each(expected_rtcalls) |name| {\n-        if !ccx.rtcalls.contains_key(*name) {\n-            fail fmt!(\"no definition for runtime call %s\", *name);\n-        }\n-    }\n-}\n-\n fn decl_gc_metadata(ccx: @crate_ctxt, llmod_id: ~str) {\n     if !ccx.sess.opts.gc || !ccx.uses_gc {\n         return;\n@@ -2869,9 +2792,7 @@ fn trans_crate(sess: session::Session,\n                llvm_insn_ctxt: @mut ~[],\n                llvm_insns: HashMap(),\n                fn_times: @mut ~[]},\n-          upcalls:\n-              upcall::declare_upcalls(targ_cfg, llmod),\n-          rtcalls: HashMap(),\n+          upcalls: upcall::declare_upcalls(targ_cfg, llmod),\n           tydesc_type: tydesc_type,\n           int_type: int_type,\n           float_type: float_type,\n@@ -2885,8 +2806,6 @@ fn trans_crate(sess: session::Session,\n           mut do_not_commit_warning_issued: false\n     };\n \n-    gather_rtcalls(ccx, crate);\n-\n     {\n         let _icx = ccx.insn_ctxt(\"data\");\n         trans_constants(ccx, crate);"}, {"sha": "de0203953967891bd849ea1bbdbf5178bd3d1353", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -333,13 +333,6 @@ fn trans_method_call(in_cx: block,\n         DontAutorefArg)\n }\n \n-fn trans_rtcall(bcx: block, name: ~str, args: ~[ValueRef], dest: expr::Dest)\n-    -> block\n-{\n-    let did = bcx.ccx().rtcalls[name];\n-    return trans_rtcall_or_lang_call(bcx, did, args, dest);\n-}\n-\n fn trans_rtcall_or_lang_call(bcx: block, did: ast::def_id, args: ~[ValueRef],\n                              dest: expr::Dest) -> block {\n     let fty = if did.crate == ast::local_crate {"}, {"sha": "353f1100cc93f77eeea6937a744551378a726e37", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -492,11 +492,13 @@ fn make_opaque_cbox_take_glue(\n         let sz = Add(bcx, sz, shape::llsize_of(ccx, T_box_header(ccx)));\n \n         // Allocate memory, update original ptr, and copy existing data\n-        let malloc = ~\"exchange_malloc\";\n         let opaque_tydesc = PointerCast(bcx, tydesc, T_ptr(T_i8()));\n         let rval = alloca_zeroed(bcx, T_ptr(T_i8()));\n-        let bcx = callee::trans_rtcall(bcx, malloc, ~[opaque_tydesc, sz],\n-                                       expr::SaveIn(rval));\n+        let bcx = callee::trans_rtcall_or_lang_call(\n+            bcx,\n+            bcx.tcx().lang_items.exchange_malloc_fn(),\n+            ~[opaque_tydesc, sz],\n+            expr::SaveIn(rval));\n         let cbox_out = PointerCast(bcx, Load(bcx, rval), llopaquecboxty);\n         call_memcpy(bcx, cbox_out, cbox_in, sz);\n         Store(bcx, cbox_out, cboxptr);"}, {"sha": "50810129569bfa0498f957264f1071e9e77bc13a", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -197,7 +197,6 @@ struct crate_ctxt {\n      maps: astencode::maps,\n      stats: stats,\n      upcalls: @upcall::upcalls,\n-     rtcalls: HashMap<~str, ast::def_id>,\n      tydesc_type: TypeRef,\n      int_type: TypeRef,\n      float_type: TypeRef,"}, {"sha": "11cd0925d1a60e2f4269a4a709500b71fa407030", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -368,7 +368,8 @@ fn trans_fail_value(bcx: block, sp_opt: Option<span>, V_fail_str: ValueRef)\n     let V_str = PointerCast(bcx, V_fail_str, T_ptr(T_i8()));\n     let V_filename = PointerCast(bcx, V_filename, T_ptr(T_i8()));\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let bcx = callee::trans_rtcall(bcx, ~\"fail_\", args, expr::Ignore);\n+    let bcx = callee::trans_rtcall_or_lang_call(\n+        bcx, bcx.tcx().lang_items.fail_fn(), args, expr::Ignore);\n     Unreachable(bcx);\n     return bcx;\n }\n@@ -384,8 +385,8 @@ fn trans_fail_bounds_check(bcx: block, sp: span,\n     let filename = PointerCast(bcx, filename_cstr, T_ptr(T_i8()));\n \n     let args = ~[filename, line, index, len];\n-    let bcx = callee::trans_rtcall(bcx, ~\"fail_bounds_check\", args,\n-                                   expr::Ignore);\n+    let bcx = callee::trans_rtcall_or_lang_call(\n+        bcx, bcx.tcx().lang_items.fail_bounds_check_fn(), args, expr::Ignore);\n     Unreachable(bcx);\n     return bcx;\n }"}, {"sha": "d095048109773c55239225f7d84ef16d1795e08f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f387926fc163b2e38df4477b2c56b1c81db3b3e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=9f387926fc163b2e38df4477b2c56b1c81db3b3e", "patch": "@@ -28,14 +28,19 @@ use core::str;\n \n fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");\n-    callee::trans_rtcall(cx, ~\"free\", ~[PointerCast(cx, v, T_ptr(T_i8()))],\n-                         expr::Ignore)\n+    callee::trans_rtcall_or_lang_call(\n+        cx,\n+        cx.tcx().lang_items.free_fn(),\n+        ~[PointerCast(cx, v, T_ptr(T_i8()))],\n+        expr::Ignore)\n }\n \n fn trans_unique_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_unique_free\");\n-    callee::trans_rtcall(\n-        cx, ~\"exchange_free\", ~[PointerCast(cx, v, T_ptr(T_i8()))],\n+    callee::trans_rtcall_or_lang_call(\n+        cx,\n+        cx.tcx().lang_items.exchange_free_fn(),\n+        ~[PointerCast(cx, v, T_ptr(T_i8()))],\n         expr::Ignore)\n }\n "}]}