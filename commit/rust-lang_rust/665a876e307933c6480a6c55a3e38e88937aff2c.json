{"sha": "665a876e307933c6480a6c55a3e38e88937aff2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NWE4NzZlMzA3OTMzYzY0ODBhNmM1NWEzZTM4ZTg4OTM3YWZmMmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T18:11:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T22:32:03Z"}, "message": "pre-expansion gate exclusive_range_pattern", "tree": {"sha": "2f80aef4667e991b5a05f5a78e039e3ddd86d270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f80aef4667e991b5a05f5a78e039e3ddd86d270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665a876e307933c6480a6c55a3e38e88937aff2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665a876e307933c6480a6c55a3e38e88937aff2c", "html_url": "https://github.com/rust-lang/rust/commit/665a876e307933c6480a6c55a3e38e88937aff2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665a876e307933c6480a6c55a3e38e88937aff2c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aff6b36d7ed5c25700669a92b4a43200ee0fe6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aff6b36d7ed5c25700669a92b4a43200ee0fe6b", "html_url": "https://github.com/rust-lang/rust/commit/2aff6b36d7ed5c25700669a92b4a43200ee0fe6b"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "0b4289b139fc15eeaf0c1600da604703554a8703", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -3,9 +3,8 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{self, NodeId, PatKind, RangeEnd, VariantData};\n+use crate::ast::{self, NodeId, PatKind, VariantData};\n use crate::attr::{self, check_builtin_attribute};\n-use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::token;\n@@ -529,10 +528,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n             }\n-            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n-                gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n-                                   \"exclusive range pattern syntax is experimental\");\n-            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)\n@@ -815,6 +810,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(const_generics, \"const generics are unstable\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n+    gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "969d5dd8374805668d010553aa47cccd627101d7", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -611,6 +611,11 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Mac(mac))\n     }\n \n+    fn excluded_range_end(&self, span: Span) -> RangeEnd {\n+        self.sess.gated_spans.exclusive_range_pattern.borrow_mut().push(span);\n+        RangeEnd::Excluded\n+    }\n+\n     /// Parse a range pattern `$path $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n     /// The `$path` has already been parsed and the next token is the `$form`.\n     fn parse_pat_range_starting_with_path(\n@@ -620,7 +625,7 @@ impl<'a> Parser<'a> {\n         path: Path\n     ) -> PResult<'a, PatKind> {\n         let (end_kind, form) = match self.token.kind {\n-            token::DotDot => (RangeEnd::Excluded, \"..\"),\n+            token::DotDot => (self.excluded_range_end(self.token.span), \"..\"),\n             token::DotDotDot => (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\"),\n             token::DotDotEq => (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\"),\n             _ => panic!(\"can only parse `..`/`...`/`..=` for ranges (checked above)\"),\n@@ -643,7 +648,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat(&token::DotDotEq) {\n             (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")\n         } else if self.eat(&token::DotDot) {\n-            (RangeEnd::Excluded, \"..\")\n+            (self.excluded_range_end(op_span), \"..\")\n         } else {\n             panic!(\"impossible case: we already matched on a range-operator token\")\n         };"}, {"sha": "09331924c60216b0d66417be132171d9f0ad9430", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -42,6 +42,8 @@ crate struct GatedSpans {\n     pub decl_macro: Lock<Vec<Span>>,\n     /// Spans collected for gating `box_patterns`, e.g. `box 0`.\n     pub box_patterns: Lock<Vec<Span>>,\n+    /// Spans collected for gating `exclusive_range_pattern`, e.g. `0..2`.\n+    pub exclusive_range_pattern: Lock<Vec<Span>>,\n }\n \n /// Info about a parsing session."}, {"sha": "594ec73fe26f7954948392b138944aa7852e3133", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -1,6 +1,10 @@\n-pub fn main() {\n+#[cfg(FALSE)]\n+fn foo() {\n     match 22 {\n         0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n+        PATH .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n         _ => {}\n     }\n }\n+\n+fn main() {}"}, {"sha": "075fdbed90d6c7b0c6ae58824c8591a5a28e47f6", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/feature-gate-exclusive-range-pattern.rs:3:9\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:4:11\n    |\n LL |         0 .. 3 => {}\n-   |         ^^^^^^\n+   |           ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:5:14\n+   |\n+LL |         PATH .. 3 => {}\n+   |              ^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b8c146949aecc5916581e1fe1760d4f55ca480a", "filename": "src/test/ui/parser/pat-tuple-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -4,7 +4,6 @@ fn main() {\n     match 0 {\n         (.. PAT) => {}\n         //~^ ERROR `..X` range patterns are not supported\n-        //~| ERROR exclusive range pattern syntax is experimental\n     }\n }\n "}, {"sha": "1962dc4ff20a87d29016b3894f14dc373e105c62", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -4,25 +4,15 @@ error: `..X` range patterns are not supported\n LL |         (.. PAT) => {}\n    |          ^^^^^^ help: try using the minimum value for the type: `MIN..PAT`\n \n-error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-4.rs:5:10\n-   |\n-LL |         (.. PAT) => {}\n-   |          ^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n-   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-4.rs:11:30\n+  --> $DIR/pat-tuple-4.rs:10:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "17155b4dd49544050eb5772e3d2b4347bde3cc16", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/665a876e307933c6480a6c55a3e38e88937aff2c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=665a876e307933c6480a6c55a3e38e88937aff2c", "patch": "@@ -5,10 +5,10 @@ LL |         (PAT ..) => {}\n    |          ^^^^^^ help: try using the maximum value for the type: `PAT..MAX`\n \n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-5.rs:5:10\n+  --> $DIR/pat-tuple-5.rs:5:14\n    |\n LL |         (PAT ..) => {}\n-   |          ^^^^^^\n+   |              ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable"}]}