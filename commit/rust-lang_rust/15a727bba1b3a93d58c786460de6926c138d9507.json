{"sha": "15a727bba1b3a93d58c786460de6926c138d9507", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTcyN2JiYTFiM2E5M2Q1OGM3ODY0NjBkZTY5MjZjMTM4ZDk1MDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T16:07:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T16:07:20Z"}, "message": "rustdoc: Fix inlining type parameters\n\nI'm not entirely sure if the correct space can be inferred when cleaning\nGenerics, so the impl has been switched to take the space explicitly.\n\nCloses #15099", "tree": {"sha": "72946b62f81ceadba7d59ddcc1c14939de3b363f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72946b62f81ceadba7d59ddcc1c14939de3b363f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a727bba1b3a93d58c786460de6926c138d9507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a727bba1b3a93d58c786460de6926c138d9507", "html_url": "https://github.com/rust-lang/rust/commit/15a727bba1b3a93d58c786460de6926c138d9507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a727bba1b3a93d58c786460de6926c138d9507/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80efb220e09e3dbaf8f69a5eee109dce40b1cd09", "url": "https://api.github.com/repos/rust-lang/rust/commits/80efb220e09e3dbaf8f69a5eee109dce40b1cd09", "html_url": "https://github.com/rust-lang/rust/commit/80efb220e09e3dbaf8f69a5eee109dce40b1cd09"}], "stats": {"total": 46, "additions": 12, "deletions": 34}, "files": [{"sha": "e058f219c47583b50261c44d13467fe72bc643a7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15a727bba1b3a93d58c786460de6926c138d9507/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a727bba1b3a93d58c786460de6926c138d9507/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=15a727bba1b3a93d58c786460de6926c138d9507", "patch": "@@ -18,6 +18,7 @@ use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n use rustc::middle::def;\n use rustc::middle::ty;\n+use rustc::middle::subst;\n use rustc::middle::stability;\n \n use core;\n@@ -163,7 +164,7 @@ pub fn build_external_trait(tcx: &ty::ctxt, did: ast::DefId) -> clean::Trait {\n     });\n \n     clean::Trait {\n-        generics: def.generics.clean(),\n+        generics: (&def.generics, subst::TypeSpace).clean(),\n         methods: methods.collect(),\n         parents: parents.collect()\n     }\n@@ -178,7 +179,7 @@ fn build_external_function(tcx: &ty::ctxt,\n             ty::ty_bare_fn(ref f) => (did, &f.sig).clean(),\n             _ => fail!(\"bad function\"),\n         },\n-        generics: t.generics.clean(),\n+        generics: (&t.generics, subst::FnSpace).clean(),\n         fn_style: style,\n     }\n }\n@@ -196,7 +197,7 @@ fn build_struct(tcx: &ty::ctxt, did: ast::DefId) -> clean::Struct {\n             [ref f, ..] if f.name == unnamed_field.name => doctree::Tuple,\n             _ => doctree::Plain,\n         },\n-        generics: t.generics.clean(),\n+        generics: (&t.generics, subst::TypeSpace).clean(),\n         fields: fields.iter().map(|f| f.clean()).collect(),\n         fields_stripped: false,\n     }\n@@ -207,7 +208,7 @@ fn build_type(tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEnum {\n     match ty::get(t.ty).sty {\n         ty::ty_enum(edid, _) if !csearch::is_typedef(&tcx.sess.cstore, did) => {\n             return clean::EnumItem(clean::Enum {\n-                generics: t.generics.clean(),\n+                generics: (&t.generics, subst::TypeSpace).clean(),\n                 variants_stripped: false,\n                 variants: ty::enum_variants(tcx, edid).clean(),\n             })\n@@ -217,7 +218,7 @@ fn build_type(tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEnum {\n \n     clean::TypedefItem(clean::Typedef {\n         type_: t.ty.clean(),\n-        generics: t.generics.clean(),\n+        generics: (&t.generics, subst::TypeSpace).clean(),\n     })\n }\n \n@@ -323,7 +324,7 @@ fn build_impl(cx: &core::DocContext,\n                 }\n             }),\n             for_: ty.ty.clean(),\n-            generics: ty.generics.clean(),\n+            generics: (&ty.generics, subst::TypeSpace).clean(),\n             methods: methods,\n         }),\n         source: clean::Span::empty(),"}, {"sha": "05b91c5ddf92dfd5e5cb1dfb0010001b5b4fc985", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/15a727bba1b3a93d58c786460de6926c138d9507/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a727bba1b3a93d58c786460de6926c138d9507/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=15a727bba1b3a93d58c786460de6926c138d9507", "patch": "@@ -653,35 +653,12 @@ impl Clean<Generics> for ast::Generics {\n     }\n }\n \n-impl Clean<Generics> for ty::Generics {\n+impl<'a> Clean<Generics> for (&'a ty::Generics, subst::ParamSpace) {\n     fn clean(&self) -> Generics {\n-        // In the type space, generics can come in one of multiple\n-        // namespaces.  This means that e.g. for fn items the type\n-        // parameters will live in FnSpace, but for types the\n-        // parameters will live in TypeSpace (trait definitions also\n-        // define a parameter in SelfSpace). *Method* definitions are\n-        // the one exception: they combine the TypeSpace parameters\n-        // from the enclosing impl/trait with their own FnSpace\n-        // parameters.\n-        //\n-        // In general, when we clean, we are trying to produce the\n-        // \"user-facing\" generics. Hence we select the most specific\n-        // namespace that is occupied, ignoring SelfSpace because it\n-        // is implicit.\n-\n-        let space = {\n-            if !self.types.is_empty_in(subst::FnSpace) ||\n-                !self.regions.is_empty_in(subst::FnSpace)\n-            {\n-                subst::FnSpace\n-            } else {\n-                subst::TypeSpace\n-            }\n-        };\n-\n+        let (me, space) = *self;\n         Generics {\n-            type_params: Vec::from_slice(self.types.get_slice(space)).clean(),\n-            lifetimes: Vec::from_slice(self.regions.get_slice(space)).clean(),\n+            type_params: Vec::from_slice(me.types.get_slice(space)).clean(),\n+            lifetimes: Vec::from_slice(me.regions.get_slice(space)).clean(),\n         }\n     }\n }\n@@ -1030,7 +1007,7 @@ impl Clean<Item> for ty::Method {\n             source: Span::empty(),\n             inner: TyMethodItem(TyMethod {\n                 fn_style: self.fty.fn_style,\n-                generics: self.generics.clean(),\n+                generics: (&self.generics, subst::FnSpace).clean(),\n                 self_: self_,\n                 decl: (self.def_id, &sig).clean(),\n             })"}]}