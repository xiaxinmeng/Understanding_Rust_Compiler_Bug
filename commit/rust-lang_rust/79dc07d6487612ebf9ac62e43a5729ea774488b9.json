{"sha": "79dc07d6487612ebf9ac62e43a5729ea774488b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZGMwN2Q2NDg3NjEyZWJmOWFjNjJlNDNhNTcyOWVhNzc0NDg4Yjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-10T01:56:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-10T01:56:51Z"}, "message": "Use hashtable rather than bitset for vreg constraints in ra; speeds compilation.", "tree": {"sha": "e9dd8b7266621e98476f1a2c9023e4556a186e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9dd8b7266621e98476f1a2c9023e4556a186e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79dc07d6487612ebf9ac62e43a5729ea774488b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79dc07d6487612ebf9ac62e43a5729ea774488b9", "html_url": "https://github.com/rust-lang/rust/commit/79dc07d6487612ebf9ac62e43a5729ea774488b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79dc07d6487612ebf9ac62e43a5729ea774488b9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9e2327a18e782df524c14dc42910d61a4785324", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e2327a18e782df524c14dc42910d61a4785324", "html_url": "https://github.com/rust-lang/rust/commit/a9e2327a18e782df524c14dc42910d61a4785324"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "2bb108707fd18818115162dbeedd4464eb9996e2", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=79dc07d6487612ebf9ac62e43a5729ea774488b9", "patch": "@@ -118,7 +118,7 @@ type abi =\n     abi_str_of_hardreg: (int -> string);\n \n     abi_emit_target_specific: (Il.emitter -> Il.quad -> unit);\n-    abi_constrain_vregs: (Il.quad -> Bits.t array -> unit);\n+    abi_constrain_vregs: (Il.quad -> (Il.vreg,Bits.t) Hashtbl.t -> unit);\n \n     abi_emit_fn_prologue: (Il.emitter\n                            -> Common.size        (* framesz *)"}, {"sha": "12ec11ea235d2a132495f510fd77db873556e5d1", "filename": "src/boot/be/ra.ml", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fra.ml", "raw_url": "https://github.com/rust-lang/rust/raw/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fra.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fra.ml?ref=79dc07d6487612ebf9ac62e43a5729ea774488b9", "patch": "@@ -324,11 +324,11 @@ let dump_quads cx =\n \n let calculate_vreg_constraints\n     (cx:ctxt)\n-    (constraints:Bits.t array)\n+    (constraints:(Il.vreg,Bits.t) Hashtbl.t)\n     (q:quad)\n     : unit =\n   let abi = cx.ctxt_abi in\n-    Array.iter (fun c -> Bits.clear c; Bits.invert c) constraints;\n+    Hashtbl.clear constraints;\n     abi.Abi.abi_constrain_vregs q constraints;\n     iflog cx\n       begin\n@@ -341,9 +341,12 @@ let calculate_vreg_constraints\n                 match r with\n                     Il.Hreg _ -> ()\n                   | Il.Vreg v ->\n-                      let hregs = Bits.to_list constraints.(v) in\n-                        log cx \"<v%d> constrained to hregs: [%s]\"\n-                          v (list_to_str hregs hr_str)\n+                      match htab_search constraints v with\n+                          None -> log cx \"<v%d> unconstrained\" v\n+                        | Some c ->\n+                            let hregs = Bits.to_list c in\n+                              log cx \"<v%d> constrained to hregs: [%s]\"\n+                                v (list_to_str hregs hr_str)\n               end;\n               r\n             in\n@@ -376,10 +379,9 @@ let reg_alloc\n     let (live_in_vregs, live_out_vregs) =\n       calculate_live_bitvectors cx\n     in\n-    let n_vregs = cx.ctxt_n_vregs in\n-    let n_hregs = abi.Abi.abi_n_hardregs in\n-    let (vreg_constraints:Bits.t array) = (* vreg idx -> hreg bits.t *)\n-      Array.init n_vregs (fun _ -> Bits.create n_hregs true)\n+      (* vreg idx -> hreg bits.t *)\n+    let (vreg_constraints:(Il.vreg,Bits.t) Hashtbl.t) =\n+      Hashtbl.create 0\n     in\n     let inactive_hregs = ref [] in (* [hreg] *)\n     let active_hregs = ref [] in (* [hreg] *)\n@@ -497,6 +499,13 @@ let reg_alloc\n       else ()\n     in\n \n+    let get_vreg_constraints v =\n+      match htab_search vreg_constraints v with\n+          None -> all_hregs\n+        | Some c -> c\n+    in\n+\n+\n     let use_vreg def i vreg =\n       if Hashtbl.mem vreg_to_hreg vreg\n       then\n@@ -508,18 +517,19 @@ let reg_alloc\n         end\n       else\n         let hreg =\n-          let constrs = vreg_constraints.(vreg) in\n-          match select_constrained constrs (!inactive_hregs) with\n-              None ->\n-                let h = spill_constrained constrs i in\n-                  iflog cx\n-                    (fun _ -> log cx \"selected %s to spill and use for <v%d>\"\n-                       (hr_str h) vreg);\n+          let constrs = get_vreg_constraints vreg in\n+            match select_constrained constrs (!inactive_hregs) with\n+                None ->\n+                  let h = spill_constrained constrs i in\n+                    iflog cx\n+                      (fun _ ->\n+                         log cx \"selected %s to spill and use for <v%d>\"\n+                         (hr_str h) vreg);\n+                    h\n+              | Some h ->\n+                  iflog cx (fun _ -> log cx \"selected inactive %s for <v%d>\"\n+                              (hr_str h) vreg);\n                   h\n-            | Some h ->\n-                iflog cx (fun _ -> log cx \"selected inactive %s for <v%d>\"\n-                            (hr_str h) vreg);\n-                h\n         in\n           inactive_hregs :=\n             List.filter (fun x -> x != hreg) (!inactive_hregs);\n@@ -569,15 +579,15 @@ let reg_alloc\n              * This is awful but it saves us from cached/constrained\n              * interference as was found in issue #152. *)\n             if List.exists\n-              (fun v -> not (Bits.equal vreg_constraints.(v) all_hregs))\n+              (fun v -> not (Bits.equal (get_vreg_constraints v) all_hregs))\n               used\n             then\n               begin\n                 (* Regfence. *)\n                 spill_all_regs i;\n                 (* Check for over-constrained-ness after any such regfence. *)\n                 let vreg_constrs v =\n-                  (v, Bits.to_list (vreg_constraints.(v)))\n+                  (v, Bits.to_list (get_vreg_constraints v))\n                 in\n                 let constrs = List.map vreg_constrs (used @ defined) in\n                 let constrs_collide (v1,c1) ="}, {"sha": "eb96d0ac47ba706748f9b70b7b6e8047ed1f0d53", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/79dc07d6487612ebf9ac62e43a5729ea774488b9/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=79dc07d6487612ebf9ac62e43a5729ea774488b9", "patch": "@@ -385,7 +385,7 @@ let emit_target_specific\n ;;\n \n \n-let constrain_vregs (q:Il.quad) (hregs:Bits.t array) : unit =\n+let constrain_vregs (q:Il.quad) (hregs:(Il.vreg,Bits.t) Hashtbl.t) : unit =\n \n   let involves_8bit_cell =\n     let b = ref false in\n@@ -402,14 +402,18 @@ let constrain_vregs (q:Il.quad) (hregs:Bits.t array) : unit =\n       !b\n   in\n \n+  let get_hregs v =\n+    htab_search_or_add hregs v (fun _ -> Bits.create n_hardregs true)\n+  in\n+\n   let qp_mem _ m = m in\n   let qp_cell _ c =\n     begin\n       match c with\n           Il.Reg (Il.Vreg v, _) when involves_8bit_cell ->\n             (* 8-bit register cells must only be al, cl, dl, bl.\n              * Not esi/edi. *)\n-            let hv = hregs.(v) in\n+            let hv = get_hregs v in\n               List.iter (fun bad -> Bits.set hv bad false) [esi; edi]\n         | _ -> ()\n     end;\n@@ -425,7 +429,7 @@ let constrain_vregs (q:Il.quad) (hregs:Bits.t array) : unit =\n                     begin\n                       match b.Il.binary_rhs with\n                           Il.Cell (Il.Reg (Il.Vreg v, _)) ->\n-                            let hv = hregs.(v) in\n+                            let hv = get_hregs v in\n                               (* Shift src has to be ecx. *)\n                               List.iter\n                                 (fun bad -> Bits.set hv bad false)"}]}