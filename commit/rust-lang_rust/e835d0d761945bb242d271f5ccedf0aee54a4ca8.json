{"sha": "e835d0d761945bb242d271f5ccedf0aee54a4ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MzVkMGQ3NjE5NDViYjI0MmQyNzFmNWNjZWRmMGFlZTU0YTRjYTg=", "commit": {"author": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-01-30T19:04:24Z"}, "committer": {"name": "Amos Onn", "email": "amosonn@gmail.com", "date": "2020-02-03T00:03:33Z"}, "message": "Optimize core::ptr::align_offset\n\n- Stopping condition inside mod_inv can be >= instead of >\n- Remove intrinsics::unchecked_rem, we are working modulu powers-of-2 so\nwe can simply mask", "tree": {"sha": "2f054bb8a0d79bc522c03fc55d26a33e552086b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f054bb8a0d79bc522c03fc55d26a33e552086b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e835d0d761945bb242d271f5ccedf0aee54a4ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e835d0d761945bb242d271f5ccedf0aee54a4ca8", "html_url": "https://github.com/rust-lang/rust/commit/e835d0d761945bb242d271f5ccedf0aee54a4ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e835d0d761945bb242d271f5ccedf0aee54a4ca8/comments", "author": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amosonn", "id": 3142573, "node_id": "MDQ6VXNlcjMxNDI1NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3142573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amosonn", "html_url": "https://github.com/amosonn", "followers_url": "https://api.github.com/users/amosonn/followers", "following_url": "https://api.github.com/users/amosonn/following{/other_user}", "gists_url": "https://api.github.com/users/amosonn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amosonn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amosonn/subscriptions", "organizations_url": "https://api.github.com/users/amosonn/orgs", "repos_url": "https://api.github.com/users/amosonn/repos", "events_url": "https://api.github.com/users/amosonn/events{/privacy}", "received_events_url": "https://api.github.com/users/amosonn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43c34a134358471726f25fe5973b8c7e177c825", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43c34a134358471726f25fe5973b8c7e177c825", "html_url": "https://github.com/rust-lang/rust/commit/f43c34a134358471726f25fe5973b8c7e177c825"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "8d839378027083ced7ef5c630e38619c1c3fa6ee", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e835d0d761945bb242d271f5ccedf0aee54a4ca8/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e835d0d761945bb242d271f5ccedf0aee54a4ca8/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=e835d0d761945bb242d271f5ccedf0aee54a4ca8", "patch": "@@ -1083,7 +1083,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n                 // anyway.\n                 inverse = inverse.wrapping_mul(2usize.wrapping_sub(x.wrapping_mul(inverse)))\n                     & (going_mod - 1);\n-                if going_mod > m {\n+                if going_mod >= m {\n                     return inverse & (m - 1);\n                 }\n                 going_mod = going_mod.wrapping_mul(going_mod);\n@@ -1134,7 +1134,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n         // to take the result $o mod lcm(s, a)$. We can replace $lcm(s, a)$ with just a $a / g$.\n         let j = a.wrapping_sub(pmoda) >> gcdpow;\n         let k = smoda >> gcdpow;\n-        return intrinsics::unchecked_rem(j.wrapping_mul(mod_inv(k, a)), a >> gcdpow);\n+        return (j.wrapping_mul(mod_inv(k, a))) & ((a >> gcdpow).wrapping_sub(1));\n     }\n \n     // Cannot be aligned at all."}]}