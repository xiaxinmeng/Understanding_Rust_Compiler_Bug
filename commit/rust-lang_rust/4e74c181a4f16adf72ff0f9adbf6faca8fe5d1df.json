{"sha": "4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzRjMTgxYTRmMTZhZGY3MmZmMGY5YWRiZjZmYWNhOGZlNWQxZGY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-14T08:55:48Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-14T10:27:18Z"}, "message": "Make `ext::base::expr_to_string` work correctly with `include!` macro invocations", "tree": {"sha": "911811512a580cbe5811417ad57277fed8aca9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911811512a580cbe5811417ad57277fed8aca9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df", "html_url": "https://github.com/rust-lang/rust/commit/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db71987ee1198be60fef3e361ad1ce59a70cd7f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/db71987ee1198be60fef3e361ad1ce59a70cd7f7", "html_url": "https://github.com/rust-lang/rust/commit/db71987ee1198be60fef3e361ad1ce59a70cd7f7"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "70d924cf46d06096c4147c57d03f2073933ba2c2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4e74c181a4f16adf72ff0f9adbf6faca8fe5d1df", "patch": "@@ -820,6 +820,12 @@ impl<'a> ExtCtxt<'a> {\n /// compilation on error, merely emits a non-fatal error and returns None.\n pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n                       -> Option<(InternedString, ast::StrStyle)> {\n+    // Update `expr.span`'s expn_id now in case expr is an `include!` macro invocation.\n+    let expr = expr.map(|mut expr| {\n+        expr.span.expn_id = cx.backtrace;\n+        expr\n+    });\n+\n     // we want to be able to handle e.g. concat(\"foo\", \"bar\")\n     let expr = cx.expander().fold_expr(expr);\n     match expr.node {"}]}