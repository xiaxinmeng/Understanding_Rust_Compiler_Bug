{"sha": "012fec54dc508896493d5d3073b4786c93d66fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMmZlYzU0ZGM1MDg4OTY0OTNkNWQzMDczYjQ3ODZjOTNkNjZmZTk=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-07-07T21:29:38Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-07-07T21:29:38Z"}, "message": "Constify KnownName's", "tree": {"sha": "e2cd7f786de128b0d0503dcd3931212ee37220b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cd7f786de128b0d0503dcd3931212ee37220b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012fec54dc508896493d5d3073b4786c93d66fe9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE84DWFaalCZAXJAejN68UFUDeVX0FAl0iZEIACgkQN68UFUDe\nVX0ajw//fU/fajxisOFWfOQ9+zuvM22QDGMxBMt38NofuozYcoVo1/DdcQXWREBl\nQzAGr4KTbG81NgJhddjeuObPTpJLggN1zUqH+KElWmSIxmbz0YyT3Mp/fEEanZKt\nvkLHko+aZ+nEFoCH5Uo1ebWA1uRVo9JjSySOeeCZEYaPpLe8qoDK1RDyFVEKn+Bt\npo2OOz6OCWMBffWio+md3FE3GkrIrU0ciW/UPHrfET+S96spUNm5wSvFbzCEpKvt\nARJwSAzjYmQNjpbZZSuGHNP2QayOv5K6QJ3yZRVHEyiSu5DQ8/WO1OMiF4c9Eq5y\nqSTo3zlfHTr30NlMAQlklcfdett17W26ckiC64NPqqxCnYo9weO8dFDtcRsu1miU\nC6Qx5dsLcYf+XVSzwSi773IQeQ1ccCtLUhORKaAdu7LP1m9/7pB/uYuYQKStafIH\nXTmXrE27bvD1XYor3shCbzildJysgKjdOrSLIlBk3mVTgppT0qW5HBu9iLTb5qTI\nbhBA9EHy2AMCGK9Mg4pBFktKlI9s8XEW/wcYXZAal0Am0CaRlCJptGp8IZ6dtyLS\n6yTpgbeXnp0OaWSEUWxn3mrWOdnDhVeey2j1lG7OXwPzwo5VW3sewKIjErtqGSHg\n1G6HV2ExpcTKGg5czkuSM1tJNZEiwAxQMmQWp1ii53CB45/uQz4=\n=i2up\n-----END PGP SIGNATURE-----", "payload": "tree e2cd7f786de128b0d0503dcd3931212ee37220b3\nparent 1b38ca3b8739230af1cc69884b5b11650b5fcb46\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1562534978 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1562534978 +0600\n\nConstify KnownName's\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012fec54dc508896493d5d3073b4786c93d66fe9", "html_url": "https://github.com/rust-lang/rust/commit/012fec54dc508896493d5d3073b4786c93d66fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012fec54dc508896493d5d3073b4786c93d66fe9/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38ca3b8739230af1cc69884b5b11650b5fcb46", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38ca3b8739230af1cc69884b5b11650b5fcb46", "html_url": "https://github.com/rust-lang/rust/commit/1b38ca3b8739230af1cc69884b5b11650b5fcb46"}], "stats": {"total": 238, "additions": 78, "deletions": 160}, "files": [{"sha": "85dbd2a3730576dc438d66cdc51c3066731e61f3", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -1278,7 +1278,7 @@ dependencies = [\n  \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1308,7 +1308,7 @@ dependencies = [\n name = \"ra_tt\"\n version = \"0.1.0\"\n dependencies = [\n- \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1563,7 +1563,7 @@ dependencies = [\n  \"colosseum 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1722,7 +1722,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"smol_str\"\n-version = \"0.1.11\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"serde 1.0.94 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2280,7 +2280,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \"checksum slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bc762e6a4b6c6fcaade73e77f9ebc6991b676f88bb2358bddb56560f073373\"\n \"checksum smallvec 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab606a9c5e214920bb66c458cd7be8ef094f813f20fe77a54cc7dbfff220d4b7\"\n-\"checksum smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6507d018aa8dfcaa08aaab587605591cd2109df66a921486a2220e2daf9fa29\"\n+\"checksum smol_str 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"590700be3630457c56f8c73c0ea39881476ad7076cd84057d44f4f38f79914fb\"\n \"checksum spin 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44363f6f51401c34e7be73db0db371c04705d35efbe9f7d6082e03a921a32c55\"\n \"checksum stacker 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb79482f57cf598af52094ec4cc3b3c42499d3ce5bd426f2ac41515b7e57404b\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\""}, {"sha": "8922163adf5964aaf10ab9b350e9d43af96d5041", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -19,6 +19,7 @@ use crate::{\n         TypeAliasId,\n     },\n     impl_block::ImplBlock,\n+    name::{BOOL, CHAR, F32, F64, I128, I16, I32, I64, I8, ISIZE, STR, U128, U16, U32, U64, U8, USIZE, SELF_TYPE},\n     nameres::{CrateModuleId, ImportId, ModuleScope, Namespace},\n     resolve::Resolver,\n     traits::{TraitData, TraitItem},\n@@ -28,7 +29,7 @@ use crate::{\n     },\n     type_ref::Mutability,\n     type_ref::TypeRef,\n-    AsName, AstDatabase, AstId, DefDatabase, Either, HasSource, HirDatabase, KnownName, Name, Ty,\n+    AsName, AstDatabase, AstId, DefDatabase, Either, HasSource, HirDatabase, Name, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -96,27 +97,27 @@ pub enum BuiltinType {\n \n impl BuiltinType {\n     #[rustfmt::skip]\n-    pub(crate) const ALL: &'static [(KnownName, BuiltinType)] = &[\n-        (KnownName::Char, BuiltinType::Char),\n-        (KnownName::Bool, BuiltinType::Bool),\n-        (KnownName::Str, BuiltinType::Str),\n-\n-        (KnownName::Isize, BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize })),\n-        (KnownName::I8,    BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 })),\n-        (KnownName::I16,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 })),\n-        (KnownName::I32,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 })),\n-        (KnownName::I64,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 })),\n-        (KnownName::I128,  BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 })),\n-\n-        (KnownName::Usize, BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize })),\n-        (KnownName::U8,    BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 })),\n-        (KnownName::U16,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 })),\n-        (KnownName::U32,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 })),\n-        (KnownName::U64,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 })),\n-        (KnownName::U128,  BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 })),\n-\n-        (KnownName::F32, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n-        (KnownName::F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X64 })),\n+    pub(crate) const ALL: &'static [(Name, BuiltinType)] = &[\n+        (CHAR, BuiltinType::Char),\n+        (BOOL, BuiltinType::Bool),\n+        (STR, BuiltinType::Str),\n+\n+        (ISIZE, BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::Xsize })),\n+        (I8,    BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X8 })),\n+        (I16,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X16 })),\n+        (I32,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X32 })),\n+        (I64,   BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X64 })),\n+        (I128,  BuiltinType::Int(IntTy { signedness: Signedness::Signed, bitness: IntBitness::X128 })),\n+\n+        (USIZE, BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize })),\n+        (U8,    BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X8 })),\n+        (U16,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X16 })),\n+        (U32,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X32 })),\n+        (U64,   BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X64 })),\n+        (U128,  BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 })),\n+\n+        (F32, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n+        (F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X64 })),\n     ];\n }\n \n@@ -560,7 +561,7 @@ impl FnData {\n                 let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n                     TypeRef::from_ast(type_ref)\n                 } else {\n-                    let self_type = TypeRef::Path(Name::self_type().into());\n+                    let self_type = TypeRef::Path(SELF_TYPE.into());\n                     match self_param.kind() {\n                         ast::SelfParamKind::Owned => self_type,\n                         ast::SelfParamKind::Ref => {"}, {"sha": "3a97d97ce16eb7e0e224a3db1adb9d2cb19f7b57", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    name::AsName,\n+    name::{AsName, SELF_PARAM},\n     type_ref::{Mutability, TypeRef},\n     DefWithBody, Either, HasSource, HirDatabase, HirFileId, MacroCallLoc, MacroFileKind, Name,\n     Path, Resolver,\n@@ -981,7 +981,7 @@ where\n                 let ptr = AstPtr::new(self_param);\n                 let param_pat = self.alloc_pat(\n                     Pat::Bind {\n-                        name: Name::self_param(),\n+                        name: SELF_PARAM,\n                         mode: BindingAnnotation::Unannotated,\n                         subpat: None,\n                     },"}, {"sha": "3ad2c551a09b1d913b2c15dabff7ce4bc499c042", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -9,6 +9,7 @@ use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, Ty\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n+    name::SELF_TYPE,\n     path::Path,\n     type_ref::TypeRef,\n     AdtDef, AsName, Container, Enum, EnumVariant, Function, HasSource, ImplBlock, Name, Struct,\n@@ -83,7 +84,7 @@ impl GenericParams {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam {\n                     idx: start,\n-                    name: Name::self_type(),\n+                    name: SELF_TYPE,\n                     default: None,\n                 });\n                 generics.fill(&*it.source(db).ast, start + 1);"}, {"sha": "56831ba05b0b619141715218bbf87f88d62d4555", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -49,7 +49,7 @@ mod marks;\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase, InternDatabase},\n     ids::MacroFileKind,\n-    name::{AsName, KnownName},\n+    name::AsName,\n     resolve::Resolver,\n     source_id::{AstId, FileAstId},\n };"}, {"sha": "7187953140ae1d15baa9d8e8c148df8ac2a71255", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 25, "deletions": 111, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -26,22 +26,14 @@ impl Name {\n     /// Note: this is private to make creating name from random string hard.\n     /// Hopefully, this should allow us to integrate hygiene cleaner in the\n     /// future, and to switch to interned representation of names.\n-    fn new(text: SmolStr) -> Name {\n+    const fn new(text: SmolStr) -> Name {\n         Name { text }\n     }\n \n     pub(crate) fn missing() -> Name {\n         Name::new(\"[missing name]\".into())\n     }\n \n-    pub(crate) fn self_param() -> Name {\n-        Name::new(\"self\".into())\n-    }\n-\n-    pub(crate) fn self_type() -> Name {\n-        Name::new(\"Self\".into())\n-    }\n-\n     pub(crate) fn tuple_field_name(idx: usize) -> Name {\n         Name::new(idx.to_string().into())\n     }\n@@ -63,38 +55,6 @@ impl Name {\n     pub fn as_smolstr(&self) -> &SmolStr {\n         &self.text\n     }\n-\n-    pub(crate) fn as_known_name(&self) -> Option<KnownName> {\n-        let name = match self.text.as_str() {\n-            \"isize\" => KnownName::Isize,\n-            \"i8\" => KnownName::I8,\n-            \"i16\" => KnownName::I16,\n-            \"i32\" => KnownName::I32,\n-            \"i64\" => KnownName::I64,\n-            \"i128\" => KnownName::I128,\n-            \"usize\" => KnownName::Usize,\n-            \"u8\" => KnownName::U8,\n-            \"u16\" => KnownName::U16,\n-            \"u32\" => KnownName::U32,\n-            \"u64\" => KnownName::U64,\n-            \"u128\" => KnownName::U128,\n-            \"f32\" => KnownName::F32,\n-            \"f64\" => KnownName::F64,\n-            \"bool\" => KnownName::Bool,\n-            \"char\" => KnownName::Char,\n-            \"str\" => KnownName::Str,\n-            \"Self\" => KnownName::SelfType,\n-            \"self\" => KnownName::SelfParam,\n-            \"macro_rules\" => KnownName::MacroRules,\n-\n-            \"std\" => KnownName::Std,\n-            \"iter\" => KnownName::Iter,\n-            \"IntoIterator\" => KnownName::IntoIterator,\n-            \"Item\" => KnownName::Item,\n-            _ => return None,\n-        };\n-        Some(name)\n-    }\n }\n \n pub(crate) trait AsName {\n@@ -130,76 +90,30 @@ impl AsName for ra_db::Dependency {\n     }\n }\n \n-// Ideally, should be replaced with\n-// ```\n-// const ISIZE: Name = Name::new(\"isize\")\n-// ```\n-// but const-fn is not that powerful yet.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub(crate) enum KnownName {\n-    Isize,\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128,\n-\n-    Usize,\n-    U8,\n-    U16,\n-    U32,\n-    U64,\n-    U128,\n-\n-    F32,\n-    F64,\n-\n-    Bool,\n-    Char,\n-    Str,\n-\n-    SelfType,\n-    SelfParam,\n-\n-    MacroRules,\n-\n-    Std,\n-    Iter,\n-    IntoIterator,\n-    Item,\n-}\n-\n-impl AsName for KnownName {\n-    fn as_name(&self) -> Name {\n-        let s = match self {\n-            KnownName::Isize => \"isize\",\n-            KnownName::I8 => \"i8\",\n-            KnownName::I16 => \"i16\",\n-            KnownName::I32 => \"i32\",\n-            KnownName::I64 => \"i64\",\n-            KnownName::I128 => \"i128\",\n-            KnownName::Usize => \"usize\",\n-            KnownName::U8 => \"u8\",\n-            KnownName::U16 => \"u16\",\n-            KnownName::U32 => \"u32\",\n-            KnownName::U64 => \"u64\",\n-            KnownName::U128 => \"u128\",\n-            KnownName::F32 => \"f32\",\n-            KnownName::F64 => \"f64\",\n-            KnownName::Bool => \"bool\",\n-            KnownName::Char => \"char\",\n-            KnownName::Str => \"str\",\n-            KnownName::SelfType => \"Self\",\n-            KnownName::SelfParam => \"self\",\n-            KnownName::MacroRules => \"macro_rules\",\n-            KnownName::Std => \"std\",\n-            KnownName::Iter => \"iter\",\n-            KnownName::IntoIterator => \"IntoIterator\",\n-            KnownName::Item => \"Item\",\n-        };\n-        Name::new(s.into())\n-    }\n-}\n+pub(crate) const ISIZE: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"isize\"));\n+pub(crate) const I8: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"i8\"));\n+pub(crate) const I16: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"i16\"));\n+pub(crate) const I32: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"i32\"));\n+pub(crate) const I64: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"i64\"));\n+pub(crate) const I128: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"i128\"));\n+pub(crate) const USIZE: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"usize\"));\n+pub(crate) const U8: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"u8\"));\n+pub(crate) const U16: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"u16\"));\n+pub(crate) const U32: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"u32\"));\n+pub(crate) const U64: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"u64\"));\n+pub(crate) const U128: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"u128\"));\n+pub(crate) const F32: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"f32\"));\n+pub(crate) const F64: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"f64\"));\n+pub(crate) const BOOL: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"bool\"));\n+pub(crate) const CHAR: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"char\"));\n+pub(crate) const STR: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"str\"));\n+pub(crate) const SELF_PARAM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"self\"));\n+pub(crate) const SELF_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Self\"));\n+pub(crate) const MACRO_RULES: Name = Name::new(SmolStr::new_inline_from_ascii(11, b\"macro_rules\"));\n+pub(crate) const STD: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"std\"));\n+pub(crate) const ITER: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"iter\"));\n+pub(crate) const INTO_ITERATOR: Name = Name::new(SmolStr::new_inline_from_ascii(12, b\"IntoIterator\"));\n+pub(crate) const ITEM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "4c5623063a707ac0956ec71b5eb8f2f2a7371b72", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -65,7 +65,7 @@ use test_utils::tested_by;\n \n use crate::{\n     diagnostics::DiagnosticSink, either::Either, ids::MacroDefId,\n-    nameres::diagnostics::DefDiagnostic, AsName, AstDatabase, AstId, BuiltinType, Crate,\n+    nameres::diagnostics::DefDiagnostic, AstDatabase, AstId, BuiltinType, Crate,\n     DefDatabase, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n };\n \n@@ -138,8 +138,8 @@ pub struct ModuleScope {\n static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n     BuiltinType::ALL\n         .iter()\n-        .map(|&(known_name, ty)| {\n-            (known_name.as_name(), Resolution { def: PerNs::types(ty.into()), import: None })\n+        .map(|(name, ty)| {\n+            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: None })\n         })\n         .collect()\n });"}, {"sha": "1c3b453bd02f6d70dc07c839cef1be1937de3cad", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -8,11 +8,12 @@ use test_utils::tested_by;\n use crate::{\n     either::Either,\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n+    name::MACRO_RULES,\n     nameres::{\n         diagnostics::DefDiagnostic, raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData,\n         ModuleDef, PerNs, ReachedFixedPoint, Resolution, ResolveMode,\n     },\n-    AstId, Const, DefDatabase, Enum, Function, HirFileId, KnownName, MacroDef, Module, Name, Path,\n+    AstId, Const, DefDatabase, Enum, Function, HirFileId, MacroDef, Module, Name, Path,\n     Static, Struct, Trait, TypeAlias, Union,\n };\n \n@@ -624,7 +625,7 @@ where\n }\n \n fn is_macro_rules(path: &Path) -> bool {\n-    path.as_ident().and_then(Name::as_known_name) == Some(KnownName::MacroRules)\n+    path.as_ident() == Some(&MACRO_RULES)\n }\n \n fn resolve_submodule("}, {"sha": "ef75308f624b534a4070be2d850c3b129131c27f", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     },\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    name::{KnownName, Name},\n+    name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, CrateModuleId, PerNs},\n     path::Path,\n     MacroDef, ModuleDef, Trait,\n@@ -151,7 +151,7 @@ impl Resolver {\n         if let Some(name) = path.as_ident() {\n             PathResult::from_resolution(self.resolve_name(db, name))\n         } else if path.is_self() {\n-            PathResult::from_resolution(self.resolve_name(db, &Name::self_param()))\n+            PathResult::from_resolution(self.resolve_name(db, &SELF_PARAM))\n         } else {\n             let (item_map, module) = match self.module() {\n                 Some(it) => it,\n@@ -270,7 +270,7 @@ impl Scope {\n     fn resolve_name(&self, db: &impl HirDatabase, name: &Name) -> PerNs<Resolution> {\n         match self {\n             Scope::ModuleScope(m) => {\n-                if let Some(KnownName::SelfParam) = name.as_known_name() {\n+                if name == &SELF_PARAM {\n                     PerNs::types(Resolution::Def(m.crate_def_map.mk_module(m.module_id).into()))\n                 } else {\n                     m.crate_def_map\n@@ -283,7 +283,7 @@ impl Scope {\n                 None => PerNs::none(),\n             },\n             Scope::ImplBlockScope(i) => {\n-                if name.as_known_name() == Some(KnownName::SelfType) {\n+                if name == &SELF_TYPE {\n                     PerNs::types(Resolution::SelfType(*i))\n                 } else {\n                     PerNs::none()\n@@ -329,7 +329,7 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(Name::self_type(), PerNs::types(Resolution::SelfType(*i)));\n+                f(SELF_TYPE, PerNs::types(Resolution::SelfType(*i)));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "41980a3253269a58ced07d8806d9460a912900a2", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -40,6 +40,7 @@ use crate::{\n         PatId, Statement, UnaryOp,\n     },\n     generics::{GenericParams, HasGenericParams},\n+    name::{SELF_TYPE, INTO_ITERATOR, ITEM, ITER, STD},\n     nameres::{Namespace, PerNs},\n     path::{GenericArg, GenericArgs, PathKind, PathSegment},\n     resolve::{\n@@ -48,7 +49,7 @@ use crate::{\n     },\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    AdtDef, AsName, ConstData, DefWithBody, FnData, Function, HirDatabase, ImplItem, KnownName,\n+    AdtDef, ConstData, DefWithBody, FnData, Function, HirDatabase, ImplItem,\n     ModuleDef, Name, Path, StructField,\n };\n \n@@ -842,7 +843,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         // Parent arguments are unknown, except for the receiver type\n         if let Some(parent_generics) = def_generics.and_then(|p| p.parent_params.clone()) {\n             for param in &parent_generics.params {\n-                if param.name.as_known_name() == Some(crate::KnownName::SelfType) {\n+                if param.name == SELF_TYPE {\n                     substs.push(receiver_ty.clone());\n                 } else {\n                     substs.push(Ty::Unknown);\n@@ -1346,15 +1347,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let into_iter_path = Path {\n             kind: PathKind::Abs,\n             segments: vec![\n-                PathSegment { name: KnownName::Std.as_name(), args_and_bindings: None },\n-                PathSegment { name: KnownName::Iter.as_name(), args_and_bindings: None },\n-                PathSegment { name: KnownName::IntoIterator.as_name(), args_and_bindings: None },\n+                PathSegment { name: STD, args_and_bindings: None },\n+                PathSegment { name: ITER, args_and_bindings: None },\n+                PathSegment { name: INTO_ITERATOR, args_and_bindings: None },\n             ],\n         };\n \n         match self.resolver.resolve_path_segments(self.db, &into_iter_path).into_fully_resolved() {\n             PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, KnownName::Item.as_name())?)\n+                Some(trait_.associated_type_by_name(self.db, ITEM)?)\n             }\n             _ => None,\n         }"}, {"sha": "156991358ec35d197934e6c2ad66bd4f096ee12d", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/012fec54dc508896493d5d3073b4786c93d66fe9/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=012fec54dc508896493d5d3073b4786c93d66fe9", "patch": "@@ -17,7 +17,7 @@ rowan = \"0.5.0\"\n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations\n text_unit = { version = \"0.1.8\", features = [\"serde\"] }\n-smol_str = { version = \"0.1.11\", features = [\"serde\"] }\n+smol_str = { version = \"0.1.12\", features = [\"serde\"] }\n \n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_parser = { path = \"../ra_parser\" }"}]}