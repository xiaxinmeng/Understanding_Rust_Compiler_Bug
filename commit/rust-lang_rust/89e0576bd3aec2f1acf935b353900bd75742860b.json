{"sha": "89e0576bd3aec2f1acf935b353900bd75742860b", "node_id": "C_kwDOAAsO6NoAKDg5ZTA1NzZiZDNhZWMyZjFhY2Y5MzViMzUzOTAwYmQ3NTc0Mjg2MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:59:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:59:51Z"}, "message": "Auto merge of #106340 - saethlin:propagate-operands, r=oli-obk\n\nAlways permit ConstProp to exploit arithmetic identities\n\nFixes https://github.com/rust-lang/rust/issues/72751\n\nInitially, I thought I would need to enable operand propagation then do something else, but actually https://github.com/rust-lang/rust/pull/74491 already has the fix for the issue in question! It looks like this optimization was put under MIR opt level 3 due to possible soundness/stability implications, then demoted further to MIR opt level 4 when MIR opt level 2 became associated with `--release`.\n\nPerhaps in the past we were doing CTFE on optimized MIR? We aren't anymore, so this optimization has no stability implications.\n\nr? `@oli-obk`", "tree": {"sha": "832426029cb2ca75232215aa44aba6a40a479954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/832426029cb2ca75232215aa44aba6a40a479954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e0576bd3aec2f1acf935b353900bd75742860b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e0576bd3aec2f1acf935b353900bd75742860b", "html_url": "https://github.com/rust-lang/rust/commit/89e0576bd3aec2f1acf935b353900bd75742860b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e0576bd3aec2f1acf935b353900bd75742860b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c54c8cbac882e149e04a9e1f2d146fd548ae30ae", "html_url": "https://github.com/rust-lang/rust/commit/c54c8cbac882e149e04a9e1f2d146fd548ae30ae"}, {"sha": "82f0973dd52d113666304802e9213b089e3211c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f0973dd52d113666304802e9213b089e3211c6", "html_url": "https://github.com/rust-lang/rust/commit/82f0973dd52d113666304802e9213b089e3211c6"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "5c45abc5a170ec63bae49cbb386edd0d854accfe", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89e0576bd3aec2f1acf935b353900bd75742860b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e0576bd3aec2f1acf935b353900bd75742860b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=89e0576bd3aec2f1acf935b353900bd75742860b", "patch": "@@ -655,11 +655,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        if self.tcx.sess.mir_opt_level() >= 4 {\n-            self.eval_rvalue_with_identities(rvalue, place)\n-        } else {\n-            self.use_ecx(|this| this.ecx.eval_rvalue_into_place(rvalue, place))\n-        }\n+        self.eval_rvalue_with_identities(rvalue, place)\n     }\n \n     // Attempt to use algebraic identities to eliminate constant expressions"}, {"sha": "d7f66a6bf4d56816ba163731a309910cfe2d39c6", "filename": "src/test/mir-opt/div_overflow.const_dividend.PreCodegen.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_dividend.PreCodegen.after.mir?ref=89e0576bd3aec2f1acf935b353900bd75742860b", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `const_dividend` after PreCodegen\n+\n+fn const_dividend(_1: i32) -> i32 {\n+    debug a => _1;                       // in scope 0 at $DIR/div_overflow.rs:+0:23: +0:24\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:34: +0:37\n+    let mut _2: bool;                    // in scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+\n+    bb0: {\n+        _2 = Eq(_1, const 0_i32);        // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        assert(!move _2, \"attempt to divide `{}` by zero\", const 256_i32) -> bb1; // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+    }\n+\n+    bb1: {\n+        _0 = Div(const 256_i32, move _1); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "7b7ab1978258fe21c9adf5f2c2e49e79b473ca5e", "filename": "src/test/mir-opt/div_overflow.const_divisor.PreCodegen.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdiv_overflow.const_divisor.PreCodegen.after.mir?ref=89e0576bd3aec2f1acf935b353900bd75742860b", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `const_divisor` after PreCodegen\n+\n+fn const_divisor(_1: i32) -> i32 {\n+    debug a => _1;                       // in scope 0 at $DIR/div_overflow.rs:+0:22: +0:23\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/div_overflow.rs:+0:33: +0:36\n+\n+    bb0: {\n+        _0 = Div(move _1, const 256_i32); // scope 0 at $DIR/div_overflow.rs:+1:5: +1:12\n+        return;                          // scope 0 at $DIR/div_overflow.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "10ce5bc0f4f04600ec7d1fb02a630c089f725ca1", "filename": "src/test/mir-opt/div_overflow.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e0576bd3aec2f1acf935b353900bd75742860b/src%2Ftest%2Fmir-opt%2Fdiv_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdiv_overflow.rs?ref=89e0576bd3aec2f1acf935b353900bd75742860b", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -Copt-level=0 -Coverflow-checks=yes\n+\n+// Tests that division with a const does not emit a panicking branch for overflow\n+\n+// EMIT_MIR div_overflow.const_divisor.PreCodegen.after.mir\n+pub fn const_divisor(a: i32) -> i32 {\n+    a / 256\n+}\n+\n+// EMIT_MIR div_overflow.const_dividend.PreCodegen.after.mir\n+pub fn const_dividend(a: i32) -> i32 {\n+    256 / a\n+}\n+\n+fn main() {\n+    const_divisor(123);\n+    const_dividend(123);\n+}"}]}