{"sha": "f72685f2ffd1e79c2d4e099770490d4cf00795fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MjY4NWYyZmZkMWU3OWMyZDRlMDk5NzcwNDkwZDRjZjAwNzk1ZmE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-17T21:23:09Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-11-21T23:02:04Z"}, "message": "Use SmallVec for TypeWalker's stack.\n\nThe change also adds the missing `SmallVec::truncate` method.", "tree": {"sha": "c9f17d7192af2ff033dce2e4ce7ce6837fe9a604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f17d7192af2ff033dce2e4ce7ce6837fe9a604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f72685f2ffd1e79c2d4e099770490d4cf00795fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f72685f2ffd1e79c2d4e099770490d4cf00795fa", "html_url": "https://github.com/rust-lang/rust/commit/f72685f2ffd1e79c2d4e099770490d4cf00795fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f72685f2ffd1e79c2d4e099770490d4cf00795fa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a95e34fe32ca86982607a85e9c5714eb6262d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a95e34fe32ca86982607a85e9c5714eb6262d9", "html_url": "https://github.com/rust-lang/rust/commit/80a95e34fe32ca86982607a85e9c5714eb6262d9"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "ebf8c96def7cc1472d55b682d958b05a3253f91d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f72685f2ffd1e79c2d4e099770490d4cf00795fa", "patch": "@@ -48,6 +48,7 @@ use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_const_math::ConstInt;\n+use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n \n use hir;\n use hir::itemlikevisit::ItemLikeVisitor;\n@@ -1887,7 +1888,7 @@ impl<'tcx> TyS<'tcx> {\n     /// Iterator that walks the immediate children of `self`.  Hence\n     /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`\n     /// (but not `i32`, like `walk`).\n-    pub fn walk_shallow(&'tcx self) -> IntoIter<Ty<'tcx>> {\n+    pub fn walk_shallow(&'tcx self) -> AccIntoIter<walk::TypeWalkerArray<'tcx>> {\n         walk::walk_shallow(self)\n     }\n "}, {"sha": "2f9468dbe5887e532203a67afb07be4c64d16e98", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=f72685f2ffd1e79c2d4e099770490d4cf00795fa", "patch": "@@ -12,17 +12,22 @@\n //! WARNING: this does not keep track of the region depth.\n \n use ty::{self, Ty};\n-use std::iter::Iterator;\n-use std::vec::IntoIter;\n+use rustc_data_structures::small_vec::SmallVec;\n+use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n+\n+// The TypeWalker's stack is hot enough that it's worth going to some effort to\n+// avoid heap allocations.\n+pub type TypeWalkerArray<'tcx> = [Ty<'tcx>; 8];\n+pub type TypeWalkerStack<'tcx> = SmallVec<TypeWalkerArray<'tcx>>;\n \n pub struct TypeWalker<'tcx> {\n-    stack: Vec<Ty<'tcx>>,\n+    stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n }\n \n impl<'tcx> TypeWalker<'tcx> {\n     pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker { stack: vec![ty], last_subtree: 1, }\n+        TypeWalker { stack: SmallVec::one(ty), last_subtree: 1, }\n     }\n \n     /// Skips the subtree of types corresponding to the last type\n@@ -61,8 +66,8 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n-    let mut stack = vec![];\n+pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> {\n+    let mut stack = SmallVec::new();\n     push_subtypes(&mut stack, ty);\n     stack.into_iter()\n }\n@@ -73,7 +78,7 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n // known to be significant to any code, but it seems like the\n // natural order one would expect (basically, the order of the\n // types as they are written).\n-fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n+fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n         ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n@@ -112,7 +117,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n     }\n }\n \n-fn push_sig_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, sig: &ty::PolyFnSig<'tcx>) {\n+fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: &ty::PolyFnSig<'tcx>) {\n     stack.push(sig.0.output);\n     stack.extend(sig.0.inputs.iter().cloned().rev());\n }"}, {"sha": "4e2b3786021026bf85b6821724ee0cfe3612201b", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f72685f2ffd1e79c2d4e099770490d4cf00795fa/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=f72685f2ffd1e79c2d4e099770490d4cf00795fa", "patch": "@@ -130,6 +130,18 @@ impl<A: Array> SmallVec<A> {\n             self.set_len(len + 1);\n         }\n     }\n+\n+    pub fn truncate(&mut self, len: usize) {\n+        unsafe {\n+            while len < self.len() {\n+                // Decrement len before the drop_in_place(), so a panic on Drop\n+                // doesn't re-drop the just-failed value.\n+                let newlen = self.len() - 1;\n+                self.set_len(newlen);\n+                ::std::ptr::drop_in_place(self.get_unchecked_mut(newlen));\n+            }\n+        }\n+    }\n }\n \n impl<A: Array> Deref for SmallVec<A> {"}]}