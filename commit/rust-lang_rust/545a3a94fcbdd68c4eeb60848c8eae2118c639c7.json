{"sha": "545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NWEzYTk0ZmNiZGQ2OGM0ZWViNjA4NDhjOGVhZTIxMThjNjM5Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-04T18:51:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-04T18:51:27Z"}, "message": "Auto merge of #35300 - eddyb:mir-neg-overflow, r=arielb1\n\nrustc_trans: don't Assert(Overflow(Neg)) when overflow checks are off.\n\nGeneric functions using `Neg` on primitive types would panic even in release mode, with MIR trans.\nThe solution is a bit hacky, as I'm checking the message, since there's no dedicated `CheckedUnOp`.\n\nBlocks Servo rustup ([failure #1](http://build.servo.org/builders/linux-rel/builds/2477/steps/test_3/logs/stdio), [failure #2](http://build.servo.org/builders/mac-rel-css/builds/2364/steps/test/logs/stdio)) - this should be the last hurdle, it affects only one test.", "tree": {"sha": "405df1f63b219cdb7015409e4ce26bab3e764404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405df1f63b219cdb7015409e4ce26bab3e764404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "html_url": "https://github.com/rust-lang/rust/commit/545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/545a3a94fcbdd68c4eeb60848c8eae2118c639c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e804a3cf256106c097d44f6e0212cd183122da07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e804a3cf256106c097d44f6e0212cd183122da07", "html_url": "https://github.com/rust-lang/rust/commit/e804a3cf256106c097d44f6e0212cd183122da07"}, {"sha": "fbabe616413d34c1ab68668de34de4322d963b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbabe616413d34c1ab68668de34de4322d963b93", "html_url": "https://github.com/rust-lang/rust/commit/fbabe616413d34c1ab68668de34de4322d963b93"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "9bfdb511c623c97f34974b9711b443978ffcea3b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/545a3a94fcbdd68c4eeb60848c8eae2118c639c7/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545a3a94fcbdd68c4eeb60848c8eae2118c639c7/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "patch": "@@ -261,7 +261,23 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, cleanup } => {\n                 let cond = self.trans_operand(&bcx, cond).immediate();\n-                let const_cond = common::const_to_opt_uint(cond).map(|c| c == 1);\n+                let mut const_cond = common::const_to_opt_uint(cond).map(|c| c == 1);\n+\n+                // This case can currently arise only from functions marked\n+                // with #[rustc_inherit_overflow_checks] and inlined from\n+                // another crate (mostly core::num generic/#[inline] fns),\n+                // while the current crate doesn't use overflow checks.\n+                // NOTE: Unlike binops, negation doesn't have its own\n+                // checked operation, just a comparison with the minimum\n+                // value, so we have to check for the assert message.\n+                if !bcx.ccx().check_overflow() {\n+                    use rustc_const_math::ConstMathErr::Overflow;\n+                    use rustc_const_math::Op::Neg;\n+\n+                    if let mir::AssertMessage::Math(Overflow(Neg)) = *msg {\n+                        const_cond = Some(expected);\n+                    }\n+                }\n \n                 // Don't translate the panic block if success if known.\n                 if const_cond == Some(expected) {"}, {"sha": "04ac606a8a9a5458e0c4ec1c7ee70b7965271700", "filename": "src/test/run-pass/mir_overflow_off.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/545a3a94fcbdd68c4eeb60848c8eae2118c639c7/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/545a3a94fcbdd68c4eeb60848c8eae2118c639c7/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_overflow_off.rs?ref=545a3a94fcbdd68c4eeb60848c8eae2118c639c7", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z force-overflow-checks=off -Z orbit\n+\n+// Test that with MIR trans, overflow checks can be\n+// turned off, even when they're from core::ops::*.\n+\n+use std::ops::*;\n+\n+fn main() {\n+    assert_eq!(i8::neg(-0x80), -0x80);\n+\n+    assert_eq!(u8::add(0xff, 1), 0_u8);\n+    assert_eq!(u8::sub(0, 1), 0xff_u8);\n+    assert_eq!(u8::mul(0xff, 2), 0xfe_u8);\n+    assert_eq!(u8::shl(1, 9), 2_u8);\n+    assert_eq!(u8::shr(2, 9), 1_u8);\n+}"}]}