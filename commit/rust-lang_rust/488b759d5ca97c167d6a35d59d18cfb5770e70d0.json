{"sha": "488b759d5ca97c167d6a35d59d18cfb5770e70d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OGI3NTlkNWNhOTdjMTY3ZDZhMzVkNTlkMThjZmI1NzcwZTcwZDA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-02T01:31:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-10-03T13:28:54Z"}, "message": "Replace \"non trivial\" with \"non-trivial\"", "tree": {"sha": "dc4e19931032117ecb56306c7ddb930f4b2873c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc4e19931032117ecb56306c7ddb930f4b2873c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/488b759d5ca97c167d6a35d59d18cfb5770e70d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/488b759d5ca97c167d6a35d59d18cfb5770e70d0", "html_url": "https://github.com/rust-lang/rust/commit/488b759d5ca97c167d6a35d59d18cfb5770e70d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/488b759d5ca97c167d6a35d59d18cfb5770e70d0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db05e032db798b3162926ee4b72072d3c4de56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db05e032db798b3162926ee4b72072d3c4de56f", "html_url": "https://github.com/rust-lang/rust/commit/1db05e032db798b3162926ee4b72072d3c4de56f"}], "stats": {"total": 170, "additions": 85, "deletions": 85}, "files": [{"sha": "c4774de73e19590cd5cbc1248ff3951c3188a4f1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -581,7 +581,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n-    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    /// Allows non-trivial generic constants which have to be manually propageted upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n     /// Allows basic arithmetic on floating point types in a `const fn`."}, {"sha": "e3cf6d12bd5eb28191ba05d12ce9fe5522e1a599", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -469,7 +469,7 @@ impl<'a> Resolver<'a> {\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n-                    \"generic parameters must not be used inside of non trivial constant values\",\n+                    \"generic parameters must not be used inside of non-trivial constant values\",\n                 );\n                 err.span_label(\n                     span,"}, {"sha": "fe8f592638594a643a99340c953cd65efbbfe5e7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -218,7 +218,7 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n-    /// generic parameters must not be used inside of non trivial constant values.\n+    /// generic parameters must not be used inside of non-trivial constant values.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },"}, {"sha": "0fc45513cd78a32a2547f65217cb456cf3f30db8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],"}, {"sha": "dd45b6ed278e8cca74fb7c03f08b0e89a08e1868", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "4b3235fd08783f6fde9b56a857216bff06c673da", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "d552e0f543080a7ffe4d8cc8c39843d597d68bd0", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "85a15b1e75fdcc5feaf82c222a25256178b4316c", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {"}, {"sha": "2eac9505624dd23a70f34ea92631cf2943329958", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];"}, {"sha": "637c940f7143270fda540d5b1fc994c7716f5209", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "2c1bc055b28ae85ea17a4d48c8f4168cae4e880c", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n    |\n    = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {"}, {"sha": "fdd9a569748e262745980e5063bb2fefdecf4e6a", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {"}, {"sha": "f461a31eeae3a86c1ada139e52fcbf8027b00b0a", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>"}, {"sha": "a181a8dabe5aab320991c36e1e544cfbcf043e95", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ERROR generic parameters must not be used inside of non-trivial constant values\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "84975e8f3be6b96a30e5111d12bbbbccb5577b1f", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;"}, {"sha": "5694dc6d04da17cce4f033c02abfcd72b2bf609f", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "f94ba8c0c9b87b43f3ccebd3732f048f5ed86c92", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];"}, {"sha": "338ec42799d1759a03fb5f829416cc8ac6520936", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "f712171bbac615b9ff00556bc1788ce7e5567f05", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}"}, {"sha": "b62ebf846d5b1d6220527f7f6d5164dbbbbc67ea", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "a18126ccfef6d12dabc89619f369e5427a6d2d85", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();"}, {"sha": "668f49852e1ef1170f3a149874fa7e6173083080", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "ba378de4156540b0b1ab90bfb58c21fd5b29f547", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];"}, {"sha": "296e4d423c48a246a9ec46f74a8e49db4eaa6dc7", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }\n }"}, {"sha": "73d6fec6f9b565609a09e3c9353b5c671ed56a14", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}"}, {"sha": "ac313eb3b2ff3a10cca570915fdf85c3360a92ad", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ generic parameters must not be used inside of non-trivial constant values\n \n struct Foo;\n "}, {"sha": "59d2be3ce4b42a9cb1819b1299f369cb5f276ddf", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n    |\n    = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;"}, {"sha": "49b305a5a783f62a7203e23980872d422781eff0", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n-    //[min]~| ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "a4c80b1d8c01e29cfdefbc9d56949e41889737ed", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n    |\n    = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n    |\n    = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n    |\n    = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,"}, {"sha": "779c1d2950e4d510cc10d1bbba5430ef53ee2d96", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside of non trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non trivial constant values\n+//[min]~^^^^^ Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "afc14c7dcff575af88eac6651b3d9d81d1cc843e", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,"}, {"sha": "65c7f00a72ae5e20b2a686b530bf5779ea90ecc7", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n {\n }\n "}, {"sha": "0db948d0a45dba0785093ca95c96e86a9492188f", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {"}, {"sha": "3c5bfb03f080176b6e4b95b98ca56de88e182026", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n     todo!()\n }\n "}, {"sha": "c6380f6394d0195abb18f45667764141b9c26fca", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n trait Foo {"}, {"sha": "d8897f53d7f748d974a5183c5d9869c9bbc0f449", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,28 +1,28 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];"}, {"sha": "03c78a2fe684e36de811e1068a590e1120f0a831", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -12,7 +12,7 @@ pub struct AtLeastByte<T: ?Sized> {\n     value: T,\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "ae5677887a124b955498dd7ecca72295f877c4fe", "filename": "src/test/ui/const-generics/min_const_generics/const-argument-if-length.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-argument-if-length.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/const-argument-if-length.rs:14:24\n    |\n LL |     pad: [u8; is_zst::<T>()],"}, {"sha": "f5387d659b3faf292a47ddcda48d7f5fab5ee8f0", "filename": "src/test/ui/const-generics/min_const_generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-function-call-in-array-length.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -3,9 +3,9 @@\n const fn foo(n: usize) -> usize { n * 2 }\n \n fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n     [0; foo(N)]\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "ad0748297f53ebe42a4dfb512728305553bcfa1b", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,7 +1,7 @@\n #![feature(min_const_generics)]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//~^ ERROR generic parameters must not be used inside of non trivial constant values\n-//~| ERROR generic parameters must not be used inside of non trivial constant values\n+//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//~| ERROR generic parameters must not be used inside of non-trivial constant values\n \n fn main() {}"}, {"sha": "5af5c2b115d5fbd42bbf403d5d8a876e06d4f2a2", "filename": "src/test/ui/const-generics/min_const_generics/generic-sum-in-array-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fgeneric-sum-in-array-length.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/generic-sum-in-array-length.rs:3:53\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n    |\n    = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/generic-sum-in-array-length.rs:3:57\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}"}, {"sha": "5b5958520937f8903aef7d739e34f50516564e4d", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -7,7 +7,7 @@ trait Trait<const S: &'static str> {}\n struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n {\n     t: T\n }"}, {"sha": "2645195282b20c399a7e6b1a52cdc59abba1ab17", "filename": "src/test/ui/const-generics/min_const_generics/intrinsics-type_name-as-const-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fintrinsics-type_name-as-const-argument.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:9:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>"}, {"sha": "308c48f8d325d559ac010435a6e02708500aa1cf", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -3,7 +3,7 @@\n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n }\n \n fn main() {}"}, {"sha": "9963be787b736958c8a0361acc4ba94458fce422", "filename": "src/test/ui/const-generics/min_const_generics/issue-67375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67375.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67375.rs:5:25\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],"}, {"sha": "f335f294de80e9265a8b721f602a31574a52358e", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -8,9 +8,9 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         let b = &*(&x as *const _ as *const S);\n-        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }],\n }"}, {"sha": "4b6a1c7cf91662dcdad6c40a1e865d73d03c7dfe", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-1.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67945-1.rs:10:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67945-1.rs:12:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);"}, {"sha": "9faa1e0694d4d917483d7642543c69ebddbb7b5f", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -6,9 +6,9 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         let b = &*(&x as *const _ as *const S);\n-        //~^ ERROR generic parameters must not be used inside of non trivial constant values\n+        //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n         0\n     }],\n }"}, {"sha": "39d7f1f936887bf4422a7465a1df35dcb51c158a", "filename": "src/test/ui/const-generics/min_const_generics/issue-67945-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fissue-67945-2.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67945-2.rs:8:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n    |\n    = note: type parameters are currently not permitted in anonymous constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/issue-67945-2.rs:10:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);"}, {"sha": "7dc81bf45af9aeec284d9d3f9c46605e3950b3b3", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,4 +1,4 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];"}, {"sha": "0dd591d891f2b98a299ef2c6d55d2463f2f6c8f6", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -6,7 +6,7 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);"}, {"sha": "b9d74850f37d6ecb749c2240c79a473775722ceb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+//[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "1c52d6017499770a60c6f508007342f6a8239cad", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -1,12 +1,12 @@\n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n+error: generic parameters must not be used inside of non-trivial constant values\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;"}, {"sha": "f8c41404c467b616d0ddadbb9094e6e0ab5de951", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/488b759d5ca97c167d6a35d59d18cfb5770e70d0/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=488b759d5ca97c167d6a35d59d18cfb5770e70d0", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n }\n \n fn main() {}"}]}