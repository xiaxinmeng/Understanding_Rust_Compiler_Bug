{"sha": "a6dd6582540ad20e385bcf8326968aa94f33694b", "node_id": "C_kwDOAAsO6NoAKGE2ZGQ2NTgyNTQwYWQyMGUzODViY2Y4MzI2OTY4YWE5NGYzMzY5NGI", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T21:04:46Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T21:04:46Z"}, "message": "Addressed comments by @compiler-errors and @bjorn3", "tree": {"sha": "2749d58655ec5d303ed2908f93838efd0684691c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2749d58655ec5d303ed2908f93838efd0684691c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6dd6582540ad20e385bcf8326968aa94f33694b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dd6582540ad20e385bcf8326968aa94f33694b", "html_url": "https://github.com/rust-lang/rust/commit/a6dd6582540ad20e385bcf8326968aa94f33694b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6dd6582540ad20e385bcf8326968aa94f33694b/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9c6e22f4baf060cfb42b4a99de6aeba22acbe9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9c6e22f4baf060cfb42b4a99de6aeba22acbe9d", "html_url": "https://github.com/rust-lang/rust/commit/c9c6e22f4baf060cfb42b4a99de6aeba22acbe9d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "3db8adb2a244424a52cbf667128b7a722f92150a", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -2646,7 +2646,7 @@ mod sig {\n \n         // Convert the result having \"2 * precision\" significant-bits back to the one\n         // having \"precision\" significant-bits. First, move the radix point from\n-        // position \"2*precision - 1\" to \"precision - 1\". The exponent need to be\n+        // poision \"2*precision - 1\" to \"precision - 1\". The exponent need to be\n         // adjusted by \"2*precision - 1\" - \"precision - 1\" = \"precision\".\n         *exp -= precision as ExpInt + 1;\n "}, {"sha": "ca7116b887d5a622a298d336ade72684f18413df", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -23,7 +23,7 @@\n //!     ss2 = explicit_slot 8 ; _4: (&&[u16],) size=8 align=8,8\n //!     sig0 = (i64, i64, i64) system_v\n //!     sig1 = (i64, i64, i64) system_v\n-//!     fn0 = collocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n+//!     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n //!\n //! block0(v0: i64, v1: i64, v2: i64):\n //!     v3 = stack_addr.i64 ss0"}, {"sha": "5ea096f5cc2c9b29d81e107de2054f5cebaff2b9", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -125,7 +125,7 @@ fn compute_components<'tcx>(\n             // regionck more ways to prove that it holds. However,\n             // regionck is not (at least currently) prepared to deal with\n             // higher-ranked regions that may appear in the\n-            // trait-ref. Therefore, if we see any higher-rank regions,\n+            // trait-ref. Therefore, if we see any higher-ranked regions,\n             // we simply fallback to the most restrictive rule, which\n             // requires that `Pi: 'a` for all `i`.\n             ty::Projection(ref data) => {"}, {"sha": "397efe6ee831cfef7d3fea804ae675f7338fb24f", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -243,7 +243,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n             // Update minimum universe of scc1.\n             self.scc_universes[scc1] = scc1_universe;\n \n-            // At this point, `scc_placeholder[scc1]` stores the placeholder that\n+            // At this point, `scc_placeholders[scc1]` stores the placeholder that\n             // `scc1` must be equal to, if any.\n             if let Some(scc1_placeholder) = self.scc_placeholders[scc1] {\n                 debug!("}, {"sha": "492091a4f25405f5ed1a47161e8fda432e5752cf", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -234,7 +234,7 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     },\n     /// Something was divided by 0 (x / 0).\n     DivisionByZero,\n-    /// Something was \"remaineded\" by 0 (x % 0).\n+    /// Something was \"remainded\" by 0 (x % 0).\n     RemainderByZero,\n     /// Signed division overflowed (INT_MIN / -1).\n     DivisionOverflow,"}, {"sha": "219d101aa7ccfa34b9b95eaca11eb9bad0e94b99", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // we lower the guard.\n             let target_block = self.cfg.start_new_block();\n             let mut schedule_drops = true;\n-            // We keep a stack of all of the bindings and type descriptions\n+            // We keep a stack of all of the bindings and type ascriptions\n             // from the parent candidates that we visit, that also need to\n             // be bound for each candidate.\n             traverse_candidate("}, {"sha": "96069f05b40f3ad30e5a3ef2515f294d579ec011", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     };\n                     TerminatorKind::if_(self.tcx, Operand::Copy(place), true_bb, false_bb)\n                 } else {\n-                    // The switch may be inexhaustible so we have a catch all block\n+                    // The switch may be inexhaustive so we have a catch all block\n                     debug_assert_eq!(options.len() + 1, target_blocks.len());\n                     let otherwise_block = *target_blocks.last().unwrap();\n                     let switch_targets = SwitchTargets::new("}, {"sha": "1fadd0c26fc49d2306fdd88eaa3023bd5d79c41e", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -1650,7 +1650,7 @@ impl<'p, 'tcx> fmt::Debug for DeconstructedPat<'p, 'tcx> {\n                     }\n \n                     // Without `cx`, we can't know which field corresponds to which, so we can't\n-                    // get the names of the fields. Instead we just display everything as a simple\n+                    // get the names of the fields. Instead we just display everything as a tuple\n                     // struct, which should be good enough.\n                     write!(f, \"(\")?;\n                     for p in self.iter_fields() {"}, {"sha": "a970d180b1a9b377814b05009ecbbf4f4f1e2705", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -276,7 +276,7 @@ impl<'a> Parser<'a> {\n                 lhs = self.parse_assoc_op_ascribe(lhs, lhs_span)?;\n                 continue;\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {\n-                // If we did not have to handle `x..`/`x..=`, it would be pretty easy to\n+                // If we didn't have to handle `x..`/`x..=`, it would be pretty easy to\n                 // generalise it to the Fixity::None code.\n                 lhs = self.parse_range_expr(prec, lhs, op, cur_op_span)?;\n                 break;"}, {"sha": "84b4a803403f9531a73b15d9b144b48c1209ea1d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dd6582540ad20e385bcf8326968aa94f33694b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=a6dd6582540ad20e385bcf8326968aa94f33694b", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         if !self.tcx.features().staged_api {\n-            // Propagate instability.  This can happen even for non-staged-api crates in case\n+            // Propagate unstability.  This can happen even for non-staged-api crates in case\n             // -Zforce-unstable-if-unmarked is set.\n             if let Some(stab) = self.parent_stab {\n                 if inherit_deprecation.yes() && stab.level.is_unstable() {"}]}