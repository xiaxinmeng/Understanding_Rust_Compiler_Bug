{"sha": "896ccb96063526818aa560af43d3a918df97fe48", "node_id": "C_kwDOAAsO6NoAKDg5NmNjYjk2MDYzNTI2ODE4YWE1NjBhZjQzZDNhOTE4ZGY5N2ZlNDg", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-05T08:26:53Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-05T08:26:53Z"}, "message": "Properly compare types for `Option::as_deref` suggestion", "tree": {"sha": "2848bc4410549b6082919ebf843539af41f5ce61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2848bc4410549b6082919ebf843539af41f5ce61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/896ccb96063526818aa560af43d3a918df97fe48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/896ccb96063526818aa560af43d3a918df97fe48", "html_url": "https://github.com/rust-lang/rust/commit/896ccb96063526818aa560af43d3a918df97fe48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/896ccb96063526818aa560af43d3a918df97fe48/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4106065bf1bb515935d5d024e8d9c86454e2b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4106065bf1bb515935d5d024e8d9c86454e2b22", "html_url": "https://github.com/rust-lang/rust/commit/e4106065bf1bb515935d5d024e8d9c86454e2b22"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "4ca83904f47541f34c1d415d07edd6487e36c938", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -3593,7 +3593,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && let Some(deref_target_did) = tcx.lang_items().deref_target()\n             && let projection = tcx.mk_projection(deref_target_did, tcx.mk_substs(&[ty::GenericArg::from(found_ty)]))\n             && let Ok(deref_target) = tcx.try_normalize_erasing_regions(param_env, projection)\n-            && deref_target == target_ty\n+            && infcx.can_eq(param_env, deref_target, target_ty)\n         {\n             let help = if let hir::Mutability::Mut = needs_mut\n                 && let Some(deref_mut_did) = tcx.lang_items().deref_mut_trait()"}, {"sha": "ac0831ce655080ebb7ca8979bb7ac466a79962b2", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.rs?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -10,10 +10,6 @@ fn no_args() -> Option<()> {\n     Some(())\n }\n \n-fn generic_ref<T>(_: &T) -> Option<()> {\n-    Some(())\n-}\n-\n extern \"C\" fn takes_str_but_wrong_abi(_: &str) -> Option<()> {\n     Some(())\n }\n@@ -33,8 +29,6 @@ fn main() {\n     //~^ ERROR expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n     let _ = produces_string().and_then(no_args);\n     //~^ ERROR function is expected to take 1 argument, but it takes 0 arguments\n-    let _ = produces_string().and_then(generic_ref);\n-    //~^ ERROR type mismatch in function arguments\n     let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n     //~^ ERROR type mismatch in function arguments\n }"}, {"sha": "ecfbd27b180e67105abc64a425a0399f0fb6e386", "filename": "tests/ui/mismatched_types/suggest-option-asderef-unfixable.stderr", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-unfixable.stderr?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:28:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:24:40\n    |\n LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n    | ------------------------------------------------------ found signature defined here\n@@ -15,7 +15,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n-  --> $DIR/suggest-option-asderef-unfixable.rs:30:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:26:40\n    |\n LL |     let _ = produces_string().and_then(takes_str_but_wrong_abi);\n    |                               -------- ^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(String,)>` closure, found `for<'a> extern \"C\" fn(&'a str) -> Option<()> {takes_str_but_wrong_abi}`\n@@ -27,7 +27,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0277]: expected a `FnOnce<(String,)>` closure, found `for<'a> unsafe fn(&'a str) -> Option<()> {takes_str_but_unsafe}`\n-  --> $DIR/suggest-option-asderef-unfixable.rs:32:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:28:40\n    |\n LL |     let _ = produces_string().and_then(takes_str_but_unsafe);\n    |                               -------- ^^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n@@ -40,7 +40,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0593]: function is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:34:40\n+  --> $DIR/suggest-option-asderef-unfixable.rs:30:40\n    |\n LL | fn no_args() -> Option<()> {\n    | -------------------------- takes 0 arguments\n@@ -54,28 +54,7 @@ note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:36:40\n-   |\n-LL | fn generic_ref<T>(_: &T) -> Option<()> {\n-   | -------------------------------------- found signature defined here\n-...\n-LL |     let _ = produces_string().and_then(generic_ref);\n-   |                               -------- ^^^^^^^^^^^ expected due to this\n-   |                               |\n-   |                               required by a bound introduced by this call\n-   |\n-   = note: expected function signature `fn(String) -> _`\n-              found function signature `for<'a> fn(&'a _) -> _`\n-note: required by a bound in `Option::<T>::and_then`\n-  --> $SRC_DIR/core/src/option.rs:LL:COL\n-help: do not borrow the argument\n-   |\n-LL - fn generic_ref<T>(_: &T) -> Option<()> {\n-LL + fn generic_ref<T>(_: T) -> Option<()> {\n-   |\n-\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef-unfixable.rs:38:45\n+  --> $DIR/suggest-option-asderef-unfixable.rs:32:45\n    |\n LL | fn takes_str_but_too_many_refs(_: &&str) -> Option<()> {\n    | ------------------------------------------------------ found signature defined here\n@@ -90,7 +69,7 @@ LL |     let _ = Some(TypeWithoutDeref).and_then(takes_str_but_too_many_refs);\n note: required by a bound in `Option::<T>::and_then`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0593, E0631.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5c42ece3c5d094faf55cda01ad56cf4be372c8e7", "filename": "tests/ui/mismatched_types/suggest-option-asderef.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.fixed?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -16,6 +16,11 @@ fn generic<T>(_: T) -> Option<()> {\n     Some(())\n }\n \n+fn generic_ref<T>(_: T) -> Option<()> {\n+    //~^ HELP do not borrow the argument\n+    Some(())\n+}\n+\n fn main() {\n     let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n     //~^ ERROR type mismatch in function arguments\n@@ -27,4 +32,8 @@ fn main() {\n     //~^ ERROR type mismatch in function arguments\n     //~| HELP call `Option::as_deref_mut()` first\n     let _ = produces_string().and_then(generic);\n+\n+    let _ = produces_string().as_deref().and_then(generic_ref);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n }"}, {"sha": "a5278b8fb16184095ff9aa8953251cfe4ebaed20", "filename": "tests/ui/mismatched_types/suggest-option-asderef.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.rs?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -16,6 +16,11 @@ fn generic<T>(_: T) -> Option<()> {\n     Some(())\n }\n \n+fn generic_ref<T>(_: &T) -> Option<()> {\n+    //~^ HELP do not borrow the argument\n+    Some(())\n+}\n+\n fn main() {\n     let _: Option<()> = produces_string().and_then(takes_str);\n     //~^ ERROR type mismatch in function arguments\n@@ -27,4 +32,8 @@ fn main() {\n     //~^ ERROR type mismatch in function arguments\n     //~| HELP call `Option::as_deref_mut()` first\n     let _ = produces_string().and_then(generic);\n+\n+    let _ = produces_string().and_then(generic_ref);\n+    //~^ ERROR type mismatch in function arguments\n+    //~| HELP call `Option::as_deref()` first\n }"}, {"sha": "01341603dde3fc6f1ed52729b7ecc670c53d61d2", "filename": "tests/ui/mismatched_types/suggest-option-asderef.stderr", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/896ccb96063526818aa560af43d3a918df97fe48/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef.stderr?ref=896ccb96063526818aa560af43d3a918df97fe48", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:20:52\n+  --> $DIR/suggest-option-asderef.rs:25:52\n    |\n LL | fn takes_str(_: &str) -> Option<()> {\n    | ----------------------------------- found signature defined here\n@@ -19,7 +19,7 @@ LL |     let _: Option<()> = produces_string().as_deref().and_then(takes_str);\n    |                                          +++++++++++\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:23:55\n+  --> $DIR/suggest-option-asderef.rs:28:55\n    |\n LL | fn takes_str(_: &str) -> Option<()> {\n    | ----------------------------------- found signature defined here\n@@ -39,7 +39,7 @@ LL |     let _: Option<Option<()>> = produces_string().as_deref().map(takes_str)\n    |                                                  +++++++++++\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/suggest-option-asderef.rs:26:55\n+  --> $DIR/suggest-option-asderef.rs:31:55\n    |\n LL | fn takes_str_mut(_: &mut str) -> Option<()> {\n    | ------------------------------------------- found signature defined here\n@@ -58,6 +58,31 @@ help: call `Option::as_deref_mut()` first\n LL |     let _: Option<Option<()>> = produces_string().as_deref_mut().map(takes_str_mut);\n    |                                                  +++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef.rs:36:40\n+   |\n+LL | fn generic_ref<T>(_: &T) -> Option<()> {\n+   | -------------------------------------- found signature defined here\n+...\n+LL |     let _ = produces_string().and_then(generic_ref);\n+   |                               -------- ^^^^^^^^^^^ expected due to this\n+   |                               |\n+   |                               required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `for<'a> fn(&'a _) -> _`\n+note: required by a bound in `Option::<T>::and_then`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL - fn generic_ref<T>(_: &T) -> Option<()> {\n+LL + fn generic_ref<T>(_: T) -> Option<()> {\n+   |\n+help: call `Option::as_deref()` first\n+   |\n+LL |     let _ = produces_string().as_deref().and_then(generic_ref);\n+   |                              +++++++++++\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0631`."}]}