{"sha": "e1d9a202fc97301c4abadf707d7ee62432d02c1c", "node_id": "C_kwDOAAsO6NoAKGUxZDlhMjAyZmM5NzMwMWM0YWJhZGY3MDdkN2VlNjI0MzJkMDJjMWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T00:26:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-18T00:26:44Z"}, "message": "Auto merge of #99391 - JohnTitor:rollup-tdigzzo, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #98383 (Remove restrictions on compare-exchange memory ordering.)\n - #99350 (Be more precise when suggesting removal of parens on unit ctor)\n - #99356 (Do not constraint TAITs when checking impl/trait item compatibility)\n - #99360 (Do not ICE when we have `-Zunpretty=expanded` with invalid ABI)\n - #99373 (Fix source code sidebar tree auto-expand)\n - #99374 (Fix doc for `rchunks_exact`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d3b929195efb2677eaa35596f2c0d564926489ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b929195efb2677eaa35596f2c0d564926489ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d9a202fc97301c4abadf707d7ee62432d02c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d9a202fc97301c4abadf707d7ee62432d02c1c", "html_url": "https://github.com/rust-lang/rust/commit/e1d9a202fc97301c4abadf707d7ee62432d02c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d9a202fc97301c4abadf707d7ee62432d02c1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246f66a905c2815f2c9b9c3d6b1e0649f3360ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/246f66a905c2815f2c9b9c3d6b1e0649f3360ef8", "html_url": "https://github.com/rust-lang/rust/commit/246f66a905c2815f2c9b9c3d6b1e0649f3360ef8"}, {"sha": "7c98c92ebce286f1c1818973e94c66cff1b0b2f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c98c92ebce286f1c1818973e94c66cff1b0b2f5", "html_url": "https://github.com/rust-lang/rust/commit/7c98c92ebce286f1c1818973e94c66cff1b0b2f5"}], "stats": {"total": 382, "additions": 287, "deletions": 95}, "files": [{"sha": "57c39671c3559f35ad423992869ca6b7b1876177", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -274,10 +274,12 @@ impl<'a> PostExpansionVisitor<'a> {\n                 );\n             }\n             abi => {\n-                self.sess.parse_sess.span_diagnostic.delay_span_bug(\n-                    span,\n-                    &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n-                );\n+                if self.sess.opts.pretty.map_or(true, |ppm| ppm.needs_hir()) {\n+                    self.sess.parse_sess.span_diagnostic.delay_span_bug(\n+                        span,\n+                        &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "e0179bd3ed1e85afc11a512ad3dc452dcf1a0621", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -211,6 +211,10 @@ pub fn path_to_string(segment: &hir::Path<'_>) -> String {\n     to_string(NO_ANN, |s| s.print_path(segment, false))\n }\n \n+pub fn qpath_to_string(segment: &hir::QPath<'_>) -> String {\n+    to_string(NO_ANN, |s| s.print_qpath(segment, false))\n+}\n+\n pub fn fn_to_string(\n     decl: &hir::FnDecl<'_>,\n     header: hir::FnHeader,"}, {"sha": "55307b9cebb70e85cb5c547923b530d339196438", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -2707,6 +2707,14 @@ impl PpMode {\n             | MirCFG => true,\n         }\n     }\n+    pub fn needs_hir(&self) -> bool {\n+        use PpMode::*;\n+        match *self {\n+            Source(_) | AstTree(_) => false,\n+\n+            Hir(_) | HirTree | ThirTree | Mir | MirCFG => true,\n+        }\n+    }\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;"}, {"sha": "00c8aa3a1bbdae7df4c5817ddea93d464b1d5add", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -4,7 +4,7 @@ use crate::type_error_struct;\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n-use rustc_hir::def::{Namespace, Res};\n+use rustc_hir::def::{self, Namespace, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::{\n     infer,\n@@ -390,17 +390,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (fn_sig, Some(def_id))\n             }\n             ty::FnPtr(sig) => (sig, None),\n-            ref t => {\n+            _ => {\n                 let mut unit_variant = None;\n-                let mut removal_span = call_expr.span;\n-                if let ty::Adt(adt_def, ..) = t\n-                    && adt_def.is_enum()\n-                    && let hir::ExprKind::Call(expr, _) = call_expr.kind\n+                if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n+                    && let Res::Def(def::DefKind::Ctor(kind, def::CtorKind::Const), _)\n+                        = self.typeck_results.borrow().qpath_res(qpath, callee_expr.hir_id)\n+                    // Only suggest removing parens if there are no arguments\n+                    && arg_exprs.is_empty()\n                 {\n-                    removal_span =\n-                        expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n+                    let descr = match kind {\n+                        def::CtorOf::Struct => \"struct\",\n+                        def::CtorOf::Variant => \"enum variant\",\n+                    };\n+                    let removal_span =\n+                        callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n                     unit_variant =\n-                        self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n+                        Some((removal_span, descr, rustc_hir_pretty::qpath_to_string(qpath)));\n                 }\n \n                 let callee_ty = self.resolve_vars_if_possible(callee_ty);\n@@ -410,8 +415,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_ty,\n                     E0618,\n                     \"expected function, found {}\",\n-                    match unit_variant {\n-                        Some(ref path) => format!(\"enum variant `{path}`\"),\n+                    match &unit_variant {\n+                        Some((_, kind, path)) => format!(\"{kind} `{path}`\"),\n                         None => format!(\"`{callee_ty}`\"),\n                     }\n                 );\n@@ -423,11 +428,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_expr.span,\n                 );\n \n-                if let Some(ref path) = unit_variant {\n+                if let Some((removal_span, kind, path)) = &unit_variant {\n                     err.span_suggestion_verbose(\n-                        removal_span,\n+                        *removal_span,\n                         &format!(\n-                            \"`{path}` is a unit variant, you need to write it without the parentheses\",\n+                            \"`{path}` is a unit {kind}, and does not take parentheses to be constructed\",\n                         ),\n                         \"\",\n                         Applicability::MachineApplicable,\n@@ -470,7 +475,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let Some(span) = self.tcx.hir().res_span(def) {\n                     let callee_ty = callee_ty.to_string();\n                     let label = match (unit_variant, inner_callee_path) {\n-                        (Some(path), _) => Some(format!(\"`{path}` defined here\")),\n+                        (Some((_, kind, path)), _) => Some(format!(\"{kind} `{path}` defined here\")),\n                         (_, Some(hir::QPath::Resolved(_, path))) => self\n                             .tcx\n                             .sess"}, {"sha": "6ae17fc61762fbcfcf064a7dd33eeaee56dfc57c", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1505,6 +1505,21 @@ pub fn check_type_bounds<'tcx>(\n             &outlives_environment,\n         );\n \n+        let constraints = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+        for (key, value) in constraints {\n+            infcx\n+                .report_mismatched_types(\n+                    &ObligationCause::misc(\n+                        value.hidden_type.span,\n+                        tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local()),\n+                    ),\n+                    tcx.mk_opaque(key.def_id, key.substs),\n+                    value.hidden_type.ty,\n+                    TypeError::Mismatch,\n+                )\n+                .emit();\n+        }\n+\n         Ok(())\n     })\n }"}, {"sha": "2d22e9bc76e5ad11cb75602543ea4ef9c5ace6d3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tcx.ty_error()\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n-                report_unexpected_variant_res(tcx, res, expr.span);\n+                report_unexpected_variant_res(tcx, res, qpath, expr.span);\n                 tcx.ty_error()\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,"}, {"sha": "2b037c3fd2b0eaaf61a1699d43f4a076489c0e16", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -863,17 +863,14 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, qpath: &hir::QPath<'_>, span: Span) {\n     struct_span_err!(\n         tcx.sess,\n         span,\n         E0533,\n-        \"expected unit struct, unit variant or constant, found {}{}\",\n+        \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        tcx.sess\n-            .source_map()\n-            .span_to_snippet(span)\n-            .map_or_else(|_| String::new(), |s| format!(\" `{s}`\",)),\n+        rustc_hir_pretty::qpath_to_string(qpath),\n     )\n     .emit();\n }"}, {"sha": "c7318cd6e531fd955b9102847a79061a3a699d9c", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -183,7 +183,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::TupleStruct(ref qpath, subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, qpath, subpats, ddpos, expected, def_bm, ti)\n             }\n-            PatKind::Path(_) => self.check_pat_path(pat, path_res.unwrap(), expected, ti),\n+            PatKind::Path(ref qpath) => {\n+                self.check_pat_path(pat, qpath, path_res.unwrap(), expected, ti)\n+            }\n             PatKind::Struct(ref qpath, fields, has_rest_pat) => {\n                 self.check_pat_struct(pat, qpath, fields, has_rest_pat, expected, def_bm, ti)\n             }\n@@ -800,6 +802,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_path<'b>(\n         &self,\n         pat: &Pat<'_>,\n+        qpath: &hir::QPath<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n         expected: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n@@ -814,7 +817,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return tcx.ty_error();\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n-                report_unexpected_variant_res(tcx, res, pat.span);\n+                report_unexpected_variant_res(tcx, res, qpath, pat.span);\n                 return tcx.ty_error();\n             }\n             Res::SelfCtor(..)"}, {"sha": "1270a72634b9d912220c30d0540067507a8a6459", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1340,7 +1340,7 @@ impl<T> [T] {\n     /// from the `remainder` function of the iterator.\n     ///\n     /// Due to each chunk having exactly `chunk_size` elements, the compiler can often optimize the\n-    /// resulting code better than in the case of [`chunks`].\n+    /// resulting code better than in the case of [`rchunks`].\n     ///\n     /// See [`rchunks`] for a variant of this iterator that also returns the remainder as a smaller\n     /// chunk, and [`chunks_exact`] for the same iterator but starting at the beginning of the"}, {"sha": "b636dc491a4b1569002e7ab021d349168de7ab84", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -581,8 +581,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -640,8 +639,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -941,8 +939,7 @@ impl AtomicBool {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -1301,8 +1298,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1347,8 +1343,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1404,8 +1399,7 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -2227,8 +2221,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2279,8 +2272,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2517,8 +2509,7 @@ macro_rules! atomic_int {\n             ///\n             /// Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n-            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -3035,22 +3026,29 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n             _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n@@ -3070,22 +3068,29 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n+            #[cfg(not(bootstrap))]\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n             _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };"}, {"sha": "a6a0b09ef31fef7c6ed1edd0204d0e93573fd89d", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -33,7 +33,7 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n     folders.className = \"folders\";\n     if (elem.dirs) {\n         for (const dir of elem.dirs) {\n-            if (createDirEntry(dir, folders, fullPath, hasFoundFile)) {\n+            if (createDirEntry(dir, folders, fullPath, false)) {\n                 dirEntry.open = true;\n                 hasFoundFile = true;\n             }"}, {"sha": "e882080c7dabae47e8e9ab61539aceabeff3a31b", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -16,15 +16,27 @@ click: (10, 10)\n wait-for: \"html:not(.expanded)\"\n assert: \"nav.sidebar\"\n \n+// Checking that only the path to the current file is \"open\".\n+goto: file://|DOC_PATH|/src/lib2/another_folder/sub_mod/mod.rs.html\n+// First we expand the sidebar again.\n+click: (10, 10)\n+// We wait for the sidebar to be expanded.\n+wait-for-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"300px\"})\n+assert: \"//*[@class='dir-entry' and @open]/*[text()='lib2']\"\n+assert: \"//*[@class='dir-entry' and @open]/*[text()='another_folder']\"\n+assert: \"//*[@class='dir-entry' and @open]/*[text()='sub_mod']\"\n+// Only \"another_folder\" should be \"open\" in \"lib2\".\n+assert: \"//*[@class='dir-entry' and not(@open)]/*[text()='another_mod']\"\n+// All other trees should be collapsed.\n+assert-count: (\"//*[@id='source-sidebar']/details[not(text()='lib2') and not(@open)]\", 5)\n+\n // We now switch to mobile mode.\n size: (600, 600)\n-// We check that the sidebar has the expected width (0).\n-assert-css: (\"nav.sidebar\", {\"width\": \"0px\"})\n-// We expand the sidebar.\n-click: \"#sidebar-toggle\"\n-assert-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"600px\"})\n+wait-for-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"600px\"})\n // We collapse the sidebar.\n click: (10, 10)\n+// We check that the sidebar has the expected width (0).\n+assert-css: (\"nav.sidebar\", {\"width\": \"0px\"})\n // We ensure that the class has been removed.\n assert-false: \".source-sidebar-expanded\"\n assert: \"nav.sidebar\""}, {"sha": "ec9a20859243d6bbfa863adeb5afe1e86922464b", "filename": "src/test/rustdoc-gui/src/lib2/another_folder/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fmod.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,3 @@\n+pub fn another_fn() {}\n+\n+pub mod sub_mod;"}, {"sha": "f16722cf35b7b32adea1dd8cf15064d3da79acb8", "filename": "src/test/rustdoc-gui/src/lib2/another_folder/sub_mod/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fsub_mod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fsub_mod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_folder%2Fsub_mod%2Fmod.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1 @@\n+pub fn subsubsub() {}"}, {"sha": "9a4f007a2f0ca734405c408cab9a36fb91f4a4ef", "filename": "src/test/rustdoc-gui/src/lib2/another_mod/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_mod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_mod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Fanother_mod%2Fmod.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1 @@\n+pub fn tadam() {}"}, {"sha": "4546449e102916eb08242cc9040bfaf94f012b36", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -2,6 +2,9 @@\n \n #![feature(doc_cfg)]\n \n+pub mod another_folder;\n+pub mod another_mod;\n+\n pub mod module {\n     pub mod sub_module {\n         pub mod sub_sub_module {"}, {"sha": "d14bb42b2fdb29a9212f2561595574c301e1390a", "filename": "src/test/ui/codemap_tests/unicode.expanded.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.expanded.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.expanded.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.expanded.stdout?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// revisions: normal expanded\n+//[expanded] check-pass\n+//[expanded]compile-flags: -Zunpretty=expanded\n+\n+extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n+\n+fn main() {}"}, {"sha": "60f8cff84b30c6c922eebc06a8938823dfac0d80", "filename": "src/test/ui/codemap_tests/unicode.normal.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.normal.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,5 +1,5 @@\n error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n-  --> $DIR/unicode.rs:1:8\n+  --> $DIR/unicode.rs:5:8\n    |\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI", "previous_filename": "src/test/ui/codemap_tests/unicode.stderr"}, {"sha": "4df9a5270c317a3a30c0f0a1d00f21487beb598e", "filename": "src/test/ui/codemap_tests/unicode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,3 +1,7 @@\n-extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n+// revisions: normal expanded\n+//[expanded] check-pass\n+//[expanded]compile-flags: -Zunpretty=expanded\n+\n+extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //[normal]~ ERROR invalid ABI\n \n fn main() { }"}, {"sha": "8f3688a2a0764e1703371c2ac507128565df8549", "filename": "src/test/ui/empty/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -12,10 +12,10 @@ enum E {\n }\n \n fn main() {\n-    let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+    let e2 = Empty2(); //~ ERROR expected function, found struct `Empty2`\n     let e4 = E::Empty4();\n     //~^ ERROR expected function, found enum variant `E::Empty4` [E0618]\n-    let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+    let xe2 = XEmpty2(); //~ ERROR expected function, found struct `XEmpty2`\n     let xe4 = XE::XEmpty4();\n     //~^ ERROR expected function, found enum variant `XE::XEmpty4` [E0618]\n }"}, {"sha": "e97209527fe34fdbd3680258406843adf7c89640", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,38 +1,50 @@\n-error[E0618]: expected function, found `Empty2`\n+error[E0618]: expected function, found struct `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:15:14\n    |\n LL | struct Empty2;\n-   | ------------- `Empty2` defined here\n+   | ------------- struct `Empty2` defined here\n ...\n LL |     let e2 = Empty2();\n    |              ^^^^^^--\n    |              |\n    |              call expression requires function\n+   |\n+help: `Empty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let e2 = Empty2();\n+LL +     let e2 = Empty2;\n+   |\n \n error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:16:14\n    |\n LL |     Empty4\n-   |     ------ `E::Empty4` defined here\n+   |     ------ enum variant `E::Empty4` defined here\n ...\n LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^--\n    |              |\n    |              call expression requires function\n    |\n-help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n+help: `E::Empty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let e4 = E::Empty4();\n LL +     let e4 = E::Empty4;\n    |\n \n-error[E0618]: expected function, found `empty_struct::XEmpty2`\n+error[E0618]: expected function, found struct `XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n    |\n LL |     let xe2 = XEmpty2();\n    |               ^^^^^^^--\n    |               |\n    |               call expression requires function\n+   |\n+help: `XEmpty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let xe2 = XEmpty2();\n+LL +     let xe2 = XEmpty2;\n+   |\n \n error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:19:15\n@@ -42,7 +54,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               |\n    |               call expression requires function\n    |\n-help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n+help: `XE::XEmpty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let xe4 = XE::XEmpty4();\n LL +     let xe4 = XE::XEmpty4;"}, {"sha": "793ec02a86fc684b969e6c3010e082cee68af486", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -2,14 +2,14 @@ error[E0618]: expected function, found enum variant `X::Entry`\n   --> $DIR/E0618.rs:6:5\n    |\n LL |     Entry,\n-   |     ----- `X::Entry` defined here\n+   |     ----- enum variant `X::Entry` defined here\n ...\n LL |     X::Entry();\n    |     ^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `X::Entry` is a unit variant, you need to write it without the parentheses\n+help: `X::Entry` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     X::Entry();\n LL +     X::Entry;"}, {"sha": "d29a82f76a7938fcf6eb6c7d2ab55a851829e74f", "filename": "src/test/ui/impl-trait/issues/issue-99348-impl-compatibility.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,26 @@\n+#![feature(type_alias_impl_trait)]\n+\n+struct Concrete;\n+\n+type Tait = impl Sized;\n+\n+impl Foo for Concrete {\n+    type Item = Concrete;\n+    //~^ mismatched types\n+}\n+\n+impl Bar for Concrete {\n+    type Other = Tait;\n+}\n+\n+trait Foo {\n+    type Item: Bar<Other = Self>;\n+}\n+\n+trait Bar {\n+    type Other;\n+}\n+\n+fn tait() -> Tait {}\n+\n+fn main() {}"}, {"sha": "a25f0cd87616bee717ceff3add5b2b288f50af5e", "filename": "src/test/ui/impl-trait/issues/issue-99348-impl-compatibility.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-99348-impl-compatibility.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-99348-impl-compatibility.rs:8:17\n+   |\n+LL | type Tait = impl Sized;\n+   |             ---------- the expected opaque type\n+...\n+LL |     type Item = Concrete;\n+   |                 ^^^^^^^^ types differ\n+   |\n+   = note: expected opaque type `Tait`\n+                   found struct `Concrete`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3aa39bb7388fafb4c5c2954cec476c1a19fd8692", "filename": "src/test/ui/issues/issue-20714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,5 +1,5 @@\n struct G;\n \n fn main() {\n-    let g = G(); //~ ERROR: expected function, found `G`\n+    let g = G(); //~ ERROR: expected function, found struct `G`\n }"}, {"sha": "a3447aa6845b9d166032ca13d2b2448160414b5d", "filename": "src/test/ui/issues/issue-20714.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,13 +1,19 @@\n-error[E0618]: expected function, found `G`\n+error[E0618]: expected function, found struct `G`\n   --> $DIR/issue-20714.rs:4:13\n    |\n LL | struct G;\n-   | -------- `G` defined here\n+   | -------- struct `G` defined here\n ...\n LL |     let g = G();\n    |             ^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `G` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let g = G();\n+LL +     let g = G;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfa03c5e42f8db30dfd6333ae1f5aa017708fb71", "filename": "src/test/ui/issues/issue-21701.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -7,7 +7,7 @@ struct Bar;\n \n pub fn some_func() {\n     let f = Bar();\n-//~^ ERROR: expected function, found `Bar`\n+//~^ ERROR: expected function, found struct `Bar`\n }\n \n fn main() {"}, {"sha": "9f1fe7dde735a22a2853cfb3568bcc3d473263d0", "filename": "src/test/ui/issues/issue-21701.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -8,16 +8,22 @@ LL |     let y = t();\n    |             |\n    |             call expression requires function\n \n-error[E0618]: expected function, found `Bar`\n+error[E0618]: expected function, found struct `Bar`\n   --> $DIR/issue-21701.rs:9:13\n    |\n LL | struct Bar;\n-   | ---------- `Bar` defined here\n+   | ---------- struct `Bar` defined here\n ...\n LL |     let f = Bar();\n    |             ^^^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `Bar` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let f = Bar();\n+LL +     let f = Bar;\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d1bdb6b052a8d7e247f0f2501cd4ad2a0331d14", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -4,13 +4,13 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n@@ -22,7 +22,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}"}, {"sha": "82cc6e19f9d1ea759dc9507c22d2cf7b2be68811", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found associated function `<S as Tr>::A::f::<u8>`\n+error[E0533]: expected unit struct, unit variant or constant, found associated function `<<S as Tr>::A>::f<u8>`\n   --> $DIR/qualified-path-params.rs:20:9\n    |\n LL |         <S as Tr>::A::f::<u8> => {}"}, {"sha": "f885ac2151d6126e520a9d498d971b658c9a153c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -336,14 +336,14 @@ error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n    |\n LL |             Unit,\n-   |             ---- `Z::Unit` defined here\n+   |             ---- enum variant `Z::Unit` defined here\n ...\n LL |         let _ = Z::Unit();\n    |                 ^^^^^^^--\n    |                 |\n    |                 call expression requires function\n    |\n-help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Z::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -         let _ = Z::Unit();\n LL +         let _ = Z::Unit;\n@@ -371,14 +371,14 @@ error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n    |\n LL |         Unit,\n-   |         ---- `m::E::Unit` defined here\n+   |         ---- enum variant `m::E::Unit` defined here\n ...\n LL |     let _: E = m::E::Unit();\n    |                ^^^^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `m::E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = m::E::Unit();\n LL +     let _: E = m::E::Unit;\n@@ -406,14 +406,14 @@ error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16\n    |\n LL |         Unit,\n-   |         ---- `E::Unit` defined here\n+   |         ---- enum variant `E::Unit` defined here\n ...\n LL |     let _: E = E::Unit();\n    |                ^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = E::Unit();\n LL +     let _: E = E::Unit;"}, {"sha": "0a418b5aeef1dde23381da498968cea433722491", "filename": "src/test/ui/suggestions/issue-99240-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,10 @@\n+enum Enum {\n+    Unit,\n+}\n+type Alias = Enum;\n+\n+fn main() {\n+    Alias::\n+    Unit();\n+    //~^^ ERROR expected function, found enum variant `Alias::Unit`\n+}"}, {"sha": "2af60f5975992d4fab1d0da52e1c1a881e3fd5d9", "filename": "src/test/ui/suggestions/issue-99240-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240-2.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,24 @@\n+error[E0618]: expected function, found enum variant `Alias::Unit`\n+  --> $DIR/issue-99240-2.rs:7:5\n+   |\n+LL |        Unit,\n+   |        ---- enum variant `Alias::Unit` defined here\n+...\n+LL |        Alias::\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||     Unit();\n+   | ||________^_- call expression requires function\n+   | |_________|\n+   | \n+   |\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n+   |\n+LL -     Unit();\n+LL +     Unit;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "2115a42662e1af716dd68e55680a34c156848765", "filename": "src/test/ui/suggestions/issue-99240.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,6 @@\n+fn fmt(it: &(std::cell::Cell<Option<impl FnOnce()>>,)) {\n+    (it.0.take())()\n+    //~^ ERROR expected function\n+}\n+\n+fn main() {}"}, {"sha": "f1bea688b4ed5be3aded1afb79d1cba2fd63fe4d", "filename": "src/test/ui/suggestions/issue-99240.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -0,0 +1,11 @@\n+error[E0618]: expected function, found `Option<impl FnOnce()>`\n+  --> $DIR/issue-99240.rs:2:5\n+   |\n+LL |     (it.0.take())()\n+   |     ^^^^^^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "8f3180a8639d876f3a0f18c0b446638031c449e6", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d9a202fc97301c4abadf707d7ee62432d02c1c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=e1d9a202fc97301c4abadf707d7ee62432d02c1c", "patch": "@@ -20,14 +20,14 @@ error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:15:5\n    |\n LL | enum Enum { Braced {}, Unit, Tuple() }\n-   |                        ---- `Alias::Unit` defined here\n+   |                        ---- enum variant `Alias::Unit` defined here\n ...\n LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     Alias::Unit();\n LL +     Alias::Unit;"}]}