{"sha": "4be7214d30b121762c8675c3e732083da262b136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTcyMTRkMzBiMTIxNzYyYzg2NzVjM2U3MzIwODNkYTI2MmIxMzY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-24T11:56:24Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-30T13:30:58Z"}, "message": "Type annotations in associated constant patterns.\n\nThis commit adds support for respecting user type annotations with\nassociated constants in patterns.", "tree": {"sha": "760abdaa2343eb58aab7b004ef8a2f305083d869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/760abdaa2343eb58aab7b004ef8a2f305083d869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be7214d30b121762c8675c3e732083da262b136", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwoyJIACgkQAXYLT59T\n8VTgPQ/+Mh+OSEun55ibby7738CQiILMqwAtaQygXW33E0NDvIyMwHMgG3Zwo2C8\nx1st3+wOxY/V9JOjgqSAg40GUYEUJWyGQO6uX28m2Fu5cTwCoxXy3cVNgs2F9kA2\nzSPb6TDCjrFDXtU4Sn/GPGKwSHigI65Fwo9hw7sulfc50z70aKGgiy6+n358Fb6W\nI/ZAqIITB4Pc6OTLrCt6y7FuEvrQF2Z/F89snkg/K4ab/uCr2usMruQquZMaQFzE\nkx1FRJMKL2ovd5ZPPWkFD2b4mWU8Zpx3f5HWniulHs/FVWuRBBxkD2o+171reRgb\nQGzy9i7zlhcgNvkOUTGJqGhofqhPDLRbLfH5dd4A7ETNJ505szCcPjWPg+FES65Q\nErR+yvyjZ54JUI/ysIfh5Z0rZtR2mHDOHVU0LaYB1f7bs++UWSJcp8g3QT6ZwScd\nxvAj/io/cRoFNAHv4CPhOzcniUjntXOhEuFGpS4XSCHMJwhTN2+B8EFTZHuPQ/3r\n3gZUjrALhJkcqIH8uj5MtEB3y1pZKyLyuME9qh/TXTAEL6xti7tgIcApPTWylyLN\nTYCdUOtD/EsMVJ18pkNDEz0pIgx0iaWgPYjqzZ5PDDpinesrgGAqcW3ETvPovbku\n6+ksedmcl+zX3LDmW/baPSjOA80bRcxOTZ9SYyUbSYMyOMfQvLk=\n=JtTE\n-----END PGP SIGNATURE-----", "payload": "tree 760abdaa2343eb58aab7b004ef8a2f305083d869\nparent b182a21163c673034a89acf01cd8797a8313ed11\nauthor David Wood <david@davidtw.co> 1543060584 +0100\ncommitter David Wood <david@davidtw.co> 1546176658 +0100\n\nType annotations in associated constant patterns.\n\nThis commit adds support for respecting user type annotations with\nassociated constants in patterns.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be7214d30b121762c8675c3e732083da262b136", "html_url": "https://github.com/rust-lang/rust/commit/4be7214d30b121762c8675c3e732083da262b136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be7214d30b121762c8675c3e732083da262b136/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b182a21163c673034a89acf01cd8797a8313ed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/b182a21163c673034a89acf01cd8797a8313ed11", "html_url": "https://github.com/rust-lang/rust/commit/b182a21163c673034a89acf01cd8797a8313ed11"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "00de40d8cff83f17b30a9a400134761a61b4f8c2", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -848,7 +848,28 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         };\n                         match self.tcx.at(span).const_eval(self.param_env.and(cid)) {\n                             Ok(value) => {\n-                                return self.const_to_pat(instance, value, id, span)\n+                                let pattern = self.const_to_pat(instance, value, id, span);\n+                                if !is_associated_const {\n+                                    return pattern;\n+                                }\n+\n+                                let user_provided_types = self.tables().user_provided_types();\n+                                return if let Some(u_ty) = user_provided_types.get(id) {\n+                                    let user_ty = PatternTypeProjection::from_user_type(*u_ty);\n+                                    Pattern {\n+                                        span,\n+                                        kind: Box::new(\n+                                            PatternKind::AscribeUserType {\n+                                                subpattern: pattern,\n+                                                user_ty,\n+                                                user_ty_span: span,\n+                                            }\n+                                        ),\n+                                        ty: value.ty,\n+                                    }\n+                                } else {\n+                                    pattern\n+                                }\n                             },\n                             Err(_) => {\n                                 self.tcx.sess.span_err(\n@@ -938,7 +959,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         id: hir::HirId,\n         span: Span,\n     ) -> Pattern<'tcx> {\n-        debug!(\"const_to_pat: cv={:#?}\", cv);\n+        debug!(\"const_to_pat: cv={:#?} id={:?}\", cv, id);\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n             let val = const_field(\n@@ -956,6 +977,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }).collect::<Vec<_>>()\n         };\n+        debug!(\"const_to_pat: cv.ty={:?} span={:?}\", cv.ty, span);\n         let kind = match cv.ty.sty {\n             ty::Float(_) => {\n                 let id = self.tcx.hir().hir_to_node_id(id);"}, {"sha": "1758f762524563623bfed05dec3c4d15ff327d65", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -357,16 +357,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    pub fn resolve_ufcs(&self,\n-                        span: Span,\n-                        method_name: ast::Ident,\n-                        self_ty: Ty<'tcx>,\n-                        expr_id: ast::NodeId)\n-                        -> Result<Def, MethodError<'tcx>> {\n-        debug!(\"resolve_ufcs: method_name={:?} self_ty={:?} expr_id={:?}\",\n-            method_name,\n-            self_ty,\n-            expr_id\n+    pub fn resolve_ufcs(\n+        &self,\n+        span: Span,\n+        method_name: ast::Ident,\n+        self_ty: Ty<'tcx>,\n+        expr_id: ast::NodeId\n+    ) -> Result<Def, MethodError<'tcx>> {\n+        debug!(\n+            \"resolve_ufcs: method_name={:?} self_ty={:?} expr_id={:?}\",\n+            method_name, self_ty, expr_id,\n         );\n \n         let tcx = self.tcx;\n@@ -375,6 +375,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match self.probe_for_name(span, mode, method_name, IsSuggestion(false),\n                                   self_ty, expr_id, ProbeScope::TraitsInScope) {\n             Ok(pick) => {\n+                debug!(\"resolve_ufcs: pick={:?}\", pick);\n                 if let Some(import_id) = pick.import_id {\n                     let import_def_id = tcx.hir().local_def_id(import_id);\n                     debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n@@ -383,6 +384,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n                 let def = pick.item.def();\n+                debug!(\"resolve_ufcs: def={:?}\", def);\n                 tcx.check_stability(def.def_id(), Some(expr_id), span);\n \n                 Ok(def)"}, {"sha": "ff4574eb283fdd07f1d615de6278212b0b042c73", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -4584,6 +4584,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        span: Span)\n                                        -> (Def, Option<Ty<'tcx>>, &'b [hir::PathSegment])\n     {\n+        debug!(\"resolve_ty_and_def_ufcs: qpath={:?} node_id={:?} span={:?}\", qpath, node_id, span);\n         let (ty, qself, item_segment) = match *qpath {\n             QPath::Resolved(ref opt_qself, ref path) => {\n                 return (path.def,\n@@ -5104,6 +5105,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Def::Method(def_id) |\n             Def::AssociatedConst(def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n+                debug!(\"instantiate_value_path: def={:?} container={:?}\", def, container);\n                 match container {\n                     ty::TraitContainer(trait_did) => {\n                         callee::check_legal_trait_for_method_call(tcx, span, trait_did)"}, {"sha": "4801369cfd1a8a3ffeb0fba3aaaa17f829669c56", "filename": "src/test/run-pass/associated-consts/associated-const-range-match-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, unreachable_patterns)]\n \n struct Foo;\n "}, {"sha": "97f8015dfc147bc1289ce6083b097b9dfc093b99", "filename": "src/test/ui/issue-55511.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-55511.nll.stderr?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/issue-55511.rs:13:28\n+   |\n+LL |     let b = Some(Cell::new(&a));\n+   |                            ^^ borrowed value does not live long enough\n+LL |     match b {\n+LL |         <() as Foo<'static>>::C => { }\n+   |         ----------------------- type annotation requires that `a` is borrowed for `'static`\n+...\n+LL | }\n+   | - `a` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "93bd78c44d946ede8df6ec63711464492de141be", "filename": "src/test/ui/issue-55511.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-55511.rs?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -0,0 +1,18 @@\n+use std::cell::Cell;\n+\n+trait Foo<'a> {\n+    const C: Option<Cell<&'a u32>>;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    const C: Option<Cell<&'a u32>> = None;\n+}\n+\n+fn main() {\n+    let a = 22;\n+    let b = Some(Cell::new(&a));\n+    match b {\n+        <() as Foo<'static>>::C => { }\n+        _ => { }\n+    }\n+}"}, {"sha": "24668f045517ac828cb16ae9a63e452a87a2a70b", "filename": "src/test/ui/issue-55511.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be7214d30b121762c8675c3e732083da262b136/src%2Ftest%2Fui%2Fissue-55511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-55511.stderr?ref=4be7214d30b121762c8675c3e732083da262b136", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/issue-55511.rs:13:29\n+   |\n+LL |     let b = Some(Cell::new(&a));\n+   |                             ^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}