{"sha": "7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2I1ZDQyYmEzMjFhYTRjYzNkYTVlMWRhMjIyMzQ0NTk3YjBjMWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-24T12:50:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-24T12:50:27Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Oliver Scherer <github35764891676564198441@oli-obk.de>", "tree": {"sha": "398cb391c09e782b827c0187a373478a81a7ccc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398cb391c09e782b827c0187a373478a81a7ccc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdEMcTCRBK7hj4Ov3rIwAAdHIIAEELcJBlkkToB6C/bfN+OQG+\nUyo65EHVHHDDHCtF7ULD3DooQQoiekmqZc4K11/Xfo6rkOgamadPjFEK/2aelYI0\n32advcuhzPAK2nR1DKCA0ttg2oXWdnmjgync6sKvYEPCJSjOUkAQnilS/3ovGpVn\nlyQIefF0zMr4Qhs/ehtzZHaR+IbMFEl/LM9a5VZnOtB9VTkVMBIPDRvN29sF+yHg\nl4XxEei2/2jq98oKUHk7iacy3ckVw6bDsSKwxXeQ03QGHvhOP0PCn6Avl07RROcY\n8P2KtSukmZRoM38iQK1CjZbeOJ0uxpNOmduvLdkv1twRL9OJZLh+Co1kaD7UEpA=\n=HvKO\n-----END PGP SIGNATURE-----\n", "payload": "tree 398cb391c09e782b827c0187a373478a81a7ccc7\nparent 4d65aa8f20ac80f7517af15f2dec8936325119c6\nauthor Ralf Jung <post@ralfj.de> 1561380627 +0200\ncommitter GitHub <noreply@github.com> 1561380627 +0200\n\nApply suggestions from code review\n\nCo-Authored-By: Oliver Scherer <github35764891676564198441@oli-obk.de>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "html_url": "https://github.com/rust-lang/rust/commit/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d65aa8f20ac80f7517af15f2dec8936325119c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d65aa8f20ac80f7517af15f2dec8936325119c6", "html_url": "https://github.com/rust-lang/rust/commit/4d65aa8f20ac80f7517af15f2dec8936325119c6"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "cb258cf150d750d6cf36871c222514400aa9553a", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "patch": "@@ -193,7 +193,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     // on read hardware this can easily happen. Thus for comparisons we require\n                     // both pointers to be live.\n                     if self.pointer_inbounds(left).is_ok() && self.pointer_inbounds(right).is_ok() {\n-                        // Two in-bounds pointers in different allocatons are different.\n+                        // Two in-bounds pointers in different allocations are different.\n                         false\n                     } else {\n                         return err!(InvalidPointerMath);"}, {"sha": "c94591174ec5ce65c36f2f1679a156fda2fc3b61", "filename": "tests/compile-fail/zst3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d/tests%2Fcompile-fail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7b5d42ba321aa4cc3da5e1da222344597b0c1d/tests%2Fcompile-fail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst3.rs?ref=7e7b5d42ba321aa4cc3da5e1da222344597b0c1d", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     // (that are out-of-bounds).\n     let mut x_box = Box::new(1u8);\n     let x = (&mut *x_box as *mut u8).wrapping_offset(1);\n-    // This one is just \"at the egde\", but still okay\n+    // This one is just \"at the edge\", but still okay\n     unsafe { *(x as *mut [u8; 0]) = zst_val; }\n     // One byte further is OOB.\n     let x = x.wrapping_offset(1);"}]}