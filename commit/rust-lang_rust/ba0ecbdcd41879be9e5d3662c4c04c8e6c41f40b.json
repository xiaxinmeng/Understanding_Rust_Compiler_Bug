{"sha": "ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "node_id": "C_kwDOAAsO6NoAKGJhMGVjYmRjZDQxODc5YmU5ZTVkMzY2MmM0YzA0YzhlNmM0MWY0MGI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-05T07:37:50Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-05T08:54:47Z"}, "message": "forbid empty impls for types with incoherent impls", "tree": {"sha": "35ec5230f6df04a597831d1368bb7f0ec0a5af7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ec5230f6df04a597831d1368bb7f0ec0a5af7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "html_url": "https://github.com/rust-lang/rust/commit/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc184b4e17639807617ac8aeeb51b4ee25817950", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc184b4e17639807617ac8aeeb51b4ee25817950", "html_url": "https://github.com/rust-lang/rust/commit/dc184b4e17639807617ac8aeeb51b4ee25817950"}], "stats": {"total": 233, "additions": 228, "deletions": 5}, "files": [{"sha": "d50ac7257102c5cc6e220db16a11adad1aed612a", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -122,6 +122,8 @@ impl<'tcx> ItemLikeVisitor<'_> for InherentCollect<'tcx> {\n const INTO_CORE: &str = \"consider moving this inherent impl into `core` if possible\";\n const INTO_DEFINING_CRATE: &str =\n     \"consider moving this inherent impl into the crate defining the type if possible\";\n+const ADD_ATTR_TO_TY: &str = \"alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type \\\n+     and `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n const ADD_ATTR: &str =\n     \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n \n@@ -137,13 +139,28 @@ impl<'tcx> InherentCollect<'tcx> {\n             return;\n         }\n \n-        if self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n-            let hir::ItemKind::Impl(hir::Impl { items, .. }) = item.kind else {\n+        if self.tcx.features().rustc_attrs {\n+            let hir::ItemKind::Impl(&hir::Impl { items, .. }) = item.kind else {\n                 bug!(\"expected `impl` item: {:?}\", item);\n             };\n \n-            for item in items {\n-                if !self.tcx.has_attr(item.id.def_id.to_def_id(), sym::rustc_allow_incoherent_impl)\n+            if !self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    item.span,\n+                    E0390,\n+                    \"cannot define inherent `impl` for a type outside of crate where the type is defined\",\n+                )\n+                .help(INTO_DEFINING_CRATE)\n+                .span_help(item.span, ADD_ATTR_TO_TY)\n+                .emit();\n+                return;\n+            }\n+\n+            for impl_item in items {\n+                if !self\n+                    .tcx\n+                    .has_attr(impl_item.id.def_id.to_def_id(), sym::rustc_allow_incoherent_impl)\n                 {\n                     struct_span_err!(\n                         self.tcx.sess,\n@@ -152,7 +169,7 @@ impl<'tcx> InherentCollect<'tcx> {\n                         \"cannot define inherent `impl` for a type outside of crate where the type is defined\",\n                     )\n                     .help(INTO_DEFINING_CRATE)\n-                    .span_help(item.span, ADD_ATTR)\n+                    .span_help(impl_item.span, ADD_ATTR)\n                     .emit();\n                     return;\n                 }"}, {"sha": "22f0d912c8f885fe9146bbe9a71dfd84a608f659", "filename": "src/test/ui/incoherent-inherent-impls/auxiliary/extern-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fauxiliary%2Fextern-crate.rs?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -0,0 +1,9 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub struct StructWithAttr;\n+pub struct StructNoAttr;\n+\n+#[rustc_has_incoherent_inherent_impls]\n+pub enum EnumWithAttr {}\n+pub enum EnumNoAttr {}"}, {"sha": "ce5200a50084838dc02da0109e040889d9ed2a3a", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.rs?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -0,0 +1,34 @@\n+// aux-build:extern-crate.rs\n+#![feature(rustc_attrs)]\n+extern crate extern_crate;\n+\n+impl extern_crate::StructWithAttr { //~ ERROR\n+    fn foo() {}\n+}\n+impl extern_crate::StructWithAttr {\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::StructNoAttr { //~ ERROR\n+    fn foo() {}\n+}\n+impl extern_crate::StructNoAttr { //~ ERROR\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::EnumWithAttr { //~ ERROR\n+    fn foo() {}\n+}\n+impl extern_crate::EnumWithAttr {\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+impl extern_crate::EnumNoAttr { //~ ERROR\n+    fn foo() {}\n+}\n+impl extern_crate::EnumNoAttr { //~ ERROR\n+    #[rustc_allow_incoherent_impl]\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "1b0cadc2c28c14090ba4467db741c2189ac54a79", "filename": "src/test/ui/incoherent-inherent-impls/needs-has-incoherent-impls.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fneeds-has-incoherent-impls.stderr?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -0,0 +1,105 @@\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:5:1\n+   |\n+LL | / impl extern_crate::StructWithAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:6:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:12:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:12:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:15:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:15:1\n+   |\n+LL | / impl extern_crate::StructNoAttr {\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:19:1\n+   |\n+LL | / impl extern_crate::EnumWithAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:20:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:26:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:26:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |     fn foo() {}\n+LL | | }\n+   | |_^\n+\n+error[E0390]: cannot define inherent `impl` for a type outside of crate where the type is defined\n+  --> $DIR/needs-has-incoherent-impls.rs:29:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider moving this inherent impl into the crate defining the type if possible\n+help: alternatively add `#[rustc_has_incoherent_inherent_impls]` to the type and `#[rustc_allow_incoherent_impl]` to the relevant impl items\n+  --> $DIR/needs-has-incoherent-impls.rs:29:1\n+   |\n+LL | / impl extern_crate::EnumNoAttr {\n+LL | |     #[rustc_allow_incoherent_impl]\n+LL | |     fn bar() {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0390`."}, {"sha": "6d11a7b89389720af7a8ed001f590c789f52ef89", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.rs?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:extern-crate.rs\n+extern crate extern_crate;\n+\n+impl extern_crate::StructWithAttr {} //~ ERROR\n+\n+impl extern_crate::StructNoAttr {} //~ ERROR\n+\n+impl extern_crate::EnumWithAttr {} //~ ERROR\n+\n+impl extern_crate::EnumNoAttr {} //~ ERROR\n+\n+impl f32 {} //~ ERROR\n+\n+fn main() {}"}, {"sha": "b7fca9e98162ed0144d449ef06954afa290eaac2", "filename": "src/test/ui/incoherent-inherent-impls/no-attr-empty-impl.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fincoherent-inherent-impls%2Fno-attr-empty-impl.stderr?ref=ba0ecbdcd41879be9e5d3662c4c04c8e6c41f40b", "patch": "@@ -0,0 +1,44 @@\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:4:1\n+   |\n+LL | impl extern_crate::StructWithAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:6:1\n+   |\n+LL | impl extern_crate::StructNoAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:8:1\n+   |\n+LL | impl extern_crate::EnumWithAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0116]: cannot define inherent `impl` for a type outside of the crate where the type is defined\n+  --> $DIR/no-attr-empty-impl.rs:10:1\n+   |\n+LL | impl extern_crate::EnumNoAttr {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl for type defined outside of crate.\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/no-attr-empty-impl.rs:12:6\n+   |\n+LL | impl f32 {}\n+   |      ^^^\n+   |\n+   = help: consider using an extension trait instead\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0116, E0390.\n+For more information about an error, try `rustc --explain E0116`."}]}