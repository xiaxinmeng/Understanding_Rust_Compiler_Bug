{"sha": "7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlM2M2NjJiNGY1MmFhN2IzNWJhNWUwY2U1ZDA5MTU0Njg3YTkxNDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-26T21:51:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-26T21:52:31Z"}, "message": "rustboot: Use a less hacky method to report tag names in error messages, which works for resolve errors as well", "tree": {"sha": "d89f9ebfef8d4a6034f1fa3dc0114aee7531635d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d89f9ebfef8d4a6034f1fa3dc0114aee7531635d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "html_url": "https://github.com/rust-lang/rust/commit/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6", "html_url": "https://github.com/rust-lang/rust/commit/7ed8b781d59b6293d4dd4ac7377ed54a78acb8d6"}], "stats": {"total": 46, "additions": 10, "deletions": 36}, "files": [{"sha": "afc329d86416f382c65ff1edb1c2a2e0d710359e", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "patch": "@@ -178,8 +178,10 @@ let all_item_collecting_visitor\n             note_header i.id f.Ast.fn_input_slots;\n         | Ast.MOD_ITEM_obj ob ->\n             note_header i.id ob.Ast.obj_state;\n-        | Ast.MOD_ITEM_tag (hdr, _, _) ->\n-            note_header i.id hdr\n+        | Ast.MOD_ITEM_tag (hdr, oid, _) ->\n+            note_header i.id hdr;\n+            Hashtbl.replace cx.ctxt_user_tag_names oid\n+              (path_to_name cx.ctxt_curr_path);\n         | _ -> ()\n     end;\n       inner.Walk.visit_mod_item_pre n p i"}, {"sha": "e77f97547e5a04a69f4e3301b6a7de981af53caa", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7e3c662b4f52aa7b35ba5e0ce5d09154687a9140/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=7e3c662b4f52aa7b35ba5e0ce5d09154687a9140", "patch": "@@ -116,6 +116,7 @@ type ctxt =\n       ctxt_all_lvals: (node_id,Ast.lval) Hashtbl.t;\n       ctxt_call_lval_params: (node_id,Ast.ty array) Hashtbl.t;\n       ctxt_user_type_names: (Ast.ty,Ast.name) Hashtbl.t;\n+      ctxt_user_tag_names: (opaque_id,Ast.name) Hashtbl.t;\n \n       (* A directed graph that encodes the containment relation among tags. *)\n       ctxt_tag_containment: (opaque_id, tag_graph_node) Hashtbl.t;\n@@ -229,6 +230,7 @@ let new_ctxt sess abi crate =\n     ctxt_all_defns = Hashtbl.create 0;\n     ctxt_call_lval_params = Hashtbl.create 0;\n     ctxt_user_type_names = Hashtbl.create 0;\n+    ctxt_user_tag_names = Hashtbl.create 0;\n \n     ctxt_tag_containment = Hashtbl.create 0;\n \n@@ -1005,40 +1007,10 @@ let rec pretty_ty_str (cx:ctxt) (fallback:(Ast.ty -> string)) (ty:Ast.ty) =\n           let fn_args_str = String.concat \", \" (Array.to_list fn_args) in\n           let fn_rv_str = format_slot fnsig.Ast.sig_output_slot in\n           Printf.sprintf \"fn(%s) -> %s\" fn_args_str fn_rv_str\n-      | Ast.TY_tag { Ast.tag_id = tag_id; Ast.tag_args = args }\n-              when Hashtbl.mem cx.ctxt_all_tag_info tag_id ->\n-          let tag_info = Hashtbl.find cx.ctxt_all_tag_info tag_id in\n-          let tag_idents = tag_info.tag_idents in\n-          let item_id = ref None in\n-          (* Ugly hack ahead... *)\n-          begin\n-            try\n-              Hashtbl.iter\n-                begin\n-                  fun _ (_, item_id', _) ->\n-                    item_id := Some item_id'; raise Exit\n-                end\n-                tag_idents\n-            with Exit -> ();\n-          end;\n-          begin\n-            match !item_id with\n-                None -> fallback ty\n-              | Some item_id ->\n-                  let item_types = cx.ctxt_all_item_types in\n-                  let ty = Hashtbl.find item_types item_id in\n-                  let args_suffix =\n-                    if Array.length args == 0 then \"\"\n-                    else\n-                      Printf.sprintf \"[%s]\"\n-                        (String.concat \",\"\n-                          (Array.to_list\n-                            (Array.map\n-                              (pretty_ty_str cx fallback)\n-                              args)))\n-                  in\n-                  (pretty_ty_str cx fallback ty) ^ args_suffix\n-          end\n+      | Ast.TY_tag { Ast.tag_id = tag_id; Ast.tag_args = _ }\n+              when Hashtbl.mem cx.ctxt_user_tag_names tag_id ->\n+          let name = Hashtbl.find cx.ctxt_user_tag_names tag_id in\n+          Ast.sprintf_name () name\n \n       | _ -> fallback ty (* TODO: we can do better for objects *)\n ;;"}]}