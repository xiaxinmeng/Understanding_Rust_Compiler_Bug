{"sha": "26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Yzg2OWRkYzBjZWZjODE4OTlkY2VhZmIyYmYxNGM2NmUxYzVjNTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-09T22:25:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-09T22:26:15Z"}, "message": "Don't classify attributes on macro-calls are the macro itself", "tree": {"sha": "ee7763b81fe271c5af29f30b8c274a719527d316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7763b81fe271c5af29f30b8c274a719527d316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "html_url": "https://github.com/rust-lang/rust/commit/26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26c869ddc0cefc81899dceafb2bf14c66e1c5c54/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6133fe51c2cf31d776f16d520de4f78c709181c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6133fe51c2cf31d776f16d520de4f78c709181c", "html_url": "https://github.com/rust-lang/rust/commit/c6133fe51c2cf31d776f16d520de4f78c709181c"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "f8b64a669048b984cd95f218d34fbff1964854c3", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26c869ddc0cefc81899dceafb2bf14c66e1c5c54/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c869ddc0cefc81899dceafb2bf14c66e1c5c54/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "patch": "@@ -1380,4 +1380,24 @@ lib::foo!();\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn macro_doesnt_reference_attribute_on_call() {\n+        check(\n+            r#\"\n+macro_rules! m {\n+    () => {};\n+}\n+\n+#[proc_macro_test::attr_noop]\n+m$0!();\n+\n+\"#,\n+            expect![[r#\"\n+                m Macro FileId(0) 0..32 13..14\n+\n+                FileId(0) 64..65\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "1b69d72f91909d714fe7bc5d3e291615e95ef243", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26c869ddc0cefc81899dceafb2bf14c66e1c5c54/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26c869ddc0cefc81899dceafb2bf14c66e1c5c54/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=26c869ddc0cefc81899dceafb2bf14c66e1c5c54", "patch": "@@ -357,19 +357,17 @@ impl NameRefClass {\n             }\n         }\n \n-        if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n-            if let Some(path) = macro_call.path() {\n-                if path.qualifier().is_none() {\n+        if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n+            if path.qualifier().is_none() {\n+                if let Some(macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n                     // Only use this to resolve single-segment macro calls like `foo!()`. Multi-segment\n                     // paths are handled below (allowing `log$0::info!` to resolve to the log crate).\n                     if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n                         return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n                     }\n                 }\n             }\n-        }\n \n-        if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n             if let Some(resolved) = sema.resolve_path(&path) {\n                 if path.syntax().parent().and_then(ast::Attr::cast).is_some() {\n                     if let PathResolution::Def(ModuleDef::Function(func)) = resolved {"}]}