{"sha": "752283889ca8da16dc2efc093bbc1094b034444c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjI4Mzg4OWNhOGRhMTZkYzJlZmMwOTNiYmMxMDk0YjAzNDQ0NGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:47:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `destructor_for_type` in the type context", "tree": {"sha": "83b8f8f71f8856bfde17c08a8cf01234f3529ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83b8f8f71f8856bfde17c08a8cf01234f3529ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752283889ca8da16dc2efc093bbc1094b034444c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752283889ca8da16dc2efc093bbc1094b034444c", "html_url": "https://github.com/rust-lang/rust/commit/752283889ca8da16dc2efc093bbc1094b034444c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752283889ca8da16dc2efc093bbc1094b034444c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc923fbda6f55a15583ed5f60aef08c1faf2cba", "html_url": "https://github.com/rust-lang/rust/commit/4dc923fbda6f55a15583ed5f60aef08c1faf2cba"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "61442e1909566340fc9069395c19fe53d580865d", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=752283889ca8da16dc2efc093bbc1094b034444c", "patch": "@@ -374,7 +374,8 @@ impl ReachableContext {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&self) {\n-        for (_, destructor_def_id) in self.tcx.destructor_for_type.iter() {\n+        let destructor_for_type = self.tcx.destructor_for_type.borrow();\n+        for (_, destructor_def_id) in destructor_for_type.get().iter() {\n             if destructor_def_id.crate == ast::LOCAL_CRATE {\n                 self.reachable_symbols.insert(destructor_def_id.node);\n             }"}, {"sha": "1d0bc49b8c9d2a22b414b7624c80f85709fbe622", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=752283889ca8da16dc2efc093bbc1094b034444c", "patch": "@@ -327,7 +327,7 @@ struct ctxt_ {\n     // of the method that implements its destructor. If the type is not\n     // present in this map, it does not have a destructor. This map is\n     // populated during the coherence phase of typechecking.\n-    destructor_for_type: @mut HashMap<ast::DefId, ast::DefId>,\n+    destructor_for_type: RefCell<HashMap<ast::DefId, ast::DefId>>,\n \n     // A method will be in this list if and only if it is a destructor.\n     destructors: @mut HashSet<ast::DefId>,\n@@ -1003,7 +1003,7 @@ pub fn mk_ctxt(s: session::Session,\n         lang_items: lang_items,\n         provided_method_sources: RefCell::new(HashMap::new()),\n         supertraits: RefCell::new(HashMap::new()),\n-        destructor_for_type: @mut HashMap::new(),\n+        destructor_for_type: RefCell::new(HashMap::new()),\n         destructors: @mut HashSet::new(),\n         trait_impls: @mut HashMap::new(),\n         inherent_impls:  @mut HashMap::new(),\n@@ -3813,7 +3813,8 @@ impl DtorKind {\n /* If struct_id names a struct with a dtor, return Some(the dtor's id).\n    Otherwise return none. */\n pub fn ty_dtor(cx: ctxt, struct_id: DefId) -> DtorKind {\n-    match cx.destructor_for_type.find(&struct_id) {\n+    let destructor_for_type = cx.destructor_for_type.borrow();\n+    match destructor_for_type.get().find(&struct_id) {\n         Some(&method_def_id) => {\n             let flag = !has_attr(cx, struct_id, \"unsafe_no_drop_flag\");\n "}, {"sha": "56e9f6be55e67f3d525da8aea53edac1f9247623", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=752283889ca8da16dc2efc093bbc1094b034444c", "patch": "@@ -1157,7 +1157,10 @@ impl<'a> LookupContext<'a> {\n             // that self has been merged in? -sully\n             method_param(method_param { trait_id: trait_id, .. }) |\n             method_object(method_object { trait_id: trait_id, .. }) => {\n-                bad = self.tcx().destructor_for_type.contains_key(&trait_id);\n+                let destructor_for_type = self.tcx()\n+                                              .destructor_for_type\n+                                              .borrow();\n+                bad = destructor_for_type.get().contains_key(&trait_id);\n             }\n         }\n "}, {"sha": "0371f877f4fae219cab7255ad7a91606be70c02f", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752283889ca8da16dc2efc093bbc1094b034444c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=752283889ca8da16dc2efc093bbc1094b034444c", "patch": "@@ -705,8 +705,10 @@ impl CoherenceChecker {\n             let self_type = self.get_self_type_for_implementation(*impl_info);\n             match ty::get(self_type.ty).sty {\n                 ty::ty_struct(type_def_id, _) => {\n-                    tcx.destructor_for_type.insert(type_def_id,\n-                                                   method_def_id);\n+                    let mut destructor_for_type = tcx.destructor_for_type\n+                                                     .borrow_mut();\n+                    destructor_for_type.get().insert(type_def_id,\n+                                                     method_def_id);\n                     tcx.destructors.insert(method_def_id);\n                 }\n                 _ => {"}]}