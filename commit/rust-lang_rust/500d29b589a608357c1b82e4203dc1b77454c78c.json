{"sha": "500d29b589a608357c1b82e4203dc1b77454c78c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGQyOWI1ODlhNjA4MzU3YzFiODJlNDIwM2RjMWI3NzQ1NGM3OGM=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-02-15T20:31:20Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-02-15T20:34:11Z"}, "message": "Declare by-value on-stack parameters to be noalias\n\nFunction parameters that are to be passed by value but don't fit into a\nsingle register are currently passed by creating a copy on the stack and\npassing a pointer to that copy to the callee. Since the copy is made\njust for the function call, there are no aliases.\n\nFor example, this sometimes allows LLVM to eliminate unnecessary calls\nto drop glue. Given\n\n````rust\nstruct Foo {\n    a: int,\n    b: Option<~str>,\n}\n\nextern {\n    fn eat(eat: Option<~str>);\n}\n\npub fn foo(v: Foo) {\n    match v {\n        Foo { a: _, b } => unsafe { eat(b) }\n    }\n}\n````\n\nLLVM currently can't eliminate the drop call for the string, because it\nonly sees a _pointer_ to Foo, for which it has to expect an alias. So we\nget:\n\n````llvm\n; Function Attrs: uwtable\ndefine void @_ZN3foo20h9f32c90ae7201edbxaa4v0.0E(%struct.Foo* nocapture) unnamed_addr #0 {\n\"_ZN34std..option..Option$LT$$UP$str$GT$9glue_drop17hc39b3015f3b9c69dE.exit\":\n  %1 = getelementptr inbounds %struct.Foo* %0, i64 0, i32 1, i32 0\n  %2 = load { i64, i64, [0 x i8] }** %1, align 8\n  store { i64, i64, [0 x i8] }* null, { i64, i64, [0 x i8] }** %1, align 8\n  %3 = ptrtoint { i64, i64, [0 x i8] }* %2 to i64\n  %.fca.0.insert = insertvalue { i64 } undef, i64 %3, 0\n  tail call void @eat({ i64 } %.fca.0.insert)\n  %4 = load { i64, i64, [0 x i8] }** %1, align 8\n  %5 = icmp eq { i64, i64, [0 x i8] }* %4, null\n  br i1 %5, label %_ZN3Foo9glue_drop17hf611996539d3036fE.exit, label %\"_ZN8_$UP$str9glue_drop17h15dbdbe2b8897a98E.exit.i.i\"\n\n\"_ZN8_$UP$str9glue_drop17h15dbdbe2b8897a98E.exit.i.i\": ; preds = %\"_ZN34std..option..Option$LT$$UP$str$GT$9glue_drop17hc39b3015f3b9c69dE.exit\"\n  %6 = bitcast { i64, i64, [0 x i8] }* %4 to i8*\n  tail call void @free(i8* %6) #1\n  br label %_ZN3Foo9glue_drop17hf611996539d3036fE.exit\n\n_ZN3Foo9glue_drop17hf611996539d3036fE.exit:       ; preds = %\"_ZN34std..option..Option$LT$$UP$str$GT$9glue_drop17hc39b3015f3b9c69dE.exit\", %\"_ZN8_$UP$str9glue_drop17h15dbdbe2b8897a98E.exit.i.i\"\n  ret void\n}\n````\n\nBut with the `noalias` attribute, it can safely optimize that to:\n\n````llvm\ndefine void @_ZN3foo20hd28431f929f0d6c4xaa4v0.0E(%struct.Foo* noalias nocapture) unnamed_addr #0 {\n_ZN3Foo9glue_drop17he9afbc09d4e9c851E.exit:\n  %1 = getelementptr inbounds %struct.Foo* %0, i64 0, i32 1, i32 0\n  %2 = load { i64, i64, [0 x i8] }** %1, align 8\n  store { i64, i64, [0 x i8] }* null, { i64, i64, [0 x i8] }** %1, align 8\n  %3 = ptrtoint { i64, i64, [0 x i8] }* %2 to i64\n  %.fca.0.insert = insertvalue { i64 } undef, i64 %3, 0\n  tail call void @eat({ i64 } %.fca.0.insert)\n  ret void\n}\n````", "tree": {"sha": "1353ba8d4acac4de12bef43804db7b90ca36853b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1353ba8d4acac4de12bef43804db7b90ca36853b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500d29b589a608357c1b82e4203dc1b77454c78c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500d29b589a608357c1b82e4203dc1b77454c78c", "html_url": "https://github.com/rust-lang/rust/commit/500d29b589a608357c1b82e4203dc1b77454c78c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500d29b589a608357c1b82e4203dc1b77454c78c/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7762baa89bc1f1480b79c410375b36c6bdda600e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7762baa89bc1f1480b79c410375b36c6bdda600e", "html_url": "https://github.com/rust-lang/rust/commit/7762baa89bc1f1480b79c410375b36c6bdda600e"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "dc8e786fba24e2a06befd7e2ce97b2ba8d3734e2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/500d29b589a608357c1b82e4203dc1b77454c78c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500d29b589a608357c1b82e4203dc1b77454c78c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=500d29b589a608357c1b82e4203dc1b77454c78c", "patch": "@@ -273,7 +273,15 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }\n             }\n-            _ => {}\n+            _ => {\n+                // For non-immediate arguments the callee gets its own copy of\n+                // the value on the stack, so there are no aliases\n+                if !type_is_immediate(ccx, arg_ty) {\n+                    unsafe {\n+                        llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n+                    }\n+                }\n+            }\n         }\n     }\n "}]}