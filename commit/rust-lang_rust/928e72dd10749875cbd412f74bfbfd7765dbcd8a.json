{"sha": "928e72dd10749875cbd412f74bfbfd7765dbcd8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOGU3MmRkMTA3NDk4NzVjYmQ0MTJmNzRiZmJmZDc3NjVkYmNkOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T09:49:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T09:49:12Z"}, "message": "Auto merge of #6789 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: None", "tree": {"sha": "599aa77264bdf504f76ed65787dc00f4e33ed4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599aa77264bdf504f76ed65787dc00f4e33ed4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928e72dd10749875cbd412f74bfbfd7765dbcd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928e72dd10749875cbd412f74bfbfd7765dbcd8a", "html_url": "https://github.com/rust-lang/rust/commit/928e72dd10749875cbd412f74bfbfd7765dbcd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928e72dd10749875cbd412f74bfbfd7765dbcd8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "html_url": "https://github.com/rust-lang/rust/commit/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d"}, {"sha": "8f8c7c293c3f7b6c44c80ba7d78d37dd35eac039", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8c7c293c3f7b6c44c80ba7d78d37dd35eac039", "html_url": "https://github.com/rust-lang/rust/commit/8f8c7c293c3f7b6c44c80ba7d78d37dd35eac039"}], "stats": {"total": 283, "additions": 134, "deletions": 149}, "files": [{"sha": "004bce5f62a8f74e4e850a1ecd0ca2d0b51a4f23", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n+            let ty = cx.tcx.type_of(item.def_id);\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n                 span_lint_and_note("}, {"sha": "e8510bde9adcd4fb74a505092b99b912236bfdc7", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n+            let ty = cx.tcx.type_of(item.def_id);\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "39a202f281cb7d2f8908cff1d8ac402e0d4c2c99", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -216,18 +216,23 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n-                if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id).to_def_id())\n-                    || in_external_macro(cx.tcx.sess, item.span))\n-                {\n+                if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n                     let body = cx.tcx.hir().body(body_id);\n-                    let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n                     let mut fpu = FindPanicUnwrap {\n                         cx,\n-                        typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                        typeck_results: cx.tcx.typeck(item.def_id),\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(&body.value);\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(\n+                        cx,\n+                        item.hir_id(),\n+                        item.span,\n+                        sig,\n+                        headers,\n+                        Some(body_id),\n+                        fpu.panic_span,\n+                    );\n                 }\n             },\n             hir::ItemKind::Impl(ref impl_) => {\n@@ -247,7 +252,7 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None, None);\n+                lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n             }\n         }\n     }\n@@ -259,14 +264,21 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(item.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(&body.value);\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(\n+                cx,\n+                item.hir_id(),\n+                item.span,\n+                sig,\n+                headers,\n+                Some(body_id),\n+                fpu.panic_span,\n+            );\n         }\n     }\n }"}, {"sha": "077c3b75fb8c837508fef72290b42571f59715c1", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -49,9 +49,8 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n             return;\n         }\n \n-        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(did);\n+            let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants.is_empty() {\n                 span_lint_and_help("}, {"sha": "f8ef2a464d5c31aa929ce65aba6a53f64307f92d", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -87,11 +87,11 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n             // find `self` ty for this trait if relevant\n             if let ItemKind::Trait(_, _, _, _, items) = item.kind {\n                 for trait_item in items {\n-                    if trait_item.id.hir_id == hir_id {\n+                    if trait_item.id.hir_id() == hir_id {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.hir_id.owner.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n                         }\n                     }\n                 }"}, {"sha": "ab9be3398bfa6749e3ab6e25d382776ed849a9dc", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -72,7 +72,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n-            if cx.access_levels.is_exported(item.hir_id);\n+            if cx.access_levels.is_exported(item.hir_id());\n             if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {"}, {"sha": "6d522c7ef3398d231cdd10244b2e8c47054b45fd", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -52,10 +52,9 @@ declare_lint_pass!(FallibleImplFrom => [FALLIBLE_IMPL_FROM]);\n impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         // check for `impl From<???> for ..`\n-        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl(impl_) = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n             if cx.tcx.is_diagnostic_item(sym::from_trait, impl_trait_ref.def_id);\n             then {\n                 lint_impl_body(cx, item.span, impl_.items);\n@@ -117,10 +116,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             then {\n                 // check the body for `begin_panic` or `unwrap`\n                 let body = cx.tcx.hir().body(body_id);\n-                let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.id.hir_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(&body.value);"}, {"sha": "b644bb079908f821a0a699506aae9cb0ad5d132a", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -60,10 +60,9 @@ impl LateLintPass<'_> for FromOverInto {\n             return;\n         }\n \n-        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n-            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n \n             then {"}, {"sha": "e4b3a9009f612664916c01b864699c9edcbe8961", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -283,13 +283,13 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         let attr = must_use_attr(&item.attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n             if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n@@ -298,7 +298,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                     &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n-                    item.hir_id,\n+                    item.hir_id(),\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this function could have a `#[must_use]` attribute\",\n                 );\n@@ -308,24 +308,24 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public && trait_ref_of_method(cx, item.hir_id).is_none() {\n+            if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             } else if is_public\n                 && !is_proc_macro(cx.sess(), &item.attrs)\n-                && trait_ref_of_method(cx, item.hir_id).is_none()\n+                && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n-                    item.hir_id,\n+                    item.hir_id(),\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );\n@@ -339,27 +339,27 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if sig.header.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));\n             }\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n             if is_public {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n-                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n+                Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n                 if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,\n                         body,\n                         item.span,\n-                        item.hir_id,\n+                        item.hir_id(),\n                         item.span.with_hi(sig.decl.output.span().hi()),\n                         \"this method could have a `#[must_use]` attribute\",\n                     );"}, {"sha": "005c461f105e60a7e3f4582788572d84cd81547b", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -59,20 +59,15 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {\n-                self.impls.insert(item.hir_id.owner.to_def_id(), item.span);\n+                self.impls.insert(item.def_id.to_def_id(), item.span);\n             }\n         }\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'tcx>, krate: &'tcx Crate<'_>) {\n-        if let Some(item) = krate.items.values().next() {\n+        if !krate.items.is_empty() {\n             // Retrieve all inherent implementations from the crate, grouped by type\n-            for impls in cx\n-                .tcx\n-                .crate_inherent_impls(item.hir_id.owner.to_def_id().krate)\n-                .inherent_impls\n-                .values()\n-            {\n+            for impls in cx.tcx.crate_inherent_impls(def_id::LOCAL_CRATE).inherent_impls.values() {\n                 // Filter out implementations that have generic params (type or lifetime)\n                 let mut impl_spans = impls.iter().filter_map(|impl_def| self.impls.get(impl_def));\n                 if let Some(initial_span) = impl_spans.next() {"}, {"sha": "a95321ea7e2af39fed82690aa512e82fe7f314c0", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -109,10 +109,10 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if impl_item.generics.params.is_empty();\n \n             // Check if return type is String\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::string_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::string_type);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n \n             then {\n                 show_lint(cx, impl_item);\n@@ -125,8 +125,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n     let display_trait_id = get_trait_def_id(cx, &paths::DISPLAY_TRAIT).expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-    let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.def_id).input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "ab4cb33612d380f0cddb11b0d1b5eec75bf4c253", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -62,9 +62,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n         if in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n-        let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(did);\n+            let ty = cx.tcx.type_of(item.def_id);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n \n             let mut largest_variant: Option<(_, _)> = None;"}, {"sha": "dab3e0565cafb30d8dd4e0240a782909355dbb81", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -159,10 +159,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && { cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }\n@@ -177,10 +174,9 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id()) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n-        let visited_trait_def_id = cx.tcx.hir().local_def_id(visited_trait.hir_id);\n-        fill_trait_set(visited_trait_def_id.to_def_id(), &mut current_and_super_traits, cx);\n+        fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()\n@@ -210,17 +206,14 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     fn is_named_self(cx: &LateContext<'_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1\n             } else {\n                 false\n             }\n     }\n \n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n-        if cx.access_levels.is_exported(is_empty.id.hir_id) {\n+        if cx.access_levels.is_exported(is_empty.id.hir_id()) {\n             return;\n         }\n         \"a private\"\n@@ -229,9 +222,8 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     };\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-        if cx.access_levels.is_exported(i.id.hir_id) {\n-            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-            let ty = cx.tcx.type_of(def_id);\n+        if cx.access_levels.is_exported(i.id.hir_id()) {\n+            let ty = cx.tcx.type_of(item.def_id);\n \n             span_lint(\n                 cx,"}, {"sha": "50e6383263dd3fd0ec424b32f77e35a9c39e02c8", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n             check_fn_inner(\n                 cx,\n                 &sig.decl,\n@@ -375,7 +375,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         match ty.kind {\n             TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                let item = map.expect_item(item.id);\n+                let item = map.item(item);\n                 walk_item(self, item);\n                 walk_ty(self, ty);\n             },"}, {"sha": "1c9373a756c8896d3de7472131aa8839f3d16206", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -340,7 +340,7 @@ declare_clippy_lint! {\n     /// ```\n     pub WHILE_LET_ON_ITERATOR,\n     style,\n-    \"using a while-let loop instead of a for loop on an iterator\"\n+    \"using a `while let` loop instead of a for loop on an iterator\"\n }\n \n declare_clippy_lint! {"}, {"sha": "2e2e693592c8853d22eaffafffd45f0f72992626", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -102,7 +102,7 @@ fn future_trait_ref<'tcx>(\n ) -> Option<(&'tcx TraitRef<'tcx>, Vec<LifetimeName>)> {\n     if_chain! {\n         if let TyKind::OpaqueDef(item_id, bounds) = ty.kind;\n-        let item = cx.tcx.hir().item(item_id.id);\n+        let item = cx.tcx.hir().item(item_id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if let Some(trait_ref) = opaque.bounds.iter().find_map(|bound| {\n             if let GenericBound::Trait(poly, _) = bound {"}, {"sha": "ebd8af93dd0fbd0064d98f0db9151c450b8f3ad3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -1737,10 +1737,9 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-        let self_ty = cx.tcx.type_of(def_id);\n+        let self_ty = cx.tcx.type_of(item.def_id);\n \n         // if this impl block implements a trait, lint in trait definition instead\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n@@ -1751,8 +1750,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n \n-            let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-            let method_sig = cx.tcx.fn_sig(method_def_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n \n             let first_arg_ty = &method_sig.inputs().iter().next();\n@@ -1761,7 +1759,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = first_arg_ty;\n \n             then {\n-                if cx.access_levels.is_exported(impl_item.hir_id) {\n+                if cx.access_levels.is_exported(impl_item.hir_id()) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n@@ -1803,7 +1801,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n-            let ret_ty = return_ty(cx, impl_item.hir_id);\n+            let ret_ty = return_ty(cx, impl_item.hir_id());\n \n             // walk the return type and check for Self (this does not check associated types)\n             if contains_ty(ret_ty, self_ty) {\n@@ -1844,7 +1842,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = sig.decl.inputs.iter().next();\n             let first_arg_span = first_arg_ty.span;\n             let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n \n             then {\n                 lint_wrong_self_convention(cx, &item.ident.name.as_str(), false, self_ty, first_arg_ty, first_arg_span);\n@@ -1854,8 +1852,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         if_chain! {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n-            let ret_ty = return_ty(cx, item.hir_id);\n-            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            let ret_ty = return_ty(cx, item.hir_id());\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n             if !contains_ty(ret_ty, self_ty);\n \n             then {"}, {"sha": "761b9261772b2a170fc71f209c325b2918c9036f", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -135,8 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Fn(..) => {\n                 // ignore main()\n                 if it.ident.name == sym::main {\n-                    let def_id = it.hir_id.owner;\n-                    let def_key = cx.tcx.hir().def_key(def_id);\n+                    let def_key = cx.tcx.hir().def_key(it.def_id);\n                     if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n                         return;\n                     }\n@@ -159,23 +158,20 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             | hir::ItemKind::Use(..) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n-        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        match cx.tcx.associated_item(def_id).container {\n+        match cx.tcx.associated_item(impl_item.def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {\n                 if cx.tcx.impl_trait_ref(cid).is_some() {\n@@ -184,7 +180,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             },\n         }\n \n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n     }\n "}, {"sha": "47d7c5306c4331b45a6f48efeefac69eef59ac65", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(it.hir_id) {\n+        if !cx.access_levels.is_exported(it.hir_id()) {\n             return;\n         }\n         match it.kind {\n@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n-                                let item = cx.tcx.hir().expect_trait_item(tit.id.hir_id);\n+                                let item = cx.tcx.hir().trait_item(tit.id);\n                                 check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n                             }\n                         },\n@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.hir_id) {\n+        if !cx.access_levels.is_exported(impl_item.hir_id()) {\n             return;\n         }\n \n@@ -147,14 +147,13 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let trait_def_id = match cx.tcx.associated_item(def_id).container {\n+        let trait_def_id = match cx.tcx.associated_item(impl_item.def_id).container {\n             TraitContainer(cid) => Some(cid),\n             ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id()) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "908b7bb7ce00d13359c619bda5f54d812e89fb95", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -57,21 +57,21 @@ declare_lint_pass!(MutableKeyType => [ MUTABLE_KEY_TYPE ]);\n impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n-            check_sig(cx, item.hir_id, &sig.decl);\n+            check_sig(cx, item.hir_id(), &sig.decl);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id).is_none() {\n-                check_sig(cx, item.hir_id, &sig.decl);\n+            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+                check_sig(cx, item.hir_id(), &sig.decl);\n             }\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n-            check_sig(cx, item.hir_id, &sig.decl);\n+            check_sig(cx, item.hir_id(), &sig.decl);\n         }\n     }\n "}, {"sha": "1453ea6e8975da8856806e7f819f2748c8fc516c", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -5,11 +5,12 @@\n use crate::utils::{is_automatically_derived, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n+use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, Item, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::LocalDefId;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for address of operations (`&`) that are going to\n@@ -35,7 +36,7 @@ declare_clippy_lint! {\n \n #[derive(Default)]\n pub struct NeedlessBorrow {\n-    derived_item: Option<HirId>,\n+    derived_item: Option<LocalDefId>,\n }\n \n impl_lint_pass!(NeedlessBorrow => [NEEDLESS_BORROW]);\n@@ -117,13 +118,13 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if is_automatically_derived(item.attrs) {\n             debug_assert!(self.derived_item.is_none());\n-            self.derived_item = Some(item.hir_id);\n+            self.derived_item = Some(item.def_id);\n         }\n     }\n \n     fn check_item_post(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let Some(id) = self.derived_item {\n-            if item.hir_id == id {\n+            if item.def_id == id {\n                 self.derived_item = None;\n             }\n         }"}, {"sha": "de2899c3462a4f6f8b71a0a727140c09f93e6232", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n-                        let id = impl_item.hir_id;\n+                        let id = impl_item.hir_id();\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;"}, {"sha": "8aebce67917afa1559e16925ced20f8f16238bf7", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n+            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {"}, {"sha": "3d6129aa78d4c47d71d832eb4b76d803fdc90c2d", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n                         span_lint_hir(\n                             cx,\n                             PARTIALEQ_NE_IMPL,\n-                            impl_item.id.hir_id,\n+                            impl_item.id.hir_id(),\n                             impl_item.span,\n                             \"re-implementing `PartialEq::ne` is unnecessary\",\n                         );"}, {"sha": "b9ba32001b5137620f077b3996ef7bc00dab041c", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n-            self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n+            self.check_poly_fn(cx, item.hir_id(), &*method_sig.decl, None);\n         }\n     }\n "}, {"sha": "de2fb8decb7150c42c53320715850be09d6a1033", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -124,19 +124,19 @@ declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n-            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id(), Some(body_id));\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n+            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id());\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n                 if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id(), Some(body_id));\n         }\n     }\n \n@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             } else {\n                 None\n             };\n-            check_fn(cx, &sig.decl, item.hir_id, body_id);\n+            check_fn(cx, &sig.decl, item.hir_id(), body_id);\n         }\n     }\n "}, {"sha": "c876bae2303ad29f0252d0ec425d1b9ca17374c7", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -42,11 +42,10 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let VisibilityKind::Crate { .. } = item.vis.node {\n-            if !cx.access_levels.is_exported(item.hir_id) {\n+            if !cx.access_levels.is_exported(item.hir_id()) {\n                 if let Some(false) = self.is_exported.last() {\n                     let span = item.span.with_hi(item.ident.span.hi());\n-                    let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-                    let descr = cx.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+                    let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n                     span_lint_and_then(\n                         cx,\n                         REDUNDANT_PUB_CRATE,\n@@ -66,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n         }\n \n         if let ItemKind::Mod { .. } = item.kind {\n-            self.is_exported.push(cx.access_levels.is_exported(item.hir_id));\n+            self.is_exported.push(cx.access_levels.is_exported(item.hir_id()));\n         }\n     }\n "}, {"sha": "05754503163bd275b57ec3989f38dc5d8688f84c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -2567,7 +2567,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(item.hir_id) {\n+        if !cx.access_levels.is_exported(item.hir_id()) {\n             return;\n         }\n "}, {"sha": "812482cf5cfb6638bdbb7eeaa18461c6937a8467", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -42,10 +42,9 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let assoc_item = cx.tcx.associated_item(def_id);\n+        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;"}, {"sha": "8cb7429849da65bf207d9221c5f6805f5aecd17b", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -57,8 +57,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::result_type)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::option_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::result_type)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::option_type);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }\n@@ -114,10 +114,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n         if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n         then {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let mut fpu = FindExpectUnwrap {\n                 lcx: cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(impl_item.def_id),\n                 result: Vec::new(),\n             };\n             fpu.visit_expr(&body.value);"}, {"sha": "be7b9e9ff2dcc20186e58ec6409a3ce160987073", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -111,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 } else {\n                     false\n                 };\n-                let impl_trait_ref_def_id = of_trait.as_ref().map(|_| cx.tcx.hir().local_def_id(item.hir_id));\n+                let impl_trait_ref_def_id = of_trait.as_ref().map(|_| cx.tcx.hir().local_def_id(item.hir_id()));\n                 if should_check {\n                     self.stack.push(StackItem::Check {\n                         hir_id: hir_self_ty.hir_id,"}, {"sha": "6e3d4fde107775847243d008c3b7e96bf2523302", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         prelude();"}, {"sha": "9c1d98cd707453a3b7a82486ff4cbe0939dfe1d9", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id.id))) {\n+        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n             return;\n         }\n         match stmt.kind {\n@@ -370,7 +370,7 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n }\n \n fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n-    let did = cx.tcx.hir().local_def_id(item.hir_id);\n+    let did = item.def_id;\n     println!(\"item `{}`\", item.ident.name);\n     match item.vis.node {\n         hir::VisibilityKind::Public => println!(\"public\"),\n@@ -383,8 +383,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n     }\n     match item.kind {\n         hir::ItemKind::ExternCrate(ref _renamed_from) => {\n-            let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-            if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(def_id) {\n+            if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(did) {\n                 let source = cx.tcx.used_crate_source(crate_id);\n                 if let Some(ref src) = source.dylib {\n                     println!(\"extern crate dylib source: {:?}\", src.0);"}, {"sha": "0a347516c3ad2dd7e6e47ca04bd460d5c83e72c7", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{\n     span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n-use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n+use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -301,17 +301,12 @@ declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n     fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &AstCrate) {\n-        if let Some(utils) = krate\n-            .module\n-            .items\n-            .iter()\n-            .find(|item| item.ident.name.as_str() == \"utils\")\n-        {\n-            if let ItemKind::Mod(ref utils_mod) = utils.kind {\n-                if let Some(paths) = utils_mod.items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n-                    if let ItemKind::Mod(ref paths_mod) = paths.kind {\n+        if let Some(utils) = krate.items.iter().find(|item| item.ident.name.as_str() == \"utils\") {\n+            if let ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) = utils.kind {\n+                if let Some(paths) = items.iter().find(|item| item.ident.name.as_str() == \"paths\") {\n+                    if let ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) = paths.kind {\n                         let mut last_name: Option<SymbolStr> = None;\n-                        for item in &*paths_mod.items {\n+                        for item in items {\n                             let name = item.ident.as_str();\n                             if let Some(ref last_name) = last_name {\n                                 if **last_name > *name {\n@@ -343,7 +338,7 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id) {\n+        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id()) {\n             return;\n         }\n \n@@ -393,7 +388,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                         .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n                         .expect(\"LintPass needs to implement get_lints\")\n                         .id\n-                        .hir_id,\n+                        .hir_id(),\n                 );\n                 collector.visit_expr(&cx.tcx.hir().body(body_id).value);\n             }\n@@ -861,7 +856,7 @@ declare_lint_pass!(InvalidPaths => [INVALID_PATHS]);\n \n impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let local_def_id = &cx.tcx.parent_module(item.hir_id);\n+        let local_def_id = &cx.tcx.parent_module(item.hir_id());\n         let mod_name = &cx.tcx.item_name(local_def_id.to_def_id());\n         if_chain! {\n             if mod_name.as_str() == \"paths\";"}, {"sha": "094b1a42346c23ff64444c560e087d1586fd16a3", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -113,7 +113,7 @@ impl LateLintPass<'_> for WildcardImports {\n         if_chain! {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner);\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.def_id);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "9ef1557ec061d54f8a6b5b17190e72c80fa951ed", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -234,7 +234,16 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (Mod(l), Mod(r)) => l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind)),\n+        (Mod(lu, lmk), Mod(ru, rmk)) => {\n+            lu == ru\n+                && match (lmk, rmk) {\n+                    (ModKind::Loaded(litems, linline, _), ModKind::Loaded(ritems, rinline, _)) => {\n+                        linline == rinline && over(litems, ritems, |l, r| eq_item(l, r, eq_item_kind))\n+                    },\n+                    (ModKind::Unloaded, ModKind::Unloaded) => true,\n+                    _ => false,\n+                }\n+        },\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))"}, {"sha": "e61786796475347d6442341b403a42a83cfdac77", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -20,8 +20,8 @@ pub const CLONE_TRAIT: [&str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n-pub const COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n-pub const COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n+pub const COPY: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy_nonoverlapping\"];\n+pub const COPY_NONOVERLAPPING: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"copy\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];"}, {"sha": "865043b46d179516040b478cfdff377561dc8816", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-02-11\"\n+channel = \"nightly-2021-02-25\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "d5143e1438ee0e89d18f854ec5457a6f4d859bb8", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/928e72dd10749875cbd412f74bfbfd7765dbcd8a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e72dd10749875cbd412f74bfbfd7765dbcd8a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=928e72dd10749875cbd412f74bfbfd7765dbcd8a", "patch": "@@ -11,10 +11,8 @@\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_interface;\n-extern crate rustc_middle;\n \n use rustc_interface::interface;\n-use rustc_middle::ty::TyCtxt;\n use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n@@ -168,7 +166,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let num_frames = if backtrace { None } else { Some(2) };\n \n-    TyCtxt::try_print_query_stack(&handler, num_frames);\n+    interface::try_print_query_stack(&handler, num_frames);\n }\n \n fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<PathBuf> {"}]}