{"sha": "076116bb4ca84801e5f513fc7cf280c55f32e8c4", "node_id": "C_kwDOAAsO6NoAKDA3NjExNmJiNGNhODQ4MDFlNWY1MTNmYzdjZjI4MGM1NWYzMmU4YzQ", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-02T15:26:48Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-04T12:12:35Z"}, "message": "replace LLVMRustAppendModuleInlineAsm with LLVMAppendModuleInlineAsm, LLVMRustMetadataTypeInContext with LLVMMetadataTypeInContext", "tree": {"sha": "3773892156ad2653f1c6a8b85e3a6d47f7b7bc73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3773892156ad2653f1c6a8b85e3a6d47f7b7bc73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076116bb4ca84801e5f513fc7cf280c55f32e8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076116bb4ca84801e5f513fc7cf280c55f32e8c4", "html_url": "https://github.com/rust-lang/rust/commit/076116bb4ca84801e5f513fc7cf280c55f32e8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076116bb4ca84801e5f513fc7cf280c55f32e8c4/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c53a9faa6fdcdf8776646e837272ea0a85bf8179", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53a9faa6fdcdf8776646e837272ea0a85bf8179", "html_url": "https://github.com/rust-lang/rust/commit/c53a9faa6fdcdf8776646e837272ea0a85bf8179"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "e7668341eb6e728b0738e96ae110b200d638f8a4", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=076116bb4ca84801e5f513fc7cf280c55f32e8c4", "patch": "@@ -381,7 +381,7 @@ impl<'tcx> AsmMethods<'tcx> for CodegenCx<'_, 'tcx> {\n         }\n \n         unsafe {\n-            llvm::LLVMRustAppendModuleInlineAsm(\n+            llvm::LLVMAppendModuleInlineAsm(\n                 self.llmod,\n                 template_str.as_ptr().cast(),\n                 template_str.len(),"}, {"sha": "7136f750f39d9ee0a207de8ff16482b2c643c88f", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=076116bb4ca84801e5f513fc7cf280c55f32e8c4", "patch": "@@ -904,9 +904,9 @@ unsafe fn embed_bitcode(\n         // We need custom section flags, so emit module-level inline assembly.\n         let section_flags = if cgcx.is_pe_coff { \"n\" } else { \"e\" };\n         let asm = create_section_with_flags_asm(\".llvmbc\", section_flags, bitcode);\n-        llvm::LLVMRustAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n+        llvm::LLVMAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n         let asm = create_section_with_flags_asm(\".llvmcmd\", section_flags, cmdline.as_bytes());\n-        llvm::LLVMRustAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n+        llvm::LLVMAppendModuleInlineAsm(llmod, asm.as_ptr().cast(), asm.len());\n     }\n }\n "}, {"sha": "5e1798a48665312b1bf7b927d215999e516d9a3f", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=076116bb4ca84801e5f513fc7cf280c55f32e8c4", "patch": "@@ -1006,7 +1006,7 @@ extern \"C\" {\n     pub fn LLVMSetDataLayout(M: &Module, Triple: *const c_char);\n \n     /// See Module::setModuleInlineAsm.\n-    pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n+    pub fn LLVMAppendModuleInlineAsm(M: &Module, Asm: *const c_char, Len: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: &Type) -> TypeKind;\n@@ -1053,7 +1053,7 @@ extern \"C\" {\n \n     // Operations on other types\n     pub fn LLVMVoidTypeInContext(C: &Context) -> &Type;\n-    pub fn LLVMRustMetadataTypeInContext(C: &Context) -> &Type;\n+    pub fn LLVMMetadataTypeInContext(C: &Context) -> &Type;\n \n     // Operations on all values\n     pub fn LLVMTypeOf(Val: &Value) -> &Type;"}, {"sha": "bef4647f20789c72abf07c7d9f1537b16d86c88e", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=076116bb4ca84801e5f513fc7cf280c55f32e8c4", "patch": "@@ -53,7 +53,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n     }\n \n     pub(crate) fn type_metadata(&self) -> &'ll Type {\n-        unsafe { llvm::LLVMRustMetadataTypeInContext(self.llcx) }\n+        unsafe { llvm::LLVMMetadataTypeInContext(self.llcx) }\n     }\n \n     ///x Creates an integer type with the given number of bits, e.g., i24"}, {"sha": "27f8c7a4a6d3b33281a9db28458e0e8f679a0c96", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/076116bb4ca84801e5f513fc7cf280c55f32e8c4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=076116bb4ca84801e5f513fc7cf280c55f32e8c4", "patch": "@@ -152,10 +152,6 @@ LLVMRustInsertPrivateGlobal(LLVMModuleRef M, LLVMTypeRef Ty) {\n                                  nullptr));\n }\n \n-extern \"C\" LLVMTypeRef LLVMRustMetadataTypeInContext(LLVMContextRef C) {\n-  return wrap(Type::getMetadataTy(*unwrap(C)));\n-}\n-\n static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n   switch (Kind) {\n   case AlwaysInline:\n@@ -480,11 +476,6 @@ extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,\n #endif\n }\n \n-extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm,\n-                                              size_t AsmLen) {\n-  unwrap(M)->appendModuleInlineAsm(StringRef(Asm, AsmLen));\n-}\n-\n typedef DIBuilder *LLVMRustDIBuilderRef;\n \n template <typename DIT> DIT *unwrapDIPtr(LLVMMetadataRef Ref) {"}]}