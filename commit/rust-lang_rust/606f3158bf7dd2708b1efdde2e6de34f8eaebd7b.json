{"sha": "606f3158bf7dd2708b1efdde2e6de34f8eaebd7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNmYzMTU4YmY3ZGQyNzA4YjFlZmRkZTJlNmRlMzRmOGVhZWJkN2I=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-03-28T21:32:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-03-31T20:55:25Z"}, "message": "Optimize indentation in the pretty printer.\n\nCurrently the pretty-printer calls `write!` for every space of\nindentation. On some workloads the indentation level can exceed 100, and\na faster implementation reduces instruction counts by up to 7% on a few\nworkloads.", "tree": {"sha": "19d61e538bb17a42f2a5a45ad54ade119976f0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d61e538bb17a42f2a5a45ad54ade119976f0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b", "html_url": "https://github.com/rust-lang/rust/commit/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c27fb19ba15a2e45485e601a79914c6280196b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27fb19ba15a2e45485e601a79914c6280196b0", "html_url": "https://github.com/rust-lang/rust/commit/4c27fb19ba15a2e45485e601a79914c6280196b0"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "45eb6995a769957a84c66dbba9fa3c3634783a21", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606f3158bf7dd2708b1efdde2e6de34f8eaebd7b/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=606f3158bf7dd2708b1efdde2e6de34f8eaebd7b", "patch": "@@ -300,6 +300,8 @@ impl Default for BufEntry {\n     }\n }\n \n+const SPACES: [u8; 128] = [b' '; 128];\n+\n impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n@@ -580,10 +582,24 @@ impl<'a> Printer<'a> {\n         debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n-        while self.pending_indentation > 0 {\n-            write!(self.out, \" \")?;\n-            self.pending_indentation -= 1;\n+\n+        // Write the pending indent. A more concise way of doing this would be:\n+        //\n+        //   write!(self.out, \"{: >n$}\", \"\", n = self.pending_indentation as usize)?;\n+        //\n+        // But that is significantly slower than using `SPACES`. This code is\n+        // sufficiently hot, and indents can get sufficiently large, that the\n+        // difference is significant on some workloads.\n+        let spaces_len = SPACES.len() as isize;\n+        while self.pending_indentation >= spaces_len {\n+            self.out.write_all(&SPACES)?;\n+            self.pending_indentation -= spaces_len;\n         }\n+        if self.pending_indentation > 0 {\n+            self.out.write_all(&SPACES[0..self.pending_indentation as usize])?;\n+            self.pending_indentation = 0;\n+        }\n+\n         write!(self.out, \"{}\", s)\n     }\n "}]}