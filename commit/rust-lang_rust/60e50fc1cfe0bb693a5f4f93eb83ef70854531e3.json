{"sha": "60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "node_id": "C_kwDOAAsO6NoAKDYwZTUwZmMxY2ZlMGJiNjkzYTVmNGY5M2ViODNlZjcwODU0NTMxZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T19:51:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-04T19:51:52Z"}, "message": "Auto merge of #95653 - Dylan-DPC:rollup-2p9hzi3, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #92942 (stabilize windows_process_extensions_raw_arg)\n - #94817 (Release notes for 1.60.0)\n - #95343 (Reduce unnecessary escaping in proc_macro::Literal::character/string)\n - #95431 (Stabilize total_cmp)\n - #95438 (Add SyncUnsafeCell.)\n - #95467 (Windows: Synchronize asynchronous pipe reads and writes)\n - #95609 (Suggest borrowing when trying to coerce unsized type into `dyn Trait`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "12ff676ece8a495b1c327d875d999f96ac738e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ff676ece8a495b1c327d875d999f96ac738e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "html_url": "https://github.com/rust-lang/rust/commit/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9080b25e73d26aae94c3f6a13b31de58e66b5a", "html_url": "https://github.com/rust-lang/rust/commit/6a9080b25e73d26aae94c3f6a13b31de58e66b5a"}, {"sha": "0c5f8792037e860351ddb7c5cd9e6761d2bba704", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5f8792037e860351ddb7c5cd9e6761d2bba704", "html_url": "https://github.com/rust-lang/rust/commit/0c5f8792037e860351ddb7c5cd9e6761d2bba704"}], "stats": {"total": 522, "additions": 499, "deletions": 23}, "files": [{"sha": "0965e37574d074fda69042077ab01df5166b891a", "filename": "RELEASES.md", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -1,3 +1,158 @@\n+Version 1.60.0 (2022-04-07)\n+==========================\n+\n+Language\n+--------\n+- [Stabilize `#[cfg(panic = \"...\")]` for either `\"unwind\"` or `\"abort\"`.][93658]\n+- [Stabilize `#[cfg(target_has_atomic = \"...\")]` for each integer size and `\"ptr\"`.][93824]\n+\n+Compiler\n+--------\n+- [Enable combining `+crt-static` and `relocation-model=pic` on `x86_64-unknown-linux-gnu`][86374]\n+- [Fixes wrong `unreachable_pub` lints on nested and glob public reexport][87487]\n+- [Stabilize `-Z instrument-coverage` as `-C instrument-coverage`][90132]\n+- [Stabilize `-Z print-link-args` as `--print link-args`][91606]\n+- [Add new Tier 3 target `mips64-openwrt-linux-musl`\\*][92300]\n+- [Add new Tier 3 target `armv7-unknown-linux-uclibceabi` (softfloat)\\*][92383]\n+- [Fix invalid removal of newlines from doc comments][92357]\n+- [Add kernel target for RustyHermit][92670]\n+- [Deny mixing bin crate type with lib crate types][92933]\n+- [Make rustc use `RUST_BACKTRACE=full` by default][93566]\n+- [Upgrade to LLVM 14][93577]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [Guarantee call order for `sort_by_cached_key`][89621]\n+- [Improve `Duration::try_from_secs_f32`/`f64` accuracy by directly processing exponent and mantissa][90247]\n+- [Make `Instant::{duration_since, elapsed, sub}` saturating][89926]\n+- [Remove non-monotonic clocks workarounds in `Instant::now`][89926]\n+- [Make `BuildHasherDefault`, `iter::Empty` and `future::Pending` covariant][92630]\n+\n+Stabilized APIs\n+---------------\n+- [`Arc::new_cyclic`][arc_new_cyclic]\n+- [`Rc::new_cyclic`][rc_new_cyclic]\n+- [`slice::EscapeAscii`][slice_escape_ascii]\n+- [`<[u8]>::escape_ascii`][slice_u8_escape_ascii]\n+- [`u8::escape_ascii`][u8_escape_ascii]\n+- [`Vec::spare_capacity_mut`][vec_spare_capacity_mut]\n+- [`MaybeUninit::assume_init_drop`][assume_init_drop]\n+- [`MaybeUninit::assume_init_read`][assume_init_read]\n+- [`i8::abs_diff`][i8_abs_diff]\n+- [`i16::abs_diff`][i16_abs_diff]\n+- [`i32::abs_diff`][i32_abs_diff]\n+- [`i64::abs_diff`][i64_abs_diff]\n+- [`i128::abs_diff`][i128_abs_diff]\n+- [`isize::abs_diff`][isize_abs_diff]\n+- [`u8::abs_diff`][u8_abs_diff]\n+- [`u16::abs_diff`][u16_abs_diff]\n+- [`u32::abs_diff`][u32_abs_diff]\n+- [`u64::abs_diff`][u64_abs_diff]\n+- [`u128::abs_diff`][u128_abs_diff]\n+- [`usize::abs_diff`][usize_abs_diff]\n+- [`Display for io::ErrorKind`][display_error_kind]\n+- [`From<u8> for ExitCode`][from_u8_exit_code]\n+- [`Not for !` (the \"never\" type)][not_never]\n+- [_Op_`Assign<$t> for Wrapping<$t>`][wrapping_assign_ops]\n+- [`arch::is_aarch64_feature_detected!`][is_aarch64_feature_detected]\n+\n+Cargo\n+-----\n+- [Port cargo from `toml-rs` to `toml_edit`][cargo/10086]\n+- [Stabilize `-Ztimings` as `--timings`][cargo/10245]\n+- [Stabilize namespaced and weak dependency features.][cargo/10269]\n+- [Accept more `cargo:rustc-link-arg-*` types from build script output.][cargo/10274]\n+- [cargo-new should not add ignore rule on Cargo.lock inside subdirs][cargo/10379]\n+\n+Misc\n+----\n+- [Ship docs on Tier 2 platforms by reusing the closest Tier 1 platform docs][92800]\n+- [Drop rustc-docs from complete profile][93742]\n+- [bootstrap: tidy up flag handling for llvm build][93918]\n+\n+Compatibility Notes\n+-------------------\n+- [Remove compiler-rt linking hack on Android][83822]\n+- [Mitigations for platforms with non-monotonic clocks have been removed from\n+  `Instant::now`][89926]. On platforms that don't provide monotonic clocks, an\n+  instant is not guaranteed to be greater than an earlier instant anymore.\n+- [`Instant::{duration_since, elapsed, sub}` do not panic anymore on underflow,\n+  saturating to `0` instead][89926]. In the real world the panic happened mostly\n+  on platforms with buggy monotonic clock implementations rather than catching\n+  programming errors like reversing the start and end times. Such programming\n+  errors will now results in `0` rather than a panic.\n+- In a future release we're planning to increase the baseline requirements for\n+  the Linux kernel to version 3.2, and for glibc to version 2.17. We'd love\n+  your feedback in [PR #95026][95026].\n+\n+Internal Changes\n+----------------\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [Switch all libraries to the 2021 edition][92068]\n+\n+[83822]: https://github.com/rust-lang/rust/pull/83822\n+[86374]: https://github.com/rust-lang/rust/pull/86374\n+[87487]: https://github.com/rust-lang/rust/pull/87487\n+[89621]: https://github.com/rust-lang/rust/pull/89621\n+[89926]: https://github.com/rust-lang/rust/pull/89926\n+[90132]: https://github.com/rust-lang/rust/pull/90132\n+[90247]: https://github.com/rust-lang/rust/pull/90247\n+[91606]: https://github.com/rust-lang/rust/pull/91606\n+[92068]: https://github.com/rust-lang/rust/pull/92068\n+[92300]: https://github.com/rust-lang/rust/pull/92300\n+[92357]: https://github.com/rust-lang/rust/pull/92357\n+[92383]: https://github.com/rust-lang/rust/pull/92383\n+[92630]: https://github.com/rust-lang/rust/pull/92630\n+[92670]: https://github.com/rust-lang/rust/pull/92670\n+[92800]: https://github.com/rust-lang/rust/pull/92800\n+[92933]: https://github.com/rust-lang/rust/pull/92933\n+[93566]: https://github.com/rust-lang/rust/pull/93566\n+[93577]: https://github.com/rust-lang/rust/pull/93577\n+[93658]: https://github.com/rust-lang/rust/pull/93658\n+[93742]: https://github.com/rust-lang/rust/pull/93742\n+[93824]: https://github.com/rust-lang/rust/pull/93824\n+[93918]: https://github.com/rust-lang/rust/pull/93918\n+[95026]: https://github.com/rust-lang/rust/pull/95026\n+\n+[cargo/10086]: https://github.com/rust-lang/cargo/pull/10086\n+[cargo/10245]: https://github.com/rust-lang/cargo/pull/10245\n+[cargo/10269]: https://github.com/rust-lang/cargo/pull/10269\n+[cargo/10274]: https://github.com/rust-lang/cargo/pull/10274\n+[cargo/10379]: https://github.com/rust-lang/cargo/pull/10379\n+\n+[arc_new_cyclic]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.new_cyclic\n+[rc_new_cyclic]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.new_cyclic\n+[slice_escape_ascii]: https://doc.rust-lang.org/stable/std/slice/struct.EscapeAscii.html\n+[slice_u8_escape_ascii]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.escape_ascii\n+[u8_escape_ascii]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.escape_ascii\n+[vec_spare_capacity_mut]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.spare_capacity_mut\n+[assume_init_drop]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_drop\n+[assume_init_read]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_read\n+[i8_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i8.html#method.abs_diff\n+[i16_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i16.html#method.abs_diff\n+[i32_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i32.html#method.abs_diff\n+[i64_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i64.html#method.abs_diff\n+[i128_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.i128.html#method.abs_diff\n+[isize_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.isize.html#method.abs_diff\n+[u8_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u8.html#method.abs_diff\n+[u16_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u16.html#method.abs_diff\n+[u32_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u32.html#method.abs_diff\n+[u64_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.abs_diff\n+[u128_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.u128.html#method.abs_diff\n+[usize_abs_diff]: https://doc.rust-lang.org/stable/std/primitive.usize.html#method.abs_diff\n+[display_error_kind]: https://doc.rust-lang.org/stable/std/io/enum.ErrorKind.html#impl-Display\n+[from_u8_exit_code]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html#impl-From%3Cu8%3E\n+[not_never]: https://doc.rust-lang.org/stable/std/primitive.never.html#impl-Not\n+[wrapping_assign_ops]: https://doc.rust-lang.org/stable/std/num/struct.Wrapping.html#trait-implementations\n+[is_aarch64_feature_detected]: https://doc.rust-lang.org/stable/std/arch/macro.is_aarch64_feature_detected.html\n+\n Version 1.59.0 (2022-02-24)\n ==========================\n "}, {"sha": "20351070f71b91e8c372fb59579064fafdfdcf98", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -658,16 +658,16 @@ impl server::Literal for Rustc<'_, '_> {\n         self.lit(token::Float, Symbol::intern(n), Some(sym::f64))\n     }\n     fn string(&mut self, string: &str) -> Self::Literal {\n-        let mut escaped = String::new();\n-        for ch in string.chars() {\n-            escaped.extend(ch.escape_debug());\n-        }\n-        self.lit(token::Str, Symbol::intern(&escaped), None)\n+        let quoted = format!(\"{:?}\", string);\n+        assert!(quoted.starts_with('\"') && quoted.ends_with('\"'));\n+        let symbol = &quoted[1..quoted.len() - 1];\n+        self.lit(token::Str, Symbol::intern(symbol), None)\n     }\n     fn character(&mut self, ch: char) -> Self::Literal {\n-        let mut escaped = String::new();\n-        escaped.extend(ch.escape_unicode());\n-        self.lit(token::Char, Symbol::intern(&escaped), None)\n+        let quoted = format!(\"{:?}\", ch);\n+        assert!(quoted.starts_with('\\'') && quoted.ends_with('\\''));\n+        let symbol = &quoted[1..quoted.len() - 1];\n+        self.lit(token::Char, Symbol::intern(symbol), None)\n     }\n     fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {\n         let string = bytes"}, {"sha": "0a22c025209396e07bcc883ed912616ba82c747e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -474,6 +474,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n+                        if let ObligationCauseCode::ObjectCastObligation(obj_ty) = obligation.cause.code().peel_derives() &&\n+                           let Some(self_ty) = trait_predicate.self_ty().no_bound_vars() &&\n+                           Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n+                            self.suggest_borrowing_for_object_cast(&mut err, &obligation, self_ty, *obj_ty);\n+                        }\n+\n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n                             let non_const_predicate = trait_ref.without_const();\n                             let non_const_obligation = Obligation {"}, {"sha": "105e3380486800ad0dffbecebcf3640bb31a277c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -77,6 +77,14 @@ pub trait InferCtxtExt<'tcx> {\n         has_custom_message: bool,\n     ) -> bool;\n \n+    fn suggest_borrowing_for_object_cast(\n+        &self,\n+        err: &mut Diagnostic,\n+        obligation: &PredicateObligation<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        object_ty: Ty<'tcx>,\n+    );\n+\n     fn suggest_remove_reference(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -801,6 +809,35 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    // Suggest borrowing the type\n+    fn suggest_borrowing_for_object_cast(\n+        &self,\n+        err: &mut Diagnostic,\n+        obligation: &PredicateObligation<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        object_ty: Ty<'tcx>,\n+    ) {\n+        let ty::Dynamic(predicates, _) = object_ty.kind() else { return; };\n+        let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n+\n+        for predicate in predicates.iter() {\n+            if !self.predicate_must_hold_modulo_regions(\n+                &obligation.with(predicate.with_self_ty(self.tcx, self_ref_ty)),\n+            ) {\n+                return;\n+            }\n+        }\n+\n+        err.span_suggestion(\n+            obligation.cause.span.shrink_to_lo(),\n+            &format!(\n+                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n+            ),\n+            \"&\".to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n     fn suggest_remove_reference("}, {"sha": "2a49017de3cc87d4ef64c138adc361df3981377b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 100, "deletions": 3, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -1990,9 +1990,106 @@ impl<T> const From<T> for UnsafeCell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n+/// [`UnsafeCell`], but [`Sync`].\n+///\n+/// This is just an `UnsafeCell`, except it implements `Sync`\n+/// if `T` implements `Sync`.\n+///\n+/// `UnsafeCell` doesn't implement `Sync`, to prevent accidental mis-use.\n+/// You can use `SyncUnsafeCell` instead of `UnsafeCell` to allow it to be\n+/// shared between threads, if that's intentional.\n+/// Providing proper synchronization is still the task of the user,\n+/// making this type just as unsafe to use.\n+///\n+/// See [`UnsafeCell`] for details.\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+#[repr(transparent)]\n+pub struct SyncUnsafeCell<T: ?Sized> {\n+    value: UnsafeCell<T>,\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+unsafe impl<T: ?Sized + Sync> Sync for SyncUnsafeCell<T> {}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T> SyncUnsafeCell<T> {\n+    /// Constructs a new instance of `SyncUnsafeCell` which will wrap the specified value.\n+    #[inline]\n+    pub const fn new(value: T) -> Self {\n+        Self { value: UnsafeCell { value } }\n+    }\n+\n+    /// Unwraps the value.\n+    #[inline]\n+    pub const fn into_inner(self) -> T {\n+        self.value.into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: ?Sized> SyncUnsafeCell<T> {\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n+    #[inline]\n+    pub const fn get(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows the `SyncUnsafeCell` mutably (at compile-time) which\n+    /// guarantees that we possess the only reference.\n+    #[inline]\n+    pub const fn get_mut(&mut self) -> &mut T {\n+        self.value.get_mut()\n+    }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// See [`UnsafeCell::get`] for details.\n+    #[inline]\n+    pub const fn raw_get(this: *const Self) -> *mut T {\n+        // We can just cast the pointer from `SyncUnsafeCell<T>` to `T` because\n+        // of #[repr(transparent)] on both SyncUnsafeCell and UnsafeCell.\n+        // See UnsafeCell::raw_get.\n+        this as *const T as *mut T\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: Default> Default for SyncUnsafeCell<T> {\n+    /// Creates an `SyncUnsafeCell`, with the `Default` value for T.\n+    fn default() -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(Default::default())\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for SyncUnsafeCell<T> {\n+    /// Creates a new `SyncUnsafeCell<T>` containing the given value.\n+    fn from(t: T) -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(t)\n+    }\n+}\n+\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n+\n #[allow(unused)]\n-fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n+fn assert_coerce_unsized(\n+    a: UnsafeCell<&i32>,\n+    b: SyncUnsafeCell<&i32>,\n+    c: Cell<&i32>,\n+    d: RefCell<&i32>,\n+) {\n     let _: UnsafeCell<&dyn Send> = a;\n-    let _: Cell<&dyn Send> = b;\n-    let _: RefCell<&dyn Send> = c;\n+    let _: SyncUnsafeCell<&dyn Send> = b;\n+    let _: Cell<&dyn Send> = c;\n+    let _: RefCell<&dyn Send> = d;\n }"}, {"sha": "fac959ac7347d86ea3ca9ccc472d6275996bf0c1", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -2,7 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n+use crate::cell::{Cell, Ref, RefCell, RefMut, SyncUnsafeCell, UnsafeCell};\n use crate::char::EscapeDebugExtArgs;\n use crate::marker::PhantomData;\n use crate::mem;\n@@ -2400,6 +2400,13 @@ impl<T: ?Sized> Debug for UnsafeCell<T> {\n     }\n }\n \n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: ?Sized> Debug for SyncUnsafeCell<T> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+        f.debug_struct(\"SyncUnsafeCell\").finish_non_exhaustive()\n+    }\n+}\n+\n // If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n // it's a lot easier than creating all of the rt::Piece structures here.\n // There are also tests in the alloc crate, for those that need allocations."}, {"sha": "e13f50b0d7a53a594978a986f1af80255374a488", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -139,6 +139,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(const_unsafecell_get_mut)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "e56e602a662c175610cac01683d65a4cf1056280", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -1040,7 +1040,6 @@ impl f32 {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(total_cmp)]\n     /// struct GoodBoy {\n     ///     name: String,\n     ///     weight: f32,\n@@ -1060,7 +1059,7 @@ impl f32 {\n     /// #     .zip([-5.0, 0.1, 10.0, 99.0, f32::INFINITY, f32::NAN].iter())\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n-    #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[stable(feature = \"total_cmp\", since = \"1.62.0\")]\n     #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {"}, {"sha": "8304caf649cc2f30325a5e66746afc256e365cb6", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -1056,7 +1056,6 @@ impl f64 {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(total_cmp)]\n     /// struct GoodBoy {\n     ///     name: String,\n     ///     weight: f64,\n@@ -1076,7 +1075,7 @@ impl f64 {\n     /// #     .zip([-5.0, 0.1, 10.0, 99.0, f64::INFINITY, f64::NAN].iter())\n     /// #     .all(|(a, b)| a.to_bits() == b.to_bits()))\n     /// ```\n-    #[unstable(feature = \"total_cmp\", issue = \"72599\")]\n+    #[stable(feature = \"total_cmp\", since = \"1.62.0\")]\n     #[must_use]\n     #[inline]\n     pub fn total_cmp(&self, other: &Self) -> crate::cmp::Ordering {"}, {"sha": "1016fbc99d826657d3f36414616976fff9d781cd", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -285,7 +285,6 @@\n #![feature(std_internals)]\n #![feature(str_internals)]\n #![feature(strict_provenance)]\n-#![feature(total_cmp)]\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]"}, {"sha": "e189630991436c1994b03b3e94de05d8306e59db", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -159,7 +159,7 @@ pub trait CommandExt: Sealed {\n     ///\n     /// This is useful for passing arguments to `cmd.exe /c`, which doesn't follow\n     /// `CommandLineToArgvW` escaping rules.\n-    #[unstable(feature = \"windows_process_extensions_raw_arg\", issue = \"29494\")]\n+    #[stable(feature = \"windows_process_extensions_raw_arg\", since = \"1.62.0\")]\n     fn raw_arg<S: AsRef<OsStr>>(&mut self, text_to_append_as_is: S) -> &mut process::Command;\n }\n "}, {"sha": "0ecc2a5cfdad51776d71f65e8ed2c9623248b2f8", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -326,6 +326,12 @@ impl Default for IO_STATUS_BLOCK {\n     }\n }\n \n+pub type LPOVERLAPPED_COMPLETION_ROUTINE = unsafe extern \"system\" fn(\n+    dwErrorCode: DWORD,\n+    dwNumberOfBytesTransfered: DWORD,\n+    lpOverlapped: *mut OVERLAPPED,\n+);\n+\n #[repr(C)]\n #[cfg(not(target_pointer_width = \"64\"))]\n pub struct WSADATA {\n@@ -891,6 +897,7 @@ extern \"system\" {\n     pub fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n     pub fn SwitchToThread() -> BOOL;\n     pub fn Sleep(dwMilliseconds: DWORD);\n+    pub fn SleepEx(dwMilliseconds: DWORD, bAlertable: BOOL) -> DWORD;\n     pub fn GetProcessId(handle: HANDLE) -> DWORD;\n     pub fn CopyFileExW(\n         lpExistingFileName: LPCWSTR,\n@@ -957,13 +964,27 @@ extern \"system\" {\n         lpNumberOfBytesRead: LPDWORD,\n         lpOverlapped: LPOVERLAPPED,\n     ) -> BOOL;\n+    pub fn ReadFileEx(\n+        hFile: BorrowedHandle<'_>,\n+        lpBuffer: LPVOID,\n+        nNumberOfBytesToRead: DWORD,\n+        lpOverlapped: LPOVERLAPPED,\n+        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,\n+    ) -> BOOL;\n     pub fn WriteFile(\n         hFile: BorrowedHandle<'_>,\n         lpBuffer: LPVOID,\n         nNumberOfBytesToWrite: DWORD,\n         lpNumberOfBytesWritten: LPDWORD,\n         lpOverlapped: LPOVERLAPPED,\n     ) -> BOOL;\n+    pub fn WriteFileEx(\n+        hFile: BorrowedHandle<'_>,\n+        lpBuffer: LPVOID,\n+        nNumberOfBytesToWrite: DWORD,\n+        lpOverlapped: LPOVERLAPPED,\n+        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,\n+    ) -> BOOL;\n     pub fn CloseHandle(hObject: HANDLE) -> BOOL;\n     pub fn MoveFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD)\n     -> BOOL;"}, {"sha": "df4f1b24eec261d3213b1e35d9b50d20999ec745", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -173,6 +173,15 @@ fn random_number() -> usize {\n     }\n }\n \n+// Abstracts over `ReadFileEx` and `WriteFileEx`\n+type AlertableIoFn = unsafe extern \"system\" fn(\n+    BorrowedHandle<'_>,\n+    c::LPVOID,\n+    c::DWORD,\n+    c::LPOVERLAPPED,\n+    c::LPOVERLAPPED_COMPLETION_ROUTINE,\n+) -> c::BOOL;\n+\n impl AnonPipe {\n     pub fn handle(&self) -> &Handle {\n         &self.inner\n@@ -182,7 +191,19 @@ impl AnonPipe {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.inner.read(buf)\n+        let result = unsafe {\n+            let len = crate::cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;\n+            self.alertable_io_internal(c::ReadFileEx, buf.as_mut_ptr() as _, len)\n+        };\n+\n+        match result {\n+            // The special treatment of BrokenPipe is to deal with Windows\n+            // pipe semantics, which yields this error when *reading* from\n+            // a pipe after the other end has closed; we interpret that as\n+            // EOF on the pipe.\n+            Err(ref e) if e.kind() == io::ErrorKind::BrokenPipe => Ok(0),\n+            _ => result,\n+        }\n     }\n \n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n@@ -195,7 +216,10 @@ impl AnonPipe {\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n-        self.inner.write(buf)\n+        unsafe {\n+            let len = crate::cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;\n+            self.alertable_io_internal(c::WriteFileEx, buf.as_ptr() as _, len)\n+        }\n     }\n \n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n@@ -206,6 +230,99 @@ impl AnonPipe {\n     pub fn is_write_vectored(&self) -> bool {\n         self.inner.is_write_vectored()\n     }\n+\n+    /// Synchronizes asynchronous reads or writes using our anonymous pipe.\n+    ///\n+    /// This is a wrapper around [`ReadFileEx`] or [`WriteFileEx`] that uses\n+    /// [Asynchronous Procedure Call] (APC) to synchronize reads or writes.\n+    ///\n+    /// Note: This should not be used for handles we don't create.\n+    ///\n+    /// # Safety\n+    ///\n+    /// `buf` must be a pointer to a buffer that's valid for reads or writes\n+    /// up to `len` bytes. The `AlertableIoFn` must be either `ReadFileEx` or `WriteFileEx`\n+    ///\n+    /// [`ReadFileEx`]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-readfileex\n+    /// [`WriteFileEx`]: https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-writefileex\n+    /// [Asynchronous Procedure Call]: https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls\n+    unsafe fn alertable_io_internal(\n+        &self,\n+        io: AlertableIoFn,\n+        buf: c::LPVOID,\n+        len: c::DWORD,\n+    ) -> io::Result<usize> {\n+        // Use \"alertable I/O\" to synchronize the pipe I/O.\n+        // This has four steps.\n+        //\n+        // STEP 1: Start the asynchronous I/O operation.\n+        //         This simply calls either `ReadFileEx` or `WriteFileEx`,\n+        //         giving it a pointer to the buffer and callback function.\n+        //\n+        // STEP 2: Enter an alertable state.\n+        //         The callback set in step 1 will not be called until the thread\n+        //         enters an \"alertable\" state. This can be done using `SleepEx`.\n+        //\n+        // STEP 3: The callback\n+        //         Once the I/O is complete and the thread is in an alertable state,\n+        //         the callback will be run on the same thread as the call to\n+        //         `ReadFileEx` or `WriteFileEx` done in step 1.\n+        //         In the callback we simply set the result of the async operation.\n+        //\n+        // STEP 4: Return the result.\n+        //         At this point we'll have a result from the callback function\n+        //         and can simply return it. Note that we must not return earlier,\n+        //         while the I/O is still in progress.\n+\n+        // The result that will be set from the asynchronous callback.\n+        let mut async_result: Option<AsyncResult> = None;\n+        struct AsyncResult {\n+            error: u32,\n+            transfered: u32,\n+        }\n+\n+        // STEP 3: The callback.\n+        unsafe extern \"system\" fn callback(\n+            dwErrorCode: u32,\n+            dwNumberOfBytesTransfered: u32,\n+            lpOverlapped: *mut c::OVERLAPPED,\n+        ) {\n+            // Set `async_result` using a pointer smuggled through `hEvent`.\n+            let result = AsyncResult { error: dwErrorCode, transfered: dwNumberOfBytesTransfered };\n+            *(*lpOverlapped).hEvent.cast::<Option<AsyncResult>>() = Some(result);\n+        }\n+\n+        // STEP 1: Start the I/O operation.\n+        let mut overlapped: c::OVERLAPPED = crate::mem::zeroed();\n+        // `hEvent` is unused by `ReadFileEx` and `WriteFileEx`.\n+        // Therefore the documentation suggests using it to smuggle a pointer to the callback.\n+        overlapped.hEvent = &mut async_result as *mut _ as *mut _;\n+\n+        // Asynchronous read of the pipe.\n+        // If successful, `callback` will be called once it completes.\n+        let result = io(self.inner.as_handle(), buf, len, &mut overlapped, callback);\n+        if result == c::FALSE {\n+            // We can return here because the call failed.\n+            // After this we must not return until the I/O completes.\n+            return Err(io::Error::last_os_error());\n+        }\n+\n+        // Wait indefinitely for the result.\n+        let result = loop {\n+            // STEP 2: Enter an alertable state.\n+            // The second parameter of `SleepEx` is used to make this sleep alertable.\n+            c::SleepEx(c::INFINITE, c::TRUE);\n+            if let Some(result) = async_result {\n+                break result;\n+            }\n+        };\n+        // STEP 4: Return the result.\n+        // `async_result` is always `Some` at this point\n+        match result.error {\n+            c::ERROR_SUCCESS => Ok(result.transfered as usize),\n+            error => Err(io::Error::from_raw_os_error(error as _)),\n+        }\n+    }\n }\n \n pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()> {"}, {"sha": "0c748da1a59cc85971b125093cd9841973829926", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -21,7 +21,6 @@\n #![feature(staged_api)]\n #![feature(process_exitcode_internals)]\n #![feature(test)]\n-#![feature(total_cmp)]\n \n // Public reexports\n pub use self::bench::{black_box, Bencher};"}, {"sha": "b96b07c91a1feb9630824f6086f6b0958cfb5ac2", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -6,6 +6,10 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn Any`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n+   |\n+LL |     let _x = &\"test\" as &dyn (::std::any::Any);\n+   |              +\n \n error: aborting due to previous error\n "}, {"sha": "84220ea172a11547c5c54cdc3ab99523b67d4e7d", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -224,6 +224,10 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n+   |\n+LL |     let _ = &fat_v as *const dyn Foo;\n+   |             +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:62:13\n@@ -233,6 +237,10 @@ LL |     let _ = a as *const dyn Foo;\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n+   |\n+LL |     let _ = &a as *const dyn Foo;\n+   |             +\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30"}, {"sha": "27391f8311176cdb17fdac88f274734228a87a2a", "filename": "src/test/ui/proc-macro/auxiliary/api/parse.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fapi%2Fparse.rs?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -18,6 +18,17 @@ fn test_display_literal() {\n         Literal::f64_unsuffixed(1e100).to_string(),\n         \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0\",\n     );\n+\n+    assert_eq!(\n+        Literal::string(\"a \\t \u2764 ' \\\" \\u{1}\").to_string(),\n+        \"\\\"a \\\\t \u2764 ' \\\\\\\" \\\\u{1}\\\"\",\n+    );\n+    assert_eq!(Literal::character('a').to_string(), \"'a'\");\n+    assert_eq!(Literal::character('\\t').to_string(), \"'\\\\t'\");\n+    assert_eq!(Literal::character('\u2764').to_string(), \"'\u2764'\");\n+    assert_eq!(Literal::character('\\'').to_string(), \"'\\\\''\");\n+    assert_eq!(Literal::character('\"').to_string(), \"'\\\"'\");\n+    assert_eq!(Literal::character('\\u{1}').to_string(), \"'\\\\u{1}'\");\n }\n \n fn test_parse_literal() {"}, {"sha": "d2cc5c6e2a3f7dcdae9a3fd4adc6a7591c13594a", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -22,7 +22,7 @@ fn main() {\n                                     crate::Span::recover_proc_macro_span(0)))),\n                         crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n                                     crate::Span::recover_proc_macro_span(1)))),\n-                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('=',\n                                     crate::Spacing::Alone))),\n                         crate::TokenStream::from(crate::TokenTree::Literal({\n                                     let mut iter =\n@@ -35,7 +35,7 @@ fn main() {\n                                            ::core::panicking::panic(\"internal error: entered unreachable code\")\n                                        }\n                                 })),\n-                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new(';',\n                                     crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n }\n const _: () ="}, {"sha": "3eecca0fa09d9c7483dcc3f8af69b4db6568762d", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "patch": "@@ -6,6 +6,10 @@ LL |     foo11(\"bar\", &\"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     foo11(&\"bar\", &\"baz\");\n+   |           +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:13:19\n@@ -15,6 +19,10 @@ LL |     foo12(&\"bar\", \"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     foo12(&\"bar\", &\"baz\");\n+   |                   +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:16:11\n@@ -24,6 +32,10 @@ LL |     foo21(\"bar\", &\"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   |\n+LL |     foo21(&\"bar\", &\"baz\");\n+   |           +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:18:19\n@@ -33,6 +45,10 @@ LL |     foo22(&\"bar\", \"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   |\n+LL |     foo22(&\"bar\", &\"baz\");\n+   |                   +\n \n error: aborting due to 4 previous errors\n "}]}