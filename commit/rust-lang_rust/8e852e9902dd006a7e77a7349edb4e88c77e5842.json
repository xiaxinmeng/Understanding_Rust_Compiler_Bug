{"sha": "8e852e9902dd006a7e77a7349edb4e88c77e5842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODUyZTk5MDJkZDAwNmE3ZTc3YTczNDllZGI0ZTg4Yzc3ZTU4NDI=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-20T19:38:25Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:20Z"}, "message": "Struct::new takes a vec, avoiding double allocation in some cases", "tree": {"sha": "18b4a75b2d978c1a50618e11d8077a1925d273d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b4a75b2d978c1a50618e11d8077a1925d273d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e852e9902dd006a7e77a7349edb4e88c77e5842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e852e9902dd006a7e77a7349edb4e88c77e5842", "html_url": "https://github.com/rust-lang/rust/commit/8e852e9902dd006a7e77a7349edb4e88c77e5842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e852e9902dd006a7e77a7349edb4e88c77e5842/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e61c0e231ccd1db200917c1adff35a0128dffe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e61c0e231ccd1db200917c1adff35a0128dffe8", "html_url": "https://github.com/rust-lang/rust/commit/0e61c0e231ccd1db200917c1adff35a0128dffe8"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "bcbafc8a28a5ed73817826ab2a1aacb5220fcb71", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8e852e9902dd006a7e77a7349edb4e88c77e5842/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e852e9902dd006a7e77a7349edb4e88c77e5842/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8e852e9902dd006a7e77a7349edb4e88c77e5842", "patch": "@@ -525,10 +525,9 @@ pub struct Struct {\n }\n \n impl<'a, 'gcx, 'tcx> Struct {\n-    pub fn new<I>(dl: &TargetDataLayout, fields: I,\n+    pub fn new(dl: &TargetDataLayout, fields: &Vec<&'a Layout>,\n                   repr: attr::ReprAttr, is_enum_variant: bool,\n-                  scapegoat: Ty<'gcx>) -> Result<Struct, LayoutError<'gcx>>\n-        where I: Iterator<Item=Result<&'a Layout, LayoutError<'gcx>>>{\n+                  scapegoat: Ty<'gcx>) -> Result<Struct, LayoutError<'gcx>> {\n         let packed = repr == attr::ReprPacked;\n         let mut ret = Struct {\n             align: if packed { dl.i8_align } else { dl.aggregate_align },\n@@ -539,7 +538,6 @@ impl<'a, 'gcx, 'tcx> Struct {\n             min_size: Size::from_bytes(0),\n         };\n \n-        let fields = fields.collect::<Result<Vec<_>, LayoutError<'gcx>>>()?;\n         if is_enum_variant { assert!(fields.len() >= 1, \"Enum variants must have at least a discriminant field.\") }\n         if fields.len() == 0 {return Ok(ret)};\n \n@@ -978,7 +976,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n             ty::TyFnPtr(_) => Scalar { value: Pointer, non_zero: true },\n \n             // The never type.\n-            ty::TyNever => Univariant { variant: Struct::new(dl, iter::empty(), attr::ReprAny, false, ty)?, non_zero: false },\n+            ty::TyNever => Univariant { variant: Struct::new(dl, &vec![], attr::ReprAny, false, ty)?, non_zero: false },\n \n             // Potentially-fat pointers.\n             ty::TyBox(pointee) |\n@@ -1029,12 +1027,12 @@ impl<'a, 'gcx, 'tcx> Layout {\n             // Odd unit types.\n             ty::TyFnDef(..) => {\n                 Univariant {\n-                    variant: Struct::new(dl, iter::empty(), attr::ReprAny, false, ty)?,\n+                    variant: Struct::new(dl, &vec![], attr::ReprAny, false, ty)?,\n                     non_zero: false\n                 }\n             }\n             ty::TyDynamic(_) => {\n-                let mut unit = Struct::new(dl, iter::empty(), attr::ReprAny, false, ty)?;\n+                let mut unit = Struct::new(dl, &vec![], attr::ReprAny, false, ty)?;\n                 unit.sized = false;\n                 Univariant { variant: unit, non_zero: false }\n             }\n@@ -1043,15 +1041,17 @@ impl<'a, 'gcx, 'tcx> Layout {\n             ty::TyClosure(def_id, ref substs) => {\n                 let tys = substs.upvar_tys(def_id, tcx);\n                 let st = Struct::new(dl,\n-                    tys.map(|ty| ty.layout(infcx)),\n+                    &tys.map(|ty| ty.layout(infcx))\n+                      .collect::<Result<Vec<_>, _>>()?,\n                     attr::ReprAny,\n                     false, ty)?;\n                 Univariant { variant: st, non_zero: false }\n             }\n \n             ty::TyTuple(tys) => {\n                 let st = Struct::new(dl,\n-                    tys.iter().map(|ty| ty.layout(infcx)),\n+                    &tys.iter().map(|ty| ty.layout(infcx))\n+                      .collect::<Result<Vec<_>, _>>()?,\n                     attr::ReprAny, false, ty)?;\n                 Univariant { variant: st, non_zero: false }\n             }\n@@ -1085,7 +1085,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     assert_eq!(hint, attr::ReprAny);\n \n                     return success(Univariant {\n-                        variant: Struct::new(dl, iter::empty(), hint, false, ty)?,\n+                        variant: Struct::new(dl, &vec![], hint, false, ty)?,\n                         non_zero: false\n                     });\n                 }\n@@ -1116,14 +1116,14 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n                     let fields = def.variants[0].fields.iter().map(|field| {\n                         field.ty(tcx, substs).layout(infcx)\n-                    });\n+                    }).collect::<Result<Vec<_>, _>>()?;\n                     let packed = tcx.lookup_packed(def.did);\n                     let layout = if def.is_union() {\n                         let mut un = Union::new(dl, packed);\n-                        un.extend(dl, fields, ty)?;\n+                        un.extend(dl, fields.iter().map(|&f| Ok(f)), ty)?;\n                         UntaggedUnion { variants: un }\n                     } else {\n-                        let st = Struct::new(dl, fields, hint, false, ty)?;\n+                        let st = Struct::new(dl, &fields, hint, false, ty)?;\n                         let non_zero = Some(def.did) == tcx.lang_items.non_zero();\n                         Univariant { variant: st, non_zero: non_zero }\n                     };\n@@ -1175,7 +1175,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n                         }\n \n                         let st = Struct::new(dl,\n-                            variants[discr].iter().map(|ty| ty.layout(infcx)),\n+                            &variants[discr].iter().map(|ty| ty.layout(infcx))\n+                              .collect::<Result<Vec<_>, _>>()?,\n                             hint, false, ty)?;\n \n                         // We have to fix the last element of path here as only we know the right value.\n@@ -1210,16 +1211,16 @@ impl<'a, 'gcx, 'tcx> Layout {\n                 let mut variants = variants.into_iter().map(|fields| {\n                     let mut fields = fields.into_iter().map(|field| {\n                         field.layout(infcx)\n-                    }).collect::<Vec<_>>();\n-                    fields.insert(0, Ok(&discr));\n+                    }).collect::<Result<Vec<_>, _>>()?;\n+                    fields.insert(0, &discr);\n                     let st = Struct::new(dl,\n-                        fields.iter().cloned(),\n+                        &fields,\n                         hint, false, ty)?;\n                     // Find the first field we can't move later\n                     // to make room for a larger discriminant.\n                     // It is important to skip the first field.\n                     for i in st.field_index_by_increasing_offset().skip(1) {\n-                        let field = fields[i].unwrap();\n+                        let field = fields[i];\n                         let field_align = field.align(dl);\n                         if field.size(dl).bytes() != 0 || field_align.abi() != 1 {\n                             start_align = start_align.min(field_align);"}]}