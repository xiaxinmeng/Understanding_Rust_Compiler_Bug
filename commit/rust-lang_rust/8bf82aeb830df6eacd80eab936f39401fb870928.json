{"sha": "8bf82aeb830df6eacd80eab936f39401fb870928", "node_id": "C_kwDOAAsO6NoAKDhiZjgyYWViODMwZGY2ZWFjZDgwZWFiOTM2ZjM5NDAxZmI4NzA5Mjg", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-19T21:22:45Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-12-19T21:22:45Z"}, "message": "Merge remote-tracking branch 'upstream/master' into subtree-sync-2021-12-19", "tree": {"sha": "3478f1b9aa86c1215ec0b30e1443d6635cb98863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3478f1b9aa86c1215ec0b30e1443d6635cb98863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bf82aeb830df6eacd80eab936f39401fb870928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bf82aeb830df6eacd80eab936f39401fb870928", "html_url": "https://github.com/rust-lang/rust/commit/8bf82aeb830df6eacd80eab936f39401fb870928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bf82aeb830df6eacd80eab936f39401fb870928/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "122e1c3802afcaa803287b06127c499df63e2dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/122e1c3802afcaa803287b06127c499df63e2dab", "html_url": "https://github.com/rust-lang/rust/commit/122e1c3802afcaa803287b06127c499df63e2dab"}, {"sha": "57ac92bf1658a576fdc066b82a37aa3a7de2c96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ac92bf1658a576fdc066b82a37aa3a7de2c96b", "html_url": "https://github.com/rust-lang/rust/commit/57ac92bf1658a576fdc066b82a37aa3a7de2c96b"}], "stats": {"total": 207, "additions": 161, "deletions": 46}, "files": [{"sha": "4d845547cdfed179647f86dca9bd0e36c3740211", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let exit_code = match execute(&opts) {\n         Ok(code) => code,\n         Err(e) => {\n-            eprintln!(\"{}\", e.to_string());\n+            eprintln!(\"{}\", e);\n             1\n         }\n     };"}, {"sha": "edd004ac63f0b7fd234437a3230b7f1751ed2968", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -2003,9 +2003,7 @@ fn choose_rhs<R: Rewrite>(\n     has_rhs_comment: bool,\n ) -> Option<String> {\n     match orig_rhs {\n-        Some(ref new_str) if new_str.is_empty() => {\n-            return Some(String::new());\n-        }\n+        Some(ref new_str) if new_str.is_empty() => Some(String::new()),\n         Some(ref new_str)\n             if !new_str.contains('\\n') && unicode_str_width(new_str) <= shape.width =>\n         {"}, {"sha": "b39480a0ef908b74d6d55a80384a70e66bf3f292", "filename": "src/formatting.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -5,6 +5,7 @@ use std::io::{self, Write};\n use std::time::{Duration, Instant};\n \n use rustc_ast::ast;\n+use rustc_ast::AstLike;\n use rustc_span::Span;\n \n use self::newline_style::apply_newline_style;\n@@ -15,7 +16,7 @@ use crate::issues::BadIssueSeeker;\n use crate::modules::Module;\n use crate::syntux::parser::{DirectoryOwnership, Parser, ParserError};\n use crate::syntux::session::ParseSess;\n-use crate::utils::count_newlines;\n+use crate::utils::{contains_skip, count_newlines};\n use crate::visitor::FmtVisitor;\n use crate::{modules, source_file, ErrorKind, FormatReport, Input, Session};\n \n@@ -58,6 +59,39 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n     }\n }\n \n+/// Determine if a module should be skipped. True if the module should be skipped, false otherwise.\n+fn should_skip_module<T: FormatHandler>(\n+    config: &Config,\n+    context: &FormatContext<'_, T>,\n+    input_is_stdin: bool,\n+    main_file: &FileName,\n+    path: &FileName,\n+    module: &Module<'_>,\n+) -> bool {\n+    if contains_skip(module.attrs()) {\n+        return true;\n+    }\n+\n+    if config.skip_children() && path != main_file {\n+        return true;\n+    }\n+\n+    if !input_is_stdin && context.ignore_file(path) {\n+        return true;\n+    }\n+\n+    if !config.format_generated_files() {\n+        let source_file = context.parse_session.span_to_file_contents(module.span);\n+        let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n+\n+        if is_generated_file(src) {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}\n+\n // Format an entire crate (or subset of the module tree).\n fn format_project<T: FormatHandler>(\n     input: Input,\n@@ -97,23 +131,19 @@ fn format_project<T: FormatHandler>(\n         directory_ownership.unwrap_or(DirectoryOwnership::UnownedViaBlock),\n         !input_is_stdin && !config.skip_children(),\n     )\n-    .visit_crate(&krate)?;\n+    .visit_crate(&krate)?\n+    .into_iter()\n+    .filter(|(path, module)| {\n+        !should_skip_module(config, &context, input_is_stdin, &main_file, path, module)\n+    })\n+    .collect::<Vec<_>>();\n \n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n     context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n-        let source_file = context.parse_session.span_to_file_contents(module.span);\n-        let src = source_file.src.as_ref().expect(\"SourceFile without src\");\n-\n-        let should_ignore = (!input_is_stdin && context.ignore_file(&path))\n-            || (!config.format_generated_files() && is_generated_file(src));\n-\n-        if (config.skip_children() && path != main_file) || should_ignore {\n-            continue;\n-        }\n         should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n         context.format_file(path, &module, is_macro_def)?;\n     }"}, {"sha": "babc56f86edc6db1a23ce47472563b9a2d71d10e", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -1535,15 +1535,15 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n     // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n     // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n     match (visitor_kind, &op_ty) {\n-        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(ref op_bounds)) => {\n+        (Item(_) | AssocTraitItem(_) | ForeignItem(_), Some(op_bounds)) => {\n             let op = OpaqueType { bounds: op_bounds };\n             rewrite_ty(rw_info, Some(bounds), Some(&op), vis)\n         }\n         (Item(_) | AssocTraitItem(_) | ForeignItem(_), None) => {\n             rewrite_ty(rw_info, Some(bounds), ty_opt, vis)\n         }\n         (AssocImplItem(_), _) => {\n-            let result = if let Some(ref op_bounds) = op_ty {\n+            let result = if let Some(op_bounds) = op_ty {\n                 let op = OpaqueType { bounds: op_bounds };\n                 rewrite_ty(rw_info, Some(bounds), Some(&op), &DEFAULT_VISIBILITY)\n             } else {\n@@ -3124,7 +3124,7 @@ impl Rewrite for ast::ForeignItem {\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, &sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, sig, &self.vis, Some(body)),\n                         generics,\n                         &sig.decl,\n                         self.span,\n@@ -3137,7 +3137,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(&sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )\n@@ -3166,7 +3166,7 @@ impl Rewrite for ast::ForeignItem {\n                 .map(|s| s + \";\")\n             }\n             ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n-                let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);\n+                let (kind, span) = (&ItemVisitorKind::ForeignItem(self), self.span);\n                 rewrite_type_alias(ty_alias, context, shape.indent, kind, span)\n             }\n             ast::ForeignItemKind::MacCall(ref mac) => {"}, {"sha": "7aa0315f18c262b21a678830251902ef7a333f9b", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -448,10 +448,8 @@ where\n                     true\n                 } else if starts_with_newline(comment) {\n                     false\n-                } else if comment.trim().contains('\\n') || comment.trim().len() > width {\n-                    true\n                 } else {\n-                    false\n+                    comment.trim().contains('\\n') || comment.trim().len() > width\n                 };\n \n                 rewrite_comment("}, {"sha": "9b74b35f31413cc20c8b0cdd3863fad51b1ae5b0", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -318,19 +318,20 @@ fn rewrite_struct_pat(\n     let mut fields_str = write_list(&item_vec, &fmt)?;\n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n \n+    let has_trailing_comma = fmt.needs_trailing_separator();\n+\n     if ellipsis {\n         if fields_str.contains('\\n') || fields_str.len() > one_line_width {\n             // Add a missing trailing comma.\n-            if context.config.trailing_comma() == SeparatorTactic::Never {\n+            if !has_trailing_comma {\n                 fields_str.push(',');\n             }\n             fields_str.push('\\n');\n             fields_str.push_str(&nested_shape.indent.to_string(context.config));\n         } else {\n             if !fields_str.is_empty() {\n                 // there are preceding struct fields being matched on\n-                if tactic == DefinitiveListTactic::Vertical {\n-                    // if the tactic is Vertical, write_list already added a trailing ,\n+                if has_trailing_comma {\n                     fields_str.push(' ');\n                 } else {\n                     fields_str.push_str(\", \");"}, {"sha": "92949ab576a6bffd4c0d546bdab19db91ad40ed3", "filename": "src/test/configuration_snippet.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fconfiguration_snippet.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -110,14 +110,7 @@ impl ConfigCodeBlock {\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n         // See if code block begins with #![rustfmt::skip].\n-        let fmt_skip = self\n-            .code_block\n-            .as_ref()\n-            .unwrap()\n-            .lines()\n-            .nth(0)\n-            .unwrap_or(\"\")\n-            == \"#![rustfmt::skip]\";\n+        let fmt_skip = self.fmt_skip();\n \n         if self.config_name.is_none() && !fmt_skip {\n             write_message(&format!(\n@@ -138,6 +131,17 @@ impl ConfigCodeBlock {\n         true\n     }\n \n+    /// True if the code block starts with #![rustfmt::skip]\n+    fn fmt_skip(&self) -> bool {\n+        self.code_block\n+            .as_ref()\n+            .unwrap()\n+            .lines()\n+            .nth(0)\n+            .unwrap_or(\"\")\n+            == \"#![rustfmt::skip]\"\n+    }\n+\n     fn has_parsing_errors<T: Write>(&self, session: &Session<'_, T>) -> bool {\n         if session.has_parsing_errors() {\n             write_message(&format!(\n@@ -251,6 +255,7 @@ fn configuration_snippet_tests() {\n     let blocks = get_code_blocks();\n     let failures = blocks\n         .iter()\n+        .filter(|block| !block.fmt_skip())\n         .map(ConfigCodeBlock::formatted_is_idempotent)\n         .fold(0, |acc, r| acc + (!r as u32));\n "}, {"sha": "ec9ed0f0b8d6249357980d28ddc9955c8a9e850b", "filename": "src/test/mod_resolver.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod_resolver.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -41,3 +41,12 @@ fn out_of_line_nested_inline_within_out_of_line() {\n         ],\n     );\n }\n+\n+#[test]\n+fn skip_out_of_line_nested_inline_within_out_of_line() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5065\n+    verify_mod_resolution(\n+        \"tests/mod-resolver/skip-files-issue-5065/main.rs\",\n+        &[\"tests/mod-resolver/skip-files-issue-5065/one.rs\"],\n+    );\n+}"}, {"sha": "1896a4744fe440987775bbe35e3c7a9cf52eb150", "filename": "src/visitor.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -552,7 +552,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(fn_ctxt, item.ident, &sig, &item.vis, Some(body)),\n+                            visit::FnKind::Fn(fn_ctxt, item.ident, sig, &item.vis, Some(body)),\n                             generics,\n                             &sig.decl,\n                             item.span,\n@@ -562,14 +562,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     } else {\n                         let indent = self.block_indent;\n                         let rewrite = self.rewrite_required_fn(\n-                            indent, item.ident, &sig, &item.vis, generics, item.span,\n+                            indent, item.ident, sig, &item.vis, generics, item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n                 ast::ItemKind::TyAlias(ref ty_alias) => {\n                     use ItemVisitorKind::Item;\n-                    self.visit_ty_alias_kind(ty_alias, &Item(&item), item.span);\n+                    self.visit_ty_alias_kind(ty_alias, &Item(item), item.span);\n                 }\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n@@ -619,17 +619,17 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ai.span);\n \n         if self.visit_attrs(&ai.attrs, ast::AttrStyle::Outer) {\n-            self.push_skipped_with_span(&ai.attrs.as_slice(), skip_span, skip_span);\n+            self.push_skipped_with_span(ai.attrs.as_slice(), skip_span, skip_span);\n             return;\n         }\n \n         // TODO(calebcartwright): consider enabling box_patterns feature gate\n         match (&ai.kind, visitor_kind) {\n             (ast::AssocItemKind::Const(..), AssocTraitItem(_)) => {\n-                self.visit_static(&StaticParts::from_trait_item(&ai))\n+                self.visit_static(&StaticParts::from_trait_item(ai))\n             }\n             (ast::AssocItemKind::Const(..), AssocImplItem(_)) => {\n-                self.visit_static(&StaticParts::from_impl_item(&ai))\n+                self.visit_static(&StaticParts::from_impl_item(ai))\n             }\n             (ast::AssocItemKind::Fn(ref fn_kind), _) => {\n                 let ast::Fn {\n@@ -948,12 +948,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     pub(crate) fn format_separate_mod(&mut self, m: &Module<'_>, end_pos: BytePos) {\n         self.block_indent = Indent::empty();\n-        if self.visit_attrs(m.attrs(), ast::AttrStyle::Inner) {\n-            self.push_skipped_with_span(m.attrs(), m.span, m.span);\n-        } else {\n-            self.walk_mod_items(&m.items);\n-            self.format_missing_with_indent(end_pos);\n-        }\n+        let skipped = self.visit_attrs(m.attrs(), ast::AttrStyle::Inner);\n+        assert!(\n+            !skipped,\n+            \"Skipping module must be handled before reaching this line.\"\n+        );\n+        self.walk_mod_items(&m.items);\n+        self.format_missing_with_indent(end_pos);\n     }\n \n     pub(crate) fn skip_empty_lines(&mut self, end_pos: BytePos) {"}, {"sha": "74889acf0c38afe3442fb18faa75c8faeb3d8a74", "filename": "tests/mod-resolver/skip-files-issue-5065/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,5 @@\n+#![rustfmt::skip]\n+\n+mod bar {\n+\n+        mod baz;}\n\\ No newline at end of file"}, {"sha": "3519b0ee59c88f71c373633ef2abd085d3e1ea16", "filename": "tests/mod-resolver/skip-files-issue-5065/foo/bar/baz.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Ffoo%2Fbar%2Fbaz.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1 @@\n+fn    baz()    {       }\n\\ No newline at end of file"}, {"sha": "3122e4f220f6291bc2ce3193020bad339b714055", "filename": "tests/mod-resolver/skip-files-issue-5065/main.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fmain.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,9 @@\n+#![rustfmt::skip]\n+\n+mod foo;\n+mod one;\n+\n+fn main() {println!(\"Hello, world!\");\n+}\n+\n+// trailing commet"}, {"sha": "e7eb2c2d64ddafd911c78d132b1355d984421345", "filename": "tests/mod-resolver/skip-files-issue-5065/one.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fskip-files-issue-5065%2Fone.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1 @@\n+struct One {   value:    String }\n\\ No newline at end of file"}, {"sha": "c7122c676237e4bffaa3de0d04c9770a82c31bea", "filename": "tests/target/issue-5066/multi_line_struct_trailing_comma_always_struct_lit_width_0.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_always_struct_lit_width_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_always_struct_lit_width_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_always_struct_lit_width_0.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-trailing_comma: Always\n+// rustfmt-struct_lit_single_line: false\n+// rustfmt-struct_lit_width: 0\n+\n+fn main() {\n+    let Foo {\n+        a,\n+        ..\n+    } = b;\n+}"}, {"sha": "68e89c4179f7d00053fcae307b6b9876e0f7cf48", "filename": "tests/target/issue-5066/multi_line_struct_trailing_comma_never_struct_lit_width_0.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_never_struct_lit_width_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_never_struct_lit_width_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_trailing_comma_never_struct_lit_width_0.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-trailing_comma: Never\n+// rustfmt-struct_lit_single_line: false\n+// rustfmt-struct_lit_width: 0\n+\n+fn main() {\n+    let Foo {\n+        a,\n+        ..\n+    } = b;\n+}"}, {"sha": "3368f07038684b194ff61b1595d71e57785a1d38", "filename": "tests/target/issue-5066/multi_line_struct_with_trailing_comma_always.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_always.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-trailing_comma: Always\n+// rustfmt-struct_lit_single_line: false\n+\n+// There is an issue with how this is formatted.\n+// formatting should look like ./multi_line_struct_trailing_comma_always_struct_lit_width_0.rs\n+fn main() {\n+    let Foo {\n+        a, ..\n+    } = b;\n+}"}, {"sha": "cf63c4c983c46e32e395b32e86a395c666c95b16", "filename": "tests/target/issue-5066/multi_line_struct_with_trailing_comma_never.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fmulti_line_struct_with_trailing_comma_never.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-trailing_comma: Never\n+// rustfmt-struct_lit_single_line: false\n+\n+// There is an issue with how this is formatted.\n+// formatting should look like ./multi_line_struct_trailing_comma_never_struct_lit_width_0.rs\n+fn main() {\n+    let Foo {\n+        a, ..\n+    } = b;\n+}"}, {"sha": "e20bcec93169683336e838757ab39153a1325106", "filename": "tests/target/issue-5066/with_trailing_comma_always.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_always.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-trailing_comma: Always\n+\n+fn main() {\n+    let Foo { a, .. } = b;\n+}"}, {"sha": "8b95bb137bca30bba4fae1c65c0742f72a286d3c", "filename": "tests/target/issue-5066/with_trailing_comma_never.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5066%2Fwith_trailing_comma_never.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-trailing_comma: Never\n+\n+fn main() {\n+    let Foo { a, .. } = b;\n+}"}, {"sha": "f85de33257cccd5fc062ed45294168a1ab0dfa2e", "filename": "tests/target/skip/preserve_trailing_comment.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bf82aeb830df6eacd80eab936f39401fb870928/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Fpreserve_trailing_comment.rs?ref=8bf82aeb830df6eacd80eab936f39401fb870928", "patch": "@@ -0,0 +1,7 @@\n+#![rustfmt::skip]\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+// Trailing Comment"}]}