{"sha": "9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2Y4NjM0M2ExMzZjNzFjYmIyYmI4ZGE5YmZkMTczNGZlYzM3ZjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T02:59:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-14T23:18:26Z"}, "message": "Camel case all the codemap types except span", "tree": {"sha": "7d1aea436a16f3c53aeaa19d1f8d2b5a987a5487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d1aea436a16f3c53aeaa19d1f8d2b5a987a5487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "html_url": "https://github.com/rust-lang/rust/commit/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38b9740668f596989a2a714e556d59d5b49112dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/38b9740668f596989a2a714e556d59d5b49112dc", "html_url": "https://github.com/rust-lang/rust/commit/38b9740668f596989a2a714e556d59d5b49112dc"}], "stats": {"total": 208, "additions": 104, "deletions": 104}, "files": [{"sha": "ecf060afc93acbc094af5780231284ca3533ebb2", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -112,7 +112,7 @@ type compile_unit_md = {name: ~str};\n type subprogram_md = {id: ast::node_id};\n type local_var_md = {id: ast::node_id};\n type tydesc_md = {hash: uint};\n-type block_md = {start: codemap::loc, end: codemap::loc};\n+type block_md = {start: codemap::Loc, end: codemap::Loc};\n type argument_md = {id: ast::node_id};\n type retval_md = {id: ast::node_id};\n "}, {"sha": "4e8b11d2ca6fa3fdeca47c0532fcd07be8f48924", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -30,7 +30,7 @@ mod test {\n \n         let parse_sess = syntax::parse::new_parse_sess(None);\n         let parser = parse::new_parser_from_source_str(\n-            parse_sess, ~[], ~\"-\", codemap::fss_none, @source);\n+            parse_sess, ~[], ~\"-\", codemap::FssNone, @source);\n \n         parser.parse_outer_attributes()\n     }"}, {"sha": "4455db0882695d71d0ceed372a6bd16f1a9c848c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -4,7 +4,7 @@ use std::serialization::{Serializable,\n                          Deserializable,\n                          Serializer,\n                          Deserializer};\n-use codemap::{span, filename};\n+use codemap::{span, FileName};\n use parse::token;\n \n #[auto_serialize]"}, {"sha": "87328f25ca8c19b693cc27cf6a26bb5ccf0c63c3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -10,13 +10,13 @@ use std::serialization::{Serializable,\n                          Serializer,\n                          Deserializer};\n \n-pub type byte_pos = uint;\n-pub type char_pos = uint;\n+pub type BytePos = uint;\n+pub type CharPos = uint;\n \n pub struct span {\n-    lo: char_pos,\n-    hi: char_pos,\n-    expn_info: Option<@expn_info>\n+    lo: CharPos,\n+    hi: CharPos,\n+    expn_info: Option<@ExpnInfo>\n }\n \n impl span : cmp::Eq {\n@@ -37,70 +37,70 @@ impl<D: Deserializer> span: Deserializable<D> {\n     }\n }\n \n-pub struct file_pos {\n-    ch: char_pos, byte: byte_pos\n+pub struct Loc {\n+    file: @FileMap, line: uint, col: uint\n }\n \n-pub struct loc {\n-    file: @filemap, line: uint, col: uint\n+pub struct FilePos {\n+    ch: CharPos, byte: BytePos\n }\n \n-impl file_pos : cmp::Eq {\n-    pure fn eq(other: &file_pos) -> bool {\n+impl FilePos : cmp::Eq {\n+    pure fn eq(other: &FilePos) -> bool {\n         self.ch == (*other).ch && self.byte == (*other).byte\n     }\n-    pure fn ne(other: &file_pos) -> bool { !self.eq(other) }\n+    pure fn ne(other: &FilePos) -> bool { !self.eq(other) }\n }\n \n-pub enum expn_info {\n-    expanded_from({call_site: span,\n-                   callie: {name: ~str, span: Option<span>}})\n+pub enum ExpnInfo {\n+    ExpandedFrom({call_site: span,\n+                  callie: {name: ~str, span: Option<span>}})\n }\n \n-pub type filename = ~str;\n+pub type FileName = ~str;\n \n-pub type lookup_fn = pure fn(file_pos) -> uint;\n+pub type LookupFn = pure fn(FilePos) -> uint;\n \n-pub struct file_lines {\n-    file: @filemap,\n+pub struct FileLines {\n+    file: @FileMap,\n     lines: ~[uint]\n }\n \n-pub enum file_substr {\n-    pub fss_none,\n-    pub fss_internal(span),\n-    pub fss_external({filename: ~str, line: uint, col: uint})\n+pub enum FileSubstr {\n+    pub FssNone,\n+    pub FssInternal(span),\n+    pub FssExternal({filename: ~str, line: uint, col: uint})\n }\n \n-pub struct filemap {\n-    name: filename,\n-    substr: file_substr,\n+pub struct FileMap {\n+    name: FileName,\n+    substr: FileSubstr,\n     src: @~str,\n-    start_pos: file_pos,\n-    mut lines: ~[file_pos]\n+    start_pos: FilePos,\n+    mut lines: ~[FilePos]\n }\n \n-pub impl filemap {\n-    static fn new_w_substr(+filename: filename, +substr: file_substr,\n+pub impl FileMap {\n+    static fn new_w_substr(+filename: FileName, +substr: FileSubstr,\n                            src: @~str,\n                            start_pos_ch: uint, start_pos_byte: uint)\n-        -> filemap {\n-        return filemap {\n+        -> FileMap {\n+        return FileMap {\n             name: filename, substr: substr, src: src,\n-            start_pos: file_pos {ch: start_pos_ch, byte: start_pos_byte},\n-            mut lines: ~[file_pos {ch: start_pos_ch, byte: start_pos_byte}]\n+            start_pos: FilePos {ch: start_pos_ch, byte: start_pos_byte},\n+            mut lines: ~[FilePos {ch: start_pos_ch, byte: start_pos_byte}]\n         };\n     }\n \n-    static fn new(+filename: filename, src: @~str,\n-                  start_pos_ch: char_pos, start_pos_byte: byte_pos)\n-        -> filemap {\n-        return filemap::new_w_substr(filename, fss_none, src,\n+    static fn new(+filename: FileName, src: @~str,\n+                  start_pos_ch: CharPos, start_pos_byte: BytePos)\n+        -> FileMap {\n+        return FileMap::new_w_substr(filename, FssNone, src,\n                                      start_pos_ch, start_pos_byte);\n     }\n \n-    fn next_line(@self, chpos: char_pos, byte_pos: byte_pos) {\n-        self.lines.push(file_pos {ch: chpos, byte: byte_pos + self.start_pos.byte});\n+    fn next_line(@self, chpos: CharPos, byte_pos: BytePos) {\n+        self.lines.push(FilePos {ch: chpos, byte: byte_pos + self.start_pos.byte});\n     }\n \n     pub fn get_line(@self, line: int) -> ~str unsafe {\n@@ -115,7 +115,7 @@ pub impl filemap {\n }\n \n pub struct CodeMap {\n-    files: DVec<@filemap>\n+    files: DVec<@FileMap>\n }\n \n pub impl CodeMap {\n@@ -130,31 +130,31 @@ pub impl CodeMap {\n         return fmt!(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n     }\n \n-    pub fn lookup_char_pos(@self, pos: char_pos) -> loc {\n-        pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n+    pub fn lookup_char_pos(@self, pos: CharPos) -> Loc {\n+        pure fn lookup(pos: FilePos) -> uint { return pos.ch; }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_byte_pos(@self, pos: byte_pos) -> loc {\n-        pure fn lookup(pos: file_pos) -> uint { return pos.byte; }\n+    pub fn lookup_byte_pos(@self, pos: BytePos) -> Loc {\n+        pure fn lookup(pos: FilePos) -> uint { return pos.byte; }\n         return self.lookup_pos(pos, lookup);\n     }\n \n-    pub fn lookup_char_pos_adj(@self, pos: char_pos)\n-        -> {filename: ~str, line: uint, col: uint, file: Option<@filemap>}\n+    pub fn lookup_char_pos_adj(@self, pos: CharPos)\n+        -> {filename: ~str, line: uint, col: uint, file: Option<@FileMap>}\n     {\n         let loc = self.lookup_char_pos(pos);\n         match (loc.file.substr) {\n-            fss_none => {\n+            FssNone => {\n                 {filename: /* FIXME (#2543) */ copy loc.file.name,\n                  line: loc.line,\n                  col: loc.col,\n                  file: Some(loc.file)}\n             }\n-            fss_internal(sp) => {\n+            FssInternal(sp) => {\n                 self.lookup_char_pos_adj(sp.lo + (pos - loc.file.start_pos.ch))\n             }\n-            fss_external(eloc) => {\n+            FssExternal(eloc) => {\n                 {filename: /* FIXME (#2543) */ copy eloc.filename,\n                  line: eloc.line + loc.line - 1u,\n                  col: if loc.line == 1u {eloc.col + loc.col} else {loc.col},\n@@ -164,15 +164,15 @@ pub impl CodeMap {\n     }\n \n     pub fn adjust_span(@self, sp: span) -> span {\n-        pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n+        pure fn lookup(pos: FilePos) -> uint { return pos.ch; }\n         let line = self.lookup_line(sp.lo, lookup);\n         match (line.fm.substr) {\n-            fss_none => sp,\n-            fss_internal(s) => {\n+            FssNone => sp,\n+            FssInternal(s) => {\n                 self.adjust_span(span {lo: s.lo + (sp.lo - line.fm.start_pos.ch),\n                                        hi: s.lo + (sp.hi - line.fm.start_pos.ch),\n                                        expn_info: sp.expn_info})}\n-            fss_external(_) => sp\n+            FssExternal(_) => sp\n         }\n     }\n \n@@ -183,24 +183,24 @@ pub impl CodeMap {\n                     lo.line, lo.col, hi.line, hi.col)\n     }\n \n-    pub fn span_to_filename(@self, sp: span) -> filename {\n+    pub fn span_to_filename(@self, sp: span) -> FileName {\n         let lo = self.lookup_char_pos(sp.lo);\n         return /* FIXME (#2543) */ copy lo.file.name;\n     }\n \n-    pub fn span_to_lines(@self, sp: span) -> @file_lines {\n+    pub fn span_to_lines(@self, sp: span) -> @FileLines {\n         let lo = self.lookup_char_pos(sp.lo);\n         let hi = self.lookup_char_pos(sp.hi);\n         let mut lines = ~[];\n         for uint::range(lo.line - 1u, hi.line as uint) |i| {\n             lines.push(i);\n         };\n-        return @file_lines {file: lo.file, lines: lines};\n+        return @FileLines {file: lo.file, lines: lines};\n     }\n \n-    fn lookup_byte_offset(@self, chpos: char_pos)\n-        -> {fm: @filemap, pos: byte_pos} {\n-        pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n+    fn lookup_byte_offset(@self, chpos: CharPos)\n+        -> {fm: @FileMap, pos: BytePos} {\n+        pure fn lookup(pos: FilePos) -> uint { return pos.ch; }\n         let {fm, line} = self.lookup_line(chpos, lookup);\n         let line_offset = fm.lines[line].byte - fm.start_pos.byte;\n         let col = chpos - fm.lines[line].ch;\n@@ -215,7 +215,7 @@ pub impl CodeMap {\n         return str::slice(*begin.fm.src, begin.pos, end.pos);\n     }\n \n-    pub fn get_filemap(@self, filename: ~str) -> @filemap {\n+    pub fn get_filemap(@self, filename: ~str) -> @FileMap {\n         for self.files.each |fm| { if fm.name == filename { return *fm; } }\n         //XXjdm the following triggers a mismatched type bug\n         //      (or expected function, found _|_)\n@@ -225,8 +225,8 @@ pub impl CodeMap {\n }\n \n priv impl CodeMap {\n-    fn lookup_line(@self, pos: uint, lookup: lookup_fn)\n-        -> {fm: @filemap, line: uint}\n+    fn lookup_line(@self, pos: uint, lookup: LookupFn)\n+        -> {fm: @FileMap, line: uint}\n     {\n         let len = self.files.len();\n         let mut a = 0u;\n@@ -248,9 +248,9 @@ priv impl CodeMap {\n         return {fm: f, line: a};\n     }\n \n-    fn lookup_pos(@self, pos: uint, lookup: lookup_fn) -> loc {\n+    fn lookup_pos(@self, pos: uint, lookup: LookupFn) -> Loc {\n         let {fm: f, line: a} = self.lookup_line(pos, lookup);\n-        return loc {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n+        return Loc {file: f, line: a + 1u, col: pos - lookup(f.lines[a])};\n     }\n \n     fn span_to_str_no_adj(@self, sp: span) -> ~str {"}, {"sha": "22bed009c9af9e9ceac21efc764e7cb5459c5db5", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -206,7 +206,7 @@ fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level) {\n }\n \n fn highlight_lines(cm: @codemap::CodeMap, sp: span,\n-                   lines: @codemap::file_lines) {\n+                   lines: @codemap::FileLines) {\n \n     let fm = lines.file;\n "}, {"sha": "ad33e99ff047a8a2d0ba10fb406868268ab06ec4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -1,7 +1,7 @@\n use std::map::HashMap;\n use parse::parser;\n use diagnostic::span_handler;\n-use codemap::{CodeMap, span, expn_info, expanded_from};\n+use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n use ast_util::dummy_sp;\n \n // obsolete old-style #macro code:\n@@ -129,11 +129,11 @@ trait ext_ctxt {\n     fn parse_sess() -> parse::parse_sess;\n     fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n-    fn backtrace() -> Option<@expn_info>;\n+    fn backtrace() -> Option<@ExpnInfo>;\n     fn mod_push(mod_name: ast::ident);\n     fn mod_pop();\n     fn mod_path() -> ~[ast::ident];\n-    fn bt_push(ei: codemap::expn_info);\n+    fn bt_push(ei: codemap::ExpnInfo);\n     fn bt_pop();\n     fn span_fatal(sp: span, msg: &str) -> !;\n     fn span_err(sp: span, msg: &str);\n@@ -153,23 +153,23 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n            cfg: ast::crate_cfg) -> ext_ctxt {\n     type ctxt_repr = {parse_sess: parse::parse_sess,\n                       cfg: ast::crate_cfg,\n-                      mut backtrace: Option<@expn_info>,\n+                      mut backtrace: Option<@ExpnInfo>,\n                       mut mod_path: ~[ast::ident],\n                       mut trace_mac: bool};\n     impl ctxt_repr: ext_ctxt {\n         fn codemap() -> @CodeMap { self.parse_sess.cm }\n         fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }\n-        fn backtrace() -> Option<@expn_info> { self.backtrace }\n+        fn backtrace() -> Option<@ExpnInfo> { self.backtrace }\n         fn mod_push(i: ast::ident) { self.mod_path.push(i); }\n         fn mod_pop() { self.mod_path.pop(); }\n         fn mod_path() -> ~[ast::ident] { return self.mod_path; }\n-        fn bt_push(ei: codemap::expn_info) {\n+        fn bt_push(ei: codemap::ExpnInfo) {\n             match ei {\n-              expanded_from({call_site: cs, callie: callie}) => {\n+              ExpandedFrom({call_site: cs, callie: callie}) => {\n                 self.backtrace =\n-                    Some(@expanded_from({\n+                    Some(@ExpandedFrom({\n                         call_site: span {lo: cs.lo, hi: cs.hi,\n                                          expn_info: self.backtrace},\n                         callie: callie}));\n@@ -178,7 +178,7 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n         }\n         fn bt_pop() {\n             match self.backtrace {\n-              Some(@expanded_from({call_site: span {expn_info: prev, _}, _})) => {\n+              Some(@ExpandedFrom({call_site: span {expn_info: prev, _}, _})) => {\n                 self.backtrace = prev\n               }\n               _ => self.bug(~\"tried to pop without a push\")"}, {"sha": "69d067f1ddb0a0549e1c6b149e4f40568a0a7c42", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -8,7 +8,7 @@ use ext::qquote::{qq_helper};\n use parse::{parser, parse_expr_from_source_str, new_parser_from_tt};\n \n \n-use codemap::{span, expanded_from};\n+use codemap::{span, ExpandedFrom};\n \n fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,\n@@ -41,7 +41,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                   Some(normal({expander: exp, span: exp_sp})) => {\n                     let expanded = exp(cx, mac.span, args, body);\n \n-                    cx.bt_push(expanded_from({call_site: s,\n+                    cx.bt_push(ExpandedFrom({call_site: s,\n                                 callie: {name: *extname, span: exp_sp}}));\n                     //keep going, outside-in\n                     let fully_expanded = fld.fold_expr(expanded).node;\n@@ -86,7 +86,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                                          *extname))\n                     };\n \n-                    cx.bt_push(expanded_from({call_site: s,\n+                    cx.bt_push(ExpandedFrom({call_site: s,\n                                 callie: {name: *extname, span: exp_sp}}));\n                     //keep going, outside-in\n                     let fully_expanded = fld.fold_expr(expanded).node;\n@@ -100,7 +100,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                                                                tts);\n                     let expanded = exp(cx, mac.span, arg, None);\n \n-                    cx.bt_push(expanded_from({call_site: s,\n+                    cx.bt_push(ExpandedFrom({call_site: s,\n                                 callie: {name: *extname, span: exp_sp}}));\n                     //keep going, outside-in\n                     let fully_expanded = fld.fold_expr(expanded).node;\n@@ -206,7 +206,7 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n           }\n           Some(item_tt(expand)) => {\n             let expanded = expand.expander(cx, it.span, it.ident, tts);\n-            cx.bt_push(expanded_from({call_site: it.span,\n+            cx.bt_push(ExpandedFrom({call_site: it.span,\n                                       callie: {name: *extname,\n                                                span: expand.span}}));\n             let maybe_it = match expanded {"}, {"sha": "1d17b09329c12ef5a000bce1f1ccf610393499e2", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -208,7 +208,7 @@ fn finish<T: qq_helper>\n     debug!(\"qquote--str==%?\", str);\n     let fname = cm.mk_substr_filename(body.span);\n     let node = parse_from_source_str\n-        (f, fname, codemap::fss_internal(body.span), str,\n+        (f, fname, codemap::FssInternal(body.span), str,\n          ecx.cfg(), ecx.parse_sess());\n     let loc = cm.lookup_char_pos(body.span.lo);\n \n@@ -345,8 +345,8 @@ fn replace_ty(repls: ~[fragment],\n }\n \n fn mk_file_substr(fname: ~str, line: uint, col: uint) ->\n-    codemap::file_substr {\n-    codemap::fss_external({filename: fname, line: line, col: col})\n+    codemap::FileSubstr {\n+    codemap::FssExternal({filename: fname, line: line, col: col})\n }\n \n // Local Variables:"}, {"sha": "3e4f24dff028311424c83fd9f06878656d4ead06", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -1,5 +1,5 @@\n use base::*;\n-use codemap::{span, loc, filemap};\n+use codemap::{span, Loc, FileMap};\n use print::pprust;\n use build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n \n@@ -34,7 +34,7 @@ fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::Some(0u), ~\"file\");\n-    let loc { file: @filemap { name: filename, _ }, _ } =\n+    let Loc { file: @FileMap { name: filename, _ }, _ } =\n         cx.codemap().lookup_char_pos(sp.lo);\n     return mk_uniq_str(cx, sp, filename);\n }"}, {"sha": "01461a8522075588cfb096006154cf7889c7c743", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -20,7 +20,7 @@ use util::interner;\n use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n use lexer::{reader, string_reader};\n use parse::token::{ident_interner, mk_ident_interner};\n-use codemap::{CodeMap, filemap};\n+use codemap::{CodeMap, FileMap};\n \n type parse_sess = @{\n     cm: @codemap::CodeMap,\n@@ -100,7 +100,7 @@ fn parse_crate_from_source_file(input: &Path, cfg: ast::crate_cfg,\n fn parse_crate_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n     let (p, rdr) = new_parser_etc_from_source_str(sess, cfg, name,\n-                                                  codemap::fss_none, source);\n+                                                  codemap::FssNone, source);\n     let r = p.parse_crate_mod(cfg);\n     p.abort_if_errors();\n     sess.chpos = rdr.chpos;\n@@ -111,7 +111,7 @@ fn parse_crate_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n fn parse_expr_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> @ast::expr {\n     let (p, rdr) = new_parser_etc_from_source_str(sess, cfg, name,\n-                                                  codemap::fss_none, source);\n+                                                  codemap::FssNone, source);\n     let r = p.parse_expr();\n     p.abort_if_errors();\n     sess.chpos = rdr.chpos;\n@@ -123,7 +123,7 @@ fn parse_item_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                               +attrs: ~[ast::attribute],\n                               sess: parse_sess) -> Option<@ast::item> {\n     let (p, rdr) = new_parser_etc_from_source_str(sess, cfg, name,\n-                                                  codemap::fss_none, source);\n+                                                  codemap::FssNone, source);\n     let r = p.parse_item(attrs);\n     p.abort_if_errors();\n     sess.chpos = rdr.chpos;\n@@ -135,7 +135,7 @@ fn parse_stmt_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                               +attrs: ~[ast::attribute],\n                               sess: parse_sess) -> @ast::stmt {\n     let (p, rdr) = new_parser_etc_from_source_str(sess, cfg, name,\n-                                                  codemap::fss_none, source);\n+                                                  codemap::FssNone, source);\n     let r = p.parse_stmt(attrs);\n     p.abort_if_errors();\n     sess.chpos = rdr.chpos;\n@@ -144,7 +144,7 @@ fn parse_stmt_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n }\n \n fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n-                            name: ~str, ss: codemap::file_substr,\n+                            name: ~str, ss: codemap::FileSubstr,\n                             source: @~str, cfg: ast::crate_cfg,\n                             sess: parse_sess)\n     -> T\n@@ -170,10 +170,10 @@ fn next_node_id(sess: parse_sess) -> node_id {\n }\n \n fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                                  +name: ~str, +ss: codemap::file_substr,\n+                                  +name: ~str, +ss: codemap::FileSubstr,\n                                   source: @~str) -> (Parser, string_reader) {\n     let ftype = parser::SOURCE_FILE;\n-    let filemap = @filemap::new_w_substr\n+    let filemap = @FileMap::new_w_substr\n         (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n@@ -182,7 +182,7 @@ fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n }\n \n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                              +name: ~str, +ss: codemap::file_substr,\n+                              +name: ~str, +ss: codemap::FileSubstr,\n                               source: @~str) -> Parser {\n     let (p, _) = new_parser_etc_from_source_str(sess, cfg, name, ss, source);\n     move p\n@@ -198,7 +198,7 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n       result::Err(e) => sess.span_diagnostic.handler().fatal(e)\n     }\n     let src = @result::unwrap(res);\n-    let filemap = @filemap::new(path.to_str(), src,\n+    let filemap = @FileMap::new(path.to_str(), src,\n                                 sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,"}, {"sha": "a2f73fd189ca5f3eed181a4a7af3935fdd0b1ea3", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -3,7 +3,7 @@ use io::ReaderUtil;\n use util::interner;\n use lexer::{string_reader, bump, is_eof, nextch,\n                is_whitespace, get_str_from, reader};\n-use codemap::filemap;\n+use codemap::FileMap;\n \n export cmnt;\n export lit;\n@@ -289,7 +289,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n     let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = parse::token::mk_fake_ident_interner();\n     let rdr = lexer::new_low_level_string_reader\n-        (span_diagnostic, @filemap::new(path, src, 0u, 0u), itr);\n+        (span_diagnostic, @FileMap::new(path, src, 0u, 0u), itr);\n \n     let mut comments: ~[cmnt] = ~[];\n     let mut literals: ~[lit] = ~[];"}, {"sha": "06b8b1e8eeeed8015c5c4ca358fb9afe4e1f742b", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -25,15 +25,15 @@ type string_reader = @{\n     mut pos: uint,\n     mut curr: char,\n     mut chpos: uint,\n-    filemap: @codemap::filemap,\n+    filemap: @codemap::FileMap,\n     interner: @token::ident_interner,\n     /* cached: */\n     mut peek_tok: token::Token,\n     mut peek_span: span\n };\n \n fn new_string_reader(span_diagnostic: span_handler,\n-                     filemap: @codemap::filemap,\n+                     filemap: @codemap::FileMap,\n                      itr: @token::ident_interner) -> string_reader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n     string_advance_token(r); /* fill in peek_* */\n@@ -42,7 +42,7 @@ fn new_string_reader(span_diagnostic: span_handler,\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n fn new_low_level_string_reader(span_diagnostic: span_handler,\n-                               filemap: @codemap::filemap,\n+                               filemap: @codemap::FileMap,\n                                itr: @token::ident_interner)\n     -> string_reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,"}, {"sha": "43628b0908fcfcc56dd646c44416f5ab387b2dbc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecf86343a136c71cbb2bb8da9bfd1734fec37f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9ecf86343a136c71cbb2bb8da9bfd1734fec37f4", "patch": "@@ -5,7 +5,7 @@ use either::{Either, Left, Right};\n use std::map::HashMap;\n use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n             INTERPOLATED, special_idents};\n-use codemap::{span,fss_none};\n+use codemap::{span,FssNone};\n use util::interner::Interner;\n use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n use lexer::reader;"}]}