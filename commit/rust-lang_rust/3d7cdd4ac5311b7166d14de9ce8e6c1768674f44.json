{"sha": "3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkN2NkZDRhYzUzMTFiNzE2NmQxNGRlOWNlOGU2YzE3Njg2NzRmNDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-03T21:23:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-03T21:23:59Z"}, "message": "Merge pull request #2827 from 0ndorio/lint/cmp_operators_on_partial_cmp\n\nAdded lint to avoid negated comparisions on partially ordered types. (fixes #2626)", "tree": {"sha": "e168c651a00eed24c149cae69da87b691e0dd436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e168c651a00eed24c149cae69da87b691e0dd436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFFxwCRBK7hj4Ov3rIwAAdHIIAG+311ZFWmg6jWLY61v0TNxb\nJtN/9imO+aVSmnV5S0OuUGHZr2ijV5ijsgWI8HH/Qygy/5nXDOqmc02Chl2c0dXF\nVedeNO0AxSdSBkdu1ETBpJNZqFzm4sfGcusX5GGN50MLrQKRm5ZyXk5FHxr5YNlw\nm6sJ22IY2gAf89MtSBP9/76Ql3h4d3KD/qnZu7MjeC04krWKxq75pWhPXvLVlMFK\nWNmd5QQZGaIsWAcIHEfRWlUvApeJGp8Bbx0Zra9IZVOBVL4gze92BT8NWTzsHzl7\ne0v/hCZpJnJR/mNS9OMMbUIFDVJJiSAQU0Po7ISOyX6X3CK5vFWZOxB/XtHXnMs=\n=h3tj\n-----END PGP SIGNATURE-----\n", "payload": "tree e168c651a00eed24c149cae69da87b691e0dd436\nparent c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8\nparent 28f735bb26706af3dddc7fa52ea4122a408cb023\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1528061039 +0200\ncommitter GitHub <noreply@github.com> 1528061039 +0200\n\nMerge pull request #2827 from 0ndorio/lint/cmp_operators_on_partial_cmp\n\nAdded lint to avoid negated comparisions on partially ordered types. (fixes #2626)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "html_url": "https://github.com/rust-lang/rust/commit/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8", "html_url": "https://github.com/rust-lang/rust/commit/c6d53ad2c082f6e76f51e1b352d6b7ae3d50bda8"}, {"sha": "28f735bb26706af3dddc7fa52ea4122a408cb023", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f735bb26706af3dddc7fa52ea4122a408cb023", "html_url": "https://github.com/rust-lang/rust/commit/28f735bb26706af3dddc7fa52ea4122a408cb023"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "0a453618e1939ff34b8ae4c09d97134535097004", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::{dummy_spanned, Span, DUMMY_SP};\n use syntax::util::ThinVec;\n-use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq, get_trait_def_id, implements_trait};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely.\n@@ -122,6 +122,11 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n             }\n             let negated = match e.node {\n                 ExprBinary(binop, ref lhs, ref rhs) => {\n+ \n+                    if !implements_ord(self.cx, lhs) {\n+                        continue;\n+                    }\n+\n                     let mk_expr = |op| {\n                         Expr {\n                             id: DUMMY_NODE_ID,\n@@ -174,6 +179,11 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n     fn simplify_not(&self, expr: &Expr) -> Option<String> {\n         match expr.node {\n             ExprBinary(binop, ref lhs, ref rhs) => {\n+\n+                if !implements_ord(self.cx, lhs) {\n+                    return None;\n+                }\n+\n                 match binop.node {\n                     BiEq => Some(\" != \"),\n                     BiNe => Some(\" == \"),\n@@ -444,3 +454,10 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         NestedVisitorMap::None\n     }\n }\n+\n+\n+fn implements_ord<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, expr: &Expr) -> bool {\n+    let ty = cx.tables.expr_ty(expr);\n+    get_trait_def_id(cx, &paths::ORD)\n+        .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n+}"}, {"sha": "612cde8a6aacf772a1a31cb5f769ae8590ce8c15", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -169,6 +169,7 @@ pub mod needless_borrowed_ref;\n pub mod needless_continue;\n pub mod needless_pass_by_value;\n pub mod needless_update;\n+pub mod neg_cmp_op_on_partial_ord;\n pub mod neg_multiply;\n pub mod new_without_default;\n pub mod no_effect;\n@@ -419,7 +420,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box map_unit_fn::Pass);\n     reg.register_late_lint_pass(box infallible_destructuring_match::Pass);\n     reg.register_late_lint_pass(box inherent_impl::Pass::default());\n-\n+    reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -501,6 +502,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         booleans::LOGIC_BUG,\n         booleans::NONMINIMAL_BOOL,\n         bytecount::NAIVE_BYTECOUNT,\n+        neg_cmp_op_on_partial_ord::NEG_CMP_OP_ON_PARTIAL_ORD,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n         copies::IF_SAME_THEN_ELSE,"}, {"sha": "8e70d0eeba0a14a7e48d39e93920f774be9b5697", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -0,0 +1,93 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+\n+use crate::utils::{self, paths};\n+\n+/// **What it does:**\n+/// Checks for the usage of negated comparision operators on types which only implement\n+/// `PartialOrd` (e.g. `f64`).\n+///\n+/// **Why is this bad?**\n+/// These operators make it easy to forget that the underlying types actually allow not only three\n+/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). Escpeccially if\n+/// the operator based comparision result is negated it is easy to miss that fact.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// ```rust\n+/// use core::cmp::Ordering;\n+/// \n+/// // Bad\n+/// let a = 1.0;\n+/// let b = std::f64::NAN;\n+/// \n+/// let _not_less_or_equal = !(a <= b);\n+///\n+/// // Good\n+/// let a = 1.0;\n+/// let b = std::f64::NAN;\n+/// \n+/// let _not_less_or_equal = match a.partial_cmp(&b) {\n+///     None | Some(Ordering::Greater) => true,\n+///     _ => false, \n+/// };\n+/// ```\n+declare_clippy_lint! {\n+    pub NEG_CMP_OP_ON_PARTIAL_ORD,\n+    complexity,\n+    \"The use of negated comparision operators on partially orded types may produce confusing code.\"\n+}\n+\n+pub struct NoNegCompOpForPartialOrd;\n+\n+impl LintPass for NoNegCompOpForPartialOrd {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEG_CMP_OP_ON_PARTIAL_ORD)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n+\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+\n+            if let Expr_::ExprUnary(UnOp::UnNot, ref inner) = expr.node;\n+            if let Expr_::ExprBinary(ref op, ref left, _) = inner.node;\n+            if let BinOp_::BiLe | BinOp_::BiGe | BinOp_::BiLt | BinOp_::BiGt = op.node;\n+\n+            then {\n+\n+                let ty = cx.tables.expr_ty(left);\n+\n+                let implements_ord = {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &paths::ORD) {\n+                        utils::implements_trait(cx, ty, id, &[])\n+                    } else {\n+                        return;\n+                    }\n+                };\n+\n+                let implements_partial_ord = {\n+                    if let Some(id) = utils::get_trait_def_id(cx, &paths::PARTIAL_ORD) {\n+                        utils::implements_trait(cx, ty, id, &[])\n+                    } else {\n+                        return;\n+                    }\n+                };\n+\n+                if implements_partial_ord && !implements_ord {\n+                    cx.span_lint(\n+                        NEG_CMP_OP_ON_PARTIAL_ORD,\n+                        expr.span,\n+                        \"The use of negated comparision operators on partially orded \\\n+                        types produces code that is hard to read and refactor. Please \\\n+                        consider to use the `partial_cmp` instead, to make it clear \\\n+                        that the two values could be incomparable.\"\n+                    )\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "ab62346ea7ef14c2d0ca013364612cd2eabaeb0e", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -57,6 +57,8 @@ pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n+pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n+pub const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];"}, {"sha": "9daf15d378ccf32ce9ac8fe3bf13d60323a616ce", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -114,3 +114,13 @@ fn warn_for_built_in_methods_with_negation() {\n     if !res.is_some() { }\n     if !res.is_none() { }\n }\n+\n+#[allow(neg_cmp_op_on_partial_ord)]\n+fn dont_warn_for_negated_partial_ord_comparision() {\n+    let a: f64 = unimplemented!();\n+    let b: f64 = unimplemented!();\n+    let _ = !(a < b);\n+    let _ = !(a <= b);\n+    let _ = !(a > b);\n+    let _ = !(a >= b);\n+}"}, {"sha": "214d627ba308e1249af2b587d3d8531c8f4e5a51", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -0,0 +1,58 @@\n+/// This test case utilizes `f64` an easy example for `PartialOrd` only types\n+/// but the lint itself actually validates any expression where the left\n+/// operand implements `PartialOrd` but not `Ord`.\n+\n+use std::cmp::Ordering;\n+\n+#[warn(neg_cmp_op_on_partial_ord)]\n+fn main() {\n+\n+    let a_value = 1.0;\n+    let another_value = 7.0;\n+\n+    // --- Bad ---\n+\n+\n+    // Not Less but potentially Greater, Equal or Uncomparable.\n+    let _not_less = !(a_value < another_value);\n+    \n+    // Not Less or Equal but potentially Greater or Uncomparable.\n+    let _not_less_or_equal = !(a_value <= another_value);\n+\n+    // Not Greater but potentially Less, Equal or Uncomparable.\n+    let _not_greater = !(a_value > another_value);\n+\n+    // Not Greater or Equal but potentially Less or Uncomparable.\n+    let _not_greater_or_equal = !(a_value >= another_value);\n+\n+\n+    // --- Good ---\n+\n+\n+    let _not_less = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Greater) | Some(Ordering::Equal)  => true,\n+        _ => false,\n+    };\n+    let _not_less_or_equal = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Greater) => true,\n+        _ => false,\n+    };\n+    let _not_greater = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Less) | Some(Ordering::Equal) => true,\n+        _ => false,\n+    };\n+    let _not_greater_or_equal = match a_value.partial_cmp(&another_value) {\n+        None | Some(Ordering::Less) => true,\n+        _ => false,\n+    };\n+\n+\n+    // --- Should not trigger ---\n+\n+\n+    let _ = a_value < another_value;\n+    let _ = a_value <= another_value;\n+    let _ = a_value > another_value;\n+    let _ = a_value >= another_value;\n+}\n+"}, {"sha": "5067ece8705045e83c368961ced03e58be53772e", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d7cdd4ac5311b7166d14de9ce8e6c1768674f44/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=3d7cdd4ac5311b7166d14de9ce8e6c1768674f44", "patch": "@@ -0,0 +1,28 @@\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:17:21\n+   |\n+17 |     let _not_less = !(a_value < another_value);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n+\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:20:30\n+   |\n+20 |     let _not_less_or_equal = !(a_value <= another_value);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:23:24\n+   |\n+23 |     let _not_greater = !(a_value > another_value);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+  --> $DIR/neg_cmp_op_on_partial_ord.rs:26:33\n+   |\n+26 |     let _not_greater_or_equal = !(a_value >= another_value);\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}