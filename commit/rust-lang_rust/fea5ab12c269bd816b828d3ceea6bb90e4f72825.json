{"sha": "fea5ab12c269bd816b828d3ceea6bb90e4f72825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYTVhYjEyYzI2OWJkODE2YjgyOGQzY2VlYTZiYjkwZTRmNzI4MjU=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-13T17:58:46Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-21T15:49:39Z"}, "message": "Prefer accessible paths in 'use' suggestions\n\nThis fixes an issue with the following sample:\n\n    mod foo {\n\tmod inaccessible {\n\t    pub struct X;\n\t}\n\tpub mod avail {\n\t    pub struct X;\n\t}\n    }\n\n    fn main() { X; }\n\nInstead of suggesting both `use crate::foo::inaccessible::X;` and `use\ncrate::foo::avail::X;`, it should only suggest the latter.\n\nIt is done by trimming the list of suggestions from inaccessible paths\nif accessible paths are present.\n\nVisibility is checked with `is_accessible_from` now instead of being\nhard-coded.\n\n-\n\nSome tests fixes are trivial, and others require a bit more explaining,\nhere are my comments:\n\nsrc/test/ui/issues/issue-35675.stderr: Only needs to make the enum\npublic to have the suggestion make sense.\n\nsrc/test/ui/issues/issue-42944.stderr: Importing the tuple struct won't\nhelp because its constructor is not visible, so the attempted\nconstructor does not work. In that case, it's better not to suggest it.\nThe case where the constructor is public is covered in `issue-26545.rs`.", "tree": {"sha": "41f3d9a7ea2889b813ea85c277fb4102241959ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f3d9a7ea2889b813ea85c277fb4102241959ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea5ab12c269bd816b828d3ceea6bb90e4f72825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea5ab12c269bd816b828d3ceea6bb90e4f72825", "html_url": "https://github.com/rust-lang/rust/commit/fea5ab12c269bd816b828d3ceea6bb90e4f72825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea5ab12c269bd816b828d3ceea6bb90e4f72825/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c7787ba246353178e099373b9240be0d9e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c7787ba246353178e099373b9240be0d9e603", "html_url": "https://github.com/rust-lang/rust/commit/a39c7787ba246353178e099373b9240be0d9e603"}], "stats": {"total": 181, "additions": 99, "deletions": 82}, "files": [{"sha": "bb88b8191f1adb6729c6293112dede99d8db46e3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -49,6 +49,7 @@ crate struct ImportSuggestion {\n     pub did: Option<DefId>,\n     pub descr: &'static str,\n     pub path: Path,\n+    pub accessible: bool,\n }\n \n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n@@ -640,21 +641,32 @@ impl<'a> Resolver<'a> {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n         let not_local_module = crate_name.name != kw::Crate;\n-        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), not_local_module)];\n+        let mut worklist =\n+            vec![(start_module, Vec::<ast::PathSegment>::new(), true, not_local_module)];\n \n-        while let Some((in_module, path_segments, in_module_is_extern)) = worklist.pop() {\n+        while let Some((in_module, path_segments, accessible, in_module_is_extern)) = worklist.pop()\n+        {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n                 // avoid imports entirely\n                 if name_binding.is_import() && !name_binding.is_extern_crate() {\n                     return;\n                 }\n+\n                 // avoid non-importable candidates as well\n                 if !name_binding.is_importable() {\n                     return;\n                 }\n \n+                let child_accessible =\n+                    accessible && this.is_accessible_from(name_binding.vis, parent_scope.module);\n+\n+                // do not venture inside inaccessible items of other crates\n+                if in_module_is_extern && !child_accessible {\n+                    return;\n+                }\n+\n                 // collect results based on the filter function\n                 // avoid suggesting anything from the same module in which we are resolving\n                 if ident.name == lookup_ident.name\n@@ -673,22 +685,29 @@ impl<'a> Resolver<'a> {\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n                         let path = Path { span: name_binding.span, segments: segms };\n-                        // the entity is accessible in the following cases:\n-                        // 1. if it's defined in the same crate, it's always\n-                        // accessible (since private entities can be made public)\n-                        // 2. if it's defined in another crate, it's accessible\n-                        // only if both the module is public and the entity is\n-                        // declared as public (due to pruning, we don't explore\n-                        // outside crate private modules => no need to check this)\n-                        if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            let did = match res {\n-                                Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n-                                _ => res.opt_def_id(),\n-                            };\n-                            if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n-                                candidates.push(ImportSuggestion { did, descr: res.descr(), path });\n+                        let did = match res {\n+                            Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n+                            _ => res.opt_def_id(),\n+                        };\n+\n+                        if child_accessible {\n+                            // Remove invisible match if exists\n+                            if let Some(idx) = candidates\n+                                .iter()\n+                                .position(|v: &ImportSuggestion| v.did == did && !v.accessible)\n+                            {\n+                                candidates.remove(idx);\n                             }\n                         }\n+\n+                        if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n+                            candidates.push(ImportSuggestion {\n+                                did,\n+                                descr: res.descr(),\n+                                path,\n+                                accessible: child_accessible,\n+                            });\n+                        }\n                     }\n                 }\n \n@@ -701,20 +720,22 @@ impl<'a> Resolver<'a> {\n                     let is_extern_crate_that_also_appears_in_prelude =\n                         name_binding.is_extern_crate() && lookup_ident.span.rust_2018();\n \n-                    let is_visible_to_user =\n-                        !in_module_is_extern || name_binding.vis == ty::Visibility::Public;\n-\n-                    if !is_extern_crate_that_also_appears_in_prelude && is_visible_to_user {\n-                        // add the module to the lookup\n+                    if !is_extern_crate_that_also_appears_in_prelude {\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n+                        // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {\n-                            worklist.push((module, path_segments, is_extern));\n+                            worklist.push((module, path_segments, child_accessible, is_extern));\n                         }\n                     }\n                 }\n             })\n         }\n \n+        // If only some candidates are accessible, take just them\n+        if !candidates.iter().all(|v: &ImportSuggestion| !v.accessible) {\n+            candidates = candidates.into_iter().filter(|x| x.accessible).collect();\n+        }\n+\n         candidates\n     }\n "}, {"sha": "478698ba20c70b4d36d64e4bf1954e4b7548f3c4", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -887,7 +887,12 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         let path = Path { span: name_binding.span, segments: path_segments };\n                         result = Some((\n                             module,\n-                            ImportSuggestion { did: Some(def_id), descr: \"module\", path },\n+                            ImportSuggestion {\n+                                did: Some(def_id),\n+                                descr: \"module\",\n+                                path,\n+                                accessible: true,\n+                            },\n                         ));\n                     } else {\n                         // add the module to the lookup"}, {"sha": "6dcbf055a8bb78fbc0f968c83b6c146e253b2189", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -23,14 +23,10 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL | use bar::g;\n    |\n-LL | use foo::test2::test::g;\n-   |\n-LL | use foo::test::g;\n-   |\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:61:12"}, {"sha": "5652ee747060597bec4dea336d00d71103d82f88", "filename": "src/test/ui/issues/issue-26545.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26545.rs?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -0,0 +1,12 @@\n+mod foo {\n+    pub struct B(pub ());\n+}\n+\n+mod baz {\n+    fn foo() {\n+        B(());\n+        //~^ ERROR cannot find function, tuple struct or tuple variant `B` in this scope [E0425]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d3c86692501d68ee2102e6d3d0050b03f64d03e2", "filename": "src/test/ui/issues/issue-26545.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26545.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -0,0 +1,14 @@\n+error[E0425]: cannot find function, tuple struct or tuple variant `B` in this scope\n+  --> $DIR/issue-26545.rs:7:9\n+   |\n+LL |         B(());\n+   |         ^ not found in this scope\n+   |\n+help: consider importing this tuple struct\n+   |\n+LL |     use foo::B;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "683761667d40aee2077f5d6463b311fb9dab5065", "filename": "src/test/ui/issues/issue-35675.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.rs?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -33,7 +33,7 @@ fn qux() -> Some {\n fn main() {}\n \n mod x {\n-    enum Enum {\n+    pub enum Enum {\n         Variant1,\n         Variant2(),\n         Variant3(usize),"}, {"sha": "a088f91554dfb6734adcde64d115bbb8624091a8", "filename": "src/test/ui/issues/issue-42944.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -1,20 +1,20 @@\n mod foo {\n-    pub struct B(());\n+    pub struct Bx(());\n }\n \n mod bar {\n-    use foo::B;\n+    use foo::Bx;\n \n     fn foo() {\n-        B(());\n-        //~^ ERROR expected function, tuple struct or tuple variant, found struct `B` [E0423]\n+        Bx(());\n+        //~^ ERROR expected function, tuple struct or tuple variant, found struct `Bx` [E0423]\n     }\n }\n \n mod baz {\n     fn foo() {\n-        B(());\n-        //~^ ERROR cannot find function, tuple struct or tuple variant `B` in this scope [E0425]\n+        Bx(());\n+        //~^ ERROR cannot find function, tuple struct or tuple variant `Bx` in this scope [E0425]\n     }\n }\n "}, {"sha": "9fad43757ba62fdf8e6f1a3c11d46207d1fca78f", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -1,18 +1,18 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found struct `B`\n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Bx`\n   --> $DIR/issue-42944.rs:9:9\n    |\n-LL |         B(());\n-   |         ^ constructor is not visible here due to private fields\n+LL |         Bx(());\n+   |         ^^ constructor is not visible here due to private fields\n \n-error[E0425]: cannot find function, tuple struct or tuple variant `B` in this scope\n+error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this scope\n   --> $DIR/issue-42944.rs:16:9\n    |\n-LL |         B(());\n-   |         ^ not found in this scope\n+LL |         Bx(());\n+   |         ^^ not found in this scope\n    |\n help: consider importing this tuple struct\n    |\n-LL |     use foo::B;\n+LL |     use foo::Bx;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "a86ec7fabea4bf37690c55ff9175e20eacb00782", "filename": "src/test/ui/issues/issue-4366-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366-2.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -15,12 +15,10 @@ error[E0423]: expected function, found module `foo`\n LL |     foo();\n    |     ^^^ not a function\n    |\n-help: consider importing one of these items instead\n+help: consider importing this function instead\n    |\n LL | use foo::foo;\n    |\n-LL | use m1::foo;\n-   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "469ea93e904686e08b416c449f10988084aea6b1", "filename": "src/test/ui/issues/issue-4366.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4366.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -4,12 +4,10 @@ error[E0425]: cannot find function `foo` in this scope\n LL |         fn sub() -> isize { foo(); 1 }\n    |                             ^^^ not found in this scope\n    |\n-help: consider importing one of these items\n+help: consider importing this function\n    |\n LL |         use foo::foo;\n    |\n-LL |         use m1::foo;\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "eda9d4c128d81dee01ee130853d50ffb28fd3255", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -11,14 +11,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:51:5\n@@ -33,14 +29,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0412]: cannot find type `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:52:17\n@@ -55,14 +47,10 @@ help: a struct with a similar name exists\n    |\n LL |     let _x: Box<Baz>;\n    |                 ^^^\n-help: consider importing one of these items\n+help: consider importing this trait\n    |\n LL | use foo1::Bar;\n    |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n \n error[E0107]: wrong number of const arguments: expected 0, found 1\n   --> $DIR/privacy-ns1.rs:35:17"}, {"sha": "d7d9b83527509b3232f3005d35aee782a290e656", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -4,14 +4,10 @@ error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar\n LL |     Bar();\n    |     ^^^ not a function, tuple struct or tuple variant\n    |\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n   --> $DIR/privacy-ns2.rs:26:5\n@@ -26,14 +22,10 @@ help: a unit struct with a similar name exists\n    |\n LL |     Baz();\n    |     ^^^\n-help: consider importing one of these items instead\n-   |\n-LL | use foo1::Bar;\n+help: consider importing this function instead\n    |\n LL | use foo2::Bar;\n    |\n-LL | use foo3::Bar;\n-   |\n \n error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns2.rs:43:14\n@@ -45,14 +37,10 @@ help: use `=` if you meant to assign\n    |\n LL |     let _x = Bar();\n    |            ^\n-help: consider importing one of these items instead\n+help: consider importing this trait instead\n    |\n LL | use foo1::Bar;\n    |\n-LL | use foo2::Bar;\n-   |\n-LL | use foo3::Bar;\n-   |\n \n error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:63:15"}, {"sha": "538eeead9fc9da401d05656a641772cc1376295a", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea5ab12c269bd816b828d3ceea6bb90e4f72825/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=fea5ab12c269bd816b828d3ceea6bb90e4f72825", "patch": "@@ -25,11 +25,8 @@ LL | use mul1::Mul;\n    |\n LL | use mul2::Mul;\n    |\n-LL | use mul3::Mul;\n-   |\n-LL | use mul4::Mul;\n+LL | use std::ops::Mul;\n    |\n-     and 2 other candidates\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n   --> $DIR/issue-21221-1.rs:63:6"}]}