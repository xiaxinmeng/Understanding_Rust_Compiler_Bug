{"sha": "1974186d3285d5ed21e7c9427a1c5e7a93d99596", "node_id": "C_kwDOAAsO6NoAKDE5NzQxODZkMzI4NWQ1ZWQyMWU3Yzk0MjdhMWM1ZTdhOTNkOTk1OTY", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-20T19:48:03Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-08-22T12:24:14Z"}, "message": "migrate: `rustc_lint::context`", "tree": {"sha": "6e666a38dc0dad2962c9a1e5be91ec6b1728c0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e666a38dc0dad2962c9a1e5be91ec6b1728c0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1974186d3285d5ed21e7c9427a1c5e7a93d99596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1974186d3285d5ed21e7c9427a1c5e7a93d99596", "html_url": "https://github.com/rust-lang/rust/commit/1974186d3285d5ed21e7c9427a1c5e7a93d99596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1974186d3285d5ed21e7c9427a1c5e7a93d99596/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe838079ca9ec3ea76e196cccd68754fe1bbd70", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe838079ca9ec3ea76e196cccd68754fe1bbd70", "html_url": "https://github.com/rust-lang/rust/commit/dbe838079ca9ec3ea76e196cccd68754fe1bbd70"}], "stats": {"total": 191, "additions": 132, "deletions": 59}, "files": [{"sha": "27ad3e453660188727a674a59593a4cf71d39397", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=1974186d3285d5ed21e7c9427a1c5e7a93d99596", "patch": "@@ -414,3 +414,16 @@ lint_reason_must_come_last = reason in lint attribute must come last\n \n lint_unknown_tool_in_scoped_lint = unknown tool name `{$tool_name}` found in scoped lint: `{$tool_name}::{$lint_name}`\n     .help = add `#![register_tool({$tool_name})]` to the crate root\n+\n+lint_unsupported_group = `{$lint_group}` lint group is not supported with \u00b4--force-warn\u00b4\n+\n+lint_requested_level = requested on the command line with `{$level} {$lint_name}`\n+\n+lint_check_name_unknown = unknown lint: `{$lint_name}`\n+    .help = did you mean: `{$suggestion}`\n+\n+lint_check_name_unknown_tool = unknown lint tool: `{$tool_name}`\n+\n+lint_check_name_warning = {$msg}\n+\n+lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}"}, {"sha": "a1fdc557f9298ecea319eb0420c025430a10c0b3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 38, "deletions": 58, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1974186d3285d5ed21e7c9427a1c5e7a93d99596", "patch": "@@ -1,3 +1,6 @@\n+// #![deny(rustc::diagnostic_outside_of_impl)]\n+// #![deny(rustc::untranslatable_diagnostic)]\n+//\n //! Implementation of lint checking.\n //!\n //! The lint checking is mostly consolidated into one pass which runs\n@@ -16,12 +19,16 @@\n \n use self::TargetLint::*;\n \n+use crate::errors::{\n+    CheckNameDeprecated, CheckNameUnknown, CheckNameUnknownTool, CheckNameWarning, RequestedLevel,\n+    UnsupportedGroup,\n+};\n use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err};\n+use rustc_errors::add_elided_lifetime_in_path_suggestion;\n use rustc_errors::{\n     Applicability, DecorateLint, LintDiagnosticBuilder, MultiSpan, SuggestionStyle,\n };\n@@ -39,7 +46,7 @@ use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintI\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span};\n use rustc_target::abi;\n use tracing::debug;\n \n@@ -326,68 +333,41 @@ impl LintStore {\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n         if lint_name_only == crate::WARNINGS.name_lower() && matches!(level, Level::ForceWarn(_)) {\n-            struct_span_err!(\n-                sess,\n-                DUMMY_SP,\n-                E0602,\n-                \"`{}` lint group is not supported with \u00b4--force-warn\u00b4\",\n-                crate::WARNINGS.name_lower()\n-            )\n-            .emit();\n+            sess.emit_err(UnsupportedGroup { lint_group: crate::WARNINGS.name_lower() });\n             return;\n         }\n-        let db = match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n-            CheckLintNameResult::Ok(_) => None,\n-            CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n+        let lint_name = lint_name.to_string();\n+        match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n+            CheckLintNameResult::Warning(msg, _) => {\n+                sess.emit_warning(CheckNameWarning {\n+                    msg,\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n             CheckLintNameResult::NoLint(suggestion) => {\n-                let mut err =\n-                    struct_span_err!(sess, DUMMY_SP, E0602, \"unknown lint: `{}`\", lint_name);\n-\n-                if let Some(suggestion) = suggestion {\n-                    err.help(&format!(\"did you mean: `{}`\", suggestion));\n+                sess.emit_err(CheckNameUnknown {\n+                    lint_name: lint_name.clone(),\n+                    suggestion,\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n+            CheckLintNameResult::Tool(result) => {\n+                if let Err((Some(_), new_name)) = result {\n+                    sess.emit_warning(CheckNameDeprecated {\n+                        lint_name: lint_name.clone(),\n+                        new_name,\n+                        sub: RequestedLevel { level, lint_name },\n+                    });\n                 }\n-\n-                Some(err.forget_guarantee())\n             }\n-            CheckLintNameResult::Tool(result) => match result {\n-                Err((Some(_), new_name)) => Some(sess.struct_warn(&format!(\n-                    \"lint name `{}` is deprecated \\\n-                     and does not have an effect anymore. \\\n-                     Use: {}\",\n-                    lint_name, new_name\n-                ))),\n-                _ => None,\n-            },\n-            CheckLintNameResult::NoTool => Some(\n-                struct_span_err!(\n-                    sess,\n-                    DUMMY_SP,\n-                    E0602,\n-                    \"unknown lint tool: `{}`\",\n-                    tool_name.unwrap()\n-                )\n-                .forget_guarantee(),\n-            ),\n+            CheckLintNameResult::NoTool => {\n+                sess.emit_err(CheckNameUnknownTool {\n+                    tool_name: tool_name.unwrap(),\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n+            _ => {}\n         };\n-\n-        if let Some(mut db) = db {\n-            let msg = format!(\n-                \"requested on the command line with `{} {}`\",\n-                match level {\n-                    Level::Allow => \"-A\",\n-                    Level::Warn => \"-W\",\n-                    Level::ForceWarn(_) => \"--force-warn\",\n-                    Level::Deny => \"-D\",\n-                    Level::Forbid => \"-F\",\n-                    Level::Expect(_) => {\n-                        unreachable!(\"lints with the level of `expect` should not run this code\");\n-                    }\n-                },\n-                lint_name\n-            );\n-            db.note(&msg);\n-            db.emit();\n-        }\n     }\n \n     /// True if this symbol represents a lint group name."}, {"sha": "a6859311cfd63edc1512af1a90d7d40e33c7f054", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1974186d3285d5ed21e7c9427a1c5e7a93d99596/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=1974186d3285d5ed21e7c9427a1c5e7a93d99596", "patch": "@@ -1,5 +1,6 @@\n-use rustc_errors::{fluent, AddSubdiagnostic};\n+use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_session::{lint::Level, parse::ParseSess, SessionDiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -80,3 +81,82 @@ pub struct BuiltinEllpisisInclusiveRangePatterns {\n     pub suggestion: Span,\n     pub replace: String,\n }\n+\n+pub struct RequestedLevel {\n+    pub level: Level,\n+    pub lint_name: String,\n+}\n+\n+impl AddSubdiagnostic for RequestedLevel {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        diag.note(fluent::lint::requested_level);\n+        diag.set_arg(\n+            \"level\",\n+            match self.level {\n+                Level::Allow => \"-A\",\n+                Level::Warn => \"-W\",\n+                Level::ForceWarn(_) => \"--force-warn\",\n+                Level::Deny => \"-D\",\n+                Level::Forbid => \"-F\",\n+                Level::Expect(_) => {\n+                    unreachable!(\"lints with the level of `expect` should not run this code\");\n+                }\n+            },\n+        );\n+        diag.set_arg(\"lint_name\", self.lint_name);\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(lint::unsupported_group, code = \"E0602\")]\n+pub struct UnsupportedGroup {\n+    pub lint_group: String,\n+}\n+\n+pub struct CheckNameUnknown {\n+    pub lint_name: String,\n+    pub suggestion: Option<Symbol>,\n+    pub sub: RequestedLevel,\n+}\n+\n+impl SessionDiagnostic<'_> for CheckNameUnknown {\n+    fn into_diagnostic(\n+        self,\n+        sess: &ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::lint::check_name_unknown);\n+        diag.code(rustc_errors::error_code!(E0602));\n+        if let Some(suggestion) = self.suggestion {\n+            diag.help(fluent::lint::help);\n+            diag.set_arg(\"suggestion\", suggestion);\n+        }\n+        diag.set_arg(\"lint_name\", self.lint_name);\n+        diag.subdiagnostic(self.sub);\n+        diag\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(lint::check_name_unknown_tool, code = \"E0602\")]\n+pub struct CheckNameUnknownTool {\n+    pub tool_name: Symbol,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[warning(lint::check_name_warning)]\n+pub struct CheckNameWarning {\n+    pub msg: String,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[warning(lint::check_name_deprecated)]\n+pub struct CheckNameDeprecated {\n+    pub lint_name: String,\n+    pub new_name: String,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}"}]}