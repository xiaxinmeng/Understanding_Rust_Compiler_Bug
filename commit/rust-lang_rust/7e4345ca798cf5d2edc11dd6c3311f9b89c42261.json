{"sha": "7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNDM0NWNhNzk4Y2Y1ZDJlZGMxMWRkNmMzMzExZjliODljNDIyNjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T11:48:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-31T09:21:33Z"}, "message": "Simplify ResolveLiftimes creation.", "tree": {"sha": "498da3adf5df85823ca3fcbdd3e9e8d466b76fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/498da3adf5df85823ca3fcbdd3e9e8d466b76fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "html_url": "https://github.com/rust-lang/rust/commit/7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e4345ca798cf5d2edc11dd6c3311f9b89c42261/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f85d3fe2b447e31017eb01e6aec8af30ec5a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f85d3fe2b447e31017eb01e6aec8af30ec5a14", "html_url": "https://github.com/rust-lang/rust/commit/31f85d3fe2b447e31017eb01e6aec8af30ec5a14"}], "stats": {"total": 93, "additions": 31, "deletions": 62}, "files": [{"sha": "6926ed24afdfba2b752812fb0b1edc0bdc3f5684", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 13, "deletions": 54, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7e4345ca798cf5d2edc11dd6c3311f9b89c42261/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4345ca798cf5d2edc11dd6c3311f9b89c42261/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "patch": "@@ -5,7 +5,7 @@ use crate::hir::{GenericParam, ItemLocalId};\n use crate::hir::{GenericParamKind, LifetimeParamKind};\n use crate::ty;\n \n-use crate::util::nodemap::{FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n+use crate::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_macros::HashStable;\n \n /// The origin of a named lifetime definition.\n@@ -68,60 +68,19 @@ pub type ObjectLifetimeDefault = Set1<Region>;\n \n /// Maps the id of each lifetime reference to the lifetime decl\n /// that it corresponds to.\n-#[derive(HashStable)]\n+#[derive(Default, HashStable)]\n pub struct ResolveLifetimes {\n-    defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n-    late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n-    object_lifetime_defaults:\n-        FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n-}\n+    /// Maps from every use of a named (not anonymous) lifetime to a\n+    /// `Region` describing how that region is bound\n+    pub defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n \n-impl ResolveLifetimes {\n-    pub fn new(\n-        defs: HirIdMap<Region>,\n-        late_bound: HirIdSet,\n-        object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n-    ) -> Self {\n-        let defs = {\n-            let mut map = FxHashMap::<_, FxHashMap<_, _>>::default();\n-            for (hir_id, v) in defs {\n-                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n-                map.insert(hir_id.local_id, v);\n-            }\n-            map\n-        };\n-        let late_bound = {\n-            let mut map = FxHashMap::<_, FxHashSet<_>>::default();\n-            for hir_id in late_bound {\n-                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n-                map.insert(hir_id.local_id);\n-            }\n-            map\n-        };\n-        let object_lifetime_defaults = {\n-            let mut map = FxHashMap::<_, FxHashMap<_, _>>::default();\n-            for (hir_id, v) in object_lifetime_defaults {\n-                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n-                map.insert(hir_id.local_id, v);\n-            }\n-            map\n-        };\n-\n-        Self { defs, late_bound, object_lifetime_defaults }\n-    }\n+    /// Set of lifetime def ids that are late-bound; a region can\n+    /// be late-bound if (a) it does NOT appear in a where-clause and\n+    /// (b) it DOES appear in the arguments.\n+    pub late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n \n-    pub fn named_region_map(&self, id: &LocalDefId) -> Option<&FxHashMap<ItemLocalId, Region>> {\n-        self.defs.get(id)\n-    }\n-\n-    pub fn is_late_bound_map(&self, id: &LocalDefId) -> Option<&FxHashSet<ItemLocalId>> {\n-        self.late_bound.get(id)\n-    }\n-\n-    pub fn object_lifetime_defaults_map(\n-        &self,\n-        id: &LocalDefId,\n-    ) -> Option<&FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>> {\n-        self.object_lifetime_defaults.get(id)\n-    }\n+    /// For each type and trait definition, maps type parameters\n+    /// to the trait object lifetime defaults computed from them.\n+    pub object_lifetime_defaults:\n+        FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n }"}, {"sha": "345974ae243e9dfb368bb81393c9116913675a42", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e4345ca798cf5d2edc11dd6c3311f9b89c42261/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e4345ca798cf5d2edc11dd6c3311f9b89c42261/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=7e4345ca798cf5d2edc11dd6c3311f9b89c42261", "patch": "@@ -280,17 +280,17 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n \n         named_region_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).named_region_map(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).defs.get(&id)\n         },\n \n         is_late_bound_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).is_late_bound_map(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&id)\n         },\n \n         object_lifetime_defaults_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults_map(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults.get(&id)\n         },\n \n         ..*providers\n@@ -308,11 +308,21 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes\n \n     let named_region_map = krate(tcx);\n \n-    let rl = ResolveLifetimes::new(\n-        named_region_map.defs,\n-        named_region_map.late_bound,\n-        named_region_map.object_lifetime_defaults,\n-    );\n+    let mut rl = ResolveLifetimes::default();\n+\n+    for (hir_id, v) in named_region_map.defs {\n+        let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n+        map.insert(hir_id.local_id, v);\n+    }\n+    for hir_id in named_region_map.late_bound {\n+        let map = rl.late_bound.entry(hir_id.owner_local_def_id()).or_default();\n+        map.insert(hir_id.local_id);\n+    }\n+    for (hir_id, v) in named_region_map.object_lifetime_defaults {\n+        let map = rl.object_lifetime_defaults.entry(hir_id.owner_local_def_id()).or_default();\n+        map.insert(hir_id.local_id, v);\n+    }\n+\n     tcx.arena.alloc(rl)\n }\n "}]}