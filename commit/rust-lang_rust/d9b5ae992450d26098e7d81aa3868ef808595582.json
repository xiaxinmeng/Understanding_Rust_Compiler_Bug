{"sha": "d9b5ae992450d26098e7d81aa3868ef808595582", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YjVhZTk5MjQ1MGQyNjA5OGU3ZDgxYWEzODY4ZWY4MDg1OTU1ODI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-02T01:29:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-05T06:20:42Z"}, "message": "Add missing examples for panicking objects", "tree": {"sha": "fa25a55eea8f3425ecc3ef3ad058e8fa688ca6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa25a55eea8f3425ecc3ef3ad058e8fa688ca6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b5ae992450d26098e7d81aa3868ef808595582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b5ae992450d26098e7d81aa3868ef808595582", "html_url": "https://github.com/rust-lang/rust/commit/d9b5ae992450d26098e7d81aa3868ef808595582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b5ae992450d26098e7d81aa3868ef808595582/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908dba0c9477b7dd022a236cb1514ddfca9369f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2", "html_url": "https://github.com/rust-lang/rust/commit/908dba0c9477b7dd022a236cb1514ddfca9369f2"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "45a10d2452851a573f08e85485763cab2d8bf364", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d9b5ae992450d26098e7d81aa3868ef808595582/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b5ae992450d26098e7d81aa3868ef808595582/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=d9b5ae992450d26098e7d81aa3868ef808595582", "patch": "@@ -159,6 +159,23 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n }\n \n /// A struct providing information about a panic.\n+///\n+/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook()`]\n+/// function.\n+///\n+/// [`set_hook()`]: ../../std/panic/fn.set_hook.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct PanicInfo<'a> {\n     payload: &'a (Any + Send),\n@@ -168,7 +185,21 @@ pub struct PanicInfo<'a> {\n impl<'a> PanicInfo<'a> {\n     /// Returns the payload associated with the panic.\n     ///\n-    /// This will commonly, but not always, be a `&'static str` or `String`.\n+    /// This will commonly, but not always, be a `&'static str` or [`String`].\n+    ///\n+    /// [`String`]: ../../std/string/struct.String.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     println!(\"panic occured: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn payload(&self) -> &(Any + Send) {\n         self.payload\n@@ -177,15 +208,54 @@ impl<'a> PanicInfo<'a> {\n     /// Returns information about the location from which the panic originated,\n     /// if available.\n     ///\n-    /// This method will currently always return `Some`, but this may change\n+    /// This method will currently always return [`Some`], but this may change\n     /// in future versions.\n+    ///\n+    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location> {\n         Some(&self.location)\n     }\n }\n \n /// A struct containing information about the location of a panic.\n+///\n+/// This structure is created by the [`location()`] method of [`PanicInfo`].\n+///\n+/// [`location()`]: ../../std/panic/struct.PanicInfo.html#method.location\n+/// [`PanicInfo`]: ../../std/panic/struct.PanicInfo.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     if let Some(location) = panic_info.location() {\n+///         println!(\"panic occured in file '{}' at line {}\", location.file(), location.line());\n+///     } else {\n+///         println!(\"panic occured but can't get location information...\");\n+///     }\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub struct Location<'a> {\n     file: &'a str,\n@@ -194,12 +264,44 @@ pub struct Location<'a> {\n \n impl<'a> Location<'a> {\n     /// Returns the name of the source file from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured in file '{}'\", location.file());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn file(&self) -> &str {\n         self.file\n     }\n \n     /// Returns the line number from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occured at line {}\", location.line());\n+    ///     } else {\n+    ///         println!(\"panic occured but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn line(&self) -> u32 {\n         self.line"}]}