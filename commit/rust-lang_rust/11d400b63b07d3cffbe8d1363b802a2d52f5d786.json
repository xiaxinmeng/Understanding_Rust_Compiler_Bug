{"sha": "11d400b63b07d3cffbe8d1363b802a2d52f5d786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDQwMGI2M2IwN2QzY2ZmYmU4ZDEzNjNiODAyYTJkNTJmNWQ3ODY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-11T16:21:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-11T16:21:28Z"}, "message": "Merge #3944\n\n3944: Look up trait impls by self type r=matklad a=flodiebold\n\nThis speeds up inference in analysis-stats by ~30% (even more with the recursive solver).\r\n\r\nThere's a slight difference in inferred types, which I think comes from pre-existing wrong handling of error types in impls, so I think it's fine.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "d62db2469ddd7f8a0be7815d6170b304680f5e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62db2469ddd7f8a0be7815d6170b304680f5e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d400b63b07d3cffbe8d1363b802a2d52f5d786", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeke6ICRBK7hj4Ov3rIwAAdHIIACGxsKZLXpRpOcge7nsh0CfY\nPlpYDCLdsmlyo3YfNXumcE35lAjy5kVcyvJ/rApLJn1CnUXvM0xYz1q8P2JE1ecq\np3QnTbqA5unIf+NhsLGk2ne67MOPnpb4/nyPptyMNkUBEpiiM5PtBoQuDWsMDS5x\nGXIIatqpoP0je2JC+LBhVxYrSpj1T5ZfGNEBrFTJ44+IP4mUQNRoGYSnysWUIIYA\n9wB/WbfKNN4dJoLpxQ4Cyo0QdSX46KZYMYiW/YzhTupM41O0swf/xqrD7sUN28Db\n6rDWgz0puf7o8AqDgNTCcSMA3x98sgQAK0XqKRDlyDdvw7S98h1bNgAWau1f6uc=\n=o8zv\n-----END PGP SIGNATURE-----\n", "payload": "tree d62db2469ddd7f8a0be7815d6170b304680f5e7a\nparent e7a68c8f55e0770fdeae508a1710509c13aaffa1\nparent a2783df3f00eb2cc8d6832f44fe8aa7ea3be46c8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586622088 +0000\ncommitter GitHub <noreply@github.com> 1586622088 +0000\n\nMerge #3944\n\n3944: Look up trait impls by self type r=matklad a=flodiebold\n\nThis speeds up inference in analysis-stats by ~30% (even more with the recursive solver).\r\n\r\nThere's a slight difference in inferred types, which I think comes from pre-existing wrong handling of error types in impls, so I think it's fine.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d400b63b07d3cffbe8d1363b802a2d52f5d786", "html_url": "https://github.com/rust-lang/rust/commit/11d400b63b07d3cffbe8d1363b802a2d52f5d786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d400b63b07d3cffbe8d1363b802a2d52f5d786/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a68c8f55e0770fdeae508a1710509c13aaffa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a68c8f55e0770fdeae508a1710509c13aaffa1", "html_url": "https://github.com/rust-lang/rust/commit/e7a68c8f55e0770fdeae508a1710509c13aaffa1"}, {"sha": "a2783df3f00eb2cc8d6832f44fe8aa7ea3be46c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2783df3f00eb2cc8d6832f44fe8aa7ea3be46c8", "html_url": "https://github.com/rust-lang/rust/commit/a2783df3f00eb2cc8d6832f44fe8aa7ea3be46c8"}], "stats": {"total": 79, "additions": 65, "deletions": 14}, "files": [{"sha": "33da16b487a9dfdf0c9aa4d2698c68695c3c30dd", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=11d400b63b07d3cffbe8d1363b802a2d52f5d786", "patch": "@@ -11,7 +11,7 @@ use ra_db::{impl_intern_key, salsa, CrateId, Upcast};\n use ra_prof::profile;\n \n use crate::{\n-    method_resolution::CrateImplDefs,\n+    method_resolution::{CrateImplDefs, TyFingerprint},\n     traits::{chalk, AssocTyValue, Impl},\n     Binders, CallableDef, GenericPredicate, InferenceResult, PolyFnSig, Substs, TraitRef, Ty,\n     TyDefId, TypeCtor, ValueTyDefId,\n@@ -65,7 +65,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplDefs>;\n \n     #[salsa::invoke(crate::traits::impls_for_trait_query)]\n-    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;\n+    fn impls_for_trait(\n+        &self,\n+        krate: CrateId,\n+        trait_: TraitId,\n+        self_ty_fp: Option<TyFingerprint>,\n+    ) -> Arc<[ImplId]>;\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]"}, {"sha": "657284fd018ae3da455f24dbe946b8ad55a7e964", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=11d400b63b07d3cffbe8d1363b802a2d52f5d786", "patch": "@@ -34,7 +34,7 @@ impl TyFingerprint {\n     /// Creates a TyFingerprint for looking up an impl. Only certain types can\n     /// have impls: if we have some `struct S`, we can have an `impl S`, but not\n     /// `impl &S`. Hence, this will return `None` for reference types and such.\n-    fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n+    pub(crate) fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n         match ty {\n             Ty::Apply(a_ty) => Some(TyFingerprint::Apply(a_ty.ctor)),\n             _ => None,\n@@ -45,7 +45,7 @@ impl TyFingerprint {\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateImplDefs {\n     impls: FxHashMap<TyFingerprint, Vec<ImplId>>,\n-    impls_by_trait: FxHashMap<TraitId, Vec<ImplId>>,\n+    impls_by_trait: FxHashMap<TraitId, FxHashMap<Option<TyFingerprint>, Vec<ImplId>>>,\n }\n \n impl CrateImplDefs {\n@@ -59,7 +59,14 @@ impl CrateImplDefs {\n             for impl_id in module_data.scope.impls() {\n                 match db.impl_trait(impl_id) {\n                     Some(tr) => {\n-                        res.impls_by_trait.entry(tr.value.trait_).or_default().push(impl_id);\n+                        let self_ty = db.impl_self_ty(impl_id);\n+                        let self_ty_fp = TyFingerprint::for_impl(&self_ty.value);\n+                        res.impls_by_trait\n+                            .entry(tr.value.trait_)\n+                            .or_default()\n+                            .entry(self_ty_fp)\n+                            .or_default()\n+                            .push(impl_id);\n                     }\n                     None => {\n                         let self_ty = db.impl_self_ty(impl_id);\n@@ -79,11 +86,39 @@ impl CrateImplDefs {\n     }\n \n     pub fn lookup_impl_defs_for_trait(&self, tr: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n-        self.impls_by_trait.get(&tr).into_iter().flatten().copied()\n+        self.impls_by_trait\n+            .get(&tr)\n+            .into_iter()\n+            .flat_map(|m| m.values().flat_map(|v| v.iter().copied()))\n+    }\n+\n+    pub fn lookup_impl_defs_for_trait_and_ty(\n+        &self,\n+        tr: TraitId,\n+        fp: TyFingerprint,\n+    ) -> impl Iterator<Item = ImplId> + '_ {\n+        self.impls_by_trait\n+            .get(&tr)\n+            .and_then(|m| m.get(&Some(fp)))\n+            .into_iter()\n+            .flatten()\n+            .copied()\n+            .chain(\n+                self.impls_by_trait\n+                    .get(&tr)\n+                    .and_then(|m| m.get(&None))\n+                    .into_iter()\n+                    .flatten()\n+                    .copied(),\n+            )\n     }\n \n     pub fn all_impls<'a>(&'a self) -> impl Iterator<Item = ImplId> + 'a {\n-        self.impls.values().chain(self.impls_by_trait.values()).flatten().copied()\n+        self.impls\n+            .values()\n+            .chain(self.impls_by_trait.values().flat_map(|m| m.values()))\n+            .flatten()\n+            .copied()\n     }\n }\n "}, {"sha": "43d8d1e802e1fdf7b7c2cba0a3153fefc83cdf6e", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=11d400b63b07d3cffbe8d1363b802a2d52f5d786", "patch": "@@ -7,7 +7,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, DebruijnIndex};\n+use crate::{db::HirDatabase, method_resolution::TyFingerprint, DebruijnIndex};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -40,18 +40,26 @@ pub(crate) fn impls_for_trait_query(\n     db: &dyn HirDatabase,\n     krate: CrateId,\n     trait_: TraitId,\n+    self_ty_fp: Option<TyFingerprint>,\n ) -> Arc<[ImplId]> {\n+    // FIXME: We could be a lot smarter here - because of the orphan rules and\n+    // the fact that the trait and the self type need to be in the dependency\n+    // tree of a crate somewhere for an impl to exist, we could skip looking in\n+    // a lot of crates completely\n     let mut impls = FxHashSet::default();\n     // We call the query recursively here. On the one hand, this means we can\n     // reuse results from queries for different crates; on the other hand, this\n     // will only ever get called for a few crates near the root of the tree (the\n     // ones the user is editing), so this may actually be a waste of memory. I'm\n     // doing it like this mainly for simplicity for now.\n     for dep in &db.crate_graph()[krate].dependencies {\n-        impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n+        impls.extend(db.impls_for_trait(dep.crate_id, trait_, self_ty_fp).iter());\n     }\n     let crate_impl_defs = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_));\n+    match self_ty_fp {\n+        Some(fp) => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait_and_ty(trait_, fp)),\n+        None => impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_)),\n+    }\n     impls.into_iter().collect()\n }\n "}, {"sha": "e05fea8430f352ca19c21d1301b89896072b2573", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d400b63b07d3cffbe8d1363b802a2d52f5d786/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=11d400b63b07d3cffbe8d1363b802a2d52f5d786", "patch": "@@ -16,8 +16,8 @@ use ra_db::{\n \n use super::{builtin, AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n-    db::HirDatabase, display::HirDisplay, utils::generics, ApplicationTy, GenericPredicate,\n-    ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n+    db::HirDatabase, display::HirDisplay, method_resolution::TyFingerprint, utils::generics,\n+    ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n \n pub(super) mod tls;\n@@ -647,19 +647,22 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n \n+        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n+\n+        let self_ty_fp = TyFingerprint::for_impl(&ty);\n+\n         // Note: Since we're using impls_for_trait, only impls where the trait\n         // can be resolved should ever reach Chalk. `impl_datum` relies on that\n         // and will panic if the trait can't be resolved.\n         let mut result: Vec<_> = self\n             .db\n-            .impls_for_trait(self.krate, trait_)\n+            .impls_for_trait(self.krate, trait_, self_ty_fp)\n             .iter()\n             .copied()\n             .map(Impl::ImplDef)\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n-        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref(&Interner).clone());\n         let arg: Option<Ty> =\n             parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref(&Interner).clone()));\n "}]}