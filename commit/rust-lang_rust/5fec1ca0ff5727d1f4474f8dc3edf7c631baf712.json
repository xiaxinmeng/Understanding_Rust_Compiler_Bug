{"sha": "5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZWMxY2EwZmY1NzI3ZDFmNDQ3NGY4ZGMzZWRmN2M2MzFiYWY3MTI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T21:16:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:31:47Z"}, "message": "Use Arena inside hir::ImplItem.", "tree": {"sha": "63e837c8c93696b5b311f9927e059e0e3079f9eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e837c8c93696b5b311f9927e059e0e3079f9eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "html_url": "https://github.com/rust-lang/rust/commit/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7d77363b551eb9a1dc4ae348d213180eae070d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7d77363b551eb9a1dc4ae348d213180eae070d", "html_url": "https://github.com/rust-lang/rust/commit/0f7d77363b551eb9a1dc4ae348d213180eae070d"}], "stats": {"total": 186, "additions": 91, "deletions": 95}, "files": [{"sha": "03282fc99a0d4530119e19f6fe8d78bce1ff7797", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -128,7 +128,7 @@ impl Target {\n         }\n     }\n \n-    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem) -> Target {\n+    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => Target::AssocConst,\n             hir::ImplItemKind::Method(..) => {\n@@ -510,7 +510,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_foreign_item(self, f_item)\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = Target::from_impl_item(self.tcx, impl_item);\n         self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)"}, {"sha": "fcd2d7584207e18f9037ee56ec8f7f24a7175ebb", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -301,7 +301,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_trait_item_ref(&mut self, ii: &'v TraitItemRef) {\n         walk_trait_item_ref(self, ii)\n     }\n-    fn visit_impl_item(&mut self, ii: &'v ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'v ImplItem<'v>) {\n         walk_impl_item(self, ii)\n     }\n     fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef) {\n@@ -893,14 +893,14 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n     visitor.visit_defaultness(defaultness);\n }\n \n-pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n+pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n     let ImplItem {\n         hir_id: _,\n         ident,\n         ref vis,\n         ref defaultness,\n-        ref attrs,\n+        attrs,\n         ref generics,\n         ref kind,\n         span: _,"}, {"sha": "30b41ea4acb3b206b4b7b8ccfdd644d2867256a5", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -47,7 +47,7 @@ use super::intravisit::Visitor;\n pub trait ItemLikeVisitor<'hir> {\n     fn visit_item(&mut self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>);\n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);\n+    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>);\n }\n \n pub struct DeepVisitor<'v, V> {\n@@ -73,7 +73,7 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n         self.visitor.visit_trait_item(trait_item);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n         self.visitor.visit_impl_item(impl_item);\n     }\n }\n@@ -82,7 +82,7 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem);\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>);\n }\n \n pub trait IntoVisitor<'hir> {\n@@ -103,7 +103,7 @@ impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n         self.0.into_visitor().visit_trait_item(trait_item);\n     }\n \n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem) {\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n         self.0.into_visitor().visit_impl_item(impl_item);\n     }\n }"}, {"sha": "74615cbe9455e8d198299f289c168e6f0dd14cd2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -98,7 +98,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n     items: BTreeMap<hir::HirId, hir::Item<'hir>>,\n \n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n-    impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n+    impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem<'hir>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n     exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,"}, {"sha": "1953d6f88f841e57e8e29bce1beea89d8551a476", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -906,14 +906,14 @@ impl LoweringContext<'_, 'hir> {\n         self.expr(span, hir::ExprKind::Err, AttrVec::new())\n     }\n \n-    fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem {\n+    fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem<'hir> {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(ref ty, ref expr) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Const(\n-                    self.lower_ty(ty, ImplTraitContext::disallowed()),\n+                    self.arena.alloc(self.lower_ty(ty, ImplTraitContext::disallowed()).into_inner()),\n                     self.lower_const_body(i.span, expr.as_deref()),\n                 ),\n             ),\n@@ -940,11 +940,13 @@ impl LoweringContext<'_, 'hir> {\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let kind = match ty {\n                     None => {\n-                        hir::ImplItemKind::TyAlias(P(self.ty(i.span, hir::TyKind::Err)))\n+                        let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n+                        hir::ImplItemKind::TyAlias(ty)\n                     }\n                     Some(ty) => match ty.kind.opaque_top_hack() {\n                         None => {\n                             let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                            let ty = self.arena.alloc(ty.into_inner());\n                             hir::ImplItemKind::TyAlias(ty)\n                         }\n                         Some(bs) => {\n@@ -961,7 +963,7 @@ impl LoweringContext<'_, 'hir> {\n         hir::ImplItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs_arena(&i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),"}, {"sha": "ab04a8a10aa2f7d508484cea14ec1cd74ae61e58", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -44,7 +44,7 @@ impl MaybeFnLike for ast::Item<'_> {\n     }\n }\n \n-impl MaybeFnLike for ast::ImplItem {\n+impl MaybeFnLike for ast::ImplItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n             ast::ImplItemKind::Method(..) => true,"}, {"sha": "8e60581fbcef75ad0e147a59e214a53f3c34b113", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -410,7 +410,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'hir ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(ii.hir_id.owner,\n                          self.definitions.opt_def_index(self.hir_to_node_id[&ii.hir_id]).unwrap());\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this| {"}, {"sha": "0a06473ed30a99e3e89d2dd4ac610c8ceaa30c79", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_trait_item(this, i));\n     }\n \n-    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem) {\n+    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_impl_item(this, i));\n     }"}, {"sha": "6803a605437093f4351b3d2fd6f9ad16e2417957", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -451,7 +451,7 @@ impl<'hir> Map<'hir> {\n         self.forest.krate.trait_item(id)\n     }\n \n-    pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem {\n+    pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n         self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n@@ -966,7 +966,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem {\n+    pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem<'hir> {\n         match self.find(id) {\n             Some(Node::ImplItem(item)) => item,\n             _ => bug!(\"expected impl item, found {}\", self.node_to_string(id))\n@@ -1253,7 +1253,7 @@ impl Named for ForeignItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem<'_> { fn name(&self) -> Name { self.ident.name } }\n-impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n+impl Named for ImplItem<'_> { fn name(&self) -> Name { self.ident.name } }\n \n pub fn map_crate<'hir>(sess: &crate::session::Session,\n                        cstore: &CrateStoreDyn,"}, {"sha": "51368d2acc34a5ff2f3e0ee6d92eb88b8bccf527", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -759,7 +759,7 @@ pub struct Crate<'hir> {\n     pub items: BTreeMap<HirId, Item<'hir>>,\n \n     pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n-    pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n+    pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n     pub bodies: BTreeMap<BodyId, Body>,\n     pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n \n@@ -783,7 +783,7 @@ impl Crate<'hir> {\n         &self.trait_items[&id]\n     }\n \n-    pub fn impl_item(&self, id: ImplItemId) -> &ImplItem {\n+    pub fn impl_item(&self, id: ImplItemId) -> &ImplItem<'hir> {\n         &self.impl_items[&id]\n     }\n \n@@ -1938,27 +1938,27 @@ pub struct ImplItemId {\n \n /// Represents anything within an `impl` block.\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct ImplItem {\n+pub struct ImplItem<'hir> {\n     pub ident: Ident,\n     pub hir_id: HirId,\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     pub generics: Generics,\n-    pub kind: ImplItemKind,\n+    pub kind: ImplItemKind<'hir>,\n     pub span: Span,\n }\n \n /// Represents various kinds of content within an `impl`.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum ImplItemKind {\n+pub enum ImplItemKind<'hir> {\n     /// An associated constant of the given type, set to the constant result\n     /// of the expression.\n-    Const(P<Ty>, BodyId),\n+    Const(&'hir Ty, BodyId),\n     /// A method implementation with the given signature and body.\n     Method(FnSig, BodyId),\n     /// An associated type.\n-    TyAlias(P<Ty>),\n+    TyAlias(&'hir Ty),\n     /// An associated `type = impl Trait`.\n     OpaqueTy(GenericBounds),\n }\n@@ -2790,7 +2790,7 @@ pub enum Node<'hir> {\n     Item(&'hir Item<'hir>),\n     ForeignItem(&'hir ForeignItem<'hir>),\n     TraitItem(&'hir TraitItem<'hir>),\n-    ImplItem(&'hir ImplItem),\n+    ImplItem(&'hir ImplItem<'hir>),\n     Variant(&'hir Variant),\n     Field(&'hir StructField),\n     AnonConst(&'hir AnonConst),"}, {"sha": "dc270fc40c989e83d6dd9874ba51d61e8adf4566", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -882,7 +882,7 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::SubItem(ti.hir_id))\n     }\n \n-    pub fn print_impl_item(&mut self, ii: &hir::ImplItem) {\n+    pub fn print_impl_item(&mut self, ii: &hir::ImplItem<'_>) {\n         self.ann.pre(self, AnnNode::SubItem(ii.hir_id));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ii.span.lo());"}, {"sha": "a91535b55162a9756ef47c11d6493676dfd42e3e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -172,7 +172,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem<'_> {\n }\n \n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::ImplItem {\n             hir_id: _,"}, {"sha": "347960ac222feac05324674fd2f587e6fb92a2b4", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n+    fn impl_item_scope_tag(item: &hir::ImplItem<'_>) -> &'static str {\n         match item.kind {\n             hir::ImplItemKind::Method(..) => \"method body\",\n             hir::ImplItemKind::Const(..)"}, {"sha": "490599e582f3e2bba0bc949a8dded28d776ff43b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1085,7 +1085,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         self.context.generics = generics;\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&impl_item.generics);\n         self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |cx| {"}, {"sha": "12417d6089a3f66b95ca1e1387ca2c490a769ec3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -126,8 +126,8 @@ macro_rules! late_lint_methods {\n             );\n             fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n             fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n-            fn check_impl_item(a: &$hir hir::ImplItem);\n-            fn check_impl_item_post(a: &$hir hir::ImplItem);\n+            fn check_impl_item(a: &$hir hir::ImplItem<$hir>);\n+            fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData);\n             fn check_struct_def_post(a: &$hir hir::VariantData);\n             fn check_struct_field(a: &$hir hir::StructField);\n@@ -655,7 +655,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         });\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |builder| {\n             intravisit::walk_impl_item(builder, impl_item);\n         });"}, {"sha": "96faf567463bff321259c1e531b3ce403f8adaed", "filename": "src/librustc/middle/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -33,7 +33,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n         self.observe_item(&trait_item.attrs, trait_item.hir_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         self.observe_item(&impl_item.attrs, impl_item.hir_id);\n     }\n }"}, {"sha": "d87eec05866142eb2c9fe7a65c6d4373d02d65c1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -155,7 +155,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n         // At present, lang items are always items, not trait items.\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n         // At present, lang items are always items, not impl items.\n     }\n }"}, {"sha": "6746df6c7ded183ba931fb189217ea9a7f523812", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -47,7 +47,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: Codegen\n \n fn method_might_be_inlined(\n     tcx: TyCtxt<'_>,\n-    impl_item: &hir::ImplItem,\n+    impl_item: &hir::ImplItem<'_>,\n     impl_src: DefId,\n ) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n@@ -389,7 +389,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n \n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n         // processed in visit_item above\n     }\n }"}, {"sha": "38a7c67b907e900da67001ce7062a33cef6e08df", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -823,7 +823,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n         match impl_item.kind {\n             Method(ref sig, _) => {"}, {"sha": "0aef5b24fc7bca10fe303903fe293d35bebfd564", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         });\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let kind = if self.in_trait_impl {\n             AnnotationKind::Prohibited\n         } else {\n@@ -373,7 +373,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_trait_item(self, ti);\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let impl_def_id = self.tcx.hir().local_def_id(\n             self.tcx.hir().get_parent_item(ii.hir_id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {"}, {"sha": "893aea16fd2b94e216edfa7c76971994c520c67b", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -65,7 +65,7 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n         self.process_attrs(trait_item.hir_id);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         self.process_attrs(impl_item.hir_id);\n     }\n }"}, {"sha": "feab4ca0a31afad92e46f67085a18dc1a1a64157", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -172,7 +172,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         self.process_attrs(impl_item.hir_id, &impl_item.attrs);\n         intravisit::walk_impl_item(self, impl_item);\n     }"}, {"sha": "7c9ed24f53b02b2331c1d59440e09c9db8ca6d49", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -540,7 +540,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n         self.check_item(item.hir_id, item.span);\n     }\n \n-    fn visit_impl_item(&mut self, item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {\n         self.check_item(item.hir_id, item.span);\n     }\n }"}, {"sha": "e3def1756267c48feb491be06a0bb3b5d3abe7ed", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -33,7 +33,7 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }\n "}, {"sha": "2037daded6d30d18f7fa2f3de9574a2c02c2ab66", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -454,7 +454,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                                       desc);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n         if method_context(cx, impl_item.hir_id) == MethodLateContext::TraitImpl {\n             return;\n@@ -1005,7 +1005,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n         self.perform_lint(cx, \"field\", field.hir_id, &field.vis, field.span, false);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem<'_>) {\n         self.perform_lint(cx, \"item\", impl_item.hir_id, &impl_item.vis, impl_item.span, false);\n     }\n }"}, {"sha": "2f06d5f3f7b684a60233081ec15146a587272ff4", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, ii: &hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, ii: &hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Const(..) = ii.kind {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n         }"}, {"sha": "2311e0422f65d6d5d381976e5a57434548a15710", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -34,5 +34,5 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n }"}, {"sha": "10dfc3c72e5cf3e7797bb087400e4ebaba25e245", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -46,7 +46,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n     }\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n }\n \n impl Collector {"}, {"sha": "6ab2027177424c05140fc29182723ea71f248712", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -130,7 +130,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n }\n \n impl Collector<'tcx> {"}, {"sha": "6a80399746822a206775a2cd43e9daf90ae4103f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -945,7 +945,7 @@ impl EncodeContext<'tcx> {\n         });\n         record!(self.per_def.visibility[def_id] <- impl_item.vis);\n         record!(self.per_def.span[def_id] <- ast_item.span);\n-        record!(self.per_def.attributes[def_id] <- &ast_item.attrs);\n+        record!(self.per_def.attributes[def_id] <- ast_item.attrs);\n         self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -1727,7 +1727,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n \n     fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {\n         // handled in `visit_item` above\n     }\n }"}, {"sha": "3479ad6749a9041f07f4d0a74281dfab7c78c060", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -55,14 +55,8 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         }\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })\n         | Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, body_id), .. })\n-        => {\n-            (*body_id, ty.span)\n-        }\n         | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n-        => {\n-            (*body_id, ty.span)\n-        }\n-        Node::TraitItem(\n+        | Node::TraitItem(\n             hir::TraitItem { kind: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n         ) => {\n             (*body_id, ty.span)"}, {"sha": "83a4f224aa257a33fcbb872c6ec71f6b07679fed", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1064,7 +1064,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n         // it's still generic over some `Self: Trait`, so not a root.\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         match ii.kind {\n             hir::ImplItemKind::Method(hir::FnSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);"}, {"sha": "dba5a3dbd2bab1596e1ed7b834964a5df1d3947a", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -421,7 +421,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n         // ignore: we are handling this in `visit_item` above\n     }\n \n-    fn visit_impl_item(&mut self, _item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _item: &hir::ImplItem<'_>) {\n         // ignore: we are handling this in `visit_item` above\n     }\n }\n@@ -636,7 +636,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         intravisit::walk_struct_field(self, field);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.hir_id) {"}, {"sha": "77ee6ce8513c1f9e0771cf5206b07b2753056c96", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n         // Entry fn is never a trait item.\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem<'tcx>) {\n         // Entry fn is never a trait item.\n     }\n }"}, {"sha": "297b527d8462eec98babfaaa4e038344babc0f90", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -193,7 +193,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_trait_item(self, ti)\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n         self.record(\"ImplItem\", Id::Node(ii.hir_id), ii);\n         hir_visit::walk_impl_item(self, ii)\n     }"}, {"sha": "d7872f80d260a1fcd4091d5dad45f548affa1ef5", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -41,7 +41,7 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n }\n \n impl VarianceTest<'tcx> {"}, {"sha": "8ceef5a4b76098aa969ddd075d5aaa8735a1ba55", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -25,7 +25,7 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }\n "}, {"sha": "95f8cc9af3573407e75c541c54052a1c2fa61ab1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1020,7 +1020,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n         self.tables = orig_tables;\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, ii.hir_id, self.empty_tables));\n         intravisit::walk_impl_item(self, ii);\n@@ -1302,7 +1302,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         self.tables = orig_tables;\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, ii.hir_id, self.empty_tables));\n         intravisit::walk_impl_item(self, ii);"}, {"sha": "e6de2b279fca278973c6e6cc38258b10d5a938d1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -679,7 +679,7 @@ impl Visitor<'tcx> for ClauseDumper<'tcx> {\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         self.process_attrs(impl_item.hir_id, &impl_item.attrs);\n         intravisit::walk_impl_item(self, impl_item);\n     }"}, {"sha": "aecc46d31288f530dc8a08944fd1d55d52460800", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1015,7 +1015,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n \n         fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n-        fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {}\n+        fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n     }\n \n     tcx.hir().krate().visit_all_item_likes(&mut Visitor {"}, {"sha": "5ba03ab753b354fdd384cb3c6e184a494bf10ece", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -755,7 +755,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n         check_item_type(self.tcx, i);\n     }\n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) { }\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) { }\n }\n \n pub fn check_wf_new(tcx: TyCtxt<'_>) {\n@@ -1865,7 +1865,7 @@ fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item\n \n fn report_forbidden_specialization(\n     tcx: TyCtxt<'_>,\n-    impl_item: &hir::ImplItem,\n+    impl_item: &hir::ImplItem<'_>,\n     parent_impl: DefId,\n ) {\n     let mut err = struct_span_err!(\n@@ -1895,7 +1895,7 @@ fn check_specialization_validity<'tcx>(\n     trait_def: &ty::TraitDef,\n     trait_item: &ty::AssocItem,\n     impl_id: DefId,\n-    impl_item: &hir::ImplItem,\n+    impl_item: &hir::ImplItem<'_>,\n ) {\n     let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,"}, {"sha": "5b7513b52633833bda728965a5306e39ec0d7e38", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1093,7 +1093,7 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n         self.tcx.ensure().check_trait_item_well_formed(def_id);\n     }\n \n-    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n         let def_id = self.tcx.hir().local_def_id(impl_item.hir_id);\n         self.tcx.ensure().check_impl_item_well_formed(def_id);"}, {"sha": "7377c4df9790730e44a614efac123e81ecb2a202", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -41,7 +41,7 @@ impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }\n \n@@ -234,6 +234,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }"}, {"sha": "16fe6d529a417664879066ae97cdb692b6b4f9c6", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -257,7 +257,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }\n "}, {"sha": "1acbf0795a6b660bbe4fa80abb36e6c175ea5fea", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -101,6 +101,6 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'v>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'v>) {\n     }\n }"}, {"sha": "109609f5d49753e35334562a65c3a8cab5174b6b", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -221,6 +221,6 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }"}, {"sha": "324ac0a0f355880fa687c9ce49523643e5af0b09", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -81,6 +81,6 @@ impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n     }\n }"}, {"sha": "9d260bde751e5f69a4ab2f3f8ab38ed45013e308", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -150,7 +150,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         convert_impl_item(self.tcx, impl_item.hir_id);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n@@ -1702,7 +1702,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 intravisit::walk_item(self, it);\n             }\n         }\n-        fn visit_impl_item(&mut self, it: &'tcx ImplItem) {\n+        fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n             let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The opaque type itself or its children are not within its reveal scope."}, {"sha": "7bcc5386445ec35ca20e53e964b668d89d939d79", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -91,7 +91,7 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n \n     fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) { }\n \n-    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) { }\n }\n \n fn enforce_impl_params_are_constrained("}, {"sha": "553c93e09582fededeb93dfa5c14ff1cb32aadd5", "filename": "src/librustc_typeck/namespace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -19,8 +19,8 @@ impl From<ty::AssocKind> for Namespace {\n     }\n }\n \n-impl<'a> From <&'a hir::ImplItemKind> for Namespace {\n-    fn from(impl_kind: &'a hir::ImplItemKind) -> Self {\n+impl<'a> From <&'a hir::ImplItemKind<'_>> for Namespace {\n+    fn from(impl_kind: &'a hir::ImplItemKind<'_>) -> Self {\n         match *impl_kind {\n             hir::ImplItemKind::OpaqueTy(..) |\n             hir::ImplItemKind::TyAlias(..) => Namespace::Type,"}, {"sha": "e3947a84989e769b2351173cbec39a8e13f5cc6c", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -115,7 +115,7 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n \n     fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {}\n \n-    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) {}\n }\n \n fn insert_required_predicates_to_be_wf<'tcx>("}, {"sha": "081d0ff1e160033b476966be82f189d206c6000c", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -34,5 +34,5 @@ impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n }"}, {"sha": "1d16562e0e6959bba4a48afff5a904952049693e", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Method(..) = impl_item.kind {\n             self.visit_node_helper(impl_item.hir_id);\n         }"}, {"sha": "c97ac24ce502230f0b26002b67cb31ddf3df1218", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n+    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Method(..) = impl_item.kind {\n             self.add_inferreds_for_item(impl_item.hir_id);\n         }"}, {"sha": "1233be43e09fa31bfbfc2c18475255192e9c9730", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -30,5 +30,5 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) { }\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) { }\n }"}, {"sha": "55c3e9e4a244aaa1817089d34753b66b0fd41455", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -1127,7 +1127,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n     }\n }\n \n-impl Clean<Item> for hir::ImplItem {\n+impl Clean<Item> for hir::ImplItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.kind {\n             hir::ImplItemKind::Const(ref ty, expr) => {"}, {"sha": "6aa23248719e8552d485e9f62804afd209ee0de1", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fec1ca0ff5727d1f4474f8dc3edf7c631baf712/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=5fec1ca0ff5727d1f4474f8dc3edf7c631baf712", "patch": "@@ -206,7 +206,7 @@ pub struct Impl<'hir> {\n     pub generics: &'hir hir::Generics,\n     pub trait_: &'hir Option<hir::TraitRef>,\n     pub for_: &'hir hir::Ty,\n-    pub items: Vec<&'hir hir::ImplItem>,\n+    pub items: Vec<&'hir hir::ImplItem<'hir>>,\n     pub attrs: &'hir [ast::Attribute],\n     pub whence: Span,\n     pub vis: &'hir hir::Visibility,"}]}