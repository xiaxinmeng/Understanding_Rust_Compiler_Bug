{"sha": "ea733b589c2c12b1b635d18ec033122eaa3e0d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzMzYjU4OWMyYzEyYjFiNjM1ZDE4ZWMwMzMxMjJlYWEzZTBkMDY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-16T22:23:29Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:14:16Z"}, "message": "No need to store Definitions in RefCell within HIR map", "tree": {"sha": "3251a19a7fe20f8e8cbc9f1a6a896f95f2a87e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3251a19a7fe20f8e8cbc9f1a6a896f95f2a87e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea733b589c2c12b1b635d18ec033122eaa3e0d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea733b589c2c12b1b635d18ec033122eaa3e0d06", "html_url": "https://github.com/rust-lang/rust/commit/ea733b589c2c12b1b635d18ec033122eaa3e0d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea733b589c2c12b1b635d18ec033122eaa3e0d06/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d26294cd2d1034accf7b7b317c877a4a9b28af", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d26294cd2d1034accf7b7b317c877a4a9b28af", "html_url": "https://github.com/rust-lang/rust/commit/e0d26294cd2d1034accf7b7b317c877a4a9b28af"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7b827b0a7e5a9d9153af3b53b6338ba3055a5fe5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea733b589c2c12b1b635d18ec033122eaa3e0d06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea733b589c2c12b1b635d18ec033122eaa3e0d06/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ea733b589c2c12b1b635d18ec033122eaa3e0d06", "patch": "@@ -29,7 +29,7 @@ use hir::*;\n use hir::print as pprust;\n \n use arena::TypedArena;\n-use std::cell::{RefCell, Ref};\n+use std::cell::RefCell;\n use std::io;\n use std::mem;\n \n@@ -221,7 +221,7 @@ pub struct Map<'ast> {\n     /// plain old integers.\n     map: RefCell<Vec<MapEntry<'ast>>>,\n \n-    definitions: RefCell<Definitions>,\n+    definitions: Definitions,\n \n     /// All NodeIds that are numerically greater or equal to this value come\n     /// from inlined items.\n@@ -392,16 +392,16 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn num_local_def_ids(&self) -> usize {\n-        self.definitions.borrow().len()\n+        self.definitions.len()\n     }\n \n-    pub fn definitions(&self) -> Ref<Definitions> {\n-        self.definitions.borrow()\n+    pub fn definitions(&self) -> &Definitions {\n+        &self.definitions\n     }\n \n     pub fn def_key(&self, def_id: DefId) -> DefKey {\n         assert!(def_id.is_local());\n-        self.definitions.borrow().def_key(def_id.index)\n+        self.definitions.def_key(def_id.index)\n     }\n \n     pub fn def_path_from_id(&self, id: NodeId) -> Option<DefPath> {\n@@ -412,11 +412,11 @@ impl<'ast> Map<'ast> {\n \n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n         assert!(def_id.is_local());\n-        self.definitions.borrow().def_path(def_id.index)\n+        self.definitions.def_path(def_id.index)\n     }\n \n     pub fn def_index_for_def_key(&self, def_key: DefKey) -> Option<DefIndex> {\n-        self.definitions.borrow().def_index_for_def_key(def_key)\n+        self.definitions.def_index_for_def_key(def_key)\n     }\n \n     pub fn local_def_id(&self, node: NodeId) -> DefId {\n@@ -427,11 +427,11 @@ impl<'ast> Map<'ast> {\n     }\n \n     pub fn opt_local_def_id(&self, node: NodeId) -> Option<DefId> {\n-        self.definitions.borrow().opt_local_def_id(node)\n+        self.definitions.opt_local_def_id(node)\n     }\n \n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> {\n-        self.definitions.borrow().as_local_node_id(def_id)\n+        self.definitions.as_local_node_id(def_id)\n     }\n \n     fn entry_count(&self) -> usize {\n@@ -940,7 +940,7 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest,\n         forest: forest,\n         dep_graph: forest.dep_graph.clone(),\n         map: RefCell::new(map),\n-        definitions: RefCell::new(definitions),\n+        definitions: definitions,\n         local_node_id_watermark: local_node_id_watermark,\n         local_def_id_watermark: local_def_id_watermark,\n     }"}]}