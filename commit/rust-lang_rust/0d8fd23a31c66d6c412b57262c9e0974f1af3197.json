{"sha": "0d8fd23a31c66d6c412b57262c9e0974f1af3197", "node_id": "C_kwDOAAsO6NoAKDBkOGZkMjNhMzFjNjZkNmM0MTJiNTcyNjJjOWUwOTc0ZjFhZjMxOTc", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-10-21T03:57:28Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-11-03T05:47:28Z"}, "message": "implement review suggestions", "tree": {"sha": "d122216acb68215c64421d4cafccbe40629a3f71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d122216acb68215c64421d4cafccbe40629a3f71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8fd23a31c66d6c412b57262c9e0974f1af3197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8fd23a31c66d6c412b57262c9e0974f1af3197", "html_url": "https://github.com/rust-lang/rust/commit/0d8fd23a31c66d6c412b57262c9e0974f1af3197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8fd23a31c66d6c412b57262c9e0974f1af3197/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8e088bd8d7276bc958a748d0892e19c95dc184", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8e088bd8d7276bc958a748d0892e19c95dc184", "html_url": "https://github.com/rust-lang/rust/commit/bd8e088bd8d7276bc958a748d0892e19c95dc184"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "b56dc65f0b2f30f7e711b21c018ffd9992f92f4a", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=0d8fd23a31c66d6c412b57262c9e0974f1af3197", "patch": "@@ -380,7 +380,7 @@ impl<R: Read> BufRead for BufReader<R> {\n \n             let mut readbuf = ReadBuf::uninit(&mut self.buf);\n \n-            // SAFETY: `self.init` is either 0 set to `readbuf.initialized_len()`\n+            // SAFETY: `self.init` is either 0 or set to `readbuf.initialized_len()`\n             // from the last time this function was called\n             unsafe {\n                 readbuf.assume_init(self.init);"}, {"sha": "5ecdb6e8158fc615fb277a53e4f62fb51b024771", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=0d8fd23a31c66d6c412b57262c9e0974f1af3197", "patch": "@@ -371,8 +371,9 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         }\n \n         let mut read_buf = ReadBuf::uninit(buf.spare_capacity_mut());\n+\n+        // SAFETY: These bytes were initalized but not filled in the previous loop\n         unsafe {\n-            // add back extra initalized bytes, we don't want to reinitalize initalized bytes\n             read_buf.assume_init(initialized);\n         }\n \n@@ -389,6 +390,8 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n         // store how much was initialized but not filled\n         initialized = read_buf.initialized_len() - read_buf.filled_len();\n         let new_len = read_buf.filled_len() + buf.len();\n+\n+        // SAFETY: ReadBuf's invariants mean this much memory is init\n         unsafe {\n             buf.set_len(new_len);\n         }\n@@ -2558,11 +2561,17 @@ impl<T: Read> Read for Take<T> {\n         let prev_filled = buf.filled_len();\n \n         if self.limit <= buf.remaining() as u64 {\n-            let extra_init = buf.initialized_len() - buf.filled_len();\n-            let ibuf = unsafe { &mut buf.unfilled_mut()[..self.limit as usize] };\n+            // if we just use an as cast to convert, limit may wrap around on a 32 bit target\n+            let limit = cmp::min(self.limit, usize::MAX as u64) as usize;\n+\n+            let extra_init = cmp::min(limit as usize, buf.initialized_len() - buf.filled_len());\n+\n+            // SAFETY: no uninit data is written to ibuf\n+            let ibuf = unsafe { &mut buf.unfilled_mut()[..limit] };\n \n             let mut sliced_buf = ReadBuf::uninit(ibuf);\n \n+            // SAFETY: extra_init bytes of ibuf are known to be initialized\n             unsafe {\n                 sliced_buf.assume_init(extra_init);\n             }\n@@ -2574,6 +2583,7 @@ impl<T: Read> Read for Take<T> {\n \n             // sliced_buf / ibuf must drop here\n \n+            // SAFETY: new_init bytes of buf's unfilled buffer have been initialized\n             unsafe {\n                 buf.assume_init(new_init);\n             }"}, {"sha": "b7f17368bce2ca9ab7110d48e2f89e1e0c4edcd0", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=0d8fd23a31c66d6c412b57262c9e0974f1af3197", "patch": "@@ -43,7 +43,7 @@ impl<'a> ReadBuf<'a> {\n         let len = buf.len();\n \n         ReadBuf {\n-            //SAFETY: inintialized data never becoming uninitialized is an invariant of ReadBuf\n+            //SAFETY: initialized data never becoming uninitialized is an invariant of ReadBuf\n             buf: unsafe { (buf as *mut [u8]).as_uninit_slice_mut().unwrap() },\n             filled: 0,\n             initialized: len,\n@@ -135,10 +135,10 @@ impl<'a> ReadBuf<'a> {\n     pub fn initialize_unfilled_to(&mut self, n: usize) -> &mut [u8] {\n         assert!(self.remaining() >= n);\n \n-        //dont try to do any zeroing if we already have enough initialized\n-        if n > (self.initialized - self.filled) {\n-            let uninit = (n + self.filled) - self.initialized;\n-\n+        let extra_init = self.initialized - self.filled;\n+        // If we dont have enough initialized, do zeroing\n+        if n > extra_init {\n+            let uninit = n - extra_init;\n             let unfilled = &mut self.uninitialized_mut()[0..uninit];\n \n             for byte in unfilled.iter_mut() {"}, {"sha": "3b7a5a56d22520bf1eca18f778f84c4c5bd715d4", "filename": "library/std/src/io/readbuf/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8fd23a31c66d6c412b57262c9e0974f1af3197/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf%2Ftests.rs?ref=0d8fd23a31c66d6c412b57262c9e0974f1af3197", "patch": "@@ -167,3 +167,15 @@ fn append() {\n     assert_eq!(rbuf.filled_len(), 16);\n     assert_eq!(rbuf.filled(), [1; 16]);\n }\n+\n+#[test]\n+fn filled_mut() {\n+    let mut buf = [0; 16];\n+    let mut rbuf = ReadBuf::new(&mut buf);\n+\n+    rbuf.add_filled(8);\n+\n+    let filled = rbuf.filled().to_vec();\n+\n+    assert_eq!(&*filled, &*rbuf.filled_mut());\n+}"}]}