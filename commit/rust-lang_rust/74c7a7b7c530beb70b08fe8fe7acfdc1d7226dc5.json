{"sha": "74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzdhN2I3YzUzMGJlYjcwYjA4ZmU4ZmU3YWNmZGMxZDcyMjZkYzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-25T15:24:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-25T15:24:48Z"}, "message": "Replace unimplemented! with unreachable! when it will never be supported", "tree": {"sha": "87dcaaf47cda381e660124cdd0e00e33b1b7048e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87dcaaf47cda381e660124cdd0e00e33b1b7048e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "html_url": "https://github.com/rust-lang/rust/commit/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242f2e3c7588574eb5f399dc4cde8f75d7e3e294", "url": "https://api.github.com/repos/rust-lang/rust/commits/242f2e3c7588574eb5f399dc4cde8f75d7e3e294", "html_url": "https://github.com/rust-lang/rust/commit/242f2e3c7588574eb5f399dc4cde8f75d7e3e294"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "6af9ddd8894dcf173eba932d040223cbb42513d5", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "patch": "@@ -358,7 +358,7 @@ fn trans_stmt<'tcx>(\n                                 ty::Uint(_) | ty::Int(_) => {\n                                     CValue::by_val(fx.bcx.ins().bnot(val), layout)\n                                 }\n-                                _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n+                                _ => unreachable!(\"un op Not for {:?}\", layout.ty),\n                             }\n                         }\n                         UnOp::Neg => match layout.ty.kind {\n@@ -369,7 +369,7 @@ fn trans_stmt<'tcx>(\n                             ty::Float(_) => {\n                                 CValue::by_val(fx.bcx.ins().fneg(val), layout)\n                             }\n-                            _ => unimplemented!(\"un op Neg for {:?}\", layout.ty),\n+                            _ => unreachable!(\"un op Neg for {:?}\", layout.ty),\n                         },\n                     };\n                     lval.write_cvalue(fx, res);"}, {"sha": "7470b55366c2dce6f67d1d54ffe5d5665ec017d4", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "patch": "@@ -494,7 +494,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 \"unchecked_rem\" => BinOp::Rem,\n                 \"unchecked_shl\" => BinOp::Shl,\n                 \"unchecked_shr\" => BinOp::Shr,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n             let res = crate::num::trans_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n@@ -505,7 +505,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 \"add_with_overflow\" => BinOp::Add,\n                 \"sub_with_overflow\" => BinOp::Sub,\n                 \"mul_with_overflow\" => BinOp::Mul,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n \n             let res = crate::num::trans_checked_int_binop(\n@@ -522,7 +522,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                 \"wrapping_add\" => BinOp::Add,\n                 \"wrapping_sub\" => BinOp::Sub,\n                 \"wrapping_mul\" => BinOp::Mul,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n             let res = crate::num::trans_int_binop(\n                 fx,\n@@ -537,7 +537,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let bin_op = match intrinsic {\n                 \"saturating_add\" => BinOp::Add,\n                 \"saturating_sub\" => BinOp::Sub,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                _ => unreachable!(\"intrinsic {}\", intrinsic),\n             };\n \n             let signed = type_sign(T);\n@@ -605,7 +605,8 @@ pub fn codegen_intrinsic_call<'tcx>(\n \n         transmute, <src_ty, dst_ty> (c from) {\n             assert_eq!(from.layout().ty, src_ty);\n-            let addr = from.force_stack(fx);\n+            let (addr, meta) = from.force_stack(fx);\n+            assert!(meta.is_none());\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::by_ref(addr, dst_layout))\n         };\n@@ -805,7 +806,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                         let hi = swap(bcx, hi);\n                         bcx.ins().iconcat(hi, lo)\n                     }\n-                    ty => unimplemented!(\"bswap {}\", ty),\n+                    ty => unreachable!(\"bswap {}\", ty),\n                 }\n             };\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));"}, {"sha": "103c15eca4136c781e409523d46a7ddce49340b8", "filename": "src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=74c7a7b7c530beb70b08fe8fe7acfdc1d7226dc5", "patch": "@@ -91,7 +91,7 @@ pub fn codegen_binop<'tcx>(\n         ty::Uint(_) | ty::Int(_) => crate::num::trans_int_binop(fx, bin_op, in_lhs, in_rhs),\n         ty::Float(_) => crate::num::trans_float_binop(fx, bin_op, in_lhs, in_rhs),\n         ty::RawPtr(..) | ty::FnPtr(..) => crate::num::trans_ptr_binop(fx, bin_op, in_lhs, in_rhs),\n-        _ => unimplemented!(\n+        _ => unreachable!(\n             \"{:?}({:?}, {:?})\",\n             bin_op,\n             in_lhs.layout().ty,"}]}