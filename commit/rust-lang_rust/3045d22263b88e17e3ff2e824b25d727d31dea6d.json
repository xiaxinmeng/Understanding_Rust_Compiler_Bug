{"sha": "3045d22263b88e17e3ff2e824b25d727d31dea6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNDVkMjIyNjNiODhlMTdlM2ZmMmU4MjRiMjVkNzI3ZDMxZGVhNmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T10:06:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T10:06:57Z"}, "message": "Rollup merge of #66148 - oli-obk:it_must_be_a_sign, r=RalfJung\n\nShow the sign for signed ops on `exact_div`\n\nr? @RalfJung Cc https://github.com/rust-lang/miri/pull/961/files#r341842128\n\nI'm fairly unhappy with the duplication and the general effort required for this.\n\nMaybe it would be better to add a `display` impl for `ImmTy`?", "tree": {"sha": "616646646ad32d231de8429a52d1cc5285fdbd12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616646646ad32d231de8429a52d1cc5285fdbd12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3045d22263b88e17e3ff2e824b25d727d31dea6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5jPBCRBK7hj4Ov3rIwAAdHIIAEESCY9yz4TC/GndP+c8KM00\nL/+7tgo8aNHyMQCIVXErEYh0rQ+yLwYF/v3KEIMKhbHS+zpa7+Y+83uc5lzwJzVl\nU8YXzopstD/NbXvU9T7wn3jC80nQQZp0a+N1TzqNMUTuRxJFbytSMOXjhReNzAFb\n9mriLoAylf5vPajTgLnrCWkDd5a+JJ7hY9XB9lI0RB+g9fpBJnJIm4yR6wffElhq\nAUgVD4MpxDKcgNNefCHD/RL3VsDB/Bxba4YrUGM6Xr8dvRv8c5Ds6jNROqDvk9gU\ndMuBmi8kxraUeZdkjeV+f+6xy8j2TQXYsyfzQS16J90YL6g5gWc57u27TVNMu2Y=\n=+xWg\n-----END PGP SIGNATURE-----\n", "payload": "tree 616646646ad32d231de8429a52d1cc5285fdbd12\nparent 4787e97475de6be9487e3d9255a9c2d3c0bf9252\nparent a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575367617 +0100\ncommitter GitHub <noreply@github.com> 1575367617 +0100\n\nRollup merge of #66148 - oli-obk:it_must_be_a_sign, r=RalfJung\n\nShow the sign for signed ops on `exact_div`\n\nr? @RalfJung Cc https://github.com/rust-lang/miri/pull/961/files#r341842128\n\nI'm fairly unhappy with the duplication and the general effort required for this.\n\nMaybe it would be better to add a `display` impl for `ImmTy`?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3045d22263b88e17e3ff2e824b25d727d31dea6d", "html_url": "https://github.com/rust-lang/rust/commit/3045d22263b88e17e3ff2e824b25d727d31dea6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3045d22263b88e17e3ff2e824b25d727d31dea6d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4787e97475de6be9487e3d9255a9c2d3c0bf9252", "url": "https://api.github.com/repos/rust-lang/rust/commits/4787e97475de6be9487e3d9255a9c2d3c0bf9252", "html_url": "https://github.com/rust-lang/rust/commit/4787e97475de6be9487e3d9255a9c2d3c0bf9252"}, {"sha": "a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f", "html_url": "https://github.com/rust-lang/rust/commit/a3297562f6c1bb8ca7bcb80d265fc41dc10d5a9f"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "75fc6b389e85e55276d5654fce5c515fc1b9ae5d", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3045d22263b88e17e3ff2e824b25d727d31dea6d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3045d22263b88e17e3ff2e824b25d727d31dea6d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3045d22263b88e17e3ff2e824b25d727d31dea6d", "patch": "@@ -424,13 +424,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if self.binary_op(BinOp::Rem, a, b)?.to_bits()? != 0 {\n             // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n-            let b = b.to_scalar().unwrap();\n-            if b == minus1 {\n+            let b_scalar = b.to_scalar().unwrap();\n+            if b_scalar == minus1 {\n                 throw_ub_format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")\n             } else {\n                 throw_ub_format!(\n                     \"exact_div: {} cannot be divided by {} without remainder\",\n-                    a.to_scalar().unwrap(),\n+                    a,\n                     b,\n                 )\n             }"}, {"sha": "48e7193ec39d4358bdbccf20c852164f5829fcd0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3045d22263b88e17e3ff2e824b25d727d31dea6d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3045d22263b88e17e3ff2e824b25d727d31dea6d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3045d22263b88e17e3ff2e824b25d727d31dea6d", "patch": "@@ -19,6 +19,7 @@ use super::{\n };\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n use rustc_macros::HashStable;\n+use syntax::ast;\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n ///\n@@ -100,6 +101,42 @@ pub struct ImmTy<'tcx, Tag=()> {\n     pub layout: TyLayout<'tcx>,\n }\n \n+// `Tag: Copy` because some methods on `Scalar` consume them by value\n+impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match &self.imm {\n+            Immediate::Scalar(ScalarMaybeUndef::Scalar(s)) => match s.to_bits(self.layout.size) {\n+                Ok(s) => {\n+                    match self.layout.ty.kind {\n+                        ty::Int(_) => return write!(\n+                            fmt, \"{}\",\n+                            super::sign_extend(s, self.layout.size) as i128,\n+                        ),\n+                        ty::Uint(_) => return write!(fmt, \"{}\", s),\n+                        ty::Bool if s == 0 => return fmt.write_str(\"false\"),\n+                        ty::Bool if s == 1 => return fmt.write_str(\"true\"),\n+                        ty::Char => if let Some(c) =\n+                            u32::try_from(s).ok().and_then(std::char::from_u32) {\n+                            return write!(fmt, \"{}\", c);\n+                        },\n+                        ty::Float(ast::FloatTy::F32) => if let Ok(u) = u32::try_from(s) {\n+                            return write!(fmt, \"{}\", f32::from_bits(u));\n+                        },\n+                        ty::Float(ast::FloatTy::F64) => if let Ok(u) = u64::try_from(s) {\n+                            return write!(fmt, \"{}\", f64::from_bits(u));\n+                        },\n+                        _ => {},\n+                    }\n+                    write!(fmt, \"{:x}\", s)\n+                },\n+                Err(_) => fmt.write_str(\"{pointer}\"),\n+            },\n+            Immediate::Scalar(ScalarMaybeUndef::Undef) => fmt.write_str(\"{undef}\"),\n+            Immediate::ScalarPair(..) => fmt.write_str(\"{wide pointer or tuple}\"),\n+        }\n+    }\n+}\n+\n impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n     type Target = Immediate<Tag>;\n     #[inline(always)]"}]}