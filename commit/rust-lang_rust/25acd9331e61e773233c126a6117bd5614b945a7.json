{"sha": "25acd9331e61e773233c126a6117bd5614b945a7", "node_id": "C_kwDOAAsO6NoAKDI1YWNkOTMzMWU2MWU3NzMyMzNjMTI2YTYxMTdiZDU2MTRiOTQ1YTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-23T02:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T02:05:31Z"}, "message": "Rollup merge of #94713 - clarfonthey:is_char_surrogate, r=scottmcm\n\nAdd u16::is_utf16_surrogate\n\nRight now, there are methods in the standard library for encoding and decoding UTF-16, but at least for the moment, there aren't any methods specifically for `u16` to help work with UTF-16 data. Since the full logic already exists, this wouldn't really add any code, just expose what's already there.\n\nThis method in particular is useful for working with the data returned by Windows `OsStrExt::encode_wide`. Initially, I was planning to also offer a `TryFrom<u16> for char`, but decided against it for now. There is plenty of code in rustc that could be rewritten to use this method, but I only checked within the standard library to replace them.\n\nI think that offering more UTF-16-related methods to u16 would be useful, but I think this one is a good start. For example, one useful method might be `u16::is_pattern_whitespace`, which would check if something is the Unicode `Pattern_Whitespace` category. We can get away with this because all of the `Pattern_Whitespace` characters are in the basic multilingual plane, and hence we don't need to check for surrogates.", "tree": {"sha": "bbc3a4c3ec6c88f579215e369d242cc509faca87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbc3a4c3ec6c88f579215e369d242cc509faca87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25acd9331e61e773233c126a6117bd5614b945a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOoBrCRBK7hj4Ov3rIwAAEBYIABGbv0hvAutQUJ4hUG1aea0D\nw8nKPw9oz1YpZ7Q6HgQEtd+c24rMSTZx/DfwSSZSObMXaCQt4NRFFZo6PX0oqoz8\nTsSnf0oVvHnB7CkrtP6byRpBqJ4EpYSo9F3LjyX2GozEeTyQgJkAtFSg9u8+3GQN\ng7rvTXgGZF1FQ0kUvdjgxzdjkRpRZGpu2M4at3PxDdxqDtWBg0B/ZdkTlVWbKtfc\nRg8q3nVOZQdrHQs8G8Vkx6jDoM95FbeCBALYy8bAZu3c7/H7ePmHL8PVkS2FYQda\nsXqknIPOplbj0jk29Mm5fqAu7yHpeDTwuXCmLhXUOZFPaBgsgkf3+ceD+6VztGc=\n=SMYe\n-----END PGP SIGNATURE-----\n", "payload": "tree bbc3a4c3ec6c88f579215e369d242cc509faca87\nparent 0e86cabdceb4205572505b9d238f7a4e859c362b\nparent d5803678c16da47c807102635d7d6cfdac8bde82\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648001131 +0100\ncommitter GitHub <noreply@github.com> 1648001131 +0100\n\nRollup merge of #94713 - clarfonthey:is_char_surrogate, r=scottmcm\n\nAdd u16::is_utf16_surrogate\n\nRight now, there are methods in the standard library for encoding and decoding UTF-16, but at least for the moment, there aren't any methods specifically for `u16` to help work with UTF-16 data. Since the full logic already exists, this wouldn't really add any code, just expose what's already there.\n\nThis method in particular is useful for working with the data returned by Windows `OsStrExt::encode_wide`. Initially, I was planning to also offer a `TryFrom<u16> for char`, but decided against it for now. There is plenty of code in rustc that could be rewritten to use this method, but I only checked within the standard library to replace them.\n\nI think that offering more UTF-16-related methods to u16 would be useful, but I think this one is a good start. For example, one useful method might be `u16::is_pattern_whitespace`, which would check if something is the Unicode `Pattern_Whitespace` category. We can get away with this because all of the `Pattern_Whitespace` characters are in the basic multilingual plane, and hence we don't need to check for surrogates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25acd9331e61e773233c126a6117bd5614b945a7", "html_url": "https://github.com/rust-lang/rust/commit/25acd9331e61e773233c126a6117bd5614b945a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25acd9331e61e773233c126a6117bd5614b945a7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e86cabdceb4205572505b9d238f7a4e859c362b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e86cabdceb4205572505b9d238f7a4e859c362b", "html_url": "https://github.com/rust-lang/rust/commit/0e86cabdceb4205572505b9d238f7a4e859c362b"}, {"sha": "d5803678c16da47c807102635d7d6cfdac8bde82", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5803678c16da47c807102635d7d6cfdac8bde82", "html_url": "https://github.com/rust-lang/rust/commit/d5803678c16da47c807102635d7d6cfdac8bde82"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "794c9c13cc3b832914537d768d44e2608746b350", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=25acd9331e61e773233c126a6117bd5614b945a7", "patch": "@@ -91,7 +91,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n             None => self.iter.next()?,\n         };\n \n-        if u < 0xD800 || 0xDFFF < u {\n+        if !u.is_utf16_surrogate() {\n             // SAFETY: not a surrogate\n             Some(Ok(unsafe { from_u32_unchecked(u as u32) }))\n         } else if u >= 0xDC00 {\n@@ -125,7 +125,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n             // buf is empty, no additional elements from it.\n             None => (0, 0),\n             // `u` is a non surrogate, so it's always an additional character.\n-            Some(u) if u < 0xD800 || 0xDFFF < u => (1, 1),\n+            Some(u) if !u.is_utf16_surrogate() => (1, 1),\n             // `u` is a leading surrogate (it can never be a trailing surrogate and\n             // it's a surrogate due to the previous branch) and `self.iter` is empty.\n             //"}, {"sha": "1a85e2ef7b6073da9f43566667a03d8bb5ee78c6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=25acd9331e61e773233c126a6117bd5614b945a7", "patch": "@@ -93,7 +93,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n //\n-// Library features for const fns:\n+// Library features:\n #![feature(const_align_offset)]\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n@@ -146,6 +146,8 @@\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(str_internals)]\n+#![feature(utf16_extra)]\n+#![feature(utf16_extra_const)]\n #![feature(variant_count)]\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]"}, {"sha": "dca8ffa4e2c89388cc6e72f340512f1b6d648839", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acd9331e61e773233c126a6117bd5614b945a7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=25acd9331e61e773233c126a6117bd5614b945a7", "patch": "@@ -820,6 +820,31 @@ impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n     widening_impl! { u16, u32, 16, unsigned }\n+\n+    /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(utf16_extra)]\n+    ///\n+    /// let low_non_surrogate = 0xA000u16;\n+    /// let low_surrogate = 0xD800u16;\n+    /// let high_surrogate = 0xDC00u16;\n+    /// let high_non_surrogate = 0xE000u16;\n+    ///\n+    /// assert!(!low_non_surrogate.is_utf16_surrogate());\n+    /// assert!(low_surrogate.is_utf16_surrogate());\n+    /// assert!(high_surrogate.is_utf16_surrogate());\n+    /// assert!(!high_non_surrogate.is_utf16_surrogate());\n+    /// ```\n+    #[must_use]\n+    #[unstable(feature = \"utf16_extra\", issue = \"94919\")]\n+    #[rustc_const_unstable(feature = \"utf16_extra_const\", issue = \"94919\")]\n+    #[inline]\n+    pub const fn is_utf16_surrogate(self) -> bool {\n+        matches!(self, 0xD800..=0xDFFF)\n+    }\n }\n \n #[lang = \"u32\"]"}]}