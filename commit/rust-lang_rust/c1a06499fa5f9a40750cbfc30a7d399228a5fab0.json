{"sha": "c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTA2NDk5ZmE1ZjlhNDA3NTBjYmZjMzBhN2QzOTkyMjhhNWZhYjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-04T09:52:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-04T09:52:57Z"}, "message": "Merge #2981\n\n2981: vscode: Add ability to call onEnter without overriding \"type\". r=matklad a=71\n\nBefore this PR, the only way to get enhanced typing (right now, only with `onEnter`) was to override VS Code's `type` command. This leads to issues with extensions like [VsCodeVim](https://github.com/VSCodeVim/Vim) that need to override `type` as well.\r\n\r\nThis PR adds an additional command, `onEnter`. This command can be used with the following keybinding, which allows the user to get smart `onEnter` behavior without overriding `type`.\r\n\r\n```json\r\n{\r\n    \"key\": \"enter\",\r\n    \"command\": \"rust-analyzer.onEnter\",\r\n    \"when\": \"editorTextFocus && editorLangId == rust\"\r\n}\r\n```\n\nCo-authored-by: Gregoire Geis <git@gregoirege.is>\nCo-authored-by: Gr\u00e9goire Geis <git@gregoirege.is>", "tree": {"sha": "9f2a049a5d9e49c55f41fd27b1a264d051f044c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f2a049a5d9e49c55f41fd27b1a264d051f044c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOT75CRBK7hj4Ov3rIwAAdHIIABClR4Mo6YqjHNYNTle+FCGT\n97BcaaXZX4W5UiMDsb6Q5dylKo4qCHhnpW/db+gG5hfWpc+6fSXx3qrxfEwfxeGp\n/FYkH3jZVf9gQsg92j6BjhHiBkp7uKFxoDw7Yp+6W7sZQYMqLExxqOSu5GSlp/sN\nXWOup70vPqm0RA/XsOT654ybcu4r3+coVXcMiwwuDmNEiK2qMHMBvJJ0yWSKcXjZ\nBgeYvj5w1A9KphYSMkEXzsI6vhwktR53Ek9Vn7ORK7Rb+K+UiS24TA9OoefoyYrj\ndEbu3J/fwVjR3Oh/fyY6u0vS11Pip+o/oVGA74m7+x3eccA6vq2Khtf6Zwh/GEE=\n=pcaa\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f2a049a5d9e49c55f41fd27b1a264d051f044c9\nparent 73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb\nparent 875dc6d1a4973f70cd48b797ae755d1bd7a83fa5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580809977 +0000\ncommitter GitHub <noreply@github.com> 1580809977 +0000\n\nMerge #2981\n\n2981: vscode: Add ability to call onEnter without overriding \"type\". r=matklad a=71\n\nBefore this PR, the only way to get enhanced typing (right now, only with `onEnter`) was to override VS Code's `type` command. This leads to issues with extensions like [VsCodeVim](https://github.com/VSCodeVim/Vim) that need to override `type` as well.\r\n\r\nThis PR adds an additional command, `onEnter`. This command can be used with the following keybinding, which allows the user to get smart `onEnter` behavior without overriding `type`.\r\n\r\n```json\r\n{\r\n    \"key\": \"enter\",\r\n    \"command\": \"rust-analyzer.onEnter\",\r\n    \"when\": \"editorTextFocus && editorLangId == rust\"\r\n}\r\n```\n\nCo-authored-by: Gregoire Geis <git@gregoirege.is>\nCo-authored-by: Gr\u00e9goire Geis <git@gregoirege.is>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "html_url": "https://github.com/rust-lang/rust/commit/c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb", "html_url": "https://github.com/rust-lang/rust/commit/73c36fdbd2060bd455ffeef33dca1ecc2ae07ebb"}, {"sha": "875dc6d1a4973f70cd48b797ae755d1bd7a83fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/875dc6d1a4973f70cd48b797ae755d1bd7a83fa5", "html_url": "https://github.com/rust-lang/rust/commit/875dc6d1a4973f70cd48b797ae755d1bd7a83fa5"}], "stats": {"total": 88, "additions": 37, "deletions": 51}, "files": [{"sha": "c9404a4ddf0cac170668d7c3ca5a6e8d43ca176c", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "patch": "@@ -114,6 +114,11 @@\n                 \"command\": \"rust-analyzer.reload\",\n                 \"title\": \"Restart server\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.onEnter\",\n+                \"title\": \"Enhanced enter key\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -136,6 +141,11 @@\n                 \"command\": \"rust-analyzer.run\",\n                 \"key\": \"ctrl+r\",\n                 \"when\": \"editorTextFocus && editorLangId == rust\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.onEnter\",\n+                \"key\": \"enter\",\n+                \"when\": \"editorTextFocus && !suggestWidgetVisible && editorLangId == rust\"\n             }\n         ],\n         \"configuration\": {\n@@ -157,11 +167,6 @@\n                     \"default\": {},\n                     \"description\": \"Fine grained feature flags to disable annoying features\"\n                 },\n-                \"rust-analyzer.enableEnhancedTyping\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"description\": \"Enables enhanced typing. NOTE: If using a VIM extension, you should set this to false\"\n-                },\n                 \"rust-analyzer.raLspServerPath\": {\n                     \"type\": [\n                         \"string\""}, {"sha": "c636234dadbeab87990972b22b5c78ff52feee61", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "patch": "@@ -1,28 +1,35 @@\n+import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { applySourceChange, SourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n \n-export function onEnter(ctx: Ctx): Cmd {\n-    return async (event: { text: string }) => {\n-        const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || event.text !== '\\n') return false;\n-        if (!client) return false;\n+async function handleKeypress(ctx: Ctx) {\n+    const editor = ctx.activeRustEditor;\n+    const client = ctx.client;\n+    if (!editor) return false;\n+    if (!editor || !client) return false;\n+\n+    const request: lc.TextDocumentPositionParams = {\n+        textDocument: { uri: editor.document.uri.toString() },\n+        position: client.code2ProtocolConverter.asPosition(\n+            editor.selection.active,\n+        ),\n+    };\n+    const change = await client.sendRequest<undefined | SourceChange>(\n+        'rust-analyzer/onEnter',\n+        request,\n+    );\n+    if (!change) return false;\n \n-        const request: lc.TextDocumentPositionParams = {\n-            textDocument: { uri: editor.document.uri.toString() },\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        };\n-        const change = await client.sendRequest<undefined | SourceChange>(\n-            'rust-analyzer/onEnter',\n-            request,\n-        );\n-        if (!change) return false;\n+    await applySourceChange(ctx, change);\n+    return true;\n+}\n+\n+export function onEnter(ctx: Ctx): Cmd {\n+    return async () => {\n+        if (await handleKeypress(ctx)) return;\n \n-        await applySourceChange(ctx, change);\n-        return true;\n+        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n     };\n }"}, {"sha": "aa75943bfdb8003f12c3ea24474afa12b4e06c82", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "patch": "@@ -50,30 +50,6 @@ export class Ctx {\n         this.pushCleanup(d);\n     }\n \n-    overrideCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n-        const defaultCmd = `default:${name}`;\n-        const override = factory(this);\n-        const original = (...args: unknown[]) =>\n-            vscode.commands.executeCommand(defaultCmd, ...args);\n-        try {\n-            const d = vscode.commands.registerCommand(\n-                name,\n-                async (...args: unknown[]) => {\n-                    if (!(await override(...args))) {\n-                        return await original(...args);\n-                    }\n-                },\n-            );\n-            this.pushCleanup(d);\n-        } catch (_) {\n-            vscode.window.showWarningMessage(\n-                'Enhanced typing feature is disabled because of incompatibility ' +\n-                'with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: ' +\n-                'https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n-            );\n-        }\n-    }\n-\n     get subscriptions(): Disposable[] {\n         return this.extCtx.subscriptions;\n     }"}, {"sha": "efc31b2e24507d828c858206151e0274fcbcdbbb", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c1a06499fa5f9a40750cbfc30a7d399228a5fab0/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c1a06499fa5f9a40750cbfc30a7d399228a5fab0", "patch": "@@ -21,16 +21,14 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n     ctx.registerCommand('run', commands.run);\n     ctx.registerCommand('reload', commands.reload);\n+    ctx.registerCommand('onEnter', commands.onEnter);\n \n     // Internal commands which are invoked by the server.\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n-    if (ctx.config.enableEnhancedTyping) {\n-        ctx.overrideCommand('type', commands.onEnter);\n-    }\n     activateStatusDisplay(ctx);\n \n     activateHighlighting(ctx);"}]}