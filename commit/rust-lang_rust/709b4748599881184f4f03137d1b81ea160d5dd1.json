{"sha": "709b4748599881184f4f03137d1b81ea160d5dd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWI0NzQ4NTk5ODgxMTg0ZjRmMDMxMzdkMWI4MWVhMTYwZDVkZDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T19:08:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T19:10:47Z"}, "message": "fix minimal alignment for system allocation functions", "tree": {"sha": "061b9dc4c4bf2af50581b1d5760221709f89d696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061b9dc4c4bf2af50581b1d5760221709f89d696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709b4748599881184f4f03137d1b81ea160d5dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709b4748599881184f4f03137d1b81ea160d5dd1", "html_url": "https://github.com/rust-lang/rust/commit/709b4748599881184f4f03137d1b81ea160d5dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709b4748599881184f4f03137d1b81ea160d5dd1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e960270662e74aa19beee319641e12d67e45aa07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e960270662e74aa19beee319641e12d67e45aa07", "html_url": "https://github.com/rust-lang/rust/commit/e960270662e74aa19beee319641e12d67e45aa07"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "2e2a9062fba853553e5642c659413156a6df3794", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/709b4748599881184f4f03137d1b81ea160d5dd1/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b4748599881184f4f03137d1b81ea160d5dd1/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=709b4748599881184f4f03137d1b81ea160d5dd1", "patch": "@@ -51,6 +51,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Some(this.load_mir(instance.def)?))\n     }\n \n+    /// Returns the minimum alignment for the target architecture.\n+    fn min_align(&self) -> Align {\n+        let this = self.eval_context_ref();\n+        // List taken from `libstd/sys_common/alloc.rs`.\n+        let min_align = match this.tcx.tcx.sess.target.target.arch.as_str() {\n+            \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n+            \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n+            arch => bug!(\"Unsupported target architecture: {}\", arch),\n+        };\n+        Align::from_bytes(min_align).unwrap()\n+    }\n+\n     fn malloc(\n         &mut self,\n         size: u64,\n@@ -61,7 +73,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if size == 0 {\n             Scalar::from_int(0, this.pointer_size())\n         } else {\n-            let align = this.tcx.data_layout.pointer_align.abi;\n+            let align = this.min_align();\n             let ptr = this.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into());\n             if zero_init {\n                 // We just allocated this, the access cannot fail\n@@ -94,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         new_size: u64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let align = this.tcx.data_layout.pointer_align.abi;\n+        let align = this.min_align();\n         if old_ptr.is_null_ptr(this) {\n             if new_size == 0 {\n                 Ok(Scalar::from_int(0, this.pointer_size()))"}, {"sha": "1ea04ec467f1ccdd2ae420cf5cfdbafdebe96813", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/709b4748599881184f4f03137d1b81ea160d5dd1/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b4748599881184f4f03137d1b81ea160d5dd1/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=709b4748599881184f4f03137d1b81ea160d5dd1", "patch": "@@ -6,35 +6,47 @@ use std::alloc::{Global, Alloc, Layout, System};\n use std::slice;\n \n fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n-    let layout = Layout::from_size_align(20, 4).unwrap();\n-    let a = allocator.alloc(layout).unwrap();\n-    allocator.dealloc(a, layout);\n+    for &align in &[4, 8, 16, 32] {\n+        let layout = Layout::from_size_align(20, align).unwrap();\n \n-    let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        for _ in 0..32 {\n+            let a = allocator.alloc(layout).unwrap();\n+            assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+            allocator.dealloc(a, layout);\n+        }\n+\n+        let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n \n-    let p2 = allocator.realloc(p1, Layout::from_size_align(20, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        let p2 = allocator.realloc(p1, layout, 40).unwrap();\n+        let layout = Layout::from_size_align(40, align).unwrap();\n+        assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size == new size\n-    let p3 = allocator.realloc(p2, Layout::from_size_align(40, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        // old size == new size\n+        let p3 = allocator.realloc(p2, layout, 40).unwrap();\n+        assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size > new size\n-    let p4 = allocator.realloc(p3, Layout::from_size_align(40, 4).unwrap(), 10).unwrap();\n-    let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n-    assert_eq!(&slice, &[0_u8; 10]);\n+        // old size > new size\n+        let p4 = allocator.realloc(p3, layout, 10).unwrap();\n+        let layout = Layout::from_size_align(10, align).unwrap();\n+        assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n+        assert_eq!(&slice, &[0_u8; 10]);\n \n-    allocator.dealloc(p4, Layout::from_size_align(10, 4).unwrap());\n+        allocator.dealloc(p4, layout);\n+    }\n } }\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n     let size = 8;\n-    // Greater than `size`.\n-    let align = 16;\n+    // Greater than `size`, and also greater than `MIN_ALIGN`.\n+    let align = 32;\n \n-    let iterations = 5;\n+    let iterations = 32;\n     unsafe {\n         let pointers: Vec<_> = (0..iterations).map(|_| {\n             allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()"}]}