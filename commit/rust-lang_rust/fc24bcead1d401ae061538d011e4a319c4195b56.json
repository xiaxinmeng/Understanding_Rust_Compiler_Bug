{"sha": "fc24bcead1d401ae061538d011e4a319c4195b56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMjRiY2VhZDFkNDAxYWUwNjE1MzhkMDExZTRhMzE5YzQxOTViNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-26T11:41:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-26T11:41:37Z"}, "message": "Auto merge of #86696 - rust-lang:relnotes-1.54.0, r=pietroalbini\n\nUpdate RELEASES.md for 1.54.0\n\n### [Rendered](https://github.com/rust-lang/rust/blob/relnotes-1.54.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`", "tree": {"sha": "bd8b8ff11e2765dc2ceced205b66e379181ff925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd8b8ff11e2765dc2ceced205b66e379181ff925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc24bcead1d401ae061538d011e4a319c4195b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc24bcead1d401ae061538d011e4a319c4195b56", "html_url": "https://github.com/rust-lang/rust/commit/fc24bcead1d401ae061538d011e4a319c4195b56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc24bcead1d401ae061538d011e4a319c4195b56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc856acf3112d241bd4de55ec91df5aef66c352", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc856acf3112d241bd4de55ec91df5aef66c352", "html_url": "https://github.com/rust-lang/rust/commit/cfc856acf3112d241bd4de55ec91df5aef66c352"}, {"sha": "9fc2bfafb18018889ffc001a22f1acb14af2d05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc2bfafb18018889ffc001a22f1acb14af2d05a", "html_url": "https://github.com/rust-lang/rust/commit/9fc2bfafb18018889ffc001a22f1acb14af2d05a"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "19fe97deacca691d621f0bd071c560f7a6de6613", "filename": "RELEASES.md", "status": "modified", "additions": 125, "deletions": 1, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fc24bcead1d401ae061538d011e4a319c4195b56/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc24bcead1d401ae061538d011e4a319c4195b56/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=fc24bcead1d401ae061538d011e4a319c4195b56", "patch": "@@ -1,3 +1,127 @@\n+Version 1.54.0 (2021-07-29)\n+============================\n+\n+Language\n+-----------------------\n+\n+- [You can now use macros for values in built-in attribute macros.][83366]\n+  While a seemingly minor addition on its own, this enables a lot of\n+  powerful functionality when combined correctly. Most notably you can\n+  now include external documentation in your crate by writing the following.\n+  ```rust\n+  #![doc = include_str!(\"README.md\")]\n+  ```\n+  You can also use this to include auto-generated modules:\n+  ```rust\n+  #[path = concat!(env!(\"OUT_DIR\"), \"/generated.rs\")]\n+  mod generated;\n+  ```\n+\n+- [You can now cast between unsized slice types (and types which contain\n+  unsized slices) in `const fn`.][85078]\n+- [You can now use multiple generic lifetimes with `impl Trait` where the\n+   lifetimes don't explicitly outlive another.][84701] In code this means\n+   that you can now have `impl Trait<'a, 'b>` where as before you could\n+   only have `impl Trait<'a, 'b> where 'b: 'a`.\n+\n+Compiler\n+-----------------------\n+\n+- [Rustc will now search for custom JSON targets in\n+  `/lib/rustlib/<target-triple>/target.json` where `/` is the \"sysroot\"\n+  directory.][83800] You can find your sysroot directory by running\n+  `rustc --print sysroot`.\n+- [Added `wasm` as a `target_family` for WebAssembly platforms.][84072]\n+- [You can now use `#[target_feature]` on safe functions when targeting\n+  WebAssembly platforms.][84988]\n+- [Improved debugger output for enums on Windows MSVC platforms.][85292]\n+- [Added tier 3\\* support for `bpfel-unknown-none`\n+   and `bpfeb-unknown-none`.][79608]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+-----------------------\n+\n+- [`panic::panic_any` will now `#[track_caller]`.][85745]\n+- [Added `OutOfMemory` as a variant of `io::ErrorKind`.][84744]\n+- [ `proc_macro::Literal` now implements `FromStr`.][84717]\n+- [The implementations of vendor intrinsics in core::arch have been\n+   significantly refactored.][83278] The main user-visible changes are\n+   a 50% reduction in the size of libcore.rlib and stricter validation\n+   of constant operands passed to intrinsics. The latter is technically\n+   a breaking change, but allows Rust to more closely match the C vendor\n+   intrinsics API.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`BTreeMap::into_keys`]\n+- [`BTreeMap::into_values`]\n+- [`HashMap::into_keys`]\n+- [`HashMap::into_values`]\n+- [`arch::wasm32`]\n+- [`VecDeque::binary_search`]\n+- [`VecDeque::binary_search_by`]\n+- [`VecDeque::binary_search_by_key`]\n+- [`VecDeque::partition_point`]\n+\n+Cargo\n+-----\n+\n+- [Added the `--prune <spec>` option to `cargo-tree` to remove a package from\n+  the dependency graph.][cargo/9520]\n+- [Added the `--depth` option to `cargo-tree` to print only to a certain depth\n+  in the tree ][cargo/9499]\n+- [Added the `no-proc-macro` value to `cargo-tree --edges` to hide procedural\n+  macro dependencies.][cargo/9488]\n+- [A new environment variable named `CARGO_TARGET_TMPDIR` is available.][cargo/9375]\n+  This variable points to a directory that integration tests and benches\n+  can use as a \"scratchpad\" for testing filesystem operations.\n+\n+Compatibility Notes\n+-------------------\n+- [Mixing Option and Result via `?` is no longer permitted in closures for inferred types.][86831]\n+- [Previously unsound code is no longer permitted where different constructors in branches\n+  could require different lifetimes.][85574]\n+- As previously mentioned the [`std::arch` instrinsics now uses stricter const checking][83278]\n+  than before and may reject some previously accepted code.\n+- [`i128` multiplication on Cortex M0+ platforms currently unconditionally causes overflow\n+   when compiled with `codegen-units = 1`.][86063]\n+\n+[85574]: https://github.com/rust-lang/rust/issues/85574\n+[86831]: https://github.com/rust-lang/rust/issues/86831\n+[86063]: https://github.com/rust-lang/rust/issues/86063\n+[86831]: https://github.com/rust-lang/rust/issues/86831\n+[79608]: https://github.com/rust-lang/rust/pull/79608\n+[84988]: https://github.com/rust-lang/rust/pull/84988\n+[84701]: https://github.com/rust-lang/rust/pull/84701\n+[84072]: https://github.com/rust-lang/rust/pull/84072\n+[85745]: https://github.com/rust-lang/rust/pull/85745\n+[84744]: https://github.com/rust-lang/rust/pull/84744\n+[85078]: https://github.com/rust-lang/rust/pull/85078\n+[84717]: https://github.com/rust-lang/rust/pull/84717\n+[83800]: https://github.com/rust-lang/rust/pull/83800\n+[83366]: https://github.com/rust-lang/rust/pull/83366\n+[83278]: https://github.com/rust-lang/rust/pull/83278\n+[85292]: https://github.com/rust-lang/rust/pull/85292\n+[cargo/9520]: https://github.com/rust-lang/cargo/pull/9520\n+[cargo/9499]: https://github.com/rust-lang/cargo/pull/9499\n+[cargo/9488]: https://github.com/rust-lang/cargo/pull/9488\n+[cargo/9375]: https://github.com/rust-lang/cargo/pull/9375\n+[`BTreeMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_keys\n+[`BTreeMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.into_values\n+[`HashMap::into_keys`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_keys\n+[`HashMap::into_values`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.into_values\n+[`arch::wasm32`]: https://doc.rust-lang.org/core/arch/wasm32/index.html\n+[`VecDeque::binary_search`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search\n+[`VecDeque::binary_search_by`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by\n+\n+[`VecDeque::binary_search_by_key`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.binary_search_by_key\n+\n+[`VecDeque::partition_point`]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.partition_point\n+\n Version 1.53.0 (2021-06-17)\n ============================\n \n@@ -1749,7 +1873,7 @@ Language\n - [You can now use `#[repr(transparent)]` on univariant `enum`s.][68122] Meaning\n   that you can create an enum that has the exact layout and ABI of the type\n   it contains.\n-- [You can now use outer attribute procedural macros on inline modules.][64273]  \n+- [You can now use outer attribute procedural macros on inline modules.][64273]\n - [There are some *syntax-only* changes:][67131]\n    - `default` is syntactically allowed before items in `trait` definitions.\n    - Items in `impl`s (i.e. `const`s, `type`s, and `fn`s) may syntactically"}]}