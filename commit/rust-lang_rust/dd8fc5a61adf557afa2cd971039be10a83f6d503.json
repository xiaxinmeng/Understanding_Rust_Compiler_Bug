{"sha": "dd8fc5a61adf557afa2cd971039be10a83f6d503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOGZjNWE2MWFkZjU1N2FmYTJjZDk3MTAzOWJlMTBhODNmNmQ1MDM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T08:45:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T08:45:39Z"}, "message": "Merge #3177 #3178\n\n3177: Update debug docs r=matklad a=Veetaha\n\nUpdated `debugging.md` file, added two useful demo videos.\n\n3178: vscode: minor refactorings r=matklad a=Veetaha\n\nVery minor\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <gersoh3@gmail.com>", "tree": {"sha": "c2461c8863e5005c45a997d627c34f76e3b36e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2461c8863e5005c45a997d627c34f76e3b36e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd8fc5a61adf557afa2cd971039be10a83f6d503", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSlKzCRBK7hj4Ov3rIwAAdHIIAJeB7va7bwv91AR79gVB8w7e\nDf4OTIvPur9hHlz65GHuzir/FVnCbMltSoB6rtepzaDM4Gv8c3ZSo37j0SFbC8m1\n2Am1HupVgL4cOay5ayxrgW+oFcAYsr9gqCY2+bVh9jui+R1fsbf9Gy0OTmF3Tkc6\nlAf2azixwoA50ilUMrZwmtbZdKeYNSt1IbItElFcwN/2nfdvq7WZ1b0gA6sawdxI\nRSJPww+NSwYsbHgaReaazQmchUkFJpI88fzI0IgZxx8ISQEjUlsSsdzuRl6G/09D\nfCE7RebIfUyxlqK2xoSjZ+hlnJDxMpmdMobqAePBUecjlUmj+gHND/lizVQqpgM=\n=Hnvi\n-----END PGP SIGNATURE-----\n", "payload": "tree c2461c8863e5005c45a997d627c34f76e3b36e5c\nparent daffdd86749bc2d62b50ff9e0c869032d7932373\nparent 2d7fe230f57bdbd8e0bb7ac89632a43a65210c1f\nparent bd113623a02dc253549464667af8931e2ff378bc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581929139 +0000\ncommitter GitHub <noreply@github.com> 1581929139 +0000\n\nMerge #3177 #3178\n\n3177: Update debug docs r=matklad a=Veetaha\n\nUpdated `debugging.md` file, added two useful demo videos.\n\n3178: vscode: minor refactorings r=matklad a=Veetaha\n\nVery minor\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <gersoh3@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc5a61adf557afa2cd971039be10a83f6d503", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc5a61adf557afa2cd971039be10a83f6d503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc5a61adf557afa2cd971039be10a83f6d503/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daffdd86749bc2d62b50ff9e0c869032d7932373", "url": "https://api.github.com/repos/rust-lang/rust/commits/daffdd86749bc2d62b50ff9e0c869032d7932373", "html_url": "https://github.com/rust-lang/rust/commit/daffdd86749bc2d62b50ff9e0c869032d7932373"}, {"sha": "2d7fe230f57bdbd8e0bb7ac89632a43a65210c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7fe230f57bdbd8e0bb7ac89632a43a65210c1f", "html_url": "https://github.com/rust-lang/rust/commit/2d7fe230f57bdbd8e0bb7ac89632a43a65210c1f"}, {"sha": "bd113623a02dc253549464667af8931e2ff378bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd113623a02dc253549464667af8931e2ff378bc", "html_url": "https://github.com/rust-lang/rust/commit/bd113623a02dc253549464667af8931e2ff378bc"}], "stats": {"total": 126, "additions": 74, "deletions": 52}, "files": [{"sha": "e6b0821564dfb105c9e959a6a0ece9793441b74e", "filename": "docs/dev/debugging.md", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dd8fc5a61adf557afa2cd971039be10a83f6d503/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd8fc5a61adf557afa2cd971039be10a83f6d503/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=dd8fc5a61adf557afa2cd971039be10a83f6d503", "patch": "@@ -1,44 +1,66 @@\n-# Debugging vs Code plugin and the Language Server\n+# Debugging VSCode plugin and the language server\n \n-**NOTE:** the information here is mostly obsolete\n+## Prerequisites\n \n-Install [LLDB](https://lldb.llvm.org/) and the [LLDB Extension](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb).\n+- Install [LLDB](https://lldb.llvm.org/) and the [LLDB Extension](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb).\n+- Open the root folder in VSCode. Here you can access the preconfigured debug setups.\n \n-Checkout rust rust-analyzer and open it in vscode.\n+  <img height=150px src=\"https://user-images.githubusercontent.com/36276403/74611090-92ec5380-5101-11ea-8a41-598f51f3f3e3.png\" alt=\"Debug options view\">\n+\n+- Install all TypeScript dependencies\n+  ```bash\n+  cd editors/code\n+  npm install\n+  ```\n+\n+## Common knowledge\n+\n+* All debug configurations open a new `[Extension Development Host]` VSCode instance\n+where **only** the `rust-analyzer` extension being debugged is enabled.\n+* To activate the extension you need to open any Rust project folder in `[Extension Development Host]`.\n \n-```\n-$ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n-$ cd rust-analyzer\n-$ code .\n-```\n \n-- To attach to the `lsp server` in linux you'll have to run:\n+## Debug TypeScript VSCode extension\n \n-  `echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope`\n+- `Run Extension` - runs the extension with the globally installed `ra_lsp_server` binary.\n+- `Run Extension (Dev Server)` - runs extension with the locally built LSP server (`target/debug/ra_lsp_server`).\n+\n+TypeScript debugging is configured to watch your source edits and recompile.\n+To apply changes to an already running debug process press <kbd>Ctrl+Shift+P</kbd> and run the following command in your `[Extension Development Host]`\n+\n+```\n+> Developer: Reload Window\n+```\n \n-  This enables ptrace on non forked processes\n+## Debug Rust LSP server\n \n-- Ensure the dependencies for the extension are installed, run the `npm: install - editors/code` task in vscode.\n+- When attaching a debugger to an already running `rust-analyzer` server on Linux you might need to enable `ptrace` for unrelated processes by running:\n \n-- Launch the `Debug Extension`, this will build the extension and the `lsp server`.\n+  ```\n+  echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n+  ```\n \n-- A new instance of vscode with `[Extension Development Host]` in the title.\n \n-  Don't worry about disabling `rls` all other extensions will be disabled but this one.\n+- By default, the LSP server is built without debug information. To enable it, you'll need to change `Cargo.toml`:\n+  ```toml\n+    [profile.dev]\n+    debug = 2\n+  ```\n \n-- In the new vscode instance open a rust project, and navigate to a rust file\n+- Select `Run Extension (Dev Server)` to run your locally built `target/debug/ra_lsp_server`.\n \n-- In the original vscode start an additional debug session (the three periods in the launch) and select `Debug Lsp Server`.\n+- In the original VSCode window once again select the `Attach To Server` debug configuration.\n \n-- A list of running processes should appear select the `ra_lsp_server` from this repo.\n+- A list of running processes should appear. Select the `ra_lsp_server` from this repo.\n \n - Navigate to `crates/ra_lsp_server/src/main_loop.rs` and add a breakpoint to the `on_task` function.\n \n-- Go back to the `[Extension Development Host]` instance and hover over a rust variable and your breakpoint should hit.\n+- Go back to the `[Extension Development Host]` instance and hover over a Rust variable and your breakpoint should hit.\n \n ## Demo\n \n-![demonstration of debugging](https://user-images.githubusercontent.com/1711539/51384036-254fab80-1b2c-11e9-824d-95f9a6e9cf4f.gif)\n+- [Debugging TypeScript VScode extension](https://www.youtube.com/watch?v=T-hvpK6s4wM).\n+- [Debugging Rust LSP server](https://www.youtube.com/watch?v=EaNb5rg4E0M).\n \n ## Troubleshooting\n "}, {"sha": "53e2a414b05ebb9f5911c7e666fa2c4a999973b3", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=dd8fc5a61adf557afa2cd971039be10a83f6d503", "patch": "@@ -44,7 +44,6 @@ export class Config {\n         this.refreshConfig();\n     }\n \n-\n     private refreshConfig() {\n         this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n         console.log(\"Using configuration:\", this.cfg);"}, {"sha": "ff6245f78990be319b8db9c78242144acacc3420", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=dd8fc5a61adf557afa2cd971039be10a83f6d503", "patch": "@@ -91,15 +91,11 @@ export async function sendRequestWithRetry<R>(\n     for (const delay of [2, 4, 6, 8, 10, null]) {\n         try {\n             return await (token ? client.sendRequest(method, param, token) : client.sendRequest(method, param));\n-        } catch (e) {\n-            if (\n-                e.code === lc.ErrorCodes.ContentModified &&\n-                delay !== null\n-            ) {\n-                await sleep(10 * (1 << delay));\n-                continue;\n+        } catch (err) {\n+            if (delay === null || err.code !== lc.ErrorCodes.ContentModified) {\n+                throw err;\n             }\n-            throw e;\n+            await sleep(10 * (1 << delay));\n         }\n     }\n     throw 'unreachable';"}, {"sha": "3896878cda528e3f7e808c570a50e20278508402", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/dd8fc5a61adf557afa2cd971039be10a83f6d503/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=dd8fc5a61adf557afa2cd971039be10a83f6d503", "patch": "@@ -27,7 +27,9 @@ export function activateInlayHints(ctx: Ctx) {\n         ctx.subscriptions\n     );\n \n-    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n+    // We pass async function though it will not be awaited when called,\n+    // thus Promise rejections won't be handled, but this should never throw in fact...\n+    ctx.onDidRestart(async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n }\n \n interface InlayHintsParams {\n@@ -36,7 +38,7 @@ interface InlayHintsParams {\n \n interface InlayHint {\n     range: vscode.Range;\n-    kind: string;\n+    kind: \"TypeHint\" | \"ParameterHint\";\n     label: string;\n }\n \n@@ -53,7 +55,7 @@ const parameterHintDecorationType = vscode.window.createTextEditorDecorationType\n });\n \n class HintsUpdater {\n-    private pending: Map<string, vscode.CancellationTokenSource> = new Map();\n+    private pending = new Map<string, vscode.CancellationTokenSource>();\n     private ctx: Ctx;\n     private enabled: boolean;\n \n@@ -62,30 +64,36 @@ class HintsUpdater {\n         this.enabled = ctx.config.displayInlayHints;\n     }\n \n-    async setEnabled(enabled: boolean) {\n+    async setEnabled(enabled: boolean): Promise<void> {\n         if (this.enabled == enabled) return;\n         this.enabled = enabled;\n \n         if (this.enabled) {\n-            await this.refresh();\n-        } else {\n-            this.allEditors.forEach(it => {\n-                this.setTypeDecorations(it, []);\n-                this.setParameterDecorations(it, []);\n-            });\n+            return await this.refresh();\n         }\n+        this.allEditors.forEach(it => {\n+            this.setTypeDecorations(it, []);\n+            this.setParameterDecorations(it, []);\n+        });\n     }\n \n     async refresh() {\n         if (!this.enabled) return;\n-        const promises = this.allEditors.map(it => this.refreshEditor(it));\n-        await Promise.all(promises);\n+        await Promise.all(this.allEditors.map(it => this.refreshEditor(it)));\n+    }\n+\n+    private get allEditors(): vscode.TextEditor[] {\n+        return vscode.window.visibleTextEditors.filter(\n+            editor => editor.document.languageId === 'rust',\n+        );\n     }\n \n     private async refreshEditor(editor: vscode.TextEditor): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints == null) return;\n-        const newTypeDecorations = newHints.filter(hint => hint.kind === 'TypeHint')\n+\n+        const newTypeDecorations = newHints\n+            .filter(hint => hint.kind === 'TypeHint')\n             .map(hint => ({\n                 range: hint.range,\n                 renderOptions: {\n@@ -96,7 +104,8 @@ class HintsUpdater {\n             }));\n         this.setTypeDecorations(editor, newTypeDecorations);\n \n-        const newParameterDecorations = newHints.filter(hint => hint.kind === 'ParameterHint')\n+        const newParameterDecorations = newHints\n+            .filter(hint => hint.kind === 'ParameterHint')\n             .map(hint => ({\n                 range: hint.range,\n                 renderOptions: {\n@@ -108,12 +117,6 @@ class HintsUpdater {\n         this.setParameterDecorations(editor, newParameterDecorations);\n     }\n \n-    private get allEditors(): vscode.TextEditor[] {\n-        return vscode.window.visibleTextEditors.filter(\n-            editor => editor.document.languageId === 'rust',\n-        );\n-    }\n-\n     private setTypeDecorations(\n         editor: vscode.TextEditor,\n         decorations: vscode.DecorationOptions[],\n@@ -137,12 +140,14 @@ class HintsUpdater {\n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const client = this.ctx.client;\n         if (!client) return null;\n+\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri },\n         };\n         const tokenSource = new vscode.CancellationTokenSource();\n-        const prev = this.pending.get(documentUri);\n-        if (prev) prev.cancel();\n+        const prevHintsRequest = this.pending.get(documentUri);\n+        prevHintsRequest?.cancel();\n+\n         this.pending.set(documentUri, tokenSource);\n         try {\n             return await sendRequestWithRetry<InlayHint[] | null>("}]}