{"sha": "c3e6f689312872ac9859b18230c6323ab27fbd7f", "node_id": "C_kwDOAAsO6NoAKGMzZTZmNjg5MzEyODcyYWM5ODU5YjE4MjMwYzYzMjNhYjI3ZmJkN2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-20T17:05:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T23:36:07Z"}, "message": "RPITITs are DefKind::Opaque with new lowering strategy", "tree": {"sha": "9550f1569c170e03509f94d3f055382b61e574d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9550f1569c170e03509f94d3f055382b61e574d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e6f689312872ac9859b18230c6323ab27fbd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e6f689312872ac9859b18230c6323ab27fbd7f", "html_url": "https://github.com/rust-lang/rust/commit/c3e6f689312872ac9859b18230c6323ab27fbd7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e6f689312872ac9859b18230c6323ab27fbd7f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1f3529c911eb252aaddb139bf54afca8475df6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f3529c911eb252aaddb139bf54afca8475df6b", "html_url": "https://github.com/rust-lang/rust/commit/c1f3529c911eb252aaddb139bf54afca8475df6b"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "d8dda7a93be1369d36d13c9e718b6c3d74168cf7", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c3e6f689312872ac9859b18230c6323ab27fbd7f", "patch": "@@ -305,7 +305,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n     }) = item.kind\n     {\n         let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-        let opaque_identity_ty = if in_trait {\n+        let opaque_identity_ty = if in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n             tcx.mk_projection(def_id.to_def_id(), substs)\n         } else {\n             tcx.mk_opaque(def_id.to_def_id(), substs)\n@@ -554,7 +554,15 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             check_union(tcx, id.owner_id.def_id);\n         }\n         DefKind::OpaqueTy => {\n-            check_opaque(tcx, id);\n+            let opaque = tcx.hir().expect_item(id.owner_id.def_id).expect_opaque_ty();\n+            if let hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id) = opaque.origin\n+                && let hir::Node::TraitItem(trait_item) = tcx.hir().get_by_def_id(fn_def_id)\n+                && let (_, hir::TraitFn::Required(..)) = trait_item.expect_fn()\n+            {\n+                // Skip opaques from RPIT in traits with no default body.\n+            } else {\n+                check_opaque(tcx, id);\n+            }\n         }\n         DefKind::ImplTraitPlaceholder => {\n             let parent = tcx.impl_trait_in_trait_parent_fn(id.owner_id.to_def_id());"}, {"sha": "4dd433a50a73b7f984207b9be1702626cc1b101c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c3e6f689312872ac9859b18230c6323ab27fbd7f", "patch": "@@ -1016,7 +1016,6 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::Const\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n-        | DefKind::OpaqueTy\n         | DefKind::ForeignTy\n         | DefKind::Impl { .. }\n         | DefKind::AssocFn\n@@ -1027,6 +1026,18 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::AnonConst\n         | DefKind::InlineConst => true,\n \n+        DefKind::OpaqueTy => {\n+            let opaque = tcx.hir().expect_item(def_id).expect_opaque_ty();\n+            if let hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id) = opaque.origin\n+                && let hir::Node::TraitItem(trait_item) = tcx.hir().get_by_def_id(fn_def_id)\n+                && let (_, hir::TraitFn::Required(..)) = trait_item.expect_fn()\n+            {\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+\n         DefKind::ImplTraitPlaceholder => {\n             let parent_def_id = tcx.impl_trait_in_trait_parent_fn(def_id.to_def_id());\n             let assoc_item = tcx.associated_item(parent_def_id);"}, {"sha": "89a485b47ca8c03318187d27258db4a486eb3304", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c3e6f689312872ac9859b18230c6323ab27fbd7f", "patch": "@@ -188,7 +188,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n                 ItemKind::OpaqueTy(ref opaque) => {\n-                    if opaque.in_trait {\n+                    if opaque.in_trait && !self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                         DefKind::ImplTraitPlaceholder\n                     } else {\n                         DefKind::OpaqueTy"}, {"sha": "562f5bffba315fb83e48c095af8f857259af6ca0", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e6f689312872ac9859b18230c6323ab27fbd7f/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=c3e6f689312872ac9859b18230c6323ab27fbd7f", "patch": "@@ -254,13 +254,16 @@ fn associated_type_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let fn_def_id = tcx.impl_trait_in_trait_parent_fn(opaque_ty_def_id.to_def_id());\n-    let trait_def_id = tcx.parent(fn_def_id);\n+    let (hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id)) =\n+        tcx.hir().expect_item(opaque_ty_def_id).expect_opaque_ty().origin\n+    else {\n+        bug!(\"expected opaque for {opaque_ty_def_id:?}\");\n+    };\n+    let trait_def_id = tcx.local_parent(fn_def_id);\n     assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n \n     let span = tcx.def_span(opaque_ty_def_id);\n-    let trait_assoc_ty =\n-        tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n+    let trait_assoc_ty = tcx.at(span).create_def(trait_def_id, DefPathData::ImplTraitAssocTy);\n \n     let local_def_id = trait_assoc_ty.def_id();\n     let def_id = local_def_id.to_def_id();\n@@ -282,7 +285,7 @@ fn associated_type_for_impl_trait_in_trait(\n         container: ty::TraitContainer,\n         fn_has_self_parameter: false,\n         opt_rpitit_info: Some(ImplTraitInTraitData::Trait {\n-            fn_def_id,\n+            fn_def_id: fn_def_id.to_def_id(),\n             opaque_def_id: opaque_ty_def_id.to_def_id(),\n         }),\n     });\n@@ -324,7 +327,7 @@ fn associated_type_for_impl_trait_in_trait(\n             params.iter().map(|param| (param.def_id, param.index)).collect();\n \n         ty::Generics {\n-            parent: Some(trait_def_id),\n+            parent: Some(trait_def_id.to_def_id()),\n             parent_count,\n             params,\n             param_def_id_to_index,\n@@ -335,7 +338,7 @@ fn associated_type_for_impl_trait_in_trait(\n \n     // There are no predicates for the synthesized associated type.\n     trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n-        parent: Some(trait_def_id),\n+        parent: Some(trait_def_id.to_def_id()),\n         predicates: &[],\n     });\n \n@@ -356,7 +359,6 @@ fn associated_type_for_impl_trait_in_impl(\n     impl_fn_def_id: LocalDefId,\n ) -> LocalDefId {\n     let impl_local_def_id = tcx.local_parent(impl_fn_def_id);\n-    let impl_def_id = impl_local_def_id.to_def_id();\n \n     // FIXME fix the span, we probably want the def_id of the return type of the function\n     let span = tcx.def_span(impl_fn_def_id);\n@@ -402,7 +404,7 @@ fn associated_type_for_impl_trait_in_impl(\n         let trait_assoc_parent_count = trait_assoc_generics.parent_count;\n         let mut params = trait_assoc_generics.params.clone();\n \n-        let parent_generics = tcx.generics_of(impl_def_id);\n+        let parent_generics = tcx.generics_of(impl_local_def_id.to_def_id());\n         let parent_count = parent_generics.parent_count + parent_generics.params.len();\n \n         for param in &mut params {\n@@ -413,7 +415,7 @@ fn associated_type_for_impl_trait_in_impl(\n             params.iter().map(|param| (param.def_id, param.index)).collect();\n \n         ty::Generics {\n-            parent: Some(impl_def_id),\n+            parent: Some(impl_local_def_id.to_def_id()),\n             parent_count,\n             params,\n             param_def_id_to_index,\n@@ -424,7 +426,7 @@ fn associated_type_for_impl_trait_in_impl(\n \n     // There are no predicates for the synthesized associated type.\n     impl_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n-        parent: Some(impl_def_id),\n+        parent: Some(impl_local_def_id.to_def_id()),\n         predicates: &[],\n     });\n "}]}