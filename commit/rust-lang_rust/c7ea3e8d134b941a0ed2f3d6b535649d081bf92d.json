{"sha": "c7ea3e8d134b941a0ed2f3d6b535649d081bf92d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZWEzZThkMTM0Yjk0MWEwZWQyZjNkNmI1MzU2NDlkMDgxYmY5MmQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-18T06:21:13Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:19:07Z"}, "message": "Remove redundant error checking around ExprMethodCall", "tree": {"sha": "be905043d46c9d0db503f6e42f2e5d984dcaedd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be905043d46c9d0db503f6e42f2e5d984dcaedd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d", "html_url": "https://github.com/rust-lang/rust/commit/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93435fd79e26e09b8aa786eb682c82ec81f0293", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93435fd79e26e09b8aa786eb682c82ec81f0293", "html_url": "https://github.com/rust-lang/rust/commit/b93435fd79e26e09b8aa786eb682c82ec81f0293"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "df789897bf15406bedae68f408aaea2548e64df8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ea3e8d134b941a0ed2f3d6b535649d081bf92d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c7ea3e8d134b941a0ed2f3d6b535649d081bf92d", "patch": "@@ -3551,15 +3551,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               ret_ty\n           }\n           hir::ExprMethodCall(name, ref tps, ref args) => {\n-              let ty = self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref);\n-              let arg_tys = args.iter().map(|a| self.expr_ty(&a));\n-              let args_err = arg_tys.fold(false, |rest_err, a| rest_err || a.references_error());\n-              if args_err {\n-                  self.write_error(id)\n-              }\n-              else {\n-                  ty\n-              }\n+              self.check_method_call(expr, name, &args[..], &tps[..], expected, lvalue_pref)\n           }\n           hir::ExprCast(ref e, ref t) => {\n             if let hir::TyFixedLengthVec(_, ref count_expr) = t.node {"}]}