{"sha": "c82d1823a1624f4990b1ebaba5b6173f15631381", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmQxODIzYTE2MjRmNDk5MGIxZWJhYmE1YjYxNzNmMTU2MzEzODE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T19:38:11Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T19:38:45Z"}, "message": "Create TraitEnvironment through a query", "tree": {"sha": "6c59a0786f78cc5878ddb74a589f1d221d907137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c59a0786f78cc5878ddb74a589f1d221d907137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82d1823a1624f4990b1ebaba5b6173f15631381", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82d1823a1624f4990b1ebaba5b6173f15631381", "html_url": "https://github.com/rust-lang/rust/commit/c82d1823a1624f4990b1ebaba5b6173f15631381", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82d1823a1624f4990b1ebaba5b6173f15631381/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "html_url": "https://github.com/rust-lang/rust/commit/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd"}], "stats": {"total": 126, "additions": 76, "deletions": 50}, "files": [{"sha": "cda050a7d157f2f34e82ce1dc94fa33a0d6180e2", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -54,8 +54,8 @@ use hir_ty::{\n     method_resolution, to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n-    InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs,\n-    TraitEnvironment, Ty, TyDefId, TyKind, TyVariableKind,\n+    InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs, Ty,\n+    TyDefId, TyKind, TyVariableKind,\n };\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n@@ -817,7 +817,7 @@ impl Function {\n         let resolver = self.id.resolver(db.upcast());\n         let krate = self.id.lookup(db.upcast()).container.module(db.upcast()).krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let environment = db.trait_environment(self.id.into());\n         db.function_data(self.id)\n             .params\n             .iter()\n@@ -1563,13 +1563,15 @@ impl Type {\n         resolver: &Resolver,\n         ty: Ty,\n     ) -> Type {\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let environment =\n+            resolver.generic_def().map_or_else(Default::default, |d| db.trait_environment(d));\n         Type { krate, ty: InEnvironment { value: ty, environment } }\n     }\n \n     fn new(db: &dyn HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n         let resolver = lexical_env.resolver(db.upcast());\n-        let environment = TraitEnvironment::lower(db, &resolver);\n+        let environment =\n+            resolver.generic_def().map_or_else(Default::default, |d| db.trait_environment(d));\n         Type { krate, ty: InEnvironment { value: ty, environment } }\n     }\n "}, {"sha": "c6655c5fbf323731bcbaaeeadc6be4dd84e1aa9b", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -341,6 +341,16 @@ pub enum DefWithBodyId {\n \n impl_from!(FunctionId, ConstId, StaticId for DefWithBodyId);\n \n+impl DefWithBodyId {\n+    pub fn as_generic_def_id(self) -> Option<GenericDefId> {\n+        match self {\n+            DefWithBodyId::FunctionId(f) => Some(f.into()),\n+            DefWithBodyId::StaticId(_) => None,\n+            DefWithBodyId::ConstId(c) => Some(c.into()),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItemId {\n     FunctionId(FunctionId),"}, {"sha": "74a048672127560cd45607060ebd4618f2f6652b", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -65,6 +65,9 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(crate::lower::generic_predicates_query)]\n     fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<GenericPredicate>]>;\n \n+    #[salsa::invoke(crate::lower::trait_environment_query)]\n+    fn trait_environment(&self, def: GenericDefId) -> Arc<crate::TraitEnvironment>;\n+\n     #[salsa::invoke(crate::lower::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDefId) -> Arc<[Binders<Ty>]>;\n "}, {"sha": "bc52f447d434089b7b0ddad0f241d6a580ef5700", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -228,7 +228,9 @@ impl<'a> InferenceContext<'a> {\n             table: unify::InferenceTable::new(),\n             obligations: Vec::default(),\n             return_ty: TyKind::Unknown.intern(&Interner), // set in collect_fn_signature\n-            trait_env: TraitEnvironment::lower(db, &resolver),\n+            trait_env: owner\n+                .as_generic_def_id()\n+                .map_or_else(Default::default, |d| db.trait_environment(d)),\n             db,\n             owner,\n             body: db.body(owner),"}, {"sha": "3b07065305e6f790b05baa0ee134d7db25f054b8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -935,55 +935,55 @@ pub(crate) fn generic_predicates_for_param_recover(\n     Arc::new([])\n }\n \n-impl TraitEnvironment {\n-    pub fn lower(db: &dyn HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n-        let ctx = TyLoweringContext::new(db, &resolver)\n-            .with_type_param_mode(TypeParamLoweringMode::Placeholder);\n-        let mut traits_in_scope = Vec::new();\n-        let mut clauses = Vec::new();\n-        for pred in resolver.where_predicates_in_scope() {\n-            for pred in GenericPredicate::from_where_predicate(&ctx, pred) {\n-                if pred.is_error() {\n-                    continue;\n-                }\n-                if let GenericPredicate::Implemented(tr) = &pred {\n-                    traits_in_scope.push((tr.self_ty().clone(), tr.trait_));\n-                }\n-                let program_clause: chalk_ir::ProgramClause<Interner> =\n-                    pred.clone().to_chalk(db).cast(&Interner);\n-                clauses.push(program_clause.into_from_env_clause(&Interner));\n+pub(crate) fn trait_environment_query(\n+    db: &dyn HirDatabase,\n+    def: GenericDefId,\n+) -> Arc<TraitEnvironment> {\n+    let resolver = def.resolver(db.upcast());\n+    let ctx = TyLoweringContext::new(db, &resolver)\n+        .with_type_param_mode(TypeParamLoweringMode::Placeholder);\n+    let mut traits_in_scope = Vec::new();\n+    let mut clauses = Vec::new();\n+    for pred in resolver.where_predicates_in_scope() {\n+        for pred in GenericPredicate::from_where_predicate(&ctx, pred) {\n+            if pred.is_error() {\n+                continue;\n             }\n-        }\n-\n-        if let Some(def) = resolver.generic_def() {\n-            let container: Option<AssocContainerId> = match def {\n-                // FIXME: is there a function for this?\n-                GenericDefId::FunctionId(f) => Some(f.lookup(db.upcast()).container),\n-                GenericDefId::AdtId(_) => None,\n-                GenericDefId::TraitId(_) => None,\n-                GenericDefId::TypeAliasId(t) => Some(t.lookup(db.upcast()).container),\n-                GenericDefId::ImplId(_) => None,\n-                GenericDefId::EnumVariantId(_) => None,\n-                GenericDefId::ConstId(c) => Some(c.lookup(db.upcast()).container),\n-            };\n-            if let Some(AssocContainerId::TraitId(trait_id)) = container {\n-                // add `Self: Trait<T1, T2, ...>` to the environment in trait\n-                // function default implementations (and hypothetical code\n-                // inside consts or type aliases)\n-                cov_mark::hit!(trait_self_implements_self);\n-                let substs = Substs::type_params(db, trait_id);\n-                let trait_ref = TraitRef { trait_: trait_id, substs };\n-                let pred = GenericPredicate::Implemented(trait_ref);\n-                let program_clause: chalk_ir::ProgramClause<Interner> =\n-                    pred.clone().to_chalk(db).cast(&Interner);\n-                clauses.push(program_clause.into_from_env_clause(&Interner));\n+            if let GenericPredicate::Implemented(tr) = &pred {\n+                traits_in_scope.push((tr.self_ty().clone(), tr.trait_));\n             }\n+            let program_clause: chalk_ir::ProgramClause<Interner> =\n+                pred.clone().to_chalk(db).cast(&Interner);\n+            clauses.push(program_clause.into_from_env_clause(&Interner));\n         }\n+    }\n \n-        let env = chalk_ir::Environment::new(&Interner).add_clauses(&Interner, clauses);\n-\n-        Arc::new(TraitEnvironment { traits_from_clauses: traits_in_scope, env })\n+    let container: Option<AssocContainerId> = match def {\n+        // FIXME: is there a function for this?\n+        GenericDefId::FunctionId(f) => Some(f.lookup(db.upcast()).container),\n+        GenericDefId::AdtId(_) => None,\n+        GenericDefId::TraitId(_) => None,\n+        GenericDefId::TypeAliasId(t) => Some(t.lookup(db.upcast()).container),\n+        GenericDefId::ImplId(_) => None,\n+        GenericDefId::EnumVariantId(_) => None,\n+        GenericDefId::ConstId(c) => Some(c.lookup(db.upcast()).container),\n+    };\n+    if let Some(AssocContainerId::TraitId(trait_id)) = container {\n+        // add `Self: Trait<T1, T2, ...>` to the environment in trait\n+        // function default implementations (and hypothetical code\n+        // inside consts or type aliases)\n+        cov_mark::hit!(trait_self_implements_self);\n+        let substs = Substs::type_params(db, trait_id);\n+        let trait_ref = TraitRef { trait_: trait_id, substs };\n+        let pred = GenericPredicate::Implemented(trait_ref);\n+        let program_clause: chalk_ir::ProgramClause<Interner> =\n+            pred.clone().to_chalk(db).cast(&Interner);\n+        clauses.push(program_clause.into_from_env_clause(&Interner));\n     }\n+\n+    let env = chalk_ir::Environment::new(&Interner).add_clauses(&Interner, clauses);\n+\n+    Arc::new(TraitEnvironment { traits_from_clauses: traits_in_scope, env })\n }\n \n /// Resolve the where clause(s) of an item with generics."}, {"sha": "edfafdff8139f5e4e5ad3de879f20ec133b6b6ff", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82d1823a1624f4990b1ebaba5b6173f15631381/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=c82d1823a1624f4990b1ebaba5b6173f15631381", "patch": "@@ -63,6 +63,15 @@ impl TraitEnvironment {\n     }\n }\n \n+impl Default for TraitEnvironment {\n+    fn default() -> Self {\n+        TraitEnvironment {\n+            traits_from_clauses: Vec::new(),\n+            env: chalk_ir::Environment::new(&Interner),\n+        }\n+    }\n+}\n+\n /// Something (usually a goal), along with an environment.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct InEnvironment<T> {"}]}