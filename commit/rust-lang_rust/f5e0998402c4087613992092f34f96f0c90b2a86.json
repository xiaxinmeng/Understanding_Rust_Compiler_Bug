{"sha": "f5e0998402c4087613992092f34f96f0c90b2a86", "node_id": "C_kwDOAAsO6NoAKGY1ZTA5OTg0MDJjNDA4NzYxMzk5MjA5MmYzNGY5NmYwYzkwYjJhODY", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-10T14:16:04Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-10T14:16:04Z"}, "message": "refactor: use hir to check if fn in trait/impl", "tree": {"sha": "e10d838cfe0d7342e7e4e0e7c7d2bfba0431466f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10d838cfe0d7342e7e4e0e7c7d2bfba0431466f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e0998402c4087613992092f34f96f0c90b2a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0998402c4087613992092f34f96f0c90b2a86", "html_url": "https://github.com/rust-lang/rust/commit/f5e0998402c4087613992092f34f96f0c90b2a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0998402c4087613992092f34f96f0c90b2a86/comments", "author": null, "committer": null, "parents": [{"sha": "c3d151ada6d18a7fb378d883d5abb0fb29f190ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d151ada6d18a7fb378d883d5abb0fb29f190ed", "html_url": "https://github.com/rust-lang/rust/commit/c3d151ada6d18a7fb378d883d5abb0fb29f190ed"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "6c69f227f7be92949a1daeb198fa84b7b93fe461", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0998402c4087613992092f34f96f0c90b2a86/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0998402c4087613992092f34f96f0c90b2a86/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=f5e0998402c4087613992092f34f96f0c90b2a86", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasVisibility, ModuleDef, Visibility};\n+use hir::{AsAssocItem, HasVisibility, ModuleDef, Visibility};\n use ide_db::assists::{AssistId, AssistKind};\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -42,7 +42,7 @@ pub(crate) fn generate_documentation_template(\n ) -> Option<()> {\n     let name = ctx.find_node_at_offset::<ast::Name>()?;\n     let ast_func = name.syntax().parent().and_then(ast::Fn::cast)?;\n-    if is_in_trait_impl(&ast_func)\n+    if is_in_trait_impl(&ast_func, ctx)\n         || !is_public(&ast_func, ctx)?\n         || ast_func.doc_comments().next().is_some()\n     {\n@@ -94,7 +94,7 @@ fn introduction_builder(ast_func: &ast::Fn) -> String {\n \n /// Builds an `# Examples` section. An option is returned to be able to manage an error in the AST.\n fn examples_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let (no_panic_ex, panic_ex) = if is_in_trait_def(ast_func) {\n+    let (no_panic_ex, panic_ex) = if is_in_trait_def(ast_func, ctx) {\n         let message = \"// Example template not implemented for trait functions\";\n         (Some(vec![message.into()]), Some(vec![message.into()]))\n     } else {\n@@ -275,18 +275,21 @@ fn self_partial_type(ast_func: &ast::Fn) -> Option<String> {\n }\n \n /// Helper function to determine if the function is in a trait implementation\n-fn is_in_trait_impl(ast_func: &ast::Fn) -> bool {\n-    ast_func\n-        .syntax()\n-        .ancestors()\n-        .find_map(ast::Impl::cast)\n-        .and_then(|impl_| impl_.trait_())\n+fn is_in_trait_impl(ast_func: &ast::Fn, ctx: &AssistContext) -> bool {\n+    ctx.sema\n+        .to_def(ast_func)\n+        .and_then(|hir_func| hir_func.as_assoc_item(ctx.db()))\n+        .and_then(|assoc_item| assoc_item.containing_trait_impl(ctx.db()))\n         .is_some()\n }\n \n /// Helper function to determine if the function definition is in a trait definition\n-fn is_in_trait_def(ast_func: &ast::Fn) -> bool {\n-    ast_func.syntax().ancestors().find_map(ast::Trait::cast).is_some()\n+fn is_in_trait_def(ast_func: &ast::Fn, ctx: &AssistContext) -> bool {\n+    ctx.sema\n+        .to_def(ast_func)\n+        .and_then(|hir_func| hir_func.as_assoc_item(ctx.db()))\n+        .and_then(|assoc_item| assoc_item.containing_trait(ctx.db()))\n+        .is_some()\n }\n \n /// Returns `None` if no `self` at all, `Some(true)` if there is `&mut self` else `Some(false)`"}]}