{"sha": "42a4673fbd40b09a99d057eaa9b3e5579b54c184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYTQ2NzNmYmQ0MGIwOWE5OWQwNTdlYWE5YjNlNTU3OWI1NGMxODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T02:14:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-16T02:14:13Z"}, "message": "Auto merge of #82153 - jonas-schievink:rollup-ls5r943, r=jonas-schievink\n\nRollup of 19 pull requests\n\nSuccessful merges:\n\n - #81503 (Suggest to create a new `const` item if the `fn` in the array is a `const fn`)\n - #81897 (Add match pattern diagnostics regression test)\n - #81975 (Seal the CommandExt, OsStrExt and OsStringExt traits)\n - #82009 (const_generics: Dont evaluate array length const when handling errors)\n - #82060 (Fix typos in BTreeSet::{first, last} docs)\n - #82061 (CTFE validation: catch ReadPointerAsBytes and better error)\n - #82063 (Fixed minor typo in catch_unwind docs)\n - #82067 (const_generics: Fix incorrect ty::ParamEnv::empty() usage)\n - #82077 (Edit `rustc_arena::DropArena` docs)\n - #82096 (Fix a typo)\n - #82106 (Remove unnecessary `Option` in `default_doc`)\n - #82107 (expand: Some cleanup)\n - #82118 (Add missing env!-decl variant)\n - #82119 (Fix typo in link to CreateSymbolicLinkW documentation.)\n - #82120 (Stabilize Arguments::as_str)\n - #82129 (Remove redundant bool_to_option feature gate)\n - #82133 (Update link for extern prelude.)\n - #82141 (32-bit ARM: Emit `lr` instead of `r14` when specified as an `asm!` output register.)\n - #82147 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5ab393dcc74c0ab38a4cdf58f513e8eb94bb9420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ab393dcc74c0ab38a4cdf58f513e8eb94bb9420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42a4673fbd40b09a99d057eaa9b3e5579b54c184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42a4673fbd40b09a99d057eaa9b3e5579b54c184", "html_url": "https://github.com/rust-lang/rust/commit/42a4673fbd40b09a99d057eaa9b3e5579b54c184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42a4673fbd40b09a99d057eaa9b3e5579b54c184/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1206f950ffb76c76e1b74a19ae33c2b7d949454", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1206f950ffb76c76e1b74a19ae33c2b7d949454", "html_url": "https://github.com/rust-lang/rust/commit/d1206f950ffb76c76e1b74a19ae33c2b7d949454"}, {"sha": "a105280a067891b557498cf9131843a75c20829a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a105280a067891b557498cf9131843a75c20829a", "html_url": "https://github.com/rust-lang/rust/commit/a105280a067891b557498cf9131843a75c20829a"}], "stats": {"total": 485, "additions": 350, "deletions": 135}, "files": [{"sha": "f17c43ceaff73392f7d5abb01f73008ecfd14e99", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -568,10 +568,13 @@ impl Drop for DropType {\n }\n \n /// An arena which can be used to allocate any type.\n+///\n+/// # Safety\n+///\n /// Allocating in this arena is unsafe since the type system\n /// doesn't know which types it contains. In order to\n-/// allocate safely, you must store a PhantomData<T>\n-/// alongside this arena for each type T you allocate.\n+/// allocate safely, you must store a `PhantomData<T>`\n+/// alongside this arena for each type `T` you allocate.\n #[derive(Default)]\n pub struct DropArena {\n     /// A list of destructors to run when the arena drops.\n@@ -589,7 +592,7 @@ impl DropArena {\n         ptr::write(mem, object);\n         let result = &mut *mem;\n         // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         self.destructors\n             .borrow_mut()\n             .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n@@ -607,16 +610,16 @@ impl DropArena {\n         let start_ptr = self.arena.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n-        // Reserve space for the destructors so we can't panic while adding them\n+        // Reserve space for the destructors so we can't panic while adding them.\n         destructors.reserve(len);\n \n         // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec\n+        // the content of the SmallVec.\n         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n         mem::forget(vec.drain(..));\n \n         // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         for i in 0..len {\n             destructors\n                 .push(DropType { drop_fn: drop_for_type::<T>, obj: start_ptr.add(i) as *mut u8 });"}, {"sha": "4aa25aae74760d03de57248d1abd8745c09ae0f4", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -487,6 +487,9 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             } else if reg == InlineAsmReg::AArch64(AArch64InlineAsmReg::x30) {\n                 // LLVM doesn't recognize x30\n                 \"{lr}\".to_string()\n+            } else if reg == InlineAsmReg::Arm(ArmInlineAsmReg::r14) {\n+                // LLVM doesn't recognize r14\n+                \"{lr}\".to_string()\n             } else {\n                 format!(\"{{{}}}\", reg.name())\n             }"}, {"sha": "c5d0927760b6aed29d47466426f40ce7c7a2e3f8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1067,8 +1067,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         self.cfg.configure_expr(expr);\n         visit_clobber(expr.deref_mut(), |mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n@@ -1166,8 +1164,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         let expr = configure!(self, expr);\n         expr.filter_map(|mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 self.cfg.maybe_emit_expr_attr_err(&attr.0);\n \n@@ -1192,7 +1188,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     }\n \n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n-        self.cfg.configure_pat(pat);\n         match pat.kind {\n             PatKind::MacCall(_) => {}\n             _ => return noop_visit_pat(pat, self),\n@@ -1406,15 +1401,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         });\n     }\n \n-    fn visit_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        self.cfg.configure_foreign_mod(foreign_mod);\n-        noop_visit_foreign_mod(foreign_mod, self);\n-    }\n-\n     fn flat_map_foreign_item(\n         &mut self,\n-        mut foreign_item: P<ast::ForeignItem>,\n+        foreign_item: P<ast::ForeignItem>,\n     ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n+        let mut foreign_item = configure!(self, foreign_item);\n+\n         if let Some(attr) = self.take_first_attr(&mut foreign_item) {\n             return self\n                 .collect_attr(\n@@ -1439,11 +1431,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_item_kind(&mut self, item: &mut ast::ItemKind) {\n-        self.cfg.configure_item_kind(item);\n-        noop_visit_item_kind(item, self);\n-    }\n-\n     fn flat_map_generic_param(\n         &mut self,\n         param: ast::GenericParam,\n@@ -1602,21 +1589,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             *id = self.cx.resolver.next_node_id()\n         }\n     }\n-\n-    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n-        self.cfg.configure_fn_decl(&mut fn_decl);\n-        noop_visit_fn_decl(fn_decl, self);\n-    }\n }\n \n pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n     pub features: Option<&'feat Features>,\n     pub recursion_limit: Limit,\n     pub trace_mac: bool,\n-    pub should_test: bool, // If false, strip `#[test]` nodes\n-    pub keep_macs: bool,\n-    pub span_debug: bool, // If true, use verbose debugging for `proc_macro::Span`\n+    pub should_test: bool,          // If false, strip `#[test]` nodes\n+    pub span_debug: bool,           // If true, use verbose debugging for `proc_macro::Span`\n     pub proc_macro_backtrace: bool, // If true, show backtraces for proc-macro panics\n }\n \n@@ -1628,7 +1609,6 @@ impl<'feat> ExpansionConfig<'feat> {\n             recursion_limit: Limit::new(1024),\n             trace_mac: false,\n             should_test: false,\n-            keep_macs: false,\n             span_debug: false,\n             proc_macro_backtrace: false,\n         }"}, {"sha": "c5d8ff25ea94b02d4cea709819eceb34bfa840b5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1,4 +1,3 @@\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(or_patterns)]"}, {"sha": "98682ba42959a0f53460a486e131c4eae2239f8d", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -371,12 +371,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             }\n         }\n     }\n-\n-    fn visit_mod(&mut self, module: &mut ast::Mod) {\n-        noop_visit_mod(module, self);\n-        // remove macro definitions\n-        module.items.retain(\n-            |item| !matches!(item.kind, ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs),\n-        );\n-    }\n }"}, {"sha": "074c9252481aa5bd709d8cd4306addc194b84b56", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -639,6 +639,10 @@ struct QueryTypeRelatingDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}, {"sha": "5e11932eafc4e4bc8e8ceac0f1991830b44a6ee7", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -221,6 +221,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     /// As `3 + 4` contains `N` in its substs, this must not succeed.\n     ///\n     /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn unify_const_variable(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "e720a6f13086de9a47b4bb70d19f816f28ec42e8", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -72,6 +72,8 @@ where\n }\n \n pub trait TypeRelatingDelegate<'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx>;\n+\n     /// Push a constraint `sup: sub` -- this constraint must be\n     /// satisfied for the two types to be related. `sub` and `sup` may\n     /// be regions from the type or new variables created through the\n@@ -473,9 +475,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {\n@@ -819,9 +820,8 @@ where\n         self.infcx.tcx\n     }\n \n-    // FIXME(oli-obk): not sure how to get the correct ParamEnv\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        ty::ParamEnv::empty()\n+        self.delegate.param_env()\n     }\n \n     fn tag(&self) -> &'static str {"}, {"sha": "3e7b93b32a6a5a2b08feeedac74a17c5d43a8c00", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -31,6 +31,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still\n     /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is\n     /// returned.\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "f34ee22860259e1953a2b5437f556c934db113cc", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -228,7 +228,10 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[T, ..n]` implies that `T` must be `Copy`.\n-    RepeatVec,\n+    /// If the function in the array repeat expression is a `const fn`,\n+    /// display a help message suggesting to move the function call to a\n+    /// new `const` item while saying that `T` doesn't implement `Copy`.\n+    RepeatVec(bool),\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {"}, {"sha": "4f359caf31d7c9ed2724f79b25044277260a8c1b", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -228,12 +228,17 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n             ty::Array(t, n) => {\n+                if t.is_simple_ty() {\n+                    return format!(\"array `{}`\", self).into();\n+                }\n+\n                 let n = tcx.lift(n).unwrap();\n-                match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    _ if t.is_simple_ty() => format!(\"array `{}`\", self).into(),\n-                    Some(n) => format!(\"array of {} element{}\", n, pluralize!(n)).into(),\n-                    None => \"array\".into(),\n+                if let ty::ConstKind::Value(v) = n.val {\n+                    if let Some(n) = v.try_to_machine_usize(tcx) {\n+                        return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n+                    }\n                 }\n+                \"array\".into()\n             }\n             ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n             ty::Slice(_) => \"slice\".into(),"}, {"sha": "de012a6957419a19358e8a01ccdb8ef032821c63", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -347,6 +347,7 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     // This should be kept up to date with `resolve`.\n+    #[instrument(level = \"debug\", skip(tcx))]\n     pub fn resolve_opt_const_arg(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "f64848e694ccac0d8f8cb35bf3138fdff29c4d6e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -43,6 +43,9 @@ use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations}\n use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::ResultsCursor;\n+use crate::transform::{\n+    check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n+};\n \n use crate::borrow_check::{\n     borrow_set::BorrowSet,\n@@ -1098,6 +1101,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ) -> Fallible<()> {\n         relate_tys::relate_types(\n             self.infcx,\n+            self.param_env,\n             a,\n             v,\n             b,\n@@ -1988,18 +1992,24 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Copy(..) | Operand::Constant(..) => {\n                             // These are always okay: direct use of a const, or a value that can evidently be copied.\n                         }\n-                        Operand::Move(_) => {\n+                        Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let span = body.source_info(location).span;\n                             let ty = operand.ty(body, tcx);\n                             if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n+                                let is_const_fn =\n+                                    is_const_fn_in_array_repeat_expression(&ccx, &place, &body);\n+\n+                                debug!(\"check_rvalue: is_const_fn={:?}\", is_const_fn);\n+\n                                 let def_id = body.source.def_id().expect_local();\n                                 self.infcx.report_selection_error(\n                                     &traits::Obligation::new(\n                                         ObligationCause::new(\n                                             span,\n                                             self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                            traits::ObligationCauseCode::RepeatVec,\n+                                            traits::ObligationCauseCode::RepeatVec(is_const_fn),\n                                         ),\n                                         self.param_env,\n                                         ty::Binder::bind(ty::TraitRef::new("}, {"sha": "249945f04b7b05748410f88697ca187fd6872bd2", "filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -18,6 +18,7 @@ use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n /// variables, but not the type `b`.\n pub(super) fn relate_types<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     v: ty::Variance,\n     b: Ty<'tcx>,\n@@ -28,7 +29,7 @@ pub(super) fn relate_types<'tcx>(\n     debug!(\"relate_types(a={:?}, v={:?}, b={:?}, locations={:?})\", a, v, b, locations);\n     TypeRelating::new(\n         infcx,\n-        NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n+        NllTypeRelatingDelegate::new(infcx, borrowck_context, param_env, locations, category),\n         v,\n     )\n     .relate(a, b)?;\n@@ -39,6 +40,8 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n     borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n \n+    param_env: ty::ParamEnv<'tcx>,\n+\n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n \n@@ -50,14 +53,19 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         infcx: &'me InferCtxt<'me, 'tcx>,\n         borrowck_context: Option<&'me mut BorrowCheckContext<'bccx, 'tcx>>,\n+        param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Self {\n-        Self { infcx, borrowck_context, locations, category }\n+        Self { infcx, borrowck_context, param_env, locations, category }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        self.param_env\n+    }\n+\n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n         self.infcx.create_next_universe()\n     }"}, {"sha": "ed450c0c2a05613af78b454b43bafcbefebdcef1", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -208,7 +208,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    // see comment in const_eval_raw_provider for what we're doing here\n+    // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();"}, {"sha": "dac8ddccad67ea9edf884ff9dca4a510a29eb4f0", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -21,7 +21,7 @@ use std::hash::Hash;\n \n use super::{\n     CheckInAllocMsg, GlobalAlloc, InterpCx, InterpResult, MPlaceTy, Machine, MemPlaceMeta, OpTy,\n-    ValueVisitor,\n+    ScalarMaybeUninit, ValueVisitor,\n };\n \n macro_rules! throw_validation_failure {\n@@ -378,7 +378,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         value: OpTy<'tcx, M::PointerTag>,\n         kind: &str,\n     ) -> InterpResult<'tcx> {\n-        let value = self.ecx.read_immediate(value)?;\n+        let value = try_validation!(\n+            self.ecx.read_immediate(value),\n+            self.path,\n+            err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+        );\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n         let place = try_validation!(\n@@ -485,6 +489,17 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         Ok(())\n     }\n \n+    fn read_scalar(\n+        &self,\n+        op: OpTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {\n+        Ok(try_validation!(\n+            self.ecx.read_scalar(op),\n+            self.path,\n+            err_unsup!(ReadPointerAsBytes) => { \"(potentially part of) a pointer\" } expected { \"plain (non-pointer) bytes\" },\n+        ))\n+    }\n+\n     /// Check if this is a value of primitive type, and if yes check the validity of the value\n     /// at that type.  Return `true` if the type is indeed primitive.\n     fn try_visit_primitive(\n@@ -495,7 +510,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let ty = value.layout.ty;\n         match ty.kind() {\n             ty::Bool => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = self.read_scalar(value)?;\n                 try_validation!(\n                     value.to_bool(),\n                     self.path,\n@@ -505,7 +520,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Char => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = self.read_scalar(value)?;\n                 try_validation!(\n                     value.to_char(),\n                     self.path,\n@@ -515,11 +530,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n-                let value = try_validation!(\n-                    self.ecx.read_scalar(value),\n-                    self.path,\n-                    err_unsup!(ReadPointerAsBytes) => { \"read of part of a pointer\" },\n-                );\n+                let value = self.read_scalar(value)?;\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n                 if self.ctfe_mode.is_some() {\n@@ -541,9 +552,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation!(\n-                    self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n+                    self.ecx.read_immediate(value).and_then(|i| self.ecx.ref_to_mplace(i)),\n                     self.path,\n                     err_ub!(InvalidUninitBytes(None)) => { \"uninitialized raw pointer\" },\n+                    err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n                 );\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -569,9 +581,13 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 Ok(true)\n             }\n             ty::FnPtr(_sig) => {\n-                let value = self.ecx.read_scalar(value)?;\n+                let value = try_validation!(\n+                    self.ecx.read_immediate(value),\n+                    self.path,\n+                    err_unsup!(ReadPointerAsBytes) => { \"part of a pointer\" } expected { \"a proper pointer or integer value\" },\n+                );\n                 let _fn = try_validation!(\n-                    value.check_init().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n+                    value.to_scalar().and_then(|ptr| self.ecx.memory.get_fn(ptr)),\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n@@ -615,7 +631,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         op: OpTy<'tcx, M::PointerTag>,\n         scalar_layout: &Scalar,\n     ) -> InterpResult<'tcx> {\n-        let value = self.ecx.read_scalar(op)?;\n+        let value = self.read_scalar(op)?;\n         let valid_range = &scalar_layout.valid_range;\n         let (lo, hi) = valid_range.clone().into_inner();\n         // Determine the allowed range"}, {"sha": "1d4438d80c95ae9c7d806b2273f3a439885a4f02", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1231,3 +1231,38 @@ pub fn promote_candidates<'tcx>(\n \n     promotions\n }\n+\n+/// This function returns `true` if the function being called in the array\n+/// repeat expression is a `const` function.\n+crate fn is_const_fn_in_array_repeat_expression<'tcx>(\n+    ccx: &ConstCx<'_, 'tcx>,\n+    place: &Place<'tcx>,\n+    body: &Body<'tcx>,\n+) -> bool {\n+    match place.as_local() {\n+        // rule out cases such as: `let my_var = some_fn(); [my_var; N]`\n+        Some(local) if body.local_decls[local].is_user_variable() => return false,\n+        None => return false,\n+        _ => {}\n+    }\n+\n+    for block in body.basic_blocks() {\n+        if let Some(Terminator { kind: TerminatorKind::Call { func, destination, .. }, .. }) =\n+            &block.terminator\n+        {\n+            if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n+                if let ty::FnDef(def_id, _) = *ty.kind() {\n+                    if let Some((destination_place, _)) = destination {\n+                        if destination_place == place {\n+                            if is_const_fn(ccx.tcx, def_id) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "4b03d38ccba5bc012cc44452cbd9650d94e7b8cd", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -510,11 +510,10 @@ impl Span {\n     /// items can be used (that is, a macro marked with\n     /// `#[allow_internal_unstable]`).\n     pub fn allows_unstable(&self, feature: Symbol) -> bool {\n-        self.ctxt().outer_expn_data().allow_internal_unstable.map_or(false, |features| {\n-            features\n-                .iter()\n-                .any(|&f| f == feature || f == sym::allow_internal_unstable_backcompat_hack)\n-        })\n+        self.ctxt()\n+            .outer_expn_data()\n+            .allow_internal_unstable\n+            .map_or(false, |features| features.iter().any(|&f| f == feature))\n     }\n \n     /// Checks if this span arises from a compiler desugaring of kind `kind`."}, {"sha": "8c90eeb7f3f4a9cf476636447959e426d84450cb", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -252,7 +252,6 @@ symbols! {\n         allow_fail,\n         allow_internal_unsafe,\n         allow_internal_unstable,\n-        allow_internal_unstable_backcompat_hack,\n         allowed,\n         always,\n         and,"}, {"sha": "9fd2f121007406337f6987f488b1e2e555243e74", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1881,10 +1881,26 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec => {\n+            ObligationCauseCode::RepeatVec(is_const_fn) => {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );\n+\n+                if is_const_fn {\n+                    err.help(\n+                        \"consider creating a new `const` item and initializing with the result \\\n+                        of the function call to be used in the repeat position, like \\\n+                        `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\",\n+                    );\n+                }\n+\n+                if self.tcx.sess.is_nightly_build() && is_const_fn {\n+                    err.help(\n+                        \"create an inline `const` block, see PR \\\n+                        #2920 <https://github.com/rust-lang/rfcs/pull/2920> \\\n+                        for more information\",\n+                    );\n+                }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {\n                 let parent_node = self.tcx.hir().get_parent_node(hir_id);"}, {"sha": "1cc580a198386bac4e114439725a3cb89b2d39a4", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -10,6 +10,7 @@ use traits::{translate_substs, Reveal};\n \n use tracing::debug;\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -38,13 +39,13 @@ fn resolve_instance_of_const_arg<'tcx>(\n     )\n }\n \n+#[instrument(level = \"debug\", skip(tcx))]\n fn inner_resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"resolve(def={:?}, substs={:?})\", def.did, substs);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n         let item = tcx.associated_item(def.did);\n@@ -93,7 +94,7 @@ fn inner_resolve_instance<'tcx>(\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\"resolve(def.did={:?}, substs={:?}) = {:?}\", def.did, substs, result);\n+    debug!(\"inner_resolve_instance: result={:?}\", result);\n     result\n }\n "}, {"sha": "f2ec2774484409462ee7814ec81db8f428461fad", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -649,12 +649,12 @@ impl<T> BTreeSet<T> {\n     /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let mut map = BTreeSet::new();\n-    /// assert_eq!(map.first(), None);\n-    /// map.insert(1);\n-    /// assert_eq!(map.first(), Some(&1));\n-    /// map.insert(2);\n-    /// assert_eq!(map.first(), Some(&1));\n+    /// let mut set = BTreeSet::new();\n+    /// assert_eq!(set.first(), None);\n+    /// set.insert(1);\n+    /// assert_eq!(set.first(), Some(&1));\n+    /// set.insert(2);\n+    /// assert_eq!(set.first(), Some(&1));\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn first(&self) -> Option<&T>\n@@ -675,12 +675,12 @@ impl<T> BTreeSet<T> {\n     /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n-    /// let mut map = BTreeSet::new();\n-    /// assert_eq!(map.last(), None);\n-    /// map.insert(1);\n-    /// assert_eq!(map.last(), Some(&1));\n-    /// map.insert(2);\n-    /// assert_eq!(map.last(), Some(&2));\n+    /// let mut set = BTreeSet::new();\n+    /// assert_eq!(set.last(), None);\n+    /// set.insert(1);\n+    /// assert_eq!(set.last(), Some(&1));\n+    /// set.insert(2);\n+    /// assert_eq!(set.last(), Some(&2));\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn last(&self) -> Option<&T>"}, {"sha": "2df5e562745d0c061676f0380a186ebcb4f2bfe4", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -401,8 +401,6 @@ impl<'a> Arguments<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(fmt_as_str)]\n-    ///\n     /// use std::fmt::Arguments;\n     ///\n     /// fn write_str(_: &str) { /* ... */ }\n@@ -417,13 +415,11 @@ impl<'a> Arguments<'a> {\n     /// ```\n     ///\n     /// ```rust\n-    /// #![feature(fmt_as_str)]\n-    ///\n     /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n     /// assert_eq!(format_args!(\"\").as_str(), Some(\"\"));\n     /// assert_eq!(format_args!(\"{}\", 1).as_str(), None);\n     /// ```\n-    #[unstable(feature = \"fmt_as_str\", issue = \"74442\")]\n+    #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n     #[inline]\n     pub fn as_str(&self) -> Option<&'static str> {\n         match (self.pieces, self.args) {"}, {"sha": "b3802c1abde9fa5dbb9b11880cfa3b41f3effcf5", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -816,6 +816,7 @@ pub(crate) mod builtin {\n     #[macro_export]\n     macro_rules! env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n+        ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n \n     /// Optionally inspects an environment variable at compile time."}, {"sha": "5bb3f6bdcfd7bddae10a6affa87d94339880c0d8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -76,6 +76,10 @@ pub struct OsString {\n     inner: Buf,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for OsString {}\n+\n /// Borrowed reference to an OS string (see [`OsString`]).\n ///\n /// This type represents a borrowed reference to a string in the operating system's preferred\n@@ -100,6 +104,10 @@ pub struct OsStr {\n     inner: Slice,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for OsStr {}\n+\n impl OsString {\n     /// Constructs a new empty `OsString`.\n     ///"}, {"sha": "bc9b47029417d312ee6da89eac9b19bf17187b28", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -264,7 +264,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n #![feature(external_doc)]\n-#![feature(fmt_as_str)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]\n@@ -582,3 +581,11 @@ include!(\"keyword_docs.rs\");\n // is unconditional, so the unstable feature needs to be defined somewhere.\n #[unstable(feature = \"restricted_std\", issue = \"none\")]\n mod __restricted_std_workaround {}\n+\n+mod sealed {\n+    /// This trait being unreachable from outside the crate\n+    /// prevents outside implementations of our extension traits.\n+    /// This allows adding more trait methods in the future.\n+    #[unstable(feature = \"sealed\", issue = \"none\")]\n+    pub trait Sealed {}\n+}"}, {"sha": "3e634239ad3015f689226f40ebaa7e422dd3f735", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -408,7 +408,7 @@ impl<S: Stream> Stream for AssertUnwindSafe<S> {\n /// aborting the process as well. This function *only* catches unwinding panics,\n /// not those that abort the process.\n ///\n-/// Also note that unwinding into Rust code with a foreign exception (e.g. a\n+/// Also note that unwinding into Rust code with a foreign exception (e.g.\n /// an exception thrown from C++ code) is undefined behavior.\n ///\n /// # Examples"}, {"sha": "6480e654c55f05b9fff3874a747205fbb3647b1e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -498,6 +498,10 @@ pub struct Command {\n     inner: imp::Command,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for Command {}\n+\n impl Command {\n     /// Constructs a new `Command` for launching the program at\n     /// path `program`, with the following default configuration:\n@@ -1375,6 +1379,10 @@ impl From<fs::File> for Stdio {\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for ExitStatus {}\n+\n impl ExitStatus {\n     /// Was termination successful? Signal termination is not considered a\n     /// success, and success is defined as a zero exit status."}, {"sha": "7559c1f1d9e290d41ef4be7d0baeca3896787a46", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -6,20 +6,16 @@ use crate::ffi::OsStr;\n use crate::io;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::process;\n+use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n-mod private {\n-    /// This trait being unreachable from outside the crate\n-    /// prevents other implementations of the `ExitStatusExt` trait,\n-    /// which allows potentially adding more trait methods in the future.\n-    #[stable(feature = \"none\", since = \"1.51.0\")]\n-    pub trait Sealed {}\n-}\n-\n /// Unix-specific extensions to the [`process::Command`] builder.\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait CommandExt {\n+pub trait CommandExt: Sealed {\n     /// Sets the child process's user ID. This translates to a\n     /// `setuid` call in the child process. Failure in the `setuid`\n     /// call will cause the spawn to fail.\n@@ -193,7 +189,7 @@ impl CommandExt for process::Command {\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait ExitStatusExt: private::Sealed {\n+pub trait ExitStatusExt: Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n@@ -228,9 +224,6 @@ pub trait ExitStatusExt: private::Sealed {\n     fn into_raw(self) -> i32;\n }\n \n-#[stable(feature = \"none\", since = \"1.51.0\")]\n-impl private::Sealed for process::ExitStatus {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExitStatusExt for process::ExitStatus {\n     fn from_raw(raw: i32) -> Self {"}, {"sha": "9789ed085e29d2841f683924d911a92388e3e53a", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1023,7 +1023,7 @@ extern \"system\" {\n     pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n \n     // >= Vista / Server 2008\n-    // https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinka\n+    // https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinkw\n     pub fn CreateSymbolicLinkW(\n         lpSymlinkFileName: LPCWSTR,\n         lpTargetFileName: LPCWSTR,"}, {"sha": "c89b9ff1efa6b98e892b510fcc0af2796bcda054", "filename": "library/std/src/sys/windows/ext/ffi.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -53,6 +53,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ffi::{OsStr, OsString};\n+use crate::sealed::Sealed;\n use crate::sys::os_str::Buf;\n use crate::sys_common::wtf8::Wtf8Buf;\n use crate::sys_common::{AsInner, FromInner};\n@@ -61,8 +62,11 @@ use crate::sys_common::{AsInner, FromInner};\n pub use crate::sys_common::wtf8::EncodeWide;\n \n /// Windows-specific extensions to [`OsString`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n+pub trait OsStringExt: Sealed {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n@@ -92,8 +96,11 @@ impl OsStringExt for OsString {\n }\n \n /// Windows-specific extensions to [`OsStr`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n+pub trait OsStrExt: Sealed {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e., potentially\n     /// ill-formed UTF-16.\n     ///"}, {"sha": "3d680a7f2d94fed6f01c9375bbcfea71034bd1f4", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -4,17 +4,10 @@\n \n use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n use crate::process;\n+use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n-mod private {\n-    /// This trait being unreachable from outside the crate\n-    /// prevents other implementations of the `ExitStatusExt` trait,\n-    /// which allows potentially adding more trait methods in the future.\n-    #[stable(feature = \"none\", since = \"1.51.0\")]\n-    pub trait Sealed {}\n-}\n-\n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n     unsafe fn from_raw_handle(handle: RawHandle) -> process::Stdio {\n@@ -85,7 +78,7 @@ impl IntoRawHandle for process::ChildStderr {\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n-pub trait ExitStatusExt: private::Sealed {\n+pub trait ExitStatusExt: Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n@@ -99,12 +92,12 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n-#[stable(feature = \"none\", since = \"1.51.0\")]\n-impl private::Sealed for process::ExitStatus {}\n-\n /// Windows-specific extensions to the [`process::Command`] builder.\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n-pub trait CommandExt {\n+pub trait CommandExt: Sealed {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n     ///\n     /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`."}, {"sha": "302c519740717723dd12bed1e7e61a4b2d313b35", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -6,6 +6,7 @@ use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::mem;\n use crate::rc::Rc;\n+use crate::sealed::Sealed;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys_common::bytestring::debug_fmt_bytestring;\n@@ -232,8 +233,11 @@ impl Slice {\n }\n \n /// Platform-specific extensions to [`OsString`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n+pub trait OsStringExt: Sealed {\n     /// Creates an [`OsString`] from a byte vector.\n     ///\n     /// See the module documentation for an example.\n@@ -258,8 +262,11 @@ impl OsStringExt for OsString {\n }\n \n /// Platform-specific extensions to [`OsStr`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n+pub trait OsStrExt: Sealed {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Creates an [`OsStr`] from a byte slice.\n     ///"}, {"sha": "9752bc3f66d44e5f5176435384d2a7e9f2211455", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1,4 +1,5 @@\n This directory contains the source code of the rust project, including:\n+\n - The test suite\n - The bootstrapping build system\n - Various submodules for tools, like rustdoc, rls, etc."}, {"sha": "a9099981e644a83f425a65dfd65622e6f4dd9319", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -579,8 +579,7 @@ impl<'a> Builder<'a> {\n         self.run_step_descriptions(&Builder::get_step_descriptions(self.kind), &self.paths);\n     }\n \n-    pub fn default_doc(&self, paths: Option<&[PathBuf]>) {\n-        let paths = paths.unwrap_or(&[]);\n+    pub fn default_doc(&self, paths: &[PathBuf]) {\n         self.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), paths);\n     }\n "}, {"sha": "802b5c99500cce32ff5b18dfe6df166df6351b28", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -68,7 +68,7 @@ impl Step for Docs {\n         if !builder.config.docs {\n             return None;\n         }\n-        builder.default_doc(None);\n+        builder.default_doc(&[]);\n \n         let dest = \"share/doc/rust/html\";\n \n@@ -103,7 +103,7 @@ impl Step for RustcDocs {\n         if !builder.config.compiler_docs {\n             return None;\n         }\n-        builder.default_doc(None);\n+        builder.default_doc(&[]);\n \n         let mut tarball = Tarball::new(builder, \"rustc-docs\", &host.triple);\n         tarball.set_product_name(\"Rustc Documentation\");"}, {"sha": "7830dc82394649197a93a952bedd47fd33b36d51", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -111,7 +111,7 @@ impl Step for Linkcheck {\n \n         builder.info(&format!(\"Linkcheck ({})\", host));\n \n-        builder.default_doc(None);\n+        builder.default_doc(&[]);\n \n         let _time = util::timeit(&builder);\n         try_run("}, {"sha": "3d6579250a0143c0c35d80bac13e907a51a3fc0f", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -300,7 +300,7 @@ flag][prefer-dynamic] may be used to influence which is used.\n If the same crate name is specified with and without a path, the one with the\n path is used and the pathless flag has no effect.\n \n-[extern prelude]: ../reference/items/extern-crates.html#extern-prelude\n+[extern prelude]: ../reference/names/preludes.html#extern-prelude\n [prefer-dynamic]: codegen-options/index.md#prefer-dynamic\n \n <a id=\"option-sysroot\"></a>"}, {"sha": "3decdd02b0012a6b97290b15c3112367e73869cb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1269,7 +1269,7 @@ impl Clean<Item> for ty::AssocItem {\n \n                     AssocTypeItem(bounds, ty.clean(cx))\n                 } else {\n-                    // FIXME: when could this happen? ASsociated items in inherent impls?\n+                    // FIXME: when could this happen? Associated items in inherent impls?\n                     let type_ = cx.tcx.type_of(self.def_id).clean(cx);\n                     TypedefItem(\n                         Typedef {"}, {"sha": "09901a7a39c0874fd0a391cc833851756df6953e", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -91,6 +91,15 @@ pub unsafe fn sym_static() {\n     asm!(\"adr r0, {}\", sym extern_static);\n }\n \n+// Regression test for #82052.\n+// CHECK-LABEL: issue_82052\n+// CHECK: push {{.*}}lr\n+// CHECK: @APP\n+// CHECK: @NO_APP\n+pub unsafe fn issue_82052() {\n+    asm!(\"\", out(\"r14\") _);\n+}\n+\n macro_rules! check {\n     ($func:ident $ty:ident $class:ident $mov:literal) => {\n         #[no_mangle]"}, {"sha": "8f02bfb937a5a0708c012c161396493187458b18", "filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This test is a minimized reproduction for #79518 where\n+// during error handling for the type mismatch we would try\n+// to evaluate std::mem::size_of::<Self::Assoc> causing an ICE\n+\n+trait Foo {\n+    type Assoc: PartialEq;\n+    const AssocInstance: Self::Assoc;\n+\n+    fn foo()\n+    where\n+        [(); std::mem::size_of::<Self::Assoc>()]: ,\n+    {\n+        Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n+        //~^ Error: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c90774e944f1f48d690099893a5025992b15054c", "filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n+   |\n+LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |\n+   = note: expected associated type `<Self as Foo>::Assoc`\n+                        found array `[(); _]`\n+   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); _]` or calling a method that returns `<Self as Foo>::Assoc`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a34d74b29e9f014164f93ce212828af5574e0e5c", "filename": "src/test/ui/const-generics/issue-80561-incorrect-param-env.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-80561-incorrect-param-env.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This tests that the correct `param_env` is used so that\n+// attempting to normalize `Self::N` does not cause an ICE.\n+\n+pub struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+    pub fn foo() {}\n+}\n+\n+pub trait Bar {\n+    const N: usize;\n+    fn bar()\n+    where\n+        [(); Self::N]: ,\n+    {\n+        Foo::<{ Self::N }>::foo();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "303de078013acdad30d35ec44a3a258008bf2a08", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -7,6 +7,8 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: the following implementations were found:\n              <Option<T> as Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n \n error: aborting due to previous error\n "}, {"sha": "a40290eca0972207ce011018d490b83414a3f6dd", "filename": "src/test/ui/consts/const-fn-in-vec.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    // should hint to create an inline `const` block\n+    // or to create a new `const` item\n+    let strings: [String; 5] = [String::new(); 5];\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied\n+    println!(\"{:?}\", strings);\n+}"}, {"sha": "f9f184dfc06b6b8170faaa8f0ed7f8733976d389", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/const-fn-in-vec.rs:4:32\n+   |\n+LL |     let strings: [String; 5] = [String::new(); 5];\n+   |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+   = help: consider creating a new `const` item and initializing with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see PR #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ca56ff220564a230ed32861ffbef91a4335b04a4", "filename": "src/test/ui/consts/issue-79690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.stderr?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/issue-79690.rs:29:1\n    |\n LL | const G: Fat = unsafe { Transmute { t: FOO }.u };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered read of part of a pointer at .1.<deref>.size.foo\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer at .1.<deref>.size.foo, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "b0d8a53ed93b0062aa50265e0fbab52b4f9cd384", "filename": "src/test/ui/pattern/usefulness/issue-72377.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,17 @@\n+#[derive(PartialEq, Eq)]\n+enum X { A, B, C, }\n+\n+fn main() {\n+    let x = X::A;\n+    let y = Some(X::A);\n+\n+    match (x, y) {\n+        //~^ ERROR non-exhaustive patterns: `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2\n+        //~| more not covered\n+        (_, None) => false,\n+        (v, Some(w)) if v == w => true,\n+        (X::B, Some(X::C)) => false,\n+        (X::B, Some(X::A)) => false,\n+        (X::A, Some(X::C)) | (X::C, Some(X::A)) => false,\n+    };\n+}"}, {"sha": "b4a68333967b36b97d5ebf7c8284916c486c6d7b", "filename": "src/test/ui/pattern/usefulness/issue-72377.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a4673fbd40b09a99d057eaa9b3e5579b54c184/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -0,0 +1,12 @@\n+error[E0004]: non-exhaustive patterns: `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n+  --> $DIR/issue-72377.rs:8:11\n+   |\n+LL |     match (x, y) {\n+   |           ^^^^^^ patterns `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(X, Option<X>)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "7435b9e98c9280043605748c11a1f450669e04d6", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=42a4673fbd40b09a99d057eaa9b3e5579b54c184", "patch": "@@ -1 +1 @@\n-Subproject commit 336909b63a14b801520c6627d90d750babcfe280\n+Subproject commit 7435b9e98c9280043605748c11a1f450669e04d6"}]}