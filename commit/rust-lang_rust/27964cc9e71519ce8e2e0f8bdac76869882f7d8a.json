{"sha": "27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTY0Y2M5ZTcxNTE5Y2U4ZTJlMGY4YmRhYzc2ODY5ODgyZjdkOGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-09T08:51:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-09T08:51:56Z"}, "message": "Merge #3052\n\n3052: Rename add import assist r=matklad a=SomeoneToIgnore\n\nBased on the https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/2.20assists.20with.20the.20same.20action.20name/near/187655643 and the related discussion.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "f243ea58e6e9f7ff92bd81775cb931c6798ea9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f243ea58e6e9f7ff92bd81775cb931c6798ea9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeP8gsCRBK7hj4Ov3rIwAAdHIIAGhMnaosuFGUnS6v240/60qI\n4BrdQNjlFYedYJezVBwHP6jFefhHj+0lME6bscdBma06hTanszOwJ0Wd8FpE7BBX\nDPbXbx2K2VOApIQjniNQmWFSEEIFN5JVOmfT1An4BqUq9YD/yQjHWrddGOCPChjZ\nDqY425ZW1ji2rvH1oEeM55G+y5/Qrj6HY9Q12wG4hrCjESsserUzhQj9bK5ZLjOo\ntriaoFeRrZMldjvcywPBZPttsidB6EuY31aTr19J8WWW3UPhK3NzWJdg1VH+YeU8\n/RsUDLY0eVLk0xfw6KuinKTOHmumGNxQI0rh0T5DIgs9Tqe6qwmXgixMfIiXAmA=\n=RyFI\n-----END PGP SIGNATURE-----\n", "payload": "tree f243ea58e6e9f7ff92bd81775cb931c6798ea9ee\nparent 3e1d97790be166f8735607c552a94a28ab9b09b8\nparent 740a26b7d26a68cc46becda3cca39091e8da67fc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581238316 +0000\ncommitter GitHub <noreply@github.com> 1581238316 +0000\n\nMerge #3052\n\n3052: Rename add import assist r=matklad a=SomeoneToIgnore\n\nBased on the https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/2.20assists.20with.20the.20same.20action.20name/near/187655643 and the related discussion.\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "html_url": "https://github.com/rust-lang/rust/commit/27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1d97790be166f8735607c552a94a28ab9b09b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1d97790be166f8735607c552a94a28ab9b09b8", "html_url": "https://github.com/rust-lang/rust/commit/3e1d97790be166f8735607c552a94a28ab9b09b8"}, {"sha": "740a26b7d26a68cc46becda3cca39091e8da67fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/740a26b7d26a68cc46becda3cca39091e8da67fc", "html_url": "https://github.com/rust-lang/rust/commit/740a26b7d26a68cc46becda3cca39091e8da67fc"}], "stats": {"total": 200, "additions": 96, "deletions": 104}, "files": [{"sha": "4ab09b167b5f28de2960c9a3313e2de9a8c29885", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -1,4 +1,4 @@\n-//! Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n+//! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n use super::check;\n \n@@ -160,21 +160,6 @@ impl Trait<u32> for () {\n     )\n }\n \n-#[test]\n-fn doctest_add_import() {\n-    check(\n-        \"add_import\",\n-        r#####\"\n-fn process(map: std::collections::<|>HashMap<String, String>) {}\n-\"#####,\n-        r#####\"\n-use std::collections::HashMap;\n-\n-fn process(map: HashMap<String, String>) {}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_add_new() {\n     check(\n@@ -591,6 +576,21 @@ fn handle(action: Action) {\n     )\n }\n \n+#[test]\n+fn doctest_replace_qualified_name_with_use() {\n+    check(\n+        \"replace_qualified_name_with_use\",\n+        r#####\"\n+fn process(map: std::collections::<|>HashMap<String, String>) {}\n+\"#####,\n+        r#####\"\n+use std::collections::HashMap;\n+\n+fn process(map: HashMap<String, String>) {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_split_import() {\n     check("}, {"sha": "4514b86911c82e69fdc1663d29a59d0b83ad07f0", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{ActionBuilder, Assist, AssistCtx},\n-    auto_import_text_edit, AssistId,\n+    insert_use_statement, AssistId,\n };\n use std::collections::BTreeSet;\n \n@@ -78,7 +78,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n     let mut action_builder = ActionBuilder::default();\n     action_builder.label(format!(\"Import `{}`\", &import));\n-    auto_import_text_edit(position, anchor, &import, action_builder.text_edit_builder());\n+    insert_use_statement(position, anchor, &import, action_builder.text_edit_builder());\n     action_builder\n }\n "}, {"sha": "b70c88ec29af85ae6652b04bf16ae7cd8215ff69", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "renamed", "additions": 56, "deletions": 58, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -12,10 +12,10 @@ use crate::{\n     AssistId,\n };\n \n-/// This function produces sequence of text edits into edit\n-/// to import the target path in the most appropriate scope given\n-/// the cursor position\n-pub fn auto_import_text_edit(\n+/// Creates and inserts a use statement for the given path to import.\n+/// The use statement is inserted in the scope most appropriate to the\n+/// the cursor position given, additionally merged with the existing use imports.\n+pub fn insert_use_statement(\n     // Ideally the position of the cursor, used to\n     position: &SyntaxNode,\n     // The statement to use as anchor (last resort)\n@@ -37,9 +37,9 @@ pub fn auto_import_text_edit(\n     }\n }\n \n-// Assist: add_import\n+// Assist: replace_qualified_name_with_use\n //\n-// Adds a use statement for a given fully-qualified path.\n+// Adds a use statement for a given fully-qualified name.\n //\n // ```\n // fn process(map: std::collections::<|>HashMap<String, String>) {}\n@@ -50,7 +50,7 @@ pub fn auto_import_text_edit(\n //\n // fn process(map: HashMap<String, String>) {}\n // ```\n-pub(crate) fn add_import(ctx: AssistCtx) -> Option<Assist> {\n+pub(crate) fn replace_qualified_name_with_use(ctx: AssistCtx) -> Option<Assist> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n@@ -72,9 +72,13 @@ pub(crate) fn add_import(ctx: AssistCtx) -> Option<Assist> {\n         }\n     };\n \n-    ctx.add_assist(AssistId(\"add_import\"), format!(\"Import {}\", fmt_segments(&segments)), |edit| {\n-        apply_auto_import(&position, &path, &segments, edit.text_edit_builder());\n-    })\n+    ctx.add_assist(\n+        AssistId(\"replace_qualified_name_with_use\"),\n+        \"Replace qualified path with use\",\n+        |edit| {\n+            replace_with_use(&position, &path, &segments, edit.text_edit_builder());\n+        },\n+    )\n }\n \n fn collect_path_segments_raw(\n@@ -107,12 +111,6 @@ fn collect_path_segments_raw(\n     Some(segments.len() - oldlen)\n }\n \n-fn fmt_segments(segments: &[SmolStr]) -> String {\n-    let mut buf = String::new();\n-    fmt_segments_raw(segments, &mut buf);\n-    buf\n-}\n-\n fn fmt_segments_raw(segments: &[SmolStr], buf: &mut String) {\n     let mut iter = segments.iter();\n     if let Some(s) = iter.next() {\n@@ -558,7 +556,7 @@ fn make_assist_add_nested_import(\n     }\n }\n \n-fn apply_auto_import(\n+fn replace_with_use(\n     container: &SyntaxNode,\n     path: &ast::Path,\n     target: &[SmolStr],\n@@ -567,7 +565,7 @@ fn apply_auto_import(\n     let action = best_action_for_target(container.clone(), path.syntax().clone(), target);\n     make_assist(&action, target, edit);\n     if let Some(last) = path.segment() {\n-        // Here we are assuming the assist will provide a  correct use statement\n+        // Here we are assuming the assist will provide a correct use statement\n         // so we can delete the path qualifier\n         edit.delete(TextRange::from_to(\n             path.syntax().text_range().start(),\n@@ -603,9 +601,9 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_auto_import_add_use_no_anchor() {\n+    fn test_replace_add_use_no_anchor() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n std::fmt::Debug<|>\n     \",\n@@ -617,9 +615,9 @@ Debug<|>\n         );\n     }\n     #[test]\n-    fn test_auto_import_add_use_no_anchor_with_item_below() {\n+    fn test_replace_add_use_no_anchor_with_item_below() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n std::fmt::Debug<|>\n \n@@ -638,9 +636,9 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_auto_import_add_use_no_anchor_with_item_above() {\n+    fn test_replace_add_use_no_anchor_with_item_above() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n fn main() {\n }\n@@ -659,9 +657,9 @@ Debug<|>\n     }\n \n     #[test]\n-    fn test_auto_import_add_use_no_anchor_2seg() {\n+    fn test_replace_add_use_no_anchor_2seg() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n std::fmt<|>::Debug\n     \",\n@@ -674,9 +672,9 @@ fmt<|>::Debug\n     }\n \n     #[test]\n-    fn test_auto_import_add_use() {\n+    fn test_replace_add_use() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use stdx;\n \n@@ -694,9 +692,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_use_other_anchor() {\n+    fn test_replace_file_use_other_anchor() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n impl std::fmt::Debug<|> for Foo {\n }\n@@ -711,9 +709,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_add_use_other_anchor_indent() {\n+    fn test_replace_add_use_other_anchor_indent() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n     impl std::fmt::Debug<|> for Foo {\n     }\n@@ -728,9 +726,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_split_different() {\n+    fn test_replace_split_different() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt;\n \n@@ -747,9 +745,9 @@ impl io<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_split_self_for_use() {\n+    fn test_replace_split_self_for_use() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt;\n \n@@ -766,9 +764,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_split_self_for_target() {\n+    fn test_replace_split_self_for_target() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::Debug;\n \n@@ -785,9 +783,9 @@ impl fmt<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_add_to_nested_self_nested() {\n+    fn test_replace_add_to_nested_self_nested() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -804,9 +802,9 @@ impl nested<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_add_to_nested_self_already_included() {\n+    fn test_replace_add_to_nested_self_already_included() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::{Debug, nested::{self, Display}};\n \n@@ -823,9 +821,9 @@ impl nested<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_add_to_nested_nested() {\n+    fn test_replace_add_to_nested_nested() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -842,9 +840,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_split_common_target_longer() {\n+    fn test_replace_split_common_target_longer() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::Debug;\n \n@@ -861,9 +859,9 @@ impl Display<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_split_common_use_longer() {\n+    fn test_replace_split_common_use_longer() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt::nested::Debug;\n \n@@ -880,9 +878,9 @@ impl Display<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_use_nested_import() {\n+    fn test_replace_use_nested_import() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use crate::{\n     ty::{Substs, Ty},\n@@ -903,9 +901,9 @@ fn foo() { lower<|>::trait_env() }\n     }\n \n     #[test]\n-    fn test_auto_import_alias() {\n+    fn test_replace_alias() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt as foo;\n \n@@ -922,9 +920,9 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_not_applicable_one_segment() {\n+    fn test_replace_not_applicable_one_segment() {\n         check_assist_not_applicable(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n impl foo<|> for Foo {\n }\n@@ -933,19 +931,19 @@ impl foo<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_not_applicable_in_use() {\n+    fn test_replace_not_applicable_in_use() {\n         check_assist_not_applicable(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n use std::fmt<|>;\n \",\n         );\n     }\n \n     #[test]\n-    fn test_auto_import_add_use_no_anchor_in_mod_mod() {\n+    fn test_replace_add_use_no_anchor_in_mod_mod() {\n         check_assist(\n-            add_import,\n+            replace_qualified_name_with_use,\n             \"\n mod foo {\n     mod bar {", "previous_filename": "crates/ra_assists/src/handlers/add_import.rs"}, {"sha": "f79189ae805aa5d57d44647346154fca963cf186", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -21,7 +21,7 @@ use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx, AssistHandler};\n-pub use crate::handlers::add_import::auto_import_text_edit;\n+pub use crate::handlers::replace_qualified_name_with_use::insert_use_statement;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -133,7 +133,7 @@ mod handlers {\n     mod replace_if_let_with_match;\n     mod split_import;\n     mod remove_dbg;\n-    pub(crate) mod add_import;\n+    pub(crate) mod replace_qualified_name_with_use;\n     mod add_missing_impl_members;\n     mod move_guard;\n     mod move_bounds;\n@@ -158,7 +158,7 @@ mod handlers {\n             replace_if_let_with_match::replace_if_let_with_match,\n             split_import::split_import,\n             remove_dbg::remove_dbg,\n-            add_import::add_import,\n+            replace_qualified_name_with_use::replace_qualified_name_with_use,\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n             inline_local_variable::inline_local_variable,"}, {"sha": "aaa9985d4ecad19ca9bdf05b0a66569a41fc6805", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_assists::auto_import_text_edit;\n+use ra_assists::insert_use_statement;\n use ra_syntax::{ast, AstNode, SmolStr};\n use ra_text_edit::TextEditBuilder;\n use rustc_hash::FxHashMap;\n@@ -26,12 +26,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n             let edit = {\n                 let mut builder = TextEditBuilder::default();\n                 builder.replace(ctx.source_range(), name.to_string());\n-                auto_import_text_edit(\n-                    &ctx.token.parent(),\n-                    &ctx.token.parent(),\n-                    &path,\n-                    &mut builder,\n-                );\n+                insert_use_statement(&ctx.token.parent(), &ctx.token.parent(), &path, &mut builder);\n                 builder.finish()\n             };\n "}, {"sha": "e27b27ffabc2753932ce784ac79b5f32dd275d88", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -1,4 +1,4 @@\n-//! Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n+//! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n #[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]"}, {"sha": "435135f92d5a596ca9a189c9f65488f7c8c89a4f", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -1,4 +1,4 @@\n-//! Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n+//! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n use crate::{\n     ast::{self, AstChildren, AstNode},"}, {"sha": "f737a2fa49b830c492179513825ce891d8f141f3", "filename": "docs/user/assists.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -154,20 +154,6 @@ impl Trait<u32> for () {\n }\n ```\n \n-## `add_import`\n-\n-Adds a use statement for a given fully-qualified path.\n-\n-```rust\n-// BEFORE\n-fn process(map: std::collections::\u2503HashMap<String, String>) {}\n-\n-// AFTER\n-use std::collections::HashMap;\n-\n-fn process(map: HashMap<String, String>) {}\n-```\n-\n ## `add_new`\n \n Adds a new inherent impl for a type.\n@@ -568,6 +554,20 @@ fn handle(action: Action) {\n }\n ```\n \n+## `replace_qualified_name_with_use`\n+\n+Adds a use statement for a given fully-qualified name.\n+\n+```rust\n+// BEFORE\n+fn process(map: std::collections::\u2503HashMap<String, String>) {}\n+\n+// AFTER\n+use std::collections::HashMap;\n+\n+fn process(map: HashMap<String, String>) {}\n+```\n+\n ## `split_import`\n \n Wraps the tail of import into braces."}, {"sha": "8fdf43e4a8c0e14b61b4defb5aada7f69c32afd3", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27964cc9e71519ce8e2e0f8bdac76869882f7d8a/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=27964cc9e71519ce8e2e0f8bdac76869882f7d8a", "patch": "@@ -53,8 +53,7 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n     write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n     let output = rustfmt.wait_with_output()?;\n     let stdout = String::from_utf8(output.stdout)?;\n-    // TODO: update the preable: replace ra_tools with the relevant path\n-    let preamble = \"Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\";\n+    let preamble = \"Generated file, do not edit by hand, see `xtask/src/codegen`\";\n     Ok(format!(\"//! {}\\n\\n{}\", preamble, stdout))\n }\n "}]}