{"sha": "369f7fa169d9f97ac8185105201182781076a90d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OWY3ZmExNjlkOWY5N2FjODE4NTEwNTIwMTE4Mjc4MTA3NmE5MGQ=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-14T22:13:16Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-20T17:28:50Z"}, "message": "Prevent Send, Freeze, and Sized from being manually implemented. Close #8517.", "tree": {"sha": "5db351c894bf6ace38d5551769c7df40ffb68e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db351c894bf6ace38d5551769c7df40ffb68e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/369f7fa169d9f97ac8185105201182781076a90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/369f7fa169d9f97ac8185105201182781076a90d", "html_url": "https://github.com/rust-lang/rust/commit/369f7fa169d9f97ac8185105201182781076a90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/369f7fa169d9f97ac8185105201182781076a90d/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f268128954fef84dcbcb7c9fe77e2a107e0bf69", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f268128954fef84dcbcb7c9fe77e2a107e0bf69", "html_url": "https://github.com/rust-lang/rust/commit/7f268128954fef84dcbcb7c9fe77e2a107e0bf69"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "8dd5ee205855226a671ebeef789e5ecc0f24670c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=369f7fa169d9f97ac8185105201182781076a90d", "patch": "@@ -158,6 +158,12 @@ impl LanguageItems {\n         }\n     }\n \n+    pub fn is_builtin_kind(&self, id: def_id) -> bool {\n+        Some(id) == self.freeze_trait() ||\n+        Some(id) == self.send_trait() ||\n+        Some(id) == self.sized_trait()\n+    }\n+\n     pub fn freeze_trait(&self) -> Option<def_id> {\n         self.items[FreezeTraitLangItem as uint]\n     }"}, {"sha": "56c3616d6710f9e1bb89c71a034b2af03fbbf4d8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=369f7fa169d9f97ac8185105201182781076a90d", "patch": "@@ -3725,6 +3725,12 @@ pub fn impl_trait_ref(cx: ctxt, id: ast::def_id) -> Option<@TraitRef> {\n     return ret;\n }\n \n+pub fn trait_ref_is_builtin_kind(tcx: ctxt, tr: &ast::trait_ref) -> bool {\n+    let def = tcx.def_map.find(&tr.ref_id).expect(\"no def-map entry for trait\");\n+    let def_id = ast_util::def_id_of_def(*def);\n+    tcx.lang_items.is_builtin_kind(def_id)\n+}\n+\n pub fn ty_to_def_id(ty: t) -> Option<ast::def_id> {\n     match get(ty).sty {\n       ty_trait(id, _, _, _, _) | ty_struct(id, _) | ty_enum(id, _) => Some(id),"}, {"sha": "2f6728891ff2a8fcef0ad7cb806a98cbcc9eb1c6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369f7fa169d9f97ac8185105201182781076a90d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=369f7fa169d9f97ac8185105201182781076a90d", "patch": "@@ -869,6 +869,13 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n                                   &i_ty_generics, generics,\n                                   parent_visibility);\n         for t in opt_trait_ref.iter() {\n+            // Prevent the builtin kind traits from being manually implemented.\n+            if ty::trait_ref_is_builtin_kind(ccx.tcx, t) {\n+                ccx.tcx.sess.span_err(it.span,\n+                    \"cannot provide an explicit implementation \\\n+                     for a builtin kind\");\n+            }\n+\n             check_methods_against_trait(ccx, generics, rp, selfty, t, cms);\n         }\n       }"}, {"sha": "c35ca098372d351f6e013043fb38070acaff3315", "filename": "src/test/compile-fail/cant-implement-builtin-kinds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/369f7fa169d9f97ac8185105201182781076a90d/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369f7fa169d9f97ac8185105201182781076a90d/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs?ref=369f7fa169d9f97ac8185105201182781076a90d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See issue #8517 for why this should be illegal.\n+\n+struct X<T>(T);\n+\n+impl <T> Send for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n+impl <T> Sized for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n+impl <T> Freeze for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n+\n+fn main() { }"}]}