{"sha": "84a199369b611f2140e1b6f20dce9e2d40ad37df", "node_id": "C_kwDOAAsO6NoAKDg0YTE5OTM2OWI2MTFmMjE0MGUxYjZmMjBkY2U5ZTJkNDBhZDM3ZGY", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-08-15T20:31:37Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-08-18T20:08:08Z"}, "message": "Reword \"Required because of the requirements on the impl of ...\"", "tree": {"sha": "eae217051312792ec9fda1bb97b8e576b507d9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae217051312792ec9fda1bb97b8e576b507d9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84a199369b611f2140e1b6f20dce9e2d40ad37df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmL+nCoACgkQGBtJ+fOP\nM3StqQv6A1kRWdI/pCasa8vQ8xlAUsyMKA5BQ18KRu89S3lNLCwTBfrgbfyKIynn\ncPuDRWBygVH3xcs+ndXZVwrMa4+cx/jiHMU6exNksz/iUeX33pjO5/cDk68B3yym\nNazAeJbu/dSkdNV/2cESUaXS4/c4lADejfC5ROEQilcQvSk+nbm7t+NiShKHa3HL\nwX1xfoURGl8RVqOHXcmMYEkV6MUgYTZEw62sn1yRQmsiS5wegJbFn11OFAkQx1gB\nLlro1rUK61Dy2OmOIq8iYQdVz4bYBAlghclRwITdPqn1v4BxOD49LphRqbvSvJfz\nb7thJBLUnY/FWhi9Nd+90ZKouS9SRENwsiO3G5AKxlL2/clUNG2JDJoEktF4tefb\nc7tZXaTpsiqUmRy/Upq+LsGmuUBFdpfJeepC8TM0cTGoAZ+91tAI/GlNjAV7JdwQ\na8aNIZw0h26DdLkAl0lQa99FeVUyrUZVddNxn/3v4J/tagsAADlB8lr0zg8tNz9K\nHJD8pgOC\n=Nuk7\n-----END PGP SIGNATURE-----", "payload": "tree eae217051312792ec9fda1bb97b8e576b507d9d5\nparent 8064a495086c2e63c0ef77e8e82fe3b9b5dc535f\nauthor Andy Wang <cbeuw.andy@gmail.com> 1660595497 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1660853288 +0100\n\nReword \"Required because of the requirements on the impl of ...\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84a199369b611f2140e1b6f20dce9e2d40ad37df", "html_url": "https://github.com/rust-lang/rust/commit/84a199369b611f2140e1b6f20dce9e2d40ad37df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84a199369b611f2140e1b6f20dce9e2d40ad37df/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "html_url": "https://github.com/rust-lang/rust/commit/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f"}], "stats": {"total": 558, "additions": 279, "deletions": 279}, "files": [{"sha": "cae1509e640043533081d916bbcf7e13cc53a998", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -2537,9 +2537,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 parent_trait_pred.remap_constness_diag(param_env);\n                 let parent_def_id = parent_trait_pred.def_id();\n                 let msg = format!(\n-                    \"required because of the requirements on the impl of `{}` for `{}`\",\n-                    parent_trait_pred.print_modifiers_and_trait_path(),\n-                    parent_trait_pred.skip_binder().self_ty()\n+                    \"required for `{}` to implement `{}`\",\n+                    parent_trait_pred.skip_binder().self_ty(),\n+                    parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n                 match self.tcx.hir().get_if_local(data.impl_def_id) {\n@@ -2608,9 +2608,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         pluralize!(count)\n                     ));\n                     err.note(&format!(\n-                        \"required because of the requirements on the impl of `{}` for `{}`\",\n-                        parent_trait_pred.print_modifiers_and_trait_path(),\n-                        parent_trait_pred.skip_binder().self_ty()\n+                        \"required for `{}` to implement `{}`\",\n+                        parent_trait_pred.skip_binder().self_ty(),\n+                        parent_trait_pred.print_modifiers_and_trait_path()\n                     ));\n                 }\n                 // #74711: avoid a stack overflow"}, {"sha": "eadad4cd5722fde2fe784c53425ce4fbc1dfcc63", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -39,7 +39,7 @@ error[E0277]: the trait bound `T: Clone` is not satisfied\n LL |     type Bar: Clone = Vec<T>;\n    |                       ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n+   = note: required for `Vec<T>` to implement `Clone`\n note: required by a bound in `Foo::Bar`\n   --> $DIR/defaults-suitability.rs:28:15\n    |\n@@ -83,7 +83,7 @@ error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |                       ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n+   = note: required for `Vec<<Self as Foo2<T>>::Baz>` to implement `Clone`\n note: required by a bound in `Foo2::Bar`\n   --> $DIR/defaults-suitability.rs:65:15\n    |\n@@ -100,7 +100,7 @@ error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |                       ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n+   = note: required for `Vec<<Self as Foo25<T>>::Baz>` to implement `Clone`\n note: required by a bound in `Foo25::Bar`\n   --> $DIR/defaults-suitability.rs:74:15\n    |"}, {"sha": "a85edd7a08da784ba28b0ce8285f2ad6dfd859e3", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,13 +5,13 @@ LL | impl X<'_> for u32\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n-note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n+note: required for `u32` to implement `for<'b> X<'b>`\n   --> $DIR/hr-associated-type-bound-2.rs:11:6\n    |\n LL | impl X<'_> for u32\n    |      ^^^^^     ^^^\n    = note: 128 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n+   = note: required for `u32` to implement `for<'b> X<'b>`\n \n error: aborting due to previous error\n "}, {"sha": "6661347e4f8696b248baecc792a7fe4f5e1af0bf", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,13 +4,13 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n LL | impl<T: Grault> Grault for (T,)\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required for `(T,)` to implement `Grault`\n   --> $DIR/impl-wf-cycle-1.rs:15:17\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+   = note: required for `(T,)` to implement `Grault`\n \n error: aborting due to previous error\n "}, {"sha": "ec4ffe27c5fda6eb5cabcb5b9e2e821d12dc09b9", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n LL | impl<T: Grault> Grault for (T,)\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `Grault` for `(T,)`\n+note: required for `(T,)` to implement `Grault`\n   --> $DIR/impl-wf-cycle-2.rs:7:17\n    |\n LL | impl<T: Grault> Grault for (T,)"}, {"sha": "9c92f19d8bf9a3a0a3bd9e16de12f5c0dda6e2af", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -9,7 +9,7 @@ note: expected this to be `&()`\n    |\n LL |     type Element = ();\n    |                    ^^\n-note: required because of the requirements on the impl of `Visit` for `()`\n+note: required for `()` to implement `Visit`\n   --> $DIR/issue-44153.rs:13:10\n    |\n LL | impl<'a> Visit for () where"}, {"sha": "3b294d65d56e3cad311794ef5443211cac00fffa", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -18,7 +18,7 @@ LL |         let closure = |config: &mut <S as MPU>::MpuConfig| writer.my_write(\n    |                                                                            ^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n    = help: the trait `MyDisplay` is implemented for `&'a mut T`\n-note: required because of the requirements on the impl of `MyDisplay` for `&mut T`\n+note: required for `&mut T` to implement `MyDisplay`\n   --> $DIR/issue-65774-1.rs:5:24\n    |\n LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }"}, {"sha": "501d2cfaa26b7978b66c585b2d159c71b99dcd54", "filename": "src/test/ui/associated-types/substs-ppaux.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -77,7 +77,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n+note: required for `str` to implement `Foo<'_, '_, u8>`\n   --> $DIR/substs-ppaux.rs:11:17\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}"}, {"sha": "ae3e862dddd206e5cb81460fe04e88dfc361edfa", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -77,7 +77,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n+note: required for `str` to implement `Foo<'_#0r, '_#1r, u8>`\n   --> $DIR/substs-ppaux.rs:11:17\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}"}, {"sha": "9c85eb876849749f393e84fde681b69de25fdcdb", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -41,7 +41,7 @@ LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this `async fn` body\n   --> $DIR/issue-68112.rs:47:31\n    |"}, {"sha": "f6ff52a5fd29ff7e18ee767bff34ba9e98a8a759", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -26,7 +26,7 @@ LL |     [1; ().await];\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+   = note: required for `()` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     [1; ().await];"}, {"sha": "d2e388c78ca4e4a690c8daa5f8649f12948eee32", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `&Sender<i32>`\n+   = note: required for `&Sender<i32>` to implement `Send`\n note: required because it's used within this closure\n   --> $DIR/issue-70935-complex-spans.rs:16:13\n    |"}, {"sha": "fb9dee11f2a0770e8e8b0957f0bf93270cf966f2", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -32,7 +32,7 @@ LL |     (|_| 2333).await;\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:6: 12:9] must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]`\n+   = note: required for `[closure@$DIR/issue-62009-1.rs:12:6: 12:9]` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     (|_| 2333).await;"}, {"sha": "dc3089336974a5573eb46767c31260fdb12fbb23", "filename": "src/test/ui/async-await/unnecessary-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     boo().await;\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+   = note: required for `()` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     boo().await;"}, {"sha": "5645e15850274cbc7ed55ab4ce485835ae998a36", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n    = help: the trait `Signed` is implemented for `i32`\n-note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n+note: required for `&'static u32` to implement `Defaulted`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |\n LL | impl<'a,T:Signed> Defaulted for &'a T { }"}, {"sha": "28debd60a99881d210995e2c227eebcc1acda3a0", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n    = help: the trait `Scalar` is implemented for `f64`\n-note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n+note: required for `Bob` to implement `Add<{integer}>`\n   --> $DIR/issue-22645.rs:8:19\n    |\n LL | impl<RHS: Scalar> Add <RHS> for Bob {"}, {"sha": "3e9b1c292dc1865b6109784eef1dc91d7dd6583e", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n-   = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n+   = note: required for `&std::sync::mpsc::Receiver<()>` to implement `Send`\n note: required because it's used within this closure\n   --> $DIR/closure-move-sync.rs:6:27\n    |\n@@ -24,7 +24,7 @@ LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n-   = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n+   = note: required for `&Sender<()>` to implement `Send`\n note: required because it's used within this closure\n   --> $DIR/closure-move-sync.rs:18:19\n    |"}, {"sha": "d50c220bcfd4863586fa9ced994d90ac649267a2", "filename": "src/test/ui/coherence/issue-100191-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fissue-100191-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -1,13 +1,13 @@\n error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_100191_2`)\n-note: required because of the requirements on the impl of `Trait<_>` for `T`\n+note: required for `T` to implement `Trait<_>`\n   --> $DIR/issue-100191-2.rs:8:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Trait<_>` for `T`\n+   = note: required for `T` to implement `Trait<_>`\n \n error: aborting due to previous error\n "}, {"sha": "a5f7bc0b26cbd0d4b2d4f439acae5408079ec614", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n-note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n   --> $DIR/abstract-const-as-cast-3.rs:8:22\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n@@ -32,7 +32,7 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n-note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`\n   --> $DIR/abstract-const-as-cast-3.rs:8:22\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n@@ -77,7 +77,7 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n-note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>`\n+note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n   --> $DIR/abstract-const-as-cast-3.rs:8:22\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n@@ -104,7 +104,7 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n-note: required because of the requirements on the impl of `Trait` for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>`\n+note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`\n   --> $DIR/abstract-const-as-cast-3.rs:8:22\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}"}, {"sha": "808b305c680f3f496086fef0355c96097eaa5f34", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,12 +7,12 @@ LL |     writes_to_specific_path(&cap);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Delegates<U>` is implemented for `T`\n-note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+note: required for `&C` to implement `Contains<(), true>`\n   --> $DIR/issue-85848.rs:21:12\n    |\n LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n-note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+note: required for `&C` to implement `Delegates<()>`\n   --> $DIR/issue-85848.rs:12:12\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n@@ -32,12 +32,12 @@ LL |     writes_to_specific_path(&cap);\n    |     required by a bound introduced by this call\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { contains::<T, U>() }]:`\n-note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+note: required for `&C` to implement `Contains<(), true>`\n   --> $DIR/issue-85848.rs:21:12\n    |\n LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n-note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+note: required for `&C` to implement `Delegates<()>`\n   --> $DIR/issue-85848.rs:12:12\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}"}, {"sha": "ee352700c307c8580da82dd5cf73883e89bad5a2", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Copy` is not satisfied\n LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    |                                ^^^^^^^^^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: required for `Option<Bar>` to implement `Copy`\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information"}, {"sha": "928ffd0839db505bd4c98a1b4c17c31e9b473920", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: required for `Option<Bar>` to implement `Copy`\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n@@ -17,7 +17,7 @@ error[E0277]: the trait bound `Bar: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: required for `Option<Bar>` to implement `Copy`\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |"}, {"sha": "fede0084547c944354541825680960354eb6e5c2", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Bar: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: required for `Option<Bar>` to implement `Copy`\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n@@ -17,7 +17,7 @@ error[E0277]: the trait bound `Bar: Copy` is not satisfied\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: required for `Option<Bar>` to implement `Copy`\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |"}, {"sha": "b11dd4b80872581276ec3f3013f5057b1b599c53", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     [Foo(String::new()); 4];\n    |      ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-note: required because of the requirements on the impl of `Copy` for `Foo<String>`\n+note: required for `Foo<String>` to implement `Copy`\n   --> $DIR/trait-error.rs:1:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "da895098e4b8e9a6b724799555386b4b8bf2b72a", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     is_copy(B { a: 1, b: C });\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Copy` for `B<C>`\n+note: required for `B<C>` to implement `Copy`\n   --> $DIR/deriving-copyclone.rs:9:10\n    |\n LL | #[derive(Copy, Clone)]\n@@ -30,7 +30,7 @@ LL |     is_clone(B { a: 1, b: C });\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Clone` for `B<C>`\n+note: required for `B<C>` to implement `Clone`\n   --> $DIR/deriving-copyclone.rs:9:16\n    |\n LL | #[derive(Copy, Clone)]\n@@ -54,7 +54,7 @@ LL |     is_copy(B { a: 1, b: D });\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Copy` for `B<D>`\n+note: required for `B<D>` to implement `Copy`\n   --> $DIR/deriving-copyclone.rs:9:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "87cfaa489c6aad6b7c9b755db60fa8cd19b56274", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,13 +5,13 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/E0275.rs:5:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n+   = note: required for `Bar<T>` to implement `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "0e34f913511a3121913f6f496ee34690384de497", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,7 +14,7 @@ LL |     format!(\"{:X}\", \"3\");\n              NonZeroI8\n              NonZeroIsize\n            and 21 others\n-   = note: required because of the requirements on the impl of `UpperHex` for `&str`\n+   = note: required for `&str` to implement `UpperHex`\n note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n   --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |"}, {"sha": "726d3e35b10e967776c704d95b8b891d7cc2e465", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     send(format_args!(\"{:?}\", c));\n    = note: required because it appears within the type `&core::fmt::Opaque`\n    = note: required because it appears within the type `ArgumentV1<'_>`\n    = note: required because it appears within the type `[ArgumentV1<'_>]`\n-   = note: required because of the requirements on the impl of `Send` for `&[ArgumentV1<'_>]`\n+   = note: required for `&[ArgumentV1<'_>]` to implement `Send`\n    = note: required because it appears within the type `Arguments<'_>`\n note: required by a bound in `send`\n   --> $DIR/send-sync.rs:1:12"}, {"sha": "b086128d28cbc504cb6fc09af663302ba6086891", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ fn main() {\n         //~^ ERROR `&str` is not an iterator\n         //~| NOTE `&str` is not an iterator\n         //~| HELP the trait `Iterator` is not implemented for `&str`\n-        //~| NOTE required because of the requirements on the impl of `IntoIterator` for `&str`\n+        //~| NOTE required for `&str` to implement `IntoIterator`\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop\n         //~| NOTE in this expansion of desugaring of `for` loop"}, {"sha": "959a7c43fff7d488fadfdfd36ec4cc9ebb1a52f0", "filename": "src/test/ui/for/for-c-in-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     for c in \"asdf\" {\n    |              ^^^^^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n+   = note: required for `&str` to implement `IntoIterator`\n \n error: aborting due to previous error\n "}, {"sha": "9bf8056e82ecdc7b29937091e70ad8e96eb123dc", "filename": "src/test/ui/for/for-loop-bogosity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-bogosity.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     for x in bogus {\n    |              ^^^^^ `MyStruct` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `MyStruct`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `MyStruct`\n+   = note: required for `MyStruct` to implement `IntoIterator`\n \n error: aborting due to previous error\n "}, {"sha": "03b21c5ebd3ee48ae59551029a4f1a023d575c96", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -63,7 +63,7 @@ fn test2() {\n     require_send(send_gen);\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n-    //~| NOTE requirements on the impl\n+    //~| NOTE required for\n     //~| NOTE captures the following types\n }\n "}, {"sha": "b56f445872bc4b9efe0215a6b72c28776b739da2", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -29,7 +29,7 @@ LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/issue-68112.rs:48:5\n    |"}, {"sha": "b54b0f570c9628834cd3210de0c50217769ecc14", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `&Cell<i32>`\n+   = note: required for `&Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/not-send-sync.rs:16:17\n    |"}, {"sha": "bbde8ea7892cc232250f95179ac03b7a5ba28777", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -27,7 +27,7 @@ LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:42:5\n    |"}, {"sha": "92ca51b4e7267c140d0bc875897a87722bbdcbaa", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: required because of the requirements on the impl of `Send` for `&'_#4r Cell<i32>`\n+   = note: required for `&'_#4r Cell<i32>` to implement `Send`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-2.rs:19:17\n    |"}, {"sha": "dcfb211744ced4ee764f2145c0519a93cd3a7b1d", "filename": "src/test/ui/generator/yield-outside-generator-issue-78653.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-outside-generator-issue-78653.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL |     yield || for i in 0 { }\n    |\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n+   = note: required for `{integer}` to implement `IntoIterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4f8d673d1cf2aa2f173b05c6f511b0669f35076e", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -42,7 +42,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     type C = String where Self: Copy;\n    |                                 ^^^^ the trait `Copy` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+note: required for `Fooy<T>` to implement `Copy`\n   --> $DIR/impl_bounds.rs:11:10\n    |\n LL | #[derive(Copy, Clone)]\n@@ -67,7 +67,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     fn d() where Self: Copy {}\n    |                        ^^^^ the trait `Copy` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+note: required for `Fooy<T>` to implement `Copy`\n   --> $DIR/impl_bounds.rs:11:10\n    |\n LL | #[derive(Copy, Clone)]"}, {"sha": "eabc806c2b7d4bf671d3ab5314be6a4958cf7972", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -16,7 +16,7 @@ error[E0277]: the trait bound `T: Clone` is not satisfied\n LL |     type Copy<T>: Copy = Box<T>;\n    |                          ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `Box<T>`\n+   = note: required for `Box<T>` to implement `Clone`\n note: required by a bound in `UnsafeCopy::Copy`\n   --> $DIR/issue-74824.rs:7:19\n    |"}, {"sha": "fe5fe964e991dad56746ac16a0473fa423411983", "filename": "src/test/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -43,7 +43,7 @@ LL | pub trait SuperTrait {\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n+   = note: required for `Box<SuperStruct>` to implement `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>`\n    = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n \n error: aborting due to 3 previous errors"}, {"sha": "0ed75ba1efc2561d1cd12a63090ec0f7714ad0ef", "filename": "src/test/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -43,7 +43,7 @@ LL | trait MapLike<K, V> {\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n+   = note: required for `Box<BTreeMap<u8, u8>>` to implement `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>`\n    = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 3 previous errors"}, {"sha": "ab5598e364fc4f522b95e66080a7196a1c0cba93", "filename": "src/test/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -44,7 +44,7 @@ LL | |             },\n LL | |         },\n    | |_________^ expected struct `Unit3`, found struct `Unit4`\n    |\n-note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>`\n+note: required for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>` to implement `for<'r> T0<'r, (&'r u8,)>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>"}, {"sha": "14fe1803b7344da233e194ef9aa51f1efdc64fbb", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n LL |     C: StackContext,\n    |        ^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n    |\n-note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>`\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n@@ -24,7 +24,7 @@ error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n LL | impl<C> EthernetWorker<C> {}\n    |         ^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n    |\n-note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>`\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n@@ -44,7 +44,7 @@ error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n LL |     type Handler = Ctx<C::Dispatcher>;\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n    |\n-note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>`\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}"}, {"sha": "348c737b0b1658fd17cacc5754b655d5293f874d", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     || 42\n    |     ^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:7]`\n+note: required for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:7]` to implement `Trait`\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "6ac671415575ce63d71fc6c13f977084c8b50b38", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     || 42\n    |     ^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:7]`\n+note: required for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:7]` to implement `Trait`\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "3291cad6882e1153247424b8b158ae390b2182bd", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -53,7 +53,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = help: the trait `Into<U>` is implemented for `T`\n-   = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n+   = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n error[E0277]: the trait bound `impl Debug: From<impl Into<u32>>` is not satisfied\n   --> $DIR/nested_impl_trait.rs:18:34\n@@ -62,7 +62,7 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ the trait `From<impl Into<u32>>` is not implemented for `impl Debug`\n    |\n    = help: the trait `Into<U>` is implemented for `T`\n-   = note: required because of the requirements on the impl of `Into<impl Debug>` for `impl Into<u32>`\n+   = note: required for `impl Into<u32>` to implement `Into<impl Debug>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "cf2998bbf40792eadfcb435090ef4fd17799acd8", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -9,7 +9,7 @@ note: expected this to be `u8`\n    |\n LL |     type Assoc = u8;\n    |                  ^^\n-note: required because of the requirements on the impl of `Test` for `()`\n+note: required for `()` to implement `Test`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:11:9\n    |\n LL | impl<T> Test for T where T: Super<Assoc = ()> {}"}, {"sha": "e020d0298757db944e4ee322a4c48461038b9998", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     x[0i32];\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i32>` for `Vec<{integer}>`\n+   = note: required for `Vec<{integer}>` to implement `Index<i32>`\n \n error: aborting due to previous error\n "}, {"sha": "7a741cfc7def4b74aa93fb6a3bd0142cf65cf3a0", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     [0][0u8];\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<u8>` for `[{integer}]`\n+   = note: required for `[{integer}]` to implement `Index<u8>`\n \n error[E0308]: mismatched types\n   --> $DIR/indexing-requires-a-uint.rs:12:18"}, {"sha": "bbbb2a86a22da48455ac24f3e2fcd537d46b3691", "filename": "src/test/ui/integral-indexing.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fintegral-indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-indexing.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     v[3u8];\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<u8>` for `Vec<isize>`\n+   = note: required for `Vec<isize>` to implement `Index<u8>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i8`\n   --> $DIR/integral-indexing.rs:7:7\n@@ -16,7 +16,7 @@ LL |     v[3i8];\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i8>` for `Vec<isize>`\n+   = note: required for `Vec<isize>` to implement `Index<i8>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `u32`\n   --> $DIR/integral-indexing.rs:8:7\n@@ -26,7 +26,7 @@ LL |     v[3u32];\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<u32>` for `Vec<isize>`\n+   = note: required for `Vec<isize>` to implement `Index<u32>`\n \n error[E0277]: the type `[isize]` cannot be indexed by `i32`\n   --> $DIR/integral-indexing.rs:9:7\n@@ -36,7 +36,7 @@ LL |     v[3i32];\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i32>` for `Vec<isize>`\n+   = note: required for `Vec<isize>` to implement `Index<i32>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u8`\n   --> $DIR/integral-indexing.rs:12:18\n@@ -46,7 +46,7 @@ LL |     s.as_bytes()[3u8];\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<u8>` for `[u8]`\n+   = note: required for `[u8]` to implement `Index<u8>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i8`\n   --> $DIR/integral-indexing.rs:13:18\n@@ -56,7 +56,7 @@ LL |     s.as_bytes()[3i8];\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i8`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i8>` for `[u8]`\n+   = note: required for `[u8]` to implement `Index<i8>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `u32`\n   --> $DIR/integral-indexing.rs:14:18\n@@ -66,7 +66,7 @@ LL |     s.as_bytes()[3u32];\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `u32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<u32>` for `[u8]`\n+   = note: required for `[u8]` to implement `Index<u32>`\n \n error[E0277]: the type `[u8]` cannot be indexed by `i32`\n   --> $DIR/integral-indexing.rs:15:18\n@@ -76,7 +76,7 @@ LL |     s.as_bytes()[3i32];\n    |\n    = help: the trait `SliceIndex<[u8]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i32>` for `[u8]`\n+   = note: required for `[u8]` to implement `Index<i32>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "7955fecda0670d3e23f8604ef113f0029da23b4b", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     catch_unwind(|| { x.set(23); });\n    |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `&Cell<i32>`\n+   = note: required for `&Cell<i32>` to implement `UnwindSafe`\n note: required because it's used within this closure\n   --> $DIR/interior-mutability.rs:5:18\n    |"}, {"sha": "2db60b641eea5086495589a9a70da4006e53ff14", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,13 +14,13 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n   --> $DIR/issue-20413.rs:8:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n+   = note: required for `NoData<T>` to implement `Foo`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:27:42\n@@ -29,18 +29,18 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:27:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n-note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:34:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n+   = note: required for `EvenLessData<T>` to implement `Baz`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:34:42\n@@ -49,18 +49,18 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:34:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n-note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:27:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n+   = note: required for `AlmostNoData<T>` to implement `Bar`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b41b602a55b5c35ab4d66dee34d676e643ccd91b", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n-   = note: required because of the requirements on the impl of `IntoIterator` for `dyn Iterator<Item = &'a mut u8>`\n+   = note: required for `dyn Iterator<Item = &'a mut u8>` to implement `IntoIterator`\n help: consider mutably borrowing here\n    |\n LL |     for item in &mut *things { *item = 0 }"}, {"sha": "790681589248afe48fae46ac4a4a3bfee22e6928", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`\n-   = note: required because of the requirements on the impl of `Send` for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>`\n+   = note: required for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>` to implement `Send`\n    = note: required because it appears within the type `hashbrown::map::HashMap<Rc<()>, Rc<()>, RandomState>`\n    = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n note: required by a bound in `foo`"}, {"sha": "7382d40c0107cbba66b2ad443283eac555ba66dd", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `<P as Process<'_>>::Item`\n-note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n+note: required for `Wrapper<P>` to implement `for<'b> Wrap<'b>`\n   --> $DIR/issue-22872.rs:7:13\n    |\n LL | impl<'b, P> Wrap<'b> for Wrapper<P>"}, {"sha": "3d8e7b969184e6ad70bb4d1e773e41f6a831c671", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     type Next = <GetNext<T::Next> as Next>::Next;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_23122_2`)\n-note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`\n+note: required for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>` to implement `Next`\n   --> $DIR/issue-23122-2.rs:9:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {"}, {"sha": "1d595ca5649b22c4300446842bed99c478ab8160", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -10,7 +10,7 @@ LL |     Err(5)?;\n    = help: the following other types implement trait `FromResidual<R>`:\n              <Result<T, F> as FromResidual<Result<Infallible, E>>>\n              <Result<T, F> as FromResidual<Yeet<E>>>\n-   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n+   = note: required for `Result<i32, ()>` to implement `FromResidual<Result<Infallible, {integer}>>`\n \n error: aborting due to previous error\n "}, {"sha": "caba0ad52689e10f1b33936409e8bfb919a5ea4f", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -20,8 +20,8 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n-   = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required for `Cloned<std::collections::hash_map::Iter<'_, _, _>>` to implement `Iterator`\n+   = note: required for `Cloned<std::collections::hash_map::Iter<'_, _, _>>` to implement `IntoIterator`\n \n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14\n@@ -31,7 +31,7 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n-   = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n+   = note: required for `Cloned<std::collections::hash_map::Iter<'_, _, _>>` to implement `Iterator`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9abd2436b8a34eea2da5a8f220ca1855e750a1be", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `<Col as Expression>::SqlType: NotNull` is not sat\n LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n-note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n+note: required for `<Col as Expression>::SqlType` to implement `IntoNullable`\n   --> $DIR/issue-38821.rs:9:18\n    |\n LL | impl<T: NotNull> IntoNullable for T {"}, {"sha": "774575d1d0196745f7e47cac9c48007a795a8df0", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -9,7 +9,7 @@ note: expected this to be `()`\n    |\n LL |     type Element = &'a ();\n    |                    ^^^^^^\n-note: required because of the requirements on the impl of `Visit` for `()`\n+note: required for `()` to implement `Visit`\n   --> $DIR/issue-39970.rs:13:6\n    |\n LL | impl Visit for () where"}, {"sha": "7f5c578ae4fffdd998324e222ffa55e6df3dcd28", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ note: required because it appears within the type `Bar`\n    |\n LL | enum Bar {\n    |      ^^^\n-   = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n+   = note: required for `Arc<Bar>` to implement `Send`\n note: required because it appears within the type `Foo`\n   --> $DIR/issue-40827.rs:4:8\n    |\n@@ -38,7 +38,7 @@ note: required because it appears within the type `Bar`\n    |\n LL | enum Bar {\n    |      ^^^\n-   = note: required because of the requirements on the impl of `Send` for `Arc<Bar>`\n+   = note: required for `Arc<Bar>` to implement `Send`\n note: required because it appears within the type `Foo`\n   --> $DIR/issue-40827.rs:4:8\n    |"}, {"sha": "37e2c3bddc8cf1dab1a2ce5da37ea3c7f4c99cea", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n    |\n    = note: expected struct `Apple`\n               found struct `Rc<Apple>`\n-   = note: required because of the requirements on the impl of `PartialEq<Pin<Rc<Apple>>>` for `Pin<Apple>`\n+   = note: required for `Pin<Apple>` to implement `PartialEq<Pin<Rc<Apple>>>`\n \n error: aborting due to previous error\n "}, {"sha": "5dc8c2b607e61f4cf0129383c051fd491fc67b65", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL | static boxed: Box<RefCell<isize>> = Box::new(RefCell::new(0));\n    |               ^^^^^^^^^^^^^^^^^^^ `RefCell<isize>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<isize>`\n-   = note: required because of the requirements on the impl of `Sync` for `Unique<RefCell<isize>>`\n+   = note: required for `Unique<RefCell<isize>>` to implement `Sync`\n    = note: required because it appears within the type `Box<RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n "}, {"sha": "047a71f98d9f63b6be48001a8d3c694711743819", "filename": "src/test/ui/iterators/integral.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fintegral.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     for _ in 42 {}\n    |\n    = help: the trait `Iterator` is not implemented for `{integer}`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `{integer}`\n+   = note: required for `{integer}` to implement `IntoIterator`\n \n error[E0277]: `u8` is not an iterator\n   --> $DIR/integral.rs:4:14\n@@ -16,7 +16,7 @@ LL |     for _ in 42 as u8 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `u8`\n+   = note: required for `u8` to implement `IntoIterator`\n \n error[E0277]: `i8` is not an iterator\n   --> $DIR/integral.rs:6:14\n@@ -26,7 +26,7 @@ LL |     for _ in 42 as i8 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `i8`\n+   = note: required for `i8` to implement `IntoIterator`\n \n error[E0277]: `u16` is not an iterator\n   --> $DIR/integral.rs:8:14\n@@ -36,7 +36,7 @@ LL |     for _ in 42 as u16 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `u16`\n+   = note: required for `u16` to implement `IntoIterator`\n \n error[E0277]: `i16` is not an iterator\n   --> $DIR/integral.rs:10:14\n@@ -46,7 +46,7 @@ LL |     for _ in 42 as i16 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i16`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `i16`\n+   = note: required for `i16` to implement `IntoIterator`\n \n error[E0277]: `u32` is not an iterator\n   --> $DIR/integral.rs:12:14\n@@ -56,7 +56,7 @@ LL |     for _ in 42 as u32 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `u32`\n+   = note: required for `u32` to implement `IntoIterator`\n \n error[E0277]: `i32` is not an iterator\n   --> $DIR/integral.rs:14:14\n@@ -66,7 +66,7 @@ LL |     for _ in 42 as i32 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `i32`\n+   = note: required for `i32` to implement `IntoIterator`\n \n error[E0277]: `u64` is not an iterator\n   --> $DIR/integral.rs:16:14\n@@ -76,7 +76,7 @@ LL |     for _ in 42 as u64 {}\n    |\n    = help: the trait `Iterator` is not implemented for `u64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `u64`\n+   = note: required for `u64` to implement `IntoIterator`\n \n error[E0277]: `i64` is not an iterator\n   --> $DIR/integral.rs:18:14\n@@ -86,7 +86,7 @@ LL |     for _ in 42 as i64 {}\n    |\n    = help: the trait `Iterator` is not implemented for `i64`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `i64`\n+   = note: required for `i64` to implement `IntoIterator`\n \n error[E0277]: `usize` is not an iterator\n   --> $DIR/integral.rs:20:14\n@@ -96,7 +96,7 @@ LL |     for _ in 42 as usize {}\n    |\n    = help: the trait `Iterator` is not implemented for `usize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n+   = note: required for `usize` to implement `IntoIterator`\n \n error[E0277]: `isize` is not an iterator\n   --> $DIR/integral.rs:22:14\n@@ -106,7 +106,7 @@ LL |     for _ in 42 as isize {}\n    |\n    = help: the trait `Iterator` is not implemented for `isize`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `isize`\n+   = note: required for `isize` to implement `IntoIterator`\n \n error[E0277]: `{float}` is not an iterator\n   --> $DIR/integral.rs:24:14\n@@ -115,7 +115,7 @@ LL |     for _ in 42.0 {}\n    |              ^^^^ `{float}` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `{float}`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `{float}`\n+   = note: required for `{float}` to implement `IntoIterator`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "53b610c172392f2bed4cb7831c47c1ac15023012", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -15,7 +15,7 @@ LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n+   = note: required for `bool` to implement `IntoIterator`\n \n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:8:28\n@@ -54,7 +54,7 @@ LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n+   = note: required for `bool` to implement `IntoIterator`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b9fbcd5304b1f18182edbb406cd7602f951c452e", "filename": "src/test/ui/iterators/ranges.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Franges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Franges.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     for _ in ..10 {}\n    |\n    = help: the trait `Iterator` is not implemented for `RangeTo<{integer}>`\n    = note: `..end` is a `RangeTo`, which cannot be iterated on; you might have meant to have a bounded `Range`: `0..end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `RangeTo<{integer}>`\n+   = note: required for `RangeTo<{integer}>` to implement `IntoIterator`\n \n error[E0277]: `RangeToInclusive<{integer}>` is not an iterator\n   --> $DIR/ranges.rs:4:14\n@@ -16,7 +16,7 @@ LL |     for _ in ..=10 {}\n    |\n    = help: the trait `Iterator` is not implemented for `RangeToInclusive<{integer}>`\n    = note: `..=end` is a `RangeToInclusive`, which cannot be iterated on; you might have meant to have a bounded `RangeInclusive`: `0..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `RangeToInclusive<{integer}>`\n+   = note: required for `RangeToInclusive<{integer}>` to implement `IntoIterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ddfe0169b848f17e4ddef82c22a52b31c0c20371", "filename": "src/test/ui/iterators/string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fstring.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     for _ in \"\".to_owned() {}\n    |              ^^^^^^^^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for `String`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n+   = note: required for `String` to implement `IntoIterator`\n \n error[E0277]: `&str` is not an iterator\n   --> $DIR/string.rs:4:14\n@@ -14,7 +14,7 @@ LL |     for _ in \"\" {}\n    |              ^^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = help: the trait `Iterator` is not implemented for `&str`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&str`\n+   = note: required for `&str` to implement `IntoIterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06d48ff1f0f2796d604d07f4924b26b48675130c", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     take_param(&x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-impl-type-params-2.rs:6:14\n    |\n LL | impl<T:Copy> Foo for T {"}, {"sha": "8dbe0c38c1eeb1669bf28c2c9aeb99cb38e4d01c", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n@@ -21,7 +21,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n@@ -38,7 +38,7 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n@@ -55,7 +55,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n+note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n@@ -73,7 +73,7 @@ LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n-note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n+note: required for `S<String>` to implement `Gettable<String>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n@@ -87,7 +87,7 @@ LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n-note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n+note: required for `S<Foo>` to implement `Gettable<Foo>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}"}, {"sha": "09661289a9b77cfa9d914f4c3dec0976b9cdfa55", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     take_param(&x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14\n    |\n LL | impl<T:Copy> Foo for T {\n@@ -44,7 +44,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Foo>` for `&Box<{integer}>`\n+   = note: required for `&Box<{integer}>` to implement `CoerceUnsized<&dyn Foo>`\n    = note: required by cast to type `&dyn Foo`\n \n error: aborting due to 3 previous errors"}, {"sha": "299600eb6bf30e1363e3db784a562596274c4111", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     take_param(&x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Foo` for `Box<{integer}>`\n+note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14\n    |\n LL | impl<T:Copy> Foo for T {\n@@ -30,7 +30,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Foo>` for `&Box<i32>`\n+   = note: required for `&Box<i32>` to implement `CoerceUnsized<&dyn Foo>`\n    = note: required by cast to type `&dyn Foo`\n \n error: aborting due to 2 previous errors"}, {"sha": "47b7462a6a104fdc481e047eb872dc6e6b4290ef", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n-   = note: required because of the requirements on the impl of `Send` for `&'static (dyn Dummy + 'static)`\n+   = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object.rs:5:18\n    |\n@@ -19,7 +19,7 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n-   = note: required because of the requirements on the impl of `Send` for `Unique<dyn Dummy>`\n+   = note: required for `Unique<dyn Dummy>` to implement `Send`\n    = note: required because it appears within the type `Box<dyn Dummy>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object.rs:5:18"}, {"sha": "24428266cc717d2e7681a74a19b61f8f51797ec4", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n-   = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n+   = note: required for `&'a (dyn Dummy + 'a)` to implement `Send`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18\n    |\n@@ -19,7 +19,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n-   = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n+   = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object1.rs:5:18"}, {"sha": "81ec65950d8757ecb56aacbe9e72340ca03d1bb0", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n-   = note: required because of the requirements on the impl of `Send` for `&'static (dyn Dummy + 'static)`\n+   = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object2.rs:3:18\n    |\n@@ -19,7 +19,7 @@ LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n-   = note: required because of the requirements on the impl of `Send` for `Unique<dyn Dummy>`\n+   = note: required for `Unique<dyn Dummy>` to implement `Send`\n    = note: required because it appears within the type `Box<dyn Dummy>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-object2.rs:3:18"}, {"sha": "076c42959826d81e64a7e8297eabf8a1b0929525", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n-   = note: required because of the requirements on the impl of `Send` for `Unique<*mut u8>`\n+   = note: required for `Unique<*mut u8>` to implement `Send`\n    = note: required because it appears within the type `Box<*mut u8>`\n note: required by a bound in `assert_send`\n   --> $DIR/kindck-send-owned.rs:3:18"}, {"sha": "3fbb2ddf183d3578b0edf5d5bd9b0fabb5cec262", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,7 +7,7 @@ LL |     test_sync(guard);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n-   = note: required because of the requirements on the impl of `Sync` for `MutexGuard<'_, Cell<i32>>`\n+   = note: required for `MutexGuard<'_, Cell<i32>>` to implement `Sync`\n note: required by a bound in `test_sync`\n   --> $DIR/mutexguard-sync.rs:5:17\n    |"}, {"sha": "43bb31afa6f54c5aec637144615596300a80254b", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `Rc<RefCell<i32>>`\n+   = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14\n    |\n@@ -22,7 +22,7 @@ LL |     assert::<Rc<RefCell<i32>>>();\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `Rc<RefCell<i32>>`\n+   = note: required for `Rc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-2.rs:7:14\n    |"}, {"sha": "ef1d1baf58bfc85ca1af3e25e9a0989d693cff52", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `Arc<RefCell<i32>>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14\n    |\n@@ -22,7 +22,7 @@ LL |     assert::<Arc<RefCell<i32>>>();\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `Arc<RefCell<i32>>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-3.rs:7:14\n    |"}, {"sha": "a398b44d339e79fd2e527b935bc71b5aecca42af", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     assert::<&RefCell<i32>>();\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`\n+   = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14\n    |\n@@ -22,7 +22,7 @@ LL |     assert::<&RefCell<i32>>();\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`\n+   = note: required for `&RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-4.rs:6:14\n    |"}, {"sha": "9617d5dfde40df5a23f63d5d09b35de6b46252f9", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `*const UnsafeCell<i32>`\n+   = note: required for `*const UnsafeCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-5.rs:6:14\n    |"}, {"sha": "09204d942d2351ca4121c13cbc0efd4ae6bfa912", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     assert::<*mut RefCell<i32>>();\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `*mut RefCell<i32>`\n+   = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14\n    |\n@@ -22,7 +22,7 @@ LL |     assert::<*mut RefCell<i32>>();\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n-   = note: required because of the requirements on the impl of `UnwindSafe` for `*mut RefCell<i32>`\n+   = note: required for `*mut RefCell<i32>` to implement `UnwindSafe`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe-6.rs:6:14\n    |"}, {"sha": "8420637b3dee74a262014def0850af5cc3276354", "filename": "src/test/ui/object-safety/issue-19538.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fissue-19538.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -29,7 +29,7 @@ LL |     fn foo<T>(&self, val: T);\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n    = help: consider moving `foo` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n+   = note: required for `&mut Thing` to implement `CoerceUnsized<&mut dyn Bar>`\n    = note: required by cast to type `&mut dyn Bar`\n \n error: aborting due to 2 previous errors"}, {"sha": "f44de07d5da1db562955943fd1cae9c5aa5499d1", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL | trait Bar {\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error: aborting due to previous error"}, {"sha": "9a2d472d5e760063aae12872ad3de492df9e9c33", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n@@ -29,7 +29,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error: aborting due to 2 previous errors"}, {"sha": "40a298bd1a7c7d789290538971782513971c8bc1", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL | trait Bar {\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n    = help: consider moving `bar` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n@@ -29,7 +29,7 @@ LL | trait Baz {\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Baz>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Baz>`\n    = note: required by cast to type `&dyn Baz`\n \n error: aborting due to 2 previous errors"}, {"sha": "da87b58c9e296ca6e31fd795c7bdb99811b8d484", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Foo>>` for `Box<Bar>`\n+   = note: required for `Box<Bar>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |"}, {"sha": "6c29c8d5f7cd72521989474af83e39201055fac6", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n    |                  ^^^^^ ...because it requires `Self: Sized`\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error: aborting due to previous error"}, {"sha": "70a44ed6101538f44b2c716c534d3d8d3e6c651f", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Bar : Sized {\n    |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n    = note: required by cast to type `&dyn Bar`\n \n error: aborting due to previous error"}, {"sha": "a7ec3bda85eca8bc2d01aaaf988f72f730c44290", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     x[1i32];\n    |\n    = help: the trait `SliceIndex<[i32]>` is not implemented for `i32`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<i32>` for `[i32]`\n+   = note: required for `[i32]` to implement `Index<i32>`\n \n error[E0277]: the type `[i32]` cannot be indexed by `RangeTo<i32>`\n   --> $DIR/slice-index.rs:9:7\n@@ -18,7 +18,7 @@ LL |     x[..1i32];\n    = help: the following other types implement trait `SliceIndex<T>`:\n              <RangeTo<usize> as SliceIndex<[T]>>\n              <RangeTo<usize> as SliceIndex<str>>\n-   = note: required because of the requirements on the impl of `Index<RangeTo<i32>>` for `[i32]`\n+   = note: required for `[i32]` to implement `Index<RangeTo<i32>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c91eba68e39952601af8089d4db38aa0daa4405", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -24,7 +24,7 @@ LL | |     }.hi() {\n    | |__________^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `bool`\n+   = note: required for `bool` to implement `IntoIterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "015c8fa4cd196ea42a75ff4df423a87b3d1a3fe7", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     is_zen(x)\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Zen` for `&T`\n+note: required for `&T` to implement `Zen`\n   --> $DIR/phantom-auto-trait.rs:10:24\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n@@ -35,7 +35,7 @@ LL |     is_zen(x)\n    |     |\n    |     required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Zen` for `&T`\n+note: required for `&T` to implement `Zen`\n   --> $DIR/phantom-auto-trait.rs:10:24\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}"}, {"sha": "0e3bb66ab61e9d7eb2902ab7d1717a1322fa748b", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -20,8 +20,8 @@ LL |     for i in false..true {}\n              isize\n              u128\n            and 5 others\n-   = note: required because of the requirements on the impl of `Iterator` for `std::ops::Range<bool>`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `std::ops::Range<bool>`\n+   = note: required for `std::ops::Range<bool>` to implement `Iterator`\n+   = note: required for `std::ops::Range<bool>` to implement `IntoIterator`\n \n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n   --> $DIR/range-1.rs:14:17"}, {"sha": "07f828475680fe072678147b0f0dd361880a990e", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>: Iterator`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>`\n+   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7d81de4385469feeac1377a0517e1b600395ad4e", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -9,7 +9,7 @@ LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n    |\n    = help: the trait `Termination` is not implemented for `f32`\n-   = note: required because of the requirements on the impl of `Termination` for `Result<f32, ParseFloatError>`\n+   = note: required for `Result<f32, ParseFloatError>` to implement `Termination`\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n    |"}, {"sha": "ac61c3279217b2184290258a3218a1500966ca4f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -54,13 +54,13 @@ LL |         const _: () = check($exp);\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n-note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n+note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |"}, {"sha": "ac61c3279217b2184290258a3218a1500966ca4f", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -54,13 +54,13 @@ LL |         const _: () = check($exp);\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n    |\n-note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n+note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `~const Destruct` for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n   --> $DIR/const-drop-fail.rs:34:19\n    |"}, {"sha": "0ec0d4be5f23cf50102ccae766fc2b24fe0f0313", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -31,7 +31,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Rc<dyn Foo>>` for `Rc<usize>`\n+   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n    = note: required by cast to type `Rc<dyn Foo>`\n \n error: aborting due to 2 previous errors"}, {"sha": "b494b448e2e7d24239d0ff17185d215e89cf6623", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,7 +14,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Rc<dyn Foo>>` for `Rc<usize>`\n+   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n    = note: required by cast to type `Rc<dyn Foo>`\n \n error: aborting due to previous error"}, {"sha": "6d98763a572f47948876ff8ad10c3f5196dfee6f", "filename": "src/test/ui/specialization/default-generic-associated-type-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-generic-associated-type-bound.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,7 +14,7 @@ error[E0277]: can't compare `T` with `T`\n LL |     default type U<'a> = &'a T;\n    |                          ^^^^^ no implementation for `T == T`\n    |\n-   = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n+   = note: required for `&'a T` to implement `PartialEq`\n note: required by a bound in `X::U`\n   --> $DIR/default-generic-associated-type-bound.rs:8:17\n    |"}, {"sha": "146a56358bebeac6fc841823fc845e75f81e161a", "filename": "src/test/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -10,7 +10,7 @@ LL | #![feature(specialization)]\n \n error[E0275]: overflow evaluating the requirement `i32: Check`\n    |\n-note: required because of the requirements on the impl of `Iterate` for `i32`\n+note: required for `i32` to implement `Iterate`\n   --> $DIR/issue-38091-2.rs:11:13\n    |\n LL | impl<'a, T> Iterate<'a> for T"}, {"sha": "9b74f684b8f48c99f148b838cf4c36cf6cea4a78", "filename": "src/test/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,12 +14,12 @@ error[E0275]: overflow evaluating the requirement `T: FromA<U>`\n LL |     x.foo(y.to()).to()\n    |             ^^\n    |\n-note: required because of the requirements on the impl of `FromA<U>` for `T`\n+note: required for `T` to implement `FromA<U>`\n   --> $DIR/issue-39448.rs:24:29\n    |\n LL | impl<T: A, U: A + FromA<T>> FromA<T> for U {\n    |                             ^^^^^^^^     ^\n-note: required because of the requirements on the impl of `ToA<T>` for `U`\n+note: required for `U` to implement `ToA<T>`\n   --> $DIR/issue-39448.rs:34:12\n    |\n LL | impl<T, U> ToA<U> for T"}, {"sha": "419345addc2fcd1cab754e59c90bd7864933a285", "filename": "src/test/ui/specialization/issue-45814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-45814.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -1,13 +1,13 @@\n error[E0275]: overflow evaluating the requirement `T: Trait<_>`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_45814`)\n-note: required because of the requirements on the impl of `Trait<_>` for `T`\n+note: required for `T` to implement `Trait<_>`\n   --> $DIR/issue-45814.rs:8:20\n    |\n LL | default impl<T, U> Trait<T> for U {}\n    |                    ^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Trait<_>` for `T`\n+   = note: required for `T` to implement `Trait<_>`\n \n error: aborting due to previous error\n "}, {"sha": "34da1dd12df6f6debd91728e95a5572568f29ea2", "filename": "src/test/ui/specialization/min_specialization/issue-79224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fissue-79224.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `B: Clone` is not satisfied\n LL | impl<B: ?Sized> Display for Cow<'_, B> {\n    |                 ^^^^^^^ the trait `Clone` is not implemented for `B`\n    |\n-   = note: required because of the requirements on the impl of `ToOwned` for `B`\n+   = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound\n    |\n LL | impl<B: ?Sized + std::clone::Clone> Display for Cow<'_, B> {\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `B: Clone` is not satisfied\n LL |     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    |            ^^^^^ the trait `Clone` is not implemented for `B`\n    |\n-   = note: required because of the requirements on the impl of `ToOwned` for `B`\n+   = note: required for `B` to implement `ToOwned`\n help: consider further restricting this bound\n    |\n LL | impl<B: ?Sized + std::clone::Clone> Display for Cow<'_, B> {"}, {"sha": "019305def2932ec3ce768e2895b19d86cf07cccb", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     let _: u8 = s[4];\n    = note: you can use `.chars().nth()` or `.bytes().nth()`\n            for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<{integer}>` for `str`\n+   = note: required for `str` to implement `Index<{integer}>`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:4:19\n@@ -53,7 +53,7 @@ LL |     let _: u8 = s['c'];\n    |                   ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n-   = note: required because of the requirements on the impl of `Index<char>` for `str`\n+   = note: required for `str` to implement `Index<char>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b165c482590a253babc0ea50d99126542b863e65", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -32,7 +32,7 @@ LL |     s[1usize] = bot();\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<usize>` for `str`\n+   = note: required for `str` to implement `Index<usize>`\n \n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:9:15\n@@ -77,7 +77,7 @@ LL |     s['c'];\n    |       ^^^ string indices are ranges of `usize`\n    |\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n-   = note: required because of the requirements on the impl of `Index<char>` for `str`\n+   = note: required for `str` to implement `Index<char>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "0645f0cdde7c0b31e5b70ed146fc5d03d10a02d9", "filename": "src/test/ui/suggestions/derive-clone-for-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `T: Clone` is not satisfied\n LL | #[derive(Clone, Eq)]\n    |                 ^^ the trait `Clone` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `PartialEq` for `Struct<T>`\n+note: required for `Struct<T>` to implement `PartialEq`\n   --> $DIR/derive-clone-for-eq.rs:9:19\n    |\n LL | impl<T: Clone, U> PartialEq<U> for Struct<T>"}, {"sha": "b9f7739654a9ba6e2bef60376e92266539b5b55d", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -26,13 +26,13 @@ LL |     #[derive(Debug)]\n LL |     struct Outer<T>(Inner<T>);\n    |                     ^^^^^^^^ the trait `c::Trait` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Debug` for `c::Inner<T>`\n+note: required for `c::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:34:28\n    |\n LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n    |                            ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Debug` for `&c::Inner<T>`\n+   = note: required for `&c::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n@@ -48,13 +48,13 @@ LL |     #[derive(Debug)]\n LL |     struct Outer<T>(Inner<T>);\n    |                     ^^^^^^^^ the trait `d::Trait` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Debug` for `d::Inner<T>`\n+note: required for `d::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:49:13\n    |\n LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n    |             ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Debug` for `&d::Inner<T>`\n+   = note: required for `&d::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n@@ -70,13 +70,13 @@ LL |     #[derive(Debug)]\n LL |     struct Outer<T>(Inner<T>);\n    |                     ^^^^^^^^ the trait `e::Trait` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Debug` for `e::Inner<T>`\n+note: required for `e::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:64:13\n    |\n LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n    |             ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Debug` for `&e::Inner<T>`\n+   = note: required for `&e::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n@@ -92,13 +92,13 @@ LL |     #[derive(Debug)]\n LL |     struct Outer<T>(Inner<T>);\n    |                     ^^^^^^^^ the trait `f::Trait` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `Debug` for `f::Inner<T>`\n+note: required for `f::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:79:20\n    |\n LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n    |                    ^^^^^     ^^^^^^^^\n    = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Debug` for `&f::Inner<T>`\n+   = note: required for `&f::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`"}, {"sha": "a56a2a188cb3f720cd69532f0fb555a70808d80a", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,7 +14,7 @@ LL |     foo(String::new());\n              <String as From<Box<str>>>\n              <String as From<Cow<'a, str>>>\n              <String as From<char>>\n-   = note: required because of the requirements on the impl of `Into<&str>` for `String`\n+   = note: required for `String` to implement `Into<&str>`\n note: required by a bound in `foo`\n   --> $DIR/into-str.rs:1:31\n    |"}, {"sha": "607e7992b9f0606649baf2d8087174afa5fb98a1", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{:?}\", line.find(pattern));\n    |                           required by a bound introduced by this call\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n-   = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\n+   = note: required for `String` to implement `Pattern<'_>`\n note: required by a bound in `core::str::<impl str>::find`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |"}, {"sha": "a5e6f5b5ffcb0a40fa7a4041ea1baff58bdd7042", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,7 +7,7 @@ LL |     let _: &[i8] = data.into();\n    = help: the following other types implement trait `From<T>`:\n              <[T; LANES] as From<Simd<T, LANES>>>\n              <[bool; LANES] as From<Mask<T, LANES>>>\n-   = note: required because of the requirements on the impl of `Into<&[i8]>` for `&[u8]`\n+   = note: required for `&[u8]` to implement `Into<&[i8]>`\n \n error: aborting due to previous error\n "}, {"sha": "72a9a739a64f3d6d051d8ebd737d31307ed23fa5", "filename": "src/test/ui/suggestions/issue-96223.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96223.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,12 +7,12 @@ LL |     icey_bounds(&p);\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Foo<'de>` is implemented for `Baz<T>`\n-note: required because of the requirements on the impl of `for<'de> Foo<'de>` for `Baz<EmptyBis<'de>>`\n+note: required for `Baz<EmptyBis<'de>>` to implement `for<'de> Foo<'de>`\n   --> $DIR/issue-96223.rs:16:14\n    |\n LL | impl<'de, T> Foo<'de> for Baz<T> where T: Foo<'de> {}\n    |              ^^^^^^^^     ^^^^^^\n-note: required because of the requirements on the impl of `Dummy<EmptyMarker>` for `Empty`\n+note: required for `Empty` to implement `Dummy<EmptyMarker>`\n   --> $DIR/issue-96223.rs:20:9\n    |\n LL | impl<M> Dummy<M> for Empty"}, {"sha": "9a8a183dc2d414e78b1e62b8e249238c677968c5", "filename": "src/test/ui/suggestions/issue-96555.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     m::f1().await;\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+   = note: required for `()` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     m::f1().await;\n@@ -29,7 +29,7 @@ LL |     m::f2().await;\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+   = note: required for `()` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     m::f2().await;\n@@ -50,7 +50,7 @@ LL |     m::f3().await;\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+   = note: required for `()` to implement `IntoFuture`\n help: remove the `.await`\n    |\n LL -     m::f3().await;"}, {"sha": "44f0da27f13602f7b3bb96e914c955a8736fde07", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |   for _ in v[1..] {\n    |            ^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+   = note: required for `[i32]` to implement `IntoIterator`\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -20,7 +20,7 @@ LL |   for _ in v[1..] {\n    |            ^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[i32]`\n+   = note: required for `[i32]` to implement `IntoIterator`\n help: consider borrowing here\n    |\n LL |   for _ in &v[1..] {\n@@ -35,7 +35,7 @@ LL |   for i2 in v2[1..] {\n    |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+   = note: required for `[K]` to implement `IntoIterator`\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {\n@@ -50,7 +50,7 @@ LL |   for i2 in v2[1..] {\n    |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[K]`\n+   = note: required for `[K]` to implement `IntoIterator`\n help: consider borrowing here\n    |\n LL |   for i2 in &v2[1..] {"}, {"sha": "147dc9234c59892b4d799353622ab01de74e3de9", "filename": "src/test/ui/suggestions/suggest-dereferencing-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-dereferencing-index.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     let one_item_please: i32 = [1, 2, 3][i];\n    |\n    = help: the trait `SliceIndex<[{integer}]>` is not implemented for `&usize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-   = note: required because of the requirements on the impl of `Index<&usize>` for `[{integer}]`\n+   = note: required for `[{integer}]` to implement `Index<&usize>`\n help: dereference this index\n    |\n LL |     let one_item_please: i32 = [1, 2, 3][*i];"}, {"sha": "1a843f3f5097bf387b8bb88f507843c4db96f926", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     for (i, _) in &v.iter().enumerate() {\n    |                   help: consider removing the leading `&`-reference\n    |\n    = help: the trait `Iterator` is not implemented for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required for `&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n \n error: aborting due to previous error\n "}, {"sha": "f39361d529fbf97d53c5a3a90a69a2015e238e3b", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |                   help: consider removing 5 leading `&`-references\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n \n error: aborting due to previous error\n "}, {"sha": "4d07324273c30a00d509fca480cb1e6545b720e5", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL | |          .enumerate() {\n    | |_____________________^ `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>`\n+   = note: required for `&&&&&Enumerate<std::slice::Iter<'_, {integer}>>` to implement `IntoIterator`\n \n error: aborting due to previous error\n "}, {"sha": "ae9d7d0a9b4a4ef27769e0ba6f3edf33b915bf24", "filename": "src/test/ui/traits/alias/cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<u32>`\n-   = note: required because of the requirements on the impl of `SendSync` for `Rc<u32>`\n+   = note: required for `Rc<u32>` to implement `SendSync`\n note: required by a bound in `use_alias`\n   --> $DIR/cross-crate.rs:10:17\n    |\n@@ -19,7 +19,7 @@ LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `Rc<u32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Rc<u32>`\n-   = note: required because of the requirements on the impl of `SendSync` for `Rc<u32>`\n+   = note: required for `Rc<u32>` to implement `SendSync`\n note: required by a bound in `use_alias`\n   --> $DIR/cross-crate.rs:10:17\n    |"}, {"sha": "5ba189aa82a41233abac79fddcd172eb970c680d", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ fn strip_lf(s: &str) -> &str {\n     //~| NOTE required by a bound introduced by this call\n     //~| HELP the trait `FnMut<(char,)>` is not implemented for `u8`\n     //~| HELP the following other types implement trait `Pattern<'a>`:\n-    //~| NOTE required because of the requirements on the impl of `Pattern<'_>` for `u8`\n+    //~| NOTE required for `u8` to implement `Pattern<'_>`\n \n }\n "}, {"sha": "41120c09fb1640e2d26a36a15bc3d8801f768081", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -15,7 +15,7 @@ LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n              &'c &'b str\n              [char; N]\n              char\n-   = note: required because of the requirements on the impl of `Pattern<'_>` for `u8`\n+   = note: required for `u8` to implement `Pattern<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "2478eb35422eaa534ad56af87f0d6f3df0d5d327", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -17,12 +17,12 @@ note: required because it appears within the type `RootDatabase`\n    |\n LL | struct RootDatabase {\n    |        ^^^^^^^^^^^^\n-note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n+note: required for `RootDatabase` to implement `SourceDatabase`\n   --> $DIR/cycle-cache-err-60010.rs:44:9\n    |\n LL | impl<T> SourceDatabase for T\n    |         ^^^^^^^^^^^^^^     ^\n-note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+note: required for `ParseQuery` to implement `Query<RootDatabase>`\n   --> $DIR/cycle-cache-err-60010.rs:37:10\n    |\n LL | impl<DB> Query<DB> for ParseQuery"}, {"sha": "004e477374a6a8c1dfc041e36f22ba045cc25244", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -28,5 +28,5 @@ fn main() {\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n     //~| 3 redundant requirements hidden\n-    //~| required because of\n+    //~| required for\n }"}, {"sha": "b72d53bddbc89b7d23b5dbd60cd1b6f5579c1669", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,13 +4,13 @@ error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `Box<X<C<'_>>>`\n+note: required for `Box<X<C<'_>>>` to implement `NotAuto`\n   --> $DIR/lifetime.rs:18:18\n    |\n LL | impl<T: NotAuto> NotAuto for Box<T> {}\n    |                  ^^^^^^^     ^^^^^^\n    = note: 3 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+   = note: required for `X<C<'static>>` to implement `NotAuto`\n note: required by a bound in `is_send`\n   --> $DIR/lifetime.rs:22:15\n    |"}, {"sha": "09930e60efe4657e2ccdb58283123d7a77eb76d0", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n LL |     is_ee(4);\n    |     ^^^^^\n    |\n-note: required because of the requirements on the impl of `Combo` for `{integer}`\n+note: required for `{integer}` to implement `Combo`\n   --> $DIR/simultaneous.rs:11:34\n    |\n LL | impl<T: Tweedledee + Tweedledum> Combo for T {}"}, {"sha": "3ec288d1382b0079e0a98e9bea6a434db613a242", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -14,7 +14,7 @@ LL |     let (a, b) = copy(NoClone);\n    |                  |\n    |                  required by a bound introduced by this call\n    |\n-note: required because of the requirements on the impl of `Magic` for `NoClone`\n+note: required for `NoClone` to implement `Magic`\n   --> $DIR/supertrait-auto-trait.rs:8:12\n    |\n LL | auto trait Magic: Copy {}"}, {"sha": "4b862cf79ce3ef0a176d9d2c3ca8ed6dd2a3ad23", "filename": "src/test/ui/traits/inductive-overflow/supertrait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^\n    |\n-note: required because of the requirements on the impl of `Magic` for `NoClone`\n+note: required for `NoClone` to implement `Magic`\n   --> $DIR/supertrait.rs:5:16\n    |\n LL | impl<T: Magic> Magic for T {}"}, {"sha": "4394e6f7e05fb3ee7fc5fde3b5a3bbc0a3ffaf2b", "filename": "src/test/ui/traits/issue-18400.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,13 +5,13 @@ LL |     0.contains(bits);\n    |       ^^^^^^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_18400`)\n-note: required because of the requirements on the impl of `Set<&[_]>` for `{integer}`\n+note: required for `{integer}` to implement `Set<&[_]>`\n   --> $DIR/issue-18400.rs:6:16\n    |\n LL | impl<'a, T, S> Set<&'a [T]> for S where\n    |                ^^^^^^^^^^^^     ^\n    = note: 128 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>` for `{integer}`\n+   = note: required for `{integer}` to implement `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>`\n \n error: aborting due to previous error\n "}, {"sha": "2028994cdaa0a35a563bb5cb8480d01f70b1ac52", "filename": "src/test/ui/traits/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-20692.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -27,7 +27,7 @@ LL | trait Array: Sized + Copy {}\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Array>` for `&T`\n+   = note: required for `&T` to implement `CoerceUnsized<&dyn Array>`\n    = note: required by cast to type `&dyn Array`\n \n error: aborting due to 2 previous errors"}, {"sha": "50d6fb0546547c22522505b44259a1c95e511a77", "filename": "src/test/ui/traits/issue-38604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-38604.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -25,7 +25,7 @@ LL | trait Foo where u32: Q<Self> {\n    |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Foo>>` for `Box<()>`\n+   = note: required for `Box<()>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`\n \n error: aborting due to 2 previous errors"}, {"sha": "69eed0c0462fde894137ee83daa66474cf0638a6", "filename": "src/test/ui/traits/issue-71036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.rs?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,6 +12,6 @@ impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for Foo<'\n //~^ ERROR the trait bound `&'a T: Unsize<&'a U>` is not satisfied\n //~| NOTE the trait `Unsize<&'a U>` is not implemented for `&'a T`\n //~| NOTE all implementations of `Unsize` are provided automatically by the compiler\n-//~| NOTE required because of the requirements on the impl\n+//~| NOTE required for\n \n fn main() {}"}, {"sha": "79eb7a2ae8bd397de70ca1f1b3b1506f5481346b", "filename": "src/test/ui/traits/issue-71036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71036.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL | impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Unsize<&'a U>` is not implemented for `&'a T`\n    |\n    = note: all implementations of `Unsize` are provided automatically by the compiler, see <https://doc.rust-lang.org/stable/std/marker/trait.Unsize.html> for more information\n-   = note: required because of the requirements on the impl of `DispatchFromDyn<&'a &'a U>` for `&'a &'a T`\n+   = note: required for `&'a &'a T` to implement `DispatchFromDyn<&'a &'a U>`\n \n error: aborting due to previous error\n "}, {"sha": "f541733929d360521e551aafd98a9e05f78c12a4", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,7 +7,7 @@ LL | struct FooHolster {\n LL |     the_foos: Vec<Foo>,\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n    |\n-   = note: required because of the requirements on the impl of `Clone` for `Vec<Foo>`\n+   = note: required for `Vec<Foo>` to implement `Clone`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Foo` with `#[derive(Clone)]`\n    |"}, {"sha": "6a597a402156f1926912f3ac5bb958a4e53187ec", "filename": "src/test/ui/traits/issue-82830.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `P: Sized`\n LL |     t: MaybeBox<P>,\n    |        ^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `A<P, Box<P>>` for `P`\n+note: required for `P` to implement `A<P, Box<P>>`\n   --> $DIR/issue-82830.rs:10:12\n    |\n LL | impl<Y, N> A<Y, N> for P {"}, {"sha": "9f9acf851135f4d0a3282cede8249af04ad6f6fa", "filename": "src/test/ui/traits/issue-91594.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91594.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -5,7 +5,7 @@ LL | impl HasComponent<<Foo as Component<Foo>>::Interface> for Foo {}\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasComponent<()>` is not implemented for `Foo`\n    |\n    = help: the trait `HasComponent<<Foo as Component<Foo>>::Interface>` is implemented for `Foo`\n-note: required because of the requirements on the impl of `Component<Foo>` for `Foo`\n+note: required for `Foo` to implement `Component<Foo>`\n   --> $DIR/issue-91594.rs:13:27\n    |\n LL | impl<M: HasComponent<()>> Component<M> for Foo {"}, {"sha": "6acf2fe65ce44e65c81bc356d000b32551c249eb", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -15,9 +15,9 @@ LL |       recurse(IteratorOfWrapped(elements).map(|t| t.0))\n error[E0275]: overflow evaluating the requirement `(): Sized`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n-   = note: required because of the requirements on the impl of `Iterator` for `std::iter::Empty<()>`\n+   = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>` to implement `Iterator`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9062a0fab630a3103d5e8ac839e5b1a54dd90b40", "filename": "src/test/ui/traits/issue-97576.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `String: From<impl ToString>` is not satisfied\n LL |             bar: bar.into(),\n    |                      ^^^^ the trait `From<impl ToString>` is not implemented for `String`\n    |\n-   = note: required because of the requirements on the impl of `Into<String>` for `impl ToString`\n+   = note: required for `impl ToString` to implement `Into<String>`\n \n error: aborting due to previous error\n "}, {"sha": "bf7c3bcc6aa9b46c1e22bed723b2200027108a12", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -66,7 +66,7 @@ LL |     is_send(Box::new(TestType));\n    |     required by a bound introduced by this call\n    |\n    = note: the trait bound `Unique<dummy2::TestType>: Send` is not satisfied\n-   = note: required because of the requirements on the impl of `Send` for `Unique<dummy2::TestType>`\n+   = note: required for `Unique<dummy2::TestType>` to implement `Send`\n    = note: required because it appears within the type `Box<dummy2::TestType>`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n@@ -92,7 +92,7 @@ note: required because it appears within the type `Outer2<dummy3::TestType>`\n    |\n LL | struct Outer2<T>(T);\n    |        ^^^^^^\n-   = note: required because of the requirements on the impl of `Send` for `Unique<Outer2<dummy3::TestType>>`\n+   = note: required for `Unique<Outer2<dummy3::TestType>>` to implement `Send`\n    = note: required because it appears within the type `Box<Outer2<dummy3::TestType>>`\n note: required by a bound in `is_send`\n   --> $DIR/negated-auto-traits-error.rs:16:15\n@@ -109,7 +109,7 @@ LL |     is_sync(Outer2(TestType));\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Send` is not implemented for `main::TestType`\n-note: required because of the requirements on the impl of `Sync` for `Outer2<main::TestType>`\n+note: required for `Outer2<main::TestType>` to implement `Sync`\n   --> $DIR/negated-auto-traits-error.rs:14:22\n    |\n LL | unsafe impl<T: Send> Sync for Outer2<T> {}"}, {"sha": "53178328c56af7bbd408bd1864cd4af387d1c846", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -22,7 +22,7 @@ LL | impl I<i32> for B {}\n    | ^^^^^^^^^^^^^^^^^\n LL | impl I<u32> for B {}\n    | ^^^^^^^^^^^^^^^^^\n-note: required because of the requirements on the impl of `V<_>` for `A<B>`\n+note: required for `A<B>` to implement `V<_>`\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:12:12\n    |\n LL | impl<T, U> V<U> for A<T>"}, {"sha": "dc18adeafc7f7bcc0de7efb8b0d3c5cbf186ee61", "filename": "src/test/ui/traits/object/safety.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsafety.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Tr>` for `&St`\n+   = note: required for `&St` to implement `CoerceUnsized<&dyn Tr>`\n    = note: required by cast to type `&dyn Tr`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |"}, {"sha": "4703afc6cad4f88827acafaca3599f95dd25daf5", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -8,7 +8,7 @@ LL |     let _errors = TcpListener::bind(&bad);\n    |                   |                 help: consider dereferencing here: `&*bad`\n    |                   required by a bound introduced by this call\n    |\n-   = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`\n+   = note: required for `&NoToSocketAddrs` to implement `ToSocketAddrs`\n note: required by a bound in `TcpListener::bind`\n   --> $SRC_DIR/std/src/net/tcp.rs:LL:COL\n    |"}, {"sha": "76663ace7edbdb013a12605ea52115dc548fea9d", "filename": "src/test/ui/traits/suggest-deferences/root-obligation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Froot-obligation.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -7,8 +7,8 @@ LL |         .filter(|c| \"aeiou\".contains(c))\n    |                             required by a bound introduced by this call\n    |\n    = help: the trait `Fn<(char,)>` is not implemented for `char`\n-   = note: required because of the requirements on the impl of `FnOnce<(char,)>` for `&char`\n-   = note: required because of the requirements on the impl of `Pattern<'_>` for `&char`\n+   = note: required for `&char` to implement `FnOnce<(char,)>`\n+   = note: required for `&char` to implement `Pattern<'_>`\n note: required by a bound in `core::str::<impl str>::contains`\n   --> $SRC_DIR/core/src/str/mod.rs:LL:COL\n    |"}, {"sha": "eaa20b0b4f4f183d6d5d80cd25c0b5ad28b5afa9", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -76,7 +76,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n+   = note: required for `Box<{integer}>` to implement `CoerceUnsized<Box<dyn bar>>`\n    = note: required by cast to type `Box<dyn bar>`\n \n error: aborting due to 5 previous errors"}, {"sha": "e11c3f810035c2bc2209df3cab556ece77cb9947", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |         Err(\"\")?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the trait `From<Infallible>` is implemented for `TryFromSliceError`\n-   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n+   = note: required for `Result<u32, TryFromSliceError>` to implement `FromResidual<Result<Infallible, &str>>`\n \n error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9"}, {"sha": "529f5f16c8fcddd89395c138b3cf829226999efc", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -17,7 +17,7 @@ LL |     Ok(Err(123_i32)?)\n              <f64 as From<i32>>\n              <f64 as From<i8>>\n            and 67 others\n-   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n+   = note: required for `Result<u64, u8>` to implement `FromResidual<Result<Infallible, i32>>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12"}, {"sha": "586ea82342a8f2404725f589ba43ee6421f39854", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (t, u)\n    |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+   = note: required for `(T, U)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n@@ -16,7 +16,7 @@ error[E0277]: `U` doesn't implement `Debug`\n LL |     (t, u)\n    |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n+   = note: required for `(T, U)` to implement `Debug`\n help: consider restricting type parameter `U`\n    |\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n@@ -28,7 +28,7 @@ error[E0277]: `U` doesn't implement `Debug`\n LL |     (u, t)\n    |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+   = note: required for `(U, T)` to implement `Debug`\n help: consider restricting type parameter `U`\n    |\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n@@ -40,7 +40,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (u, t)\n    |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+   = note: required for `(U, T)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;"}, {"sha": "cb162d382b6b5d6e7582668e2f7038d32e06b37b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (t, t)\n    |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n+   = note: required for `(T, T)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n@@ -16,7 +16,7 @@ error[E0277]: `U` doesn't implement `Debug`\n LL |     (u, t)\n    |     ^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+   = note: required for `(U, T)` to implement `Debug`\n help: consider restricting type parameter `U`\n    |\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n@@ -28,7 +28,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (u, t)\n    |     ^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(U, T)`\n+   = note: required for `(U, T)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;"}, {"sha": "14cbfb3806f84b4f0da4738dc2d0800bfa8cd41b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (t, 4u32)\n    |     ^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n+   = note: required for `(T, u32)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n@@ -16,7 +16,7 @@ error[E0277]: `U` doesn't implement `Debug`\n LL |     (u, 4u32)\n    |     ^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(U, u32)`\n+   = note: required for `(U, u32)` to implement `Debug`\n help: consider restricting type parameter `U`\n    |\n LL | type Two<T, U: std::fmt::Debug> = impl Debug;"}, {"sha": "722693e42669c3de79c3189d517783c38aebbc6b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -15,7 +15,7 @@ error[E0277]: `A` doesn't implement `Debug`\n LL |     (t, u, T::BAR)\n    |     ^^^^^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n+   = note: required for `(A, B, _)` to implement `Debug`\n help: consider restricting type parameter `A`\n    |\n LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n@@ -27,7 +27,7 @@ error[E0277]: `B` doesn't implement `Debug`\n LL |     (t, u, T::BAR)\n    |     ^^^^^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n+   = note: required for `(A, B, _)` to implement `Debug`\n help: consider restricting type parameter `B`\n    |\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n@@ -39,7 +39,7 @@ error[E0277]: `A` doesn't implement `Debug`\n LL |     (t, u, 42)\n    |     ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, i32)`\n+   = note: required for `(A, B, i32)` to implement `Debug`\n help: consider restricting type parameter `A`\n    |\n LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n@@ -51,7 +51,7 @@ error[E0277]: `B` doesn't implement `Debug`\n LL |     (t, u, 42)\n    |     ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, i32)`\n+   = note: required for `(A, B, i32)` to implement `Debug`\n help: consider restricting type parameter `B`\n    |\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;"}, {"sha": "f84ec0cdc273f7680d859508ca9d2e5d76d353b5", "filename": "src/test/ui/type-alias-impl-trait/issue-90400-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `B: Bar` is not satisfied\n LL |         MyBaz(bar)\n    |         ^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n    |\n-note: required because of the requirements on the impl of `Baz` for `MyBaz<B>`\n+note: required for `MyBaz<B>` to implement `Baz`\n   --> $DIR/issue-90400-2.rs:31:14\n    |\n LL | impl<B: Bar> Baz for MyBaz<B> {"}, {"sha": "66a6b0bbf743148407ae5faa5a4d9d00815da3aa", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `&'static B: From<&A>` is not satisfied\n LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n    |                                             ^^^^^^^^^^^^^^^^^^ the trait `From<&A>` is not implemented for `&'static B`\n    |\n-   = note: required because of the requirements on the impl of `Into<&'static B>` for `&A`\n+   = note: required for `&A` to implement `Into<&'static B>`\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) where &'static B: From<&A> {"}, {"sha": "b11198c584c0dea3d7b3c99bac447d5857791bd6", "filename": "src/test/ui/type-alias-impl-trait/not_a_defining_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnot_a_defining_use.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (t, 5i8)\n    |     ^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, i8)`\n+   = note: required for `(T, i8)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n@@ -27,7 +27,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     (t, <U as Bar>::FOO)\n    |     ^^^^^^^^^^^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, _)`\n+   = note: required for `(T, _)` to implement `Debug`\n help: consider restricting type parameter `T`\n    |\n LL | type Two<T: std::fmt::Debug, U> = impl Debug;"}, {"sha": "95fb6f6a55aebae5c19b170182d12266494e1cb2", "filename": "src/test/ui/type-alias-impl-trait/underconstrained_generic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n LL |     ()\n    |     ^^ the trait `Trait` is not implemented for `T`\n    |\n-note: required because of the requirements on the impl of `ProofForConversion<T>` for `()`\n+note: required for `()` to implement `ProofForConversion<T>`\n   --> $DIR/underconstrained_generic.rs:13:16\n    |\n LL | impl<X: Trait> ProofForConversion<X> for () {"}, {"sha": "d2729d853547bce65d5c36da19f063442bb57f42", "filename": "src/test/ui/typeck/issue-90101.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-90101.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -12,7 +12,7 @@ LL |     func(Path::new(\"hello\").to_path_buf().to_string_lossy(), \"world\")\n              <PathBuf as From<Cow<'a, Path>>>\n              <PathBuf as From<OsString>>\n              <PathBuf as From<String>>\n-   = note: required because of the requirements on the impl of `Into<PathBuf>` for `Cow<'_, str>`\n+   = note: required for `Cow<'_, str>` to implement `Into<PathBuf>`\n note: required by a bound in `func`\n   --> $DIR/issue-90101.rs:3:20\n    |"}, {"sha": "b04588c5716150a43ed078d7d2ffc4a968e550b4", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -6,7 +6,7 @@ LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n    |\n    = help: the trait `Iterator` is not implemented for `&T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n+   = note: required for `&T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n    |\n@@ -21,7 +21,7 @@ LL |     fn into_iter(self) -> Self::IntoIter {\n    |\n    = help: the trait `Iterator` is not implemented for `&T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n+   = note: required for `&T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n    |"}, {"sha": "85938364ede108cf66b1143c31e34c4ae914fca4", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `NotCopy: Copy` is not satisfied\n LL | const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `NotCopy`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<NotCopy>`\n+   = note: required for `Option<NotCopy>` to implement `Copy`\n note: required by a bound in `IsCopy`\n   --> $DIR/wf-const-type.rs:7:17\n    |"}, {"sha": "6cf4f33f947aa76700774e13ae7088e165e349a7", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n+   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n    = note: required by cast to type `Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n@@ -27,7 +27,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n+   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n    = note: required by cast to type `Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n@@ -43,7 +43,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Trait>>` for `Box<S>`\n+   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n    = note: required by cast to type `Box<dyn Trait>`\n \n error: aborting due to 3 previous errors"}, {"sha": "c9bd4549aaff86b22e9a742de80df9db003df25c", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -11,7 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n@@ -27,7 +27,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n@@ -43,7 +43,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n    = note: required by cast to type `&dyn Trait`\n \n error: aborting due to 3 previous errors"}, {"sha": "16c6124b65299284b09de8e8c82aab32a495c755", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `NotCopy: Copy` is not satisfied\n LL | static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `NotCopy`\n    |\n-   = note: required because of the requirements on the impl of `Copy` for `Option<NotCopy>`\n+   = note: required for `Option<NotCopy>` to implement `Copy`\n note: required by a bound in `IsCopy`\n   --> $DIR/wf-static-type.rs:7:17\n    |"}, {"sha": "96fc1d36b9cfaac4e5375af59a274ad08f015b4e", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84a199369b611f2140e1b6f20dce9e2d40ad37df/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=84a199369b611f2140e1b6f20dce9e2d40ad37df", "patch": "@@ -25,7 +25,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&S`\n+   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n    = note: required by cast to type `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n@@ -45,7 +45,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Trait>` for `&R`\n+   = note: required for `&R` to implement `CoerceUnsized<&dyn Trait>`\n    = note: required by cast to type `&dyn Trait`\n \n error: aborting due to 3 previous errors"}]}