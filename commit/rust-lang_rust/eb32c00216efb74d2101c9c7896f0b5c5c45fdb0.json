{"sha": "eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "node_id": "C_kwDOAAsO6NoAKGViMzJjMDAyMTZlZmI3NGQyMTAxYzljNzg5NmYwYjVjNWM0NWZkYjA", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-10-27T17:37:18Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-11-07T01:23:53Z"}, "message": "Add features gates for experimental asm features", "tree": {"sha": "79172dec9644086d364c8ba89a5381327b6c9c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79172dec9644086d364c8ba89a5381327b6c9c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "html_url": "https://github.com/rust-lang/rust/commit/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3831aaa13c740e20a97c5aa4b8c760da30bff726", "url": "https://api.github.com/repos/rust-lang/rust/commits/3831aaa13c740e20a97c5aa4b8c760da30bff726", "html_url": "https://github.com/rust-lang/rust/commit/3831aaa13c740e20a97c5aa4b8c760da30bff726"}], "stats": {"total": 341, "additions": 243, "deletions": 98}, "files": [{"sha": "95997a37d845b97e18a86b779992aae0b8e6b7b5", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -4,7 +4,8 @@ use rustc_ast::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_span::{Span, Symbol};\n+use rustc_session::parse::feature_err;\n+use rustc_span::{sym, Span, Symbol};\n use rustc_target::asm;\n use std::collections::hash_map::Entry;\n use std::fmt::Write;\n@@ -18,6 +19,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             struct_span_err!(self.sess, sp, E0472, \"inline assembly is unsupported on this target\")\n                 .emit();\n         }\n+        if let Some(asm_arch) = asm_arch {\n+            // Inline assembly is currently only stable for these architectures.\n+            let is_stable = matches!(\n+                asm_arch,\n+                asm::InlineAsmArch::X86\n+                    | asm::InlineAsmArch::X86_64\n+                    | asm::InlineAsmArch::Arm\n+                    | asm::InlineAsmArch::AArch64\n+                    | asm::InlineAsmArch::RiscV32\n+                    | asm::InlineAsmArch::RiscV64\n+            );\n+            if !is_stable && !self.sess.features_untracked().asm_experimental_arch {\n+                feature_err(\n+                    &self.sess.parse_sess,\n+                    sym::asm_experimental_arch,\n+                    sp,\n+                    \"inline assembly is not stable yet on this architecture\",\n+                )\n+                .emit();\n+            }\n+        }\n         if asm.options.contains(InlineAsmOptions::ATT_SYNTAX)\n             && !matches!(asm_arch, Some(asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64))\n             && !self.sess.opts.actually_rustdoc\n@@ -121,10 +143,30 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n                         }\n                     }\n-                    InlineAsmOperand::Const { ref anon_const } => hir::InlineAsmOperand::Const {\n-                        anon_const: self.lower_anon_const(anon_const),\n-                    },\n+                    InlineAsmOperand::Const { ref anon_const } => {\n+                        if !self.sess.features_untracked().asm_const {\n+                            feature_err(\n+                                &self.sess.parse_sess,\n+                                sym::asm_const,\n+                                *op_sp,\n+                                \"const operands for inline assembly are unstable\",\n+                            )\n+                            .emit();\n+                        }\n+                        hir::InlineAsmOperand::Const {\n+                            anon_const: self.lower_anon_const(anon_const),\n+                        }\n+                    }\n                     InlineAsmOperand::Sym { ref expr } => {\n+                        if !self.sess.features_untracked().asm_sym {\n+                            feature_err(\n+                                &self.sess.parse_sess,\n+                                sym::asm_sym,\n+                                *op_sp,\n+                                \"sym operands for inline assembly are unstable\",\n+                            )\n+                            .emit();\n+                        }\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };"}, {"sha": "0266b7844ba7fce5181ef9bfef21631e058be0af", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -692,6 +692,15 @@ declare_features! (\n     /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n     (active, doc_auto_cfg, \"1.58.0\", Some(43781), None),\n \n+    /// Allows using `const` operands in inline assembly.\n+    (active, asm_const, \"1.58.0\", Some(72016), None),\n+\n+    /// Allows using `sym` operands in inline assembly.\n+    (active, asm_sym, \"1.58.0\", Some(72016), None),\n+\n+    /// Enables experimental inline assembly support for additional architectures.\n+    (active, asm_experimental_arch, \"1.58.0\", Some(72016), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "2196c5f987f993550d389b237ffef7a153e94fb0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -327,6 +327,9 @@ symbols! {\n         as_ptr,\n         as_str,\n         asm,\n+        asm_const,\n+        asm_experimental_arch,\n+        asm_sym,\n         assert,\n         assert_inhabited,\n         assert_macro,"}, {"sha": "4b16a269f2d738c2a93b4811525c88d8cc9cd965", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -193,6 +193,7 @@\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n+#![cfg_attr(not(bootstrap), feature(asm_const))]\n //\n // Target features:\n #![feature(aarch64_target_feature)]"}, {"sha": "3f8e165841d1421bb906720da5f8fc2171c4c26d", "filename": "src/doc/unstable-book/src/library-features/global-asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -75,7 +75,7 @@ are concatenated into one or assembled separately.\n constants defined in Rust to be used in assembly code:\n \n ```rust,no_run\n-#![feature(global_asm)]\n+#![feature(global_asm, asm_const)]\n # #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n # mod x86 {\n const C: i32 = 1234;\n@@ -96,7 +96,7 @@ override this by adding `options(att_syntax)` at the end of the macro\n arguments list:\n \n ```rust,no_run\n-#![feature(global_asm)]\n+#![feature(global_asm, asm_const)]\n # #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n # mod x86 {\n global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));"}, {"sha": "04b5f4aed9bb5c87ef34b0658a78c60586022d39", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "0c57b1fc4782de50a8752cb372d439e973ea18b9", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: -C target-feature=+neon\n // needs-llvm-components: arm\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "3428d93fb1205d60b3e3040a76996cbbc4552c08", "filename": "src/test/assembly/asm/bpf-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fbpf-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --target bpfel-unknown-none -C target_feature=+alu32\n // needs-llvm-components: bpf\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "7e48c386abcde7cc978b0e5ef4653413e00a8601", "filename": "src/test/assembly/asm/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -2,7 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n \n-#![feature(asm, global_asm)]\n+#![feature(global_asm, asm_const)]\n #![crate_type = \"rlib\"]\n \n // CHECK: mov eax, eax"}, {"sha": "de310c78488d9e9fea925fb0f32644c61898cefc", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: --target hexagon-unknown-linux-musl\n // needs-llvm-components: hexagon\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "04bf49a40efbcd0b816754138a36717b5e64b6f3", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -5,7 +5,7 @@\n //[mips64] compile-flags: --target mips64-unknown-linux-gnuabi64\n //[mips64] needs-llvm-components: mips\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "3ebd5b4b89681252dd4bc3715a03a55b408e7d02", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: nvptx\n \n-#![feature(no_core, lang_items, rustc_attrs)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "b8859c07e164fe03a38ba7654802920bf488f6bc", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -6,7 +6,7 @@\n //[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n //[powerpc64] needs-llvm-components: powerpc\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "0f9f61bd6d916a85d4bd7c5aa908574949e2aaa1", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -6,7 +6,7 @@\n //[riscv32] needs-llvm-components: riscv\n // compile-flags: -C target-feature=+d\n \n-#![feature(no_core, lang_items, rustc_attrs)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_sym)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register)]"}, {"sha": "6a12902a0461f711d76f08bdfb70428b37c53c95", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n //[s390x] compile-flags: --target s390x-unknown-linux-gnu\n //[s390x] needs-llvm-components: systemz\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym, asm_experimental_arch)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "3aa128c46ac01f8e6ef8e824a0f5fd66ff88674b", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // compile-flags: --crate-type cdylib\n // needs-llvm-components: webassembly\n \n-#![feature(no_core, lang_items, rustc_attrs)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_sym, asm_experimental_arch)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "e871535cfdeef75a79da05884a06faa1b4c911cd", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -7,7 +7,7 @@\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n // compile-flags: -C target-feature=+avx512bw\n \n-#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd, asm_sym)]\n #![crate_type = \"rlib\"]\n #![no_core]\n #![allow(asm_sub_register, non_camel_case_types)]"}, {"sha": "10b20ba6beb0a614cdb53a13ceed46fc8fa97978", "filename": "src/test/codegen/asm-powerpc-clobbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -7,7 +7,7 @@\n //[powerpc64le] needs-llvm-components: powerpc\n \n #![crate_type = \"rlib\"]\n-#![feature(no_core, rustc_attrs, lang_items)]\n+#![feature(no_core, rustc_attrs, lang_items, asm_experimental_arch)]\n #![no_core]\n \n #[lang = \"sized\"]"}, {"sha": "4d7a7fd31feca7b5dacb21236ce712ffdbc20c6b", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,7 +1,7 @@\n // only-aarch64\n // compile-flags: -C target-feature=+fp\n \n-#![feature(asm)]\n+#![feature(asm, asm_const, asm_sym)]\n \n fn main() {\n     let mut foo = 0;"}, {"sha": "49fe48600c25c4948df632d25a2a02d82cb07338", "filename": "src/test/ui/asm/aarch64/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n fn const_generic<const X: usize>() -> usize {\n     unsafe {"}, {"sha": "e19c5cd13d35aa545ab0565cff43989a681806d9", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n fn main() {\n     let mut foo = 0;"}, {"sha": "b0dd143a0a1b6de603dae63e6dfc7e7c8422a6dc", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -2,7 +2,7 @@\n // only-linux\n // run-pass\n \n-#![feature(asm, thread_local)]\n+#![feature(asm, thread_local, asm_sym)]\n \n extern \"C\" fn f1() -> i32 {\n     111\n@@ -75,5 +75,7 @@ fn main() {\n     std::thread::spawn(|| {\n         assert_eq!(static_addr!(S1), &S1 as *const u32);\n         assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n-    }).join().unwrap();\n+    })\n+    .join()\n+    .unwrap();\n }"}, {"sha": "e1e8a91dda6033a8087682b4d5b2c5a65d730210", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,6 +1,6 @@\n // only-aarch64\n \n-#![feature(asm, repr_simd, never_type)]\n+#![feature(asm, repr_simd, never_type, asm_sym)]\n \n #[repr(simd)]\n #[derive(Clone, Copy)]"}, {"sha": "fc1831a520a0cbc0b702c7756cf5321d29231d75", "filename": "src/test/ui/asm/aarch64/type-check-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,13 +1,13 @@\n // only-aarch64\n // compile-flags: -C target-feature=+neon\n \n-#![feature(asm, global_asm, repr_simd, stdsimd)]\n+#![feature(asm, global_asm, repr_simd, stdsimd, asm_const)]\n \n use std::arch::aarch64::float64x2_t;\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct Simd256bit(f64, f64,f64, f64);\n+struct Simd256bit(f64, f64, f64, f64);\n \n fn main() {\n     let f64x2: float64x2_t = unsafe { std::mem::transmute(0i128) };\n@@ -42,7 +42,6 @@ fn main() {\n         asm!(\"{:b}\", in(vreg) 0u64);\n         asm!(\"{:d}\", in(vreg_low16) f64x2);\n \n-\n         // Template modifier suggestions for sub-registers\n \n         asm!(\"{}\", in(reg) 0u8);"}, {"sha": "ed9d3147b9ffaa52358a1fb85bd240bcb3a6e10d", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,5 +1,5 @@\n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:48:15\n+  --> $DIR/type-check-3.rs:47:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u8);\n    |               ^^           --- for this argument\n@@ -9,7 +9,7 @@ LL |         asm!(\"{}\", in(reg) 0u8);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:50:15\n+  --> $DIR/type-check-3.rs:49:15\n    |\n LL |         asm!(\"{}\", in(reg) 0u16);\n    |               ^^           ---- for this argument\n@@ -18,7 +18,7 @@ LL |         asm!(\"{}\", in(reg) 0u16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:52:15\n+  --> $DIR/type-check-3.rs:51:15\n    |\n LL |         asm!(\"{}\", in(reg) 0i32);\n    |               ^^           ---- for this argument\n@@ -27,7 +27,7 @@ LL |         asm!(\"{}\", in(reg) 0i32);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:54:15\n+  --> $DIR/type-check-3.rs:53:15\n    |\n LL |         asm!(\"{}\", in(reg) 0f32);\n    |               ^^           ---- for this argument\n@@ -36,7 +36,7 @@ LL |         asm!(\"{}\", in(reg) 0f32);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:57:15\n+  --> $DIR/type-check-3.rs:56:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0i16);\n    |               ^^            ---- for this argument\n@@ -45,7 +45,7 @@ LL |         asm!(\"{}\", in(vreg) 0i16);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:59:15\n+  --> $DIR/type-check-3.rs:58:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f32);\n    |               ^^            ---- for this argument\n@@ -54,7 +54,7 @@ LL |         asm!(\"{}\", in(vreg) 0f32);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:61:15\n+  --> $DIR/type-check-3.rs:60:15\n    |\n LL |         asm!(\"{}\", in(vreg) 0f64);\n    |               ^^            ---- for this argument\n@@ -63,7 +63,7 @@ LL |         asm!(\"{}\", in(vreg) 0f64);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:63:15\n+  --> $DIR/type-check-3.rs:62:15\n    |\n LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    |               ^^                  ---- for this argument\n@@ -72,7 +72,7 @@ LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n    = help: or use the `v` modifier to keep the default formatting of `v0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:66:15\n+  --> $DIR/type-check-3.rs:65:15\n    |\n LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    |               ^^^ ^^^           ---- for this argument\n@@ -81,7 +81,7 @@ LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n warning: formatting may not be suitable for sub-register argument\n-  --> $DIR/type-check-3.rs:68:15\n+  --> $DIR/type-check-3.rs:67:15\n    |\n LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    |               ^^^                 ---- for this argument\n@@ -90,31 +90,31 @@ LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n    = help: or use the `x` modifier to keep the default formatting of `x0`\n \n error: type `i128` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:73:28\n+  --> $DIR/type-check-3.rs:72:28\n    |\n LL |         asm!(\"{}\", in(reg) 0i128);\n    |                            ^^^^^\n    |\n    = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n \n error: type `float64x2_t` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:75:28\n+  --> $DIR/type-check-3.rs:74:28\n    |\n LL |         asm!(\"{}\", in(reg) f64x2);\n    |                            ^^^^^\n    |\n    = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n \n error: type `Simd256bit` cannot be used with this register class\n-  --> $DIR/type-check-3.rs:77:29\n+  --> $DIR/type-check-3.rs:76:29\n    |\n LL |         asm!(\"{}\", in(vreg) f64x4);\n    |                             ^^^^^\n    |\n    = note: register class `vreg` supports these types: i8, i16, i32, i64, f32, f64, i8x8, i16x4, i32x2, i64x1, f32x2, f64x1, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:88:33\n+  --> $DIR/type-check-3.rs:87:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n    |                                 ^^^^    ^^^^^^^ type `f32`\n@@ -124,7 +124,7 @@ LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:90:33\n+  --> $DIR/type-check-3.rs:89:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n    |                                 ^^^^    ^^^^^^^ type `*mut u8`\n@@ -134,7 +134,7 @@ LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error: incompatible types for asm inout argument\n-  --> $DIR/type-check-3.rs:92:33\n+  --> $DIR/type-check-3.rs:91:33\n    |\n LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    |                                 ^^^^    ^^^^^^^ type `u32`\n@@ -144,23 +144,23 @@ LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n    = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:108:25\n+  --> $DIR/type-check-3.rs:107:25\n    |\n LL | global_asm!(\"{}\", const S);\n    |                         ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:111:35\n+  --> $DIR/type-check-3.rs:110:35\n    |\n LL | global_asm!(\"{}\", const const_foo(S));\n    |                                   ^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constants cannot refer to statics\n-  --> $DIR/type-check-3.rs:114:35\n+  --> $DIR/type-check-3.rs:113:35\n    |\n LL | global_asm!(\"{}\", const const_bar(S));\n    |                                   ^"}, {"sha": "b062c45e6ea34947b37ab09c98d49f23f6a3eec2", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -10,7 +10,7 @@\n // [aarch64_thirunsafeck] needs-llvm-components: aarch64\n // [aarch64_mirunsafeck] needs-llvm-components: aarch64\n \n-#![feature(no_core, lang_items, rustc_attrs)]\n+#![feature(no_core, lang_items, rustc_attrs, asm_const)]\n #![no_core]\n \n #[rustc_builtin_macro]"}, {"sha": "7154ce26efcf5e3833dec4a5ec96e69fdaa597e8", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -7,11 +7,15 @@\n #![feature(llvm_asm)]\n #![feature(naked_functions)]\n #![feature(or_patterns)]\n+#![feature(asm_const, asm_sym)]\n #![crate_type = \"lib\"]\n #![allow(deprecated)] // llvm_asm!\n \n #[repr(C)]\n-pub struct P { x: u8, y: u16 }\n+pub struct P {\n+    x: u8,\n+    y: u16,\n+}\n \n #[naked]\n pub unsafe extern \"C\" fn patterns(\n@@ -143,21 +147,27 @@ pub unsafe fn default_abi() {\n }\n \n #[naked]\n-pub unsafe extern \"Rust\" fn rust_abi() {\n+pub unsafe fn rust_abi() {\n     //~^ WARN Rust ABI is unsupported in naked functions\n     asm!(\"\", options(noreturn));\n }\n \n #[naked]\n pub extern \"C\" fn valid_a<T>() -> T {\n-    unsafe { asm!(\"\", options(noreturn)); }\n+    unsafe {\n+        asm!(\"\", options(noreturn));\n+    }\n }\n \n #[naked]\n pub extern \"C\" fn valid_b() {\n-    unsafe { { {\n-        asm!(\"\", options(noreturn)); ; ; ;\n-    } ; }  ; }\n+    unsafe {\n+        {\n+            {\n+                asm!(\"\", options(noreturn));\n+            };\n+        };\n+    }\n }\n \n #[naked]"}, {"sha": "e4ddb97ca27467393caa956ad8af2ab87031ea7b", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:131:14\n+  --> $DIR/naked-functions.rs:135:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:18:5\n+  --> $DIR/naked-functions.rs:22:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:20:5\n+  --> $DIR/naked-functions.rs:24:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:22:6\n+  --> $DIR/naked-functions.rs:26:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:24:5\n+  --> $DIR/naked-functions.rs:28:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:34:5\n+  --> $DIR/naked-functions.rs:38:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:31:1\n+  --> $DIR/naked-functions.rs:35:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -53,15 +53,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:40:31\n+  --> $DIR/naked-functions.rs:44:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:40:23\n+  --> $DIR/naked-functions.rs:44:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:47:1\n+  --> $DIR/naked-functions.rs:51:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -84,7 +84,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:67:10\n+  --> $DIR/naked-functions.rs:71:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |          out(reg) e,\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:64:5\n+  --> $DIR/naked-functions.rs:68:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -117,7 +117,7 @@ LL | |     );\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:54:1\n+  --> $DIR/naked-functions.rs:58:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -141,7 +141,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:80:1\n+  --> $DIR/naked-functions.rs:84:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n@@ -153,7 +153,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:89:5\n+  --> $DIR/naked-functions.rs:93:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:92:5\n+  --> $DIR/naked-functions.rs:96:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:95:5\n+  --> $DIR/naked-functions.rs:99:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -180,7 +180,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:86:1\n+  --> $DIR/naked-functions.rs:90:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -202,15 +202,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:106:11\n+  --> $DIR/naked-functions.rs:110:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:103:5\n+  --> $DIR/naked-functions.rs:107:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -225,7 +225,7 @@ LL | |     }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: the LLVM-style inline assembly is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:116:5\n+  --> $DIR/naked-functions.rs:120:5\n    |\n LL |     llvm_asm!(\"\");\n    |     ^^^^^^^^^^^^^\n@@ -236,7 +236,7 @@ LL |     llvm_asm!(\"\");\n    = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:113:1\n+  --> $DIR/naked-functions.rs:117:1\n    |\n LL | / unsafe extern \"C\" fn llvm() -> ! {\n LL | |\n@@ -252,7 +252,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:124:5\n+  --> $DIR/naked-functions.rs:128:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +261,7 @@ LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:131:5\n+  --> $DIR/naked-functions.rs:135:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:131:5\n+  --> $DIR/naked-functions.rs:135:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,21 +279,21 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:140:15\n+  --> $DIR/naked-functions.rs:144:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:146:29\n+  --> $DIR/naked-functions.rs:150:15\n    |\n-LL | pub unsafe extern \"Rust\" fn rust_abi() {\n-   |                             ^^^^^^^^\n+LL | pub unsafe fn rust_abi() {\n+   |               ^^^^^^^^\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:180:1\n+  --> $DIR/naked-functions.rs:190:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -302,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:188:1\n+  --> $DIR/naked-functions.rs:198:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -311,7 +311,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:196:1\n+  --> $DIR/naked-functions.rs:206:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:204:1\n+  --> $DIR/naked-functions.rs:214:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -329,7 +329,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:207:1\n+  --> $DIR/naked-functions.rs:217:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -338,7 +338,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:210:1\n+  --> $DIR/naked-functions.rs:220:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "c87188e46a2bbedd92dcea45d37a764f86f14ba6", "filename": "src/test/ui/asm/named-asm-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -11,7 +11,7 @@\n // which causes less readable LLVM errors and in the worst cases causes ICEs\n // or segfaults based on system dependent behavior and codegen flags.\n \n-#![feature(asm, global_asm, naked_functions)]\n+#![feature(asm, global_asm, naked_functions, asm_const)]\n \n #[no_mangle]\n pub static FOO: usize = 42;"}, {"sha": "1e463107b18bc4471f86e29aabe0ffbc360198f2", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n fn main() {\n     unsafe {"}, {"sha": "ba4e95db46a2da80e97978aebe43ccf115f132a1", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx2\n \n-#![feature(asm)]\n+#![feature(asm, asm_const, asm_sym)]\n \n fn main() {\n     let mut foo = 0;"}, {"sha": "c1e4cdbb928f4ce392e6328fcd1e6bda6bbb3d0c", "filename": "src/test/ui/asm/x86_64/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n fn const_generic<const X: usize>() -> usize {\n     unsafe {"}, {"sha": "e7f3804c5886c24a0896b0e61fbd4381870387fa", "filename": "src/test/ui/asm/x86_64/parse-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n fn main() {\n     let mut foo = 0;"}, {"sha": "958dbbdd37646acef7ce8906760ef74f7641b7f8", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -3,7 +3,7 @@\n // only-linux\n // run-pass\n \n-#![feature(asm, thread_local)]\n+#![feature(asm, thread_local, asm_sym)]\n \n extern \"C\" fn f1() -> i32 {\n     111\n@@ -76,5 +76,7 @@ fn main() {\n     std::thread::spawn(|| {\n         assert_eq!(static_addr!(S1), &S1 as *const u32);\n         assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n-    }).join().unwrap();\n+    })\n+    .join()\n+    .unwrap();\n }"}, {"sha": "94aadcf09f423466969d022b754e209d613215ab", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,6 +1,6 @@\n // only-x86_64\n \n-#![feature(asm, repr_simd, never_type)]\n+#![feature(asm, repr_simd, never_type, asm_sym)]\n \n #[repr(simd)]\n struct SimdNonCopy(f32, f32, f32, f32);"}, {"sha": "83674cf8204d677f9544166fd938ddbdbc22a21e", "filename": "src/test/ui/asm/x86_64/type-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -1,7 +1,7 @@\n // only-x86_64\n // compile-flags: -C target-feature=+avx512f\n \n-#![feature(asm, global_asm)]\n+#![feature(asm, global_asm, asm_const)]\n \n use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n "}, {"sha": "c152b54c6697ba0e99e2058338111cb375d0ee06", "filename": "src/test/ui/feature-gates/feature-gate-asm_const.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,10 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"mov eax, {}\", const 123);\n+        //~^ ERROR const operands for inline assembly are unstable\n+    }\n+}"}, {"sha": "2851a9b0ae6a4cc8573d140610c632b3a79a2643", "filename": "src/test/ui/feature-gates/feature-gate-asm_const.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: const operands for inline assembly are unstable\n+  --> $DIR/feature-gate-asm_const.rs:7:29\n+   |\n+LL |         asm!(\"mov eax, {}\", const 123);\n+   |                             ^^^^^^^^^\n+   |\n+   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = help: add `#![feature(asm_const)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "53e2a4d132c8b284adf5a8f73a5cc64250de2ea7", "filename": "src/test/ui/feature-gates/feature-gate-asm_experimental_arch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: --target mips-unknown-linux-gnu\n+// needs-llvm-components: mips\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+unsafe fn main() {\n+    asm!(\"\");\n+    //~^ ERROR inline assembly is not stable yet on this architecture\n+}"}, {"sha": "1b4188ae1adb868c5f8114b110e69c622d913c68", "filename": "src/test/ui/feature-gates/feature-gate-asm_experimental_arch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_experimental_arch.stderr?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: inline assembly is not stable yet on this architecture\n+  --> $DIR/feature-gate-asm_experimental_arch.rs:19:5\n+   |\n+LL |     asm!(\"\");\n+   |     ^^^^^^^^\n+   |\n+   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = help: add `#![feature(asm_experimental_arch)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d89c7dd0ef408534ff0e4509048f6cadb6c61824", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,10 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"mov eax, {}\", sym main);\n+        //~^ ERROR sym operands for inline assembly are unstable\n+    }\n+}"}, {"sha": "99b61b829fbc846d13e7f2ef798c2a037a97d7e9", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb32c00216efb74d2101c9c7896f0b5c5c45fdb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr?ref=eb32c00216efb74d2101c9c7896f0b5c5c45fdb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: sym operands for inline assembly are unstable\n+  --> $DIR/feature-gate-asm_sym.rs:7:29\n+   |\n+LL |         asm!(\"mov eax, {}\", sym main);\n+   |                             ^^^^^^^^\n+   |\n+   = note: see issue #72016 <https://github.com/rust-lang/rust/issues/72016> for more information\n+   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}