{"sha": "e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyOGFlOGI0YTMzNDg3YmZhZmQ0ZTRiYWQyYzliYzgyZjMyYWE1NGE=", "commit": {"author": {"name": "Matthew Pomes", "email": "the10thwiz@gmail.com", "date": "2019-10-04T02:24:33Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-04T02:24:33Z"}, "message": "Init Logger for unit tests (#3829)\n\nAdd `init_log()` function which attempts to init logger, and\r\nignores failure. The function is called at the beginning of\r\nevery test, and will fail if the logger is already initialized.\r\nThe logger must be initialized in every test, becuase cargo runs\r\nthe tests in parallel, with no garentees about the order and time\r\neach starts.", "tree": {"sha": "c10bf7510287056e2a67fbba419d21211149be16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c10bf7510287056e2a67fbba419d21211149be16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "html_url": "https://github.com/rust-lang/rust/commit/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a/comments", "author": {"login": "the10thWiz", "id": 16281943, "node_id": "MDQ6VXNlcjE2MjgxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/16281943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the10thWiz", "html_url": "https://github.com/the10thWiz", "followers_url": "https://api.github.com/users/the10thWiz/followers", "following_url": "https://api.github.com/users/the10thWiz/following{/other_user}", "gists_url": "https://api.github.com/users/the10thWiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/the10thWiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the10thWiz/subscriptions", "organizations_url": "https://api.github.com/users/the10thWiz/orgs", "repos_url": "https://api.github.com/users/the10thWiz/repos", "events_url": "https://api.github.com/users/the10thWiz/events{/privacy}", "received_events_url": "https://api.github.com/users/the10thWiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd89363913b2a35110077fed113aaa82b741079", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd89363913b2a35110077fed113aaa82b741079", "html_url": "https://github.com/rust-lang/rust/commit/dbd89363913b2a35110077fed113aaa82b741079"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "ef7dd0ddcd123b6c2abbbff3e5d4afd7e1036f80", "filename": "src/test/configuration_snippet.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a/src%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a/src%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fconfiguration_snippet.rs?ref=e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "patch": "@@ -247,6 +247,7 @@ impl ConfigCodeBlock {\n \n #[test]\n fn configuration_snippet_tests() {\n+    super::init_log();\n     let blocks = get_code_blocks();\n     let failures = blocks\n         .iter()"}, {"sha": "8931f62fa2353e706d64e207b9a75759bd5ff5d4", "filename": "src/test/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=e28ae8b4a33487bfafd4e4bad2c9bc82f32aa54a", "patch": "@@ -40,6 +40,10 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"cfg_mod/wasm32.rs\",\n ];\n \n+fn init_log() {\n+    let _ = env_logger::builder().is_test(true).try_init();\n+}\n+\n struct TestSetting {\n     /// The size of the stack of the thread that run tests.\n     stack_size: usize,\n@@ -137,6 +141,7 @@ fn verify_config_used(path: &Path, config_name: &str) {\n \n #[test]\n fn verify_config_test_names() {\n+    init_log();\n     for path in &[\n         Path::new(\"tests/source/configs\"),\n         Path::new(\"tests/target/configs\"),\n@@ -169,6 +174,7 @@ fn write_message(msg: &str) {\n // exactly.\n #[test]\n fn system_tests() {\n+    init_log();\n     run_test_with(&TestSetting::default(), || {\n         // Get all files in the tests/source directory.\n         let files = get_test_files(Path::new(\"tests/source\"), true);\n@@ -189,6 +195,7 @@ fn system_tests() {\n // The only difference is the coverage mode.\n #[test]\n fn coverage_tests() {\n+    init_log();\n     let files = get_test_files(Path::new(\"tests/coverage/source\"), true);\n     let (_reports, count, fails) = check_files(files, &None);\n \n@@ -198,20 +205,23 @@ fn coverage_tests() {\n \n #[test]\n fn checkstyle_test() {\n+    init_log();\n     let filename = \"tests/writemode/source/fn-single-line.rs\";\n     let expected_filename = \"tests/writemode/target/checkstyle.xml\";\n     assert_output(Path::new(filename), Path::new(expected_filename));\n }\n \n #[test]\n fn json_test() {\n+    init_log();\n     let filename = \"tests/writemode/source/json.rs\";\n     let expected_filename = \"tests/writemode/target/output.json\";\n     assert_output(Path::new(filename), Path::new(expected_filename));\n }\n \n #[test]\n fn modified_test() {\n+    init_log();\n     use std::io::BufRead;\n \n     // Test \"modified\" output\n@@ -297,6 +307,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n // rustfmt.\n #[test]\n fn idempotence_tests() {\n+    init_log();\n     run_test_with(&TestSetting::default(), || {\n         // these tests require nightly\n         if !is_nightly_channel!() {\n@@ -321,6 +332,7 @@ fn idempotence_tests() {\n // no warnings are emitted.\n #[test]\n fn self_tests() {\n+    init_log();\n     // Issue-3443: these tests require nightly\n     if !is_nightly_channel!() {\n         return;\n@@ -359,6 +371,7 @@ fn self_tests() {\n \n #[test]\n fn stdin_formatting_smoke_test() {\n+    init_log();\n     let input = Input::Text(\"fn main () {}\".to_owned());\n     let mut config = Config::default();\n     config.set().emit_mode(EmitMode::Stdout);\n@@ -377,6 +390,7 @@ fn stdin_formatting_smoke_test() {\n \n #[test]\n fn stdin_parser_panic_caught() {\n+    init_log();\n     // See issue #3239.\n     for text in [\"{\", \"}\"].iter().cloned().map(String::from) {\n         let mut buf = vec![];\n@@ -391,6 +405,7 @@ fn stdin_parser_panic_caught() {\n /// when embedding Rustfmt (e.g. inside RLS).\n #[test]\n fn stdin_works_with_modified_lines() {\n+    init_log();\n     let input = \"\\nfn\\n some( )\\n{\\n}\\nfn main () {}\\n\";\n     let output = \"1 6 2\\nfn some() {}\\nfn main() {}\\n\";\n \n@@ -413,6 +428,7 @@ fn stdin_works_with_modified_lines() {\n \n #[test]\n fn stdin_disable_all_formatting_test() {\n+    init_log();\n     match option_env!(\"CFG_RELEASE_CHANNEL\") {\n         None | Some(\"nightly\") => {}\n         // These tests require nightly.\n@@ -441,6 +457,7 @@ fn stdin_disable_all_formatting_test() {\n \n #[test]\n fn format_lines_errors_are_reported() {\n+    init_log();\n     let long_identifier = String::from_utf8(vec![b'a'; 239]).unwrap();\n     let input = Input::Text(format!(\"fn {}() {{}}\", long_identifier));\n     let mut config = Config::default();\n@@ -452,6 +469,7 @@ fn format_lines_errors_are_reported() {\n \n #[test]\n fn format_lines_errors_are_reported_with_tabs() {\n+    init_log();\n     let long_identifier = String::from_utf8(vec![b'a'; 97]).unwrap();\n     let input = Input::Text(format!(\"fn a() {{\\n\\t{}\\n}}\", long_identifier));\n     let mut config = Config::default();\n@@ -719,6 +737,7 @@ fn get_target(file_name: &Path, target: Option<&str>) -> PathBuf {\n \n #[test]\n fn rustfmt_diff_make_diff_tests() {\n+    init_log();\n     let diff = make_diff(\"a\\nb\\nc\\nd\", \"a\\ne\\nc\\nd\", 3);\n     assert_eq!(\n         diff,\n@@ -738,6 +757,7 @@ fn rustfmt_diff_make_diff_tests() {\n \n #[test]\n fn rustfmt_diff_no_diff_test() {\n+    init_log();\n     let diff = make_diff(\"a\\nb\\nc\\nd\", \"a\\nb\\nc\\nd\", 3);\n     assert_eq!(diff, vec![]);\n }\n@@ -772,6 +792,7 @@ impl<'a> Iterator for CharsIgnoreNewlineRepr<'a> {\n \n #[test]\n fn string_eq_ignore_newline_repr_test() {\n+    init_log();\n     assert!(string_eq_ignore_newline_repr(\"\", \"\"));\n     assert!(!string_eq_ignore_newline_repr(\"\", \"abc\"));\n     assert!(!string_eq_ignore_newline_repr(\"abc\", \"\"));\n@@ -833,6 +854,7 @@ fn rustfmt() -> PathBuf {\n \n #[test]\n fn verify_check_works() {\n+    init_log();\n     let temp_file = make_temp_file(\"temp_check.rs\");\n \n     Command::new(rustfmt().to_str().unwrap())"}]}