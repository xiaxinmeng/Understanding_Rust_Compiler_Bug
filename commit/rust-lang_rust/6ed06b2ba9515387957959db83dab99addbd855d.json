{"sha": "6ed06b2ba9515387957959db83dab99addbd855d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZDA2YjJiYTk1MTUzODc5NTc5NTlkYjgzZGFiOTlhZGRiZDg1NWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T20:49:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-31T18:29:15Z"}, "message": "Reduce verbosity of some type ascription errors\n\n* Deduplicate type ascription LHS errors\n* Remove duplicated `:` -> `::` suggestion from parse error\n* Tweak wording to be more accurate\n* Modify `current_type_ascription` to reduce span wrangling\n* remove now unnecessary match arm\n* Add run-rustfix to appropriate tests", "tree": {"sha": "36c989b465f5ea47ab01f4caea213c9b91821422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c989b465f5ea47ab01f4caea213c9b91821422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed06b2ba9515387957959db83dab99addbd855d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed06b2ba9515387957959db83dab99addbd855d", "html_url": "https://github.com/rust-lang/rust/commit/6ed06b2ba9515387957959db83dab99addbd855d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed06b2ba9515387957959db83dab99addbd855d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b09c37ddc240e25748e53d7a8f81f252def6dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b09c37ddc240e25748e53d7a8f81f252def6dee", "html_url": "https://github.com/rust-lang/rust/commit/6b09c37ddc240e25748e53d7a8f81f252def6dee"}], "stats": {"total": 393, "additions": 212, "deletions": 181}, "files": [{"sha": "5e9411327cabdd6d7dc3ea71cac17274008019c4", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -333,6 +333,7 @@ impl<'a> Parser<'a> {\n                         Applicability::MachineApplicable\n                     },\n                 );\n+                self.sess.type_ascription_path_suggestions.borrow_mut().insert(sp);\n             } else if op_pos.line != next_pos.line && maybe_expected_semicolon {\n                 err.span_suggestion(\n                     sp,"}, {"sha": "9650c0b2d11748e5e4cbd8cb9630eb50aeca6525", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -2241,8 +2241,15 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.resolve_expr(argument, None);\n                 }\n             }\n-            ExprKind::Type(ref type_expr, _) => {\n-                self.diagnostic_metadata.current_type_ascription.push(type_expr.span);\n+            ExprKind::Type(ref type_expr, ref ty) => {\n+                // `ParseSess::type_ascription_path_suggestions` keeps spans of colon tokens in\n+                // type ascription. Here we are trying to retrieve the span of the colon token as\n+                // well, but only if it's written without spaces `expr:Ty` and therefore confusable\n+                // with `expr::Ty`, only in this case it will match the span from\n+                // `type_ascription_path_suggestions`.\n+                self.diagnostic_metadata\n+                    .current_type_ascription\n+                    .push(type_expr.span.between(ty.span));\n                 visit::walk_expr(self, expr);\n                 self.diagnostic_metadata.current_type_ascription.pop();\n             }"}, {"sha": "ec6dbb070dfa8cdd1ae10fadfa884924a8b83ba6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 117, "deletions": 78, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Span};\n \n use log::debug;\n \n@@ -223,13 +223,31 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         if candidates.is_empty() && is_expected(Res::Def(DefKind::Enum, crate_def_id)) {\n             let enum_candidates =\n                 self.r.lookup_import_candidates(ident, ns, &self.parent_scope, is_enum_variant);\n-            let mut enum_candidates = enum_candidates\n-                .iter()\n-                .map(|suggestion| import_candidate_to_enum_paths(&suggestion))\n-                .collect::<Vec<_>>();\n-            enum_candidates.sort();\n \n             if !enum_candidates.is_empty() {\n+                if let (PathSource::Type, Some(span)) =\n+                    (source, self.diagnostic_metadata.current_type_ascription.last())\n+                {\n+                    if self\n+                        .r\n+                        .session\n+                        .parse_sess\n+                        .type_ascription_path_suggestions\n+                        .borrow()\n+                        .contains(span)\n+                    {\n+                        // Already reported this issue on the lhs of the type ascription.\n+                        err.delay_as_bug();\n+                        return (err, candidates);\n+                    }\n+                }\n+\n+                let mut enum_candidates = enum_candidates\n+                    .iter()\n+                    .map(|suggestion| import_candidate_to_enum_paths(&suggestion))\n+                    .collect::<Vec<_>>();\n+                enum_candidates.sort();\n+\n                 // Contextualize for E0412 \"cannot find type\", but don't belabor the point\n                 // (that it's a variant) for E0573 \"expected type, found variant\".\n                 let preamble = if res.is_none() {\n@@ -484,10 +502,21 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n             match source {\n                 PathSource::Expr(Some(\n                     parent @ Expr { kind: ExprKind::Field(..) | ExprKind::MethodCall(..), .. },\n-                )) => {\n-                    path_sep(err, &parent);\n-                }\n-                PathSource::Expr(None) if followed_by_brace => {\n+                )) if path_sep(err, &parent) => {}\n+                PathSource::Expr(\n+                    None\n+                    | Some(Expr {\n+                        kind:\n+                            ExprKind::Path(..)\n+                            | ExprKind::Binary(..)\n+                            | ExprKind::Unary(..)\n+                            | ExprKind::If(..)\n+                            | ExprKind::While(..)\n+                            | ExprKind::ForLoop(..)\n+                            | ExprKind::Match(..),\n+                        ..\n+                    }),\n+                ) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n                         err.multipart_suggestion(\n                             \"surround the struct literal with parentheses\",\n@@ -508,11 +537,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         );\n                     }\n                 }\n-                PathSource::Expr(\n-                    None | Some(Expr { kind: ExprKind::Call(..) | ExprKind::Path(..), .. }),\n-                )\n-                | PathSource::TupleStruct(_)\n-                | PathSource::Pat => {\n+                PathSource::Expr(_) | PathSource::TupleStruct(_) | PathSource::Pat => {\n                     let span = match &source {\n                         PathSource::Expr(Some(Expr {\n                             span, kind: ExprKind::Call(_, _), ..\n@@ -593,6 +618,24 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 Res::Def(DefKind::Enum, def_id),\n                 PathSource::TupleStruct(_) | PathSource::Expr(..),\n             ) => {\n+                if self\n+                    .diagnostic_metadata\n+                    .current_type_ascription\n+                    .last()\n+                    .map(|sp| {\n+                        self.r\n+                            .session\n+                            .parse_sess\n+                            .type_ascription_path_suggestions\n+                            .borrow()\n+                            .contains(&sp)\n+                    })\n+                    .unwrap_or(false)\n+                {\n+                    err.delay_as_bug();\n+                    // We already suggested changing `:` into `::` during parsing.\n+                    return false;\n+                }\n                 if let Some(variants) = self.collect_enum_variants(def_id) {\n                     if !variants.is_empty() {\n                         let msg = if variants.len() == 1 {\n@@ -609,7 +652,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         );\n                     }\n                 } else {\n-                    err.note(\"did you mean to use one of the enum's variants?\");\n+                    err.note(\"you might have meant to use one of the enum's variants\");\n                 }\n             }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n@@ -829,77 +872,73 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n     fn type_ascription_suggestion(&self, err: &mut DiagnosticBuilder<'_>, base_span: Span) {\n         let sm = self.r.session.source_map();\n         let base_snippet = sm.span_to_snippet(base_span);\n-        if let Some(sp) = self.diagnostic_metadata.current_type_ascription.last() {\n-            let mut sp = *sp;\n-            loop {\n-                // Try to find the `:`; bail on first non-':' / non-whitespace.\n-                sp = sm.next_point(sp);\n-                if let Ok(snippet) = sm.span_to_snippet(sp.to(sm.next_point(sp))) {\n-                    let line_sp = sm.lookup_char_pos(sp.hi()).line;\n-                    let line_base_sp = sm.lookup_char_pos(base_span.lo()).line;\n-                    if snippet == \":\" {\n-                        let mut show_label = true;\n-                        if line_sp != line_base_sp {\n-                            err.span_suggestion_short(\n-                                sp,\n-                                \"did you mean to use `;` here instead?\",\n-                                \";\".to_string(),\n+        if let Some(&sp) = self.diagnostic_metadata.current_type_ascription.last() {\n+            if let Ok(snippet) = sm.span_to_snippet(sp) {\n+                let len = snippet.trim_end().len() as u32;\n+                if snippet.trim() == \":\" {\n+                    let colon_sp =\n+                        sp.with_lo(sp.lo() + BytePos(len - 1)).with_hi(sp.lo() + BytePos(len));\n+                    let mut show_label = true;\n+                    if sm.is_multiline(sp) {\n+                        err.span_suggestion_short(\n+                            colon_sp,\n+                            \"maybe you meant to write `;` here\",\n+                            \";\".to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    } else {\n+                        let after_colon_sp =\n+                            self.get_colon_suggestion_span(colon_sp.shrink_to_hi());\n+                        if snippet.len() == 1 {\n+                            // `foo:bar`\n+                            err.span_suggestion(\n+                                colon_sp,\n+                                \"maybe you meant to write a path separator here\",\n+                                \"::\".to_string(),\n                                 Applicability::MaybeIncorrect,\n                             );\n-                        } else {\n-                            let colon_sp = self.get_colon_suggestion_span(sp);\n-                            let after_colon_sp =\n-                                self.get_colon_suggestion_span(colon_sp.shrink_to_hi());\n-                            if !sm\n-                                .span_to_snippet(after_colon_sp)\n-                                .map(|s| s == \" \")\n-                                .unwrap_or(false)\n+                            show_label = false;\n+                            if !self\n+                                .r\n+                                .session\n+                                .parse_sess\n+                                .type_ascription_path_suggestions\n+                                .borrow_mut()\n+                                .insert(colon_sp)\n                             {\n-                                err.span_suggestion(\n-                                    colon_sp,\n-                                    \"maybe you meant to write a path separator here\",\n-                                    \"::\".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                show_label = false;\n+                                err.delay_as_bug();\n                             }\n-                            if let Ok(base_snippet) = base_snippet {\n-                                let mut sp = after_colon_sp;\n-                                for _ in 0..100 {\n-                                    // Try to find an assignment\n-                                    sp = sm.next_point(sp);\n-                                    let snippet = sm.span_to_snippet(sp.to(sm.next_point(sp)));\n-                                    match snippet {\n-                                        Ok(ref x) if x.as_str() == \"=\" => {\n-                                            err.span_suggestion(\n-                                                base_span,\n-                                                \"maybe you meant to write an assignment here\",\n-                                                format!(\"let {}\", base_snippet),\n-                                                Applicability::MaybeIncorrect,\n-                                            );\n-                                            show_label = false;\n-                                            break;\n-                                        }\n-                                        Ok(ref x) if x.as_str() == \"\\n\" => break,\n-                                        Err(_) => break,\n-                                        Ok(_) => {}\n+                        }\n+                        if let Ok(base_snippet) = base_snippet {\n+                            let mut sp = after_colon_sp;\n+                            for _ in 0..100 {\n+                                // Try to find an assignment\n+                                sp = sm.next_point(sp);\n+                                let snippet = sm.span_to_snippet(sp.to(sm.next_point(sp)));\n+                                match snippet {\n+                                    Ok(ref x) if x.as_str() == \"=\" => {\n+                                        err.span_suggestion(\n+                                            base_span,\n+                                            \"maybe you meant to write an assignment here\",\n+                                            format!(\"let {}\", base_snippet),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                        show_label = false;\n+                                        break;\n                                     }\n+                                    Ok(ref x) if x.as_str() == \"\\n\" => break,\n+                                    Err(_) => break,\n+                                    Ok(_) => {}\n                                 }\n                             }\n                         }\n-                        if show_label {\n-                            err.span_label(\n-                                base_span,\n-                                \"expecting a type here because of type ascription\",\n-                            );\n-                        }\n-                        break;\n-                    } else if !snippet.trim().is_empty() {\n-                        debug!(\"tried to find type ascription `:` token, couldn't find it\");\n-                        break;\n                     }\n-                } else {\n-                    break;\n+                    if show_label {\n+                        err.span_label(\n+                            base_span,\n+                            \"expecting a type here because of type ascription\",\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "1b232d7b14dcee8b59af2c33e4ff20f6856a2cd8", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -138,6 +138,8 @@ pub struct ParseSess {\n     pub reached_eof: Lock<bool>,\n     /// Environment variables accessed during the build and their values when they exist.\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n+    /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n+    pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n }\n \n impl ParseSess {\n@@ -164,6 +166,7 @@ impl ParseSess {\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),\n             env_depinfo: Default::default(),\n+            type_ascription_path_suggestions: Default::default(),\n         }\n     }\n "}, {"sha": "6e9d74344bc832d82713f2e32aaa7ec1bbf17321", "filename": "src/test/ui/suggestions/issue-61226.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+struct X {}\n+fn main() {\n+    let _ = vec![X {}]; //\u2026\n+    //~^ ERROR expected value, found struct `X`\n+}"}, {"sha": "695fe73418a4660bab605d597137130d9279843e", "filename": "src/test/ui/suggestions/issue-61226.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n struct X {}\n fn main() {\n-    vec![X]; //\u2026\n+    let _ = vec![X]; //\u2026\n     //~^ ERROR expected value, found struct `X`\n }"}, {"sha": "cda962a904530277108a4cae7f45bbe0d1cad383", "filename": "src/test/ui/suggestions/issue-61226.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,11 +1,11 @@\n error[E0423]: expected value, found struct `X`\n-  --> $DIR/issue-61226.rs:3:10\n+  --> $DIR/issue-61226.rs:4:18\n    |\n LL | struct X {}\n    | ----------- `X` defined here\n LL | fn main() {\n-LL |     vec![X]; //\u2026\n-   |          ^ help: use struct literal syntax instead: `X {}`\n+LL |     let _ = vec![X]; //\u2026\n+   |                  ^ help: use struct literal syntax instead: `X {}`\n \n error: aborting due to previous error\n "}, {"sha": "56b740b0d5ca0ff27d323d3ff0d6473ef87746cf", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = Box::new(\"foo\".to_string());\n+    //~^ ERROR expected type, found\n+}"}, {"sha": "a603e09e7e8390b8322079d9628d85b1f83b6bf4", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,4 +1,5 @@\n+// run-rustfix\n fn main() {\n-    Box:new(\"foo\".to_string())\n+    let _ = Box:new(\"foo\".to_string());\n     //~^ ERROR expected type, found\n }"}, {"sha": "83bc33f410ad0800d69b61c25ecd3729b36a84e1", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,10 +1,10 @@\n error: expected type, found `\"foo\"`\n-  --> $DIR/type-ascription-instead-of-method.rs:2:13\n+  --> $DIR/type-ascription-instead-of-method.rs:3:21\n    |\n-LL |     Box:new(\"foo\".to_string())\n-   |        -    ^^^^^ expected type\n-   |        |\n-   |        help: maybe write a path separator here: `::`\n+LL |     let _ = Box:new(\"foo\".to_string());\n+   |                -    ^^^^^ expected type\n+   |                |\n+   |                help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n "}, {"sha": "787fcc1208e1bd4a3cb490dbafab7db2b65bbdc0", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+fn main() -> Result<(), ()> {\n+    let _ = vec![Ok(2)].into_iter().collect::<Result<Vec<_>,_>>()?;\n+    //~^ ERROR expected `::`, found `(`\n+    Ok(())\n+}"}, {"sha": "934016b3b811f9e4b3510884ef88ac92788915fa", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n fn main() -> Result<(), ()> {\n-    vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+    let _ = vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n     //~^ ERROR expected `::`, found `(`\n     Ok(())\n }"}, {"sha": "970b220b7371220701bf39a0fc71e9d3975eded7", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,10 +1,10 @@\n error: expected `::`, found `(`\n-  --> $DIR/type-ascription-instead-of-path-2.rs:2:55\n+  --> $DIR/type-ascription-instead-of-path-2.rs:3:63\n    |\n-LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n-   |                                    -                  ^ expected `::`\n-   |                                    |\n-   |                                    help: maybe write a path separator here: `::`\n+LL |     let _ = vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n+   |                                            -                  ^ expected `::`\n+   |                                            |\n+   |                                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n "}, {"sha": "b3247e1287d9989e07d7d61f16c7fa2dae9cc6d4", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = Option::Some(\"\");\n+    //~^ ERROR expected type, found\n+}"}, {"sha": "6fd2c19541cdb9ad8331de76bc2cea5dc1da7c21", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n     let _ = Option:Some(\"\");\n     //~^ ERROR expected type, found"}, {"sha": "f59ba78d4d38a9c8bfdebaa5cbad952f66220a5a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,5 +1,5 @@\n error: expected type, found `\"\"`\n-  --> $DIR/type-ascription-instead-of-variant.rs:2:25\n+  --> $DIR/type-ascription-instead-of-variant.rs:3:25\n    |\n LL |     let _ = Option:Some(\"\");\n    |                   -     ^^ expected type"}, {"sha": "c4db747551e5202b21ada7a939385f407f4c4e9b", "filename": "src/test/ui/type/ascription/issue-47666.fixed", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,4 @@\n+// run-rustfix\n+fn main() {\n+    let _ = Option::Some(vec![0, 1]); //~ ERROR expected type, found\n+}"}, {"sha": "c67202e2157f024993993e2ea8fedfca9c6339fd", "filename": "src/test/ui/type/ascription/issue-47666.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,7 +1,4 @@\n+// run-rustfix\n fn main() {\n     let _ = Option:Some(vec![0, 1]); //~ ERROR expected type, found\n-    //~^ ERROR expected value, found enum `Option`\n-    //~| ERROR expected type, found variant `Some`\n }\n-\n-// This case isn't currently being handled gracefully due to the macro invocation."}, {"sha": "ba393ff1a208e2fd3f67d05f8915dd162f11d899", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,5 +1,5 @@\n error: expected type, found reserved keyword `box`\n-  --> $DIR/issue-47666.rs:2:25\n+  --> $DIR/issue-47666.rs:3:25\n    |\n LL |     let _ = Option:Some(vec![0, 1]);\n    |                   -     ^^^^^^^^^^\n@@ -12,35 +12,5 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0423]: expected value, found enum `Option`\n-  --> $DIR/issue-47666.rs:2:13\n-   |\n-LL |     let _ = Option:Some(vec![0, 1]);\n-   |             ^^^^^^\n-   |\n-help: try using one of the enum's variants\n-   |\n-LL |     let _ = std::option::Option::None:Some(vec![0, 1]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     let _ = std::option::Option::Some:Some(vec![0, 1]);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0573]: expected type, found variant `Some`\n-  --> $DIR/issue-47666.rs:2:20\n-   |\n-LL |     let _ = Option:Some(vec![0, 1]);\n-   |                    ^^^^^^^^^^^^^^^^ not a type\n-   |\n-help: try using the variant's enum\n-   |\n-LL |     let _ = Option:std::option::Option;\n-   |                    ^^^^^^^^^^^^^^^^^^^\n-help: maybe you meant to write a path separator here\n-   |\n-LL |     let _ = Option::Some(vec![0, 1]);\n-   |                   ^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0423, E0573.\n-For more information about an error, try `rustc --explain E0423`."}, {"sha": "181637b97bb6a2c82e83709f98787a9f09e3db6d", "filename": "src/test/ui/type/ascription/issue-54516.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+use std::collections::BTreeMap;\n+\n+fn main() {\n+    println!(\"{}\", std::mem::size_of::<BTreeMap<u32, u32>>());\n+    //~^ ERROR casts cannot be followed by a function call\n+}"}, {"sha": "f09ddd487d8954b24ac4a509636a6ad536f9e86a", "filename": "src/test/ui/type/ascription/issue-54516.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,8 +1,7 @@\n+// run-rustfix\n use std::collections::BTreeMap;\n \n fn main() {\n     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n     //~^ ERROR casts cannot be followed by a function call\n-    //~| ERROR expected value, found module `std::mem` [E0423]\n-    //~| ERROR cannot find type `size_of` in this scope [E0412]\n }"}, {"sha": "2c7ff6bdc48661b36ba2bf8afe3e89dccfba5813", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,5 +1,5 @@\n error: casts cannot be followed by a function call\n-  --> $DIR/issue-54516.rs:4:20\n+  --> $DIR/issue-54516.rs:5:20\n    |\n LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n    |                    ^^^^^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,23 +8,5 @@ LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n \n-error[E0423]: expected value, found module `std::mem`\n-  --> $DIR/issue-54516.rs:4:20\n-   |\n-LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n-   |                    ^^^^^^^^- help: maybe you meant to write a path separator here: `::`\n-   |                    |\n-   |                    not a value\n-\n-error[E0412]: cannot find type `size_of` in this scope\n-  --> $DIR/issue-54516.rs:4:29\n-   |\n-LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n-   |                            -^^^^^^^ not found in this scope\n-   |                            |\n-   |                            help: maybe you meant to write a path separator here: `::`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0412, E0423.\n-For more information about an error, try `rustc --explain E0412`."}, {"sha": "ac9f6a07031fc0b60616cc2cdfe8379430af6624", "filename": "src/test/ui/type/ascription/issue-60933.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _: usize = std::mem::size_of::<u32>();\n+    //~^ ERROR casts cannot be followed by a function call\n+}"}, {"sha": "cb093735efa581ea029ca81273a83e4839962b2d", "filename": "src/test/ui/type/ascription/issue-60933.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,6 +1,5 @@\n+// run-rustfix\n fn main() {\n-    let u: usize = std::mem:size_of::<u32>();\n+    let _: usize = std::mem:size_of::<u32>();\n     //~^ ERROR casts cannot be followed by a function call\n-    //~| ERROR expected value, found module `std::mem` [E0423]\n-    //~| ERROR cannot find type `size_of` in this scope [E0412]\n }"}, {"sha": "5c35de88e14d60348cc6fa455a2a174e932ab747", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,30 +1,12 @@\n error: casts cannot be followed by a function call\n-  --> $DIR/issue-60933.rs:2:20\n+  --> $DIR/issue-60933.rs:3:20\n    |\n-LL |     let u: usize = std::mem:size_of::<u32>();\n+LL |     let _: usize = std::mem:size_of::<u32>();\n    |                    ^^^^^^^^-^^^^^^^^^^^^^^\n    |                            |\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n \n-error[E0423]: expected value, found module `std::mem`\n-  --> $DIR/issue-60933.rs:2:20\n-   |\n-LL |     let u: usize = std::mem:size_of::<u32>();\n-   |                    ^^^^^^^^- help: maybe you meant to write a path separator here: `::`\n-   |                    |\n-   |                    not a value\n-\n-error[E0412]: cannot find type `size_of` in this scope\n-  --> $DIR/issue-60933.rs:2:29\n-   |\n-LL |     let u: usize = std::mem:size_of::<u32>();\n-   |                            -^^^^^^^ not found in this scope\n-   |                            |\n-   |                            help: maybe you meant to write a path separator here: `::`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0412, E0423.\n-For more information about an error, try `rustc --explain E0412`."}, {"sha": "6d96c4303c357f707e7883a9a028d95b25ed7be1", "filename": "src/test/ui/type/type-ascription-with-fn-call.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.fixed?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+#![feature(type_ascription)]\n+\n+fn main() {\n+    f()  ;\n+    f(); //~ ERROR expected type, found function\n+}\n+\n+fn f() {}"}, {"sha": "ed4f7c9041c3a7e1ce2e865f887c737297220214", "filename": "src/test/ui/type/type-ascription-with-fn-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.rs?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![feature(type_ascription)]\n \n fn main() {"}, {"sha": "5f74724b59e52ced1686a3707d9b732124157ed9", "filename": "src/test/ui/type/type-ascription-with-fn-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ed06b2ba9515387957959db83dab99addbd855d/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr?ref=6ed06b2ba9515387957959db83dab99addbd855d", "patch": "@@ -1,8 +1,8 @@\n error[E0573]: expected type, found function `f`\n-  --> $DIR/type-ascription-with-fn-call.rs:5:5\n+  --> $DIR/type-ascription-with-fn-call.rs:6:5\n    |\n LL |     f()  :\n-   |          - help: did you mean to use `;` here instead?\n+   |          - help: maybe you meant to write `;` here\n LL |     f();\n    |     ^^^\n    |     |"}]}