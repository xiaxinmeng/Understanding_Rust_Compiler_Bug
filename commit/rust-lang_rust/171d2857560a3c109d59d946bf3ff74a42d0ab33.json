{"sha": "171d2857560a3c109d59d946bf3ff74a42d0ab33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MWQyODU3NTYwYTNjMTA5ZDU5ZDk0NmJmM2ZmNzRhNDJkMGFiMzM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-30T21:01:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-30T21:04:03Z"}, "message": "Fix signature by adding parens when needed", "tree": {"sha": "4a1acce8c7a880e6051ddb536b53b4c4d32cd6a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1acce8c7a880e6051ddb536b53b4c4d32cd6a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171d2857560a3c109d59d946bf3ff74a42d0ab33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171d2857560a3c109d59d946bf3ff74a42d0ab33", "html_url": "https://github.com/rust-lang/rust/commit/171d2857560a3c109d59d946bf3ff74a42d0ab33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171d2857560a3c109d59d946bf3ff74a42d0ab33/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89d8d184490ecb3cf91f7b6bb7296d649f931ba", "html_url": "https://github.com/rust-lang/rust/commit/f89d8d184490ecb3cf91f7b6bb7296d649f931ba"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "19a863bdc62e18a97de939f3c6b108f06093c6ce", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171d2857560a3c109d59d946bf3ff74a42d0ab33/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=171d2857560a3c109d59d946bf3ff74a42d0ab33", "patch": "@@ -469,7 +469,8 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n /// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n /// rendering function with the necessary arguments for linking to a local path.\n fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n-                 print_all: bool, use_absolute: bool, is_not_debug: bool) -> fmt::Result {\n+                 print_all: bool, use_absolute: bool, is_not_debug: bool,\n+                 need_paren: bool) -> fmt::Result {\n     let empty = clean::PathSegment {\n                     name: String::new(),\n                     params: clean::PathParameters::Parenthesized {\n@@ -534,7 +535,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n             } else {\n                 format!(\"{}\", HRef::new(did, &last.name))\n             };\n-            write!(w, \"{}{}\", path, last.params)?;\n+            write!(w, \"{}{}{}\", if need_paren { \"(\" } else { \"\" }, path, last.params)?;\n         } else {\n             let path = if use_absolute {\n                 match href(did) {\n@@ -547,7 +548,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n             } else {\n                 format!(\"{:?}\", HRef::new(did, &last.name))\n             };\n-            write!(w, \"{}{}\", path, last.params)?;\n+            write!(w, \"{}{}{}\", if need_paren { \"(\" } else { \"\" }, path, last.params)?;\n         }\n     }\n     Ok(())\n@@ -599,13 +600,17 @@ fn primitive_link(f: &mut fmt::Formatter,\n \n /// Helper to render type parameters\n fn tybounds(w: &mut fmt::Formatter,\n-            typarams: &Option<Vec<clean::TyParamBound> >) -> fmt::Result {\n+            typarams: &Option<Vec<clean::TyParamBound>>,\n+            need_paren: bool) -> fmt::Result {\n     match *typarams {\n         Some(ref params) => {\n             for param in params {\n                 write!(w, \" + \")?;\n                 fmt::Display::fmt(param, w)?;\n             }\n+            if need_paren {\n+                write!(w, \")\")?;\n+            }\n             Ok(())\n         }\n         None => Ok(())\n@@ -639,15 +644,19 @@ impl<'a> fmt::Debug for HRef<'a> {\n }\n \n fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n-            is_not_debug: bool) -> fmt::Result {\n+            is_not_debug: bool, is_ref: bool) -> fmt::Result {\n     match *t {\n         clean::Generic(ref name) => {\n             f.write_str(name)\n         }\n         clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n             // Paths like T::Output and Self::Output should be rendered with all segments\n-            resolved_path(f, did, path, is_generic, use_absolute, is_not_debug)?;\n-            tybounds(f, typarams)\n+            let need_paren = match *typarams {\n+                Some(ref v) => !v.is_empty(),\n+                _ => false,\n+            } && is_ref;\n+            resolved_path(f, did, path, is_generic, use_absolute, is_not_debug, need_paren)?;\n+            tybounds(f, typarams, need_paren)\n         }\n         clean::Infer => write!(f, \"_\"),\n         clean::Primitive(prim) if is_not_debug => primitive_link(f, prim, prim.as_str()),\n@@ -788,14 +797,14 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                 _ => {\n                     if f.alternate() {\n                         write!(f, \"&{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute, is_not_debug)\n+                        fmt_type(&ty, f, use_absolute, is_not_debug, true)\n                     } else {\n                         if is_not_debug {\n                             write!(f, \"&amp;{}{}\", lt, m)?;\n                         } else {\n                             write!(f, \"&{}{}\", lt, m)?;\n                         }\n-                        fmt_type(&ty, f, use_absolute, is_not_debug)\n+                        fmt_type(&ty, f, use_absolute, is_not_debug, true)\n                     }\n                 }\n             }\n@@ -865,7 +874,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n                 //        look at).\n                 box clean::ResolvedPath { did, ref typarams, .. } => {\n                     let path = clean::Path::singleton(name.clone());\n-                    resolved_path(f, did, &path, true, use_absolute, is_not_debug)?;\n+                    resolved_path(f, did, &path, true, use_absolute, is_not_debug, false)?;\n \n                     // FIXME: `typarams` are not rendered, and this seems bad?\n                     drop(typarams);\n@@ -884,13 +893,13 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool,\n \n impl fmt::Display for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt_type(self, f, false, true)\n+        fmt_type(self, f, false, true, false)\n     }\n }\n \n impl fmt::Debug for clean::Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt_type(self, f, false, false)\n+        fmt_type(self, f, false, false, false)\n     }\n }\n \n@@ -924,7 +933,7 @@ fn fmt_impl(i: &clean::Impl,\n         write!(f, \" for \")?;\n     }\n \n-    fmt_type(&i.for_, f, use_absolute, true)?;\n+    fmt_type(&i.for_, f, use_absolute, true, false)?;\n \n     fmt::Display::fmt(&WhereClause { gens: &i.generics, indent: 0, end_newline: true }, f)?;\n     Ok(())\n@@ -1130,7 +1139,7 @@ impl fmt::Display for clean::Import {\n impl fmt::Display for clean::ImportSource {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.did {\n-            Some(did) => resolved_path(f, did, &self.path, true, false, true),\n+            Some(did) => resolved_path(f, did, &self.path, true, false, true, false),\n             _ => {\n                 for (i, seg) in self.path.segments.iter().enumerate() {\n                     if i > 0 {"}, {"sha": "792dc9c218d56dae8752678c32b5d097d0307724", "filename": "src/test/rustdoc/test-parens.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/171d2857560a3c109d59d946bf3ff74a42d0ab33/src%2Ftest%2Frustdoc%2Ftest-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171d2857560a3c109d59d946bf3ff74a42d0ab33/src%2Ftest%2Frustdoc%2Ftest-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest-parens.rs?ref=171d2857560a3c109d59d946bf3ff74a42d0ab33", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// @has - '//*[@class=\"rust fn\"]' \"_: &(ToString + 'static)\"\n+pub fn foo(_: &(ToString + 'static)) {}"}]}