{"sha": "4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjNiZDU1OGY2NGJhYzA5NjRmYzliM2UzNDJmZTIwYzMwZGVkNDA=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-01-19T14:10:34Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-27T08:24:16Z"}, "message": "Remove unused type_is_pod function", "tree": {"sha": "b0f99b4cb56284c646254c98dbd6e72961603608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f99b4cb56284c646254c98dbd6e72961603608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "html_url": "https://github.com/rust-lang/rust/commit/4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3bd558f64bac0964fc9b3e342fe20c30ded40/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a92c5ed58e676d6aa224681080f921b9e069a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a92c5ed58e676d6aa224681080f921b9e069a5", "html_url": "https://github.com/rust-lang/rust/commit/68a92c5ed58e676d6aa224681080f921b9e069a5"}], "stats": {"total": 84, "additions": 29, "deletions": 55}, "files": [{"sha": "a85d21f2ef7451529ea0b23b7805e9311f04b0fe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3bd558f64bac0964fc9b3e342fe20c30ded40/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3bd558f64bac0964fc9b3e342fe20c30ded40/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "patch": "@@ -2624,61 +2624,6 @@ pub fn type_is_machine(ty: t) -> bool {\n     }\n }\n \n-// Whether a type is Plain Old Data -- meaning it does not contain pointers\n-// that the cycle collector might care about.\n-pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n-    let mut result = true;\n-    match get(ty).sty {\n-      // Scalar types\n-      ty_nil | ty_bot | ty_bool | ty_char | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_ptr(_) | ty_bare_fn(_) => result = true,\n-      // Boxed types\n-      ty_box(_) | ty_uniq(_) | ty_closure(_) |\n-      ty_str(vstore_uniq) |\n-      ty_vec(_, vstore_uniq) |\n-      ty_trait(_, _, _, _, _) | ty_rptr(_,_) => result = false,\n-      // Structural types\n-      ty_enum(did, ref substs) => {\n-        let variants = enum_variants(cx, did);\n-        for variant in (*variants).iter() {\n-            // FIXME(pcwalton): This is an inefficient way to do this. Don't\n-            // synthesize a tuple!\n-            //\n-            // Perform any type parameter substitutions.\n-            let tup_ty = mk_tup(cx, variant.args.clone());\n-            let tup_ty = subst(cx, substs, tup_ty);\n-            if !type_is_pod(cx, tup_ty) { result = false; }\n-        }\n-      }\n-      ty_tup(ref elts) => {\n-        for elt in elts.iter() { if !type_is_pod(cx, *elt) { result = false; } }\n-      }\n-      ty_str(vstore_fixed(_)) => result = true,\n-      ty_vec(ref mt, vstore_fixed(_)) | ty_unboxed_vec(ref mt) => {\n-        result = type_is_pod(cx, mt.ty);\n-      }\n-      ty_param(_) => result = false,\n-      ty_struct(did, ref substs) => {\n-        let fields = lookup_struct_fields(cx, did);\n-        result = fields.iter().all(|f| {\n-            let fty = ty::lookup_item_type(cx, f.id);\n-            let sty = subst(cx, substs, fty.ty);\n-            type_is_pod(cx, sty)\n-        });\n-      }\n-\n-      ty_str(vstore_slice(..)) | ty_vec(_, vstore_slice(..)) => {\n-        result = false;\n-      }\n-\n-      ty_infer(..) | ty_self(..) | ty_err => {\n-        cx.sess.bug(\"non concrete type in type_is_pod\");\n-      }\n-    }\n-\n-    return result;\n-}\n-\n pub fn type_is_enum(ty: t) -> bool {\n     match get(ty).sty {\n       ty_enum(_, _) => return true,"}, {"sha": "1bd78d2b1a238ebca5c5b64ef3d122205c257604", "filename": "src/test/compile-fail/static-items-cant-move.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3bd558f64bac0964fc9b3e342fe20c30ded40/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3bd558f64bac0964fc9b3e342fe20c30ded40/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-items-cant-move.rs?ref=4cb3bd558f64bac0964fc9b3e342fe20c30ded40", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verifies that static items can't be moved\n+\n+use std::kinds::marker;\n+\n+struct Foo {\n+    foo: int,\n+    nopod: marker::NoPod\n+}\n+\n+static BAR: Foo = Foo{foo: 5, nopod: marker::NoPod};\n+\n+\n+fn test(f: Foo) {\n+    let _f = Foo{foo: 4, ..f};\n+}\n+\n+fn main() {\n+    test(BAR);\n+}"}]}