{"sha": "2faad3b699b7b80b08f4af7cfc67fff097256630", "node_id": "C_kwDOAAsO6NoAKDJmYWFkM2I2OTliN2I4MGIwOGY0YWY3Y2ZjNjdmZmYwOTcyNTY2MzA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-21T14:04:55Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-21T14:09:53Z"}, "message": "negative_impl should take a TyCtxt", "tree": {"sha": "26592c878c9c35b9cff3da1dbb730dc76a11d192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26592c878c9c35b9cff3da1dbb730dc76a11d192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2faad3b699b7b80b08f4af7cfc67fff097256630", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN7hrIACgkQgTGiTgx5\n7686mxAAspzREcGxhO4dssnLrV6TvZETLD0giqMoBA9wCSBJsAF2OJQDNmqGUZzs\nnFoHDE4uUV5J7Ntm3PEr/1daxXxZjf5WQXPtVmoPsEFIffYTNvT/uavSPX2CO10J\nRHtKSI6AVz4Ct6EuAH9hD2jWeNoyNyBY1sE6aczCo5Pz0w+GCoeJqPnvoq+PYHpX\n5Ew/al5qpgD3nDdjkmt5X+cWaPJWBUD8I1A4Y+d3t3T8IK1w5URtC2XsnEd4+lIs\nbtGTMEDj/cNfl3Y5BkSgON8jSmZql1G9rP8lcfEAQC/kCHMTvgd0dB/1KdRAbkg4\nomzuHIddlDL9GVJfNPfW5JVgd6zj3RYn9GiCvp1DnqjkYSPwBbQbj3OSlMbHbFq6\nu0FF3WQd8sKaRvXxXdVLHFuv1BFgCeTKGT0/fXizFMGL1a969J8zZPRzpTpVbs3b\nP9fIseIgkacdtjwLFmQbN1DuVFnBOSA8KG59LRAgOMcU8DBxEy2w8vnvTj8LP8hS\ndq4baRFnX6uPyKyjI60gRxEL6lhyMsMjUL4/YhTevIhtK0qF1gA6hMrY10f+yiBB\nVEJtj+taHcakek7X8KnPAvFfsyr3w6GXvbdkNnBy7LnSuOMQCYZjjW5aMEfmxc4Y\ncysJXI3Kl6ura7GIIzdMGiUuP89ndSb+TsOwex3QOcOTJh+annY=\n=D1ZK\n-----END PGP SIGNATURE-----", "payload": "tree 26592c878c9c35b9cff3da1dbb730dc76a11d192\nparent 736c675d2ab65bcde6554e1b73340c2dbc27c85a\nauthor Santiago Pastorino <spastorino@gmail.com> 1669039495 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669039793 -0300\n\nnegative_impl should take a TyCtxt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2faad3b699b7b80b08f4af7cfc67fff097256630", "html_url": "https://github.com/rust-lang/rust/commit/2faad3b699b7b80b08f4af7cfc67fff097256630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2faad3b699b7b80b08f4af7cfc67fff097256630/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "736c675d2ab65bcde6554e1b73340c2dbc27c85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/736c675d2ab65bcde6554e1b73340c2dbc27c85a", "html_url": "https://github.com/rust-lang/rust/commit/736c675d2ab65bcde6554e1b73340c2dbc27c85a"}], "stats": {"total": 11, "additions": 3, "deletions": 8}, "files": [{"sha": "8dd96934510557124bba2a9a72fc40744635e41f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2faad3b699b7b80b08f4af7cfc67fff097256630/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faad3b699b7b80b08f4af7cfc67fff097256630/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=2faad3b699b7b80b08f4af7cfc67fff097256630", "patch": "@@ -162,8 +162,8 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n \n     if overlap_mode.use_negative_impl() {\n-        if negative_impl(selcx, impl1_def_id, impl2_def_id)\n-            || negative_impl(selcx, impl2_def_id, impl1_def_id)\n+        if negative_impl(infcx.tcx, impl1_def_id, impl2_def_id)\n+            || negative_impl(infcx.tcx, impl2_def_id, impl1_def_id)\n         {\n             return None;\n         }\n@@ -279,13 +279,8 @@ fn implicit_negative<'cx, 'tcx>(\n \n /// Given impl1 and impl2 check if both impls are never satisfied by a common type (including\n /// where-clauses) If so, return true, they are disjoint and false otherwise.\n-fn negative_impl<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    impl1_def_id: DefId,\n-    impl2_def_id: DefId,\n-) -> bool {\n+fn negative_impl<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n     debug!(\"negative_impl(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n-    let tcx = selcx.infcx().tcx;\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     let infcx = tcx.infer_ctxt().build();"}]}