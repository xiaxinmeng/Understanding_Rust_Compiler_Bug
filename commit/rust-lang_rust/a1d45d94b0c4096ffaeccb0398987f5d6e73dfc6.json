{"sha": "a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDQ1ZDk0YjBjNDA5NmZmYWVjY2IwMzk4OTg3ZjVkNmU3M2RmYzY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-27T09:18:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T09:21:04Z"}, "message": "Refactor `explicitly_linked: bool` -> `dep_kind: DepKind`.", "tree": {"sha": "847dd01037f8bbf4920f0069f95e50d7fadf287a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847dd01037f8bbf4920f0069f95e50d7fadf287a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "html_url": "https://github.com/rust-lang/rust/commit/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c102d7fb68b1da42af21d4546ed12de9140f87e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c102d7fb68b1da42af21d4546ed12de9140f87e1", "html_url": "https://github.com/rust-lang/rust/commit/c102d7fb68b1da42af21d4546ed12de9140f87e1"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "cb2a4b3f6229e573299cb6f9042380514a5231b4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -63,6 +63,16 @@ pub struct CrateSource {\n     pub rlib: Option<(PathBuf, PathKind)>,\n }\n \n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n+pub enum DepKind {\n+    /// A dependency that is always injected into the dependency list and so\n+    /// doesn't need to be linked to an rlib, e.g. the injected allocator.\n+    Implicit,\n+    /// A dependency that is required by an rlib version of this crate.\n+    /// Ordinary `extern crate`s result in `Explicit` dependencies.\n+    Explicit,\n+}\n+\n #[derive(Copy, Debug, PartialEq, Clone, RustcEncodable, RustcDecodable)]\n pub enum LinkagePreference {\n     RequireDynamic,\n@@ -169,10 +179,10 @@ pub trait CrateStore<'tcx> {\n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n                                     -> Vec<(CrateNum, LinkagePreference)>;\n+    fn dep_kind(&self, cnum: CrateNum) -> DepKind;\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n     fn is_staged_api(&self, cnum: CrateNum) -> bool;\n-    fn is_explicitly_linked(&self, cnum: CrateNum) -> bool;\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n@@ -341,7 +351,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>\n         { bug!(\"missing_lang_items\") }\n     fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!(\"is_staged_api\") }\n-    fn is_explicitly_linked(&self, cnum: CrateNum) -> bool { bug!(\"is_explicitly_linked\") }\n+    fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }"}, {"sha": "2267c42b543a3d077f3ced2a70733876c3821c9e", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -65,6 +65,7 @@ use hir::def_id::CrateNum;\n \n use session;\n use session::config;\n+use middle::cstore::DepKind;\n use middle::cstore::LinkagePreference::{self, RequireStatic, RequireDynamic};\n use util::nodemap::FxHashMap;\n use rustc_back::PanicStrategy;\n@@ -188,7 +189,7 @@ fn calculate_type(sess: &session::Session,\n         let src = sess.cstore.used_crate_source(cnum);\n         if src.dylib.is_none() &&\n            !formats.contains_key(&cnum) &&\n-           sess.cstore.is_explicitly_linked(cnum) {\n+           sess.cstore.dep_kind(cnum) == DepKind::Explicit {\n             assert!(src.rlib.is_some());\n             info!(\"adding staticlib: {}\", sess.cstore.crate_name(cnum));\n             add_library(sess, cnum, RequireStatic, &mut formats);\n@@ -272,7 +273,7 @@ fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n     // everything in explicitly so long as it's actually required.\n     let last_crate = sess.cstore.crates().len();\n     let mut ret = (1..last_crate+1).map(|cnum| {\n-        if sess.cstore.is_explicitly_linked(CrateNum::new(cnum)) {\n+        if sess.cstore.dep_kind(CrateNum::new(cnum)) == DepKind::Explicit {\n             Linkage::Static\n         } else {\n             Linkage::NotLinked"}, {"sha": "08168fd4fd7ec4a7b85b169280deed573c77466e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -16,7 +16,7 @@ use schema::CrateRoot;\n \n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n-use rustc::middle::cstore::LoadedMacros;\n+use rustc::middle::cstore::{DepKind, LoadedMacros};\n use rustc::session::{config, Session};\n use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n@@ -29,7 +29,7 @@ use std::cell::{RefCell, Cell};\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use std::fs;\n+use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::abi::Abi;\n@@ -60,7 +60,7 @@ fn dump_crates(cstore: &CStore) {\n         info!(\"  name: {}\", data.name());\n         info!(\"  cnum: {}\", data.cnum);\n         info!(\"  hash: {}\", data.hash());\n-        info!(\"  reqd: {}\", data.explicitly_linked.get());\n+        info!(\"  reqd: {:?}\", data.dep_kind.get());\n         let CrateSource { dylib, rlib } = data.source.clone();\n         dylib.map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n         rlib.map(|rl|  info!(\"   rlib: {}\", rl.0.display()));\n@@ -258,7 +258,7 @@ impl<'a> CrateLoader<'a> {\n                       name: &str,\n                       span: Span,\n                       lib: Library,\n-                      explicitly_linked: bool)\n+                      dep_kind: DepKind)\n                       -> (CrateNum, Rc<cstore::CrateMetadata>) {\n         info!(\"register crate `extern crate {} as {}`\", name, ident);\n         let crate_root = lib.metadata.get_root();\n@@ -299,7 +299,7 @@ impl<'a> CrateLoader<'a> {\n             cnum_map: RefCell::new(cnum_map),\n             cnum: cnum,\n             codemap_import_info: RefCell::new(vec![]),\n-            explicitly_linked: Cell::new(explicitly_linked),\n+            dep_kind: Cell::new(dep_kind),\n             source: cstore::CrateSource {\n                 dylib: dylib,\n                 rlib: rlib,\n@@ -317,7 +317,7 @@ impl<'a> CrateLoader<'a> {\n                      hash: Option<&Svh>,\n                      span: Span,\n                      kind: PathKind,\n-                     explicitly_linked: bool)\n+                     dep_kind: DepKind)\n                      -> (CrateNum, Rc<cstore::CrateMetadata>) {\n         info!(\"resolving crate `extern crate {} as {}`\", name, ident);\n         let result = match self.existing_match(name, hash, kind) {\n@@ -350,12 +350,11 @@ impl<'a> CrateLoader<'a> {\n         match result {\n             LoadResult::Previous(cnum) => {\n                 let data = self.cstore.get_crate_data(cnum);\n-                data.explicitly_linked.set(explicitly_linked || data.explicitly_linked.get());\n+                data.dep_kind.set(cmp::max(data.dep_kind.get(), dep_kind));\n                 (cnum, data)\n             }\n             LoadResult::Loaded(library) => {\n-                self.register_crate(root, ident, name, span, library,\n-                                    explicitly_linked)\n+                self.register_crate(root, ident, name, span, library, dep_kind)\n             }\n         }\n     }\n@@ -442,7 +441,7 @@ impl<'a> CrateLoader<'a> {\n                                                         Some(&dep.hash),\n                                                         span,\n                                                         PathKind::Dependency,\n-                                                        dep.explicitly_linked);\n+                                                        dep.kind);\n             (CrateNum::new(crate_num + 1), local_cnum)\n         }).collect();\n \n@@ -716,7 +715,7 @@ impl<'a> CrateLoader<'a> {\n                 // #![panic_runtime] crate.\n                 self.inject_dependency_if(cnum, \"a panic runtime\",\n                                           &|data| data.needs_panic_runtime());\n-                runtime_found = runtime_found || data.explicitly_linked.get();\n+                runtime_found = runtime_found || data.dep_kind.get() == DepKind::Explicit;\n             }\n         });\n \n@@ -745,8 +744,9 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n+        let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, false);\n+            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, dep_kind);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n@@ -780,7 +780,7 @@ impl<'a> CrateLoader<'a> {\n                 self.inject_dependency_if(cnum, \"an allocator\",\n                                           &|data| data.needs_allocator());\n                 found_required_allocator = found_required_allocator ||\n-                    data.explicitly_linked.get();\n+                    data.dep_kind.get() == DepKind::Explicit;\n             }\n         });\n         if !needs_allocator || found_required_allocator { return }\n@@ -826,8 +826,9 @@ impl<'a> CrateLoader<'a> {\n         } else {\n             &self.sess.target.target.options.exe_allocation_crate\n         };\n+        let dep_kind = DepKind::Implicit;\n         let (cnum, data) =\n-            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, false);\n+            self.resolve_crate(&None, name, name, None, DUMMY_SP, PathKind::Crate, dep_kind);\n \n         // Sanity check the crate we loaded to ensure that it is indeed an\n         // allocator.\n@@ -993,7 +994,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             if let PMDSource::Owned(lib) = ekrate.metadata {\n                 if ekrate.target_only || config::host_triple() == self.sess.opts.target_triple {\n                     let ExternCrateInfo { ref ident, ref name, .. } = info;\n-                    self.register_crate(&None, ident, name, item.span, lib, true);\n+                    self.register_crate(&None, ident, name, item.span, lib, DepKind::Explicit);\n                 }\n             }\n \n@@ -1006,7 +1007,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         };\n \n         let (cnum, ..) = self.resolve_crate(\n-            &None, &info.ident, &info.name, None, item.span, PathKind::Crate, true,\n+            &None, &info.ident, &info.name, None, item.span, PathKind::Crate, DepKind::Explicit,\n         );\n \n         let def_id = definitions.opt_local_def_id(item.id).unwrap();"}, {"sha": "36d55dd95b91ec3891a79a8906116d43e767fb59", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -18,7 +18,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex, DefId};\n use rustc::hir::map::DefKey;\n use rustc::hir::svh::Svh;\n-use rustc::middle::cstore::ExternCrate;\n+use rustc::middle::cstore::{DepKind, ExternCrate};\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap, NodeSet, DefIdMap};\n@@ -78,12 +78,7 @@ pub struct CrateMetadata {\n     /// compilation support.\n     pub key_map: FxHashMap<DefKey, DefIndex>,\n \n-    /// Flag if this crate is required by an rlib version of this crate, or in\n-    /// other words whether it was explicitly linked to. An example of a crate\n-    /// where this is false is when an allocator crate is injected into the\n-    /// dependency list, and therefore isn't actually needed to link an rlib.\n-    pub explicitly_linked: Cell<bool>,\n-\n+    pub dep_kind: Cell<DepKind>,\n     pub source: CrateSource,\n }\n "}, {"sha": "59f65c7f7c7d7538df14ad5c5f4368bd9287d52f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -13,7 +13,7 @@ use encoder;\n use locator;\n use schema;\n \n-use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, ExternCrate};\n+use rustc::middle::cstore::{InlinedItem, CrateStore, CrateSource, DepKind, ExternCrate};\n use rustc::middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n@@ -221,6 +221,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).get_dylib_dependency_formats()\n     }\n \n+    fn dep_kind(&self, cnum: CrateNum) -> DepKind\n+    {\n+        self.get_crate_data(cnum).dep_kind.get()\n+    }\n+\n     fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>\n     {\n         self.get_crate_data(cnum).get_lang_items()\n@@ -237,11 +242,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_staged_api()\n     }\n \n-    fn is_explicitly_linked(&self, cnum: CrateNum) -> bool\n-    {\n-        self.get_crate_data(cnum).explicitly_linked.get()\n-    }\n-\n     fn is_allocator(&self, cnum: CrateNum) -> bool\n     {\n         self.get_crate_data(cnum).is_allocator()"}, {"sha": "931ddb3cf8d390f05a4ac89b7b60247790279d75", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -1080,7 +1080,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             CrateDep {\n                 name: syntax::parse::token::intern(dep.name()),\n                 hash: dep.hash(),\n-                explicitly_linked: dep.explicitly_linked.get(),\n+                kind: dep.dep_kind.get(),\n             }\n         }))\n     }"}, {"sha": "5b1774a19846b993e23c8f8202c58bf58b7ca1b1", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=a1d45d94b0c4096ffaeccb0398987f5d6e73dfc6", "patch": "@@ -14,7 +14,7 @@ use index;\n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId};\n-use rustc::middle::cstore::{LinkagePreference, NativeLibraryKind};\n+use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibraryKind};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n@@ -187,7 +187,7 @@ pub struct CrateRoot {\n pub struct CrateDep {\n     pub name: ast::Name,\n     pub hash: hir::svh::Svh,\n-    pub explicitly_linked: bool,\n+    pub kind: DepKind,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}]}