{"sha": "c22ccd07fecb964b11cba283d5ab184967c2669b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMmNjZDA3ZmVjYjk2NGIxMWNiYTI4M2Q1YWIxODQ5NjdjMjY2OWI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-22T22:37:15Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-22T22:37:15Z"}, "message": "ItemTree: pretty-print all paths", "tree": {"sha": "2c4f678c671a969a7c7a8d7aaf41521d25ec92ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4f678c671a969a7c7a8d7aaf41521d25ec92ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c22ccd07fecb964b11cba283d5ab184967c2669b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c22ccd07fecb964b11cba283d5ab184967c2669b", "html_url": "https://github.com/rust-lang/rust/commit/c22ccd07fecb964b11cba283d5ab184967c2669b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c22ccd07fecb964b11cba283d5ab184967c2669b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1ba1549d97e7d5ddceb16b7238ae8aab5794d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1ba1549d97e7d5ddceb16b7238ae8aab5794d0", "html_url": "https://github.com/rust-lang/rust/commit/bc1ba1549d97e7d5ddceb16b7238ae8aab5794d0"}], "stats": {"total": 128, "additions": 119, "deletions": 9}, "files": [{"sha": "c91f21bbb15babd36cb24eb7274fe8176fcb9c1e", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 73, "deletions": 9, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c22ccd07fecb964b11cba283d5ab184967c2669b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22ccd07fecb964b11cba283d5ab184967c2669b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=c22ccd07fecb964b11cba283d5ab184967c2669b", "patch": "@@ -2,7 +2,7 @@\n \n use std::fmt::{self, Write};\n \n-use crate::{attr::RawAttrs, visibility::RawVisibility};\n+use crate::{attr::RawAttrs, path::GenericArg, visibility::RawVisibility};\n \n use super::*;\n \n@@ -466,7 +466,7 @@ impl<'a> Printer<'a> {\n             TypeRef::Macro(_ast_id) => {\n                 w!(self, \"<macro>\");\n             }\n-            TypeRef::Error => drop(write!(self, \"{{unknown}}\")),\n+            TypeRef::Error => w!(self, \"{{unknown}}\"),\n             TypeRef::ImplTrait(bounds) => {\n                 w!(self, \"impl \");\n                 self.print_type_bounds(bounds);\n@@ -493,13 +493,77 @@ impl<'a> Printer<'a> {\n     }\n \n     fn print_path(&mut self, path: &Path) {\n-        if path.type_anchor().is_none()\n-            && path.segments().iter().all(|seg| seg.args_and_bindings.is_none())\n-        {\n-            w!(self, \"{}\", path.mod_path());\n-        } else {\n-            // too complicated, just use `Debug`\n-            w!(self, \"{:?}\", path);\n+        match path.type_anchor() {\n+            Some(anchor) => {\n+                w!(self, \"<\");\n+                self.print_type_ref(anchor);\n+                w!(self, \">::\");\n+            }\n+            None => match path.kind() {\n+                PathKind::Plain => {}\n+                PathKind::Super(0) => w!(self, \"self::\"),\n+                PathKind::Super(n) => {\n+                    for _ in 0..*n {\n+                        w!(self, \"super::\");\n+                    }\n+                }\n+                PathKind::Crate => w!(self, \"crate::\"),\n+                PathKind::Abs => w!(self, \"::\"),\n+                PathKind::DollarCrate(_) => w!(self, \"$crate::\"),\n+            },\n+        }\n+\n+        for (i, segment) in path.segments().iter().enumerate() {\n+            if i != 0 {\n+                w!(self, \"::\");\n+            }\n+\n+            w!(self, \"{}\", segment.name);\n+            if let Some(generics) = segment.args_and_bindings {\n+                // NB: these are all in type position, so `::<` turbofish syntax is not necessary\n+                w!(self, \"<\");\n+                let mut first = true;\n+                let args = if generics.has_self_type {\n+                    let (self_ty, args) = generics.args.split_first().unwrap();\n+                    w!(self, \"Self=\");\n+                    self.print_generic_arg(self_ty);\n+                    first = false;\n+                    args\n+                } else {\n+                    &generics.args\n+                };\n+                for arg in args {\n+                    if !first {\n+                        w!(self, \", \");\n+                    }\n+                    first = false;\n+                    self.print_generic_arg(arg);\n+                }\n+                for binding in &generics.bindings {\n+                    if !first {\n+                        w!(self, \", \");\n+                    }\n+                    first = false;\n+                    w!(self, \"{}\", binding.name);\n+                    if !binding.bounds.is_empty() {\n+                        w!(self, \": \");\n+                        self.print_type_bounds(&binding.bounds);\n+                    }\n+                    if let Some(ty) = &binding.type_ref {\n+                        w!(self, \" = \");\n+                        self.print_type_ref(ty);\n+                    }\n+                }\n+\n+                w!(self, \">\");\n+            }\n+        }\n+    }\n+\n+    fn print_generic_arg(&mut self, arg: &GenericArg) {\n+        match arg {\n+            GenericArg::Type(ty) => self.print_type_ref(ty),\n+            GenericArg::Lifetime(lt) => w!(self, \"{}\", lt.name),\n         }\n     }\n }"}, {"sha": "91c44362e163a36c6421bf5a5d73f8a4497f4cbd", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c22ccd07fecb964b11cba283d5ab184967c2669b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c22ccd07fecb964b11cba283d5ab184967c2669b/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=c22ccd07fecb964b11cba283d5ab184967c2669b", "patch": "@@ -242,3 +242,49 @@ m!();\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn mod_paths() {\n+    check(\n+        r#\"\n+struct S {\n+    a: self::Ty,\n+    b: super::SuperTy,\n+    c: super::super::SuperSuperTy,\n+    d: ::abs::Path,\n+    e: crate::Crate,\n+    f: plain::path::Ty,\n+}\n+        \"#,\n+        expect![[r#\"\n+            pub(self) struct S {\n+                pub(self) a: self::Ty,\n+                pub(self) b: super::SuperTy,\n+                pub(self) c: super::super::SuperSuperTy,\n+                pub(self) d: ::abs::Path,\n+                pub(self) e: crate::Crate,\n+                pub(self) f: plain::path::Ty,\n+            }\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn types() {\n+    check(\n+        r#\"\n+struct S {\n+    a: Mixed<'a, T, Item=(), OtherItem=u8>,\n+    b: <Fully as Qualified>::Syntax,\n+    c: <TypeAnchored>::Path::<'a>,\n+}\n+        \"#,\n+        expect![[r#\"\n+            pub(self) struct S {\n+                pub(self) a: Mixed<'a, T, Item = (), OtherItem = u8>,\n+                pub(self) b: Qualified<Self=Fully>::Syntax,\n+                pub(self) c: <TypeAnchored>::Path<'a>,\n+            }\n+        \"#]],\n+    )\n+}"}]}