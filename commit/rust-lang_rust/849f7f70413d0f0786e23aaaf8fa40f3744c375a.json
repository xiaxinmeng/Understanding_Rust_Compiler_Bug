{"sha": "849f7f70413d0f0786e23aaaf8fa40f3744c375a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OWY3ZjcwNDEzZDBmMDc4NmUyM2FhYWY4ZmE0MGYzNzQ0YzM3NWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-01T18:48:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-02T10:48:09Z"}, "message": "Update gimli", "tree": {"sha": "86e192ab43bae6f236280f0ab4fe0fdc1e5d3bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e192ab43bae6f236280f0ab4fe0fdc1e5d3bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849f7f70413d0f0786e23aaaf8fa40f3744c375a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849f7f70413d0f0786e23aaaf8fa40f3744c375a", "html_url": "https://github.com/rust-lang/rust/commit/849f7f70413d0f0786e23aaaf8fa40f3744c375a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849f7f70413d0f0786e23aaaf8fa40f3744c375a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/189ba8352d0df1b0ad08229dc1736b10dab1ee0b", "html_url": "https://github.com/rust-lang/rust/commit/189ba8352d0df1b0ad08229dc1736b10dab1ee0b"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "cb70e83703bdfa0940902391840befdc57f474f3", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/849f7f70413d0f0786e23aaaf8fa40f3744c375a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/849f7f70413d0f0786e23aaaf8fa40f3744c375a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=849f7f70413d0f0786e23aaaf8fa40f3744c375a", "patch": "@@ -321,7 +321,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"gimli\"\n version = \"0.16.1\"\n-source = \"git+https://github.com/gimli-rs/gimli.git#bedf4f00e460e2229f40bbbad78a6d6974640ba6\"\n+source = \"git+https://github.com/gimli-rs/gimli.git#89442c242d7e51b1cbd67103918dc42552527aa1\"\n dependencies = [\n  \"arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "21cea157250abbc3c160462ac68a9ffd21b78c5a", "filename": "src/debuginfo.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/849f7f70413d0f0786e23aaaf8fa40f3744c375a/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849f7f70413d0f0786e23aaaf8fa40f3744c375a/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=849f7f70413d0f0786e23aaaf8fa40f3744c375a", "patch": "@@ -9,8 +9,8 @@ use syntax::source_map::FileName;\n use gimli::write::{\n     Address, AttributeValue, CompilationUnit, DebugAbbrev, DebugInfo, DebugLine, DebugRanges,\n     DebugRngLists, DebugStr, EndianVec, LineProgram, LineProgramId, LineProgramTable, Range,\n-    RangeList, RangeListTable, Result, SectionId, StringTable, UnitEntryId, UnitId, UnitTable,\n-    Writer, FileId,\n+    RangeList, Result, SectionId, StringTable, UnitEntryId, UnitId, UnitTable,\n+    Writer, FileId, LineStringTable, DebugLineStr, LineString,\n };\n use gimli::{Encoding, Format, RunTimeEndian};\n \n@@ -25,22 +25,25 @@ fn target_endian(tcx: TyCtxt) -> RunTimeEndian {\n     }\n }\n \n-fn line_program_add_file(line_program: &mut LineProgram, file: &FileName) -> FileId {\n+fn line_program_add_file(line_program: &mut LineProgram, line_strings: &mut LineStringTable, file: &FileName) -> FileId {\n     match file {\n         FileName::Real(path) => {\n+            let dir_name = LineString::new(path.parent().unwrap().to_str().unwrap().as_bytes(), line_program.encoding(), line_strings);\n             let dir_id =\n-                line_program.add_directory(path.parent().unwrap().to_str().unwrap().as_bytes());\n+                line_program.add_directory(dir_name);\n+            let file_name = LineString::new(path.file_name().unwrap().to_str().unwrap().as_bytes(), line_program.encoding(), line_strings);\n             line_program.add_file(\n-                path.file_name().unwrap().to_str().unwrap().as_bytes(),\n+                file_name,\n                 dir_id,\n                 None,\n             )\n         }\n         // FIXME give more appropriate file names\n         _ => {\n             let dir_id = line_program.default_directory();\n+            let dummy_file_name = LineString::new(file.to_string().into_bytes(), line_program.encoding(), line_strings);\n             line_program.add_file(\n-                file.to_string().as_bytes(),\n+                dummy_file_name,\n                 dir_id,\n                 None,\n             )\n@@ -57,7 +60,6 @@ struct DebugReloc {\n \n pub struct DebugContext<'tcx> {\n     // Encoding info\n-    encoding: Encoding,\n     endian: RunTimeEndian,\n     symbols: indexmap::IndexSet<String>,\n \n@@ -67,7 +69,7 @@ pub struct DebugContext<'tcx> {\n \n     // Side tables\n     strings: StringTable,\n-    range_lists: RangeListTable,\n+    line_strings: LineStringTable,\n \n     // Global ids\n     unit_id: UnitId,\n@@ -97,7 +99,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         };\n \n         let mut strings = StringTable::default();\n-        let range_lists = RangeListTable::default();\n+        let mut line_strings = LineStringTable::default();\n \n         let mut units = UnitTable::default();\n         let mut line_programs = LineProgramTable::default();\n@@ -108,8 +110,8 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             1,\n             -5,\n             14,\n-            comp_dir.as_bytes(),\n-            name.as_bytes(),\n+            LineString::new(comp_dir.as_bytes(), encoding, &mut line_strings),\n+            LineString::new(name.as_bytes(), encoding, &mut line_strings),\n             None,\n         ));\n \n@@ -141,13 +143,12 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n             );\n         }\n \n-        DebugContext {\n-            encoding,\n+         DebugContext {\n             endian: target_endian(tcx),\n             symbols: indexmap::IndexSet::new(),\n \n             strings,\n-            range_lists,\n+            line_strings,\n \n             units,\n             line_programs,\n@@ -164,7 +165,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let line_program = self.line_programs.get_mut(self.global_line_program);\n-        let file_id = line_program_add_file(line_program, &loc.file.name);\n+        let file_id = line_program_add_file(line_program, &mut self.line_strings, &loc.file.name);\n \n         let unit = self.units.get_mut(self.unit_id);\n         let entry = unit.get_mut(entry_id);\n@@ -182,8 +183,8 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n     }\n \n     pub fn emit(&mut self, artifact: &mut Artifact) {\n-        let unit_range_list_id = self.range_lists.add(self.unit_range_list.clone());\n         let unit = self.units.get_mut(self.unit_id);\n+        let unit_range_list_id = unit.ranges.add(self.unit_range_list.clone());\n         let root = unit.root();\n         let root = unit.get_mut(root);\n         root.set(\n@@ -194,28 +195,24 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         let mut debug_abbrev = DebugAbbrev::from(WriterRelocate::new(self));\n         let mut debug_info = DebugInfo::from(WriterRelocate::new(self));\n         let mut debug_str = DebugStr::from(WriterRelocate::new(self));\n+        let mut debug_line_str = DebugLineStr::from(WriterRelocate::new(self));\n         let mut debug_line = DebugLine::from(WriterRelocate::new(self));\n         let mut debug_ranges = DebugRanges::from(WriterRelocate::new(self));\n         let mut debug_rnglists = DebugRngLists::from(WriterRelocate::new(self));\n \n         let debug_str_offsets = self.strings.write(&mut debug_str).unwrap();\n+        let debug_line_str_offsets = self.line_strings.write(&mut debug_line_str).unwrap();\n \n-        let debug_line_offsets = self.line_programs.write(&mut debug_line).unwrap();\n+        let debug_line_offsets = self.line_programs.write(&mut debug_line, &debug_line_str_offsets, &debug_str_offsets).unwrap();\n \n-        let range_list_offsets = self\n-            .range_lists\n-            .write(\n-                &mut debug_ranges,\n-                &mut debug_rnglists,\n-                self.encoding\n-            )\n-            .unwrap();\n         self.units\n             .write(\n                 &mut debug_abbrev,\n                 &mut debug_info,\n+                &mut debug_ranges,\n+                &mut debug_rnglists,\n                 &debug_line_offsets,\n-                &range_list_offsets,\n+                &debug_line_str_offsets,\n                 &debug_str_offsets,\n             )\n             .unwrap();\n@@ -234,6 +231,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         decl_section!(DebugInfo = debug_info);\n         decl_section!(DebugStr = debug_str);\n         decl_section!(DebugLine = debug_line);\n+        decl_section!(DebugLineStr = debug_line_str);\n \n         let debug_ranges_not_empty = !debug_ranges.0.writer.slice().is_empty();\n         if debug_ranges_not_empty {\n@@ -267,6 +265,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         sect_relocs!(DebugInfo = debug_info);\n         sect_relocs!(DebugStr = debug_str);\n         sect_relocs!(DebugLine = debug_line);\n+        sect_relocs!(DebugLineStr = debug_line_str);\n \n         if debug_ranges_not_empty {\n             sect_relocs!(DebugRanges = debug_ranges);\n@@ -339,15 +338,12 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         let entry = unit.get_mut(self.entry_id);\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(code_size as u64));\n \n-        self.debug_context.unit_range_list.0.push(Range {\n+        self.debug_context.unit_range_list.0.push(Range::StartLength {\n             begin: Address::Relative {\n                 symbol: self.symbol,\n                 addend: 0,\n             },\n-            end: Address::Relative {\n-                symbol: self.symbol,\n-                addend: code_size as i64,\n-            },\n+            length: code_size as u64,\n         });\n \n         let line_program = self\n@@ -365,9 +361,10 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         let mut ebbs = func.layout.ebbs().collect::<Vec<_>>();\n         ebbs.sort_by_key(|ebb| func.offsets[*ebb]); // Ensure inst offsets always increase\n \n-        let create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n+        let line_strings = &mut self.debug_context.line_strings;\n+        let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n             let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n-            let file_id = line_program_add_file(line_program, &loc.file.name);\n+            let file_id = line_program_add_file(line_program, line_strings, &loc.file.name);\n \n             /*println!(\n                 \"srcloc {:>04X} {}:{}:{}\","}]}