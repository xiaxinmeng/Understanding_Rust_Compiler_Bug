{"sha": "8a3688926c402e3d7201c9951793345ded10c4ad", "node_id": "C_kwDOAAsO6NoAKDhhMzY4ODkyNmM0MDJlM2Q3MjAxYzk5NTE3OTMzNDVkZWQxMGM0YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-19T17:39:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-19T17:39:54Z"}, "message": "Auto merge of #2818 - saethlin:rustup, r=saethlin\n\nrustup", "tree": {"sha": "9b3c85cf4c646f571a43369b8aaaf11cca784fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3c85cf4c646f571a43369b8aaaf11cca784fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3688926c402e3d7201c9951793345ded10c4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3688926c402e3d7201c9951793345ded10c4ad", "html_url": "https://github.com/rust-lang/rust/commit/8a3688926c402e3d7201c9951793345ded10c4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3688926c402e3d7201c9951793345ded10c4ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2eb72d068570a1d0561d49c1a1c2eef32e8b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2eb72d068570a1d0561d49c1a1c2eef32e8b3a", "html_url": "https://github.com/rust-lang/rust/commit/6a2eb72d068570a1d0561d49c1a1c2eef32e8b3a"}, {"sha": "2b223b8a9bd5dbe5bb61ad2e585c7fc75b9c1fab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b223b8a9bd5dbe5bb61ad2e585c7fc75b9c1fab", "html_url": "https://github.com/rust-lang/rust/commit/2b223b8a9bd5dbe5bb61ad2e585c7fc75b9c1fab"}], "stats": {"total": 3402, "additions": 2111, "deletions": 1291}, "files": [{"sha": "04d2597ecc69665cf358f4d54774528edd6a14e6", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -42,6 +42,7 @@ no_llvm_build\n /llvm/\n /mingw-build/\n build/\n+!/compiler/rustc_mir_build/src/build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "1d40b8acc666e87f85153f37a7585986d3a84858", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1365,9 +1365,9 @@ dependencies = [\n \n [[package]]\n name = \"ena\"\n-version = \"0.14.1\"\n+version = \"0.14.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b2e5d13ca2353ab7d0230988629def93914a8c4015f621f9b13ed2955614731d\"\n+checksum = \"c533630cf40e9caa44bd91aadc88a75d75a4c3a12b4cfde353cbed41daa1e1f1\"\n dependencies = [\n  \"log\",\n ]"}, {"sha": "ab8b7f632e8efeb977e1a635f1d1c1e1894130a8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1426,13 +1426,9 @@ pub enum ExprKind {\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n     ///\n-    /// The `NodeId` is the `NodeId` for the closure that results from\n-    /// desugaring an async block, just like the NodeId field in the\n-    /// `Async::Yes` variant. This is necessary in order to create a def for the\n-    /// closure which can be used as a parent of any child defs. Defs\n-    /// created during lowering cannot be made the parent of any other\n-    /// preexisting defs.\n-    Async(CaptureBy, NodeId, P<Block>),\n+    /// The async block used to have a `NodeId`, which was removed in favor of\n+    /// using the parent `NodeId` of the parent `Expr`.\n+    Async(CaptureBy, P<Block>),\n     /// An await expression (`my_future.await`).\n     Await(P<Expr>),\n "}, {"sha": "46e46ab575ef7b19d9cc6b571cfc751905eb4ae4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1407,8 +1407,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_block(blk);\n             visit_opt(label, |label| vis.visit_label(label));\n         }\n-        ExprKind::Async(_capture_by, node_id, body) => {\n-            vis.visit_id(node_id);\n+        ExprKind::Async(_capture_by, body) => {\n             vis.visit_block(body);\n         }\n         ExprKind::Await(expr) => vis.visit_expr(expr),"}, {"sha": "3893875e9a405a111650ac70ef4d3cead30c2458", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -259,7 +259,6 @@ pub enum ExprPrecedence {\n     Assign,\n     AssignOp,\n \n-    Box,\n     AddrOf,\n     Let,\n     Unary,\n@@ -319,8 +318,7 @@ impl ExprPrecedence {\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,\n \n             // Unary, prefix\n-            ExprPrecedence::Box\n-            | ExprPrecedence::AddrOf\n+            ExprPrecedence::AddrOf\n             // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n             // However, this is not exactly right. When `let _ = a` is the LHS of a binop we\n             // need parens sometimes. E.g. we can print `(let _ = a) && b` as `let _ = a && b`"}, {"sha": "608f87ab6ebf465ef83640b1cd54e124e33604c0", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -860,7 +860,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Async(_, _, body) => {\n+        ExprKind::Async(_, body) => {\n             visitor.visit_block(body);\n         }\n         ExprKind::Await(expr) => visitor.visit_expr(expr),"}, {"sha": "3247802345b0a56fa86d5da6bcbd1a1440207c11", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -63,20 +63,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::ForLoop(pat, head, body, opt_label) => {\n                     return self.lower_expr_for(e, pat, head, body, *opt_label);\n                 }\n-                // Similarly, async blocks do not use `e.id` but rather `closure_node_id`.\n-                ExprKind::Async(capture_clause, closure_node_id, block) => {\n-                    let hir_id = self.lower_node_id(*closure_node_id);\n-                    self.lower_attrs(hir_id, &e.attrs);\n-                    return self.make_async_expr(\n-                        *capture_clause,\n-                        hir_id,\n-                        *closure_node_id,\n-                        None,\n-                        e.span,\n-                        hir::AsyncGeneratorKind::Block,\n-                        |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n-                    );\n-                }\n                 _ => (),\n             }\n \n@@ -187,6 +173,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.arena.alloc_from_iter(arms.iter().map(|x| self.lower_arm(x))),\n                     hir::MatchSource::Normal,\n                 ),\n+                ExprKind::Async(capture_clause, block) => self.make_async_expr(\n+                    *capture_clause,\n+                    e.id,\n+                    None,\n+                    e.span,\n+                    hir::AsyncGeneratorKind::Block,\n+                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                ),\n                 ExprKind::Await(expr) => {\n                     let dot_await_span = if expr.span.hi() < e.span.hi() {\n                         let span_with_whitespace = self\n@@ -320,7 +314,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n-                ExprKind::Paren(_) | ExprKind::ForLoop(..) | ExprKind::Async(..) => {\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) => {\n                     unreachable!(\"already handled\")\n                 }\n \n@@ -591,13 +585,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n-        outer_hir_id: hir::HirId,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n-    ) -> hir::Expr<'hir> {\n+    ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n         // Resume argument type: `ResumeTy`\n@@ -644,32 +637,36 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = {\n-            let c = self.arena.alloc(hir::Closure {\n-                def_id: self.local_def_id(closure_node_id),\n-                binder: hir::ClosureBinder::Default,\n-                capture_clause,\n-                bound_generic_params: &[],\n-                fn_decl,\n-                body,\n-                fn_decl_span: self.lower_span(span),\n-                fn_arg_span: None,\n-                movability: Some(hir::Movability::Static),\n-                constness: hir::Constness::NotConst,\n-            });\n-\n-            hir::ExprKind::Closure(c)\n-        };\n+        hir::ExprKind::Closure(self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_node_id),\n+            binder: hir::ClosureBinder::Default,\n+            capture_clause,\n+            bound_generic_params: &[],\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(span),\n+            fn_arg_span: None,\n+            movability: Some(hir::Movability::Static),\n+            constness: hir::Constness::NotConst,\n+        }))\n+    }\n \n-        let hir_id = self.lower_node_id(closure_node_id);\n+    /// Forwards a possible `#[track_caller]` annotation from `outer_hir_id` to\n+    /// `inner_hir_id` in case the `closure_track_caller` feature is enabled.\n+    pub(super) fn maybe_forward_track_caller(\n+        &mut self,\n+        span: Span,\n+        outer_hir_id: hir::HirId,\n+        inner_hir_id: hir::HirId,\n+    ) {\n         if self.tcx.features().closure_track_caller\n             && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n             && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n         {\n             let unstable_span =\n                 self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n             self.lower_attrs(\n-                hir_id,\n+                inner_hir_id,\n                 &[Attribute {\n                     kind: AttrKind::Normal(ptr::P(NormalAttr {\n                         item: AttrItem {\n@@ -685,8 +682,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }],\n             );\n         }\n-\n-        hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) }\n     }\n \n     /// Desugar `<expr>.await` into:\n@@ -1001,15 +996,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     None\n                 };\n \n-                this.make_async_expr(\n+                let async_body = this.make_async_expr(\n                     capture_clause,\n-                    closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,\n                     hir::AsyncGeneratorKind::Closure,\n                     |this| this.with_new_scopes(|this| this.lower_expr_mut(body)),\n-                )\n+                );\n+                let hir_id = this.lower_node_id(inner_closure_id);\n+                this.maybe_forward_track_caller(body.span, closure_hir_id, hir_id);\n+                hir::Expr { hir_id, kind: async_body, span: this.lower_span(body.span) }\n             });\n             body_id\n         });"}, {"sha": "cc879982abce84fb28ac47b9ee6c4cbb6c26ed9b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1146,7 +1146,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n-                fn_id,\n                 closure_id,\n                 None,\n                 body.span,\n@@ -1180,7 +1179,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 },\n             );\n \n-            (this.arena.alloc_from_iter(parameters), async_expr)\n+            let hir_id = this.lower_node_id(closure_id);\n+            this.maybe_forward_track_caller(body.span, fn_id, hir_id);\n+            let expr = hir::Expr { hir_id, kind: async_expr, span: this.lower_span(body.span) };\n+\n+            (this.arena.alloc_from_iter(parameters), expr)\n         })\n     }\n "}, {"sha": "776bf54244ed1d4d36dddd494e98ff4efe35b4ae", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -439,7 +439,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Async(capture_clause, _, blk) => {\n+            ast::ExprKind::Async(capture_clause, blk) => {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(*capture_clause);\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above"}, {"sha": "dbf15a3e05fa9e2fd114880e8f28ade0d5711da7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -255,7 +255,7 @@ fn sccs_info<'cx, 'tcx>(\n     let var_to_origin = infcx.reg_var_to_origin.borrow();\n \n     let mut var_to_origin_sorted = var_to_origin.clone().into_iter().collect::<Vec<_>>();\n-    var_to_origin_sorted.sort_by(|a, b| a.0.cmp(&b.0));\n+    var_to_origin_sorted.sort_by_key(|vto| vto.0);\n     let mut debug_str = \"region variables to origins:\\n\".to_string();\n     for (reg_var, origin) in var_to_origin_sorted.into_iter() {\n         debug_str.push_str(&format!(\"{:?}: {:?}\\n\", reg_var, origin));\n@@ -2216,7 +2216,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // is in the same SCC or something. In that case, find what\n         // appears to be the most interesting point to report to the\n         // user via an even more ad-hoc guess.\n-        categorized_path.sort_by(|p0, p1| p0.category.cmp(&p1.category));\n+        categorized_path.sort_by_key(|p| p.category);\n         debug!(\"sorted_path={:#?}\", categorized_path);\n \n         (categorized_path.remove(0), extra_info)"}, {"sha": "c9e3cd486f8553d5b965556047047dbc6d5c83fb", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             // sync with the `rfc-2011-nicer-assert-messages/all-expr-kinds.rs` test.\n             ExprKind::Assign(_, _, _)\n             | ExprKind::AssignOp(_, _, _)\n-            | ExprKind::Async(_, _, _)\n+            | ExprKind::Async(_, _)\n             | ExprKind::Await(_)\n             | ExprKind::Block(_, _)\n             | ExprKind::Break(_, _)"}, {"sha": "1b8e9312e2f587f6095a2643f35844aad980b54a", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -346,17 +346,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 crate::abi::codegen_return(fx);\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n-                if !fx.tcx.sess.overflow_checks() {\n-                    let overflow_not_to_check = match msg {\n-                        AssertKind::OverflowNeg(..) => true,\n-                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n-                    if overflow_not_to_check {\n-                        let target = fx.get_block(*target);\n-                        fx.bcx.ins().jump(target, &[]);\n-                        continue;\n-                    }\n+                if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n+                    let target = fx.get_block(*target);\n+                    fx.bcx.ins().jump(target, &[]);\n+                    continue;\n                 }\n                 let cond = codegen_operand(fx, cond).load_scalar(fx);\n "}, {"sha": "8bb143ed3da8d0af445ad7d6d4acd5f5fde4aa11", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1199,15 +1199,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n                     .unwrap_or(stem);\n \n-                // GCC can have an optional target prefix.\n+                // GCC/Clang can have an optional target prefix.\n                 let flavor = if stem == \"emcc\" {\n                     LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"g++\"\n                     || stem.ends_with(\"-g++\")\n                     || stem == \"clang\"\n+                    || stem.ends_with(\"-clang\")\n                     || stem == \"clang++\"\n+                    || stem.ends_with(\"-clang++\")\n                 {\n                     LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n                 } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {"}, {"sha": "c34f1dbf8569da79ebbfdb083e20f68f95745de2", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -46,7 +46,7 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 // NOTE: ideally, we want the effects of both `unchecked_smul` and `unchecked_umul`\n                 // (resulting in `mul nsw nuw` in LLVM IR), since we know that the multiplication\n                 // cannot signed wrap, and that both operands are non-negative. But at the time of writing,\n-                // `BuilderMethods` can't do this, and it doesn't seem to enable any further optimizations.\n+                // the `LLVM-C` binding can't do this, and it doesn't seem to enable any further optimizations.\n                 bx.unchecked_smul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n                 bx.const_usize(unit.align.abi.bytes()),\n             )"}, {"sha": "f9aa2aecf65bc550296c1391af305275d6a06d3f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -563,15 +563,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // with #[rustc_inherit_overflow_checks] and inlined from\n         // another crate (mostly core::num generic/#[inline] fns),\n         // while the current crate doesn't use overflow checks.\n-        if !bx.cx().check_overflow() {\n-            let overflow_not_to_check = match msg {\n-                AssertKind::OverflowNeg(..) => true,\n-                AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                _ => false,\n-            };\n-            if overflow_not_to_check {\n-                const_cond = Some(expected);\n-            }\n+        if !bx.cx().check_overflow() && msg.is_optional_overflow_check() {\n+            const_cond = Some(expected);\n         }\n \n         // Don't codegen the panic block if success if known."}, {"sha": "c134d3a6b2f2a41b40bfc5f70ecbebd5f4776050", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -155,7 +155,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Whether Assert(OverflowNeg) and Assert(Overflow) MIR terminators should actually\n     /// check for overflow.\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n@@ -474,7 +474,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         false\n     }\n "}, {"sha": "c2d1bc11c37b5e62edc51a9344de56ac23ea04b4", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -138,12 +138,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let ignored = M::ignore_checkable_overflow_assertions(self)\n-                    && match msg {\n-                        mir::AssertKind::OverflowNeg(..) => true,\n-                        mir::AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n+                let ignored =\n+                    M::ignore_optional_overflow_checks(self) && msg.is_optional_overflow_check();\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n                 if ignored || expected == cond_val {\n                     self.go_to_block(target);"}, {"sha": "f2a904a6654da7bd9fbbb9502973456a6093230a", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -9,7 +9,7 @@ edition = \"2021\"\n arrayvec = { version = \"0.7\", default-features = false }\n bitflags = \"1.2.1\"\n cfg-if = \"1.0\"\n-ena = \"0.14.1\"\n+ena = \"0.14.2\"\n indexmap = { version = \"1.9.1\" }\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n libc = \"0.2\""}, {"sha": "27a869eb7cdb013afba153a1e0206df0bfbb6b66", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -97,7 +97,17 @@ pub trait ObligationProcessor {\n     type Error: Debug;\n     type OUT: OutcomeTrait<Obligation = Self::Obligation, Error = Error<Self::Obligation, Self::Error>>;\n \n-    fn needs_process_obligation(&self, obligation: &Self::Obligation) -> bool;\n+    /// Implementations can provide a fast-path to obligation-processing\n+    /// by counting the prefix of the passed iterator for which\n+    /// `needs_process_obligation` would return false.\n+    fn skippable_obligations<'a>(\n+        &'a self,\n+        _it: impl Iterator<Item = &'a Self::Obligation>,\n+    ) -> usize {\n+        0\n+    }\n+\n+    fn needs_process_obligation(&self, _obligation: &Self::Obligation) -> bool;\n \n     fn process_obligation(\n         &mut self,\n@@ -416,6 +426,10 @@ impl<O: ForestObligation> ObligationForest<O> {\n         loop {\n             let mut has_changed = false;\n \n+            // This is the super fast path for cheap-to-check conditions.\n+            let mut index =\n+                processor.skippable_obligations(self.nodes.iter().map(|n| &n.obligation));\n+\n             // Note that the loop body can append new nodes, and those new nodes\n             // will then be processed by subsequent iterations of the loop.\n             //\n@@ -424,9 +438,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // `for index in 0..self.nodes.len() { ... }` because the range would\n             // be computed with the initial length, and we would miss the appended\n             // nodes. Therefore we use a `while` loop.\n-            let mut index = 0;\n             while let Some(node) = self.nodes.get_mut(index) {\n-                // This test is extremely hot.\n+                // This is the moderately fast path when the prefix skipping above didn't work out.\n                 if node.state.get() != NodeState::Pending\n                     || !processor.needs_process_obligation(&node.obligation)\n                 {"}, {"sha": "d104ff0891d34d06b95089a27cb19b78ce7853ed", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -513,6 +513,7 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n E0791: include_str!(\"./error_codes/E0791.md\"),\n E0792: include_str!(\"./error_codes/E0792.md\"),\n E0793: include_str!(\"./error_codes/E0793.md\"),\n+E0794: include_str!(\"./error_codes/E0794.md\"),\n }\n \n // Undocumented removed error codes. Note that many removed error codes are documented."}, {"sha": "9e85234bdbb3ab7532c32d99cd2d92c52e9400a1", "filename": "compiler/rustc_error_codes/src/error_codes/E0206.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0206.md?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n-The `Copy` trait was implemented on a type which is neither a struct nor an\n-enum.\n+The `Copy` trait was implemented on a type which is neither a struct, an\n+enum, nor a union.\n \n Erroneous code example:\n \n@@ -10,6 +10,6 @@ struct Bar;\n impl Copy for &'static mut Bar { } // error!\n ```\n \n-You can only implement `Copy` for a struct or an enum.\n+You can only implement `Copy` for a struct, an enum, or a union.\n The previous example will fail because `&'static mut Bar`\n-is not a struct or enum.\n+is not a struct, an enum, or a union."}, {"sha": "a33802885c00644762f370b176313767ff23ad8d", "filename": "compiler/rustc_error_codes/src/error_codes/E0794.md", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,64 @@\n+A lifetime parameter of a function definition is called *late-bound* if it both:\n+\n+1. appears in an argument type\n+2. does not appear in a generic type constraint\n+\n+You cannot specify lifetime arguments for late-bound lifetime parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0794\n+fn foo<'a>(x: &'a str) -> &'a str { x }\n+let _ = foo::<'static>;\n+```\n+\n+The type of a concrete instance of a generic function is universally quantified\n+over late-bound lifetime parameters. This is because we want the function to\n+work for any lifetime substituted for the late-bound lifetime parameter, no\n+matter where the function is called. Consequently, it doesn't make sense to\n+specify arguments for late-bound lifetime parameters, since they are not\n+resolved until the function's call site(s).\n+\n+To fix the issue, remove the specified lifetime:\n+\n+```\n+fn foo<'a>(x: &'a str) -> &'a str { x }\n+let _ = foo;\n+```\n+\n+### Additional information\n+\n+Lifetime parameters that are not late-bound are called *early-bound*.\n+Confusion may arise from the fact that late-bound and early-bound\n+lifetime parameters are declared the same way in function definitions.\n+When referring to a function pointer type, universal quantification over\n+late-bound lifetime parameters can be made explicit:\n+\n+```\n+trait BarTrait<'a> {}\n+\n+struct Bar<'a> {\n+    s: &'a str\n+}\n+\n+impl<'a> BarTrait<'a> for Bar<'a> {}\n+\n+fn bar<'a, 'b, T>(x: &'a str, _t: T) -> &'a str\n+where T: BarTrait<'b>\n+{\n+    x\n+}\n+\n+let bar_fn: for<'a> fn(&'a str, Bar<'static>) -> &'a str = bar; // OK\n+let bar_fn2 = bar::<'static, Bar>; // Not allowed\n+let bar_fn3 = bar::<Bar>; // OK\n+```\n+\n+In the definition of `bar`, the lifetime parameter `'a` is late-bound, while\n+`'b` is early-bound. This is reflected in the type annotation for `bar_fn`,\n+where `'a` is universally quantified and `'b` is substituted by a specific\n+lifetime. It is not allowed to explicitly specify early-bound lifetime\n+arguments when late-bound lifetime parameters are present (as for `bar_fn2`,\n+see issue #42868: https://github.com/rust-lang/rust/issues/42868), although the\n+types that are constrained by early-bound parameters can be specified (as for\n+`bar_fn3`)."}, {"sha": "6bc393c6534f3597e2dd12deb9d3a0d05e4affbd", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -245,12 +245,24 @@ pub(super) fn emit_frag_parse_err(\n                 e.note(\n                     \"the macro call doesn't expand to an expression, but it can expand to a statement\",\n                 );\n-                e.span_suggestion_verbose(\n-                    site_span.shrink_to_hi(),\n-                    \"add `;` to interpret the expansion as a statement\",\n-                    \";\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+\n+                if parser.token == token::Semi {\n+                    if let Ok(snippet) = parser.sess.source_map().span_to_snippet(site_span) {\n+                        e.span_suggestion_verbose(\n+                            site_span,\n+                            \"surround the macro invocation with `{}` to interpret the expansion as a statement\",\n+                            format!(\"{{ {}; }}\", snippet),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                } else {\n+                    e.span_suggestion_verbose(\n+                        site_span.shrink_to_hi(),\n+                        \"add `;` to interpret the expansion as a statement\",\n+                        \";\",\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         },\n         _ => annotate_err_with_kind(&mut e, kind, site_span),"}, {"sha": "3d644de166526343d977bb09b7067162571fdd4a", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -91,7 +91,7 @@ declare_features! (\n     /// Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     /// Allows using the CMPXCHG16B target feature.\n-    (accepted, cmpxchg16b_target_feature, \"CURRENT_RUSTC_VERSION\", Some(44839), None),\n+    (accepted, cmpxchg16b_target_feature, \"1.69.0\", Some(44839), None),\n     /// Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n     /// Allows `impl Trait` in function return types."}, {"sha": "e0a7c864b94dc964cc1b577a0d7c23cbec6112f7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -161,7 +161,7 @@ declare_features! (\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n-    (active, multiple_supertrait_upcastable, \"CURRENT_RUSTC_VERSION\", None, None),\n+    (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n@@ -214,7 +214,7 @@ declare_features! (\n     /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n     (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n     /// Allows using `+bundled,+whole-archive` native libs.\n-    (active, packed_bundled_libs, \"CURRENT_RUSTC_VERSION\", Some(108081), None),\n+    (active, packed_bundled_libs, \"1.69.0\", Some(108081), None),\n     /// Allows using the `#![panic_runtime]` attribute.\n     (active, panic_runtime, \"1.10.0\", Some(32837), None),\n     /// Allows using `#[rustc_allow_const_fn_unstable]`.\n@@ -468,7 +468,7 @@ declare_features! (\n     /// Allows using the `non_exhaustive_omitted_patterns` lint.\n     (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n     /// Allows `for<T>` binders in where-clauses\n-    (incomplete, non_lifetime_binders, \"CURRENT_RUSTC_VERSION\", Some(108185), None),\n+    (incomplete, non_lifetime_binders, \"1.69.0\", Some(108185), None),\n     /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n     /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden."}, {"sha": "f4b46b9a131fb8cf9c4e811defde9a885f7c275c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1673,7 +1673,6 @@ pub struct Expr<'hir> {\n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n-            ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n@@ -1763,7 +1762,6 @@ impl Expr<'_> {\n             | ExprKind::Lit(_)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Unary(..)\n-            | ExprKind::Box(..)\n             | ExprKind::AddrOf(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n@@ -1851,7 +1849,6 @@ impl Expr<'_> {\n             | ExprKind::InlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::ConstBlock(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n             | ExprKind::DropTemps(..)\n@@ -1862,8 +1859,7 @@ impl Expr<'_> {\n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.kind {\n-            ExprKind::Box(_)\n-            | ExprKind::Array(_)\n+            ExprKind::Array(_)\n             | ExprKind::Call(..)\n             | ExprKind::Tup(_)\n             | ExprKind::Lit(_)\n@@ -1910,8 +1906,6 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n \n #[derive(Debug, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n-    /// A `box x` expression.\n-    Box(&'hir Expr<'hir>),\n     /// Allow anonymous constants from an inline `const` block\n     ConstBlock(AnonConst),\n     /// An array (e.g., `[a, b, c, d]`)."}, {"sha": "234256ab553c5c65e3eac750fb27314de0e1585f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -682,7 +682,6 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n-        ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "3b5c67de2390e69198ca0bde9b9676c2843cb973", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -612,7 +612,7 @@ pub(crate) fn prohibit_explicit_late_bound_lifetimes(\n         if position == GenericArgPosition::Value\n             && args.num_lifetime_params() != param_counts.lifetimes\n         {\n-            let mut err = tcx.sess.struct_span_err(span, msg);\n+            let mut err = struct_span_err!(tcx.sess, span, E0794, \"{}\", msg);\n             err.span_note(span_late, note);\n             err.emit();\n         } else {"}, {"sha": "2e788de9faba51e670afa1bb1f97a23ccf766491", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2396,13 +2396,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     tcx,\n                                     infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id),\n                                 );\n+                                // I guess we don't need to make a universe unless we need it,\n+                                // but also we're on the error path, so it doesn't matter here.\n+                                let universe = infcx.create_next_universe();\n                                 infcx\n                                     .can_eq(\n                                         ty::ParamEnv::empty(),\n                                         impl_.self_ty(),\n-                                        // Must fold past escaping bound vars too,\n-                                        // since we have those at this point in astconv.\n-                                        tcx.fold_regions(qself_ty, |_, _| tcx.lifetimes.re_erased),\n+                                        tcx.replace_escaping_bound_vars_uncached(qself_ty, ty::fold::FnMutDelegate {\n+                                            regions: &mut |_| tcx.lifetimes.re_erased,\n+                                            types: &mut |bv| tcx.mk_placeholder(ty::PlaceholderType {\n+                                                universe,\n+                                                name: bv.kind,\n+                                            }),\n+                                            consts: &mut |bv, ty| tcx.mk_const(ty::PlaceholderConst {\n+                                                universe,\n+                                                name: bv\n+                                            }, ty),\n+                                        })\n                                     )\n                             })\n                             && tcx.impl_polarity(impl_def_id) != ty::ImplPolarity::Negative\n@@ -3317,10 +3328,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             tcx,\n             trait_ref.substs.extend_to(tcx, assoc.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );\n+        let fn_sig = tcx.liberate_late_bound_regions(fn_hir_id.expect_owner().to_def_id(), fn_sig);\n \n-        let ty = if let Some(arg_idx) = arg_idx { fn_sig.input(arg_idx) } else { fn_sig.output() };\n-\n-        Some(tcx.liberate_late_bound_regions(fn_hir_id.expect_owner().to_def_id(), ty))\n+        Some(if let Some(arg_idx) = arg_idx {\n+            *fn_sig.inputs().get(arg_idx)?\n+        } else {\n+            fn_sig.output()\n+        })\n     }\n \n     #[instrument(level = \"trace\", skip(self, generate_err))]"}, {"sha": "872fec3954b2999a1c36738c8430fbcd33d154f4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -557,7 +557,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             check_opaque(tcx, id);\n         }\n         DefKind::ImplTraitPlaceholder => {\n-            let parent = tcx.impl_trait_in_trait_parent(id.owner_id.to_def_id());\n+            let parent = tcx.impl_trait_in_trait_parent_fn(id.owner_id.to_def_id());\n             // Only check the validity of this opaque type if the function has a default body\n             if let hir::Node::TraitItem(hir::TraitItem {\n                 kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),"}, {"sha": "32b6aeed5f8cc3de34a03a97587dd9bd4b14ecbc", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1205,6 +1205,17 @@ fn compare_number_of_generics<'tcx>(\n         return Ok(());\n     }\n \n+    // We never need to emit a separate error for RPITITs, since if an RPITIT\n+    // has mismatched type or const generic arguments, then the method that it's\n+    // inheriting the generics from will also have mismatched arguments, and\n+    // we'll report an error for that instead. Delay a bug for safety, though.\n+    if tcx.opt_rpitit_info(trait_.def_id).is_some() {\n+        return Err(tcx.sess.delay_span_bug(\n+            rustc_span::DUMMY_SP,\n+            \"errors comparing numbers of generics of trait/impl functions were not emitted\",\n+        ));\n+    }\n+\n     let matchings = [\n         (\"type\", trait_own_counts.types, impl_own_counts.types),\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),"}, {"sha": "4120ad45f6a6b79a474f096b44710b6a9d7c6c78", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,7 +1,6 @@\n use crate::autoderef::Autoderef;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1548,16 +1547,27 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n     {\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): Even with the new lowering\n+        // strategy, we can't just call `check_associated_item` on the new RPITITs,\n+        // because tests like `tests/ui/async-await/in-trait/implied-bounds.rs` will fail.\n+        // That's because we need to check that the bounds of the RPITIT hold using\n+        // the special substs that we create during opaque type lowering, otherwise we're\n+        // getting a bunch of early bound and free regions mixed up... Haven't looked too\n+        // deep into this, though.\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n-                && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n-                && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n+                // RPITITs are always eagerly normalized into opaques, so always look for an\n+                // opaque here.\n+                && let ty::Alias(ty::Opaque, opaque_ty) = ty.kind()\n+                && let Some(opaque_def_id) = opaque_ty.def_id.as_local()\n+                && let opaque = tcx.hir().expect_item(opaque_def_id).expect_opaque_ty()\n+                && let hir::OpaqueTyOrigin::FnReturn(source) | hir::OpaqueTyOrigin::AsyncFn(source) = opaque.origin\n+                && source == fn_def_id\n             {\n-                let span = tcx.def_span(proj.def_id);\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);\n+                let span = tcx.def_span(opaque_ty.def_id);\n+                let bounds = wfcx.tcx().explicit_item_bounds(opaque_ty.def_id);\n                 let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                    let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n+                    let bound = ty::EarlyBinder(bound).subst(tcx, opaque_ty.substs);\n                     let normalized_bound = wfcx.normalize(span, None, bound);\n                     traits::wf::predicate_obligations(\n                         wfcx.infcx,"}, {"sha": "df0258ff7a36cec30173f64ad6589f211f1dcfe2", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -76,18 +76,26 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n-    // generated the synthesized associate type.\n-    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n-        tcx.opt_rpitit_info(def_id)\n-    {\n-        Some(opaque_def_id)\n-    } else {\n-        None\n-    };\n+    match tcx.opt_rpitit_info(def_id) {\n+        // RPITIT's bounds are the same as opaque type bounds, but with\n+        // a projection self type.\n+        Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n+            let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n+            let opaque_ty = item.expect_opaque_ty();\n+            return opaque_type_bounds(\n+                tcx,\n+                opaque_def_id,\n+                opaque_ty.bounds,\n+                tcx.mk_projection(def_id, ty::InternalSubsts::identity_for_item(tcx, def_id)),\n+                item.span,\n+            );\n+        }\n+        // These should have been fed!\n+        Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n+        None => {}\n+    }\n \n-    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -100,12 +108,12 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => {\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            let item_ty = if *in_trait || rpitit_info.is_some() {\n+            let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 tcx.mk_projection(def_id, substs)\n             } else {\n                 tcx.mk_opaque(def_id, substs)\n             };\n-            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "361e8948e851a4b066d3953261b9153d193e3e40", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -112,10 +112,14 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                    if matches!(\n-                        self.tcx.def_kind(*def_id),\n-                        DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                    ) =>\n+                    if matches!(self.tcx.def_kind(*def_id), DefKind::OpaqueTy) =>\n+                {\n+                    self.visit_opaque(*def_id, substs)\n+                }\n+                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) check whether this is necessary\n+                // at all for RPITITs.\n+                ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                    if self.tcx.is_impl_trait_in_trait(*def_id) =>\n                 {\n                     self.visit_opaque(*def_id, substs)\n                 }"}, {"sha": "63ea6c904775f48f576c0180a1376cb0452b93c8", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1366,10 +1366,6 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match expr.kind {\n-            hir::ExprKind::Box(expr) => {\n-                self.word_space(\"Box::new\");\n-                self.print_call_post(std::slice::from_ref(expr));\n-            }\n             hir::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);\n             }"}, {"sha": "035ccf30b2462acf81ee418989b1c638c9cfa3aa", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // check that the `if` expr without `else` is the fn body's expr\n                 if expr.span == sp {\n-                    return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n+                    return self.get_fn_decl(hir_id).and_then(|(_, fn_decl, _)| {\n                         let span = fn_decl.output.span();\n                         let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n                         Some((span, format!(\"expected `{snippet}` because of this return type\")))"}, {"sha": "ec391ea80f48b97ca09f91d4fa9988beb2c099b1", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2,7 +2,6 @@\n \n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n-use hir::def::DefKind;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -715,14 +714,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n-                self.tcx\n-                    .bound_explicit_item_bounds(proj.def_id)\n-                    .subst_iter_copied(self.tcx, proj.substs)\n-                    .find_map(|(p, s)| get_future_output(p, s))?\n-            }\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n+                .tcx\n+                .bound_explicit_item_bounds(proj.def_id)\n+                .subst_iter_copied(self.tcx, proj.substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable: {ret_ty}\""}, {"sha": "a27905ea46c9453880193876b3c3aab59acf3dfb", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1722,20 +1722,21 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n                 }\n             }\n-            fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+            fcx.get_node_fn_decl(parent)\n+                .map(|(fn_id, fn_decl, _, is_main)| (fn_id, fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)\n         };\n \n-        if let Some((fn_decl, can_suggest)) = fn_decl {\n+        if let Some((fn_id, fn_decl, can_suggest)) = fn_decl {\n             if blk_id.is_none() {\n                 pointing_at_return_type |= fcx.suggest_missing_return_type(\n                     &mut err,\n                     &fn_decl,\n                     expected,\n                     found,\n                     can_suggest,\n-                    fcx.tcx.hir().get_parent_item(id).into(),\n+                    fn_id,\n                 );\n             }\n             if !pointing_at_return_type {\n@@ -1746,17 +1747,11 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n         let parent_item = fcx.tcx.hir().get_by_def_id(parent_id.def_id);\n \n-        if let (Some(expr), Some(_), Some((fn_decl, _, _))) =\n+        if let (Some(expr), Some(_), Some((fn_id, fn_decl, _, _))) =\n             (expression, blk_id, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n-                &mut err,\n-                expr,\n-                fn_decl,\n-                expected,\n-                found,\n-                id,\n-                parent_id.into(),\n+                &mut err, expr, fn_decl, expected, found, id, fn_id,\n             );\n         }\n \n@@ -1882,7 +1877,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     }\n \n     fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n-        if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id)\n+        if let Some((_, fn_decl, _)) = fcx.get_fn_decl(blk_id)\n             && let hir::FnRetTy::Return(ty) = fn_decl.output\n             && let ty = fcx.astconv().ast_ty_to_ty( ty)\n             && let ty::Dynamic(..) = ty.kind()"}, {"sha": "29db16849dd5b48251ad460d0e568d285069a100", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -284,7 +284,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tcx = self.tcx;\n         match expr.kind {\n-            ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs, expected),\n             ExprKind::Assign(lhs, rhs, span) => {\n@@ -359,16 +358,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_box(&self, expr: &'tcx hir::Expr<'tcx>, expected: Expectation<'tcx>) -> Ty<'tcx> {\n-        let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| match ty.kind() {\n-            ty::Adt(def, _) if def.is_box() => Expectation::rvalue_hint(self, ty.boxed_ty()),\n-            _ => NoExpectation,\n-        });\n-        let referent_ty = self.check_expr_with_expectation(expr, expected_inner);\n-        self.require_type_is_sized(referent_ty, expr.span, traits::SizedBoxType);\n-        self.tcx.mk_box(referent_ty)\n-    }\n-\n     fn check_expr_unary(\n         &self,\n         unop: hir::UnOp,\n@@ -799,7 +788,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.ret_coercion_span.set(Some(expr.span));\n             }\n             let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n-            if let Some((fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n+            if let Some((_, fn_decl, _)) = self.get_fn_decl(expr.hir_id) {\n                 coercion.coerce_forced_unit(\n                     self,\n                     &cause,"}, {"sha": "9aa6c7f103f87116c692562e9baae3548ed95d85", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -356,10 +356,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.walk_captures(closure);\n             }\n \n-            hir::ExprKind::Box(ref base) => {\n-                self.consume_expr(base);\n-            }\n-\n             hir::ExprKind::Yield(value, _) => {\n                 self.consume_expr(value);\n             }"}, {"sha": "8455076de56348bb28d958e1d69c6a394ab548dd", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -898,51 +898,74 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n-    /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n+    /// Given a function `Node`, return its  `HirId` and `FnDecl` if it exists. Given a closure\n+    /// that is the child of a function, return that function's `HirId` and `FnDecl` instead.\n+    /// This may seem confusing at first, but this is used in diagnostics for `async fn`,\n+    /// for example, where most of the type checking actually happens within a nested closure,\n+    /// but we often want access to the parent function's signature.\n+    ///\n+    /// Otherwise, return false.\n     pub(in super::super) fn get_node_fn_decl(\n         &self,\n         node: Node<'tcx>,\n-    ) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident, bool)> {\n+    ) -> Option<(hir::HirId, &'tcx hir::FnDecl<'tcx>, Ident, bool)> {\n         match node {\n-            Node::Item(&hir::Item { ident, kind: hir::ItemKind::Fn(ref sig, ..), .. }) => {\n+            Node::Item(&hir::Item {\n+                ident,\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n+                owner_id,\n+                ..\n+            }) => {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((&sig.decl, ident, ident.name != sym::main))\n+                Some((\n+                    hir::HirId::make_owner(owner_id.def_id),\n+                    &sig.decl,\n+                    ident,\n+                    ident.name != sym::main,\n+                ))\n             }\n             Node::TraitItem(&hir::TraitItem {\n                 ident,\n                 kind: hir::TraitItemKind::Fn(ref sig, ..),\n+                owner_id,\n                 ..\n-            }) => Some((&sig.decl, ident, true)),\n+            }) => Some((hir::HirId::make_owner(owner_id.def_id), &sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n                 ident,\n                 kind: hir::ImplItemKind::Fn(ref sig, ..),\n+                owner_id,\n                 ..\n-            }) => Some((&sig.decl, ident, false)),\n-            Node::Expr(&hir::Expr {\n-                hir_id,\n-                kind: hir::ExprKind::Closure(..),\n-                ..\n-            }) if let Some(Node::Item(&hir::Item {\n+            }) => Some((hir::HirId::make_owner(owner_id.def_id), &sig.decl, ident, false)),\n+            Node::Expr(&hir::Expr { hir_id, kind: hir::ExprKind::Closure(..), .. })\n+                if let Some(Node::Item(&hir::Item {\n+                    ident,\n+                    kind: hir::ItemKind::Fn(ref sig, ..),\n+                    owner_id,\n+                    ..\n+                })) = self.tcx.hir().find_parent(hir_id) => Some((\n+                hir::HirId::make_owner(owner_id.def_id),\n+                &sig.decl,\n                 ident,\n-                kind: hir::ItemKind::Fn(ref sig, ..),\n-                ..\n-            })) = self.tcx.hir().find_parent(hir_id) => {\n-                Some((&sig.decl, ident, ident.name != sym::main))\n-            },\n+                ident.name != sym::main,\n+            )),\n             _ => None,\n         }\n     }\n \n-    /// Given a `HirId`, return the `FnDecl` of the method it is enclosed by and whether a\n+    /// Given a `HirId`, return the `HirId` of the enclosing function, its `FnDecl`, and whether a\n     /// suggestion can be made, `None` otherwise.\n-    pub fn get_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, bool)> {\n+    pub fn get_fn_decl(\n+        &self,\n+        blk_id: hir::HirId,\n+    ) -> Option<(hir::HirId, &'tcx hir::FnDecl<'tcx>, bool)> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n         self.tcx.hir().get_return_block(blk_id).and_then(|blk_id| {\n             let parent = self.tcx.hir().get(blk_id);\n-            self.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+            self.get_node_fn_decl(parent)\n+                .map(|(fn_id, fn_decl, _, is_main)| (fn_id, fn_decl, is_main))\n         })\n     }\n "}, {"sha": "61338ac613aea50cc8d2e9175c6184d8f215e741", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1669,7 +1669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n     fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident)> {\n         let parent = self.tcx.hir().get_by_def_id(self.tcx.hir().get_parent_item(blk_id).def_id);\n-        self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n+        self.get_node_fn_decl(parent).map(|(_, fn_decl, ident, _)| (fn_decl, ident))\n     }\n \n     /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail"}, {"sha": "7a09ea40d7974b3b3af8b45e0039e79ff3728fb4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -64,8 +64,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr = expr.peel_drop_temps();\n         self.suggest_missing_semicolon(err, expr, expected, false);\n         let mut pointing_at_return_type = false;\n-        if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+        if let Some((fn_id, fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type = self.suggest_missing_return_type(\n                 err,\n                 &fn_decl,"}, {"sha": "1eeb7d984ee04016dd0874c1b431ade81e9650ef", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -190,7 +190,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             //\n             // Some of these may be interesting in the future\n             ExprKind::Path(..)\n-            | ExprKind::Box(..)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n@@ -478,7 +477,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Cast(..)\n             | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)"}, {"sha": "9a8d7ca9e33826adf923f0b3564de3e2c0d6309b", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -382,7 +382,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }"}, {"sha": "de1a2e6a577bf83cc24416a4fe9bfd035c3734ff", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -359,10 +359,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         let (def_id, substs) = match *ty.kind() {\n             ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                if matches!(\n-                    self.tcx.def_kind(def_id),\n-                    DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                ) =>\n+                if matches!(self.tcx.def_kind(def_id), DefKind::OpaqueTy) =>\n+            {\n+                (def_id, substs)\n+            }\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                if self.tcx.is_impl_trait_in_trait(def_id) =>\n             {\n                 (def_id, substs)\n             }\n@@ -1757,8 +1759,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 )\n                             }\n                             (true, ty::Alias(ty::Projection, proj))\n-                                if self.tcx.def_kind(proj.def_id)\n-                                    == DefKind::ImplTraitPlaceholder =>\n+                                if self.tcx.is_impl_trait_in_trait(proj.def_id) =>\n                             {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(proj.def_id).lo());"}, {"sha": "b38bbdfe7bb8b9ec4ad55835715a7b82347efa95", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,7 +1,7 @@\n use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n-use rustc_hir::{self as hir, def::DefKind};\n+use rustc_hir as hir;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -75,7 +75,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n-                        if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n+                        if !tcx.is_impl_trait_in_trait(proj.def_id) =>\n                     {\n                         let p_def_id = tcx\n                             .generics_of(body_owner_def_id)\n@@ -222,7 +222,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Alias(ty::Projection, proj_ty), _) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (ty::Alias(ty::Projection, proj_ty), _) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -231,7 +231,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Alias(ty::Projection, proj_ty)) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (_, ty::Alias(ty::Projection, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "aeb4ddb42125973c12b4bce38f34f967f2c5a3c1", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -187,6 +187,16 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.projection_cache.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n+    fn try_type_variables_probe_ref(\n+        &self,\n+        vid: ty::TyVid,\n+    ) -> Option<&type_variable::TypeVariableValue<'tcx>> {\n+        // Uses a read-only view of the unification table, this way we don't\n+        // need an undo log.\n+        self.type_variable_storage.eq_relations_ref().try_probe_value(vid)\n+    }\n+\n     #[inline]\n     fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {\n         self.type_variable_storage.with_log(&mut self.undo_log)\n@@ -1646,6 +1656,28 @@ impl<'tcx> InferCtxt<'tcx> {\n         tcx.const_eval_resolve_for_typeck(param_env_erased, unevaluated, span)\n     }\n \n+    /// The returned function is used in a fast path. If it returns `true` the variable is\n+    /// unchanged, `false` indicates that the status is unknown.\n+    #[inline]\n+    pub fn is_ty_infer_var_definitely_unchanged<'a>(\n+        &'a self,\n+    ) -> (impl Fn(TyOrConstInferVar<'tcx>) -> bool + 'a) {\n+        // This hoists the borrow/release out of the loop body.\n+        let inner = self.inner.try_borrow();\n+\n+        return move |infer_var: TyOrConstInferVar<'tcx>| match (infer_var, &inner) {\n+            (TyOrConstInferVar::Ty(ty_var), Ok(inner)) => {\n+                use self::type_variable::TypeVariableValue;\n+\n+                match inner.try_type_variables_probe_ref(ty_var) {\n+                    Some(TypeVariableValue::Unknown { .. }) => true,\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n+    }\n+\n     /// `ty_or_const_infer_var_changed` is equivalent to one of these two:\n     ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)\n     ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)"}, {"sha": "49f823a47b83d3c462783e33b2b26b5cefa031cf", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -3,7 +3,6 @@ use super::{DefineOpaqueTypes, InferResult};\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n-use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -478,9 +477,7 @@ where\n                 }\n             }\n \n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => {\n                 // Skip lifetime parameters that are not captures.\n                 let variances = self.tcx.variances_of(proj.def_id);\n \n@@ -559,8 +556,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n                     ty::Alias(ty::Projection, projection_ty)\n                         if !projection_ty.has_escaping_bound_vars()\n-                            && tcx.def_kind(projection_ty.def_id)\n-                                != DefKind::ImplTraitPlaceholder =>\n+                            && !tcx.is_impl_trait_in_trait(projection_ty.def_id) =>\n                     {\n                         self.infer_projection(\n                             param_env,"}, {"sha": "f7ab05b2d498aa3fbbc0b62817a7ab2e2204d5f9", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -190,6 +190,11 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n     ) -> TypeVariableTable<'a, 'tcx> {\n         TypeVariableTable { storage: self, undo_log }\n     }\n+\n+    #[inline]\n+    pub(crate) fn eq_relations_ref(&self) -> &ut::UnificationTableStorage<TyVidEqKey<'tcx>> {\n+        &self.eq_relations\n+    }\n }\n \n impl<'tcx> TypeVariableTable<'_, 'tcx> {"}, {"sha": "fc151730223d998f1f7f829a80995557f7d13ea5", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -224,8 +224,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast::ExprKind::Closure(box ast::Closure {\n                 asyncness: ast::Async::Yes { closure_id, .. },\n                 ..\n-            })\n-            | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n+            }) => self.check_id(closure_id),\n             _ => {}\n         }\n     }"}, {"sha": "c778574b2c57b15d59070f3f6ba9c18cc78325e4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1028,7 +1028,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::InlineConst => true,\n \n         DefKind::ImplTraitPlaceholder => {\n-            let parent_def_id = tcx.impl_trait_in_trait_parent(def_id.to_def_id());\n+            let parent_def_id = tcx.impl_trait_in_trait_parent_fn(def_id.to_def_id());\n             let assoc_item = tcx.associated_item(parent_def_id);\n             match assoc_item.container {\n                 // Always encode an RPIT in an impl fn, since it always has a body"}, {"sha": "42c0354d03af5eddc5c9f5eee54c490d7173336d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1268,6 +1268,13 @@ impl<'tcx> BasicBlockData<'tcx> {\n }\n \n impl<O> AssertKind<O> {\n+    /// Returns true if this an overflow checking assertion controlled by -C overflow-checks.\n+    pub fn is_optional_overflow_check(&self) -> bool {\n+        use AssertKind::*;\n+        use BinOp::*;\n+        matches!(self, OverflowNeg(..) | Overflow(Add | Sub | Mul | Shl | Shr, ..))\n+    }\n+\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n     /// The caller is expected to handle `BoundsCheck` separately.\n@@ -1992,16 +1999,6 @@ impl BorrowKind {\n     }\n }\n \n-impl BinOp {\n-    /// The checkable operators are those whose overflow checking behavior is controlled by\n-    /// -Coverflow-checks option. The remaining operators have either no overflow conditions (e.g.,\n-    /// BitAnd, BitOr, BitXor) or are always checked for overflow (e.g., Div, Rem).\n-    pub fn is_checkable(self) -> bool {\n-        use self::BinOp::*;\n-        matches!(self, Add | Sub | Mul | Shl | Shr)\n-    }\n-}\n-\n impl<'tcx> Debug for Rvalue<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Rvalue::*;"}, {"sha": "b16b6616415aab79f5fba0ee3ac487f4a607a228", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -646,8 +646,7 @@ pub enum TerminatorKind<'tcx> {\n     /// When overflow checking is disabled and this is run-time MIR (as opposed to compile-time MIR\n     /// that is used for CTFE), the following variants of this terminator behave as `goto target`:\n     /// - `OverflowNeg(..)`,\n-    /// - `Overflow(op, ..)` if op is a \"checkable\" operation (add, sub, mul, shl, shr, but NOT\n-    /// div or rem).\n+    /// - `Overflow(op, ..)` if op is add, sub, mul, shl, shr, but NOT div or rem.\n     Assert {\n         cond: Operand<'tcx>,\n         expected: bool,"}, {"sha": "c8860cc55f6b71f3a41dd712792a6af7dd6fcfb3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -191,6 +191,7 @@ rustc_queries! {\n     {\n         desc { \"determine whether the opaque is a type-alias impl trait\" }\n         separate_provide_extern\n+        feedable\n     }\n \n     query unsizing_params_for_adt(key: DefId) -> &'tcx rustc_index::bit_set::BitSet<u32>"}, {"sha": "fb3e9cb1263178a260786aef60b85a889a39a243", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -305,8 +305,6 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be `Sized`.\n     SizedYieldType,\n-    /// Box expression result type must be `Sized`.\n-    SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[expr; N]` requires `type_of(expr): Copy`."}, {"sha": "6ef8384d0107a5c75875f1ee0b1b269040e24117", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2552,12 +2552,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n     }\n \n-    pub fn impl_trait_in_trait_parent(self, mut def_id: DefId) -> DefId {\n-        while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n-            debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n-            def_id = self.parent(def_id);\n+    pub fn impl_trait_in_trait_parent_fn(self, mut def_id: DefId) -> DefId {\n+        match self.opt_rpitit_info(def_id) {\n+            Some(ImplTraitInTraitData::Trait { fn_def_id, .. })\n+            | Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) => fn_def_id,\n+            None => {\n+                while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n+                    debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n+                    def_id = self.parent(def_id);\n+                }\n+                def_id\n+            }\n         }\n-        def_id\n     }\n \n     pub fn impl_method_has_trait_impl_trait_tys(self, def_id: DefId) -> bool {\n@@ -2572,6 +2578,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n \n+        if self.lower_impl_trait_in_trait_to_assoc_ty() {\n+            return !self.associated_items_for_impl_trait_in_trait(trait_item_def_id).is_empty();\n+        }\n+\n         // FIXME(RPITIT): This does a somewhat manual walk through the signature\n         // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n         // of work. We can probably remove this when we refactor RPITITs to be"}, {"sha": "fffdbfc9660bb1651794167f8c19b0319c42fb60", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Alias(ty::Projection, ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n-                    && self.tcx().def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n+                    && self.tcx().is_impl_trait_in_trait(data.def_id)\n                 {\n                     return self.pretty_print_opaque_impl_type(data.def_id, data.substs);\n                 } else {"}, {"sha": "4c606b939b25ed0b0eb88998a178c0ca943f71e6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1288,7 +1288,7 @@ impl<'tcx> AliasTy<'tcx> {\n         match tcx.def_kind(self.def_id) {\n             DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n             DefKind::ImplTraitPlaceholder => {\n-                tcx.parent(tcx.impl_trait_in_trait_parent(self.def_id))\n+                tcx.parent(tcx.impl_trait_in_trait_parent_fn(self.def_id))\n             }\n             kind => bug!(\"expected a projection AliasTy; found {kind:?}\"),\n         }"}, {"sha": "140d1154718f741ff101d91fc7ae5abf943f540e", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -73,19 +73,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[lhs], LocalInfo::Boring, NeedsTemporary::Maybe)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[lhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::Maybe\n+                    )\n                 );\n                 let rhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[rhs], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[rhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[arg], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[arg],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n@@ -272,8 +287,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[source], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[source],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n@@ -502,8 +522,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Category::of(&expr.kind),\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n-                let operand =\n-                    unpack!(block = this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No));\n+                let operand = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Use(operand))\n             }\n         }\n@@ -662,8 +684,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Repeating a const does nothing\n         } else {\n             // For a non-const, we may need to generate an appropriate `Drop`\n-            let value_operand =\n-                unpack!(block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No));\n+            let value_operand = unpack!(\n+                block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No)\n+            );\n             if let Operand::Move(to_drop) = value_operand {\n                 let success = this.cfg.start_new_block();\n                 this.cfg.terminate("}, {"sha": "2d52102db2cc6335674bdb308cd0640b841ad201", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2252,7 +2252,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 user_ty: None,\n                 source_info,\n                 internal: false,\n-                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n+                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(\n+                    BindingForm::RefForGuard,\n+                ))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "80d8b27336c5438ec4a1818e0f4d07c9733fd727", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -876,21 +876,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    **self.local_decls[local].local_info.as_mut().assert_crate_local() = if let Some(kind) = param.self_kind {\n-                        LocalInfo::User(\n-                            BindingForm::ImplicitSelf(kind),\n-                        )\n-                    } else {\n-                        let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                        LocalInfo::User(BindingForm::Var(\n-                            VarBindingForm {\n+                    **self.local_decls[local].local_info.as_mut().assert_crate_local() =\n+                        if let Some(kind) = param.self_kind {\n+                            LocalInfo::User(BindingForm::ImplicitSelf(kind))\n+                        } else {\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n+                            LocalInfo::User(BindingForm::Var(VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n-                            },\n-                        ))\n-                    };\n+                            }))\n+                        };\n                     self.var_indices.insert(var, LocalsForNode::One(local));\n                 }\n                 _ => {"}, {"sha": "cecb8a61aa2f48504542913f09e9a3fb3801e520", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -780,7 +780,6 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::DropTemps(ref source) => {\n                 ExprKind::Use { source: self.mirror_expr(source) }\n             }\n-            hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },\n             hir::ExprKind::Array(ref fields) => {\n                 ExprKind::Array { fields: self.mirror_exprs(fields) }\n             }"}, {"sha": "486275570bd111f93075d7565fb12880abf2d43b", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 32, "deletions": 101, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -655,26 +655,20 @@ where\n     ///\n     /// ```text\n     /// loop-block:\n-    ///    can_go = cur == length_or_end\n+    ///    can_go = cur == len\n     ///    if can_go then succ else drop-block\n     /// drop-block:\n-    ///    if ptr_based {\n-    ///        ptr = cur\n-    ///        cur = cur.offset(1)\n-    ///    } else {\n-    ///        ptr = &raw mut P[cur]\n-    ///        cur = cur + 1\n-    ///    }\n+    ///    ptr = &raw mut P[cur]\n+    ///    cur = cur + 1\n     ///    drop(ptr)\n     /// ```\n     fn drop_loop(\n         &mut self,\n         succ: BasicBlock,\n         cur: Local,\n-        length_or_end: Place<'tcx>,\n+        len: Local,\n         ety: Ty<'tcx>,\n         unwind: Unwind,\n-        ptr_based: bool,\n     ) -> BasicBlock {\n         let copy = |place: Place<'tcx>| Operand::Copy(place);\n         let move_ = |place: Place<'tcx>| Operand::Move(place);\n@@ -683,22 +677,19 @@ where\n         let ptr_ty = tcx.mk_ptr(ty::TypeAndMut { ty: ety, mutbl: hir::Mutability::Mut });\n         let ptr = Place::from(self.new_temp(ptr_ty));\n         let can_go = Place::from(self.new_temp(tcx.types.bool));\n-\n         let one = self.constant_usize(1);\n-        let (ptr_next, cur_next) = if ptr_based {\n-            (\n-                Rvalue::Use(copy(cur.into())),\n-                Rvalue::BinaryOp(BinOp::Offset, Box::new((move_(cur.into()), one))),\n-            )\n-        } else {\n-            (\n-                Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n-                Rvalue::BinaryOp(BinOp::Add, Box::new((move_(cur.into()), one))),\n-            )\n-        };\n \n         let drop_block = BasicBlockData {\n-            statements: vec![self.assign(ptr, ptr_next), self.assign(Place::from(cur), cur_next)],\n+            statements: vec![\n+                self.assign(\n+                    ptr,\n+                    Rvalue::AddressOf(Mutability::Mut, tcx.mk_place_index(self.place, cur)),\n+                ),\n+                self.assign(\n+                    cur.into(),\n+                    Rvalue::BinaryOp(BinOp::Add, Box::new((move_(cur.into()), one))),\n+                ),\n+            ],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n                 source_info: self.source_info,\n@@ -711,10 +702,7 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![self.assign(\n                 can_go,\n-                Rvalue::BinaryOp(\n-                    BinOp::Eq,\n-                    Box::new((copy(Place::from(cur)), copy(length_or_end))),\n-                ),\n+                Rvalue::BinaryOp(BinOp::Eq, Box::new((copy(Place::from(cur)), copy(len.into())))),\n             )],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -738,13 +726,6 @@ where\n \n     fn open_drop_for_array(&mut self, ety: Ty<'tcx>, opt_size: Option<u64>) -> BasicBlock {\n         debug!(\"open_drop_for_array({:?}, {:?})\", ety, opt_size);\n-\n-        // if size_of::<ety>() == 0 {\n-        //     index_based_loop\n-        // } else {\n-        //     ptr_based_loop\n-        // }\n-\n         let tcx = self.tcx();\n \n         if let Some(size) = opt_size {\n@@ -770,86 +751,36 @@ where\n             }\n         }\n \n-        let move_ = |place: Place<'tcx>| Operand::Move(place);\n-        let elem_size = Place::from(self.new_temp(tcx.types.usize));\n-        let len = Place::from(self.new_temp(tcx.types.usize));\n-\n-        let base_block = BasicBlockData {\n-            statements: vec![\n-                self.assign(elem_size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n-                self.assign(len, Rvalue::Len(self.place)),\n-            ],\n-            is_cleanup: self.unwind.is_cleanup(),\n-            terminator: Some(Terminator {\n-                source_info: self.source_info,\n-                kind: TerminatorKind::SwitchInt {\n-                    discr: move_(elem_size),\n-                    targets: SwitchTargets::static_if(\n-                        0,\n-                        self.drop_loop_pair(ety, false, len),\n-                        self.drop_loop_pair(ety, true, len),\n-                    ),\n-                },\n-            }),\n-        };\n-        self.elaborator.patch().new_block(base_block)\n+        self.drop_loop_pair(ety)\n     }\n \n     /// Creates a pair of drop-loops of `place`, which drops its contents, even\n-    /// in the case of 1 panic. If `ptr_based`, creates a pointer loop,\n-    /// otherwise create an index loop.\n-    fn drop_loop_pair(\n-        &mut self,\n-        ety: Ty<'tcx>,\n-        ptr_based: bool,\n-        length: Place<'tcx>,\n-    ) -> BasicBlock {\n-        debug!(\"drop_loop_pair({:?}, {:?})\", ety, ptr_based);\n+    /// in the case of 1 panic.\n+    fn drop_loop_pair(&mut self, ety: Ty<'tcx>) -> BasicBlock {\n+        debug!(\"drop_loop_pair({:?})\", ety);\n         let tcx = self.tcx();\n-        let iter_ty = if ptr_based { tcx.mk_mut_ptr(ety) } else { tcx.types.usize };\n+        let len = self.new_temp(tcx.types.usize);\n+        let cur = self.new_temp(tcx.types.usize);\n \n-        let cur = self.new_temp(iter_ty);\n-        let length_or_end = if ptr_based { Place::from(self.new_temp(iter_ty)) } else { length };\n+        let unwind =\n+            self.unwind.map(|unwind| self.drop_loop(unwind, cur, len, ety, Unwind::InCleanup));\n \n-        let unwind = self.unwind.map(|unwind| {\n-            self.drop_loop(unwind, cur, length_or_end, ety, Unwind::InCleanup, ptr_based)\n-        });\n+        let loop_block = self.drop_loop(self.succ, cur, len, ety, unwind);\n \n-        let loop_block = self.drop_loop(self.succ, cur, length_or_end, ety, unwind, ptr_based);\n-\n-        let cur = Place::from(cur);\n-        let drop_block_stmts = if ptr_based {\n-            let tmp_ty = tcx.mk_mut_ptr(self.place_ty(self.place));\n-            let tmp = Place::from(self.new_temp(tmp_ty));\n-            // tmp = &raw mut P;\n-            // cur = tmp as *mut T;\n-            // end = Offset(cur, len);\n-            let mir_cast_kind = ty::cast::mir_cast_kind(iter_ty, tmp_ty);\n-            vec![\n-                self.assign(tmp, Rvalue::AddressOf(Mutability::Mut, self.place)),\n-                self.assign(cur, Rvalue::Cast(mir_cast_kind, Operand::Move(tmp), iter_ty)),\n-                self.assign(\n-                    length_or_end,\n-                    Rvalue::BinaryOp(\n-                        BinOp::Offset,\n-                        Box::new((Operand::Copy(cur), Operand::Move(length))),\n-                    ),\n-                ),\n-            ]\n-        } else {\n-            // cur = 0 (length already pushed)\n-            let zero = self.constant_usize(0);\n-            vec![self.assign(cur, Rvalue::Use(zero))]\n-        };\n-        let drop_block = self.elaborator.patch().new_block(BasicBlockData {\n-            statements: drop_block_stmts,\n+        let zero = self.constant_usize(0);\n+        let block = BasicBlockData {\n+            statements: vec![\n+                self.assign(len.into(), Rvalue::Len(self.place)),\n+                self.assign(cur.into(), Rvalue::Use(zero)),\n+            ],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n                 source_info: self.source_info,\n                 kind: TerminatorKind::Goto { target: loop_block },\n             }),\n-        });\n+        };\n \n+        let drop_block = self.elaborator.patch().new_block(block);\n         // FIXME(#34708): handle partially-dropped array/slice elements.\n         let reset_block = self.drop_flag_reset_block(DropFlagMode::Deep, drop_block, unwind);\n         self.drop_flag_test_block(reset_block, self.succ, unwind)"}, {"sha": "df030df153cb2753f2e3c829355ebf2e2adb01b6", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2917,7 +2917,7 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Async)?;\n         let capture_clause = self.parse_capture_clause()?;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ExprKind::Async(capture_clause, DUMMY_NODE_ID, body);\n+        let kind = ExprKind::Async(capture_clause, body);\n         Ok(self.mk_expr_with_attrs(lo.to(self.prev_token.span), kind, attrs))\n     }\n "}, {"sha": "47e032758f23da1b90be4453357f8af649fd1246", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -300,7 +300,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         record_variants!(\n             (self, e, e.kind, Id::Node(e.hir_id), hir, Expr, ExprKind),\n             [\n-                Box, ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n+                ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n                 DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n                 Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n             ]"}, {"sha": "36324e6f8da4aaadd3573e611b18f3111688a652", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -473,7 +473,6 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n@@ -1059,8 +1058,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&l, r_succ)\n             }\n \n-            hir::ExprKind::Box(ref e)\n-            | hir::ExprKind::AddrOf(_, _, ref e)\n+            hir::ExprKind::AddrOf(_, _, ref e)\n             | hir::ExprKind::Cast(ref e, _)\n             | hir::ExprKind::Type(ref e, _)\n             | hir::ExprKind::DropTemps(ref e)\n@@ -1425,7 +1423,6 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Closure { .. }\n         | hir::ExprKind::Path(_)\n         | hir::ExprKind::Yield(..)\n-        | hir::ExprKind::Box(..)\n         | hir::ExprKind::Type(..)\n         | hir::ExprKind::Err(_) => {}\n     }"}, {"sha": "f07a64c7c3ca2ad3beb5b84f08148de432859c5d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -179,8 +179,7 @@ enum ItemKind {\n impl<'tcx> CheckInlineAssembly<'tcx> {\n     fn check_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, span: Span) {\n         match expr.kind {\n-            ExprKind::Box(..)\n-            | ExprKind::ConstBlock(..)\n+            ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n             | ExprKind::MethodCall(..)"}, {"sha": "cd67644589846dc071bf2c3bdaf97257e103054f", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -132,7 +132,7 @@ where\n                 projection.trait_ref_and_own_substs(tcx)\n             } else {\n                 // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n+                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n                 let trait_generics = tcx.generics_of(def_id);\n                 (\n                     tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),"}, {"sha": "356d7f365fe718fc315b1cc0fd0619cbe5c1368f", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -260,9 +260,7 @@ impl<'a, 'b, 'tcx> visit::Visitor<'a> for DefCollector<'a, 'b, 'tcx> {\n                     Async::No => closure_def,\n                 }\n             }\n-            ExprKind::Async(_, async_id, _) => {\n-                self.create_def(async_id, DefPathData::ClosureExpr, expr.span)\n-            }\n+            ExprKind::Async(_, _) => self.create_def(expr.id, DefPathData::ClosureExpr, expr.span),\n             _ => self.parent_def,\n         };\n "}, {"sha": "6e27bcc5bf3d157f2ce429259bb5cf7b4cd08091", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -85,20 +85,28 @@ impl<'a> std::fmt::Debug for ImportKind<'a> {\n             Single {\n                 ref source,\n                 ref target,\n+                ref source_bindings,\n+                ref target_bindings,\n                 ref type_ns_only,\n                 ref nested,\n                 ref id,\n-                // Ignore the following to avoid an infinite loop while printing.\n-                source_bindings: _,\n-                target_bindings: _,\n             } => f\n                 .debug_struct(\"Single\")\n                 .field(\"source\", source)\n                 .field(\"target\", target)\n+                // Ignore the nested bindings to avoid an infinite loop while printing.\n+                .field(\n+                    \"source_bindings\",\n+                    &source_bindings.clone().map(|b| b.into_inner().map(|_| format_args!(\"..\"))),\n+                )\n+                .field(\n+                    \"target_bindings\",\n+                    &target_bindings.clone().map(|b| b.into_inner().map(|_| format_args!(\"..\"))),\n+                )\n                 .field(\"type_ns_only\", type_ns_only)\n                 .field(\"nested\", nested)\n                 .field(\"id\", id)\n-                .finish_non_exhaustive(),\n+                .finish(),\n             Glob { ref is_prelude, ref max_vis, ref id } => f\n                 .debug_struct(\"Glob\")\n                 .field(\"is_prelude\", is_prelude)"}, {"sha": "1afd8851ce067b468e0d840955820853545947fe", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1478,8 +1478,9 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                                     } else {\n                                         LifetimeUseSet::Many\n                                     }),\n-                                    LifetimeRibKind::Generics { .. } => None,\n-                                    LifetimeRibKind::ConstGeneric | LifetimeRibKind::AnonConst => {\n+                                    LifetimeRibKind::Generics { .. }\n+                                    | LifetimeRibKind::ConstGeneric => None,\n+                                    LifetimeRibKind::AnonConst => {\n                                         span_bug!(ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n                                     }\n                                 })"}, {"sha": "0585ed76fe815522fc45deefc245104ac4dc0b7b", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_fuchsia.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{CodeModel, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        llvm_target: \"riscv64gc-unknown-fuchsia\".into(),\n+        llvm_target: \"riscv64-unknown-fuchsia\".into(),\n         pointer_width: 64,\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),"}, {"sha": "a9c4e12681635f8a847ad201c2dfe388bb6ee145", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -144,18 +144,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-        if self.tcx.opt_rpitit_info(obligation.cause.body_id.to_def_id()).is_some() {\n-            return OnUnimplementedNote::default();\n-        }\n-\n         let (def_id, substs) = self\n             .impl_similar_to(trait_ref, obligation)\n             .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));\n         let trait_ref = trait_ref.skip_binder();\n \n-        let body_hir = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n-        let mut flags =\n-            vec![(sym::ItemContext, self.describe_enclosure(body_hir).map(|s| s.to_owned()))];\n+        let mut flags = vec![];\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): HIR is not present for RPITITs,\n+        // but I guess we could synthesize one here. We don't see any errors that rely on\n+        // that yet, though.\n+        let enclosure =\n+            if let Some(body_hir) = self.tcx.opt_local_def_id_to_hir_id(obligation.cause.body_id) {\n+                self.describe_enclosure(body_hir).map(|s| s.to_owned())\n+            } else {\n+                None\n+            };\n+        flags.push((sym::ItemContext, enclosure));\n \n         match obligation.cause.code() {\n             ObligationCauseCode::BuiltinDerivedObligation(..)"}, {"sha": "186bfc701bc4cd701cbfb1eeb24d9d6eb28c9734", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2944,9 +2944,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::SizedYieldType => {\n                 err.note(\"the yield type of a generator must have a statically known size\");\n             }\n-            ObligationCauseCode::SizedBoxType => {\n-                err.note(\"the type of a box expression must have a statically known size\");\n-            }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }"}, {"sha": "23754480fcfb0c28793596e34b2e4d77687ea766", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -211,6 +211,29 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n     type Error = FulfillmentErrorCode<'tcx>;\n     type OUT = Outcome<Self::Obligation, Self::Error>;\n \n+    /// Compared to `needs_process_obligation` this and its callees\n+    /// contain some optimizations that come at the price of false negatives.\n+    ///\n+    /// They\n+    /// - reduce branching by covering only the most common case\n+    /// - take a read-only view of the unification tables which allows skipping undo_log\n+    ///   construction.\n+    /// - bail out on value-cache misses in ena to avoid pointer chasing\n+    /// - hoist RefCell locking out of the loop\n+    #[inline]\n+    fn skippable_obligations<'b>(\n+        &'b self,\n+        it: impl Iterator<Item = &'b Self::Obligation>,\n+    ) -> usize {\n+        let is_unchanged = self.selcx.infcx.is_ty_infer_var_definitely_unchanged();\n+\n+        it.take_while(|o| match o.stalled_on.as_slice() {\n+            [o] => is_unchanged(*o),\n+            _ => false,\n+        })\n+        .count()\n+    }\n+\n     /// Identifies whether a predicate obligation needs processing.\n     ///\n     /// This is always inlined because it has a single callsite and it is"}, {"sha": "b8d9cff9c489ba2d1208c04cd5ae6c3c26a4ea6f", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1298,7 +1298,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -2200,7 +2200,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n     let leaf_def = match specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) {\n         Ok(assoc_ty) => assoc_ty,\n         Err(guar) => return Progress::error(tcx, guar),"}, {"sha": "68b1086e8e3f5d8f87fd6374364e3d68c44ca848", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -244,7 +244,7 @@ fn associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let fn_def_id = tcx.impl_trait_in_trait_parent_fn(opaque_ty_def_id.to_def_id());\n     let trait_def_id = tcx.parent(fn_def_id);\n     assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n \n@@ -289,8 +289,39 @@ fn associated_item_for_impl_trait_in_trait(\n         InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n     )));\n \n-    // Copy generics_of of the opaque.\n-    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+    trait_assoc_ty.is_type_alias_impl_trait(false);\n+\n+    // Copy generics_of of the opaque type item but the trait is the parent.\n+    trait_assoc_ty.generics_of({\n+        let opaque_ty_generics = tcx.generics_of(opaque_ty_def_id);\n+        let opaque_ty_parent_count = opaque_ty_generics.parent_count;\n+        let mut params = opaque_ty_generics.params.clone();\n+\n+        let parent_generics = tcx.generics_of(trait_def_id);\n+        let parent_count = parent_generics.parent_count + parent_generics.params.len();\n+\n+        let mut trait_fn_params = tcx.generics_of(fn_def_id).params.clone();\n+\n+        for param in &mut params {\n+            param.index = param.index + parent_count as u32 + trait_fn_params.len() as u32\n+                - opaque_ty_parent_count as u32;\n+        }\n+\n+        trait_fn_params.extend(params);\n+        params = trait_fn_params;\n+\n+        let param_def_id_to_index =\n+            params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+        ty::Generics {\n+            parent: Some(trait_def_id),\n+            parent_count,\n+            params,\n+            param_def_id_to_index,\n+            has_self: false,\n+            has_late_bound_regions: opaque_ty_generics.has_late_bound_regions,\n+        }\n+    });\n \n     // There are no predicates for the synthesized associated type.\n     trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {"}, {"sha": "9fed1e57c92131f9bbe7a471e20c80115f8da433", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -117,16 +117,22 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n-    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n-    // synthesized associated type doesn't have extra predicates to assume.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n-        return tcx.param_env(fn_def_id);\n-    }\n-\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n+    // When computing the param_env of an RPITIT, use predicates of the containing function,\n+    // *except* for the additional assumption that the RPITIT normalizes to the trait method's\n+    // default opaque type. This is needed to properly check the item bounds of the assoc\n+    // type hold (`check_type_bounds`), since that method already installs a similar projection\n+    // bound, so they will conflict.\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n+    // at least be making sure that the generics in RPITITs and their parent fn don't\n+    // get out of alignment, or else we do actually need to substitute these predicates.\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n+    }\n+\n     // Finally, we have to normalize the bounds in the environment, in\n     // case they contain any associated type projections. This process\n     // can yield errors if the put in illegal associated types, like\n@@ -160,7 +166,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n \n     let local_did = def_id.as_local();\n-    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): This isn't correct for\n+    // RPITITs in const trait fn.\n+    let hir_id = local_did.and_then(|def_id| tcx.opt_local_def_id_to_hir_id(def_id));\n \n     // FIXME(consts): This is not exactly in line with the constness query.\n     let constness = match hir_id {\n@@ -268,8 +276,8 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n-            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n+            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the\n@@ -282,11 +290,24 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                     re\n                 }\n             });\n+\n+            // If we're lowering to associated item, install the opaque type which is just\n+            // the `type_of` of the trait's associated item. If we're using the old lowering\n+            // strategy, then just reinterpret the associated type like an opaque :^)\n+            let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n+                self\n+                    .tcx\n+                    .type_of(alias_ty.def_id)\n+                    .subst(self.tcx, alias_ty.substs)\n+            } else {\n+                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+            };\n+\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n                         projection_ty: alias_ty,\n-                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                        term: default_ty.into(),\n                     },\n                     self.bound_vars,\n                 )"}, {"sha": "5469261ef56592aecf495e384d29ab52a9fdd548", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -87,7 +87,7 @@\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(alloc_layout_extra)]\n@@ -195,7 +195,7 @@\n #![feature(c_unwind)]\n #![feature(with_negative_coherence)]\n #![cfg_attr(test, feature(panic_update_hook))]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Rustdoc features:\n #![feature(doc_cfg)]"}, {"sha": "11cb0827578646f2a47d5f5b0d43809634fc14a8", "filename": "library/core/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -28,7 +28,7 @@ use crate::fmt::{Debug, Display};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n #[rustc_has_incoherent_inherent_impls]\n-#[cfg_attr(not(bootstrap), allow(multiple_supertrait_upcastable))]\n+#[allow(multiple_supertrait_upcastable)]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///\n@@ -489,7 +489,7 @@ impl Error for crate::char::CharTryFromError {\n #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n impl Error for crate::time::TryFromFloatSecsError {}\n \n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n impl Error for crate::ffi::FromBytesUntilNulError {}\n \n #[unstable(feature = \"get_many_mut\", issue = \"104642\")]"}, {"sha": "fe8abdf7fad2fa49c6dc1d5571d3767f6c4cc488", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -153,10 +153,10 @@ impl Error for FromBytesWithNulError {\n /// This error is created by the [`CStr::from_bytes_until_nul`] method.\n ///\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n pub struct FromBytesUntilNulError(());\n \n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n impl fmt::Display for FromBytesUntilNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"data provided does not contain a nul\")\n@@ -324,8 +324,8 @@ impl CStr {\n     /// ```\n     ///\n     #[rustc_allow_const_fn_unstable(const_slice_index)]\n-    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n+    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {"}, {"sha": "fcda097f01fce168a88c602abbb702a6ac732132", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -267,7 +267,7 @@ extern \"C\" {\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[cfg_attr(not(bootstrap), lang = \"format_argument\")]\n+#[lang = \"format_argument\"]\n #[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -280,7 +280,7 @@ pub struct ArgumentV1<'a> {\n /// This struct represents the unsafety of constructing an `Arguments`.\n /// It exists, rather than an unsafe function, in order to simplify the expansion\n /// of `format_args!(..)` and reduce the scope of the `unsafe` block.\n-#[cfg_attr(not(bootstrap), lang = \"format_unsafe_arg\")]\n+#[lang = \"format_unsafe_arg\"]\n #[allow(missing_debug_implementations)]\n #[doc(hidden)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -497,7 +497,7 @@ impl<'a> Arguments<'a> {\n /// ```\n ///\n /// [`format()`]: ../../std/fmt/fn.format.html\n-#[cfg_attr(not(bootstrap), lang = \"format_arguments\")]\n+#[lang = \"format_arguments\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {"}, {"sha": "6d70796f70718f809172eeb6994e7b1a0b7142ae", "filename": "library/core/src/fmt/rt/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -5,7 +5,7 @@\n //! these can be statically allocated and are slightly optimized for the runtime\n #![allow(missing_debug_implementations)]\n \n-#[cfg_attr(not(bootstrap), lang = \"format_placeholder\")]\n+#[lang = \"format_placeholder\"]\n #[derive(Copy, Clone)]\n // FIXME: Rename this to Placeholder\n pub struct Argument {\n@@ -37,7 +37,7 @@ impl Argument {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[cfg_attr(not(bootstrap), lang = \"format_alignment\")]\n+#[lang = \"format_alignment\"]\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n@@ -51,7 +51,7 @@ pub enum Alignment {\n }\n \n /// Used by [width](https://doc.rust-lang.org/std/fmt/#width) and [precision](https://doc.rust-lang.org/std/fmt/#precision) specifiers.\n-#[cfg_attr(not(bootstrap), lang = \"format_count\")]\n+#[lang = \"format_count\"]\n #[derive(Copy, Clone)]\n pub enum Count {\n     /// Specified with a literal number, stores the value"}, {"sha": "4e7bae7bcb05a53f6df970701c59c02c8eb365a7", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -834,7 +834,7 @@ mod impls {\n \n                 #[inline]\n                 fn hash_slice<H: ~const Hasher>(data: &[$ty], state: &mut H) {\n-                    let newlen = data.len() * mem::size_of::<$ty>();\n+                    let newlen = mem::size_of_val(data);\n                     let ptr = data.as_ptr() as *const u8;\n                     // SAFETY: `ptr` is valid and aligned, as this macro is only used\n                     // for numeric primitives which have no padding. The new slice only"}, {"sha": "de638552fa3780c2dee613d1b7baeb0bdda4197e", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -278,7 +278,7 @@\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n-//! # #![cfg_attr(not(bootstrap), allow(map_unit_fn))]\n+//! # #![allow(map_unit_fn)]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{x}\"));\n //! ```"}, {"sha": "d48760ab3ebfa18ad72ccd8e0b862c1e7ee7f25d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -69,7 +69,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[doc(notable_trait)]\n #[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[rustc_diagnostic_item = \"IteratorItem\"]"}, {"sha": "526232f44ee1eff7e7998e50d1e889825976fe20", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -95,7 +95,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(const_align_offset)]\n@@ -241,7 +241,7 @@\n #![feature(unsized_fn_params)]\n #![feature(asm_const)]\n #![feature(const_transmute_copy)]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Target features:\n #![feature(arm_target_feature)]\n@@ -254,7 +254,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(cmpxchg16b_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "9a0fd1f5f517b0e966eed9d1ceb36d5fad802183", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -97,7 +97,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n #[rustc_deny_explicit_impl]\n-#[cfg_attr(not(bootstrap), rustc_coinductive)]\n+#[rustc_coinductive]\n pub trait Sized {\n     // Empty.\n }\n@@ -877,8 +877,7 @@ pub trait Tuple {}\n /// All types that have the same size and alignment as a `usize` or\n /// `*const ()` automatically implement this trait.\n #[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n-#[cfg_attr(bootstrap, lang = \"pointer_sized\")]\n-#[cfg_attr(not(bootstrap), lang = \"pointer_like\")]\n+#[lang = \"pointer_like\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n     label = \"`{Self}` needs to be a pointer-like type\""}, {"sha": "2d48e27158004eaa58c7c4923661febec989dc8d", "filename": "library/core/src/net/socket_addr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -121,7 +121,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -141,7 +141,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n@@ -182,7 +182,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n@@ -226,7 +226,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n@@ -248,7 +248,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n@@ -268,7 +268,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 { ip, port }\n     }\n@@ -285,7 +285,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n         &self.ip\n     }\n@@ -318,7 +318,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -359,7 +359,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 { ip, port, flowinfo, scope_id }\n     }\n@@ -376,7 +376,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n         &self.ip\n     }\n@@ -409,7 +409,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -452,7 +452,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn flowinfo(&self) -> u32 {\n         self.flowinfo\n     }\n@@ -492,7 +492,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn scope_id(&self) -> u32 {\n         self.scope_id\n     }"}, {"sha": "c254803fbf650c6aaf698235b99d98f0a677f179", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -392,14 +392,7 @@ impl<T> NeverShortCircuit<T> {\n     pub fn wrap_mut_2<A, B>(\n         mut f: impl ~const FnMut(A, B) -> T,\n     ) -> impl ~const FnMut(A, B) -> Self {\n-        cfg_if! {\n-            if #[cfg(bootstrap)] {\n-                #[allow(unused_parens)]\n-                (const move |a, b| NeverShortCircuit(f(a, b)))\n-            } else {\n-                const move |a, b| NeverShortCircuit(f(a, b))\n-            }\n-        }\n+        const move |a, b| NeverShortCircuit(f(a, b))\n     }\n }\n "}, {"sha": "2f6b1c74da08ed8bb41af77271a614c9ec99cb6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1951,8 +1951,7 @@ macro_rules! if_not_8_bit {\n     ($_:ident, $($tt:tt)*) => { $($tt)* };\n }\n \n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic_load_store))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store)]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n      $cfg_align:meta,\n@@ -3125,8 +3124,7 @@ atomic_int_ptr_sized! {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n@@ -3168,8 +3166,7 @@ unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_swap`.\n@@ -3186,8 +3183,7 @@ unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_add`.\n@@ -3204,8 +3200,7 @@ unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_sub`.\n@@ -3221,8 +3216,7 @@ unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n@@ -3257,8 +3251,7 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n@@ -3293,8 +3286,7 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_and`\n@@ -3310,8 +3302,7 @@ unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_nand`\n@@ -3327,8 +3318,7 @@ unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_or`\n@@ -3344,8 +3334,7 @@ unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_xor`\n@@ -3362,8 +3351,7 @@ unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_max`\n@@ -3380,8 +3368,7 @@ unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_min`\n@@ -3398,8 +3385,7 @@ unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umax`\n@@ -3416,8 +3402,7 @@ unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umin`"}, {"sha": "4e88ab8ff5c5204c1fd7f2fa4d99a0d8f96f36be", "filename": "library/std/src/os/android/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,8 +1,8 @@\n //! Android-specific networking functionality.\n \n-#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "99a4e0b5106c255af44d5baaf8cc9c20bdd11ea5", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -399,7 +399,7 @@ impl<T: AsFd> AsFd for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"asfd_rc\", since = \"1.69.0\")]\n impl<T: AsFd> AsFd for crate::rc::Rc<T> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {"}, {"sha": "592e072ad908ab4c9029e2ab3a5515597c02181a", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -254,7 +254,7 @@ impl<T: AsRawFd> AsRawFd for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"asfd_rc\", since = \"1.69.0\")]\n impl<T: AsRawFd> AsRawFd for crate::rc::Rc<T> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {"}, {"sha": "fcb3bb8348558cedcb7cd8e41b10d684054a49a5", "filename": "library/std/src/os/linux/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,8 +1,8 @@\n //! Linux-specific networking functionality.\n \n-#![unstable(feature = \"tcp_quickack\", issue = \"96256\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "ea8102c9cc0aff771b3376d9f06406973ba4ea72", "filename": "library/std/src/os/net/linux_ext/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -4,7 +4,7 @@ use crate::os::unix::net::SocketAddr;\n use crate::sealed::Sealed;\n \n /// Platform-specific extensions to [`SocketAddr`].\n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub trait SocketAddrExt: Sealed {\n     /// Creates a Unix socket address in the abstract namespace.\n     ///\n@@ -22,7 +22,6 @@ pub trait SocketAddrExt: Sealed {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, SocketAddr};\n     /// use std::os::linux::net::SocketAddrExt;\n     ///\n@@ -38,6 +37,7 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     fn from_abstract_name<N>(name: N) -> crate::io::Result<SocketAddr>\n     where\n         N: AsRef<[u8]>;\n@@ -47,7 +47,6 @@ pub trait SocketAddrExt: Sealed {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, SocketAddr};\n     /// use std::os::linux::net::SocketAddrExt;\n     ///\n@@ -60,5 +59,6 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     fn as_abstract_name(&self) -> Option<&[u8]>;\n }"}, {"sha": "e7423dce6135b2219a657e40621051127523f961", "filename": "library/std/src/os/net/linux_ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -2,7 +2,7 @@\n \n #![doc(cfg(any(target_os = \"linux\", target_os = \"android\")))]\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n pub(crate) mod addr;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "52a0da5bf1a65b31f4b903cf2c042f3b5e4a0dd9", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -245,12 +245,12 @@ impl SocketAddr {\n     }\n }\n \n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n impl Sealed for SocketAddr {}\n \n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n-#[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n impl linux_ext::addr::SocketAddrExt for SocketAddr {\n     fn as_abstract_name(&self) -> Option<&[u8]> {\n         if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }"}, {"sha": "e64569758a04a11ae4fb3b67805a2414886e8b0c", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -102,7 +102,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -119,7 +118,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixDatagram> {\n         unsafe {\n             let socket = UnixDatagram::unbound()?;\n@@ -217,7 +216,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -235,7 +233,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn connect_addr(&self, socket_addr: &SocketAddr) -> io::Result<()> {\n         unsafe {\n             cvt(libc::connect(\n@@ -523,7 +521,6 @@ impl UnixDatagram {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixDatagram};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -535,7 +532,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn send_to_addr(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize> {\n         unsafe {\n             let count = cvt(libc::sendto("}, {"sha": "83f0debe6765abb0d15268062a78f1bd557c4c18", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -90,7 +90,6 @@ impl UnixListener {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -107,7 +106,7 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixListener> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "65cb4ae07a50426424f187fbe902bd99e860e083", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -106,7 +106,6 @@ impl UnixStream {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(unix_socket_abstract)]\n     /// use std::os::unix::net::{UnixListener, UnixStream};\n     ///\n     /// fn main() -> std::io::Result<()> {\n@@ -123,7 +122,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ````\n-    #[unstable(feature = \"unix_socket_abstract\", issue = \"85410\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn connect_addr(socket_addr: &SocketAddr) -> io::Result<UnixStream> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "373157bd9e836534bf06f1d49c08701bb33b9b31", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1236,7 +1236,17 @@ pub fn link(_original: &Path, _link: &Path) -> io::Result<()> {\n }\n \n pub fn stat(path: &Path) -> io::Result<FileAttr> {\n-    metadata(path, ReparsePoint::Follow)\n+    match metadata(path, ReparsePoint::Follow) {\n+        Err(err) if err.raw_os_error() == Some(c::ERROR_CANT_ACCESS_FILE as i32) => {\n+            if let Ok(attrs) = lstat(path) {\n+                if !attrs.file_type().is_symlink() {\n+                    return Ok(attrs);\n+                }\n+            }\n+            Err(err)\n+        }\n+        result => result,\n+    }\n }\n \n pub fn lstat(path: &Path) -> io::Result<FileAttr> {"}, {"sha": "54971af644c2887235933c1734540e3de1e36952", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -339,6 +339,12 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         \"\"\n     };\n \n+    // `libtest` uses this to know whether or not to support\n+    // `-Zunstable-options`.\n+    if !builder.unstable_features() {\n+        cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n+    }\n+\n     let mut features = String::new();\n \n     // Cranelift doesn't support `asm`."}, {"sha": "0fee094c2223127d9c0d462d2e2efba5c16a0067", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1153,6 +1153,11 @@ impl Config {\n             config.rust_profile_generate = flags.rust_profile_generate;\n         }\n \n+        // rust_info must be set before is_ci_llvm_available() is called.\n+        let default = config.channel == \"dev\";\n+        config.ignore_git = ignore_git.unwrap_or(default);\n+        config.rust_info = GitInfo::new(config.ignore_git, &config.src);\n+\n         if let Some(llvm) = toml.llvm {\n             match llvm.ccache {\n                 Some(StringOrBool::String(ref s)) => config.ccache = Some(s.to_string()),\n@@ -1346,10 +1351,6 @@ impl Config {\n         config.rust_debuginfo_level_tools = with_defaults(debuginfo_level_tools);\n         config.rust_debuginfo_level_tests = debuginfo_level_tests.unwrap_or(0);\n \n-        let default = config.channel == \"dev\";\n-        config.ignore_git = ignore_git.unwrap_or(default);\n-        config.rust_info = GitInfo::new(config.ignore_git, &config.src);\n-\n         let download_rustc = config.download_rustc_commit.is_some();\n         // See https://github.com/rust-lang/compiler-team/issues/326\n         config.stage = match config.cmd {"}, {"sha": "42d895a3413fbdc11acc6cd0f0442a6fc1b5bec3", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -210,10 +210,13 @@ install!((self, builder, _config),\n         }\n     };\n     LlvmTools, alias = \"llvm-tools\", Self::should_build(_config), only_hosts: true, {\n-        let tarball = builder\n-            .ensure(dist::LlvmTools { target: self.target })\n-            .expect(\"missing llvm-tools\");\n-        install_sh(builder, \"llvm-tools\", self.compiler.stage, Some(self.target), &tarball);\n+        if let Some(tarball) = builder.ensure(dist::LlvmTools { target: self.target }) {\n+            install_sh(builder, \"llvm-tools\", self.compiler.stage, Some(self.target), &tarball);\n+        } else {\n+            builder.info(\n+                &format!(\"skipping llvm-tools stage{} ({}): external LLVM\", self.compiler.stage, self.target),\n+            );\n+        }\n     };\n     Rustfmt, alias = \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if let Some(tarball) = builder.ensure(dist::Rustfmt {"}, {"sha": "baddc9da48db8b5de4bc3fbfec40b78ea88bf55a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1118,7 +1118,11 @@ impl Step for Tidy {\n         cmd.arg(&builder.src);\n         cmd.arg(&builder.initial_cargo);\n         cmd.arg(&builder.out);\n-        cmd.arg(builder.jobs().to_string());\n+        // Tidy is heavily IO constrained. Still respect `-j`, but use a higher limit if `jobs` hasn't been configured.\n+        let jobs = builder.config.jobs.unwrap_or_else(|| {\n+            8 * std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get) as u32\n+        });\n+        cmd.arg(jobs.to_string());\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "04fdb15f5acb216bdcfe7ea77577de237c70e04a", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -54,8 +54,8 @@ COPY host-x86_64/dist-x86_64-linux/build-clang.sh /tmp/\n RUN ./build-clang.sh\n ENV CC=clang CXX=clang++\n \n-# rustc-perf version from 2022-07-22\n-ENV PERF_COMMIT 3c253134664fdcba862c539d37f0de18557a9a4c\n+# rustc-perf version from 2023-03-15\n+ENV PERF_COMMIT 9dfaa35193154b690922347ee1141a06ec87a199\n RUN curl -LS -o perf.zip https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n     unzip perf.zip && \\\n     mv rustc-perf-$PERF_COMMIT rustc-perf && \\"}, {"sha": "de0fb95efd079fba350e358bef9660632af577cd", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-clang.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-clang.sh?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -4,7 +4,7 @@ set -ex\n \n source shared.sh\n \n-LLVM=llvmorg-15.0.0\n+LLVM=llvmorg-16.0.0-rc4\n \n mkdir llvm-project\n cd llvm-project"}, {"sha": "d4d80e8f77c5491189625800a67641ce73f73b43", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -175,8 +175,8 @@ def rustc_stage_2(self) -> Path:\n         return super().rustc_stage_2().with_suffix(\".exe\")\n \n     def build_rustc_perf(self):\n-        # rustc-perf version from 2022-07-22\n-        perf_commit = \"3c253134664fdcba862c539d37f0de18557a9a4c\"\n+        # rustc-perf version from 2023-03-15\n+        perf_commit = \"9dfaa35193154b690922347ee1141a06ec87a199\"\n         rustc_perf_zip_path = self.opt_artifacts() / \"perf.zip\"\n \n         def download_rustc_perf():"}, {"sha": "989e091a0d2d8235cb699e313112693cad20169d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -426,7 +426,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.skip_binder().def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.is_impl_trait_in_trait(ty.skip_binder().def_id) {\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)"}, {"sha": "d526a8be0811adc383daba96a070d3bcffd35505", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1502,27 +1502,27 @@ pub(crate) fn visibility_to_src_with_space<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'tcx>,\n     item_did: DefId,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-    let to_print = match visibility {\n-        None => String::new(),\n-        Some(ty::Visibility::Public) => \"pub \".to_owned(),\n+    let to_print: Cow<'static, str> = match visibility {\n+        None => \"\".into(),\n+        Some(ty::Visibility::Public) => \"pub \".into(),\n         Some(ty::Visibility::Restricted(vis_did)) => {\n             // FIXME(camelid): This may not work correctly if `item_did` is a module.\n             //                 However, rustdoc currently never displays a module's\n             //                 visibility, so it shouldn't matter.\n             let parent_module = find_nearest_parent_module(tcx, item_did);\n \n             if vis_did.is_crate_root() {\n-                \"pub(crate) \".to_owned()\n+                \"pub(crate) \".into()\n             } else if parent_module == Some(vis_did) {\n                 // `pub(in foo)` where `foo` is the parent module\n                 // is the same as no visibility modifier\n-                String::new()\n+                \"\".into()\n             } else if parent_module.and_then(|parent| find_nearest_parent_module(tcx, parent))\n                 == Some(vis_did)\n             {\n-                \"pub(super) \".to_owned()\n+                \"pub(super) \".into()\n             } else {\n-                format!(\"pub(in {}) \", tcx.def_path_str(vis_did))\n+                format!(\"pub(in {}) \", tcx.def_path_str(vis_did)).into()\n             }\n         }\n     };"}, {"sha": "0281b1c47f8ce9aeaf64636ca6cd1d9e14539fc7", "filename": "src/librustdoc/html/templates/STYLE.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2FSTYLE.md?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,12 +1,12 @@\n # Style for Templates\n \n-This directory has templates in the [Tera templating language](teradoc), which is very\n-similar to [Jinja2](jinjadoc) and [Django](djangodoc) templates, and also to [Askama](askamadoc).\n+This directory has templates in the [Tera templating language][teradoc], which is very\n+similar to [Jinja2][jinjadoc] and [Django][djangodoc] templates, and also to [Askama][askamadoc].\n \n [teradoc]: https://tera.netlify.app/docs/#templates\n-[jinjadoc]: https://jinja.palletsprojects.com/en/3.0.x/templates/\n-[djangodoc]: https://docs.djangoproject.com/en/3.2/topics/templates/\n-[askamadoc]: https://docs.rs/askama/0.10.5/askama/\n+[jinjadoc]: https://jinja.palletsprojects.com/en/3.1.x/templates/\n+[djangodoc]: https://docs.djangoproject.com/en/4.1/topics/templates/\n+[askamadoc]: https://docs.rs/askama/latest/askama/\n \n We want our rendered output to have as little unnecessary whitespace as\n possible, so that pages load quickly. To achieve that we use Tera's\n@@ -30,8 +30,8 @@ contents don't necessarily need a new line.\n \n Askama templates support quite sophisticated control flow. To keep our templates\n simple and understandable, we use only a subset: `if` and `for`. In particular\n-we avoid [assignments in the template logic](assignments) and [Askama\n-macros](macros). This also may make things easier if we switch to a different\n+we avoid [assignments in the template logic][assignments] and [Askama\n+macros][macros]. This also may make things easier if we switch to a different\n Jinja-style template system, like Askama, in the future.\n \n [assignments]: https://djc.github.io/askama/template_syntax.html#assignments"}, {"sha": "9250d9c280463e71f0c3e1c08676b14d1bf873e6", "filename": "src/stage0.json", "status": "modified", "additions": 398, "deletions": 398, "changes": 796, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=8a3688926c402e3d7201c9951793345ded10c4ad"}, {"sha": "fe28c526be3507692d42f978ef5f1e680c274abc", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n+        ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n         ExprKind::Call(path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 cx.qpath_res(qpath, path.hir_id)"}, {"sha": "f0a1b1dfe56281e29339411eade823f6b21c8bb9", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -124,8 +124,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'t\n #[allow(clippy::too_many_lines)]\n fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: HirId) -> NeverLoopResult {\n     match expr.kind {\n-        ExprKind::Box(e)\n-        | ExprKind::Unary(_, e)\n+        ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)"}, {"sha": "04225beeb704b69a20df0f6bcddd73f389381ac8", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                     self.has_significant_drop = true;\n                 }\n             }\n-            ExprKind::Box(..) |\n             ExprKind::Array(..) |\n             ExprKind::Call(..) |\n             ExprKind::Unary(..) |"}, {"sha": "67618f7038addb2dee7b697369f2c088f56e3282", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -33,10 +33,6 @@ struct SortByKeyDetection {\n /// contains a and the other replaces it with b)\n fn mirrored_exprs(a_expr: &Expr<'_>, a_ident: &Ident, b_expr: &Expr<'_>, b_ident: &Ident) -> bool {\n     match (&a_expr.kind, &b_expr.kind) {\n-        // Two boxes with mirrored contents\n-        (ExprKind::Box(left_expr), ExprKind::Box(right_expr)) => {\n-            mirrored_exprs(left_expr, a_ident, right_expr, b_ident)\n-        },\n         // Two arrays with mirrored contents\n         (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n             iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(left, a_ident, right, b_ident))"}, {"sha": "e3712190e67223db03554879d323b2115d0c0fb6", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -127,8 +127,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => has_no_effect(cx, inner),\n+        | ExprKind::AddrOf(_, _, inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, fields, ref base) => {\n             !has_drop(cx, cx.typeck_results().expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, field.expr))\n@@ -234,8 +233,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        | ExprKind::AddrOf(_, _, inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, fields, ref base) => {\n             if has_drop(cx, cx.typeck_results().expr_ty(expr)) {\n                 None"}, {"sha": "56be8c07e92440d9ad01ad8cc9ff6e60af1de867", "filename": "src/tools/clippy/clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -42,7 +42,7 @@ impl EarlyLintPass for RedundantAsyncBlock {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Async(_, _, block) = &expr.kind && block.stmts.len() == 1 &&\n+        if let ExprKind::Async(_, block) = &expr.kind && block.stmts.len() == 1 &&\n             let Some(Stmt { kind: StmtKind::Expr(last), .. }) = block.stmts.last() &&\n             let ExprKind::Await(future) = &last.kind &&\n             !future.span.from_expansion() &&"}, {"sha": "ae7d19624ba617a4c695cc2877bb650f8c547c70", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -213,8 +213,7 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n     loop {\n         expr = match expr.kind {\n-            ExprKind::Box(e)\n-            | ExprKind::AddrOf(_, _, e)\n+            ExprKind::AddrOf(_, _, e)\n             | ExprKind::Block(\n                 &Block {\n                     stmts: [],"}, {"sha": "e12681c0a0ca659d80c22383c6c10c02ae3d6681", "filename": "src/tools/clippy/clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -380,7 +380,6 @@ impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n             | hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::If(..)"}, {"sha": "fab8e9c2ec1c1b6544a7bd2b65639dbd2d2924c4", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -578,7 +578,7 @@ fn ident_difference_expr_with_base_location(\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n         | (Await(_), Await(_))\n-        | (Async(_, _, _), Async(_, _, _))\n+        | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))"}, {"sha": "bc4adf1596d44d5fc890642306ae22621d086257", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -395,11 +395,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 }\n                 self.expr(field!(let_expr.init));\n             },\n-            ExprKind::Box(inner) => {\n-                bind!(self, inner);\n-                kind!(\"Box({inner})\");\n-                self.expr(inner);\n-            },\n             ExprKind::Array(elements) => {\n                 bind!(self, elements);\n                 kind!(\"Array({elements})\");"}, {"sha": "d2dedc20439571958b344682f3cf908a19484195", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -209,7 +209,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n                 && eq_fn_decl(lf, rf)\n                 && eq_expr(le, re)\n         },\n-        (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n+        (Async(lc, lb), Async(rc, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),"}, {"sha": "d3a6929f67e2ce5634c1f6769e192f840043eeda", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -112,7 +112,6 @@ fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n /// Get the search patterns to use for the given expression\n fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     match e.kind {\n-        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),"}, {"sha": "babbc7294a17348c2d4c0878bc39a9701072eebd", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -199,8 +199,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Box(_)\n-                | ExprKind::Unary(..)\n+                ExprKind::Unary(..)\n                 | ExprKind::Binary(..)\n                 | ExprKind::Loop(..)\n                 | ExprKind::Call(..) => self.eagerness = Lazy,"}, {"sha": "3a6d23ca5c10221b7a81c80f9f389f79e2b1e957", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -249,7 +249,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Box(l), &ExprKind::Box(r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n                 self.inner.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n@@ -628,7 +627,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(j);\n                 }\n             },\n-            ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n+            ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(fun, args) => {"}, {"sha": "44cb5d5756ada6abd2864a5e9088b5d641449d0d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -133,7 +133,6 @@ impl<'a> Sugg<'a> {\n \n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure { .. }"}, {"sha": "86a93f64fb71e78ac5ec52be54d362a8fec4fca0", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -600,7 +600,6 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n                 helper(typeck, false, e, f)?;\n             },\n             ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Box(e)\n             | ExprKind::Cast(e, _)\n             | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;"}, {"sha": "a12ee24515d0e7490953bb97231e2fecad9baa61", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1 +1 @@\n-511364e7874dba9649a264100407e4bffe7b5425\n+ab9bb3ea368b2412531a3e8c07ba73d1dd690134"}, {"sha": "c4baeb2a73bf53eee78d9af0d000af202eec0827", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -822,7 +822,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n+    fn ignore_optional_overflow_checks(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         !ecx.tcx.sess.overflow_checks()\n     }\n "}, {"sha": "ac96bedf2fe86ea23ad566997dbe9619657ad87e", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -366,7 +366,7 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::Async(capture_by, _node_id, ref block) => {\n+        ast::ExprKind::Async(capture_by, ref block) => {\n             let mover = if capture_by == ast::CaptureBy::Value {\n                 \"move \"\n             } else {"}, {"sha": "070ce93f97c174c16771dc8f52854bae457c0905", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -103,7 +103,7 @@ mod os_impl {\n \n         // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n         // (e.g. using `git ls-files`).\n-        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+        walk_no_read(&[path], |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n             let file = entry.path();\n             let extension = file.extension();\n             let scripts = [\"py\", \"sh\", \"ps1\"];"}, {"sha": "84b133068055b174303c1d22878ee6ae07256bdb", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,21 +1,15 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n-use crate::walk::{filter_dirs, walk};\n+use crate::walk::{filter_dirs, filter_not_rust, walk};\n use std::path::Path;\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, filter_dirs, &mut |entry, contents| {\n-        let filename = entry.path();\n-        let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n-        if !is_rust {\n-            return;\n-        }\n-\n+    walk(test_dir, |path| filter_dirs(path) || filter_not_rust(path), &mut |entry, contents| {\n         for (i, line) in contents.lines().enumerate() {\n             if line.contains(\"borrowck_graphviz_postflow\") {\n-                tidy_error!(bad, \"{}:{}: {}\", filename.display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n+                tidy_error!(bad, \"{}:{}: {}\", entry.path().display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n             }\n         }\n     });"}, {"sha": "f18feda533c9ca104b033b2ffef59429eda0ebd0", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -9,8 +9,9 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n-use crate::walk::{filter_dirs, walk, walk_many};\n+use crate::walk::{filter_dirs, filter_not_rust, walk, walk_many};\n use std::collections::hash_map::{Entry, HashMap};\n+use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::num::NonZeroU32;\n@@ -101,17 +102,15 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        filter_dirs,\n+        |path| {\n+            filter_dirs(path)\n+                || filter_not_rust(path)\n+                || path.file_name() == Some(OsStr::new(\"features.rs\"))\n+                || path.file_name() == Some(OsStr::new(\"diagnostic_list.rs\"))\n+        },\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n-            if !filename.ends_with(\".rs\")\n-                || filename == \"features.rs\"\n-                || filename == \"diagnostic_list.rs\"\n-            {\n-                return;\n-            }\n-\n             let filen_underscore = filename.replace('-', \"_\").replace(\".rs\", \"\");\n             let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n "}, {"sha": "f59406c404bab9d4f29be5fa6e9ee47b6b4ae1ea", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -13,7 +13,7 @@ use std::path::PathBuf;\n use std::process;\n use std::str::FromStr;\n use std::sync::atomic::{AtomicBool, Ordering};\n-use std::thread::{scope, ScopedJoinHandle};\n+use std::thread::{self, scope, ScopedJoinHandle};\n \n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n@@ -55,16 +55,28 @@ fn main() {\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n-            ($p:ident $(, $args:expr)* ) => {\n+            ($p:ident) => {\n+                check!(@ $p, name=format!(\"{}\", stringify!($p)));\n+            };\n+            ($p:ident, $path:expr $(, $args:expr)* ) => {\n+                let shortened = $path.strip_prefix(&root_path).unwrap();\n+                let name = if shortened == std::path::Path::new(\"\") {\n+                    format!(\"{} (.)\", stringify!($p))\n+                } else {\n+                    format!(\"{} ({})\", stringify!($p), shortened.display())\n+                };\n+                check!(@ $p, name=name, $path $(,$args)*);\n+            };\n+            (@ $p:ident, name=$name:expr $(, $args:expr)* ) => {\n                 drain_handles(&mut handles);\n \n-                let handle = s.spawn(|| {\n+                let handle = thread::Builder::new().name($name).spawn_scoped(s, || {\n                     let mut flag = false;\n                     $p::check($($args, )* &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n-                });\n+                }).unwrap();\n                 handles.push_back(handle);\n             }\n         }\n@@ -108,7 +120,6 @@ fn main() {\n         check!(edition, &library_path);\n \n         check!(alphabetical, &src_path);\n-        check!(alphabetical, &tests_path);\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n "}, {"sha": "a965c98f48491ceff2acea5f3faea512d9ec85a5", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -19,7 +19,7 @@\n \n use crate::walk::{filter_dirs, walk};\n use regex::{Regex, RegexSet};\n-use std::path::Path;\n+use std::{ffi::OsStr, path::Path};\n \n /// Error code markdown is restricted to 80 columns because they can be\n /// displayed on the console with --example.\n@@ -228,21 +228,33 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        filter_dirs(path) || skip_markdown_path(path)\n+        if path.file_name().map_or(false, |name| name.to_string_lossy().starts_with(\".#\")) {\n+            // vim or emacs temporary file\n+            return true;\n+        }\n+\n+        if filter_dirs(path) || skip_markdown_path(path) {\n+            return true;\n+        }\n+\n+        let extensions = [\"rs\", \"py\", \"js\", \"sh\", \"c\", \"cpp\", \"h\", \"md\", \"css\", \"ftl\", \"goml\"];\n+        if extensions.iter().all(|e| path.extension() != Some(OsStr::new(e))) {\n+            return true;\n+        }\n+\n+        // We only check CSS files in rustdoc.\n+        path.extension().map_or(false, |e| e == \"css\") && !is_in(path, \"src\", \"librustdoc\")\n     }\n+\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n+\n     walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions =\n-            [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\", \".goml\"];\n-        if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n-            return;\n-        }\n \n         let is_style_file = filename.ends_with(\".css\");\n         let under_rustfmt = filename.ends_with(\".rs\") &&\n@@ -253,11 +265,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     a.ends_with(\"src/doc/book\")\n             });\n \n-        if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n-            // We only check CSS files in rustdoc.\n-            return;\n-        }\n-\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }"}, {"sha": "e0fa6aceb853c05686d14618f0348220ec158cc1", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -4,6 +4,8 @@\n use std::collections::BTreeMap;\n use std::path::Path;\n \n+use crate::walk::filter_not_rust;\n+\n const COMMENT: &str = \"//\";\n const LLVM_COMPONENTS_HEADER: &str = \"needs-llvm-components:\";\n const COMPILE_FLAGS_HEADER: &str = \"compile-flags:\";\n@@ -35,61 +37,57 @@ struct RevisionInfo<'a> {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    crate::walk::walk(\n-        path,\n-        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n-        &mut |entry, content| {\n-            let file = entry.path().display();\n-            let mut header_map = BTreeMap::new();\n-            iter_header(content, &mut |cfg, directive| {\n-                if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n-                    let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                    let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n-                    for component in value.split(' ') {\n-                        let component = component.trim();\n-                        if !component.is_empty() {\n-                            comp_vec.push(component);\n-                        }\n-                    }\n-                } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n-                    let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n-                    if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n-                        if let Some((arch, _)) =\n-                            v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n-                        {\n-                            let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                            info.target_arch.replace(arch);\n-                        } else {\n-                            eprintln!(\"{file}: seems to have a malformed --target value\");\n-                            *bad = true;\n-                        }\n+    crate::walk::walk(path, filter_not_rust, &mut |entry, content| {\n+        let file = entry.path().display();\n+        let mut header_map = BTreeMap::new();\n+        iter_header(content, &mut |cfg, directive| {\n+            if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n+                let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n+                for component in value.split(' ') {\n+                    let component = component.trim();\n+                    if !component.is_empty() {\n+                        comp_vec.push(component);\n                     }\n                 }\n-            });\n-            for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n-                let rev = rev.unwrap_or(\"[unspecified]\");\n-                match (target_arch, llvm_components) {\n-                    (None, None) => {}\n-                    (Some(_), None) => {\n-                        eprintln!(\n-                            \"{}: revision {} should specify `{}` as it has `--target` set\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n+            } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n+                let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n+                if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n+                    if let Some((arch, _)) =\n+                        v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n+                    {\n+                        let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                        info.target_arch.replace(arch);\n+                    } else {\n+                        eprintln!(\"{file}: seems to have a malformed --target value\");\n                         *bad = true;\n                     }\n-                    (None, Some(_)) => {\n-                        eprintln!(\n-                            \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n-                        *bad = true;\n-                    }\n-                    (Some(_), Some(_)) => {\n-                        // FIXME: check specified components against the target architectures we\n-                        // gathered.\n-                    }\n                 }\n             }\n-        },\n-    );\n+        });\n+        for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n+            let rev = rev.unwrap_or(\"[unspecified]\");\n+            match (target_arch, llvm_components) {\n+                (None, None) => {}\n+                (Some(_), None) => {\n+                    eprintln!(\n+                        \"{}: revision {} should specify `{}` as it has `--target` set\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (None, Some(_)) => {\n+                    eprintln!(\n+                        \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (Some(_), Some(_)) => {\n+                    // FIXME: check specified components against the target architectures we\n+                    // gathered.\n+                }\n+            }\n+        }\n+    });\n }"}, {"sha": "66f5c932be2a0fca00b21dce473e605e2a45abaf", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 59, "deletions": 63, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -3,87 +3,83 @@\n //! - there are no stray `.stderr` files\n \n use ignore::Walk;\n-use ignore::WalkBuilder;\n+use std::collections::HashMap;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 940;\n const ISSUES_ENTRY_LIMIT: usize = 1978;\n \n-fn check_entries(path: &Path, bad: &mut bool) {\n-    for dir in Walk::new(&path.join(\"ui\")) {\n+fn check_entries(tests_path: &Path, bad: &mut bool) {\n+    let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n+\n+    for dir in Walk::new(&tests_path.join(\"ui\")) {\n         if let Ok(entry) = dir {\n-            if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {\n-                let dir_path = entry.path();\n-                // Use special values for these dirs.\n-                let is_root = path.join(\"ui\") == dir_path;\n-                let is_issues_dir = path.join(\"ui/issues\") == dir_path;\n-                let limit = if is_root {\n-                    ROOT_ENTRY_LIMIT\n-                } else if is_issues_dir {\n-                    ISSUES_ENTRY_LIMIT\n-                } else {\n-                    ENTRY_LIMIT\n-                };\n+            let parent = entry.path().parent().unwrap().to_path_buf();\n+            *directories.entry(parent).or_default() += 1;\n+        }\n+    }\n \n-                let count = WalkBuilder::new(&dir_path)\n-                    .max_depth(Some(1))\n-                    .build()\n-                    .into_iter()\n-                    .collect::<Vec<_>>()\n-                    .len()\n-                    - 1; // remove the dir itself\n+    for (dir_path, count) in directories {\n+        // Use special values for these dirs.\n+        let is_root = tests_path.join(\"ui\") == dir_path;\n+        let is_issues_dir = tests_path.join(\"ui/issues\") == dir_path;\n+        let limit = if is_root {\n+            ROOT_ENTRY_LIMIT\n+        } else if is_issues_dir {\n+            ISSUES_ENTRY_LIMIT\n+        } else {\n+            ENTRY_LIMIT\n+        };\n \n-                if count > limit {\n-                    tidy_error!(\n-                        bad,\n-                        \"following path contains more than {} entries, \\\n-                            you should move the test to some relevant subdirectory (current: {}): {}\",\n-                        limit,\n-                        count,\n-                        dir_path.display()\n-                    );\n-                }\n-            }\n+        if count > limit {\n+            tidy_error!(\n+                bad,\n+                \"following path contains more than {} entries, \\\n+                    you should move the test to some relevant subdirectory (current: {}): {}\",\n+                limit,\n+                count,\n+                dir_path.display()\n+            );\n         }\n     }\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n-    for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n-            let file_path = entry.path();\n-            if let Some(ext) = file_path.extension() {\n-                if ext == \"stderr\" || ext == \"stdout\" {\n-                    // Test output filenames have one of the formats:\n-                    // ```\n-                    // $testname.stderr\n-                    // $testname.$mode.stderr\n-                    // $testname.$revision.stderr\n-                    // $testname.$revision.$mode.stderr\n-                    // ```\n-                    //\n-                    // For now, just make sure that there is a corresponding\n-                    // `$testname.rs` file.\n-                    //\n-                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n-                    // must strip all of them.\n-                    let testname =\n-                        file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n-                    if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n-                        tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n-                    }\n+    let (ui, ui_fulldeps) = (path.join(\"ui\"), path.join(\"ui-fulldeps\"));\n+    let paths = [ui.as_path(), ui_fulldeps.as_path()];\n+    crate::walk::walk_no_read(&paths, |_| false, &mut |entry| {\n+        let file_path = entry.path();\n+        if let Some(ext) = file_path.extension() {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have one of the formats:\n+                // ```\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                // ```\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // `$testname.rs` file.\n+                //\n+                // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                // must strip all of them.\n+                let testname =\n+                    file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n+                if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n+                    tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n+                }\n \n-                    if let Ok(metadata) = fs::metadata(file_path) {\n-                        if metadata.len() == 0 {\n-                            tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n-                        }\n+                if let Ok(metadata) = fs::metadata(file_path) {\n+                    if metadata.len() == 0 {\n+                        tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n                     }\n                 }\n             }\n-        });\n-    }\n+        }\n+    });\n }"}, {"sha": "2ade22c209f5aa157e2e39ac88b8913f9d98b212", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,6 +1,6 @@\n use ignore::DirEntry;\n \n-use std::{fs::File, io::Read, path::Path};\n+use std::{ffi::OsStr, fs::File, io::Read, path::Path};\n \n /// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n@@ -33,23 +33,26 @@ pub fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-pub fn walk_many(\n-    paths: &[&Path],\n+/// Filter for only files that end in `.rs`.\n+pub fn filter_not_rust(path: &Path) -> bool {\n+    path.extension() != Some(OsStr::new(\"rs\")) && !path.is_dir()\n+}\n+\n+pub fn walk(\n+    path: &Path,\n     skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n-    for path in paths {\n-        walk(path, skip.clone(), f);\n-    }\n+    walk_many(&[path], skip, f);\n }\n \n-pub fn walk(\n-    path: &Path,\n-    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     let mut contents = Vec::new();\n-    walk_no_read(path, skip, &mut |entry| {\n+    walk_no_read(paths, skip, &mut |entry| {\n         contents.clear();\n         let mut file = t!(File::open(entry.path()), entry.path());\n         t!(file.read_to_end(&mut contents), entry.path());\n@@ -62,11 +65,14 @@ pub fn walk(\n }\n \n pub(crate) fn walk_no_read(\n-    path: &Path,\n+    paths: &[&Path],\n     skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let mut walker = ignore::WalkBuilder::new(path);\n+    let mut walker = ignore::WalkBuilder::new(paths[0]);\n+    for path in &paths[1..] {\n+        walker.add(path);\n+    }\n     let walker = walker.filter_entry(move |e| !skip(e.path()));\n     for entry in walker.build() {\n         if let Ok(entry) = entry {"}, {"sha": "39909d7abfd40b5597f40b171c1259bc68e4d4f9", "filename": "tests/codegen/inherit_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fcodegen%2Finherit_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fcodegen%2Finherit_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Finherit_overflow.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -4,7 +4,7 @@\n //[NOASSERT] compile-flags: -Coverflow-checks=off\n \n // CHECK-LABEL: define{{.*}} @assertion\n-// ASSERT: call void @_ZN4core9panicking5panic17h\n+// ASSERT: call void @{{.*4core9panicking5panic}}\n // NOASSERT: ret i8 0\n #[no_mangle]\n pub fn assertion() -> u8 {"}, {"sha": "3884d29db41776f9eec87dd90c21ddffa5dab695", "filename": "tests/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 17, "deletions": 63, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -4,21 +4,13 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     let mut _2: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     let mut _3: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _4: usize;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _5: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _6: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _7: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _8: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _9: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _10: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _11: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _12: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _13: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _14: bool;                   // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    let mut _15: *mut [std::string::String]; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _4: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _5: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _6: *mut std::string::String; // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+    let mut _7: bool;                    // in scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n \n     bb0: {\n-        goto -> bb15;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        goto -> bb8;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb1: {\n@@ -30,72 +22,34 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     }\n \n     bb3 (cleanup): {\n-        _5 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_5)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _4 = &raw mut (*_1)[_3];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _3 = Add(move _3, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop((*_4)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb4 (cleanup): {\n-        _6 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _5 = Eq(_3, _2);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb5: {\n-        _7 = &raw mut (*_1)[_4];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _4 = Add(move _4, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_7)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _6 = &raw mut (*_1)[_3];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _3 = Add(move _3, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop((*_6)) -> [return: bb6, unwind: bb4]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb6: {\n-        _8 = Eq(_4, _3);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _8) -> [0: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _7 = Eq(_3, _2);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        switchInt(move _7) -> [0: bb5, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb7: {\n-        _4 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _2 = Len((*_1));                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _3 = const 0_usize;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         goto -> bb6;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb8: {\n         goto -> bb7;                     // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n-\n-    bb9 (cleanup): {\n-        _11 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_11)) -> bb10;            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb10 (cleanup): {\n-        _12 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _12) -> [0: bb9, otherwise: bb2]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb11: {\n-        _13 = _9;                        // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = Offset(move _9, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_13)) -> [return: bb12, unwind: bb10]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb12: {\n-        _14 = Eq(_9, _10);               // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _14) -> [0: bb11, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb13: {\n-        _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = move _15 as *mut std::string::String (PtrToPtr); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        goto -> bb12;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb14: {\n-        goto -> bb13;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n-\n-    bb15: {\n-        _2 = SizeOf(std::string::String); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _3 = Len((*_1));                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        switchInt(move _2) -> [0: bb8, otherwise: bb14]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-    }\n }"}, {"sha": "7ccf2f2301d2404c1689c718d8837d9d60c2460e", "filename": "tests/ui/async-await/async-trait-fn.current.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,42 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:6:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn bar(&self) {}\n+   |     -----^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:8:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "7ccf2f2301d2404c1689c718d8837d9d60c2460e", "filename": "tests/ui/async-await/async-trait-fn.next.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,42 @@\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:6:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn bar(&self) {}\n+   |     -----^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:8:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "04123badb5383f21353f74d56589d6e94ba61551", "filename": "tests/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`"}, {"sha": "68ebe3507ac35d2dbc0910212ff534e4d80ec4ef", "filename": "tests/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:3:5\n+  --> $DIR/async-trait-fn.rs:4:5\n    |\n LL |     async fn foo() {}\n    |     -----^^^^^^^^^\n@@ -12,7 +12,7 @@ LL |     async fn foo() {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:4:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn bar(&self) {}\n    |     -----^^^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     async fn bar(&self) {}\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:6:5\n    |\n LL |     async fn baz() {\n    |     -----^^^^^^^^^"}, {"sha": "c47b99e657e1462fc1ba70d2a0564954415275c5", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.current.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:3:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n    |\n LL | async fn foo() {}\n    | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -8,7 +8,7 @@ LL | async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:5:12\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -17,7 +17,7 @@ LL | fn baz() { async fn foo() {} }\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:7:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -26,7 +26,7 @@ LL | async fn async_baz() {\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -35,7 +35,7 @@ LL |     async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:14:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -44,7 +44,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -80,7 +80,7 @@ LL |             async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n    |\n LL |     async fn foo() {}\n    |     -----^^^^^^^^^", "previous_filename": "tests/ui/async-await/edition-deny-async-fns-2015.stderr"}, {"sha": "c47b99e657e1462fc1ba70d2a0564954415275c5", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.next.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,98 @@\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+   |\n+LL | async fn foo() {}\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+   |\n+LL | fn baz() { async fn foo() {} }\n+   |            ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+   |\n+LL | async fn async_baz() {\n+   | ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+   |\n+LL |     async fn bar() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n+   |\n+LL |         async fn bar() {}\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+   |\n+LL |         async fn foo() {}\n+   |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0670]: `async fn` is not permitted in Rust 2015\n+  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n+   |\n+LL |             async fn bar() {}\n+   |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n+   |\n+   = help: pass `--edition 2021` to `rustc`\n+   = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {}\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0670, E0706.\n+For more information about an error, try `rustc --explain E0670`."}, {"sha": "d4c30dc9d828d9dbf86fb45b3f663410a7496f9b", "filename": "tests/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // edition:2015\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n "}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:4:12\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dd1af93d706c43c2a8396e1fafc8316ec8573d19", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.stderr"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "146e74ec2d03b812f1c771f2a7db2978e1e088ac", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics.stderr"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "507500abf4e1cd5501a4b1ec291a6d956761f815", "filename": "tests/ui/async-await/in-trait/async-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "be23384e049da851cc674be2a4c73ecd814b1755", "filename": "tests/ui/async-await/in-trait/generics-mismatch.current.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:13:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "be23384e049da851cc674be2a4c73ecd814b1755", "filename": "tests/ui/async-await/in-trait/generics-mismatch.next.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:13:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "fc29783c0e32e820570e090c4e2902932f0df62e", "filename": "tests/ui/async-await/in-trait/generics-mismatch.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    async fn foo<T>();\n+}\n+\n+impl Foo for () {\n+    async fn foo<const N: usize>() {}\n+    //~^ ERROR: method `foo` has an incompatible generic parameter for trait `Foo` [E0053]\n+}\n+\n+fn main() {}"}, {"sha": "3518aa05cecc2f786d68cb2007defcc2910c01b5", "filename": "tests/ui/async-await/in-trait/generics-mismatch.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fgenerics-mismatch.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,16 @@\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Foo`\n+  --> $DIR/generics-mismatch.rs:11:18\n+   |\n+LL | trait Foo {\n+   |       ---\n+LL |     async fn foo<T>();\n+   |                  - expected type parameter\n+...\n+LL | impl Foo for () {\n+   | ---------------\n+LL |     async fn foo<const N: usize>() {}\n+   |                  ^^^^^^^^^^^^^^ found const parameter of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "a5efc757156567589331d7541917d17fc52d7b59", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:3:12\n+  --> $DIR/return-type-suggestion.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:8:9\n+  --> $DIR/return-type-suggestion.rs:10:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`", "previous_filename": "tests/ui/async-await/in-trait/return-type-suggestion.stderr"}, {"sha": "a5efc757156567589331d7541917d17fc52d7b59", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.next.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/return-type-suggestion.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-type-suggestion.rs:10:9\n+   |\n+LL |         Ok(())\n+   |         ^^^^^^- help: consider using a semicolon here: `;`\n+   |         |\n+   |         expected `()`, found `Result<(), _>`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<(), _>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3de66306d9ab89f455a85792385d73212a0ba8b5", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}, {"sha": "463a37d7e3d1357f3c4d6d8d63c9ff8a3c15aa11", "filename": "tests/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n@@ -10,7 +10,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n@@ -22,7 +22,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n@@ -34,7 +34,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n@@ -94,7 +94,7 @@ LL |     let _ = [0; bar::<N>()];\n    |\n    = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n@@ -106,7 +106,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n@@ -134,7 +134,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n@@ -146,7 +146,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n@@ -160,3 +160,4 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n \n error: aborting due to 16 previous errors\n \n+For more information about this error, try `rustc --explain E0794`."}, {"sha": "a7bd9c62b0ee36ba1d9f52a18a479b15fd93759d", "filename": "tests/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -216,7 +216,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _: [u8; bar::<{ N }>()];\n    |                       +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n@@ -228,7 +228,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n@@ -251,7 +251,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n@@ -263,7 +263,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n@@ -294,7 +294,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n@@ -306,7 +306,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n@@ -329,7 +329,7 @@ help: if this generic argument was intended as a const parameter, surround it wi\n LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n@@ -341,7 +341,7 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n@@ -355,5 +355,5 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n \n error: aborting due to 36 previous errors\n \n-Some errors have detailed explanations: E0658, E0747.\n+Some errors have detailed explanations: E0658, E0747, E0794.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:3:12\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "163bb4fcf773daca83158c50d70b7d0ca259cae8", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/default-body-type-err-2.rs:8:9\n+  --> $DIR/default-body-type-err-2.rs:10:9\n    |\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/default-body-type-err-2.rs:10:9\n+   |\n+LL |         42\n+   |         ^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         expected `String`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "623237763100dd7741e88fe5050366650cd9b66f", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![allow(incomplete_features)]\n #![feature(async_fn_in_trait)]"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n-  --> $DIR/default-body-type-err.rs:7:22\n+  --> $DIR/default-body-type-err.rs:10:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n+  --> $DIR/default-body-type-err.rs:10:22\n+   |\n+LL |     fn lol(&self) -> impl Deref<Target = String> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n+LL |\n+LL |         &1i32\n+   |         ----- return type was inferred to be `&i32` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "9bd5b7779898b5e0a55d225ef4a84fb7be7ceb01", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![allow(incomplete_features)]\n #![feature(return_position_impl_trait_in_trait)]\n "}, {"sha": "3c24eff9ae3016400f655e8e1b1f37e2a0a78a08", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/default-body-with-rpit.rs:11:9\n+  --> $DIR/default-body-with-rpit.rs:13:9\n    |\n LL |         \"\"\n    |         ^^ expected `impl Debug`, got `&'static str`\n    |\n note: previous use here\n-  --> $DIR/default-body-with-rpit.rs:10:39\n+  --> $DIR/default-body-with-rpit.rs:12:39\n    |\n LL |       async fn baz(&self) -> impl Debug {\n    |  _______________________________________^\n@@ -14,7 +14,7 @@ LL | |     }\n    | |_____^\n \n error[E0720]: cannot resolve opaque type\n-  --> $DIR/default-body-with-rpit.rs:10:28\n+  --> $DIR/default-body-with-rpit.rs:12:28\n    |\n LL |     async fn baz(&self) -> impl Debug {\n    |                            ^^^^^^^^^^ cannot resolve opaque type", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.stderr"}, {"sha": "3c24eff9ae3016400f655e8e1b1f37e2a0a78a08", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.next.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,24 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/default-body-with-rpit.rs:13:9\n+   |\n+LL |         \"\"\n+   |         ^^ expected `impl Debug`, got `&'static str`\n+   |\n+note: previous use here\n+  --> $DIR/default-body-with-rpit.rs:12:39\n+   |\n+LL |       async fn baz(&self) -> impl Debug {\n+   |  _______________________________________^\n+LL | |         \"\"\n+LL | |     }\n+   | |_____^\n+\n+error[E0720]: cannot resolve opaque type\n+  --> $DIR/default-body-with-rpit.rs:12:28\n+   |\n+LL |     async fn baz(&self) -> impl Debug {\n+   |                            ^^^^^^^^^^ cannot resolve opaque type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "6bcc7b9ef95f0a40ae6f21fe31f225089040d964", "filename": "tests/ui/impl-trait/in-trait/default-body-with-rpit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-with-rpit.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,7 @@\n // edition:2021\n // known-bug: #108304\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "ab6a51c6bcb84d8842eaad3e0c91e66125b88833", "filename": "tests/ui/impl-trait/in-trait/default-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:5:12\n+  --> $DIR/default-method-constraint.rs:7:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-constraint.stderr"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-constraint.rs:7:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e85fe3c8626f45e003d6a39d9e7ab3d196cad744", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n // This didn't work in the previous default RPITIT method hack attempt\n "}, {"sha": "653016cf009a9dc2284ba72e6e501ce328f5438a", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: `()` doesn't implement `std::fmt::Display`\n-  --> $DIR/doesnt-satisfy.rs:9:17\n+  --> $DIR/doesnt-satisfy.rs:12:17\n    |\n LL |     fn bar() -> () {}\n    |                 ^^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n note: required by a bound in `Foo::bar::{opaque#0}`\n-  --> $DIR/doesnt-satisfy.rs:5:22\n+  --> $DIR/doesnt-satisfy.rs:8:22\n    |\n LL |     fn bar() -> impl std::fmt::Display;\n    |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::bar::{opaque#0}`", "previous_filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.stderr"}, {"sha": "bbfa089ceef92157f6ec000e09ee22b3485df943", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/doesnt-satisfy.rs:12:17\n+   |\n+LL |     fn bar() -> () {}\n+   |                 ^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `Foo::{opaque#0}`\n+  --> $DIR/doesnt-satisfy.rs:8:22\n+   |\n+LL |     fn bar() -> impl std::fmt::Display;\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "fcd0b51eea4fc29361b4eda7621a07fe7caaa24f", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "310edbcb6cd1efc175144c569bdecf7c16c4f0a9", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n-  --> $DIR/generics-mismatch.rs:11:12\n+  --> $DIR/generics-mismatch.rs:14:12\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |           - expected 0 type parameters", "previous_filename": "tests/ui/impl-trait/in-trait/generics-mismatch.stderr"}, {"sha": "310edbcb6cd1efc175144c569bdecf7c16c4f0a9", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/generics-mismatch.rs:14:12\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |           - expected 0 type parameters\n+...\n+LL |     fn bar<T>(&self) {}\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "9259ca193d1de79e085334798fe1a2cfbdcac029", "filename": "tests/ui/impl-trait/in-trait/generics-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fgenerics-mismatch.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102571.rs:20:9\n+  --> $DIR/issue-102571.rs:23:9\n    |\n LL |     let () = t.bar();\n    |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102571.stderr"}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.next.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102571.rs:23:9\n+   |\n+LL |     let () = t.bar();\n+   |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+   |         |\n+   |         expected associated type, found `()`\n+   |\n+   = note: expected associated type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+                    found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f0ddab5e7f2271e5bd470fc3c57e18e4beceb4f1", "filename": "tests/ui/impl-trait/in-trait/issue-102571.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/specialization-broken.rs:16:22\n+  --> $DIR/specialization-broken.rs:19:22\n    |\n LL | default impl<U> Foo for U\n    |              - this type parameter\n@@ -11,15 +11,15 @@ LL |     fn bar(&self) -> U {\n    |                      help: change the output type to match the trait: `impl Sized`\n    |\n note: type in trait\n-  --> $DIR/specialization-broken.rs:9:22\n+  --> $DIR/specialization-broken.rs:12:22\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n    = note: expected signature `fn(&U) -> impl Sized`\n               found signature `fn(&U) -> U`\n \n error: method with return-position `impl Trait` in trait cannot be specialized\n-  --> $DIR/specialization-broken.rs:16:5\n+  --> $DIR/specialization-broken.rs:19:5\n    |\n LL |     fn bar(&self) -> U {\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/specialization-broken.stderr"}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.next.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,31 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:19:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:12:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n+\n+error: method with return-position `impl Trait` in trait cannot be specialized\n+  --> $DIR/specialization-broken.rs:19:5\n+   |\n+LL |     fn bar(&self) -> U {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "658d0709717a1bb14eb83d54b6fa287ab436ba2f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n // FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n // But we fixed an ICE anyways.\n "}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:9:22\n+  --> $DIR/wf-bounds.rs:11:22\n    |\n LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n    |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,14 +9,14 @@ note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:12:23\n+  --> $DIR/wf-bounds.rs:14:23\n    |\n LL |     fn nya2() -> impl Wf<[u8]>;\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Wf`\n-  --> $DIR/wf-bounds.rs:6:10\n+  --> $DIR/wf-bounds.rs:8:10\n    |\n LL | trait Wf<T> {}\n    |          ^ required by this bound in `Wf`", "previous_filename": "tests/ui/impl-trait/in-trait/wf-bounds.stderr"}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.next.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:11:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:14:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:8:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "39f412753159e474249d551b49cf376c29c5a3a0", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,6 @@\n // issue #101663\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "6aa8ff461a9a92434cb9272087cc3cdced91adf3", "filename": "tests/ui/late-bound-lifetimes/issue-80618.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,8 @@\n+fn foo<'a>(x: &'a str) -> &'a str {\n+    x\n+}\n+\n+fn main() {\n+    let _ = foo::<'static>;\n+//~^ ERROR cannot specify lifetime arguments explicitly if late bound lifetime parameters are present [E0794]\n+}"}, {"sha": "cf7423fc16feb43b59680d311bd4d725f67de0de", "filename": "tests/ui/late-bound-lifetimes/issue-80618.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flate-bound-lifetimes%2Fissue-80618.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,15 @@\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/issue-80618.rs:6:19\n+   |\n+LL |     let _ = foo::<'static>;\n+   |                   ^^^^^^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/issue-80618.rs:1:8\n+   |\n+LL | fn foo<'a>(x: &'a str) -> &'a str {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0794`."}, {"sha": "0ae68ad04f755af80b936d5a29639fda9102983a", "filename": "tests/ui/lifetimes/unusual-rib-combinations.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -25,4 +25,9 @@ fn d<const C: S>() {}\n //~^ ERROR missing lifetime specifier\n //~| ERROR `S<'_>` is forbidden as the type of a const generic parameter\n \n+trait Foo<'a> {}\n+struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+//~^ ERROR use of non-static lifetime `'a` in const generic\n+//~| ERROR `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n+\n fn main() {}"}, {"sha": "20163d289b1381155df60d430954ca143291ae90", "filename": "tests/ui/lifetimes/unusual-rib-combinations.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -9,6 +9,14 @@ help: consider introducing a named lifetime parameter\n LL | fn d<'a, const C: S<'a>>() {}\n    |      +++           ++++\n \n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/unusual-rib-combinations.rs:29:22\n+   |\n+LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+   |                      ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unusual-rib-combinations.rs:7:16\n    |\n@@ -55,7 +63,16 @@ LL | fn d<const C: S>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: aborting due to 7 previous errors\n+error: `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n+  --> $DIR/unusual-rib-combinations.rs:29:21\n+   |\n+LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0106, E0214, E0308.\n+Some errors have detailed explanations: E0106, E0214, E0308, E0771.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "86a193c9e44acf54874186c917f37917b5d64474", "filename": "tests/ui/macros/issue-109237.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmacros%2Fissue-109237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmacros%2Fissue-109237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-109237.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! statement {\n+    () => {;}; //~ ERROR expected expression\n+}\n+\n+fn main() {\n+    let _ = statement!();\n+}"}, {"sha": "d125cff63eab217daff20e5e017549efca2933d0", "filename": "tests/ui/macros/issue-109237.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmacros%2Fissue-109237.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmacros%2Fissue-109237.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-109237.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,18 @@\n+error: expected expression, found `;`\n+  --> $DIR/issue-109237.rs:2:12\n+   |\n+LL |     () => {;};\n+   |            ^ expected expression\n+...\n+LL |     let _ = statement!();\n+   |             ------------ in this macro invocation\n+   |\n+   = note: the macro call doesn't expand to an expression, but it can expand to a statement\n+   = note: this error originates in the macro `statement` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: surround the macro invocation with `{}` to interpret the expansion as a statement\n+   |\n+LL |     let _ = { statement!(); };\n+   |             ~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "645d8b8d14ad2c2d986d277eaaa793017532121e", "filename": "tests/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -30,7 +30,7 @@ note: method defined here, with 2 lifetime parameters: `'a`, `'b`\n LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:27:15\n    |\n LL |     S::late::<'static>(S, &0, &0);\n@@ -42,7 +42,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:29:15\n    |\n LL |     S::late::<'static, 'static>(S, &0, &0);\n@@ -54,7 +54,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:31:15\n    |\n LL |     S::late::<'static, 'static, 'static>(S, &0, &0);\n@@ -66,7 +66,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:34:21\n    |\n LL |     S::late_early::<'static, 'static>(S, &0);\n@@ -78,7 +78,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:36:21\n    |\n LL |     S::late_early::<'static, 'static, 'static>(S, &0);\n@@ -90,7 +90,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n    |                   ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:40:24\n    |\n LL |     S::late_implicit::<'static>(S, &0, &0);\n@@ -102,7 +102,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:42:24\n    |\n LL |     S::late_implicit::<'static, 'static>(S, &0, &0);\n@@ -114,7 +114,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:44:24\n    |\n LL |     S::late_implicit::<'static, 'static, 'static>(S, &0, &0);\n@@ -126,7 +126,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n    |                               ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:47:30\n    |\n LL |     S::late_implicit_early::<'static, 'static>(S, &0);\n@@ -138,7 +138,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:49:30\n    |\n LL |     S::late_implicit_early::<'static, 'static, 'static>(S, &0);\n@@ -150,7 +150,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n    |                                         ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:52:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static>(&S);\n@@ -162,7 +162,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:54:35\n    |\n LL |     S::late_implicit_self_early::<'static, 'static, 'static>(&S);\n@@ -174,7 +174,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_implicit_self_early<'b>(&self) -> &'b u8 { loop {} }\n    |                                     ^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:57:28\n    |\n LL |     S::late_unused_early::<'static, 'static>(S);\n@@ -186,7 +186,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late_unused_early<'a, 'b>(self) -> &'b u8 { loop {} }\n    |                          ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args-fail.rs:59:28\n    |\n LL |     S::late_unused_early::<'static, 'static, 'static>(S);\n@@ -232,4 +232,5 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n \n error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0794.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "b215d5832171f6192ccc250f51dc5e0783f27f1b", "filename": "tests/ui/methods/method-call-lifetime-args.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-lifetime-args.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args.rs:9:15\n    |\n LL |     S::late::<'static>(S, &0, &0);\n@@ -10,7 +10,7 @@ note: the late bound lifetime parameter is introduced here\n LL |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n    |             ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/method-call-lifetime-args.rs:11:24\n    |\n LL |     S::late_implicit::<'static>(S, &0, &0);\n@@ -24,3 +24,4 @@ LL |     fn late_implicit(self, _: &u8, _: &u8) {}\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0794`."}, {"sha": "87db2636fb24df67d437a3259e9f28776b08b9e0", "filename": "tests/ui/suggestions/bad-infer-in-trait-impl.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,10 @@\n+trait Foo {\n+    fn bar();\n+}\n+\n+impl Foo for () {\n+    fn bar(s: _) {}\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+}\n+\n+fn main() {}"}, {"sha": "418690ff85fa21223c84ed37c3d88a1a94a38ed5", "filename": "tests/ui/suggestions/bad-infer-in-trait-impl.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fbad-infer-in-trait-impl.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,14 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/bad-infer-in-trait-impl.rs:6:15\n+   |\n+LL |     fn bar(s: _) {}\n+   |               ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL |     fn bar<T>(s: T) {}\n+   |           +++    ~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "459b94f943b502a22cddea3c6c265acce8de5370", "filename": "tests/ui/suggestions/suggest-ret-on-async-w-late.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+// edition: 2021\n+\n+// Make sure we don't ICE when suggesting a return type\n+// for an async fn that has late-bound vars...\n+\n+async fn ice(_: &i32) {\n+    true\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "bff864b222bff9394fae69ed5bf277cc8ab890b9", "filename": "tests/ui/suggestions/suggest-ret-on-async-w-late.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-ret-on-async-w-late.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ret-on-async-w-late.rs:7:5\n+   |\n+LL | async fn ice(_: &i32) {\n+   |                       - help: try adding a return type: `-> bool`\n+LL |     true\n+   |     ^^^^ expected `()`, found `bool`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "50f0152e904f4706c1874bd043d834b46a9c1549", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.rs?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,11 @@\n+#![feature(non_lifetime_binders)]\n+//~^ WARN the feature `non_lifetime_binders` is incomplete\n+\n+fn f()\n+where\n+    for<B> B::Item: Send,\n+    //~^ ERROR ambiguous associated type\n+{\n+}\n+\n+fn main() {}"}, {"sha": "be6955c111e834ff04fde224e7bbe3f90979e624", "filename": "tests/ui/traits/non_lifetime_binders/missing-assoc-item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3688926c402e3d7201c9951793345ded10c4ad/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fmissing-assoc-item.stderr?ref=8a3688926c402e3d7201c9951793345ded10c4ad", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-assoc-item.rs:1:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/missing-assoc-item.rs:6:12\n+   |\n+LL |     for<B> B::Item: Send,\n+   |            ^^^^^^^ help: use the fully-qualified path: `<B as IntoIterator>::Item`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0223`."}]}