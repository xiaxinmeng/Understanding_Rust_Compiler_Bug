{"sha": "d59fa081ec272573ef560c4ea914466fce74db3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OWZhMDgxZWMyNzI1NzNlZjU2MGM0ZWE5MTQ0NjZmY2U3NGRiM2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T06:52:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T06:52:16Z"}, "message": "fix ICE when debug-printing MIR", "tree": {"sha": "c9f89390c19d0373c1d25d3ad17dcfd12955a7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f89390c19d0373c1d25d3ad17dcfd12955a7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d59fa081ec272573ef560c4ea914466fce74db3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d59fa081ec272573ef560c4ea914466fce74db3c", "html_url": "https://github.com/rust-lang/rust/commit/d59fa081ec272573ef560c4ea914466fce74db3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d59fa081ec272573ef560c4ea914466fce74db3c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52b605c8cb2f730e607de0777a694cd1b9bb3e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/52b605c8cb2f730e607de0777a694cd1b9bb3e15", "html_url": "https://github.com/rust-lang/rust/commit/52b605c8cb2f730e607de0777a694cd1b9bb3e15"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "a47addf18044cf14176a3cfe3ad6fb52c0c2554b", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d59fa081ec272573ef560c4ea914466fce74db3c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d59fa081ec272573ef560c4ea914466fce74db3c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=d59fa081ec272573ef560c4ea914466fce74db3c", "patch": "@@ -1,5 +1,7 @@\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n-use crate::mir::interpret::{sign_extend, truncate, AllocId, ConstValue, Pointer, Scalar};\n+use crate::mir::interpret::{\n+    sign_extend, truncate, AllocId, ConstValue, GlobalAlloc, Pointer, Scalar,\n+};\n use crate::ty::layout::IntegerExt;\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n@@ -951,15 +953,20 @@ pub trait PrettyPrinter<'tcx>:\n                     },\n                     _,\n                 ),\n-            ) => {\n-                let byte_str = self\n-                    .tcx()\n-                    .global_alloc(ptr.alloc_id)\n-                    .unwrap_memory()\n-                    .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n-                    .unwrap();\n-                p!(pretty_print_byte_str(byte_str));\n-            }\n+            ) => match self.tcx().get_global_alloc(ptr.alloc_id) {\n+                Some(GlobalAlloc::Memory(alloc)) => {\n+                    if let Ok(byte_str) = alloc.get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n+                    {\n+                        p!(pretty_print_byte_str(byte_str))\n+                    } else {\n+                        p!(write(\"<too short allocation>\"))\n+                    }\n+                }\n+                // FIXME: for statics and functions, we could in principle print more detail.\n+                Some(GlobalAlloc::Static(def_id)) => p!(write(\"<static({:?})>\", def_id)),\n+                Some(GlobalAlloc::Function(_)) => p!(write(\"<function>\")),\n+                None => p!(write(\"<dangling pointer>\")),\n+            },\n             // Bool\n             (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n             (Scalar::Raw { data: 1, .. }, ty::Bool) => p!(write(\"true\")),\n@@ -1018,6 +1025,9 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n+                // FIXME: this can ICE when the ptr is dangling or points to a non-function.\n+                // We should probably have a helper method to share code with the \"Byte strings\"\n+                // printing above (which also has to handle pointers to all sorts of things).\n                 let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),"}]}